<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术笔记</title>
  
  <subtitle>有输入,有输出</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muxiaobai.github.io/"/>
  <updated>2019-06-27T12:52:41.511Z</updated>
  <id>https://muxiaobai.github.io/</id>
  
  <author>
    <name>Mu Xiaobai(慕小白)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tools-ide快捷操作</title>
    <link href="https://muxiaobai.github.io/2019/06/27/tools-ide%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/"/>
    <id>https://muxiaobai.github.io/2019/06/27/tools-ide快捷操作/</id>
    <published>2019-06-27T11:28:57.000Z</published>
    <updated>2019-06-27T12:52:41.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p>sublime 工具插件<br>package control<br>ConvertToUTF8</p><p>激活sublime</p><p>C:\Windows\System32\drivers\etc  host</p><p>127.0.0.1 <a href="http://www.sublimetext.com" target="_blank" rel="noopener">www.sublimetext.com</a><br>127.0.0.1 license.sublimehq.com<br>127.0.0.1 45.55.255.55<br>127.0.0.1 45.55.41.223</p><p>—– BEGIN LICENSE —–<br>sgbteam<br>Single User License<br>EA7E-1153259<br>8891CBB9 F1513E4F 1A3405C1 A865D53F<br>115F202E 7B91AB2D 0D2A40ED 352B269B<br>76E84F0B CD69BFC7 59F2DFEF E267328F<br>215652A3 E88F9D8F 4C38E3BA 5B2DAAE4<br>969624E7 DC9CD4D5 717FB40C 1B9738CF<br>20B3C4F1 E917B5B3 87C38D9C ACCE7DD8<br>5F7EF854 86B9743C FADC04AA FB0DA5C0<br>F913BE58 42FEA319 F954EFDD AE881E0B<br>—— END LICENSE ——</p><p>ZYNGA INC.<br>50 User License<br>EA7E-811825<br>927BA117 84C9300F 4A0CCBC4 34A56B44<br>985E4562 59F2B63B CCCFF92F 0E646B83<br>0FD6487D 1507AE29 9CC4F9F5 0A6F32E3<br>0343D868 C18E2CD5 27641A71 25475648<br>309705B3 E468DDC4 1B766A18 7952D28C<br>E627DDBA 960A2153 69A2D98A C87C0607<br>45DC6049 8C04EC29 D18DFA40 442C680B<br>1342224D 44D90641 33A3B9F2 46AADB8F</p><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>Key promoter X  展示快捷键<br>Alibaba Java Coding Guidelines<br>SonarLint  代码检查</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>/**</p><ul><li>Project Name:${project_name}</li><li>File Name:${file_name}</li><li>Package Name:${package_name}</li><li>Date:${date} ${time}</li><li>Copyright (c) ${year}, All Rights Reserved.<br><em></em>/</li></ul><p>${filecomment}</p><p>${package_declaration}<br>/**</p><ul><li>ClassName:${type_name} </li><li>Function: ${todo} </li><li>Reason: ${todo} </li><li>Date: ${date} ${time} </li><li>@author Mu Xiaobai</li><li>@version </li><li>@since JDK 1.8<br>*/<br>${typecomment}<br>${type_declaration}</li></ul><p>aa 包<br>/**</p><ul><li>Project Name:$project_name$</li><li>File Name:$file_name$</li><li>Package Name:$package_name$</li><li>Date:$date$ $time$</li><li>Copyright (c) $year$, All Rights Reserved.<br><em></em>/<br>ss 类<br>/**</li><li>@ClassName: $class_name$ </li><li>@Function: //TODO </li><li>@Reason: //TODO</li><li>@Date: $date$ $time$ </li><li>@author Mu Xiaobai</li><li>@version </li><li>@since JDK 1.8<br><em>/<br>zz 方法<br>/</em> </li><li>@name: $enclosing_method$</li><li>@description: TODO </li><li>@param $param$</li><li>@return: $return$ </li><li>@date: $date$ $time$</li><li>@auther: $user$</li><li>*/</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>ctrl + shift + r 替换<br>ctrl + shift + f 查找</p><p>ctrl + shift + u 大小写替换</p><p>ctrl + x 剪切<br>ctrl + d 复制粘贴<br>ctrl + / 单行注释<br>ctrl + shift + / 选中内容多行注释</p><p>ctrl + z 撤回<br>ctrl + shift + z 撤回的撤回</p><p>ctrl +alt + s 设置<br>ctrl +alt +shift + s 本项目设置 打包</p><h2 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h2><p>ctrl + shift + r  选中内容执行<br>ctrl + r 执行当期窗口所有<br>ctrl + q 打开新执行窗口<br>ctrl + w 关闭当期窗口</p><h2 id="plsql"><a href="#plsql" class="headerlink" title="plsql"></a>plsql</h2><p>F8 执行选中</p><p>设置AutoReplace<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sf = select t.* ,t.rowid from </span><br><span class="line">s = select * from</span><br></pre></td></tr></table></figure></p><p>打开PL/SQL，在Tools-&gt;Perferences-&gt;Editor中Autoreplace，勾选Enabled，选择配置的AutoReplace.txt文件，点击OK即可。</p><h2 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h2><h3 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h3><p>ctrl+shift+G查看方法被调用<br>ctrl+alt+R 重启或者启动tomcat<br>ctrl+shift+T 查找文件在哪里 匹配java<br>ctrl+shift+R resource查找所有资源<br>ctrl+h file search Containing text 搜索包含某个字符串的所有文件<br>ctrl+shift+c注释/反注释<br>ctrl + alt + H查看方法被调用</p><p>ctrl+shift+L  查看所有的快捷键</p><p>ctrl+alt+G  搜索文本</p><h3 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h3><p>svn - <a href="http://subclipse.tigris.org/update_1.8.x" target="_blank" rel="noopener">http://subclipse.tigris.org/update_1.8.x</a><br>jd-core - <a href="http://jd.benow.ca/jd-eclipse/update" target="_blank" rel="noopener">http://jd.benow.ca/jd-eclipse/update</a><br>zookeeper：  <a href="http://www.massedynamic.org/eclipse/updates/" target="_blank" rel="noopener">http://www.massedynamic.org/eclipse/updates/</a><br>Enhanced Class Decompiler  <a href="http://feeling.sourceforge.net/update" target="_blank" rel="noopener">http://feeling.sourceforge.net/update</a></p><p>反编译</p><p>重启之后，在窗口菜单栏点击Widow-&gt;Preference-&gt;General-&gt;Editors-&gt;File Associations,将FileType里的<em>.class和</em>.class without source的Associated editors下面的Class File Editor设置成default即可</p>]]></content>
    
    <summary type="html">
    
      日常工具快捷操作
    
    </summary>
    
      <category term="工具" scheme="https://muxiaobai.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://muxiaobai.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="插件" scheme="https://muxiaobai.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>高并发之缓存、限流、降级</title>
    <link href="https://muxiaobai.github.io/2019/05/21/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8B%E7%BC%93%E5%AD%98%E3%80%81%E9%99%90%E6%B5%81%E3%80%81%E9%99%8D%E7%BA%A7/"/>
    <id>https://muxiaobai.github.io/2019/05/21/高并发之缓存、限流、降级/</id>
    <published>2019-05-21T03:54:24.000Z</published>
    <updated>2019-05-21T12:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先必须要从代码层面上提升性能，利用缓存等，如果在访问量大，确实无法处理的情况下就要考虑限流，或者防刷也是要考虑限流，然后如果服务确实不可用的话就把服务进行降级，比如当无法获取评论信息的时候，但是写的朋友圈是要正常返回的。不能因为评论服务无法提供，连朋友圈也不能看了。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>可以通过注解把技术相关的，读缓存，写日志，写缓存的功能，使用注解加反射来进行操作。</p><p>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Cache cache =getCache();</span><br><span class="line"></span><br><span class="line">if(cache!=null)&#123;</span><br><span class="line">    return cache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Data result= getDatabase();</span><br><span class="line">lg.info(&quot;获取数据&quot;);</span><br><span class="line">if(result!=null)&#123;</span><br><span class="line">    setCacheData(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return result;</span><br></pre></td></tr></table></figure></p><p>业务上，实际只有getDatabase才有用。</p><p>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@getCache()</span><br><span class="line">@setCache()</span><br><span class="line">@log()</span><br><span class="line">public getData()&#123;</span><br><span class="line">    Data result= getDatabase();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过注解反射如果有getCache的话直接使用缓存中的数据，如果有直接返回，如果有log写日志，如果有set则把获取到的数据写到cache中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><h4 id="限流瞬时流量"><a href="#限流瞬时流量" class="headerlink" title="限流瞬时流量"></a>限流瞬时流量</h4><p>双11，秒杀，之类的属于瞬时流量很大，平时相对稳定。</p><h4 id="限流总并发量"><a href="#限流总并发量" class="headerlink" title="限流总并发量"></a>限流总并发量</h4><h4 id="限流平均流量"><a href="#限流平均流量" class="headerlink" title="限流平均流量"></a>限流平均流量</h4><ul><li><p>滑动窗口</p></li><li><p>令牌桶，每秒生成n个，限制平均流量</p></li><li><p>漏桶，这个是应对瞬时流量过大的一种方法，一定的速率进行消费，MQ，削峰，解耦，异步。但是能解决的瞬时流量也是有一个最大值。</p></li><li><p>计数器，限制总的并发数，比如说每秒钟只能请求100次，是限制总并发量。通常可用redis缓存，请求增加incr来实现。</p></li></ul><p>采用：Google开源工具包Guava提供了限流工具类RateLimiter，该类基于令牌桶算法来完成限流，非常易于使用。</p><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>当服务调用者使用同步调用的时候，会产生大量的等待线程占用系统资源，一旦线程资源被耗尽，<br>服务调用者提供的服务也将处于不可用状态，于是服务雪崩效应产生了！<br>这时候就需要比如说：当失败了多少次之后，</p><p>1，超时机制<br>2，服务限流<br>3，服务熔断<br>4，服务降级</p><p>超时机制<br>如果我们加入超时机制，例如2s，那么超过2s就会直接返回了，那么这样就在一定程度上可以抑制消费者资源耗尽的问题</p><p>服务限流<br>通过线程池+队列的方式，通过信号量的方式。比如商品评论比较慢，最大能同时处理10个线程，队列待处理5个，那么如果同时20个线程到达的话，其中就有5个线程被限流了，其中10个先被执行，另外5个在队列中</p><p>服务熔断<br>这个熔断可以理解为我们自己家里的电闸。<br>当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源，比如我们设置了超时时间为1s，如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个服务了，这个时候就应该使用熔断器避免资源浪费</p><p>服务降级<br>有服务熔断，必然要有服务降级。<br>所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据)，这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景</p>]]></content>
    
    <summary type="html">
    
      高并发下保证可用性的三大神器，缓存，限流，降级
    
    </summary>
    
      <category term="高并发" scheme="https://muxiaobai.github.io/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="基础" scheme="https://muxiaobai.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>使用ELK分析日志</title>
    <link href="https://muxiaobai.github.io/2019/05/18/%E4%BD%BF%E7%94%A8ELK%E5%88%86%E6%9E%90%E6%97%A5%E5%BF%97/"/>
    <id>https://muxiaobai.github.io/2019/05/18/使用ELK分析日志/</id>
    <published>2019-05-18T15:35:47.000Z</published>
    <updated>2019-05-19T04:29:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.elastic.co/cn/elk-stack" target="_blank" rel="noopener">elk 官网介绍</a><br>要解决的问题：<br>对于日志等文件，需要进行分析，例如：访问IP数，什么时候访问最多，用户量最大；<br>简单的架构就是直接使用filebeat来获取到数据。<br>还有一种实现方式是：拉取文件后，先通过Logstash（tools）把对应的文件分析出来，然后输出到ElasticSearch（data）中然后使用kibaba来进行虚拟化的展示（view）。<br>还可以加上output的输出到队列缓存中等。</p><h3 id="主要技术手段"><a href="#主要技术手段" class="headerlink" title="主要技术手段"></a>主要技术手段</h3><p>filebeat、Logstash、ElasticSearch、Kibaba</p><h5 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h5><p>通常会有一个客户端和一个服务器，客户端运行在业务应用机上，可以访问到对应的日志文件，<br>然后连接服务器，服务器把数据发送到Logstash中，也可以把数据直接output到ElasticSearch内。</p><p><img src="/.io//filebeat.png" alt="ElasticSearch控制台"></p><h5 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h5><p>Logstash把获取到的数据进行过滤（filter）处理，把找到的文件进行分析，输出到ElasticSearch,</p><h5 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h5><p>不用多讲，存储索引数据用的，基于Lucene，的分布式架构。在这种elk中充当数据源。</p><h5 id="Kibaba"><a href="#Kibaba" class="headerlink" title="Kibaba"></a>Kibaba</h5><p>visual展示</p><h3 id="示例-使用nginx日志来操作，简单版，不使用filebeat"><a href="#示例-使用nginx日志来操作，简单版，不使用filebeat" class="headerlink" title="示例 使用nginx日志来操作，简单版，不使用filebeat"></a>示例 使用nginx日志来操作，简单版，不使用filebeat</h3><p>定义的所有文件路径在<code>/c/ProgrmTool/dev/</code>中</p><h5 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h5><p>参考<a href="https://muxiaobai.github.io/2017/09/02/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E8%B4%9F%E8%BD%BD/">应用部署之nginx负载</a></p><p><code>/c/ProgrmTool/dev/ &gt;start nginx</code></p><p>nginx 中的log_format格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br></pre></td></tr></table></figure><p>日志文件在../logs/access.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 - - [19/May/2019:11:10:18 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">127.0.0.1 - - [19/May/2019:11:10:19 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://localhost/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">127.0.0.1 - - [19/May/2019:11:10:19 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">127.0.0.1 - - [19/May/2019:11:36:05 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">127.0.0.1 - - [19/May/2019:11:36:05 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://localhost/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure><h5 id="配置-Logstash"><a href="#配置-Logstash" class="headerlink" title="配置 Logstash"></a>配置 Logstash</h5><p>把这个地址配置到Logstash中</p><p>测试：<code>./logstash -e &#39;input {stdin 0} output {studout 0}&#39;</code><br>从控制台输入，控制台输出，</p><p>验证grok是否正确：<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="noopener">https://grokdebug.herokuapp.com/</a></p><p>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># Sample Logstash configuration for creating a simple</span><br><span class="line"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">        file &#123;</span><br><span class="line">                path =&gt; &quot;C:/ProgramTool/dev/nginx/logs/access.log&quot;</span><br><span class="line">                type =&gt; &quot;nginx-access&quot;</span><br><span class="line">                start_position =&gt; &quot;beginning&quot;</span><br><span class="line">                #sincedb_path =&gt; &quot;/usr/local/logstash/sincedb&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">        if [type] == &quot;nginx-access&quot; &#123;</span><br><span class="line">                grok &#123;</span><br><span class="line">                    patterns_dir =&gt; &quot;C:/ProgramTool/dev/logstash-6.7.0/patterns&quot;        #设置自定义正则路径</span><br><span class="line">                    match =&gt; &#123;</span><br><span class="line">                        &quot;message&quot; =&gt; &quot;%&#123;NGINXACCESS&#125;&quot;</span><br><span class="line">                        #使用patterns路径下文件内部的解析名字</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                date &#123;</span><br><span class="line">                    match =&gt; [ &quot;log_timestamp&quot; , &quot;dd/MMM/YYYY:HH:mm:ss Z&quot; ]</span><br><span class="line">                &#125;</span><br><span class="line">                urldecode &#123;</span><br><span class="line">                    all_fields =&gt; true</span><br><span class="line">                &#125;</span><br><span class="line">            #把所有字段进行urldecode（显示中文）</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">        if [type] == &quot;nginx-access&quot; &#123;</span><br><span class="line">            stdout &#123;</span><br><span class="line">                codec    =&gt; rubydebug</span><br><span class="line">            &#125;</span><br><span class="line">            # 输出到控制台</span><br><span class="line">            elasticsearch &#123;</span><br><span class="line">                    hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class="line">                    manage_template =&gt; true</span><br><span class="line">                    index =&gt; &quot;logstash-nginx-access-%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class="line">                    # 索引名称</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>grok参数设置<code>C:/ProgramTool/dev/logstash-6.7.0/patterns</code>路径下设置nginx的匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \[%&#123;HTTPDATE:timestamp&#125;\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:x_forwarded_for&#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://www.cnblogs.com/Orgliny/p/5592186.html" target="_blank" rel="noopener">grok参数设置</a><br>更多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URIPARM1 [A-Za-z0-9$.+!*&apos;|()&#123;&#125;,~@#%&amp;/=:;_?\-\[\]]*</span><br><span class="line">URIPATH1 (?:/[A-Za-z0-9$.+!*&apos;()&#123;&#125;,~:;=@#%&amp;_\- ]*)+</span><br><span class="line">URI1 (%&#123;URIPROTO&#125;://)?(?:%&#123;USER&#125;(?::[^@]*)?@)?(?:%&#123;URIHOST&#125;)?(?:%&#123;URIPATHPARAM&#125;)?</span><br><span class="line">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \[%&#123;HTTPDATE:timestamp&#125;\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:x_forwarded_for&#125;</span><br><span class="line">DEMOACCESS %&#123;IPORHOST:remote_addr&#125; - (%&#123;USERNAME:user&#125;|-) \[%&#123;HTTPDATE:log_timestamp&#125;\] %&#123;HOSTNAME:http_host&#125; %&#123;WORD:request_method&#125; \&quot;%&#123;URIPATH1:uri&#125;\&quot; \&quot;%&#123;URIPARM1:param&#125;\&quot; %&#123;BASE10NUM:http_status&#125; (?:%&#123;BASE10NUM:body_bytes_sent&#125;|-) \&quot;(?:%&#123;URI1:http_referrer&#125;|-)\&quot; (%&#123;BASE10NUM:upstream_status&#125;|-) (?:%&#123;HOSTPORT:upstream_addr&#125;|-) (%&#123;BASE16FLOAT:upstream_response_time&#125;|-) (%&#123;BASE16FLOAT:request_time&#125;|-) (?:%&#123;QUOTEDSTRING:user_agent&#125;|-) \&quot;(%&#123;IPV4:client_ip&#125;|-)\&quot; \&quot;(%&#123;WORD:x_forword_for&#125;|-)\&quot;</span><br></pre></td></tr></table></figure></p><p>上面用到正则切割日志等功能</p><p>启动：<code>./logstash -f ../config/logstash.conf &amp;</code><br><code>./logstash -f ../config/logstash.conf --path.data=C:/ProgramTool/dev/logstash-6.7.0/data</code><br>如果有一个实例的话，启动时，需要指定path.data</p><h5 id="简单的es主从"><a href="#简单的es主从" class="headerlink" title="简单的es主从"></a>简单的es主从</h5><p>master 默认9200端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">cluster.name: muxiaobai-test</span><br><span class="line">node.name: master</span><br><span class="line">node.master: true</span><br><span class="line"></span><br><span class="line">network.host: 127.0.0.1</span><br></pre></td></tr></table></figure></p><p>slave-1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: muxiaobai-test</span><br><span class="line">node.name: slave-1</span><br><span class="line">#node.master: true</span><br><span class="line"></span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9500</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure></p><p>slave-2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: muxiaobai-test</span><br><span class="line">node.name: slave-1</span><br><span class="line">#node.master: true</span><br><span class="line"></span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9400</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure></p><h5 id="使用elastic-head-图形化工具查看运行情况"><a href="#使用elastic-head-图形化工具查看运行情况" class="headerlink" title="使用elastic-head 图形化工具查看运行情况"></a>使用elastic-head 图形化工具查看运行情况</h5><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elastic-head github</a><br>需要node环境<br><code>npm install</code> <code>npm run start</code>默认9100端口 访问<a href="http://127.0.0.1:9100" target="_blank" rel="noopener">http://127.0.0.1:9100</a></p><p><img src="/.io//elasticsearch-init.png" alt="Logstash日志进入ElasticSearch"></p><h5 id="使用kibaba"><a href="#使用kibaba" class="headerlink" title="使用kibaba"></a>使用kibaba</h5><p>默认端口5601，<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a>,把对应的索引加进去。</p><h4 id="操作如下"><a href="#操作如下" class="headerlink" title="操作如下"></a>操作如下</h4><p>首先访问 nginx ，地址：<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a></p><p>然后可以看到Logstash窗口输出的日志</p><p><img src="/.io//logstash-nginx.png" alt="ElasticSearch控制台"></p><p><a href="http://localhost:9100,中，可以看到访问日志的内容" target="_blank" rel="noopener">http://localhost:9100,中，可以看到访问日志的内容</a><br>效果如下：<br><img src="/.io//elasticsearch-header.png" alt="Logstash日志进入ElasticSearch"><br>具体切分的数据<br><img src="/.io//data1.png" alt="Logstash日志进入ElasticSearch"></p><p><img src="/.io//data2.png" alt="Logstash日志进入ElasticSearch"></p><p>创建了索引后，<br><img src="/.io//kibaba2.png" alt="Logstash日志进入ElasticSearch"><br>在kibaba中有默认的时间线，访问次数，即可展示<br><img src="/.io//kibaba4.png" alt="Logstash日志进入ElasticSearch"></p><h3 id="使用filebeat"><a href="#使用filebeat" class="headerlink" title="使用filebeat"></a>使用filebeat</h3><p><a href="https://www.elastic.co/guide/en/beats/filebeat/7.0/filebeat-module-nginx.html#nginx-settings" target="_blank" rel="noopener">nginx filebeat 配置</a></p><p>已经有模板，使用的时候先开启，然后安装，最后启动即可</p><ul><li><code>filebeat  modules enable nginx</code></li><li><code>filebeat setup -e</code></li><li><code>filebeat</code></li><li></li></ul><p>nginx.yml配置文件，需要指定日志文件路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- module: nginx</span><br><span class="line">  access:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;C:/ProgramTool/dev/nginx/logs/access.log*&quot;]</span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;C:/ProgramTool/dev/nginx/logs/error.log*&quot;]</span><br></pre></td></tr></table></figure></p><p>默认直接输出到ElasticSearch</p><p>然后在Logstash的配置文件中使用beat作为input，输入源。<br>主要是input<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>logstash.conf 默认配置就是从beat中获取数据的</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/aresxin/p/8035137.html" target="_blank" rel="noopener">ELK系统框架图</a></li><li><a href="https://www.colabug.com/2936270.html" target="_blank" rel="noopener">filebeat和Logstash配合使用</a></li><li><a href="https://github.com/elastic/logstash/blob/88563c86435926a8e5353bd970f92ab61efe58ec/docs/static/filebeat_modules/nginx/pipeline.conf" target="_blank" rel="noopener">官网 Logstash中的beat nginx 配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      日志分析系统搭建
    
    </summary>
    
      <category term="工具" scheme="https://muxiaobai.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="分析" scheme="https://muxiaobai.github.io/tags/%E5%88%86%E6%9E%90/"/>
    
      <category term="日志" scheme="https://muxiaobai.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Linux 基础命令总结4</title>
    <link href="https://muxiaobai.github.io/2019/04/01/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%934/"/>
    <id>https://muxiaobai.github.io/2019/04/01/Linux-基础命令总结4/</id>
    <published>2019-03-31T21:19:12.000Z</published>
    <updated>2019-04-10T08:29:39.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="shell-常用快捷键"><a href="#shell-常用快捷键" class="headerlink" title="shell 常用快捷键"></a>shell 常用快捷键</h4><p><a href="https://blog.csdn.net/weixin_42256178/article/details/80392077" target="_blank" rel="noopener">常用shell快捷键</a></p><ul><li>ctrl + a 命令行首</li><li>ctrl + e 命令行尾（end）</li><li>ctrl + b 相当于方向键左←（）</li><li>ctrl + f 相当于方向键右→</li><li></li><li>ctrl + u 剪切光标到行首</li><li>ctrl + k 剪切光标到行尾</li><li>ctrl + w 剪切光标前一个单词</li><li>ctrl + y 粘贴上面三个的复制</li><li>ctrl + z 挂起当前命令 jobs bg fg  唤醒</li><li></li><li>ctrl + r 搜索之前的命令</li><li>ctrl + g 取消搜索<br>-</li><li>ctrl + s 锁屏，挂起当前shell</li><li>ctrl + q 取消锁屏，重新启用当前shell</li><li><p>ctrl + l clear 清屏</p></li><li><p>ctrl + insert 插入</p></li></ul><h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><ul><li>ps -ef | grep tomcat </li><li>ps -aux | sort -k4nr |head -h 10 内存前十的进程</li><li>du -sh *   当前路径（disk usage）</li><li>df -hP  整个磁盘（disk free）</li><li>crontab -l 定时任务</li><li>tail -f /root/file.log 查看实时日志文件</li><li>free -h 查询内存文件</li><li>/var/log/messages 系统日志，</li><li>service /etc/init.d  启动脚本位置</li></ul>]]></content>
    
    <summary type="html">
    
      shell快捷件键，常用命令
    
    </summary>
    
      <category term="Linux" scheme="https://muxiaobai.github.io/categories/Linux/"/>
    
    
      <category term="基础命令" scheme="https://muxiaobai.github.io/tags/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>性能优化之redis储存计算值</title>
    <link href="https://muxiaobai.github.io/2019/02/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bredis%E5%82%A8%E5%AD%98%E8%AE%A1%E7%AE%97%E5%80%BC/"/>
    <id>https://muxiaobai.github.io/2019/02/16/性能优化之redis储存计算值/</id>
    <published>2019-02-15T20:17:43.000Z</published>
    <updated>2019-02-16T05:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>两张表，一个主表，一个树形结构表，</p><p>每一条树形结构数据都有一个状态，要统计出所有叶子节点的状态，展示在主表的列上，前期使用了oracle的<code>start connect</code>统计根节点，在前期主表中的数据量很小的时候，列表价在正常，后期数据量增大，列表响应速度异常。后经过分析，得出每一条根节点循环的时候需要600ms左右，然后数据增大直接是主表的600ms*n。</p><p>树形结构超过三级，前两级结构超过50条记录，</p><h2 id="优化路思路："><a href="#优化路思路：" class="headerlink" title="优化路思路："></a>优化路思路：</h2><p>redis优化查询结果，因为是计算结果，这种数据，在数据库上执行第一次,随后再次查询列表的时候从缓存中获取，减少计算次数。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询的时候先从redis中查询，如果有直接返回；如果没有，再查数据库，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//查询状态,有num直接返回:</span><br><span class="line"></span><br><span class="line">if(Redis.isCached(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class)))&#123;</span><br><span class="line">return Integer.parseInt(Redis.getString(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//查询出的结果</span><br><span class="line">String sql =  &quot; select count(*) as num &quot;</span><br><span class="line">+ &quot; from pre_dutysubitem t1 ,pre_dutyitem t2 &quot;</span><br><span class="line">+ &quot; where t2.fk_dutyid = ?  &quot;</span><br><span class="line">+ &quot; and (select  count(*) from pre_dutysubitem t3 &quot;</span><br><span class="line">+ &quot; start with t3.id = t1.id &quot;</span><br><span class="line">+ &quot; connect by prior t3.id =t3.fk_parentid ) = 1 &quot;</span><br><span class="line">+ &quot; and t2.id=t1.fk_dutyitemid and t1.currstatus is not null &quot;;</span><br><span class="line">SqlRowSet rs = null;</span><br><span class="line"></span><br><span class="line">//如果currStatus没值查统计全部子项数量，否则按状态统计</span><br><span class="line">if(StringUtils.isNotBlank(currStatus))&#123;</span><br><span class="line">sql+=&quot; and t1.currstatus = ?  &quot;;</span><br><span class="line">rs = jdbc.queryForRowSet(sql, dutyId, currStatus);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">rs = jdbc.queryForRowSet(sql, dutyId);</span><br><span class="line">&#125;</span><br><span class="line">int num = 0;</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">num =rs.getInt(&quot;num&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//缓存查询结果</span><br><span class="line">Redis.cacheString(key, String.valueOf(num), FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class));</span><br><span class="line"></span><br><span class="line">return num;</span><br></pre></td></tr></table></figure><h4 id="修改状态"><a href="#修改状态" class="headerlink" title="修改状态"></a>修改状态</h4><p>修改状态的时候，先删除redis缓存，再更改数据库状态，可能会出现刚删除，数据库还没来得及更改，又有用户查询，导致redis缓存脏数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//更新数据状态</span><br><span class="line">//删除缓存状态：</span><br><span class="line"></span><br><span class="line">Redis.delete(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      redis存储值解决性能问题
    
    </summary>
    
      <category term="性能优化" scheme="https://muxiaobai.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="redis" scheme="https://muxiaobai.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>2018年个人总结</title>
    <link href="https://muxiaobai.github.io/2019/01/15/2018%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>https://muxiaobai.github.io/2019/01/15/2018年个人总结/</id>
    <published>2019-01-14T20:19:28.000Z</published>
    <updated>2019-02-16T04:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作，个人技能"><a href="#工作，个人技能" class="headerlink" title="工作，个人技能"></a>工作，个人技能</h2><h4 id="新事物、新工具"><a href="#新事物、新工具" class="headerlink" title="新事物、新工具"></a>新事物、新工具</h4><ul><li>自己前期对一些node等命令了解一些，现在通过在项目中使用，更加熟悉，像node、 npm、yarn、vs code 等工具。使用electron，可以实现在win和mac平台上打包成程序。</li><li>Hbuilder工具可以打包成Android和ios上的应用。</li><li>MongoDB redis等基本命令；之前也想着看，但是只是了解到一点儿内容，没有实际的使用，并没有把握，现在这些东西都可以说是熟悉了。</li><li>更新系统可以基本实现脚本化，并且可以保留原始备份应用，之前一直都在写，后来因为window server的原因，中断了，现在又使用起来，肯定要把这部分的知识拾起来，深入一下了。</li><li>杨百翰Coca语料库网站使用，antconc语料分析工具，如果工作上也出现这种没有接触过的工具，应该怎么处理？ </li></ul><h4 id="如何接触新事物、学习新工具"><a href="#如何接触新事物、学习新工具" class="headerlink" title="如何接触新事物、学习新工具"></a>如何接触新事物、学习新工具</h4><p>新事物、新工具这类可以统称为“我的未知世界”、“我的盲区”。</p><p>可以分为三类，一类是知道，简单的使用过，没有深入研究，参加使用英语语种讨论；第二类是听说过，但没有使用过，这类和第三类没有什么区别，参加使用，日语韩语德语等语种研讨，第三类是听都没有听说过，这种是有很大的专业性壁垒，类似去参加一场不知道是什么语言的研讨；</p><p>明确一点的是首先要知道这个工具是做什么用的？出现这个工具，肯定是有一些背景的，为什么会出现，这就是原因，然后找一下有没有类似的工具，可以参考的理念性的，因为同一类工具，是解决同一类问题，，背后会有一定的原理性的东西存在。这样的东西把握住了之后，就能把握主旨。</p><p>最次一级的是怎么使用这个工具？但这个也是最实用的一点。具体的使用情况，在具体用的时候再去研究，这样就能节省时间；人的精力是有限的，之前一位老师和我这么讲的时候，我还总觉得无所谓，我的精力无限，但是现在看来，该听的话还是要听一下的，把时间用在最需要研究的地方。</p><blockquote><p>最后一条，网络如此发达，谷歌百度为何不用？老师在你身边，怎能不好好学习。</p></blockquote><blockquote><p>方法论比方法更重要。</p></blockquote><h4 id="计划性、把控方面"><a href="#计划性、把控方面" class="headerlink" title="计划性、把控方面"></a>计划性、把控方面</h4><p>分两部分，一个是对整体的项目规划性</p><p>计划性认知，比之前有很大的提升，最开始在学校的时候，虽然也是带项目，但是对于一个项目的整体规划，整体到什么阶段，要做到什么事情，要给客户展示什么内容，缺乏认识；只是一味的往前做，没有给客户一个安心，每一个周期做什么东西了，并没有给客户。这样客户的感觉就是很随意，看到什么就做什么。</p><p>二是对任务的把控方面</p><p>能够把任务进行分解，分模块，按步骤进行处理。可以大致预估任务的复杂度，预计的人天,这可以说是提升最大的软技能，上一份工作中，只是对自己能力的预估，慢慢的掌握住方法；任务复杂或者简单，和负责人说有多少内容，慢慢的自己就有了一点感觉，在对别人的时间把控方面也有了提升，这点还要通过看别人的代码，逐渐建立起来的体系。</p><h4 id="分析问题，解决问题"><a href="#分析问题，解决问题" class="headerlink" title="分析问题，解决问题"></a>分析问题，解决问题</h4><p>例如：①有一个树形查询的oracle语句，在数据量少的时候很快就可以查出来列表，数据量大之后，因为每一条数据都要统计其他的信息，列表就要加载很久，最后采用redis的形式，存储这个计算出来的值。</p><p>在影响这个计算值的时候，把redis中的数据清空，在查询的时候把这个值填到redis中，下次列表查询的时候就直接使用这个值，具体可以参考其他的文章<a href="https://muxiaobai.github.io/2019/02/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bredis%E5%82%A8%E5%AD%98%E8%AE%A1%E7%AE%97%E5%80%BC/">性能优化之redis储存计算值</a></p><p>②有一个列表，后台响应很快，大概300ms的时间，数据都已经到前台了，但是前台的页面重新layout，又采用的是easyui的组件，因此通过chrome的Performance来进行积累渲染的过程，优化前台的渲染逻辑，从而达到要求。</p><blockquote><p>这个实际上也是因为平时经常看一些文章，所以就有这方面的想法，算是厚积薄发吧，还是要注重积累，现在如果分析到响应速度呀等，就先从前后台的交互位置查起，看是前台，还是后台的问题导致的，再进一步找后台sql还是循环，是数据量大，传输过程，网络影响，还是前台渲染的时候有问题。</p></blockquote><p>遇到问题应该找谁来解决，协调，把握几点吧，自己能解决的问题，说出大概的时间解决，自己解决不了的问题，找相关人员解决，自己不知道找谁来解决的问题，向领导反馈，这些基本的逻辑，有的时候还真的是没呢么容易做到，一般总是想着我来做我来做，但是呢，一个人的精力有限，该分出去的就要分出去，有时，可能就会想着都经过自己的话，就知道，能把控，可是，该放松的该授权的就要授权。</p><p>####</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h4 id="踏过的地方"><a href="#踏过的地方" class="headerlink" title="踏过的地方"></a>踏过的地方</h4><p>踏过的城市：南阳、枣庄、西安、宝鸡太白、深圳、香港、广西河池-柳州、杭州</p><blockquote><p>西安  正南正北的规矩，古代皇宫式的华丽</p></blockquote><p>北方真不是人呆的地方，夏天热的要死，冬天雾霾让人无法呼吸，还是南方好，不冷，空气好，就是离家远了点儿，西安的夏天高达40度，怎么玩？玩不了丫。还是喜欢走路上班。从第一份工作，到现在，上下班都是住宿和公司都是相差不远的，走路，还可以锻炼一下身体，棒棒哒！！！</p><blockquote><p>宝鸡太白 看秦岭云海  高山云海之上，神仙居住的地方</p></blockquote><p>山里面凉快，真的是很凉快，在里面看的水还好一点，但是在一条路上，有一个缺口，可能就是在这里突出一下秦岭的威严，天然的露出了一个小口子，让你们看看，在我大秦岭面前，你们这些小如蝼蚁的人们，都给我臣服吧。再来插播一条，云海去看过的都说好。ps：并没有收广告费。</p><blockquote><p>香港 去体验一把，维多利亚港 高楼，海港，游轮，帆船</p></blockquote><p>登上游轮，吹着海风，别有一番滋味，想到一句话：你以为有钱人是幸福的，实际上，有钱人的幸福你想都想不到。莎莎、万宁、屈臣氏、卓悦，遍地，人挨人，人挤人，护肤品，化妆品，奶粉，保健品（贴膏），很奇怪，奶粉和保健品会在这里售卖?<br>电影里面总能看到有人拿的是一卷钱，用卷起来的，这次过去换港币的时候，真的是这样子的，我跑到一个小的巷道里面，找的是一个比较正规的柜台，当时，旁边有很多那种“一卷”钱，在香港这种地方，没有港币真的很麻烦，很多地方还是只收现金，1000的不收。不像大陆地区，哪怕没有带现金，吃穿玩，一切都正常。<br>想象中的紫金花广场应该很霸气的，到跟前一看，哎呀，还不如大陆的一个小广场，不过还是拍照留念了一下。毕竟来了一趟，不容易呢。</p><blockquote><p>广西河池 看山看水 山水一体，原始山川河流</p></blockquote><p>抖音小视频，山顶上转圈，转圈，我真的是去了，虽然是在不知名的小山顶上，但是这也是山丫，感觉很舒服，和秦岭的山水，和香港的海风是完全不一样的感觉，这里的山水，是小景，是一种温文尔雅的舒适感，坐船真坐的够够的了，不贵，而且将近一个小时，回来的路上，坐的人们都是冷飕飕的，刘三姐的故事，在广西真的是随处都是，路桥，山里，坊间，一会儿说是桂林阳朔的，一会说是河池宜州。本来就是游山玩水，历史问题就不再考究。听说这里的人们还在唱山歌，原来山间人家，自有山间的一些儿玩法，中原人没有见过的，就觉得神奇，唱的都是人家自己的语言和调调。</p><blockquote><p>柳州 近代工业  一种厚重，有工业底蕴的城市</p></blockquote><p>螺蛳粉真的是有螺蛳的，螺蛳熬得汤，加酸笋，加腐竹，加豆泡（豆腐泡），加卤水。</p><p>柳江从中穿过，别称“壶城”，柳州城有很多桥，当时已经建好的有21座，还有在规划中的，为了交通，横穿柳江过来，桥梁工程应该是很发达的；柳工，柳钢，五菱，重工业基地，双面针，金嗓子等，柳钢雪条，雪糕，是一座小城，和惠州，徐州很像，但是没有惠州那么浮躁，没有徐州那么庄重，个人感觉柳州很随和，但也很稳。</p><blockquote><p>杭州 西湖加现代设计的一种和谐</p></blockquote><p>听说是有：西湖醋鱼，龙井虾仁 八宝豆腐等。楼外楼。真的只是听说，去一周，直接就回来了，什么都没有带，遗憾，还说带一点茶叶回来呢，西湖，龙井绿茶，不过自己出去跑一趟，就很好的了。</p><blockquote><p>实际上只要看到外部的，未经历过的，都是心情舒畅。</p></blockquote><h4 id="公开课"><a href="#公开课" class="headerlink" title="公开课"></a>公开课</h4><p>前段时间一直在看心理学的公开课，说实话，收获挺大的，早就想看一些这种社会学心理学的内容，这也是<code>下一年重点内容</code>，</p><h4 id="经历过的事情"><a href="#经历过的事情" class="headerlink" title="经历过的事情"></a>经历过的事情</h4><blockquote><p>辞职和找工作、要福利</p></blockquote><p>和领导说辞职的时候，一定要挺住，别放松，说一个月才能办理，咱就要要一周就能出结果。很多情况下，只不过是口头上说，一般不是要职人员，当前没有必要的项目，那么这种流程很快就能结束的，一个月，待在那里还不要疯了，何必在那里碍眼。找工作的时候，该问清楚的就要问清楚，该有的利益福利，该要就要。有些话适合说清楚，就别含糊。</p><blockquote><p>学会拒绝</p></blockquote><p>上级，上次一个任务，我明确的和上级说过，可能会出现这种问题，需要我们这边提供帮助，可是呀，他说不用我们这边，不用，结果，两天之后，果然还是出现这种问题了，然后又打电话让我给他解决，我就说现在没有时间，要到晚上才行。想其他办法，我估计，还是会找我来进行处理。</p><p>该跑的坑就要跑，上一任技术走了，眼看当下没有人接手，烫手的山芋，让我接，都不是傻瓜。我还是选择出去待在项目上，能跟着实力强的人再学习，何乐而不为呢？蚂蚁金服，唯一对不住的就是她，刚回去，就又跑了。</p><p>亲友，为什么亲属长辈问我有没有钱？真的是很无语，果断拒绝。当时我就不抱有给他的可能，因为我也知道这种人，但像同学，这次问我借钱的时候，我直接问他要多少，有什么事情要帮忙的，有的时候，亲戚这种关系更不能掺和利益，麻烦，说不清，道不明，反而惹得都不舒服。</p><blockquote><p>学会表达自己的真实感受</p></blockquote><p>没有表达好，直言快语，有话直说，工作上在对待上司，工资等，简单一点儿，直接一点儿，省的把自己搞的很累，还过得不舒服。有不知道的就直接问，</p><blockquote><p>学会控制自己的真实感受</p></blockquote><p>从心理学学到的，而且在生活中经历过的。</p><ul><li>1.避免表达出事后诸葛亮的一种态度。</li><li>2.想解决办法，而不是制造麻烦。</li><li>3.有时候太直白，不利于团队团结。</li></ul><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><h4 id="2018年计划完成情况"><a href="#2018年计划完成情况" class="headerlink" title="2018年计划完成情况"></a>2018年计划完成情况</h4><ul><li>人不要脸，书不能丢，一个月一本书。要有记录</li><li>画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）</li><li>hello world 大数据 sparker等 demo</li><li>kaggle等课程熟悉，完成5次天池比赛</li></ul><p>完成度20%</p><p>没有驱动性，自驱力差；机器学习只学了点儿皮毛，kaggle完成2个，熟悉大致的操作流程，无法商用。后半年都没有实际操作。反倒是MongoDB、redis等工具开始用起来；运维方面的知识掌握不少，把之前简单的脚本重新掌握并应用了。</p><h4 id="2019年计划"><a href="#2019年计划" class="headerlink" title="2019年计划"></a>2019年计划</h4><ul><li>听讲座，参加技术，文化，社会论坛等，扩展知识广度。</li><li>心理学知识，受益匪浅，需要继续学习。</li><li>研究服务器性能、部署等问题，分析出自己的一套配置。</li><li></li></ul><p>2019.01.15 慕小白 于浙江杭州</p>]]></content>
    
    <summary type="html">
    
      2018年已经过去，总结一下。
    
    </summary>
    
      <category term="总结" scheme="https://muxiaobai.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="2018" scheme="https://muxiaobai.github.io/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>mongodb常用命令</title>
    <link href="https://muxiaobai.github.io/2019/01/11/mongodb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://muxiaobai.github.io/2019/01/11/mongodb常用命令/</id>
    <published>2019-01-10T19:07:27.000Z</published>
    <updated>2019-04-19T06:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>常用的mongo语句，汇总，以便之后查阅。<br><a id="more"></a></p><h2 id="全局、数据库级别"><a href="#全局、数据库级别" class="headerlink" title="全局、数据库级别"></a>全局、数据库级别</h2><p>默认根目录：/db/mongodb-3.4.7/</p><h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><p>–导入<br>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 -u test_user -p test_pwd –port 27017 –db jy_db /db/mongo_bak/test_db</p><p>–强制删除<br>–drop：先删除所有的记录，然后恢复.<br>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 -u test_user -p test_pwd –port 27017 –db test_db –drop /db/mongo_bak/test_db</p><p>–导出<br>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db -u test_user -p 123456 -o /db/mongo_bak/test_db</p><p>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db  -o /db/mongo_bak/test_db</p><p>–打包<br>tar -czvf  /db/mongo_bak/jy_db20181207.tar.gz /db/mongo_bak/test_db</p><p>–导入<br>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db -u test_use -p test_pwd -o /db/mongo_bak/</p><h3 id="启动-登录，创建用户"><a href="#启动-登录，创建用户" class="headerlink" title="启动 登录，创建用户"></a>启动 登录，创建用户</h3><p>修改配置文件<br><code>vi /db/mongodb-3.4.7/mongodb.conf</code><br>常用配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">后台启动</span><br><span class="line">`/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf `</span><br><span class="line">登录：</span><br><span class="line">`/db/mongodb-3.4.7/bin/mongo  --host 127.0.0.1 --port 9430 -u root -p FpTH2a`</span><br><span class="line"></span><br><span class="line">show dbs;//展示所有数据库</span><br><span class="line"></span><br><span class="line">use test_db;//创建数据库.切换到本数据库</span><br><span class="line"></span><br><span class="line">/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf  --shutdown</span><br><span class="line"></span><br><span class="line">db.createUser(&#123;user:&apos;name&apos;,pwd:&apos;123456&apos;,roles: [&#123; role:&quot;readWrite&quot;,db:&quot;name&quot;&#125;]&#125;);</span><br><span class="line"></span><br><span class="line">db.getCollection(&apos;system.users&apos;).find(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(&apos;system.users&apos;).remove(&#123;user:&quot;name&quot;&#125;);</span><br></pre></td></tr></table></figure><p>查询用户：</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>use test_db;//</p><p>db.repairDatabase();//释放空间</p><p>db.runCommand({“distinct”:”fs.files”, “key”:”metadata.type”});//所有的集合</p><h2 id="集合级别-collection"><a href="#集合级别-collection" class="headerlink" title="集合级别 collection"></a>集合级别 collection</h2><ul><li>所有  show collections;</li><li>创建  db.createCollection(“test”);</li><li>添加  db.getCollection(“test”).insert({“name”:”test”});</li><li>清空  db.getCollection(“test”).remove({});</li><li>删除  db.getCollection(“test”).drop();</li><li>查询  db.getCollection(“test”).find({“name”:”test”});</li></ul>]]></content>
    
    <summary type="html">
    
      mongo 的常用数据库命令总结
    
    </summary>
    
      <category term="数据库" scheme="https://muxiaobai.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongo" scheme="https://muxiaobai.github.io/tags/mongo/"/>
    
      <category term="常用命令" scheme="https://muxiaobai.github.io/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>mongodb主从架构设计</title>
    <link href="https://muxiaobai.github.io/2019/01/11/mongodb%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>https://muxiaobai.github.io/2019/01/11/mongodb主从架构设计/</id>
    <published>2019-01-10T18:49:11.000Z</published>
    <updated>2019-01-22T08:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本的MongoDB主从搭建语句，汇总，以便之后查阅。<br><a id="more"></a></p><p>带参数启动MongoDB：<code>./mongod -f mongo-master.conf</code></p><p>基本单机配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># mongo.conf</span><br><span class="line"></span><br><span class="line"># fork and run in background</span><br><span class="line">fork=true</span><br><span class="line"></span><br><span class="line"># 端口</span><br><span class="line">port=9430</span><br><span class="line"></span><br><span class="line"># 认证模式</span><br><span class="line">auth=true</span><br><span class="line"></span><br><span class="line"># what storage engine to use - defaults to wiredTiger if no data files present directory for datafiles - defaults to /data/db</span><br><span class="line">storageEngine=wiredTiger</span><br><span class="line"></span><br><span class="line"># maximum amount of memory to allocate for cache; defaults to 1/2 of physical RAM</span><br><span class="line">wiredTigerCacheSizeGB=1</span><br><span class="line"></span><br><span class="line"># 数据库文件保存位置</span><br><span class="line">dbpath=/db/mongodb-3.4.7/data/db</span><br><span class="line"></span><br><span class="line"># where to log</span><br><span class="line">logpath=/db/logs/mongodb.log</span><br><span class="line"></span><br><span class="line">#以追加方式写入日志</span><br><span class="line">logappend=true</span><br><span class="line"></span><br><span class="line"># each database will be stored in a separate directory</span><br><span class="line">directoryperdb=true</span><br><span class="line"></span><br><span class="line"># use a smaller default file size</span><br><span class="line">smallfiles=true</span><br><span class="line"></span><br><span class="line"># enable http interface， port=28017</span><br><span class="line">httpinterface=false</span><br><span class="line"></span><br><span class="line"># turn on simple rest api 开启rest api</span><br><span class="line">rest=false</span><br><span class="line"></span><br><span class="line"># comma separated list of ip addresses to  listen on - all local ips by default</span><br><span class="line"># bind_ip=192.168.1.120,192.168.1.123</span><br></pre></td></tr></table></figure><p>简单的主从配置文件</p><p>master.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 设置数据文件的存放目录</span><br><span class="line">dbpath=/db/mongo/master/data</span><br><span class="line"># 设置日志文件的存放目录及其日志文件名</span><br><span class="line">logpath=/db/mongo/master/logs/mongo.log</span><br><span class="line"># 设置端口号（默认的端口号是 27017）</span><br><span class="line">master=true</span><br><span class="line">#slave=true</span><br><span class="line"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class="line">fork=true</span><br><span class="line">#监听网卡</span><br><span class="line">bind_ip= 0.0.0.0</span><br><span class="line">#服务端口</span><br><span class="line">port=27019</span><br><span class="line">oplogSize=2048</span><br><span class="line">#source=127.0.0.1:27018</span><br><span class="line">#autoresync=true</span><br></pre></td></tr></table></figure></p><p>slave.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 设置数据文件的存放目录</span><br><span class="line">dbpath=/db/mongo/slave/data</span><br><span class="line"># 设置日志文件的存放目录及其日志文件名</span><br><span class="line">logpath=/db/mongo/slave/logs/mongo.log</span><br><span class="line"># 设置端口号（默认的端口号是 27017）</span><br><span class="line">#master=true</span><br><span class="line">slave=true</span><br><span class="line"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class="line">fork=true</span><br><span class="line">#监听网卡</span><br><span class="line">bind_ip= 0.0.0.0</span><br><span class="line">#服务端口</span><br><span class="line">port=27019</span><br><span class="line">oplogSize=2048</span><br><span class="line">source=127.0.0.1:27018</span><br><span class="line">autoresync=true</span><br></pre></td></tr></table></figure><p>一些其他的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">--quiet # 安静输出</span><br><span class="line">--port arg  # 指定服务端口号，默认端口27017</span><br><span class="line">--bind_ip arg   # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</span><br><span class="line">--logpath arg   # 指定MongoDB日志文件，注意是指定文件不是目录</span><br><span class="line">--logappend # 使用追加的方式写日志</span><br><span class="line">--pidfilepath arg   # PID File 的完整路径，如果没有设置，则没有PID文件</span><br><span class="line">--keyFile arg   # 集群的私钥的完整路径，只对于Replica Set 架构有效</span><br><span class="line">--unixSocketPrefix arg  # UNIX域套接字替代目录,(默认为 /tmp)</span><br><span class="line">--fork  # 以守护进程的方式运行MongoDB，创建服务器进程</span><br><span class="line">--auth  # 启用验证</span><br><span class="line">--cpu   # 定期显示CPU的CPU利用率和iowait</span><br><span class="line">--dbpath arg    # 指定数据库路径</span><br><span class="line">--diaglog arg   # diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads</span><br><span class="line">--directoryperdb    # 设置每个数据库将被保存在一个单独的目录</span><br><span class="line">--journal   # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里</span><br><span class="line">--journalOptions arg    # 启用日志诊断选项</span><br><span class="line">--ipv6  # 启用IPv6选项</span><br><span class="line">--jsonp # 允许JSONP形式通过HTTP访问（有安全影响）</span><br><span class="line">--maxConns arg  # 最大同时连接数 默认2000</span><br><span class="line">--noauth    # 不启用验证</span><br><span class="line">--nohttpinterface   # 关闭http接口，默认关闭27018端口访问</span><br><span class="line">--noprealloc    # 禁用数据文件预分配(往往影响性能)</span><br><span class="line">--noscripting   # 禁用脚本引擎</span><br><span class="line">--notablescan   # 不允许表扫描</span><br><span class="line">--nounixsocket  # 禁用Unix套接字监听</span><br><span class="line">--nssize arg (=16)  # 设置信数据库.ns文件大小(MB)</span><br><span class="line">--objcheck  # 在收到客户数据,检查的有效性，</span><br><span class="line">--profile arg   # 档案参数 0=off 1=slow, 2=all</span><br><span class="line">--quota # 限制每个数据库的文件数，设置默认为8</span><br><span class="line">--quotaFiles arg    # number of files allower per db, requires --quota</span><br><span class="line">--rest  # 开启简单的rest API</span><br><span class="line">--repair    # 修复所有数据库run repair on all dbs</span><br><span class="line">--repairpath arg    # 修复库生成的文件的目录,默认为目录名称dbpath</span><br><span class="line">--slowms arg (=100) # value of slow for profile and console log</span><br><span class="line">--smallfiles    # 使用较小的默认文件</span><br><span class="line">--syncdelay arg (=60)   # 数据写入磁盘的时间秒数(0=never,不推荐)</span><br><span class="line">--sysinfo   # 打印一些诊断系统信息</span><br><span class="line">--upgrade   # 如果需要升级数据库</span><br><span class="line"> * Replicaton 参数</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--fastsync  # 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步</span><br><span class="line">--autoresync    # 如果从库与主库同步数据差得多，自动重新同步;当发现从服务器的数据不是最新时，开始从主服务器请求同步数据</span><br><span class="line">--oplogSize arg # 主节点的oplog日志大小，单位为M，建议设大点(更改oplog大小时，只需停主库，删除local.*，然后加--oplogSize=* 重新启动即可,*代表大小)</span><br><span class="line"> * 主/从参数</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--master    # 主库模式</span><br><span class="line">--slave # 从库模式</span><br><span class="line">--source arg    # 从库 端口号</span><br><span class="line">--only arg  # 指定单一的数据库复制</span><br><span class="line">--slavedelay arg    # 设置从库同步主库的延迟时间</span><br><span class="line"> * Replica set(副本集)选项：</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--replSet arg   # 设置副本集名称</span><br><span class="line"> * Sharding(分片)选项</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">--configsvr # 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb</span><br><span class="line">--shardsvr  # 声明这是一个集群的分片,默认端口27018</span><br><span class="line">--noMoveParanoia    # 关闭偏执为moveChunk数据保存</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://www.cnblogs.com/amoyzhu/p/7943018.html" target="_blank" rel="noopener">mongo主从配置</a></p><h3 id="主机中存储"><a href="#主机中存储" class="headerlink" title="主机中存储"></a>主机中存储</h3><p>db.createCollection(“test”);<br>db.getCollection(‘test’). insert({“name”:”master”})</p><h3 id="验证-在slave中查看是否有此数据"><a href="#验证-在slave中查看是否有此数据" class="headerlink" title="验证 在slave中查看是否有此数据"></a>验证 在slave中查看是否有此数据</h3><p>./mongo host:port/db -u user -p pwd</p><p>#mongo 127.0.0.1:9430/admin -u root -p FpTH2a<br>db.getCollection(‘test’).find({});<br>默认的SECONDARY是不允许读写的，使用命令解决<br>rs.slaveOk();</p><p>加Auth=true的验证</p><h3 id="疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？"><a href="#疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？" class="headerlink" title="疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？"></a>疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？</h3><p>参考：</p><ul><li><a href="https://blog.csdn.net/weixin_41988331/article/details/83116873" target="_blank" rel="noopener">mongodb 主从 部署 切换</a></li><li><a href="https://blog.csdn.net/lelemom/article/details/82704980" target="_blank" rel="noopener">mongodb主从配置及备份</a></li></ul>]]></content>
    
    <summary type="html">
    
      设计mongo的主从架构
    
    </summary>
    
      <category term="数据库" scheme="https://muxiaobai.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongo" scheme="https://muxiaobai.github.io/tags/mongo/"/>
    
      <category term="设计" scheme="https://muxiaobai.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>前言技术之OCR识别</title>
    <link href="https://muxiaobai.github.io/2018/12/21/%E5%89%8D%E8%A8%80%E6%8A%80%E6%9C%AF%E4%B9%8BOCR%E8%AF%86%E5%88%AB/"/>
    <id>https://muxiaobai.github.io/2018/12/21/前言技术之OCR识别/</id>
    <published>2018-12-21T01:10:12.000Z</published>
    <updated>2018-12-24T02:07:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>OCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。</p><p>主要是两个步骤，先获取输入源数据，例如扫描仪、相机等，然后进行识别，目前流行的识别技术主要是RNN循环神经网络、LSTM等，传统的OCR<br><a id="more"></a><br>tesseract-ocr 识别，当前使用版本4.0，下载的时候,直接在github中的wiki即可。</p><p>win</p><p>环境变量</p><p>增加一个PATH变量名，变量值还是我的安装路径C:\Program Files (x86)\Tesseract-OCR;</p><p>增加一个TESSDATA_PREFIX变量名，变量值还是我的安装路径C:\Program Files (x86)\Tesseract-OCR\tessdata;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tesseract -v</span><br><span class="line"></span><br><span class="line">tesseract test.png output_1 –l eng</span><br></pre></td></tr></table></figure><p><a href="https://github.com/tesseract-ocr/tesseract/wiki" target="_blank" rel="noopener">wiki</a><br><a href="https://www.cnblogs.com/jianqingwang/p/6978724.html" target="_blank" rel="noopener">安装</a><br><a href="https://www.cnblogs.com/cnlian/p/5765871.html" target="_blank" rel="noopener">使用</a></p>]]></content>
    
    <summary type="html">
    
      OCR,文字识别技术
    
    </summary>
    
      <category term="OCR" scheme="https://muxiaobai.github.io/categories/OCR/"/>
    
    
      <category term="前沿技术" scheme="https://muxiaobai.github.io/tags/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM之远程监控</title>
    <link href="https://muxiaobai.github.io/2018/11/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7/"/>
    <id>https://muxiaobai.github.io/2018/11/22/深入理解JVM之远程监控/</id>
    <published>2018-11-21T23:21:35.000Z</published>
    <updated>2019-01-02T03:12:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>远程监控jconsole和jvisualvm<br><a id="more"></a></p><p>修改服务器tomcat的bin/catalina.bat文件,</p><p>新建setenv.sh,给权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Djava.rmi.server.hostname=192.168.202.121 -Dcom.sun.management.jmxremote&quot;</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.port=12345&quot;</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=true&quot;</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false&quot;</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.pwd.file=$JAVA_HOME/jre/lib/management/jmxremote.password&quot;</span><br></pre></td></tr></table></figure><p>配置权限文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost bin]# cd $JAVA_HOME/jre/lib/management</span><br><span class="line"></span><br><span class="line">[root@localhost management]# cp jmxremote.password.template jmxremote.password</span><br><span class="line"></span><br><span class="line">[root@localhost management]# vi jmxremote.password</span><br><span class="line"></span><br><span class="line">monitorRole QED</span><br><span class="line">controlRole chenqimiao</span><br><span class="line"></span><br><span class="line">[root@localhost management]# chmod 600 jmxremote.password jmxremote.access</span><br></pre></td></tr></table></figure><p>linux:  netstat -ano | grep 12345<br>win :   netstat -ano | findstr 12345</p><p>修改jvisualvm工具无法下载插件问题。<br>修改插件&gt;&gt;&gt;设置中的地址<br>在<a href="https://visualvm.github.io/pluginscenters.html" target="_blank" rel="noopener">visual VM 网址查询</a></p><ul><li><a href="https://www.cnblogs.com/think-in-java/p/6138439.html" target="_blank" rel="noopener">JConsole远程连接</a></li><li><a href="https://blog.csdn.net/yunzhu666/article/details/8662045" target="_blank" rel="noopener">监控JVM带main方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      JVM配置远程监控,配置
    
    </summary>
    
      <category term="java" scheme="https://muxiaobai.github.io/categories/java/"/>
    
    
      <category term="tomcat" scheme="https://muxiaobai.github.io/tags/tomcat/"/>
    
      <category term="jvm" scheme="https://muxiaobai.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>数据库监控-Druid监控配置</title>
    <link href="https://muxiaobai.github.io/2018/11/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%91%E6%8E%A7-Druid%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE/"/>
    <id>https://muxiaobai.github.io/2018/11/22/数据库监控-Druid监控配置/</id>
    <published>2018-11-21T18:22:41.000Z</published>
    <updated>2019-01-11T02:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Druid连接池监控问题，主要包括，配置，记录慢SQL等。<br><a id="more"></a></p><p><a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">Github repo</a><br><a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">Github Druid Wiki</a></p><h2 id="添加监控页面"><a href="#添加监控页面" class="headerlink" title="添加监控页面"></a>添加监控页面</h2><h2 id="WEB应用-URI监控-Spring监控"><a href="#WEB应用-URI监控-Spring监控" class="headerlink" title="WEB应用 URI监控 Spring监控"></a>WEB应用 URI监控 Spring监控</h2><p>web.xml,放在前面的，URI监控filter，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;!-- druid监控 http://host:port/druid/sql.html --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;com.alibaba.druid.support.http.WebStatFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中 --&gt;</span><br><span class="line">&lt;param-name&gt;exclusions&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 --&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;sessionStatMaxCount&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;1000&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表 --&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;profileEnable&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">  &lt;param-name&gt;principalCookieName&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;userName&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;principalSessionName&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;session_user&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;!-- 你可以关闭session统计功能 </span><br><span class="line">&lt;init-param&gt; </span><br><span class="line">&lt;param-name&gt;sessionStatEnable&lt;/param-name&gt; </span><br><span class="line">&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt; --&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/filter-mapping&gt; </span><br><span class="line">  </span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。</span><br><span class="line">如果allow没有配置或者为空，则允许所有访问</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;allow&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;10.38.94.201,127.0.0.1&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;!-- &lt;init-param&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;param-name&gt;deny&lt;/param-name&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;param-value&gt;10.38.94.201&lt;/param-value&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;/init-param&gt; --&gt;</span><br><span class="line">&lt;!-- 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数 --&gt;</span><br><span class="line">   &lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;init-param&gt;</span><br><span class="line">        &lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;param-name&gt;resetEnable&lt;/param-name&gt;</span><br><span class="line">        &lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;/init-param&gt;</span><br><span class="line">    &lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;!--  用户名和密码 --&gt;</span><br><span class="line">    &lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;loginUsername&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;druid&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;loginPassword&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;druid&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>spring.xml 监控Spring</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring 监控 --&gt;</span><br><span class="line">   &lt;bean id=&quot;druid-stat-interceptor&quot;</span><br><span class="line">         class=&quot;com.alibaba.druid.support.spring.stat.DruidStatInterceptor&quot;&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;druid-stat-pointcut&quot; class=&quot;org.springframework.aop.support.JdkRegexpMethodPointcut&quot;</span><br><span class="line">         scope=&quot;prototype&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;patterns&quot;&gt;</span><br><span class="line">           &lt;list&gt;</span><br><span class="line">               &lt;value&gt;cn.forp.*.service.*.*(..)&lt;/value&gt;</span><br><span class="line">               &lt;value&gt;cn.forp.*.controller.*.*(..)&lt;/value&gt;</span><br><span class="line">           &lt;/list&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;aop:config&gt;</span><br><span class="line">       &lt;aop:advisor advice-ref=&quot;druid-stat-interceptor&quot; pointcut-ref=&quot;druid-stat-pointcut&quot;/&gt;</span><br><span class="line">   &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="慢SQL日志记录"><a href="#慢SQL日志记录" class="headerlink" title="慢SQL日志记录"></a>慢SQL日志记录</h2><p>spring.xml的 dataSource bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@host:port/orcl&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;validationQuery&quot; value=&quot;select &apos;x&apos; from dual&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class="line">&lt;property name=&quot;initialSize&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;minIdle&quot; value=&quot;1&quot;/&gt; </span><br><span class="line">&lt;property name=&quot;maxActive&quot; value=&quot;5&quot;/&gt;</span><br><span class="line">&lt;!-- 配置获取连接等待超时的时间，单位是毫秒 --&gt;</span><br><span class="line">&lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class="line">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class="line">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class="line">&lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class="line">&lt;!-- 启用拦截的filters：sql注入，监控统计 --&gt;</span><br><span class="line">&lt;property name=&quot;filters&quot; value=&quot;wall,stat&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class="line">  &lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1800&quot; /&gt; &lt;!-- 1800秒，也就是30分钟 --&gt;</span><br><span class="line"> &lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;proxyFilters&quot;&gt;</span><br><span class="line">           &lt;list&gt;</span><br><span class="line">               &lt;ref bean=&quot;stat-filter&quot;/&gt;</span><br><span class="line">               &lt;ref bean=&quot;log-filter&quot;/&gt;</span><br><span class="line">           &lt;/list&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    &lt;!-- 慢SQL记录 --&gt;</span><br><span class="line">   &lt;bean id=&quot;stat-filter&quot; class=&quot;com.alibaba.druid.filter.stat.StatFilter&quot;&gt;</span><br><span class="line">       &lt;!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql --&gt;</span><br><span class="line">       &lt;property name=&quot;slowSqlMillis&quot; value=&quot;200&quot;/&gt;</span><br><span class="line">       &lt;property name=&quot;logSlowSql&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;log-filter&quot; class=&quot;com.alibaba.druid.filter.logging.Log4jFilter&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;dataSourceLogEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">       &lt;property name=&quot;statementExecutableSqlLogEnable&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># ROOT Logger</span><br><span class="line">log4j.rootLogger = INFO, console, druid</span><br><span class="line"></span><br><span class="line"># log4j.category.org.springframework = DEBUG</span><br><span class="line">log4j.category.cn.forp = DEBUG</span><br><span class="line"></span><br><span class="line"># Console</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern = [%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %5p %c&#123;1&#125; %m%n</span><br><span class="line"></span><br><span class="line"># File</span><br><span class="line">log4j.appender.file = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.file.file = $&#123;catalina.home&#125;/logs/forp-pitaya.log</span><br><span class="line">log4j.appender.file.DatePattern = &apos;.&apos;yyyy-MM-dd</span><br><span class="line">log4j.appender.file.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.conversionPattern = [%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %5p %c&#123;1&#125; %m%n</span><br><span class="line">log4j.appender.file.append =false</span><br><span class="line"></span><br><span class="line"># Druid</span><br><span class="line">log4j.logger.druid.sql=WARN,druid</span><br><span class="line">log4j.logger.druid.sql.DataSource=WARN,druid</span><br><span class="line">log4j.logger.druid.sql.Connection=WARN,druid</span><br><span class="line">log4j.logger.druid.sql.Statement=WARN,druid</span><br><span class="line"></span><br><span class="line">log4j.appender.druid=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.druid.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.druid.layout.ConversionPattern= [%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;] %c&#123;1&#125; - %m%n</span><br><span class="line">log4j.appender.druid.datePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class="line">log4j.appender.druid.Threshold = WARN</span><br><span class="line">log4j.appender.druid.append=true</span><br><span class="line">log4j.appender.druid.File=$&#123;catalina.home&#125;/logs/druid-slow-sql.log</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://my.oschina.net/wangmengjun/blog/788386" target="_blank" rel="noopener">使用Druid监控SQL执行状态</a></li><li><a href="https://blog.csdn.net/haiyang4988/article/details/73740700" target="_blank" rel="noopener">druid监控及慢sql记录</a></li><li><a href="https://blog.csdn.net/binglovezi/article/details/50610269#" target="_blank" rel="noopener">Druid Monitor监控JavaSE和JavaWeb</a></li><li><a href="https://github.com/alibaba/druid/blob/master/src/main/scripts/druidStat.sh" target="_blank" rel="noopener">JavaSE 监控</a></li></ul>]]></content>
    
    <summary type="html">
    
      监控Druid连接池运行情况，配合其他的Web URL Spring 等监控
    
    </summary>
    
      <category term="SQL" scheme="https://muxiaobai.github.io/categories/SQL/"/>
    
      <category term="系统监控优化" scheme="https://muxiaobai.github.io/categories/SQL/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://muxiaobai.github.io/categories/SQL/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E4%BC%98%E5%8C%96/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="连接池" scheme="https://muxiaobai.github.io/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>应用部署之nginx参数配置</title>
    <link href="https://muxiaobai.github.io/2018/11/15/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <id>https://muxiaobai.github.io/2018/11/15/应用部署之nginx参数配置/</id>
    <published>2018-11-14T19:45:12.000Z</published>
    <updated>2018-11-23T03:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>参考<a href="https://github.com/muxiaobai/CourseExercises/blob/master/shell/linux/nginx.conf" target="_blank" rel="noopener">nginx配置文件</a></p><h3 id="应用请求数配置"><a href="#应用请求数配置" class="headerlink" title="应用请求数配置"></a>应用请求数配置</h3><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志参数"><a href="#日志参数" class="headerlink" title="日志参数"></a>日志参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$args                    #请求中的参数值</span><br><span class="line">$query_string            #同 $args</span><br><span class="line">$arg_NAME                #GET请求中NAME的值</span><br><span class="line">$is_args                 #如果请求中有参数，值为&quot;?&quot;，否则为空字符串</span><br><span class="line">$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如&quot;/foo/bar.html&quot;。</span><br><span class="line">$document_uri            #同 $uri</span><br><span class="line">$document_root           #当前请求的文档根目录或别名</span><br><span class="line">$host                    #优先级：HTTP请求行的主机名&gt;&quot;HOST&quot;请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</span><br><span class="line">$hostname                #主机名</span><br><span class="line">$https                   #如果开启了SSL安全模式，值为&quot;on&quot;，否则为空字符串。</span><br><span class="line">$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节</span><br><span class="line">$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的&quot;%B&quot;参数保持兼容</span><br><span class="line">$bytes_sent              #传输给客户端的字节数</span><br><span class="line">$connection              #TCP连接的序列号</span><br><span class="line">$connection_requests     #TCP连接当前的请求数量</span><br><span class="line">$content_length          #&quot;Content-Length&quot; 请求头字段</span><br><span class="line">$content_type            #&quot;Content-Type&quot; 请求头字段</span><br><span class="line">$cookie_name             #cookie名称</span><br><span class="line">$limit_rate              #用于设置响应的速度限制</span><br><span class="line">$msec                    #当前的Unix时间戳</span><br><span class="line">$nginx_version           #nginx版本</span><br><span class="line">$pid                     #工作进程的PID</span><br><span class="line">$pipe                    #如果请求来自管道通信，值为&quot;p&quot;，否则为&quot;.&quot;</span><br><span class="line">$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</span><br><span class="line">$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</span><br><span class="line">$remote_addr             #客户端地址</span><br><span class="line">$remote_port             #客户端端口</span><br><span class="line">$remote_user             #用于HTTP基础认证服务的用户名</span><br><span class="line">$request                 #代表客户端的请求地址</span><br><span class="line">$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</span><br><span class="line">$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</span><br><span class="line">$request_completion      #如果请求成功，值为&quot;OK&quot;，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</span><br><span class="line">$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成</span><br><span class="line">$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)</span><br><span class="line">$request_method          #HTTP请求方法，通常为&quot;GET&quot;或&quot;POST&quot;</span><br><span class="line">$request_time            #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</span><br><span class="line">$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：&quot;/cnphp/test.php?arg=freemouse&quot;</span><br><span class="line">$scheme                  #请求使用的Web协议，&quot;http&quot; 或 &quot;https&quot;</span><br><span class="line">$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</span><br><span class="line">$server_name             #服务器名</span><br><span class="line">$server_port             #服务器端口</span><br><span class="line">$server_protocol         #服务器的HTTP版本，通常为 &quot;HTTP/1.0&quot; 或 &quot;HTTP/1.1&quot;</span><br><span class="line">$status                  #HTTP响应代码</span><br><span class="line">$time_iso8601            #服务器时间的ISO 8610格式</span><br><span class="line">$time_local              #服务器时间（LOG Format 格式）</span><br><span class="line">$cookie_NAME             #客户端请求Header头中的cookie变量，前缀&quot;$cookie_&quot;加上cookie名称的变量，该变量的值即为cookie名称的值</span><br><span class="line">$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：&quot;Accept-Language&quot;，$http_accept_language即可</span><br><span class="line">$http_cookie</span><br><span class="line">$http_host               #请求地址，即浏览器中你输入的地址（IP或域名）</span><br><span class="line">$http_referer            #url跳转来源,用来记录从那个页面链接访问过来的</span><br><span class="line">$http_user_agent         #用户终端浏览器等信息</span><br><span class="line">$http_x_forwarded_for    </span><br><span class="line">$proxy_add_x_forwarded_for;#来自http请求的：x-forword-for字段，如果没有&quot;X-Forwarded-For&quot; 请求头，则$proxy_add_x_forwarded_for等于$remote_addr。x-forwarded-for不光可以自己设置值，而且可以设置任意格式值。</span><br><span class="line">$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</span><br><span class="line">$sent_http_cache_control</span><br><span class="line">$sent_http_connection</span><br><span class="line">$sent_http_content_type</span><br><span class="line">$sent_http_keep_alive</span><br><span class="line">$sent_http_last_modified</span><br><span class="line">$sent_http_location</span><br><span class="line">$sent_http_transfer_encoding</span><br></pre></td></tr></table></figure><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><p>error_log</p><p>access_log </p><p>log_format access ‘$remote_addr - $remote_user [$time_local] “$request” $status $body_bytes_sent $request_body “$http_referer” “$http_user_agent” $http_x_forwarded_for’;</p><h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><p>1）总请求数</p><p>wc -l  access.log |awk ‘{print $1}’</p><p>2）独立IP数</p><p>awk ‘{print $1}’ access.log|sort |uniq |wc -l</p><p>3）每秒客户端请求数 TOP5</p><p>awk ‘{print $6}’ access.log|sort|uniq -c|sort -rn|head -5</p><p>4）访问最频繁IP Top5</p><p>awk ‘{print $1}’ access.log|sort |uniq -c |sort -nr |head -5</p><p>5）访问最频繁的URL TOP5</p><p>awk ‘{print $7}’ access.log|sort |uniq -c |sort -nr |head -5</p><p>6)响应大于5秒的URL TOP5</p><p>awk ‘{if ($7 &gt; 5){print $6}}’ access.log|sort|uniq -c|sort -rn |head -5</p><p>7)HTTP状态码(非200)统计 Top5</p><p>awk ‘{if ($11 != 200){print $11}}’ access.log|sort|uniq -c|sort -rn|head -5</p><p>8)分析请求数大于50000的源IP</p><p>cat access.log|awk ‘{print $NF}’|sort |uniq -c |sort -nr|awk ‘{if ($1 &gt;50000){print $2}}’</p><h4 id="日志分析2"><a href="#日志分析2" class="headerlink" title="日志分析2"></a>日志分析2</h4><p>IP相关统计<br>统计IP访问量（独立ip访问数量）</p><p>awk ‘{print $1}’ access.log | sort -n | uniq | wc -l</p><p>查看某一时间段的IP访问量(4-5点)</p><p>grep “07/Apr/2017:0[4-5]” access.log | awk ‘{print $1}’ | sort | uniq -c| sort -nr | wc -l  </p><p>查看访问最频繁的前100个IP</p><p>awk ‘{print $1}’ access.log | sort -n |uniq -c | sort -rn | head -n 100</p><p>查看访问100次以上的IP</p><p>awk ‘{print $1}’ access.log | sort -n |uniq -c |awk ‘{if($1 &gt;100) print $0}’|sort -rn</p><p>查询某个IP的详细访问情况,按访问频率排序</p><p>grep ‘127.0.01’ access.log |awk ‘{print $7}’|sort |uniq -c |sort -rn |head -n 100</p><p>页面访问统计</p><p>查看访问最频的页面(TOP100)</p><p>awk ‘{print $7}’ access.log | sort |uniq -c | sort -rn | head -n 100</p><p>查看访问最频的页面([排除php页面】(TOP100)</p><p>grep -v “.php”  access.log | awk ‘{print $7}’ | sort |uniq -c | sort -rn | head -n 100 </p><p>查看页面访问次数超过100次的页面</p><p>cat access.log | cut -d ‘ ‘ -f 7 | sort |uniq -c | awk ‘{if ($1 &gt; 100) print $0}’ | less</p><p>查看最近1000条记录，访问量最高的页面</p><p>tail -1000 access.log |awk ‘{print $7}’|sort|uniq -c|sort -nr|less</p><p>每秒请求量统计</p><p>统计每秒的请求数,top100的时间点(精确到秒)</p><p>awk ‘{print $4}’ access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100</p><p>每分钟请求量统计</p><p>统计每分钟的请求数,top100的时间点(精确到分钟)</p><p>awk ‘{print $4}’ access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100</p><p>每小时请求量统计</p><p>统计每小时的请求数,top100的时间点(精确到小时)</p><p>awk ‘{print $4}’ access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100</p><p>性能分析</p><p>在nginx log中最后一个字段加入$request_time</p><p>列出传输时间超过 3 秒的页面，显示前20条</p><p>cat access.log|awk ‘($NF &gt; 3){print $7}’|sort -n|uniq -c|sort -nr|head -20</p><p>列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条</p><p>cat access.log|awk ‘($NF &gt; 1 &amp;&amp;  $7~/.php/){print $7}’|sort -n|uniq -c|sort -nr|head -100</p><p>蜘蛛抓取统计</p><p>统计蜘蛛抓取次数</p><p>grep ‘Baiduspider’ access.log |wc -l<br>统计蜘蛛抓取404的次数</p><p>grep ‘Baiduspider’ access.log |grep ‘404’ | wc -l</p><p>TCP连接统计</p><p>查看当前TCP连接数</p><p>netstat -tan | grep “ESTABLISHED” | grep “:80” | wc -l</p><p>用tcpdump嗅探80端口的访问看看谁最高</p><p>tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F”.” ‘{print $1”.”$2”.”$3”.”$4}’ | sort | uniq -c | sort -nr</p><p><a href="https://www.cnblogs.com/gouge/p/7089939.html" target="_blank" rel="noopener">nginx 常用命令</a></p>]]></content>
    
    <summary type="html">
    
      nginx参数调优问题
    
    </summary>
    
      <category term="deploy" scheme="https://muxiaobai.github.io/categories/deploy/"/>
    
    
      <category term="nginx" scheme="https://muxiaobai.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>数据库操作-plsql操作</title>
    <link href="https://muxiaobai.github.io/2018/11/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-plsql%E6%93%8D%E4%BD%9C/"/>
    <id>https://muxiaobai.github.io/2018/11/07/数据库操作-plsql操作/</id>
    <published>2018-11-06T21:58:38.000Z</published>
    <updated>2019-01-11T02:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>PLSQL的一些操作，<br><a id="more"></a></p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>在Tools-&gt;Perferences-&gt;Editor中Autoreplaces选择配置的shortcuts文件</p><p>C:\ProgramTool\PLSQL Developer\short.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sf = select * from </span><br><span class="line">w = where </span><br><span class="line">sf = select t.*, t.rowid from  </span><br><span class="line">sc = select count(1) from </span><br><span class="line">df = delete from</span><br></pre></td></tr></table></figure><h4 id="Session查看"><a href="#Session查看" class="headerlink" title="Session查看"></a>Session查看</h4><p>plsql 工具   Tools —–&gt;Sessions———&gt; 查看</p><h4 id="数据库比对工具"><a href="#数据库比对工具" class="headerlink" title="数据库比对工具"></a>数据库比对工具</h4><p>plsql Tools ——-&gt;Compare User Objects 选择另外一个库</p><h4 id="导入csv数据"><a href="#导入csv数据" class="headerlink" title="导入csv数据"></a>导入csv数据</h4><p>需要将csv另存为csv</p><p>plsql Tools ——-&gt;Text Importer—-&gt;Open data file  —&gt;Data to Oracle 选择Owener Table</p><h4 id="记住密码多个账号，账号密码等"><a href="#记住密码多个账号，账号密码等" class="headerlink" title="记住密码多个账号，账号密码等"></a>记住密码多个账号，账号密码等</h4><p>Tools-&gt;Preferences</p><p>tools -&gt; Preferences -&gt; User Interface - Options<br>勾选 Autosave username, ，保存即可</p><p>tools -&gt; Preferences -&gt; Oracle -&gt; logon History</p><p>Definition-&gt;Store history,Store with password</p><p>-&gt;fixed user<br>按格式：user/password@数据库 添加一个fixed user保存即可<br><a href="mailto:zzz/sdsdfs@192.168.1.12" target="_blank" rel="noopener">zzz/sdsdfs@192.168.1.12</a>:1555/orcl</p><p><a href="https://www.cnblogs.com/Chary/p/No00008F.html" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      plsql的一些操作
    
    </summary>
    
      <category term="SQL" scheme="https://muxiaobai.github.io/categories/SQL/"/>
    
      <category term="数据库" scheme="https://muxiaobai.github.io/categories/SQL/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="常用代码" scheme="https://muxiaobai.github.io/tags/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>javascript-常用代码</title>
    <link href="https://muxiaobai.github.io/2018/10/09/javascript-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    <id>https://muxiaobai.github.io/2018/10/09/javascript-常用代码/</id>
    <published>2018-10-08T22:31:08.000Z</published>
    <updated>2019-03-05T08:19:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="select-option选择"><a href="#select-option选择" class="headerlink" title="select option选择"></a>select option选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var options=$(&quot;#select option:selected&quot;); //获取选中的项</span><br><span class="line">alert(options.val()); //拿到选中项的值</span><br><span class="line">alert(options.text()); //拿到选中项的文本</span><br><span class="line">alert(options.attr(&apos;url&apos;)); //拿到选中项的url值</span><br></pre></td></tr></table></figure><h4 id="Ajax-设置时间超时"><a href="#Ajax-设置时间超时" class="headerlink" title="Ajax,设置时间超时"></a>Ajax,设置时间超时</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">var ajaxTimeoutTest = $.ajax(&#123;</span><br><span class="line">　　url:&apos;&apos;,  //请求的URL</span><br><span class="line">　　timeout : 1000, //超时时间设置，单位毫秒</span><br><span class="line">　　type : &apos;get&apos;,  //请求方式，get或post</span><br><span class="line">　　data :&#123;&#125;,  //请求所传参数，json格式</span><br><span class="line">　　dataType:&apos;json&apos;,//返回的数据格式</span><br><span class="line">　　success:function(data)&#123; //请求成功的回调函数</span><br><span class="line">　　　　alert(&quot;成功&quot;);</span><br><span class="line">　　&#125;,</span><br><span class="line">　　complete : function(XMLHttpRequest,status)&#123; //请求完成后最终执行参数</span><br><span class="line">　　　　if(status==&apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class="line"> 　　　　　 ajaxTimeoutTest.abort();</span><br><span class="line">　　　　　  alert(&quot;超时&quot;);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function request(url, data, success_callback,error_callback) &#123;</span><br><span class="line">    console.log(&quot;url:&quot;+url);</span><br><span class="line"></span><br><span class="line">var xhr = $.ajax(&#123;</span><br><span class="line">        //提交数据的类型 POST GET</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        //提交的网址</span><br><span class="line">        url: url,</span><br><span class="line">        //提交的数据</span><br><span class="line">        data: data,</span><br><span class="line">        //设置为同步</span><br><span class="line">        async:false,</span><br><span class="line">        // 设置超时的时间20s</span><br><span class="line">        timeout:20000,</span><br><span class="line">        //返回数据的格式</span><br><span class="line">        datatype: &quot;json&quot;, //&quot;xml&quot;, &quot;html&quot;, &quot;script&quot;, &quot;json&quot;, &quot;jsonp&quot;, &quot;text&quot;.</span><br><span class="line">        xhrFields: &#123;</span><br><span class="line">            withCredentials: true</span><br><span class="line">        &#125;,</span><br><span class="line">        crossDomain: true,</span><br><span class="line">        //在请求之前调用的函数</span><br><span class="line">        beforeSend: function () &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;,</span><br><span class="line">        //调用执行后调用的函数</span><br><span class="line">        complete: function (XMLHttpRequest, textStatus) &#123;</span><br><span class="line">            if(textStatus == &apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class="line">                if (error_callback != null &amp;&amp; error_callback != &quot;&quot;) &#123;            </span><br><span class="line">                    error_callback();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //成功返回之后调用的函数             </span><br><span class="line">        success: function (response) &#123;</span><br><span class="line">            handleResponse(response, success_callback,error_callback);</span><br><span class="line">        &#125;,</span><br><span class="line">      </span><br><span class="line">        //调用出错执行的函数</span><br><span class="line">        error: function () &#123;</span><br><span class="line">            //请求出错处理</span><br><span class="line">            console.log(&quot;error&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组对象去重"><a href="#数组对象去重" class="headerlink" title="数组对象去重"></a>数组对象去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var arr=[&#123;id:1,name:&quot;z&quot;&#125;,&#123;id:2,name:&quot;g&quot;&#125;,&#123;id:1,name:&quot;z&quot;];</span><br><span class="line">arr = unique(arr,&quot;id&quot;);</span><br><span class="line">console.log(arr);</span><br><span class="line"></span><br><span class="line">function arrayUnique2(arr, name) &#123;</span><br><span class="line">  var hash = &#123;&#125;;</span><br><span class="line">  return arr.reduce(function (item, next) &#123;</span><br><span class="line">    hash[next[name]] ? &apos;&apos; : hash[next[name]] = true &amp;&amp; item.push(next);</span><br><span class="line">    return item;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reduce函数</span><br></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//数组去重</span><br><span class="line">function uniqueList(array)&#123;</span><br><span class="line">    var r = [];</span><br><span class="line">    for(var i = 0, l = array.length; i &lt; l; i++) &#123;</span><br><span class="line">        for(var j = i + 1; j &lt; l; j++)</span><br><span class="line">            if (JSON.stringify(array[i]) == JSON.stringify(array[j])) j = ++i;</span><br><span class="line">        r.push(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组delete-之后length无效"><a href="#数组delete-之后length无效" class="headerlink" title="数组delete 之后length无效"></a>数组delete 之后length无效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//删除的数组obj, 删除第i个数据</span><br><span class="line">//delete obj[i];</span><br><span class="line">function changeLength(obj,i)&#123;</span><br><span class="line">return  obj.slice(0,i).concat(obj.slice(i+1,obj.length));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">普通数组直接使用[].concat(_test)</span><br><span class="line">对象数组：[].concat(JSON.parse(JSON.stringify(_test)))</span><br></pre></td></tr></table></figure><h4 id="替代eval方案"><a href="#替代eval方案" class="headerlink" title="替代eval方案"></a>替代eval方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function  evil(fn)</span><br><span class="line">&#123;</span><br><span class="line">    var Fn = Function;</span><br><span class="line">    return new Fn(&apos;return &apos; + fn)(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">evil(&quot;function()&#123;console.log(1111);console.log(this)&#125;()&quot;)</span><br></pre></td></tr></table></figure><h4 id="获取地址中的参数"><a href="#获取地址中的参数" class="headerlink" title="获取地址中的参数"></a>获取地址中的参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//正则</span><br><span class="line">function getUrlParam(name) &#123;</span><br><span class="line"> var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); //构造一个含有目标参数的正则表达式对象</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);  //匹配目标参数</span><br><span class="line">    if (r != null) return unescape(r[2]); return null; //返回参数值</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">//第二种，循环</span><br><span class="line">function getQueryVariable(variable)</span><br><span class="line">&#123;</span><br><span class="line">    var query = window.location.search.substring(1);</span><br><span class="line">    var vars = query.split(&quot;&amp;&quot;);</span><br><span class="line">    for (var i=0;i&lt;vars.length;i++) &#123;</span><br><span class="line">        var pair = vars[i].split(&quot;=&quot;);</span><br><span class="line">        if(pair[0] == variable)&#123;return pair[1];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return(false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h4><p>let encodedData = window.btoa(“Hello, world”); // 编码<br>let decodedData = window.atob(encodedData); // 解码</p><p>params.passwd = btoa($(‘input[name=”passwd”]’).val(), true);</p><p>org.apache.commons;</p><p>new String(Base64.decodeBase64(form.get(“passwd”))));</p><p>加密解密账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function() &#123;</span><br><span class="line">$(&quot;#btn&quot;).click(function() &#123;</span><br><span class="line">var username = encode64($(&quot;#username&quot;).val());  //对数据加密</span><br><span class="line">var password = encode64($(&quot;#password&quot;).val());</span><br><span class="line">$(&quot;#username&quot;).val(username);</span><br><span class="line">$(&quot;#password&quot;).val(password);</span><br><span class="line">document.fm.submit();  //fm为form表单name</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// base64加密开始</span><br><span class="line">var keyStr = &quot;ABCDEFGHIJKLMNOP&quot; + &quot;QRSTUVWXYZabcdef&quot; + &quot;ghijklmnopqrstuv&quot;</span><br><span class="line">+ &quot;wxyz0123456789+/&quot; + &quot;=&quot;;</span><br><span class="line"></span><br><span class="line">function encode64(input) &#123;</span><br><span class="line"> </span><br><span class="line">var output = &quot;&quot;;</span><br><span class="line">var chr1, chr2, chr3 = &quot;&quot;;</span><br><span class="line">var enc1, enc2, enc3, enc4 = &quot;&quot;;</span><br><span class="line">var i = 0;</span><br><span class="line">do &#123;</span><br><span class="line">chr1 = input.charCodeAt(i++);</span><br><span class="line">chr2 = input.charCodeAt(i++);</span><br><span class="line">chr3 = input.charCodeAt(i++);</span><br><span class="line">enc1 = chr1 &gt;&gt; 2;</span><br><span class="line">enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);</span><br><span class="line">enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);</span><br><span class="line">enc4 = chr3 &amp; 63;</span><br><span class="line">if (isNaN(chr2)) &#123;</span><br><span class="line">enc3 = enc4 = 64;</span><br><span class="line">&#125; else if (isNaN(chr3)) &#123;</span><br><span class="line">enc4 = 64;</span><br><span class="line">&#125;</span><br><span class="line">output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2)</span><br><span class="line">+ keyStr.charAt(enc3) + keyStr.charAt(enc4);</span><br><span class="line">chr1 = chr2 = chr3 = &quot;&quot;;</span><br><span class="line">enc1 = enc2 = enc3 = enc4 = &quot;&quot;;</span><br><span class="line">&#125; while (i &lt; input.length);</span><br><span class="line"> </span><br><span class="line">return output;</span><br><span class="line">&#125;</span><br><span class="line">// base64加密结束</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">private static char[] base64EncodeChars = new char[] &#123; &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;,</span><br><span class="line">&apos;E&apos;, &apos;F&apos;, &apos;G&apos;, &apos;H&apos;, &apos;I&apos;, &apos;J&apos;, &apos;K&apos;, &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;,</span><br><span class="line">&apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;, &apos;X&apos;, &apos;Y&apos;, &apos;Z&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;,</span><br><span class="line">&apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;,</span><br><span class="line">&apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;,</span><br><span class="line">&apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;+&apos;, &apos;/&apos;, &#125;;</span><br><span class="line"> </span><br><span class="line">private static byte[] base64DecodeChars = new byte[] &#123; -1, -1, -1, -1, -1,</span><br><span class="line">-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,</span><br><span class="line">-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,</span><br><span class="line">-1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59,</span><br><span class="line">60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,</span><br><span class="line">10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1,</span><br><span class="line">-1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,</span><br><span class="line">38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1,</span><br><span class="line">-1, -1 &#125;;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 解密</span><br><span class="line"> * @param str</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static byte[] decode(String str) &#123;</span><br><span class="line">byte[] data = str.getBytes();</span><br><span class="line">int len = data.length;</span><br><span class="line">ByteArrayOutputStream buf = new ByteArrayOutputStream(len);</span><br><span class="line">int i = 0;</span><br><span class="line">int b1, b2, b3, b4;</span><br><span class="line"> </span><br><span class="line">while (i &lt; len) &#123;</span><br><span class="line">do &#123;</span><br><span class="line">b1 = base64DecodeChars[data[i++]];</span><br><span class="line">&#125; while (i &lt; len &amp;&amp; b1 == -1);</span><br><span class="line">if (b1 == -1) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">do &#123;</span><br><span class="line">b2 = base64DecodeChars[data[i++]];</span><br><span class="line">&#125; while (i &lt; len &amp;&amp; b2 == -1);</span><br><span class="line">if (b2 == -1) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">buf.write((int) ((b1 &lt;&lt; 2) | ((b2 &amp; 0x30) &gt;&gt;&gt; 4)));</span><br><span class="line"> </span><br><span class="line">do &#123;</span><br><span class="line">b3 = data[i++];</span><br><span class="line">if (b3 == 61) &#123;</span><br><span class="line">return buf.toByteArray();</span><br><span class="line">&#125;</span><br><span class="line">b3 = base64DecodeChars[b3];</span><br><span class="line">&#125; while (i &lt; len &amp;&amp; b3 == -1);</span><br><span class="line">if (b3 == -1) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">buf.write((int) (((b2 &amp; 0x0f) &lt;&lt; 4) | ((b3 &amp; 0x3c) &gt;&gt;&gt; 2)));</span><br><span class="line"> </span><br><span class="line">do &#123;</span><br><span class="line">b4 = data[i++];</span><br><span class="line">if (b4 == 61) &#123;</span><br><span class="line">return buf.toByteArray();</span><br><span class="line">&#125;</span><br><span class="line">b4 = base64DecodeChars[b4];</span><br><span class="line">&#125; while (i &lt; len &amp;&amp; b4 == -1);</span><br><span class="line">if (b4 == -1) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">buf.write((int) (((b3 &amp; 0x03) &lt;&lt; 6) | b4));</span><br><span class="line">&#125;</span><br><span class="line">return buf.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端主要是JS的用法，获取参数，去重，
    
    </summary>
    
      <category term="javascript" scheme="https://muxiaobai.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://muxiaobai.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>java 常用代码</title>
    <link href="https://muxiaobai.github.io/2018/09/20/java-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    <id>https://muxiaobai.github.io/2018/09/20/java-常用代码/</id>
    <published>2018-09-19T19:24:23.000Z</published>
    <updated>2019-06-27T11:27:19.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h2><h4 id="configuration2读取配置文件"><a href="#configuration2读取配置文件" class="headerlink" title="configuration2读取配置文件"></a>configuration2读取配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.commons.configuration2.Configuration;</span><br><span class="line">import org.apache.commons.configuration2.FileBasedConfiguration;</span><br><span class="line">import org.apache.commons.configuration2.PropertiesConfiguration;</span><br><span class="line">import org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder;</span><br><span class="line">import org.apache.commons.configuration2.builder.fluent.Parameters;</span><br><span class="line">import org.apache.commons.configuration2.ex.ConfigurationException;</span><br><span class="line"></span><br><span class="line">public static String getInclude() throws ConfigurationException &#123;</span><br><span class="line">ReloadingFileBasedConfigurationBuilder&lt;FileBasedConfiguration&gt; </span><br><span class="line">    include = new ReloadingFileBasedConfigurationBuilder&lt;FileBasedConfiguration&gt;(PropertiesConfiguration.class)</span><br><span class="line">.configure(new Parameters().properties().setEncoding(&quot;utf-8&quot;).setFileName(&quot;include.properties&quot;));</span><br><span class="line">Configuration config = (Configuration)include.getConfiguration();</span><br><span class="line">String source = config.getString(&quot;ips&quot;);</span><br><span class="line">return source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="static读取配置文件"><a href="#static读取配置文件" class="headerlink" title="static读取配置文件"></a>static读取配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    public static Properties properties=new Properties();</span><br><span class="line">    public static String DEFAULT_FILENAME=&quot;default.properties&quot;;</span><br><span class="line">    加载配置文件</span><br><span class="line">static &#123;</span><br><span class="line">    // 1. load library defaults</span><br><span class="line">    InputStream in = demo.class.getResourceAsStream(DEFAULT_FILENAME);//类名.class</span><br><span class="line"></span><br><span class="line">    if (in == null) &#123;</span><br><span class="line">        throw new RuntimeException(DEFAULT_FILENAME + &quot; not found&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    if (!(in instanceof BufferedInputStream))</span><br><span class="line">        in = new BufferedInputStream(in);</span><br><span class="line">        try &#123;</span><br><span class="line">        properties.load(in);</span><br><span class="line">        in.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;Error while processing &quot;</span><br><span class="line">        + DEFAULT_FILENAME, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 获取prop值</span><br><span class="line">    * @param key 输入的参数</span><br><span class="line">    * @return 返回value</span><br><span class="line">    */</span><br><span class="line">    public static String getProperty(final String key) &#123;</span><br><span class="line">    return properties.getProperty(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line">public static String getUserToken(String account) &#123;</span><br><span class="line">    String md5 = &quot;&quot;;</span><br><span class="line">md5 = DigestUtils.md5Hex(account+&quot;0.0.0.0&quot;+new Date());</span><br><span class="line">System.out.println(md5);</span><br><span class="line">return md5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取request所有参数，和Enumeration循环"><a href="#获取request所有参数，和Enumeration循环" class="headerlink" title="获取request所有参数，和Enumeration循环"></a>获取request所有参数，和Enumeration循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Map&lt;String, String&gt; getReqParams(HttpServletRequest request)&#123;</span><br><span class="line">Enumeration&lt;String&gt;  params = request.getParameterNames();</span><br><span class="line">  Map&lt;String, String&gt; reqparams = new HashMap&lt;String, String&gt;();</span><br><span class="line">  while(params.hasMoreElements())&#123;</span><br><span class="line">            String value = (String)params.nextElement();//调用nextElement方法获得元素</span><br><span class="line">            reqparams.put(value, request.getParameter(value));</span><br><span class="line">    &#125;</span><br><span class="line">  return reqparams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*</span><br><span class="line">*通过request获取参数</span><br><span class="line">*/</span><br><span class="line">public StringBuffer getParams(HttpServletRequest request)&#123;</span><br><span class="line">       Enumeration paramMap= request.getParameterNames();</span><br><span class="line">       StringBuffer sb = new StringBuffer();</span><br><span class="line">       while(paramMap.hasMoreElements())&#123;</span><br><span class="line">           String key = (String) paramMap.nextElement();</span><br><span class="line">           sb.append(key).append(&quot;=&quot;).append(request.getParameter(key).toString()).append(&quot;&amp;&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return sb;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="get-获取文件内容并下载，变为byte-，out输出"><a href="#get-获取文件内容并下载，变为byte-，out输出" class="headerlink" title="get 获取文件内容并下载，变为byte[]，out输出"></a>get 获取文件内容并下载，变为byte[]，out输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static InputStream getInputStreamByUrl(String strUrl)&#123;</span><br><span class="line">      HttpURLConnection conn = null;</span><br><span class="line">      try &#123;</span><br><span class="line">          URL url = new URL(strUrl);</span><br><span class="line">          conn = (HttpURLConnection)url.openConnection();</span><br><span class="line">          conn.setRequestMethod(&quot;GET&quot;);</span><br><span class="line">          conn.setConnectTimeout(20 * 1000);</span><br><span class="line">          final ByteArrayOutputStream output = new ByteArrayOutputStream();</span><br><span class="line">          IOUtils.copy(conn.getInputStream(),output);</span><br><span class="line">          return  new ByteArrayInputStream(output.toByteArray());</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          try&#123;</span><br><span class="line">              if (conn != null) &#123;</span><br><span class="line">                  conn.disconnect();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;catch (Exception e1)&#123;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return null;</span><br><span class="line">  &#125;</span><br><span class="line">  public  byte[] readBytes(InputStream in) throws IOException &#123;  </span><br><span class="line">      BufferedInputStream bufin = new BufferedInputStream(in);  </span><br><span class="line">      int buffSize = 1024;  </span><br><span class="line">      ByteArrayOutputStream out = new ByteArrayOutputStream(buffSize);  </span><br><span class="line"></span><br><span class="line">      // System.out.println(&quot;Available bytes:&quot; + in.available());  </span><br><span class="line"></span><br><span class="line">      byte[] temp = new byte[buffSize];  </span><br><span class="line">      int size = 0;  </span><br><span class="line">      while ((size = bufin.read(temp)) != -1) &#123;  </span><br><span class="line">          out.write(temp, 0, size);  </span><br><span class="line">      &#125;  </span><br><span class="line">      bufin.close();  </span><br><span class="line">      in.close();  </span><br><span class="line">      byte[] content = out.toByteArray();  </span><br><span class="line">      out.close();  </span><br><span class="line">      return content;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后输出到页面,commons-io-2.6.jar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line">response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">response.setContentType(&quot;application/octet-stream&quot;);</span><br><span class="line">response.setHeader(&quot;charset&quot;, &quot;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">Tools tools = new Tools();</span><br><span class="line">StringBuffer sb  = tools.getParams(request);</span><br><span class="line">String fileId = request.getParameter(&quot;fileId&quot;);</span><br><span class="line">String fileName = request.getParameter(&quot;fileName&quot;);</span><br><span class="line">String url = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">fileName = new String(URLDecoder.decode(fileName, &quot;UTF-8&quot;).getBytes(&quot;UTF-8&quot;), &quot;ISO8859-1&quot;);</span><br><span class="line">response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=\&quot;&quot; + fileName + &quot;\&quot;;filename*=UTF-8&apos;&apos;&quot; + fileName);</span><br><span class="line"></span><br><span class="line">InputStream inp = tools.getInputStreamByUrl(url);</span><br><span class="line">byte[] bytes = tools.readBytes(inp);</span><br><span class="line">IOUtils.write(bytes, response.getOutputStream());</span><br><span class="line">response.flushBuffer();</span><br><span class="line">out.clear();</span><br><span class="line">out = pageContext.pushBody();</span><br></pre></td></tr></table></figure><h4 id="下载文件。乱码等处理"><a href="#下载文件。乱码等处理" class="headerlink" title="下载文件。乱码等处理"></a>下载文件。乱码等处理</h4><p>commons-io-2.6.jar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line">      //修复IE下载 文件名乱码</span><br><span class="line">    String userAgent = req.getHeader(&quot;user-agent&quot;).toLowerCase();  </span><br><span class="line">      if (userAgent.contains(&quot;msie&quot;) || userAgent.contains(&quot;like gecko&quot;) ) &#123;  </span><br><span class="line">        // win10 ie edge 浏览器 和其他系统的ie  </span><br><span class="line">        excelName = URLEncoder.encode(excelName, &quot;UTF-8&quot;);  </span><br><span class="line">    &#125; else &#123;  </span><br><span class="line">        // fe  </span><br><span class="line">      excelName = new String(excelName.getBytes(&quot;UTF-8&quot;), &quot;iso-8859-1&quot;);  </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    rsp.setContentType(&quot;Application/Octet-Stream&quot;);</span><br><span class="line">    PopSalaryService service = FORP.SPRING_CONTEXT.getBean(PopSalaryService.class);</span><br><span class="line">    String filename = req.getServletContext().getRealPath(&quot;/disk-file/excel-template/pre-modeltemplate.xls&quot;);</span><br><span class="line">    byte[] data = service.getFileByteArray(filename);</span><br><span class="line">    rsp.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\&quot;&quot; + excelName + &quot;\&quot;&quot;);</span><br><span class="line">    IOUtils.write(data, rsp.getOutputStream());</span><br><span class="line">return null;</span><br></pre></td></tr></table></figure></p><h4 id="存数据库乱码变成问号-全角问题"><a href="#存数据库乱码变成问号-全角问题" class="headerlink" title="存数据库乱码变成问号,全角问题"></a>存数据库乱码变成问号,全角问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">byte[] space = new byte[]&#123;(byte) 0xc2,(byte) 0xa0&#125;;</span><br><span class="line">   String UTFSpace =new String( space,&quot;UTF-8&quot; );</span><br><span class="line">   String  result=attachment.getOriginalFilename().replaceAll(UTFSpace, &quot; &quot;);</span><br></pre></td></tr></table></figure><h4 id="Map循环-获取request参数"><a href="#Map循环-获取request参数" class="headerlink" title="Map循环,获取request参数"></a>Map循环,获取request参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  HashMap&lt;String, Object&gt; map = (HashMap&lt;String, Object&gt;)obj;</span><br><span class="line">Iterator&lt;String&gt; keys = map.keySet().iterator();</span><br><span class="line">while(keys.hasNext())&#123;</span><br><span class="line">String k = keys.next();</span><br><span class="line">if(k.equals(key))</span><br><span class="line">&#123;</span><br><span class="line">return map.get(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24位编码"><a href="#24位编码" class="headerlink" title="24位编码"></a>24位编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 24位编码： 17日期+6随机数+&quot;N&quot;</span><br><span class="line">  * @return</span><br><span class="line">  */</span><br><span class="line">public static String getModelCode() &#123;</span><br><span class="line">String ret = DateFormatUtils.format(new Date(), &quot;yyyyMMddHHmmssSSS&quot;)+(int)((Math.random()*9+1)*100000)+&quot;N&quot;;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成密码并验证，使用了正则，"><a href="#生成密码并验证，使用了正则，" class="headerlink" title="生成密码并验证，使用了正则，"></a>生成密码并验证，使用了正则，</h4><p>正则， 包含大小写字母和数字，可以包含特殊字符 ，10位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">UserService service = new UserService();</span><br><span class="line">//String pattern = &quot;/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[\S]&#123;8,16&#125;$/&quot;;</span><br><span class="line">//    boolean isMatch = Pattern.matches(pattern, pass);</span><br><span class="line">Pattern pattern = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\S]&#123;8,16&#125;$&quot;); </span><br><span class="line">    String pass = service.createPassWord(10);</span><br><span class="line">    Matcher matcher = pattern.matcher(pass); </span><br><span class="line">    boolean isMatch =   matcher.matches();</span><br><span class="line">//System.out.println(pass+&quot;:&quot;+isMatch+&quot;:&quot;+service.getDigPwd(&quot;MuWajayC1G&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//生成密码</span><br><span class="line">private String generatePwd()&#123;</span><br><span class="line">        String pass = createPassWord(10);</span><br><span class="line">Pattern pattern = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\S]&#123;8,16&#125;$&quot;); </span><br><span class="line">Matcher matcher = pattern.matcher(pass); </span><br><span class="line">    boolean isMatch =   matcher.matches();</span><br><span class="line"></span><br><span class="line">      if(isMatch)&#123;</span><br><span class="line">return pass;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">  return generatePwd();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 加密Password</span><br><span class="line">private String getDigPwd(String pwd)&#123;</span><br><span class="line">return DigestUtils.md5Hex(FORP.MD5_SALT_PREFIX + pwd);</span><br><span class="line">&#125;</span><br><span class="line">private String createPassWord(int len)&#123;</span><br><span class="line">    int random = this.createRandomInt();</span><br><span class="line">    return this.createPassWord(random, len);</span><br><span class="line">&#125;</span><br><span class="line">private String createPassWord(int random,int len)&#123;</span><br><span class="line">    Random rd = new Random(random);</span><br><span class="line">    final int maxNum = 62;</span><br><span class="line">    StringBuffer sb = new StringBuffer();</span><br><span class="line">    int rdGet;//取得随机数</span><br><span class="line">    char[] str = &#123; &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;,</span><br><span class="line">        &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;,</span><br><span class="line">        &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,</span><br><span class="line">        &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;, &apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;,</span><br><span class="line">        &apos;X&apos;, &apos;Y&apos; ,&apos;Z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos; &#125;;</span><br><span class="line">    int count=0;</span><br><span class="line">    while(count &lt; len)&#123;</span><br><span class="line">      rdGet = Math.abs(rd.nextInt(maxNum));//生成的数最大为62-1</span><br><span class="line">      if (rdGet &gt;= 0 &amp;&amp; rdGet &lt; str.length) &#123;</span><br><span class="line">        sb.append(str[rdGet]);</span><br><span class="line">        count ++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  private int createRandomInt()&#123;</span><br><span class="line">    //得到0.0到1.0之间的数字，并扩大100000倍</span><br><span class="line">    double temp = Math.random()*100000;</span><br><span class="line">    //如果数据等于100000，则减少1</span><br><span class="line">    if(temp&gt;=100000)&#123;</span><br><span class="line">      temp = 99999;</span><br><span class="line">    &#125;</span><br><span class="line">    int tempint = (int)Math.ceil(temp);</span><br><span class="line">    return tempint;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="判断对象为空-判断对象不为空"><a href="#判断对象为空-判断对象不为空" class="headerlink" title="判断对象为空 判断对象不为空"></a>判断对象为空 判断对象不为空</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断对象为空</span><br><span class="line"> * </span><br><span class="line"> * @param obj</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static boolean isEmpty(Object obj) &#123;</span><br><span class="line">if (obj == null)</span><br><span class="line">return true;</span><br><span class="line"></span><br><span class="line">if (obj instanceof CharSequence)</span><br><span class="line">return ((CharSequence) obj).length() == 0;</span><br><span class="line"></span><br><span class="line">if (obj instanceof Collection)</span><br><span class="line">return ((Collection) obj).isEmpty();</span><br><span class="line"></span><br><span class="line">if (obj instanceof Map)</span><br><span class="line">return ((Map) obj).isEmpty();</span><br><span class="line"></span><br><span class="line">if (obj instanceof String)</span><br><span class="line">return &quot;&quot;.equals(obj);</span><br><span class="line"></span><br><span class="line">if (obj instanceof Object[]) &#123;</span><br><span class="line">Object[] object = (Object[]) obj;</span><br><span class="line">if (object.length == 0) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">boolean empty = true;</span><br><span class="line">for (int i = 0; i &lt; object.length; i++) &#123;</span><br><span class="line">if (!isEmpty(object[i])) &#123;</span><br><span class="line">empty = false;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return empty;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断对象不为空</span><br><span class="line"> * </span><br><span class="line"> * @param obj</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static boolean isNotEmpty(Object obj) &#123;</span><br><span class="line">return !isEmpty(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Arrays-工具"><a href="#Arrays-工具" class="headerlink" title="Arrays 工具"></a>Arrays 工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr =&#123;&quot;1&quot;,&quot;aaa2&quot;,&quot;3aaa&quot;,&quot;asds4&quot;&#125;;</span><br><span class="line">String arrString = Arrays.toString(arr);</span><br><span class="line">System.out.println(arrString);</span><br></pre></td></tr></table></figure><h2 id="JSON-相关"><a href="#JSON-相关" class="headerlink" title="JSON 相关"></a>JSON 相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FastJson </span><br><span class="line">按顺序</span><br><span class="line">Map&lt;String, Object&gt; itemMap = JSONObject.parseObject(exportFiled, LinkedHashMap.class);</span><br></pre></td></tr></table></figure><h2 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h2><h4 id="计算两个日期相差天数-xx天-xx天xx时xx分xx秒"><a href="#计算两个日期相差天数-xx天-xx天xx时xx分xx秒" class="headerlink" title="计算两个日期相差天数  xx天 xx天xx时xx分xx秒"></a>计算两个日期相差天数  xx天 xx天xx时xx分xx秒</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public  String getDatePoor(Date beginDate, Date endDate) &#123;</span><br><span class="line"> </span><br><span class="line">    long nd = 1000 * 24 * 60 * 60;</span><br><span class="line">    long nh = 1000 * 60 * 60;</span><br><span class="line">    long nm = 1000 * 60;</span><br><span class="line">     long ns = 1000;</span><br><span class="line">    // 获得两个时间的毫秒时间差异</span><br><span class="line">    long diff = endDate.getTime() - beginDate.getTime();</span><br><span class="line">    // 计算差多少天</span><br><span class="line">    long day = diff / nd;</span><br><span class="line">    // 计算差多少小时</span><br><span class="line">    long hour = diff % nd / nh;</span><br><span class="line">    // 计算差多少分钟</span><br><span class="line">    long min = diff % nd % nh / nm;</span><br><span class="line">    // 计算差多少秒//输出结果</span><br><span class="line">     long sec = diff % nd % nh % nm / ns;</span><br><span class="line">    return day + &quot;天&quot; + hour + &quot;小时&quot; + min + &quot;分&quot; + sec + &quot;秒&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#### </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 计算两个日期之间相差的天数</span><br><span class="line"> * </span><br><span class="line"> * @param smdate 较小的时间</span><br><span class="line"> * @param bdate 较大的时间</span><br><span class="line"> * @return 相差天数</span><br><span class="line"> * @throws ParseException</span><br><span class="line"> */</span><br><span class="line">public static int daysBetween(Date smdate, Date bdate) throws ParseException &#123;</span><br><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">smdate = sdf.parse(sdf.format(smdate));</span><br><span class="line">bdate = sdf.parse(sdf.format(bdate));</span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line">cal.setTime(smdate);</span><br><span class="line">long time1 = cal.getTimeInMillis();</span><br><span class="line">cal.setTime(bdate);</span><br><span class="line">long time2 = cal.getTimeInMillis();</span><br><span class="line">long between_days = (time2 - time1) / (1000 * 3600 * 24);</span><br><span class="line">return Integer.parseInt(String.valueOf(between_days));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="string2Date"><a href="#string2Date" class="headerlink" title="string2Date"></a>string2Date</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 字符串转日期</span><br><span class="line"> * </span><br><span class="line"> * @param strDate 字符串日期</span><br><span class="line"> * @param pattern 日期格式</span><br><span class="line"> * @return</span><br><span class="line"> * @throws ParseException</span><br><span class="line"> */</span><br><span class="line">public static Date string2Date(String strDate, String pattern) throws ParseException &#123;</span><br><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(pattern);</span><br><span class="line">Date date = sdf.parse(strDate);</span><br><span class="line">return date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="date2String"><a href="#date2String" class="headerlink" title="date2String"></a>date2String</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 日期转字符串</span><br><span class="line"> * </span><br><span class="line"> * @param date</span><br><span class="line"> * @return</span><br><span class="line"> * @throws ParseException</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public static String date2String(Date date, String pattern) throws ParseException &#123;</span><br><span class="line">SimpleDateFormat formatter = new SimpleDateFormat(pattern);</span><br><span class="line">return formatter.format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getFirstDayOfMonth-获取指定年月的第一天"><a href="#getFirstDayOfMonth-获取指定年月的第一天" class="headerlink" title="getFirstDayOfMonth 获取指定年月的第一天"></a>getFirstDayOfMonth 获取指定年月的第一天</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 获取指定年月的第一天</span><br><span class="line">    * @param year</span><br><span class="line">    * @param month</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   public static String getFirstDayOfMonth(int year, int month) &#123;     </span><br><span class="line">       Calendar cal = Calendar.getInstance();   </span><br><span class="line">       //设置年份</span><br><span class="line">       cal.set(Calendar.YEAR, year);</span><br><span class="line">       //设置月份 </span><br><span class="line">       cal.set(Calendar.MONTH, month-1); </span><br><span class="line">       //获取某月最小天数</span><br><span class="line">       int firstDay = cal.getMinimum(Calendar.DATE);</span><br><span class="line">       //设置日历中月份的最小天数 </span><br><span class="line">       cal.set(Calendar.DAY_OF_MONTH,firstDay);  </span><br><span class="line">       //格式化日期</span><br><span class="line">       SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">       return sdf.format(cal.getTime());  </span><br><span class="line">   &#125;</span><br><span class="line">   public  String getLastDayOfMonth1(String yearmonth) &#123; </span><br><span class="line">   int year = Integer.parseInt(yearmonth.split(&quot;-&quot;)[0]);</span><br><span class="line">   int month =  Integer.parseInt(yearmonth.split(&quot;-&quot;)[1]);</span><br><span class="line">   return getLastDayOfMonth1(year,month);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="getLastDayOfMonth-获取指定年月的最后一天"><a href="#getLastDayOfMonth-获取指定年月的最后一天" class="headerlink" title="getLastDayOfMonth 获取指定年月的最后一天"></a>getLastDayOfMonth 获取指定年月的最后一天</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 获取指定年月的最后一天</span><br><span class="line">    * @param year</span><br><span class="line">    * @param month</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">    public  String getLastDayOfMonth1(int year, int month) &#123;     </span><br><span class="line">        Calendar cal = Calendar.getInstance();     </span><br><span class="line">        //设置年份  </span><br><span class="line">        cal.set(Calendar.YEAR, year);  </span><br><span class="line">        //设置月份  </span><br><span class="line">        cal.set(Calendar.MONTH, month-1); </span><br><span class="line">        //获取某月最大天数</span><br><span class="line">        int lastDay = cal.getActualMaximum(Calendar.DATE);</span><br><span class="line">        //设置日历中月份的最大天数  </span><br><span class="line">        cal.set(Calendar.DAY_OF_MONTH, lastDay);  </span><br><span class="line">        //格式化日期</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);  </span><br><span class="line">        return sdf.format(cal.getTime());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="接口方面"><a href="#接口方面" class="headerlink" title="接口方面"></a>接口方面</h2><h4 id="webservice"><a href="#webservice" class="headerlink" title="webservice"></a>webservice</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static String postMethod(String url,String method,Object[] param)&#123;</span><br><span class="line">           Service s = new  Service();</span><br><span class="line">           String val =null;</span><br><span class="line">           Call call;</span><br><span class="line">try &#123;</span><br><span class="line">call = (Call) s.createCall();</span><br><span class="line">    call.setTargetEndpointAddress(url);</span><br><span class="line">            call.setOperation(method);</span><br><span class="line">            call.setTimeout(new Integer(5000));</span><br><span class="line">            val = (String)call.invoke(param);</span><br><span class="line">            System.out.println(&quot;method:&quot;+ method+&quot;,param:&quot;  + param+&quot;,return:&quot;  + val);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">  return val;</span><br><span class="line">&#125;</span><br><span class="line">  public static String postMethod(String url,String method,Object[] param, List in)&#123;</span><br><span class="line">          Service s = new  Service();</span><br><span class="line">          String val =null;</span><br><span class="line">          Call call;</span><br><span class="line">try &#123;</span><br><span class="line">call = (Call) s.createCall();</span><br><span class="line">    call.setTargetEndpointAddress(url);</span><br><span class="line">            call.setOperation(method);</span><br><span class="line">            call.setTimeout(new Integer(5000));</span><br><span class="line">            for (Iterator iterator = in.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">String type = (String) iterator.next();</span><br><span class="line">call.addParameter(type, org.apache.axis.encoding.XMLType.XSD_STRING, javax.xml.rpc.ParameterMode.IN);</span><br><span class="line">&#125;</span><br><span class="line">              val = (String)call.invoke(param);</span><br><span class="line">            System.out.println(&quot;method:&quot;+ method+&quot;,param:&quot;  + param+&quot;,return:&quot;  + val);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">  return val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rest-请求-get-and-post-use-HttpURLConnection"><a href="#rest-请求-get-and-post-use-HttpURLConnection" class="headerlink" title="rest 请求 get and post use HttpURLConnection"></a>rest 请求 get and post use HttpURLConnection</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">  /**</span><br><span class="line">   * rest 请求</span><br><span class="line">   * @param url</span><br><span class="line">   * @param param</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public static String postMethod(String url,String method,String params)&#123;</span><br><span class="line">          String val =&quot;&quot;;</span><br><span class="line">try &#123;</span><br><span class="line"> URL restServiceURL = new URL(url);</span><br><span class="line">             HttpURLConnection httpConnection = (HttpURLConnection) restServiceURL.openConnection();</span><br><span class="line">             httpConnection.setRequestMethod(method);</span><br><span class="line">             httpConnection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">             httpConnection.setDoOutput(true);     //需要输出</span><br><span class="line">             httpConnection.setDoInput(true);      //需要输入</span><br><span class="line">//             Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; entries = params.entrySet().iterator(); </span><br><span class="line">//             while (entries.hasNext()) &#123; </span><br><span class="line">//               Map.Entry&lt;String, Object&gt; entry = entries.next(); </span><br><span class="line">//               System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getKey()); </span><br><span class="line">//               httpConnection.setRequestProperty(entry.getKey(), entry.getKey());</span><br><span class="line">//             &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             //建立输入流，向指向的URL传入参数</span><br><span class="line">             DataOutputStream dos=new DataOutputStream(httpConnection.getOutputStream());</span><br><span class="line">             dos.writeBytes(params);</span><br><span class="line">             dos.flush();</span><br><span class="line">             </span><br><span class="line">             if (httpConnection.getResponseCode() != 200) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;HTTP GET Request Failed with Error code : &quot;</span><br><span class="line">                                  + httpConnection.getResponseCode());</span><br><span class="line">             &#125;</span><br><span class="line">             BufferedReader responseBuffer = new BufferedReader(new InputStreamReader(</span><br><span class="line">                    (httpConnection.getInputStream())));</span><br><span class="line"></span><br><span class="line">             String output;</span><br><span class="line">//             System.out.println(&quot;Output from Server:  \n&quot;);</span><br><span class="line">             </span><br><span class="line">             while ((output = responseBuffer.readLine()) != null) &#123;</span><br><span class="line">                    System.out.println(output);</span><br><span class="line">                    val = val + output+&quot;\r\n&quot;;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             httpConnection.disconnect();</span><br><span class="line"> System.out.println(&quot;url:&quot;+ url+&quot;,params:&quot;  + params+&quot;,return:&quot;  + val);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> /** </span><br><span class="line">     * 发起http请求获取返回结果 </span><br><span class="line">     * @param req_url 请求地址 </span><br><span class="line">     * @return </span><br><span class="line">     */ </span><br><span class="line">    public  String getMethod(String req_url) &#123;</span><br><span class="line">        StringBuffer buffer = new StringBuffer();  </span><br><span class="line">        try &#123;  </span><br><span class="line">            URL url = new URL(req_url);  </span><br><span class="line">            HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  </span><br><span class="line"></span><br><span class="line">            httpUrlConn.setDoOutput(false);  </span><br><span class="line">            httpUrlConn.setDoInput(true);  </span><br><span class="line">            httpUrlConn.setUseCaches(false);  </span><br><span class="line"></span><br><span class="line">            httpUrlConn.setRequestMethod(&quot;GET&quot;);  </span><br><span class="line">            httpUrlConn.connect();  </span><br><span class="line"></span><br><span class="line">            // 将返回的输入流转换成字符串  </span><br><span class="line">            InputStream inputStream = httpUrlConn.getInputStream();  </span><br><span class="line">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);  </span><br><span class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  </span><br><span class="line"></span><br><span class="line">            String str = null;  </span><br><span class="line">            while ((str = bufferedReader.readLine()) != null) &#123;  </span><br><span class="line">                buffer.append(str).append(&quot;\r\n&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">            bufferedReader.close();  </span><br><span class="line">            inputStreamReader.close();  </span><br><span class="line">            // 释放资源  </span><br><span class="line">            inputStream.close();  </span><br><span class="line">            inputStream = null;  </span><br><span class="line">            httpUrlConn.disconnect();  </span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            System.out.println(e.getStackTrace());  </span><br><span class="line">        &#125;  </span><br><span class="line">        return buffer.toString();  </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws ConfigurationException &#123;</span><br><span class="line">Object[] objects = &#123;&quot;taskid&quot;&#125;;</span><br><span class="line">List&lt;String&gt; in = new ArrayList&lt;String&gt;();</span><br><span class="line">in.add(&quot;taskid&quot;);</span><br><span class="line">Map&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;();</span><br><span class="line">params.put(&quot;acc&quot;, &quot;admin&quot;);</span><br><span class="line">params.put(&quot;pwd&quot;, &quot;q7A1ArKxRM8=&quot;);</span><br><span class="line">//params.put(&quot;accessToken&quot;, &quot;&quot;);</span><br><span class="line">String pa = &quot;acc=admin&amp;pwd=q7A1ArKxRM8=&quot;;</span><br><span class="line">String par = &quot;accessToken=MpOfjtPXtYGGrQhBU3mHNH/TmQZNUoN8uNBzCd9fTGxPxVnCjxR2+m5p/DTWySzX&quot;;</span><br><span class="line"></span><br><span class="line">//postMethod(&quot;http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/StartSession&quot;,</span><br><span class="line">//&quot;POST&quot;,pa);</span><br><span class="line">postMethod(&quot;http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/CloseSession&quot;,</span><br><span class="line">&quot;POST&quot;,par);</span><br><span class="line"></span><br><span class="line">//postMethod(&quot;http://10.32.1.91:7007/OAUAcenter/services/OAOrgService&quot;,</span><br><span class="line">//&quot;getOrgData&quot;,null);</span><br><span class="line">//postMethod(&quot;http://10.32.1.91:7007/OAUAcenter/services/OAProcessTaskService&quot;,</span><br><span class="line">//&quot;endDb&quot;,objects);</span><br><span class="line">//getUserToken(&quot;admin&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射常用调用"><a href="#反射常用调用" class="headerlink" title="反射常用调用"></a>反射常用调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String methodName = new StringBuffer(&quot;get&quot;).append(key.substring(0, 1).toUpperCase())</span><br><span class="line">       .append(key.substring(1)).toString();</span><br><span class="line"> Method method =  PrjProject.class.getMethod(methodName);</span><br><span class="line"> Object result = method.invoke(info);</span><br></pre></td></tr></table></figure><h2 id="jdbc-数据操作"><a href="#jdbc-数据操作" class="headerlink" title="jdbc 数据操作"></a>jdbc 数据操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot; select count(1) as count from demo_userrole t where t.fk_userid = ? and t.fk_roleid = ? &quot;;</span><br><span class="line">SqlRowSet rs = jdbc.queryForRowSet(sql, userId, roleid);</span><br><span class="line">if (rs.next()) &#123;</span><br><span class="line">   rs.getInt(&quot;count&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="log-Linux-权限问题"><a href="#log-Linux-权限问题" class="headerlink" title="log Linux 权限问题"></a>log Linux 权限问题</h2><p>通过继承RollingFileAppender或者DailyRollingFileAppender来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log4j.properties配置</span><br><span class="line"></span><br><span class="line">#输出到文件   </span><br><span class="line">log4j.appender.fileInfo = com.core.log4jconfig.Mylog4jWriter</span><br><span class="line">log4j.appender.fileInfo.Threshold = DEBUG   </span><br><span class="line">log4j.appender.fileInfo.layout = org.apache.log4j.PatternLayout   </span><br><span class="line">log4j.appender.fileInfo.layout.ConversionPattern = %d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %p %c %x - %m%n  </span><br><span class="line">log4j.appender.fileInfo.Append = TRUE   </span><br><span class="line">log4j.appender.fileInfo.File = /data/my/logs/my.log   </span><br><span class="line">log4j.appender.fileInfo.File=&apos;.&apos;yyyy-MM-dd</span><br></pre></td></tr></table></figure><p>com.core.log4jconfig.Mylog4jWriter.java代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Mylog4jWriter extends DailyRollingFileAppender&#123;  </span><br><span class="line">      </span><br><span class="line">    @Override  </span><br><span class="line">    public synchronized void setFile(String fileName, boolean append,  </span><br><span class="line">            boolean bufferedIO, int bufferSize) throws IOException &#123;  </span><br><span class="line">        super.setFile(fileName, append, bufferedIO, bufferSize);  </span><br><span class="line">        File f = new File(fileName);  </span><br><span class="line">        Set&lt;PosixFilePermission&gt; set = new HashSet&lt;PosixFilePermission&gt;();  </span><br><span class="line">        set.add(PosixFilePermission.OWNER_READ);  </span><br><span class="line">        set.add(PosixFilePermission.OTHERS_WRITE);  </span><br><span class="line">        set.add(PosixFilePermission.GROUP_READ);  </span><br><span class="line">        set.add(PosixFilePermission.OTHERS_READ);  </span><br><span class="line">        if(f.exists())&#123;  </span><br><span class="line">            Files.setPosixFilePermissions(f.toPath(), set);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目即可<br>生成的日志文件读写权限为rw-r–r–</p><p>所有用户都有日志文件的读权限</p><h4 id="修改-Sequence"><a href="#修改-Sequence" class="headerlink" title="修改 Sequence"></a>修改 Sequence</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void updateSequence() &#123;</span><br><span class="line">  String sql = &quot;select SEQUENCE_NAME from ALL_SEQUENCES WHERE SEQUENCE_OWNER=&apos;database&apos;&quot;;</span><br><span class="line">  List&lt;xxxx&gt; list = findByList(sql, xxxx.class);</span><br><span class="line">  String updateSql1 = &quot;&quot;;</span><br><span class="line">  String updateSql2 = &quot;&quot;;</span><br><span class="line">  String selectSql = &quot;&quot;;</span><br><span class="line">  for (xxxx p:list) &#123;</span><br><span class="line">      updateSql1 = &quot;alter sequence &quot;+p.getSequence_name()+&quot; increment by 1000000&quot;;</span><br><span class="line">      jdbc.update(updateSql1);</span><br><span class="line">      selectSql = &quot;select &quot;+p.getSequence_name()+&quot;.nextval from dual&quot;;</span><br><span class="line">      List&lt;xxxx&gt; byList = findByList(selectSql, xxxx.class);</span><br><span class="line">      updateSql2 = &quot;alter sequence &quot;+p.getSequence_name()+&quot; increment by 1&quot;;</span><br><span class="line">      jdbc.update(updateSql2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      java常用代码汇总，读取配置文件，日期，接口调用，是否为空，
    
    </summary>
    
      <category term="java" scheme="https://muxiaobai.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库操作语句2</title>
    <link href="https://muxiaobai.github.io/2018/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A52/"/>
    <id>https://muxiaobai.github.io/2018/09/04/数据库操作语句2/</id>
    <published>2018-09-04T02:13:53.000Z</published>
    <updated>2019-04-10T08:24:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>常用的SQL语句，汇总，以便之后查阅。<br><a id="more"></a></p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h4 id="MongoDB-备份"><a href="#MongoDB-备份" class="headerlink" title="MongoDB 备份"></a>MongoDB 备份</h4><p>备份生产数据：    </p><blockquote><p>/db/mongodb-3.4.7/bin/mongodump -h 127.0.0.1:9430 -d daochufilename -o  /db/mongodb-3.4.7/data/mongo_bak/180414  </p></blockquote><p>删除老数据:</p><blockquote><p>进入测试mongdb:       ./mongo 127.0.0.1:9430<br>查看所有的库:           show dbs<br>选择待删除的库:         use  databaseName<br>删除当前库:             db.dropDatabase()<br>退出:                   exit                    </p></blockquote><p>导入数据</p><blockquote><p>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 –port 9430 –db databasename     /db/mongodb-3.4.7/data/mongo_bak/180414/daochufilename</p></blockquote><h4 id="Oracle-备份"><a href="#Oracle-备份" class="headerlink" title="Oracle 备份"></a>Oracle 备份</h4><p>11G 导出， 没有数据的表无法导出</p><h5 id="共有多少张表"><a href="#共有多少张表" class="headerlink" title="共有多少张表:"></a>共有多少张表:</h5><ul><li>select count(1) from  user_tables ;</li><li>select ‘drop table ‘||table_name||’ cascade constraints;’ from user_tables;  </li><li>select ‘drop trigger ‘ || trigger_name || ‘;’  from user_triggers;  </li><li>select ‘drop sequence ‘ || sequence_name || ‘;’  from user_sequences;  </li></ul><p>1、先查询一下当前用户下的所有空表</p><p>select table_name from user_tables where NUM_ROWS=0;</p><p>2、用以下这句查找空表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select &apos;alter table &apos;||table_name||&apos; allocate extent;&apos; </span><br><span class="line">from user_tables where num_rows = 0 ;</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ‘alter table ‘||table_name||’ allocate extent;’ </span><br><span class="line">from user_tables where num_rows=0;</span><br></pre></td></tr></table></figure></p><p>alter table table_name allocate extent;</p><p>原因:</p><p>Oracle 11G 出现EXP-00003: 未找到段 (0,0) 的存储定义<br>oracle 11g数据库表中没有数据在导出数据的时候会遇到的问题，alter system set deferred_segment_creation=false; 该参数意思是当创建对象（如表），初始没有数据，是否立即创建segment。默认是true。这会导致在exp时，没有segment的对象不会导出。<br>但此命令只对以后的表有效，之前的表没有Segment的还是没有。可以创建表的时候声明立即创建Segment ，create table XXX (XXX  XXX) SEGMENT CREATION IMMEDIATE;<br>对于已经创建但是还没有Segment的表来说，可以执行alter table TabelName allocate extent来使其创建出Segment,当然也可以插入一条数据，使其创建Segment .<br>解决方法：<br>1、先查询一下当前用户下的所有空表<br>select table_name from user_tables where NUM_ROWS=0;<br>2、用以下这句查找空表<br>select ‘alter table ‘||table_name||’ allocate extent;’ from user_tables where num_rows=0 ;<br>3、把查询结果导出，执行导出的语句 如：<br>alter table table_name allocate extent;</p><p>exp <a href="mailto:username/password@192.168.5.214" target="_blank" rel="noopener">username/password@192.168.5.214</a>/ORCL file=d:\daochu.dmp FULL=y</p><p>exp <a href="mailto:XNJD20171225/12345678@192.168.2.240" target="_blank" rel="noopener">XNJD20171225/12345678@192.168.2.240</a>/ORCL file=d:\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容</p><p>exp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据</p><p>导入数据库</p><p>imp <a href="mailto:username/password@192.168.5.214" target="_blank" rel="noopener">username/password@192.168.5.214</a>/ORCL tablespaces=xxx fromuser=cccccc touser=zzzzz file=D:\daoru.dmp FULL=y</p><p>导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分</p><p>exp_dir=/fo</p><h4 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h4><p>sqlplus / as sysdba</p><p>sqlplus /nolog<br>conn  username/password as sysdba </p><h4 id="设置directory"><a href="#设置directory" class="headerlink" title="设置directory"></a>设置directory</h4><p>–查路径<br>select * from dba_directories;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SYS                EXP_IMP_DATA</span><br><span class="line">/opt/oracle/oradata/forp/db_bakup</span><br></pre></td></tr></table></figure></p><p>create or replace  directory dmp_dir as ‘/data/testdata/‘;</p><p>grant read,write on directory dmp_dir to username;</p><p><a href="https://blog.csdn.net/eason_oracle/article/details/77101563" target="_blank" rel="noopener">设置directory文件路径</a></p><ul><li><ol start="0"><li>su - oracle</li></ol></li><li><p>1.导出生产库 oracle数据</p><blockquote><p>进入127.0.0.1服务器<br>  导出：    expdp TEST1/PITAYA_7Na1 file=/20180922.dmp directory=exp_dir schemas=TEST1;</p></blockquote></li><li><p>2.导入Oracle数据到测试库</p><blockquote><p>   impdp TEST/PITAYA_7Na1_TEST file=/20180922.dmp directory=exp_dir REMAP_SCHEMA=TEST1:TEST; </p></blockquote></li></ul><h2 id="设置plsql的快捷方式"><a href="#设置plsql的快捷方式" class="headerlink" title="设置plsql的快捷方式"></a>设置plsql的快捷方式</h2><p>sqlplus TEST/PITAYA_7Na1_TEST@orcl</p><p>打开PL/SQL，在Tools-&gt;Perferences-&gt;Editor中Autoreplaces选择配置的short.txt文件 ,然后重启一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = select * from </span><br><span class="line">w = where </span><br><span class="line">sf = select t.*, t.rowid from  </span><br><span class="line">sc = select count(1) from </span><br><span class="line">d = delete from</span><br></pre></td></tr></table></figure><h2 id="查询外键"><a href="#查询外键" class="headerlink" title="查询外键"></a>查询外键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select a.constraint_name, a.table_name, b.constraint_name  from user_constraints a, user_constraints b</span><br><span class="line">where a.constraint_type = &apos;R&apos; and b.constraint_type = &apos;P&apos;  and a.r_constraint_name = b.constraint_name</span><br><span class="line">and a.constraint_name = &apos;FK_CRM_7&apos;</span><br></pre></td></tr></table></figure><h2 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h2><p>查询锁表的对象</p><p>这个两个sql都是要在具有dba权限的用户下执行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select t2.username,</span><br><span class="line">       t2.sid,</span><br><span class="line">       t2.serial#,</span><br><span class="line">       t3.object_name,</span><br><span class="line">       t2.OSUSER,</span><br><span class="line">       t2.MACHINE,</span><br><span class="line">       t2.PROGRAM,</span><br><span class="line">       t2.LOGON_TIME,</span><br><span class="line">       t2.COMMAND,</span><br><span class="line">       t2.LOCKWAIT,</span><br><span class="line">       t2.SADDR,</span><br><span class="line">       t2.PADDR,</span><br><span class="line">       t2.TADDR,</span><br><span class="line">       t2.SQL_ADDRESS,</span><br><span class="line">       t1.LOCKED_MODE</span><br><span class="line">  from v$locked_object t1, v$session t2, dba_objects t3</span><br><span class="line"> where t1.session_id = t2.sid</span><br><span class="line">   and t1.object_id = t3.object_id</span><br><span class="line"> order by t2.logon_time;</span><br></pre></td></tr></table></figure><p>kill 锁表操作   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER system KILL session &apos;SID,serial#&apos;;</span><br></pre></td></tr></table></figure><p>锁的级别</p><p>v$locked_object中的LOCKED_MODE字段表示锁的模式，oracle中锁的模式有如下几种:<br>0：none<br>1：null 空<br>2：Row-S 行共享(RS)：共享表锁，sub share<br>3：Row-X 行独占(RX)：用于行的修改，sub exclusive<br>4：Share 共享锁(S)：阻止其他DML操作，share<br>5：S/Row-X 共享行独占(SRX)：阻止其他事务操作，share/sub exclusive<br>6：exclusive 独占(X)：独立访问使用，exclusive</p><p>数字越大锁级别越高, 影响的操作越多。</p><p>1级锁有：Select，有时会在v$locked_object出现。<br>2级锁有：Select for update,Lock For Update,Lock Row Share<br>select for update当对话使用for update子串打开一个游标时，所有返回集中的数据行都将处于行级(Row-X)独占式锁定，其他对象只能查询这些数据行，不能进行update、delete或select for update操作。<br>3级锁有：Insert, Update, Delete, Lock Row Exclusive<br>没有commit之前插入同样的一条记录会没有反应, 因为后一个3的锁会一直等待上一个3的锁, 我们必须释放掉上一个才能继续工作。<br>4级锁有：Create Index, Lock Share<br>locked_mode为2,3,4不影响DML(insert,delete,update,select)操作, 但DDL(alter,drop等)操作会提示ora-00054错误。<br>00054, 00000, “resource busy and acquire with NOWAIT specified”<br>// <em>Cause: Resource interested is busy.<br>// </em>Action: Retry if necessary.<br>5级锁有：Lock Share Row Exclusive<br>具体来讲有主外键约束时update / delete … ; 可能会产生4,5的锁。<br>6级锁有：Alter table, Drop table, Drop Index, Truncate table, Lock Exclusive</p><hr><p>查某session 正在执行的sql语句，从而可以快速定位到哪些操作或者代码导致事务一直进行没有结束等.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT /*+ ORDERED */ </span><br><span class="line"> sql_text</span><br><span class="line">  FROM v$sqltext a</span><br><span class="line"> WHERE (a.hash_value, a.address) IN</span><br><span class="line">       (SELECT DECODE(sql_hash_value, 0, prev_hash_value, sql_hash_value),</span><br><span class="line">               DECODE(sql_hash_value, 0, prev_sql_addr, sql_address)</span><br><span class="line">          FROM v$session b</span><br><span class="line">         WHERE b.sid = &apos;67&apos;)  /* 此处67 为SID*/</span><br><span class="line"> ORDER BY piece ASC;</span><br></pre></td></tr></table></figure><hr><p>plsql 工具   Tools —–&gt;Sessions———&gt; 查看</p><h4 id="数据库比对工具"><a href="#数据库比对工具" class="headerlink" title="数据库比对工具"></a>数据库比对工具</h4><p>plsql Tools ———-&gt;Compare User Objects 选择另外一个库</p><h4 id="Oracle-数据库表、字段级别，"><a href="#Oracle-数据库表、字段级别，" class="headerlink" title="Oracle 数据库表、字段级别，"></a>Oracle 数据库表、字段级别，</h4><p>select <em> from  user_tables  t;–所有表<br>select </em> from all_tab_columns  t;–系统<br>select <em> from ALL_TAB_COLS t;–系统表<br>select </em> from cols t;–字段<br>select <em> from USER_TAB_COLS t;–用户字段<br>select </em> from user_tab_comments  t–所有表字段<br>select * from user_col_comments t;–所有表注释</p><p>SELECT INSTANCE_NAME FROM V$INSTANCE; –查询sid s_name</p><h4 id="Oracle-方法等"><a href="#Oracle-方法等" class="headerlink" title="Oracle 方法等"></a>Oracle 方法等</h4><ul><li>t.createdate &lt; to_date(‘2018-09-01’,’yyyy-mm-dd hh24:mi:ss’) 创建时间小于2018-09-01 </li><li>to_char( t.CreateDate,’yyyyMMdd’)=to_char(sysdate,’yyyyMMdd’)  当天，类似当月yyyyMM当年yyyy</li><li>case f.state when 0 then ‘第壹’ when 2 then ‘第贰’ when 3 then ‘第叁’ else null end as 状态,</li><li>逗号存ID，查询    “    INSTR((SELECT ‘,’||(deptId)||’,’ FROM Pop_Dept_DutyPeo WHERE userId=? AND grade=1 GROUP BY userId), ‘,’||prj.FK_DeptID||’,’) &gt; 0 “</li><li>列传行 select listagg(to_char(b.id),’,’) within group(order by b.orderId)</li></ul>]]></content>
    
    <summary type="html">
    
      写一些常用的SQL语句，高级操作,备份，查外键，Session 锁等，Oracle非常规操作
    
    </summary>
    
      <category term="SQL" scheme="https://muxiaobai.github.io/categories/SQL/"/>
    
      <category term="数据库" scheme="https://muxiaobai.github.io/categories/SQL/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="常用代码" scheme="https://muxiaobai.github.io/tags/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码阅读之AOP两种代理模式</title>
    <link href="https://muxiaobai.github.io/2018/06/25/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BAOP%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://muxiaobai.github.io/2018/06/25/Spring源码阅读之AOP两种代理模式/</id>
    <published>2018-06-24T19:13:09.000Z</published>
    <updated>2018-06-28T03:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/.io//20180628.png" alt="AOP"><br><a id="more"></a></p><p><a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="noopener">github简易Spring实现</a></p><p>一般用作：日志，权限控制，异常，事务等情况下。</p><p>xml中的解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;autoProxyCreator&quot; class=&quot;us.codecraft.tinyioc.aop.AspectJAwareAdvisorAutoProxyCreator&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;timeInterceptor&quot; class=&quot;us.codecraft.tinyioc.aop.TimerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;aspectjAspect&quot; class=&quot;us.codecraft.tinyioc.aop.AspectJExpressionPointcutAdvisor&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;advice&quot; ref=&quot;timeInterceptor&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;expression&quot; value=&quot;execution(* us.codecraft.tinyioc.*.*(..))&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>AspectJAwareAdvisorAutoProxyCreator implements BeanPostProcessor<br>所以扫描这个类的时候会执行AspectJAwareAdvisorAutoProxyCreator.postProcessAfterInitialization()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Object postProcessAfterInitialization(Object bean, String beanName) throws Exception &#123;</span><br><span class="line">if (bean instanceof AspectJExpressionPointcutAdvisor) &#123;</span><br><span class="line">return bean;</span><br><span class="line">&#125;</span><br><span class="line">if (bean instanceof MethodInterceptor) &#123;</span><br><span class="line">return bean;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory</span><br><span class="line">.getBeansForType(AspectJExpressionPointcutAdvisor.class);</span><br><span class="line">for (AspectJExpressionPointcutAdvisor advisor : advisors) &#123;</span><br><span class="line">if (advisor.getPointcut().getClassFilter().matches(bean.getClass())) &#123;</span><br><span class="line">                ProxyFactory advisedSupport = new ProxyFactory();</span><br><span class="line">advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());</span><br><span class="line">advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());</span><br><span class="line"></span><br><span class="line">TargetSource targetSource = new TargetSource(bean, bean.getClass(), bean.getClass().getInterfaces());</span><br><span class="line">advisedSupport.setTargetSource(targetSource);</span><br><span class="line"></span><br><span class="line">return advisedSupport.getProxy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后遍历所有的AspectJExpressionPointcutAdvisor,如果有其他的bean满足条件advisor.getPointcut().getClassFilter().matches(bean.getClass())那么则返回代理对象。</p><p>这里面的返回代理对象如果用代码来写的话就是下面这样，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   // 1. 设置被代理对象(Joinpoint)</span><br><span class="line">AdvisedSupport advisedSupport = new AdvisedSupport();</span><br><span class="line">TargetSource targetSource = new TargetSource(helloWorldService, HelloWorldServiceImpl.class,</span><br><span class="line">HelloWorldService.class);</span><br><span class="line">advisedSupport.setTargetSource(targetSource);</span><br><span class="line"></span><br><span class="line">//设置匹配的match</span><br><span class="line">MethodMatcher methodMatcher = new MethodMatcher() &#123;</span><br><span class="line">       </span><br><span class="line">       @Override</span><br><span class="line">       public boolean matches(Method method, Class targetClass) &#123;</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">advisedSupport.setMethodMatcher(methodMatcher);</span><br><span class="line"></span><br><span class="line">// 2. 设置拦截器(Advice)</span><br><span class="line">TimerInterceptor timerInterceptor = new TimerInterceptor();</span><br><span class="line">advisedSupport.setMethodInterceptor(timerInterceptor);</span><br><span class="line"></span><br><span class="line">// 3. 创建代理(Proxy)</span><br><span class="line">JdkDynamicAopProxy jdkDynamicAopProxy = new JdkDynamicAopProxy(advisedSupport);</span><br><span class="line">HelloWorldService helloWorldServiceProxy = (HelloWorldService) jdkDynamicAopProxy.getProxy();</span><br><span class="line"></span><br><span class="line">// 4. 基于AOP的调用</span><br><span class="line">helloWorldServiceProxy.helloWorld();</span><br></pre></td></tr></table></figure><p>advisedSupport{targetSource,methodMatcher,methodInterceptor}<br>这个里面记录了代理目标，和匹配的expression和具体的拦截操作</p><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><p>implements InvocationHandler</p><p>先获取代理类Proxy.newProxyInstance(getClass().getClassLoader(), advised.getTargetSource().getInterfaces(), this);，然后implements InvocationHandler ,上面的this,执行target方法的时候就会优先执行InvocationHandler.invoke(final Object proxy, final Method method, final Object[] args);</p><h5 id="Proxy-newProxyInstance"><a href="#Proxy-newProxyInstance" class="headerlink" title="Proxy.newProxyInstance()"></a>Proxy.newProxyInstance()</h5><p>这个是jdk动态代理，需要代理类实现接口，而且只能代理接口里面的方法，因为使用接口来创建代理。</p><p>Proxy.newProxyInstance(),获取代理类方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static Object newProxyInstance(ClassLoader loader,</span><br><span class="line">                                         Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                         InvocationHandler h)</span><br><span class="line">       throws IllegalArgumentException</span><br><span class="line">   &#123;</span><br><span class="line">       Objects.requireNonNull(h);//InvocationHandler 不为空</span><br><span class="line"></span><br><span class="line">       final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">       </span><br><span class="line">       /*</span><br><span class="line">        * Look up or generate the designated proxy class.</span><br><span class="line">        * 查找或生成指定的代理类。</span><br><span class="line">        */</span><br><span class="line">       Class&lt;?&gt; cl = getProxyClass0(loader, intfs);//</span><br><span class="line"></span><br><span class="line">       /*</span><br><span class="line">        * Invoke its constructor with the designated invocation handler.</span><br><span class="line">        * 用指定的调用处理程序调用它的构造函数。 constructorParams = InvocationHandler.class</span><br><span class="line">        */</span><br><span class="line">       final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">      </span><br><span class="line">       return cons.newInstance(new Object[]&#123;h&#125;);//返回代理类</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>getProxyClass0()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                          Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">       if (interfaces.length &gt; 65535) &#123;</span><br><span class="line">           throw new IllegalArgumentException(&quot;interface limit exceeded&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       // If the proxy class defined by the given loader implementing</span><br><span class="line">       // the given interfaces exists, this will simply return the cached copy;</span><br><span class="line">       // otherwise, it will create the proxy class via the ProxyClassFactory</span><br><span class="line">       //如果classloader加载的接口代理类存在，直接从cache中国返回</span><br><span class="line">       //否则从ProxyClassFactory创建一个新的代理类</span><br><span class="line">       return proxyClassCache.get(loader, interfaces);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="CGLIB"><a href="#CGLIB" class="headerlink" title="CGLIB"></a>CGLIB</h4><p>implements MethodInterceptor </p><p>获取代理类</p><p>Enhancer e=new Enhancer();//创建代理对象类<br>e.setSuperclass(object.getClass());//声明代理对象的父类是谁（是目标对象）<br>e.setCallback(this);//设置回调函数，即调用intercept()<br>return e.create();//返回创建的代理对象</p><p>执行intercept(Object obj, Method method, Object[] args, MethodProxy proxy);</p><ul><li><a href="https://zhuanlan.zhihu.com/p/27757233" target="_blank" rel="noopener">Java JDK代理、CGLIB、AspectJ代理分析比较</a></li><li><a href="https://blog.csdn.net/moreevan/article/details/11977115" target="_blank" rel="noopener">Spring AOP 实现原理</a></li><li><a href="http://www.cnblogs.com/dazhaxie/archive/2012/06/18/2553300.html" target="_blank" rel="noopener">Spring源代码解析(收藏)</a></li></ul>]]></content>
    
    <summary type="html">
    
      源码阅读两大模块之AOP,面向切面编程，与jdk代理和cglib代理
    
    </summary>
    
      <category term="java" scheme="https://muxiaobai.github.io/categories/java/"/>
    
    
      <category term="Spring" scheme="https://muxiaobai.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码阅读之Ioc控制反转</title>
    <link href="https://muxiaobai.github.io/2018/06/22/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BIoc%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"/>
    <id>https://muxiaobai.github.io/2018/06/22/Spring源码阅读之Ioc控制反转/</id>
    <published>2018-06-21T23:55:45.000Z</published>
    <updated>2018-06-25T03:08:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/.io//SpringIOC.png" alt="IOC"><br><a id="more"></a></p><p><a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="noopener">github简易Spring实现</a></p><p>加载文件，解析XML</p><p>如果是<code>&lt;bean  id =&quot;a1&quot; class =&quot;b&quot;&gt;</code>,AbstractBeanFactory.beanDefinitionMap中会添加一份Bean的描述其中Map&lt;key=”a1”,value =”beanDefinition”&gt;beanDefinition中是描述这个Bean的，包含Bean对象，beanClass类对象，beanClassName类名，和对应的属性PropertyValues，就是List PropertyValue,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String name = ele.getAttribute(&quot;id&quot;);</span><br><span class="line">String className = ele.getAttribute(&quot;class&quot;);</span><br><span class="line">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class="line">processProperty(ele, beanDefinition);</span><br><span class="line">beanDefinition.setBeanClassName(className);</span><br><span class="line">getRegistry().put(name, beanDefinition);</span><br></pre></td></tr></table></figure><p>如果Bean内部是<code>&lt;property  name =&quot;a1&quot; value =&quot;b1&quot;&gt;</code>,这时候PropertyValue就是一个{name =”a1”,value =”b1”},</p><p>定义BeanDefination{bean,beanClass,beanClassName,PropertyValues=[list<propertyvalue> propertyValueList]}</propertyvalue></p><p>处理引用ref</p><p>如果Bean内部是<code>&lt;property  name =&quot;a1&quot; ref =&quot;b2&quot;&gt;</code>,这时候创建一个BeanReference(“b2”),PropertyValue就是一个{name =”a1”,value =BeanReference},</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (value instanceof BeanReference) &#123;</span><br><span class="line">BeanReference beanReference = (BeanReference) value;</span><br><span class="line">value = getBean(beanReference.getName());//根据b2获取bean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Method declaredMethod = bean.getClass().getDeclaredMethod(</span><br><span class="line">&quot;set&quot; + propertyValue.getName().substring(0, 1).toUpperCase()</span><br><span class="line">+ propertyValue.getName().substring(1), value.getClass());</span><br><span class="line">declaredMethod.setAccessible(true);</span><br><span class="line"></span><br><span class="line">declaredMethod.invoke(bean, value);//把b2放到a1中，反射调用</span><br></pre></td></tr></table></figure><p>这里的简化版本所有的引用都是在getBean之后进行的。</p><p>把所有的Bean都注册到BeanFactory中。AbstractBeanFactory.beanDefinitionMap中包含所有的{name =””, BeanDefinition = “”},定义的Bean的名字和对应class的Bean的描述类</p><p>获取Bean的时候BeanFactory.getBean()，反射newInstance()<br><code>beanDefinition.getBeanClass().newInstance();</code>直接得到类对象，进行实例化。再处理各种引用等问题。</p><p>以上这个简版的Spring已经把主要的逻辑讲了，当然这只是原理，Spring比这个跟严谨更复杂。</p>]]></content>
    
    <summary type="html">
    
      源码阅读两大模块之控制反转IOC（Inversion of Control）
    
    </summary>
    
      <category term="java" scheme="https://muxiaobai.github.io/categories/java/"/>
    
    
      <category term="Spring" scheme="https://muxiaobai.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的加载页面过程及优化方法</title>
    <link href="https://muxiaobai.github.io/2018/06/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2%E8%BF%87%E7%A8%8B%E5%8F%8A%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <id>https://muxiaobai.github.io/2018/06/08/浏览器的加载页面过程及优化方法/</id>
    <published>2018-06-07T19:45:26.000Z</published>
    <updated>2019-02-16T04:39:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接上一篇中的DOM所有时间，浏览器在做些什么？"><a href="#接上一篇中的DOM所有时间，浏览器在做些什么？" class="headerlink" title="接上一篇中的DOM所有时间，浏览器在做些什么？"></a>接上一篇中的DOM所有时间，浏览器在做些什么？</h2><p>之前是接受资源,domLoading,domInteractive,domContentLoadedEventStart,domContentLoadedEventEnd,domComplete,之后是其他，主要分析这中间的时间，浏览器做什么来展示内容。<br>loadEventStart,loadEventEnd</p><h3 id="构建DOM-渲染-绘画"><a href="#构建DOM-渲染-绘画" class="headerlink" title="构建DOM 渲染 绘画"></a>构建DOM 渲染 绘画</h3><p>关键渲染路径:DOM javascript CSSOM Render Tree Layout Paint</p><ul><li>1.处理 HTML 标记并构建 DOM 树。</li><li>2.处理 CSS 标记并构建 CSSOM 树。</li><li>3.将 DOM 与 CSSOM 合并成一个渲染树。（Render Tree）</li><li>4.根据渲染树来布局，以计算每个节点的几何信息。（Layout）</li><li>5.将各个节点绘制到屏幕上。（Paint）</li></ul><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p><img src="/.io//website3.png" alt="看一下时间的问题"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;network(dns+tcp):&quot;+(window.performance.timing.requestStart - window.performance.timing.fetchStart)+&quot;ms,&quot;+</span><br><span class="line">&quot;TTFB:&quot;+ (window.performance.timing.responseStart  - window.performance.timing.requestStart)+&quot;ms,&quot;+</span><br><span class="line">&quot;Download HTML:&quot;+(window.performance.timing.responseEnd -window.performance.timing.responseStart)+&quot;ms,&quot;+</span><br><span class="line">&quot;other:&quot;+(window.performance.timing.domLoading -window.performance.timing.responseEnd)+&quot;ms,&quot;+</span><br><span class="line">&quot;DOM:&quot;+(window.performance.timing.domInteractive - window.performance.timing.domLoading)+&quot;ms,&quot;+</span><br><span class="line">&quot;DomContentLoaded:&quot; +(window.performance.timing.domInteractive -window.performance.timing.fetchStart)+&quot;ms,&quot;+</span><br><span class="line">&quot;DOMContentLoaded: 36+364+34+1+167 = 602ms,&quot;+</span><br><span class="line">&quot;download Other(css,js,pic)&amp;hander:&quot;+ (window.performance.timing.domComplete- window.performance.timing.domInteractive)+&quot;ms,&quot;+</span><br><span class="line">&quot;load Event:&quot; + (window.performance.timing.domContentLoadedEventEnd - window.performance.timing.domContentLoadedEventStart) +&quot;ms,&quot;+</span><br><span class="line">&quot;Load: 602+1034 = 1634ms&quot;</span><br></pre></td></tr></table></figure></p><p>先从时间上看：</p><p>性能的话，如果，这里的(requestStart - fetchStart) 时间很大的话，就需要看一下是不是网络的问题了；如果responseStart - requestStart很大，是不是服务器的响应速度有问题呢？这个需要后台，负载等处理，查一下请求响应时间，是不是很长？然后在responseEnd之后，得到了HTML，就是浏览器的渲染等问题了。</p><h3 id="构建对象生成时间-生成DOM和CSSOM"><a href="#构建对象生成时间-生成DOM和CSSOM" class="headerlink" title="构建对象生成时间,生成DOM和CSSOM"></a>构建对象生成时间,生成DOM和CSSOM</h3><p>涉及到解析HTML等，语法解析问题。</p><p>CSSOM，层级级联样式怎么最简化，怎么渲染的时候构建Render Tree最优。</p><p>CSS选择器内套多层，越来越复杂;精简不用的样式</p><h3 id="加载资源时间"><a href="#加载资源时间" class="headerlink" title="加载资源时间"></a>加载资源时间</h3><blockquote><p>HTML 和 CSS 都是阻塞渲染的资源</p></blockquote><p>HTML 必须的，渲染内容。</p><p>然后是CSS资源，CSS是阻塞资源，需要尽快加载，方便浏览器快速加载。使用媒体查询，让一些样式不用阻塞渲染。</p><p>例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;  默认是all</span><br><span class="line">&lt;link href=&quot;style.css&quot;    rel=&quot;stylesheet&quot; media=&quot;all&quot;&gt;</span><br><span class="line">&lt;link href=&quot;print.css&quot; rel=&quot;stylesheet&quot; media=&quot;print&quot;&gt; 打印时</span><br><span class="line">&lt;link href=&quot;other.css&quot; rel=&quot;stylesheet&quot; media=&quot;(min-width: 40em)&quot;&gt;最小宽度加载</span><br><span class="line">&lt;link href=&quot;portrait.css&quot; rel=&quot;stylesheet&quot; media=&quot;orientation:portrait&quot;&gt; 定输出设备中的页面可见区域高度大于或等于宽度，竖屏</span><br></pre></td></tr></table></figure></p><p>注意“阻塞渲染”仅是指浏览器是否需要暂停网页的首次渲染，直至该资源准备就绪。无论哪一种情况，浏览器仍会下载 CSS 资源，只不过不阻塞渲染的资源优先级较低罢了。</p><p>JavaScript 也会阻止 DOM 构建和延缓网页渲染。 为了实现最佳性能，可以让您的 JavaScript 异步执行，并去除关键渲染路径中任何不必要的 JavaScript。当 HTML 解析器遇到一个 script 标记时，它会暂停构建 DOM，将控制权移交给 JavaScript 引擎；等 JavaScript 引擎运行完毕，浏览器会从中断的地方恢复 DOM 构建。<br><code>&lt;script src=&quot;app.js&quot; async&gt;&lt;/script&gt;</code>可以添加异步，这样可以等资源加载完后，再进行执行。</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存溢出:JS死循环，DOM引用</p><h3 id="怎样找到具体的问题代码"><a href="#怎样找到具体的问题代码" class="headerlink" title="怎样找到具体的问题代码"></a>怎样找到具体的问题代码</h3><p><img src="/.io//website1.png" alt="分析出现问题的位置"></p><p><img src="/.io//website2.png" alt="分析出现问题的位置"><br><a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">上面图的网址: https://googlechrome.github.io/devtools-samples/jank/</a><br>先得到profile，现在已经在Performance面板中了，FPS一般都在60左右，这里有红色的已经降到10以下了。然后我们选取其中的一部分,上图分析了结果，找到问题的所在，然后进行处理。这个问题是: <code>Layout Forced和First Layout Invalidation</code></p><blockquote><p>注：先降低CPU的速度。</p></blockquote><p>参考：</p><ul><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/" target="_blank" rel="noopener">google官方文档-关键渲染路径</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="noopener">chrome-devtools</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp" target="_blank" rel="noopener">分析关键渲染路径性能</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/memory-problems/" target="_blank" rel="noopener">内存模型</a></li><li><a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">性能演示测试</a></li></ul>]]></content>
    
    <summary type="html">
    
      加载页面和优化，接着上一篇，跟着chrome开发者工具中的Memory和Performance来操作
    
    </summary>
    
      <category term="前端" scheme="https://muxiaobai.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="性能优化" scheme="https://muxiaobai.github.io/categories/%E5%89%8D%E7%AB%AF/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="工具" scheme="https://muxiaobai.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前端" scheme="https://muxiaobai.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的请求与响应过程</title>
    <link href="https://muxiaobai.github.io/2018/06/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B/"/>
    <id>https://muxiaobai.github.io/2018/06/07/浏览器的请求与响应过程/</id>
    <published>2018-06-06T19:45:26.000Z</published>
    <updated>2018-06-11T09:47:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>从一个简单的工具说起:<a href="https://github.com/pod4g/hiper" target="_blank" rel="noopener">hiper</a></p><p><img src="/.io//baidu.png" alt="百度"><br><img src="/.io//load.png" alt="另一个加载大量图片的网站"></p><ul><li>DNS look time: DNS 寻址</li><li>TCP connect time: TCP握手</li><li>TTFB : 最初的发送request到response接受到第一个字节(对于浏览器来说，就是等待Waiting) Time To First Byte</li><li>Download time of the page: 下载页面</li><li>After DOM Ready download time: 下载其他资源</li><li>White screen time: 白屏时间（从浏览器发送到DOM解析之前）</li><li>DOM Ready time: DOM准备时间</li><li>Load time: Load所有时间</li></ul><p>以上这些时间是判断一个页面对于使用者的友好程度，要清楚到底是哪一个环节耗时，才是解决问题的重中之重。</p><ul><li>1.totalDNSTime += this.getDNSTime(domainLookupStart, domainLookupEnd)</li><li>2.totalTCPTime += this.getTCPTime(connectStart, connectEnd)</li><li>3.totalTTFBTime += this.getTTFB(requestStart, responseStart)</li><li>4.totalDownloadTime += this.getDownloadTime(responseStart, responseEnd)</li><li>5.totalAfterDOMReadyTheDownloadTimeOfTheRes += this.getAfterDOMReadyTheDownloadTimeOfTheRes(domInteractive, domComplete)</li><li>6.totalWhiteScreenTime += this.getWhiteScreenTime(navigationStart, domInteractive)</li><li>7.totalDOMReadyTime += this.getDOMReadyTime(navigationStart, domContentLoadedEventEnd)</li><li>8.totalLoadTime += this.getLoadTime(navigationStart, loadEventEnd)</li></ul><p>这个工具中的时间计算</p><p><img src="/.io//timing-overview.png" alt="timing-overview"></p><p>chrome 中的performance.timing对象记录了所有的时间 <a href="https://www.cnblogs.com/btgyoyo/p/6341077.html" target="_blank" rel="noopener">浏览器从输入网址发生的事(前端优化)</a></p><p>navigationStart,如果没有前一个网页，则等于fetchStart属性。<br>fetchstart,</p><p>DNS: domainLookupStart,domainLookupEnd,</p><p>TCP: connectStart,secureConnectionStart,connectEnd,</p><p>TTFB和Download: requestStart,responseStart,responseEnd,</p><p>渲染DOM:<br>domLoading,开始解析渲染DOM树的时间<br>domInteractive,完成解析DOM树的时间</p><p>加载资源:<br>domContentLoadedEventStart,在DOM树解析完成后，网页内资源加载开始的时间<br>domContentLoadedEventEnd,DOM树解析完成后，网页内资源加载完成时间（如JS脚本加载执行完成） 这个阶段会可能会触发 domcontentLoaded 事件<br>domComplete,DOM已经结束，而且资源也加载完了。</p><p>DOM的onload回调方法时间: loadEventStart,loadEventEnd load回调函数执行完成的时间<br><img src="/.io//dom-navtiming.png" alt="详细放大图"><br><a href="https://blog.csdn.net/redtopic/article/details/70677690" target="_blank" rel="noopener">各个时间</a><br><a href="https://www.cnblogs.com/btgyoyo/p/6341077.html" target="_blank" rel="noopener">介绍performance中的time</a></p><h3 id="DOMContentLoaded-Load-两个事件"><a href="#DOMContentLoaded-Load-两个事件" class="headerlink" title="DOMContentLoaded Load 两个事件"></a>DOMContentLoaded Load 两个事件</h3><p><a href="https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html" target="_blank" rel="noopener">DOMContentLoaded和Load两个时间，蓝线和红线</a><br>这两种情况的差别，DOMContentLoaded完成的时候，是页面已经出来，结束白屏状态，当Load的时候，图片，等其他资源也加载完毕。</p><p><a href="https://www.cnblogs.com/Bonnie3449/p/8419609.html" target="_blank" rel="noopener">DOMContentLoaded 与 load事件</a></p><h3 id="DOM中的document-readystate属性值："><a href="#DOM中的document-readystate属性值：" class="headerlink" title="DOM中的document.readystate属性值："></a>DOM中的document.readystate属性值：</h3><ul><li>uninitialized (未初始化) ：对象尚未初始化</li><li>loading (正在加载) ：对象正在加载</li><li>loaded (加载完毕) ：对象加载数据完成</li><li>interactive (交互)：可以操作对象，但还没完全加载</li><li>complete (完成)：对象已经加载完毕</li></ul><h3 id="DOMContentLoaded-jquery-ready事件"><a href="#DOMContentLoaded-jquery-ready事件" class="headerlink" title="DOMContentLoaded/ jquery ready事件"></a>DOMContentLoaded/ jquery ready事件</h3><p>$(function(){})$(document).ready(function(){})jQuery中是怎么处理这两种加载情况的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">jQuery.readyException = function( error ) &#123;</span><br><span class="line">window.setTimeout( function() &#123;</span><br><span class="line">throw error</span><br><span class="line">&#125; )</span><br><span class="line">&#125;</span><br><span class="line">这里使用了Deferred对象，最终会执行这个fn，而且会给参数 readyList.resolveWith( document, [ jQuery ] ) 把当前的document 和jQUery给fn内部可以使用</span><br><span class="line">// The deferred used on DOM ready</span><br><span class="line">var readyList = jQuery.Deferred()</span><br><span class="line">jQuery.fn.ready = function( fn ) &#123;</span><br><span class="line">--------3-----------</span><br><span class="line">readyList.then( fn )</span><br><span class="line">// Wrap jQuery.readyException in a function so that the lookup</span><br><span class="line">// happens at the time of error handling instead of callback</span><br><span class="line">// registration.</span><br><span class="line">.catch( function( error ) &#123;</span><br><span class="line">jQuery.readyException( error )</span><br><span class="line">&#125; )</span><br><span class="line">return this</span><br><span class="line">&#125;</span><br><span class="line">jQuery.extend( &#123;</span><br><span class="line">// Is the DOM ready to be used? Set to true once it occurs.</span><br><span class="line">isReady: false,</span><br><span class="line">// A counter to track how many items to wait for before</span><br><span class="line">// the ready event fires. See #6781</span><br><span class="line">readyWait: 1,</span><br><span class="line">//ready等会</span><br><span class="line">// Hold (or release) the ready event</span><br><span class="line">holdReady: function( hold ) &#123;</span><br><span class="line">if ( hold ) &#123;</span><br><span class="line">jQuery.readyWait++</span><br><span class="line">&#125; else &#123;</span><br><span class="line">jQuery.ready( true )</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">// Handle when the DOM is ready</span><br><span class="line">ready: function( wait ) &#123;</span><br><span class="line">// Abort if there are pending holds or we&amp;aposre already ready</span><br><span class="line">if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">// Remember that the DOM is ready</span><br><span class="line">jQuery.isReady = true</span><br><span class="line">// If a normal DOM Ready event fired, decrement, and wait if need be</span><br><span class="line">if ( wait !== true &amp;&amp; --jQuery.readyWait &gt; 0 ) &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">        //这里会被调用，jQuery.ready()--------2-----------</span><br><span class="line">// If there are functions bound, to execute</span><br><span class="line">readyList.resolveWith( document, [ jQuery ] )</span><br><span class="line">&#125;</span><br><span class="line">&#125; )</span><br><span class="line">jQuery.ready.then = readyList.then</span><br><span class="line">// The ready event handler and self cleanup method</span><br><span class="line">function completed() &#123;</span><br><span class="line">document.removeEventListener( &quot;DOMContentLoaded&quot;, completed )</span><br><span class="line">window.removeEventListener( &quot;load&quot;, completed )</span><br><span class="line">jQuery.ready()</span><br><span class="line">&#125;</span><br><span class="line">--------1-----------</span><br><span class="line">// Catch cases where $(document).ready() is called</span><br><span class="line">// after the browser event has already occurred.</span><br><span class="line">// Support: IE &lt;=9 - 10 only</span><br><span class="line">// Older IE sometimes signals &quot;interactive&quot; too soon</span><br><span class="line">if ( document.readyState === &quot;complete&quot; ||</span><br><span class="line">( document.readyState !== &quot;loading&quot; &amp;&amp; !document.documentElement.doScroll ) ) &#123;</span><br><span class="line">    </span><br><span class="line">// Handle it asynchronously to allow scripts the opportunity to delay ready</span><br><span class="line">window.setTimeout( jQuery.ready )</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// Use the handy event callback</span><br><span class="line">document.addEventListener( &quot;DOMContentLoaded&quot;, completed )</span><br><span class="line">// A fallback to window.onload, that will always work</span><br><span class="line">window.addEventListener( &quot;load&quot;, completed )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照1,2,3的代码顺序执行，首先1后面，判断，如果当前的document状态已经完整，就可以直接立即执行2，|| 不是在加载状态，兼容IE， 否则的话，在document中添加两个事件的监听，发生这种事件之后，执行completed，这个方法内部会调用jQuery.ready()—-2<br>2最后还是调用3，</p><p><a href="https://segmentfault.com/a/1190000005869515" target="_blank" rel="noopener">浅谈DOMContentLoaded事件及其封装方法</a></p><h4 id="load-onload-事件"><a href="#load-onload-事件" class="headerlink" title="load/onload 事件"></a>load/onload 事件</h4><p>上面事件顺序理解之后，再结合上面一个事件，这个事件只是事件更靠后一点。</p><p>body标签中加onload事件，可以做出来等待的情况，<a href="https://muxiaobai.github.io/2016/12/17/%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85/">转圈效果</a></p><h2 id="各大浏览器内核介绍"><a href="#各大浏览器内核介绍" class="headerlink" title="各大浏览器内核介绍"></a>各大浏览器内核介绍</h2><p>常见的浏览器内核:</p><ul><li>IE : Trident</li><li>firefox: Gecko(Mozilla)</li><li>Safari: Webkit</li><li>Chrome Blink</li><li>Opera: Presto,现使用Chrome的Blink</li></ul><p>注：Blink是Chromium的核心,它的前身是Webkit.国内的大部分浏览器,其中一个内核是Trident，然后再增加一个其他内核。国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以来回切换。</p><h2 id="chrome-F12开发者工具"><a href="#chrome-F12开发者工具" class="headerlink" title="chrome F12开发者工具"></a>chrome F12开发者工具</h2><p>常用面板: Console Elements Sources</p><p>网络问题: Network Audits</p><p>性能其他: Application Performance Momery</p><ul><li>Elements: 最终浏览器展示的结果，可以查看到元素的样式Style，计算出来的元素位置Computed，事件的监听Event；</li><li>Network: 解决常用数据问题，比如前后端数据传输呀。查看请求头，响应头，请求参数，响应结果等。以及每一个资源的Timing（Waterfall）（请求- 响应时间）Network</li><li>Console: 控制台，查看一些参数呀，输入命令等。</li><li>Application: 参考<a href="https://muxiaobai.github.io/2016/08/20/HTML5-API-%E6%96%B0%E7%89%B9%E6%80%A7/">HTML5-API新特性</a>,主要是Cookie,Session,Storage,还有两个新特性，Manifest,Service Workers,一般网站开发，上面已经够用了，如果遇到其他页面响应慢等性能问题，就需要下面两个面板:</li><li>Performance: 性能</li><li>Momery: 内存</li></ul><p>下面这两个系列文章很全的。</p><ul><li><a href="http://www.cnblogs.com/constantince/category/712675.html" target="_blank" rel="noopener">Chrome开发者工具不完全指南</a></li><li><a href="http://www.cnblogs.com/charliechu/p/5948448.html" target="_blank" rel="noopener">Chrome开发者工具详解</a></li></ul><p>缺少浏览器的渲染和优化方向</p><p>参考文献:</p><ul><li><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="noopener">chrome官方开发者工具文档</a></li><li><a href="https://developer.chrome.com/devtools/docs/demos/memory" target="_blank" rel="noopener">memory测试</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp" target="_blank" rel="noopener">google文档 评估关键渲染路径</a>☆☆</li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp" target="_blank" rel="noopener">google文档 分析关键渲染路径性能</a>☆☆☆☆</li></ul>]]></content>
    
    <summary type="html">
    
      从浏览器的请求响应，重新认识chrome
    
    </summary>
    
      <category term="前端" scheme="https://muxiaobai.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="工具" scheme="https://muxiaobai.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前端" scheme="https://muxiaobai.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
