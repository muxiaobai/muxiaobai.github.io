{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatars.jpg","path":"img/avatars.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/wechatpay.png","path":"img/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"source/about/799e851bb051f81900db386ed8b44aed2f73e7a0.jpg","path":"about/799e851bb051f81900db386ed8b44aed2f73e7a0.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1472647015000},{"_id":"themes/yelee/README.md","hash":"7f4de98edf5b61b2e0ca24cf995cc74c21f92780","modified":1472647017000},{"_id":"themes/yelee/_config - 副本.yml","hash":"9354187285ae90c9163e9b22f8c50acda9abad41","modified":1472647021000},{"_id":"themes/yelee/_config.yml","hash":"d36a61b7080ea024c78744b506549e8ba22247af","modified":1542869365000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1472647017000},{"_id":"source/404/index.md","hash":"b7ff3221cb02b5720ffeb37f0d6df06851e91263","modified":1509604172000},{"_id":"source/_drafts/Thinking-in-java-基础之线程和并发.md","hash":"d06a0119bf7d34c4aad8b285dfa8b90d616f29a4","modified":1560143601666},{"_id":"source/_drafts/jQuery中的延迟和回调-Deferred和Callbacks.md","hash":"7ce36ffa8abe62c1ccf9637241d9241e3689cc0c","modified":1514855577000},{"_id":"source/about/index.md","hash":"e312ed6b393410732ed14a3de24906e4a88e1f9d","modified":1551766477000},{"_id":"source/_posts/2016年个人总结.md","hash":"e914c126c7df912811b8d4f433726bd8b4210041","modified":1547541085000},{"_id":"source/_posts/2017年个人总结.md","hash":"fd2be613fa547d681caad3f14ec65a7f9f25c68a","modified":1548385511000},{"_id":"source/_posts/2018年个人总结.md","hash":"ad0b1ebc481a361c11156cc934ea5baf3d3afbb1","modified":1550293106000},{"_id":"source/_posts/CSS-定位布局.md","hash":"795ec2489f6689ae113b6116e50a6f74eb1255f9","modified":1502260743000},{"_id":"source/_posts/GitHub Hexo.md","hash":"00eefe8a34ff34bf102a0689e81c34431604746c","modified":1472646275000},{"_id":"source/_posts/HTML5-API-新特性.md","hash":"811747b13a9169add7c56d8ec04595d50fe71de4","modified":1472646275000},{"_id":"source/_posts/JavaEE-资源路径问题.md","hash":"1924f0f7e940585f8a2db7fcc53cecddbd191875","modified":1472646275000},{"_id":"source/_posts/Javamelody-工具.md","hash":"ae54e5c1a91ea245ead09890908a175106c7ad2a","modified":1514011663000},{"_id":"source/_posts/Linux-下安装SVN服务器.md","hash":"2c70d7ab8136c91b418f487aa648a450c4992769","modified":1472646276000},{"_id":"source/_posts/Linux-下的java安装、变更以及升级问题.md","hash":"6c51290f5a3808cf952a6e66c85d714ef652e4cd","modified":1548144823000},{"_id":"source/_posts/Linux-基础Shell脚本.md","hash":"833198737c411904642296243a57bfb91b9cd7b6","modified":1472646276000},{"_id":"source/_posts/Linux-基础命令总结.md","hash":"0a8261de60b90445bb2da56bead8d87213e730bf","modified":1550293315000},{"_id":"source/_posts/Linux-基础命令总结2.md","hash":"3e6bfe2d74d4f8f2b307b5f8c65fd7d64b4b6cbf","modified":1554884971000},{"_id":"source/_posts/Linux-基础命令总结3.md","hash":"21df582c36d7555c03ecf91dea2dac903065b1e3","modified":1554114909000},{"_id":"source/_posts/Linux-基础命令总结4.md","hash":"02b02b83893138e793f307fdaac2b3abbcc9862c","modified":1554884979000},{"_id":"source/_posts/Linux下各目录的默认含义.md","hash":"20fcc890bb644db234dd11c5fb2c05da66ca3d2a","modified":1472646276000},{"_id":"source/_posts/RSS好工具.md","hash":"903b9d34ba13086cb9d0619dc07314ecd73a0be9","modified":1513869200000},{"_id":"source/_posts/Spring中的Session生命周期.md","hash":"0adf5d7568c09008e50055b9004e746ccab7cd07","modified":1472646276000},{"_id":"source/_posts/Spring源码阅读之AOP两种代理模式.md","hash":"506fa588730f501dc0ca0ff08f4606be1cc1dc02","modified":1530157451000},{"_id":"source/_posts/Spring源码阅读之Ioc控制反转.md","hash":"1e94a42047bae5e0d128b41708020c3c20928e2d","modified":1529896083000},{"_id":"source/_posts/Sublime-下运行Java文件.md","hash":"32bc3cc3799f2758029862f87f4753f4d12298c6","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之I-O.md","hash":"42674046f75f176ab77401479fae918138675e35","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之异常.md","hash":"eb1d59ce1faf8611cfa5cc92d037b1bae0d8453b","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发.md","hash":"1ccb52ec445f28d61a279462ec2e15bf849b4be7","modified":1528710783000},{"_id":"source/_posts/Thinking-in-java-基础之网络Socket.md","hash":"30d23926c2751c264107a9ee8046d44951f6dd3b","modified":1474718676000},{"_id":"source/_posts/Thinking-in-java-基础之集合框架.md","hash":"362a036d86983e76daefb4700d80735a947db67d","modified":1472646277000},{"_id":"source/_posts/Tomcat源码阅读之Container责任链.md","hash":"942f8f7ea7b5aa61b844dae6ed3617b969952f8c","modified":1526289158000},{"_id":"source/_posts/Tomcat源码阅读之URL请求解析.md","hash":"3a791fb6e834961ba379fd30d5c9ddbbb0d6a82b","modified":1524211629000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系.md","hash":"ccec1aa3cc054a271919ef6783bf90002e81fecb","modified":1524210506000},{"_id":"source/_posts/Tomcat源码阅读之组件生命周期.md","hash":"6a428e5fbd36eebfd17dfc48e70153426ef7fa59","modified":1524210545000},{"_id":"source/_posts/hadoop-Sqoop-Hive等的安装.md","hash":"8adcc1044c576b4d1ed3fad5c6bc6692cf2169db","modified":1500535481000},{"_id":"source/_posts/hello-world.md","hash":"fae3e5cacce8d463c431985885d58600992eb745","modified":1498722512000},{"_id":"source/_posts/java-常用代码.md","hash":"82a9c064bc52640c950c25d4f3e0d45559f46ec8","modified":1554686740000},{"_id":"source/_posts/javascript-常用代码.md","hash":"f90f0f2d1e4a5833855de1a0e27c390e013ca566","modified":1551773950000},{"_id":"source/_posts/javascript再学习之DOM.md","hash":"1b7a47c341156d8cdbc6b1f23e950841e382e60f","modified":1504063913000},{"_id":"source/_posts/javascript再学习之Event.md","hash":"0e56a97ecd20b5c3a2f7a8247fff8ba1a39a02ca","modified":1516786809000},{"_id":"source/_posts/javascript再学习之prototype.md","hash":"63198163f55fcb6f0adbc552fd2e6f97e2833819","modified":1514272451000},{"_id":"source/_posts/mongodb主从架构设计.md","hash":"751667712b6500c1a394e54de63366740fc33700","modified":1548144561000},{"_id":"source/_posts/mongodb常用命令.md","hash":"461f596577866bf9c812b247ee2d21e26c317233","modified":1555655446000},{"_id":"source/_posts/从ES6中学习编码.md","hash":"336a8a0cc82a7c0d46bb9232a73a8f002d81ed9a","modified":1474256965000},{"_id":"source/_posts/使用ELK分析日志.md","hash":"17ed5e2857bfd669d80c0d4452ccd5bffe4c3803","modified":1558240180000},{"_id":"source/_posts/前后台数据交互方式总结.md","hash":"a787a09f25012a8973e4e3e69fbee39994372c62","modified":1472646277000},{"_id":"source/_posts/前端小tips.md","hash":"fc16804be2324037818f7eba513629b12cb4e26d","modified":1515133095000},{"_id":"source/_posts/前言技术之OCR识别.md","hash":"c7d70bb7ccb19af37a66df41de525321c9244b9f","modified":1545617227000},{"_id":"source/_posts/好网站-天天记.md","hash":"7d57d942ce6d531bf76c4d6807c20749ba048335","modified":1541677571000},{"_id":"source/_posts/好软件-靠机遇.md","hash":"3576a0a59cffd385f6a378d1cee35ff53c8f8c1a","modified":1528430042000},{"_id":"source/_posts/常见排序算法总结.md","hash":"53e5efbd7fd8fc68910bb431a3eea2e07b654c8b","modified":1505805041000},{"_id":"source/_posts/应用部署之nginx参数配置.md","hash":"d4778ef2a45763f69bf643e1701da33027b820ce","modified":1542944598000},{"_id":"source/_posts/应用部署之nginx负载.md","hash":"fabdff2e507de3e14294027f68bdcb0d1862e729","modified":1554098091000},{"_id":"source/_posts/性能优化之redis储存计算值.md","hash":"ac8622b0ea2ef3cc00f0403e390b9f4d448f658d","modified":1550293302000},{"_id":"source/_posts/数据库操作-plsql操作.md","hash":"c2c6c68e0658c7a065249de56befefd82cfcbf12","modified":1547175131000},{"_id":"source/_posts/数据库操作语句.md","hash":"01664b9bf0efbdae767d4ad39896fc6d5b7f300a","modified":1556088223000},{"_id":"source/_posts/数据库操作语句2.md","hash":"0402a319707a0b25377de13e81b5b17447a4900e","modified":1554884689000},{"_id":"source/_posts/数据库监控-Druid监控配置.md","hash":"10e8f5f608ee0e24b5e10707b1d6549680a52ef2","modified":1547175083000},{"_id":"source/_posts/模仿jQuery创建自己的js工具.md","hash":"74d136f9f5d9d56e531427d0c8b677526f061e8a","modified":1473744317000},{"_id":"source/_posts/毕业设计心得.md","hash":"5aa645c587ad8f0cfeb4f1257c27d6eac15d34a7","modified":1498722375000},{"_id":"source/_posts/测试Travis CI.md","hash":"5a7f3e42f54a7af12852cfe1c18337f69603c840","modified":1560143601825},{"_id":"source/_posts/浏览器的加载页面过程及优化方法.md","hash":"80d63c60a674828beb079a0136468cc1cb64c27a","modified":1550291969000},{"_id":"source/_posts/浏览器的请求与响应过程.md","hash":"fe4df9a7dcbf3f3475be900e2f31af123ec04861","modified":1528710421000},{"_id":"source/_posts/深入理解JVM之性能调优.md","hash":"47303ca54c3fd5daa5316cb24fc56cf08ef1236e","modified":1557365085000},{"_id":"source/_posts/深入理解JVM之远程监控.md","hash":"67ee4daf5de7bf1c32d1fb14789c8b83ef488893","modified":1546398763000},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object.md","hash":"414f3be6a6bec34146c973c1a61526ed5bca2f42","modified":1474347131000},{"_id":"source/_posts/等待-等待-等待.md","hash":"7891a82e8aee5b2db167446783417f47b65ac308","modified":1528424937000},{"_id":"source/_posts/重装CENTOS一系列操作.md","hash":"34ec780721ef4ae1691e71b0398cbdc8d2a85f15","modified":1522832419000},{"_id":"source/_posts/高并发之缓存、限流、降级.md","hash":"3d14aa61d68bac02d1292b489d31f5246b978783","modified":1558443174000},{"_id":"source/categories/index.md","hash":"bba9a77e5d1c398b309097c0b6eb50e0fbd4e89b","modified":1542869002000},{"_id":"source/tags/index.md","hash":"1617a9022fc36dcc57b5169aeb3bfe9232a77fba","modified":1526548935000},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1472647015000},{"_id":"themes/yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1472647015000},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1472647015000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1472647015000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1472647015000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1472647015000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1472647015000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1472647015000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1472647015000},{"_id":"themes/yelee/layout/layout.ejs","hash":"9627b873dcd58fcdc8568fe2a85c68ded279fdc6","modified":1530169016000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1472647016000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1472647016000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1472647016000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1472647018000},{"_id":"source/_drafts/jQuery中的延迟和回调-Deferred和Callbacks/2017102409Callbacks.png","hash":"238cb7d76ab7b4ce4f6c442ced05c99bfc12f4f7","modified":1508809568000},{"_id":"source/_posts/CSS-定位布局/04191646-bdab6a76666f4747a58b5e9b7c6be74c.png","hash":"afb820ee21870aaa6a3321a0b1bfdef7490c9c78","modified":1502260725000},{"_id":"source/_posts/HTML5-API-新特性/201608201813.PNG","hash":"76e6385cf40938e5385101ce537beae5744d538e","modified":1472646275000},{"_id":"source/_posts/HTML5-API-新特性/201608230954.PNG","hash":"7f22cc8ccb64581160eb7cdd4f39efd14a7421be","modified":1472646275000},{"_id":"source/_posts/HTML5-API-新特性/201608230958.PNG","hash":"1e8d86b3c3ba19bf8364497038e96987d1983fc6","modified":1472646275000},{"_id":"source/_posts/HTML5-API-新特性/201608231049.PNG","hash":"2a2f32e2a6d86b40589126f99f75e84c71bbf681","modified":1472646275000},{"_id":"source/_posts/JavaEE-资源路径问题/201607191615.PNG","hash":"2c1bb78ac84cc31e88e894464e6114676a2a412a","modified":1472646275000},{"_id":"source/_posts/JavaEE-资源路径问题/201607191616.PNG","hash":"b95a06d159a34a9f7bbff2f79e58b44039adf5ea","modified":1472646276000},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192134.jpg","hash":"f54beb61d80fe26306ae8bee2ba8a50f7dd42787","modified":1472646275000},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192139.jpg","hash":"380406bba680d99b5bd9651ce6e1badd45c266b6","modified":1472646276000},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192140.jpg","hash":"2c78b26dcc276bcd8a186f460dd08051b31bb206","modified":1472646275000},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192141.jpg","hash":"b1a8c679356e4b3c8ebf559d74058589196bf527","modified":1472646276000},{"_id":"source/_posts/Linux-下的java安装、变更以及升级问题/20170720125445.png","hash":"4b9bd0446ad664eb07a1dc219447af3cd1c55334","modified":1500526527000},{"_id":"source/_posts/Linux-基础命令总结3/1089507-20170126222420597-662074402.jpg","hash":"0e9a8fbf47ec97f547d36161455008a2ffa659be","modified":1547018197000},{"_id":"source/_posts/Spring中的Session生命周期/201608051437LocalSessionFactoryBean.PNG","hash":"d3524209e74fbac1c1876f5ffe14639c7b87fa68","modified":1472646276000},{"_id":"source/_posts/Spring中的Session生命周期/201608051454LocalSessionFactoryBuilder.PNG","hash":"6163bc7f323561dc78289df9f44d51ba935aa2ba","modified":1472646276000},{"_id":"source/_posts/Spring中的Session生命周期/201608051457AvailableSettings.PNG","hash":"082a58c9de264ed59c26eff0a0d2472cbaf0045a","modified":1472646276000},{"_id":"source/_posts/Spring源码阅读之AOP两种代理模式/20180628.png","hash":"ac2433a7e94d7016590f375b3a32c71532d5c98e","modified":1530157028000},{"_id":"source/_posts/Spring源码阅读之Ioc控制反转/SpringIOC.png","hash":"19df51bcdf05707f6ed7f2edea7c4644dbdb2b3c","modified":1529895816000},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608031722.jpg","hash":"a02b1b3a3b93c0ba54be1f57a670929f91f07402","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091504Error.PNG","hash":"c6669dad39409da02f809687acc5e39335e599fe","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091505Exception.PNG","hash":"7453f0ab64da7b597ff0cb5a30f007166a20cdb9","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091505IOException.PNG","hash":"a373d3f509998ac7e8fb18f16d0646a94b16988e","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091506RuntimeException.PNG","hash":"49412d3a7c8b1c7b4d3509c8517035b321af8b5a","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091509Throwable.PNG","hash":"26ec9efa855def933cdaa8192275928d800eeab8","modified":1472646277000},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/20160924.PNG","hash":"19a6d553339f53856197e0823c1b0b7489a94b81","modified":1474684656000},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/201609241035.PNG","hash":"1127a89dc4ee943cfb2b1c7edae21dd97578e590","modified":1474684656000},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/201609241126.PNG","hash":"2e911391ed8c0b4c00f7e56406554361f7a1654e","modified":1474687587000},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/201609241131.PNG","hash":"7ec39f169ad7f870c88e1b67ed23b88dad26bd43","modified":1474687951000},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/201609241132.PNG","hash":"44f39e3e8c692e5eaa4d64b045cf6f4a3b217a1a","modified":1474713921000},{"_id":"source/_posts/Thinking-in-java-基础之集合框架/201606251033.gif","hash":"717e1c30f4f6fe3ebefc48d73e45beb220d9e8aa","modified":1472646277000},{"_id":"source/_posts/Tomcat源码阅读之Container责任链/665375-20160119184923890-1995839223.png","hash":"855f03a58561fad3d11cd7d41908e221bc211312","modified":1524211503000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/1174710-20170804092103272-2042915115.png","hash":"7544841e9716020edb8379eb3aba3b9adbff1f73","modified":1523864404000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/Lifecycle.PNG","hash":"a2f17fd64e959155f5321d9326baaf361fddfbee","modified":1523862304000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/catalinaload.PNG","hash":"7e5b5ca91f46e0d7b15f8b05f5fb8c5b2e437172","modified":1523873406000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/image001.png","hash":"be4eb7ad2156cad8969e968f8ebbd150edbcc159","modified":1523864541000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/init.PNG","hash":"bdfd40c0659d8b0018e30da7712ece01a16126c8","modified":1523869278000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/load.PNG","hash":"8eef8a54b2202b5d2b843f0353eb600626d78c07","modified":1523869288000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/main.PNG","hash":"27627a1047276c2ba8b2b04c9ae85e1993f33f14","modified":1523869299000},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/start&stop.PNG","hash":"bc89520b6e226336318c3ebed38098a7685f608f","modified":1523869348000},{"_id":"source/_posts/Tomcat源码阅读之组件生命周期/Lifecycle.PNG","hash":"a2f17fd64e959155f5321d9326baaf361fddfbee","modified":1523862304000},{"_id":"source/_posts/Tomcat源码阅读之组件生命周期/LifecycleBaseinit.PNG","hash":"c5c4a757ec4505ba78a64df51bf50fff69836644","modified":1523958178000},{"_id":"source/_posts/Tomcat源码阅读之组件生命周期/StandardService.PNG","hash":"bf44ed5079a6dc921b5b5c86ed9cd89f0b93a8c4","modified":1523959758000},{"_id":"source/_posts/javascript再学习之DOM/20170809.PNG","hash":"14f24c4d1004cb77304cddb8b0c218390b5d027a","modified":1502279864000},{"_id":"source/_posts/javascript再学习之DOM/547672a9000140b904700285.jpg","hash":"c5766901864145ae566d8ab9962e287758cf962d","modified":1502197059000},{"_id":"source/_posts/javascript再学习之prototype/person.png","hash":"bf956260bacdc99c81303e05a4165d147c1bf3e5","modified":1513910388000},{"_id":"source/_posts/javascript再学习之prototype/person2.png","hash":"20cbb3b50c582e0f9276cf67875029d85b9472d2","modified":1513910388000},{"_id":"source/_posts/从ES6中学习编码/201609170838.PNG","hash":"8647774fd0848bba65455f389f694ae3e20d147c","modified":1474072755000},{"_id":"source/_posts/使用ELK分析日志/elasticsearch-header.png","hash":"e1624a0d2fef28179a0773245e90e5a2a2802f23","modified":1558234483000},{"_id":"source/_posts/使用ELK分析日志/elasticsearch-init.png","hash":"71173c9ccee067b79175ef6cb62d394ce5781014","modified":1558236419000},{"_id":"source/_posts/使用ELK分析日志/filebeat.png","hash":"84aba191d72180bc963e2ea3bd2d60b7b94bea44","modified":1558239640000},{"_id":"source/_posts/使用ELK分析日志/kibaba1.png","hash":"4d64b00d9aec718d66549f17dc6e10f0f6ff8405","modified":1558238221000},{"_id":"source/_posts/前后台数据交互方式总结/201608031249.PNG","hash":"d9fbdf3493d5d22270caec6711fd57c9eb5c5a00","modified":1472646277000},{"_id":"source/_posts/前后台数据交互方式总结/201608031301.PNG","hash":"7b3018b25d6484096e5e97dcf89681687f2ea00a","modified":1472646277000},{"_id":"source/_posts/前言技术之OCR识别/1.png","hash":"a6f3e3134fe85c2a0e43959885a7ba921fe7c451","modified":1545383782000},{"_id":"source/_posts/常见排序算法总结/1342514529_5795.jpg","hash":"005c1ff7fb4bfad57b538fd7635211b3b2567ca4","modified":1504363341000},{"_id":"source/_posts/常见排序算法总结/20160925.gif","hash":"6f8f5719e35080edc92f8ee11f63cc5031d05cbf","modified":1475153983000},{"_id":"source/_posts/模仿jQuery创建自己的js工具/201609131126.PNG","hash":"535949225a9d49576564c82edae543208155726e","modified":1473742966000},{"_id":"source/_posts/模仿jQuery创建自己的js工具/201609131136.PNG","hash":"6ca306f2bfc02ff4e254a61d94af27dca07aaf52","modified":1473742966000},{"_id":"source/_posts/模仿jQuery创建自己的js工具/201609131200.PNG","hash":"3515e56bccbcc9929243d990a7e17ff760f840aa","modified":1473742966000},{"_id":"source/_posts/毕业设计心得/20170629.png","hash":"35b130dd114d0333233cc6464bde73a346064403","modified":1498722188000},{"_id":"source/_posts/浏览器的请求与响应过程/baidu.png","hash":"7d9c665a826d26ca38ce309cc69428d2b8c3613b","modified":1528338622000},{"_id":"source/_posts/浏览器的请求与响应过程/dom-navtiming.png","hash":"ab3bd1c01f3a52ce099eeca29ba34f4ca48d9b7e","modified":1528425581000},{"_id":"source/_posts/浏览器的请求与响应过程/load.png","hash":"d7996c3424ec549ae7130eecbe9b1caae75036a8","modified":1528338623000},{"_id":"source/_posts/深入理解JVM之性能调优/gc收集器.jpg","hash":"342085e9a8e24af783ae76708277f79b4d54ca01","modified":1513306471000},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object/20160920.png","hash":"39292ab5d387e8db48efa525b20303ccddfd3254","modified":1474346499000},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object/201609201019.PNG","hash":"34025c049000a98794d2d3f5faf78c809168b588","modified":1474338008000},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object/201609201006.PNG","hash":"a4db8bddb4c7ae9d378ed8e886d17d63f39a5db5","modified":1474337230000},{"_id":"source/_posts/等待-等待-等待/loading.gif","hash":"49e54acbf5674212195e581848ec0d490282448f","modified":1481959896000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"caf24c2a6b7eed44572e144af7e2f2644d1c1d90","modified":1509603742000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1472647016000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1472647016000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"1aae3f15e19c7c20438af8d396d378bc85ff08ff","modified":1530169975000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1472647016000},{"_id":"themes/yelee/layout/_partial/coinhive.ejs","hash":"f482d62e039f0d85e5d07eac80f0a95076ab7990","modified":1526544526000},{"_id":"themes/yelee/layout/_partial/donate.ejs","hash":"6ba8e0594073679c46e24f6fb35eaafc360d6186","modified":1526604794000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"7e8902fb47bc37b7534936e55312522a9721338e","modified":1472647016000},{"_id":"themes/yelee/layout/_partial/forkMeOnGithub.ejs","hash":"716fed6bef6531fa3476fffe8316a51cb66ad215","modified":1530169184000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"d6ba46773e031af9f89526a4fa795da7b8e19faa","modified":1509595236000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"25143122dd7f3d78caf42e75d61198fdf9c60978","modified":1530170318000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1530169026000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"06c5fa07ee00abd62198f33d5e29928fb192b588","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"53bc5091b92703c96e90472c0b4c82ad5ef10965","modified":1472647017000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1472647018000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1472647018000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1472647018000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1472647018000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"803faa7a85d9fafb8072a2abd912b46c546eee92","modified":1472647020000},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1472647018000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1472647020000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1472647020000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1472647020000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1472647020000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1472647020000},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1472647020000},{"_id":"themes/yelee/source/img/avatars.jpg","hash":"925211d30488efd8c87a7159e12cfb48f9d22faf","modified":1472647020000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1472647020000},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1472647020000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1472647020000},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1472647020000},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1472647020000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1472647021000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1472647021000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1472647021000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1472647021000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1472647021000},{"_id":"themes/yelee/source/js/main.js","hash":"3c84d12cd852ced9f5f236a386a533909399922d","modified":1472647021000},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1472647021000},{"_id":"themes/yelee/source/js/pc.js","hash":"201b9b590f82a44615936bdf74800b9c67996710","modified":1472647021000},{"_id":"themes/yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1472647021000},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1472647021000},{"_id":"source/_posts/CSS-定位布局/04191649-7fdab9f4cce5477a90e766ff47ba1291.png","hash":"be2f70af2dc805e114142ae630e7d7917a8bfb55","modified":1502260650000},{"_id":"source/_posts/CSS-定位布局/69699506520645702.jpg","hash":"944ee461aba3312979fcf58c018dc1f74c8edd0b","modified":1482901874000},{"_id":"source/_posts/HTML5-API-新特性/201608201816.PNG","hash":"1f73d6877c988c3ebdc06e040166157eed0fefcc","modified":1472646275000},{"_id":"source/_posts/HTML5-API-新特性/201608231046.PNG","hash":"71a63747af004e41efe88e6921c7c2173c8e8552","modified":1472646275000},{"_id":"source/_posts/Javamelody-工具/20170802.PNG","hash":"d7546bee7f9e9af4eeb549a871d7315545ad55d2","modified":1501665143000},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192138.jpg","hash":"db145d92e60a839b5738d99b8dafa3a1322d92bb","modified":1472646275000},{"_id":"source/_posts/Spring中的Session生命周期/201608051345SpringSessionContext.PNG","hash":"408ec184078e8b6c55571e88f7a31723f659e0e7","modified":1472646276000},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/20150309140927553.jpg","hash":"391773d5b0c871dc2623b8403e9166aafa170237","modified":1474685013000},{"_id":"source/_posts/Tomcat源码阅读之Container责任链/818454-20161025170804984-654825756.png","hash":"b6d8f37defd8b31754a8699b0b448d2675908b46","modified":1526286044000},{"_id":"source/_posts/Tomcat源码阅读之URL请求解析/Connector.png","hash":"62937280184d7b88c83440e8e84afc65768fd8b2","modified":1524044188000},{"_id":"source/_posts/javascript再学习之Event/54781e7f0001e00505400486.jpg","hash":"f955e8c89e1f97d29f50af753d9c09a02123a9af","modified":1502281771000},{"_id":"source/_posts/javascript再学习之prototype/xproto-2.png","hash":"7f0f72f5d702b1060a0ff69aafe4df0841d938e4","modified":1513912429000},{"_id":"source/_posts/使用ELK分析日志/logstash-nginx.png","hash":"50e1896cdd155908e7ba5a42cf30a12c4cfb0a49","modified":1558237060000},{"_id":"source/_posts/好软件-靠机遇/img-670ca2c60725b12876bb66ca02b80547.jpg","hash":"23b26412b5be80a2322714067fc367b0f7d61e8b","modified":1472646278000},{"_id":"source/_posts/好软件-靠机遇/img-aa57dfa19bfd30ca05cae84c0121304c.jpg","hash":"db85eb10258a01628da42ab9481c60b2aeaec0aa","modified":1472646278000},{"_id":"source/_posts/浏览器的加载页面过程及优化方法/website3.png","hash":"02976fa99a7e71f6e6938e60d8a51b530ad67d1b","modified":1528706649000},{"_id":"source/_posts/浏览器的请求与响应过程/timing-overview.png","hash":"f843500aac6a5056fe7a66aee3e7242be3a8a664","modified":1528353042000},{"_id":"source/_posts/深入理解JVM之性能调优/jvm-model.png","hash":"1566c9a18f3ab740d6b28730d53df1427e7e47b3","modified":1513306464000},{"_id":"source/_posts/深入理解JVM之性能调优/jvmGC.png","hash":"ed138fd73f28acef74f95d777afdb379d73f9184","modified":1557364923000},{"_id":"source/_posts/深入理解JVM之性能调优/堆内存.png","hash":"f6e207fe15b74f1d848484e6a86fa1b6345abb2d","modified":1509516609000},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object/201609201219.PNG","hash":"8dc2939d652c5a6c61a35500ff77bdef5549b3b0","modified":1474345565000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1472647018000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1472647018000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1472647018000},{"_id":"themes/yelee/source/img/wechatpay.png","hash":"57689677d8f687ba8a6bcca5dc412560ff4e7a36","modified":1526549708000},{"_id":"source/_posts/Linux-基础Shell脚本/201607101243.PNG","hash":"f7fb464403942030a49797c88d52fc055573eb28","modified":1472646276000},{"_id":"source/_posts/Linux-基础命令总结3/160604162658756.gif","hash":"0cfcae47854e492ed03c1ff8bc727efb85a690cc","modified":1560143601719},{"_id":"source/_posts/Linux-基础命令总结3/chinese.gif","hash":"0cfcae47854e492ed03c1ff8bc727efb85a690cc","modified":1536656453000},{"_id":"source/_posts/Thinking-in-java-基础之I-O/20160625095901.png","hash":"03887527df0cfa467d2637c1800d32379fe4b508","modified":1472646277000},{"_id":"source/_posts/使用ELK分析日志/kibaba2.png","hash":"27ca8728a8070d2984bb480c219271703c776f77","modified":1558238541000},{"_id":"source/_posts/好软件-靠机遇/img-60eeb15f9df2b5821a84cab6db1511af.jpg","hash":"5a12154d904098bd316e0704c66366049858be3e","modified":1472646278000},{"_id":"source/_posts/浏览器的加载页面过程及优化方法/website1.png","hash":"fb56d819ea4b8c893151602fec3349e664499167","modified":1528706650000},{"_id":"source/_posts/浏览器的加载页面过程及优化方法/website2.png","hash":"4772f0aec81706137187490ceb6c8a0eea5f0790","modified":1528706650000},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1472647016000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1472647016000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1472647016000},{"_id":"themes/yelee/layout/_partial/comments/gitment.ejs","hash":"8f4e1382fe6bd262df902b75297a46cdac441796","modified":1526612980000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1472647016000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"249a5af68085dd6b3ca39e2e920e2e7915ec4104","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1472647017000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1472647017000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1472647018000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1472647018000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1472647018000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1472647018000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"27ccc6374d04cd93717a2b6c587342b6cbe6fc80","modified":1472647018000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"e920a40d228b844f8636ae3c1c202850e779e38d","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"371770b054ca345d53d92cea08e977ac1a495fa2","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"25a951db2960655db3a6c344c8ad228c7c2e1222","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1472647020000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1472647020000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1472647020000},{"_id":"themes/yelee/source/img/alipay.jpg","hash":"f12943c48da1dfad27f8deb723eff924db7a3d24","modified":1526549708000},{"_id":"source/about/799e851bb051f81900db386ed8b44aed2f73e7a0.jpg","hash":"5a857710eb48c4a6f90e49a2e432c98151c87ccb","modified":1528443985000},{"_id":"source/_posts/Linux-基础命令总结3/english.gif","hash":"d63852b98ea45f6b4b5a65112a05506d18ccc501","modified":1554097787000},{"_id":"source/_posts/Spring中的Session生命周期/201608051337CurrentSessionContext.PNG","hash":"319c91611a8dde2310f8d73ec31a7ab367dc4ce4","modified":1472646277000},{"_id":"source/_posts/使用ELK分析日志/data2.png","hash":"80615d719de9fe0e13cb8019f1178b64bb896452","modified":1558237846000},{"_id":"source/_posts/深入理解JVM之性能调优/jvm-parameter.png","hash":"a31cc3df3337dfda1f03672a2df3ad5709ec03ca","modified":1509516609000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"421f104da4a6392baf159a7d88af561e309f4ecb","modified":1530515884000},{"_id":"source/_posts/Linux-基础Shell脚本/201607101216.PNG","hash":"8f9c11563b089b295b68107c3a33146c9776930b","modified":1472646276000},{"_id":"source/_posts/Linux-基础Shell脚本/201607101227.PNG","hash":"49aafab8ce610bb5e628a0b87fc71ea2ff28c8c0","modified":1472646276000},{"_id":"source/_posts/Linux-基础Shell脚本/201607101231.PNG","hash":"4a55f2895359a6f385fcaab75b2cadacc36bb9b4","modified":1472646276000},{"_id":"source/_posts/使用ELK分析日志/data1.png","hash":"a077fce0a3a6bada9810391ffba38eae00ac7d4d","modified":1558237846000},{"_id":"source/_posts/使用ELK分析日志/kibaba4.png","hash":"f8623f78c512473e870f872c83f7873a22f7dc3e","modified":1558238541000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1472647018000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1472647018000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1472647018000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1472647019000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"f686fd5d6e41f749ad860971fbda5a108fbf32f5","modified":1472647019000},{"_id":"source/_posts/javascript再学习之Event/54c89def0001c19105810528.jpg","hash":"253b37ddecccbb6508b7a25af8876afb1d989f28","modified":1502525671000},{"_id":"source/_posts/好软件-靠机遇/img-9f0a8ec10b7aef312e1fe3aafc7b4729.jpg","hash":"cccd21306ba58ac319e2b6a3d568316c3b4c5798","modified":1472646278000},{"_id":"source/_posts/从ES6中学习编码/201105031137219627.png","hash":"b03c94e7fe80deabf54364eca3c8b3be1de71706","modified":1474074987000},{"_id":"source/_posts/从ES6中学习编码/2011050311372042.png","hash":"939f0eadb86c3b576d63659c9ece8e02fa7bbda8","modified":1474074990000},{"_id":"source/_posts/CSS-定位布局/779058981978531304.jpg","hash":"9a39c712d94f94dd91396da41eaa3652da878306","modified":1482902264000},{"_id":"source/_posts/Linux-基础命令总结3/1353759337_6781.png","hash":"a3d726e3d303b9e5c80a3e7de9062821a28aa0a9","modified":1536656454000},{"_id":"source/_posts/Thinking-in-java-基础之I-O/201606250959.jpg","hash":"9164e71c8c4bade655fb9165e98c161fbba81305","modified":1472646277000},{"_id":"source/_posts/前端小tips/P71102-200420.jpg","hash":"5f9cf36c39a116d2568e53182525f80f6fcdb784","modified":1509624308000}],"Category":[{"name":"jQuery","_id":"cjwpyz76j0004ugv5izuee2u2"},{"name":"java","_id":"cjwpyz76n0009ugv5y506dkbo"},{"name":"前端","_id":"cjwpyz76v000fugv55rli83hp"},{"name":"搭建网站","_id":"cjwpyz773000kugv5m0vtb6c6"},{"name":"Linux","_id":"cjwpyz77e000uugv5tsvtv7xi"},{"name":"CSS","parent":"cjwpyz76v000fugv55rli83hp","_id":"cjwpyz77o001fugv5qjwnxi5r"},{"name":"资源","_id":"cjwpyz77w0024ugv5vho2fsy8"},{"name":"Sublime","_id":"cjwpyz77z002cugv5aerrudla"},{"name":"服务器","parent":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz781002iugv59zf2h48y"},{"name":"hadoop","_id":"cjwpyz784002pugv5z9d9d6ik"},{"name":"java","parent":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz786002uugv50ktgp67d"},{"name":"javascript","_id":"cjwpyz7880030ugv5px1orsvo"},{"name":"数据库","_id":"cjwpyz78c003iugv5to8tu9fq"},{"name":"数据交互","_id":"cjwpyz78d003qugv5tjfh9z95"},{"name":"OCR","_id":"cjwpyz78e003vugv5ioi24lj8"},{"name":"数据结构","_id":"cjwpyz78f0042ugv5db85ivfc"},{"name":"deploy","_id":"cjwpyz78g0047ugv5auo00y4s"},{"name":"性能优化","_id":"cjwpyz78h004augv5f17ox5nx"},{"name":"SQL","_id":"cjwpyz78j004eugv56kytyy28"},{"name":"Travis","_id":"cjwpyz78j004iugv50zp7ja3a"},{"name":"性能优化","parent":"cjwpyz76v000fugv55rli83hp","_id":"cjwpyz78k004lugv5833a18yp"},{"name":"hadoop","parent":"cjwpyz786002uugv50ktgp67d","_id":"cjwpyz78k004pugv5f2yyfzl7"},{"name":"算法","parent":"cjwpyz78f0042ugv5db85ivfc","_id":"cjwpyz78l004tugv5qhp1h17r"},{"name":"数据库","parent":"cjwpyz78j004eugv56kytyy28","_id":"cjwpyz78m004yugv57on5ji7m"},{"name":"总结","_id":"cjwpyz79i006eugv5wrz7vl12"},{"name":"HTML","_id":"cjwpyz79p006vugv5hcrlq1yz"},{"name":"工具","_id":"cjwpyz79v007dugv5vunlmm7l"},{"name":"系统监控优化","parent":"cjwpyz78j004eugv56kytyy28","_id":"cjwpyz7a3007sugv5p5y384xj"},{"name":"数据库","parent":"cjwpyz7a3007sugv5p5y384xj","_id":"cjwpyz7a60083ugv5swkiibtp"},{"name":"高并发","_id":"cjwpyz7a8008augv5ha5yek9l"},{"name":"性能优化","parent":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz7c600a2ugv5q9rogsjm"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","date":"2016-06-20T05:06:56.000Z","tags":404,"_content":"\n###  你访问的我页面丢失了:-)\n\n### 请重新访问主页 :-)\n\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ndate: 2016-06-20 13:06:56\ntags: 404\npermalink: /404\n---\n\n###  你访问的我页面丢失了:-)\n\n### 请重新访问主页 :-)\n\n","updated":"2017-11-02T06:29:32.000Z","path":"/404.html","comments":1,"layout":"page","_id":"cjwpyz76g0001ugv5ms028anw","content":"<h3 id=\"你访问的我页面丢失了\"><a href=\"#你访问的我页面丢失了\" class=\"headerlink\" title=\"你访问的我页面丢失了:-)\"></a>你访问的我页面丢失了:-)</h3><h3 id=\"请重新访问主页\"><a href=\"#请重新访问主页\" class=\"headerlink\" title=\"请重新访问主页 :-)\"></a>请重新访问主页 :-)</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"你访问的我页面丢失了\"><a href=\"#你访问的我页面丢失了\" class=\"headerlink\" title=\"你访问的我页面丢失了:-)\"></a>你访问的我页面丢失了:-)</h3><h3 id=\"请重新访问主页\"><a href=\"#请重新访问主页\" class=\"headerlink\" title=\"请重新访问主页 :-)\"></a>请重新访问主页 :-)</h3>"},{"title":"About Me","date":"2016-06-20T05:03:33.000Z","tags":null,"_content":"\n一个颜值60分的程序猿.\n\n一个稍稍注重生活质量的新时代青年.\n\n一个会挑食但不挑食材的食客.\n\n一个动手能力强,擅长google得到答案的实践者.\n\n一个喜欢多角度的看待社会问题，深入思考问题的“社会”人.\n\n一个喜欢钻研科技，研究原理，紧跟时代潮流的弄潮儿.\n\n一个会把现象归结到经济角度来分析为何存在的“经济”人.\n\n一个会反思会总结会回首的，像极了罗丹创造的《思想者》.\n\n一个大爱服部大叔的傻傻青年!\n\n配图示爱：\n![服部大叔](799e851bb051f81900db386ed8b44aed2f73e7a0.jpg)\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2016-06-20 13:03:33\ntags:\n---\n\n一个颜值60分的程序猿.\n\n一个稍稍注重生活质量的新时代青年.\n\n一个会挑食但不挑食材的食客.\n\n一个动手能力强,擅长google得到答案的实践者.\n\n一个喜欢多角度的看待社会问题，深入思考问题的“社会”人.\n\n一个喜欢钻研科技，研究原理，紧跟时代潮流的弄潮儿.\n\n一个会把现象归结到经济角度来分析为何存在的“经济”人.\n\n一个会反思会总结会回首的，像极了罗丹创造的《思想者》.\n\n一个大爱服部大叔的傻傻青年!\n\n配图示爱：\n![服部大叔](799e851bb051f81900db386ed8b44aed2f73e7a0.jpg)\n","updated":"2019-03-05T06:14:37.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjwpyz76i0003ugv5h9oxdqn5","content":"<p>一个颜值60分的程序猿.</p>\n<p>一个稍稍注重生活质量的新时代青年.</p>\n<p>一个会挑食但不挑食材的食客.</p>\n<p>一个动手能力强,擅长google得到答案的实践者.</p>\n<p>一个喜欢多角度的看待社会问题，深入思考问题的“社会”人.</p>\n<p>一个喜欢钻研科技，研究原理，紧跟时代潮流的弄潮儿.</p>\n<p>一个会把现象归结到经济角度来分析为何存在的“经济”人.</p>\n<p>一个会反思会总结会回首的，像极了罗丹创造的《思想者》.</p>\n<p>一个大爱服部大叔的傻傻青年!</p>\n<p>配图示爱：<br><img src=\"/about/index/799e851bb051f81900db386ed8b44aed2f73e7a0.jpg\" alt=\"服部大叔\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个颜值60分的程序猿.</p>\n<p>一个稍稍注重生活质量的新时代青年.</p>\n<p>一个会挑食但不挑食材的食客.</p>\n<p>一个动手能力强,擅长google得到答案的实践者.</p>\n<p>一个喜欢多角度的看待社会问题，深入思考问题的“社会”人.</p>\n<p>一个喜欢钻研科技，研究原理，紧跟时代潮流的弄潮儿.</p>\n<p>一个会把现象归结到经济角度来分析为何存在的“经济”人.</p>\n<p>一个会反思会总结会回首的，像极了罗丹创造的《思想者》.</p>\n<p>一个大爱服部大叔的傻傻青年!</p>\n<p>配图示爱：<br><img src=\"/about/index/799e851bb051f81900db386ed8b44aed2f73e7a0.jpg\" alt=\"服部大叔\"></p>\n"},{"title":"categories","date":"2016-06-20T05:03:42.000Z","tags":null,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-20 13:03:42\ntags:\n---\n","updated":"2018-11-22T06:43:22.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjwpyz79g006bugv596m7ws85","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-06-20T05:03:42.000Z","tags":null,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-20 13:03:42\ntags:\n---\n","updated":"2018-05-17T09:22:15.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjwpyz79h006dugv5zjts1nhp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"jQuery中的延迟和回调(Deferred和Callbacks)","date":"2017-10-22T22:28:09.000Z","description":"读源码，了解回调和延迟对象","_content":"\n\n## Callbacks\n\n```\nvar abc=$.Callbacks();\nfunction a(n){   console.log(\"a:\"+n);}\nfunction b(x){   console.log(\"b:\"+x);}\nabc.add(a);\nabc.add(b);\nabc.fire(3);\nabc.fire(5);\nconsole.log(abc);\n```\n![结果](jQuery中的延迟和回调-Deferred和Callbacks/2017102409Callbacks.png)\n\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n * //默认为false，当有参数的时候为true\n * Possible options:\n *\t//重复调用fire(),只执行一次 option.once =true\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\t//add后继续执行fire() option.menory =true 针对add再一次调用fire\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\t//唯一的 函数名不能重复 针对add添加的时候\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\t//遇到返回false就停止\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\n\n\nadd() 添加\nfire() 触发\n\n$.Callbacks();\n\n## Deferred\n\n状态表格tulps\n\n\n## when promise\n\n$.when().done();\n\n\n## ajax ready\n\n$.post().success().fail();\n$.get().then();","source":"_drafts/jQuery中的延迟和回调-Deferred和Callbacks.md","raw":"---\ntitle: jQuery中的延迟和回调(Deferred和Callbacks)\ndate: 2017-10-23 06:28:09\ntags: jQuery实践\ncategories: jQuery\ndescription: \"读源码，了解回调和延迟对象\"\n---\n\n\n## Callbacks\n\n```\nvar abc=$.Callbacks();\nfunction a(n){   console.log(\"a:\"+n);}\nfunction b(x){   console.log(\"b:\"+x);}\nabc.add(a);\nabc.add(b);\nabc.fire(3);\nabc.fire(5);\nconsole.log(abc);\n```\n![结果](jQuery中的延迟和回调-Deferred和Callbacks/2017102409Callbacks.png)\n\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n * //默认为false，当有参数的时候为true\n * Possible options:\n *\t//重复调用fire(),只执行一次 option.once =true\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\t//add后继续执行fire() option.menory =true 针对add再一次调用fire\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\t//唯一的 函数名不能重复 针对add添加的时候\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\t//遇到返回false就停止\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\n\n\nadd() 添加\nfire() 触发\n\n$.Callbacks();\n\n## Deferred\n\n状态表格tulps\n\n\n## when promise\n\n$.when().done();\n\n\n## ajax ready\n\n$.post().success().fail();\n$.get().then();","slug":"jQuery中的延迟和回调-Deferred和Callbacks","published":0,"updated":"2018-01-02T01:12:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz76c0000ugv518cw8tyt","content":"<h2 id=\"Callbacks\"><a href=\"#Callbacks\" class=\"headerlink\" title=\"Callbacks\"></a>Callbacks</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var abc=$.Callbacks();</span><br><span class=\"line\">function a(n)&#123;   console.log(&quot;a:&quot;+n);&#125;</span><br><span class=\"line\">function b(x)&#123;   console.log(&quot;b:&quot;+x);&#125;</span><br><span class=\"line\">abc.add(a);</span><br><span class=\"line\">abc.add(b);</span><br><span class=\"line\">abc.fire(3);</span><br><span class=\"line\">abc.fire(5);</span><br><span class=\"line\">console.log(abc);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//2017102409Callbacks.png\" alt=\"结果\"></p>\n<p>/*</p>\n<ul>\n<li>Create a callback list using the following parameters:<br>*</li>\n<li>options: an optional list of space-separated options that will change how</li>\n<li>the callback list behaves or a more traditional option object<br>*</li>\n<li>By default a callback list will act like an event callback list and can be</li>\n<li>“fired” multiple times.</li>\n<li>//默认为false，当有参数的时候为true</li>\n<li>Possible options:</li>\n<li>//重复调用fire(),只执行一次 option.once =true</li>\n<li>once:            will ensure the callback list can only be fired once (like a Deferred)</li>\n<li>//add后继续执行fire() option.menory =true 针对add再一次调用fire</li>\n<li>memory:            will keep track of previous values and will call any callback added</li>\n<li>after the list has been fired right away with the latest “memorized”</li>\n<li>values (like a Deferred)</li>\n<li>//唯一的 函数名不能重复 针对add添加的时候</li>\n<li>unique:            will ensure a callback can only be added once (no duplicate in the list)</li>\n<li>//遇到返回false就停止</li>\n<li>stopOnFalse:    interrupt callings when a callback returns false<br><em>\n</em>/</li>\n</ul>\n<p>add() 添加<br>fire() 触发</p>\n<p>$.Callbacks();</p>\n<h2 id=\"Deferred\"><a href=\"#Deferred\" class=\"headerlink\" title=\"Deferred\"></a>Deferred</h2><p>状态表格tulps</p>\n<h2 id=\"when-promise\"><a href=\"#when-promise\" class=\"headerlink\" title=\"when promise\"></a>when promise</h2><p>$.when().done();</p>\n<h2 id=\"ajax-ready\"><a href=\"#ajax-ready\" class=\"headerlink\" title=\"ajax ready\"></a>ajax ready</h2><p>$.post().success().fail();<br>$.get().then();</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Callbacks\"><a href=\"#Callbacks\" class=\"headerlink\" title=\"Callbacks\"></a>Callbacks</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var abc=$.Callbacks();</span><br><span class=\"line\">function a(n)&#123;   console.log(&quot;a:&quot;+n);&#125;</span><br><span class=\"line\">function b(x)&#123;   console.log(&quot;b:&quot;+x);&#125;</span><br><span class=\"line\">abc.add(a);</span><br><span class=\"line\">abc.add(b);</span><br><span class=\"line\">abc.fire(3);</span><br><span class=\"line\">abc.fire(5);</span><br><span class=\"line\">console.log(abc);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//2017102409Callbacks.png\" alt=\"结果\"></p>\n<p>/*</p>\n<ul>\n<li>Create a callback list using the following parameters:<br>*</li>\n<li>options: an optional list of space-separated options that will change how</li>\n<li>the callback list behaves or a more traditional option object<br>*</li>\n<li>By default a callback list will act like an event callback list and can be</li>\n<li>“fired” multiple times.</li>\n<li>//默认为false，当有参数的时候为true</li>\n<li>Possible options:</li>\n<li>//重复调用fire(),只执行一次 option.once =true</li>\n<li>once:            will ensure the callback list can only be fired once (like a Deferred)</li>\n<li>//add后继续执行fire() option.menory =true 针对add再一次调用fire</li>\n<li>memory:            will keep track of previous values and will call any callback added</li>\n<li>after the list has been fired right away with the latest “memorized”</li>\n<li>values (like a Deferred)</li>\n<li>//唯一的 函数名不能重复 针对add添加的时候</li>\n<li>unique:            will ensure a callback can only be added once (no duplicate in the list)</li>\n<li>//遇到返回false就停止</li>\n<li>stopOnFalse:    interrupt callings when a callback returns false<br><em>\n</em>/</li>\n</ul>\n<p>add() 添加<br>fire() 触发</p>\n<p>$.Callbacks();</p>\n<h2 id=\"Deferred\"><a href=\"#Deferred\" class=\"headerlink\" title=\"Deferred\"></a>Deferred</h2><p>状态表格tulps</p>\n<h2 id=\"when-promise\"><a href=\"#when-promise\" class=\"headerlink\" title=\"when promise\"></a>when promise</h2><p>$.when().done();</p>\n<h2 id=\"ajax-ready\"><a href=\"#ajax-ready\" class=\"headerlink\" title=\"ajax ready\"></a>ajax ready</h2><p>$.post().success().fail();<br>$.get().then();</p>\n"},{"title":"Thinking in java 基础之线程和并发","date":"2016-08-09T08:23:38.000Z","description":"线程并发基础,","_content":"\n## Java中的线程和并发\n\n#### 新线程\n\n#### 锁与共享资源\n\n#### 状态\n\n\n#### \n\n####\n\n","source":"_drafts/Thinking-in-java-基础之线程和并发.md","raw":"---\ntitle: Thinking in java 基础之线程和并发\ndate: 2016-08-09 16:23:38\ntags: [Thread,Concurrent]\ncategories: java\ndescription: \"线程并发基础,\"\n---\n\n## Java中的线程和并发\n\n#### 新线程\n\n#### 锁与共享资源\n\n#### 状态\n\n\n#### \n\n####\n\n","slug":"Thinking-in-java-基础之线程和并发","published":0,"updated":"2019-06-10T05:13:21.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz76h0002ugv5oyb42p5p","content":"<h2 id=\"Java中的线程和并发\"><a href=\"#Java中的线程和并发\" class=\"headerlink\" title=\"Java中的线程和并发\"></a>Java中的线程和并发</h2><h4 id=\"新线程\"><a href=\"#新线程\" class=\"headerlink\" title=\"新线程\"></a>新线程</h4><h4 id=\"锁与共享资源\"><a href=\"#锁与共享资源\" class=\"headerlink\" title=\"锁与共享资源\"></a>锁与共享资源</h4><h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><p>#### </p>\n<p>####</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java中的线程和并发\"><a href=\"#Java中的线程和并发\" class=\"headerlink\" title=\"Java中的线程和并发\"></a>Java中的线程和并发</h2><h4 id=\"新线程\"><a href=\"#新线程\" class=\"headerlink\" title=\"新线程\"></a>新线程</h4><h4 id=\"锁与共享资源\"><a href=\"#锁与共享资源\" class=\"headerlink\" title=\"锁与共享资源\"></a>锁与共享资源</h4><h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><p>#### </p>\n<p>####</p>\n"},{"title":"CSS 定位布局","description":"关于position,float,display,line-height等定位布局有关的style，学习","date":"2016-12-27T00:01:46.000Z","_content":"\n\n## position:absolute fixed relative static inherit\n\nabsolute和fixed脱离文档流，相对于有定位元素的父级定位,可以使用(left top right bottom z-index)\n其中fixed的绝对是相对于可是窗口的，浏览器中的document。\nrelative 相对定位，尽量少用，相对于原来本身的位置定位，和下面说的float有的一拼，\nstatic 默认状态下没有(left top right bottom z-index),无效。\ninherit 继承有定位的父级元素\n[jsfiddle测试实例](https://jsfiddle.net/muxiaobai/bqx9rep5/)\n参考[display与position之间的关系](http://www.cnblogs.com/baimiaolei/p/5627755.html)\n    \n  \n## float:left/right\n\n浮动是相对于本行，相当于 `{position:relative;left:0px;}`  相对左边为0px；可以使用{clear:both}来消除浮动，\n浮动脱离文档流.不常用，一般我也不会用。破坏文档流。\n\n## display:block inline inline-block none;常用\n\n 通常使用 `{display:block;position:absolute;}` ，然后让{display:none}来隐藏。\n \n\n## 行内模型 四条线\n\n[HTML/CSS盒子模型，块级元素和行内元素](http://www.tuicool.com/articles/JzuQZnI)\n行内元素没有width heigth padding margin 可以通过设置line-heigth来控制高度\n\n块级盒子模型已经谈的不少了，这种通常是block类型的或者具有disploy:block属性的元素,什么padding border margin之类；\n \n这次谈到的是行内模型。四条线\n英语中的四线三格，不了解每线的规则，怎么写的一手漂亮的英文？\n\n从上到下的线 :\n\ntop顶线\nmiddle中线\nbaseline基线传说中根据张鑫旭的说法x-height，\"x\"的底。\nbottom底线\n\n![图解四线三格](CSS-定位布局/04191646-bdab6a76666f4747a58b5e9b7c6be74c.png \"图解\")\n\n> 行高的定义:是两条基线的距离\n\n不过计算的时候可以使用字体＋行距来计算。\n如果设定了行高后减去字体就得到行距（上一行的bottom到下一行的top之间的高度）那么一些行距也就随之展开了。\n首先是行内框，如果没有padding等因素的影响，字体的高度就是行内框，然后就是行框，也是实际占据一行的高度，即一行内最大的行内距。\n\n\n![行距](CSS-定位布局/04191649-7fdab9f4cce5477a90e766ff47ba1291.png \"一些行距\")\n\n注:以上两张图片是借用的，如有要求，可删除。\n[jsfiddle inline-height test ](https://jsfiddle.net/muxiaobai/8of4omak/)\n参考[CSS行高——line-height](http://www.cnblogs.com/dolphinX/p/3236686.html)\n[vertical-align-and-line-height](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)\n\n## 最后上两张图片\n\n![position](CSS-定位布局/69699506520645702.jpg)\n![inline-height](CSS-定位布局/779058981978531304.jpg)","source":"_posts/CSS-定位布局.md","raw":"---\ntitle: CSS 定位布局\ntags:\n  - CSS\n  - 定位\n  - 行高\ncategories:\n  - 前端\n  - CSS\ndescription: '关于position,float,display,line-height等定位布局有关的style，学习'\ndate: 2016-12-27 08:01:46\n---\n\n\n## position:absolute fixed relative static inherit\n\nabsolute和fixed脱离文档流，相对于有定位元素的父级定位,可以使用(left top right bottom z-index)\n其中fixed的绝对是相对于可是窗口的，浏览器中的document。\nrelative 相对定位，尽量少用，相对于原来本身的位置定位，和下面说的float有的一拼，\nstatic 默认状态下没有(left top right bottom z-index),无效。\ninherit 继承有定位的父级元素\n[jsfiddle测试实例](https://jsfiddle.net/muxiaobai/bqx9rep5/)\n参考[display与position之间的关系](http://www.cnblogs.com/baimiaolei/p/5627755.html)\n    \n  \n## float:left/right\n\n浮动是相对于本行，相当于 `{position:relative;left:0px;}`  相对左边为0px；可以使用{clear:both}来消除浮动，\n浮动脱离文档流.不常用，一般我也不会用。破坏文档流。\n\n## display:block inline inline-block none;常用\n\n 通常使用 `{display:block;position:absolute;}` ，然后让{display:none}来隐藏。\n \n\n## 行内模型 四条线\n\n[HTML/CSS盒子模型，块级元素和行内元素](http://www.tuicool.com/articles/JzuQZnI)\n行内元素没有width heigth padding margin 可以通过设置line-heigth来控制高度\n\n块级盒子模型已经谈的不少了，这种通常是block类型的或者具有disploy:block属性的元素,什么padding border margin之类；\n \n这次谈到的是行内模型。四条线\n英语中的四线三格，不了解每线的规则，怎么写的一手漂亮的英文？\n\n从上到下的线 :\n\ntop顶线\nmiddle中线\nbaseline基线传说中根据张鑫旭的说法x-height，\"x\"的底。\nbottom底线\n\n![图解四线三格](CSS-定位布局/04191646-bdab6a76666f4747a58b5e9b7c6be74c.png \"图解\")\n\n> 行高的定义:是两条基线的距离\n\n不过计算的时候可以使用字体＋行距来计算。\n如果设定了行高后减去字体就得到行距（上一行的bottom到下一行的top之间的高度）那么一些行距也就随之展开了。\n首先是行内框，如果没有padding等因素的影响，字体的高度就是行内框，然后就是行框，也是实际占据一行的高度，即一行内最大的行内距。\n\n\n![行距](CSS-定位布局/04191649-7fdab9f4cce5477a90e766ff47ba1291.png \"一些行距\")\n\n注:以上两张图片是借用的，如有要求，可删除。\n[jsfiddle inline-height test ](https://jsfiddle.net/muxiaobai/8of4omak/)\n参考[CSS行高——line-height](http://www.cnblogs.com/dolphinX/p/3236686.html)\n[vertical-align-and-line-height](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)\n\n## 最后上两张图片\n\n![position](CSS-定位布局/69699506520645702.jpg)\n![inline-height](CSS-定位布局/779058981978531304.jpg)","slug":"CSS-定位布局","published":1,"updated":"2017-08-09T06:39:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz76k0006ugv5f8vltiig","content":"<h2 id=\"position-absolute-fixed-relative-static-inherit\"><a href=\"#position-absolute-fixed-relative-static-inherit\" class=\"headerlink\" title=\"position:absolute fixed relative static inherit\"></a>position:absolute fixed relative static inherit</h2><p>absolute和fixed脱离文档流，相对于有定位元素的父级定位,可以使用(left top right bottom z-index)<br>其中fixed的绝对是相对于可是窗口的，浏览器中的document。<br>relative 相对定位，尽量少用，相对于原来本身的位置定位，和下面说的float有的一拼，<br>static 默认状态下没有(left top right bottom z-index),无效。<br>inherit 继承有定位的父级元素<br><a href=\"https://jsfiddle.net/muxiaobai/bqx9rep5/\" target=\"_blank\" rel=\"noopener\">jsfiddle测试实例</a><br>参考<a href=\"http://www.cnblogs.com/baimiaolei/p/5627755.html\" target=\"_blank\" rel=\"noopener\">display与position之间的关系</a></p>\n<h2 id=\"float-left-right\"><a href=\"#float-left-right\" class=\"headerlink\" title=\"float:left/right\"></a>float:left/right</h2><p>浮动是相对于本行，相当于 <code>{position:relative;left:0px;}</code>  相对左边为0px；可以使用{clear:both}来消除浮动，<br>浮动脱离文档流.不常用，一般我也不会用。破坏文档流。</p>\n<h2 id=\"display-block-inline-inline-block-none-常用\"><a href=\"#display-block-inline-inline-block-none-常用\" class=\"headerlink\" title=\"display:block inline inline-block none;常用\"></a>display:block inline inline-block none;常用</h2><p> 通常使用 <code>{display:block;position:absolute;}</code> ，然后让{display:none}来隐藏。</p>\n<h2 id=\"行内模型-四条线\"><a href=\"#行内模型-四条线\" class=\"headerlink\" title=\"行内模型 四条线\"></a>行内模型 四条线</h2><p><a href=\"http://www.tuicool.com/articles/JzuQZnI\" target=\"_blank\" rel=\"noopener\">HTML/CSS盒子模型，块级元素和行内元素</a><br>行内元素没有width heigth padding margin 可以通过设置line-heigth来控制高度</p>\n<p>块级盒子模型已经谈的不少了，这种通常是block类型的或者具有disploy:block属性的元素,什么padding border margin之类；</p>\n<p>这次谈到的是行内模型。四条线<br>英语中的四线三格，不了解每线的规则，怎么写的一手漂亮的英文？</p>\n<p>从上到下的线 :</p>\n<p>top顶线<br>middle中线<br>baseline基线传说中根据张鑫旭的说法x-height，”x”的底。<br>bottom底线</p>\n<p><img src=\"/.io//04191646-bdab6a76666f4747a58b5e9b7c6be74c.png\" alt=\"图解四线三格\" title=\"图解\"></p>\n<blockquote>\n<p>行高的定义:是两条基线的距离</p>\n</blockquote>\n<p>不过计算的时候可以使用字体＋行距来计算。<br>如果设定了行高后减去字体就得到行距（上一行的bottom到下一行的top之间的高度）那么一些行距也就随之展开了。<br>首先是行内框，如果没有padding等因素的影响，字体的高度就是行内框，然后就是行框，也是实际占据一行的高度，即一行内最大的行内距。</p>\n<p><img src=\"/.io//04191649-7fdab9f4cce5477a90e766ff47ba1291.png\" alt=\"行距\" title=\"一些行距\"></p>\n<p>注:以上两张图片是借用的，如有要求，可删除。<br><a href=\"https://jsfiddle.net/muxiaobai/8of4omak/\" target=\"_blank\" rel=\"noopener\">jsfiddle inline-height test </a><br>参考<a href=\"http://www.cnblogs.com/dolphinX/p/3236686.html\" target=\"_blank\" rel=\"noopener\">CSS行高——line-height</a><br><a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">vertical-align-and-line-height</a></p>\n<h2 id=\"最后上两张图片\"><a href=\"#最后上两张图片\" class=\"headerlink\" title=\"最后上两张图片\"></a>最后上两张图片</h2><p><img src=\"/.io//69699506520645702.jpg\" alt=\"position\"><br><img src=\"/.io//779058981978531304.jpg\" alt=\"inline-height\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"position-absolute-fixed-relative-static-inherit\"><a href=\"#position-absolute-fixed-relative-static-inherit\" class=\"headerlink\" title=\"position:absolute fixed relative static inherit\"></a>position:absolute fixed relative static inherit</h2><p>absolute和fixed脱离文档流，相对于有定位元素的父级定位,可以使用(left top right bottom z-index)<br>其中fixed的绝对是相对于可是窗口的，浏览器中的document。<br>relative 相对定位，尽量少用，相对于原来本身的位置定位，和下面说的float有的一拼，<br>static 默认状态下没有(left top right bottom z-index),无效。<br>inherit 继承有定位的父级元素<br><a href=\"https://jsfiddle.net/muxiaobai/bqx9rep5/\" target=\"_blank\" rel=\"noopener\">jsfiddle测试实例</a><br>参考<a href=\"http://www.cnblogs.com/baimiaolei/p/5627755.html\" target=\"_blank\" rel=\"noopener\">display与position之间的关系</a></p>\n<h2 id=\"float-left-right\"><a href=\"#float-left-right\" class=\"headerlink\" title=\"float:left/right\"></a>float:left/right</h2><p>浮动是相对于本行，相当于 <code>{position:relative;left:0px;}</code>  相对左边为0px；可以使用{clear:both}来消除浮动，<br>浮动脱离文档流.不常用，一般我也不会用。破坏文档流。</p>\n<h2 id=\"display-block-inline-inline-block-none-常用\"><a href=\"#display-block-inline-inline-block-none-常用\" class=\"headerlink\" title=\"display:block inline inline-block none;常用\"></a>display:block inline inline-block none;常用</h2><p> 通常使用 <code>{display:block;position:absolute;}</code> ，然后让{display:none}来隐藏。</p>\n<h2 id=\"行内模型-四条线\"><a href=\"#行内模型-四条线\" class=\"headerlink\" title=\"行内模型 四条线\"></a>行内模型 四条线</h2><p><a href=\"http://www.tuicool.com/articles/JzuQZnI\" target=\"_blank\" rel=\"noopener\">HTML/CSS盒子模型，块级元素和行内元素</a><br>行内元素没有width heigth padding margin 可以通过设置line-heigth来控制高度</p>\n<p>块级盒子模型已经谈的不少了，这种通常是block类型的或者具有disploy:block属性的元素,什么padding border margin之类；</p>\n<p>这次谈到的是行内模型。四条线<br>英语中的四线三格，不了解每线的规则，怎么写的一手漂亮的英文？</p>\n<p>从上到下的线 :</p>\n<p>top顶线<br>middle中线<br>baseline基线传说中根据张鑫旭的说法x-height，”x”的底。<br>bottom底线</p>\n<p><img src=\"/.io//04191646-bdab6a76666f4747a58b5e9b7c6be74c.png\" alt=\"图解四线三格\" title=\"图解\"></p>\n<blockquote>\n<p>行高的定义:是两条基线的距离</p>\n</blockquote>\n<p>不过计算的时候可以使用字体＋行距来计算。<br>如果设定了行高后减去字体就得到行距（上一行的bottom到下一行的top之间的高度）那么一些行距也就随之展开了。<br>首先是行内框，如果没有padding等因素的影响，字体的高度就是行内框，然后就是行框，也是实际占据一行的高度，即一行内最大的行内距。</p>\n<p><img src=\"/.io//04191649-7fdab9f4cce5477a90e766ff47ba1291.png\" alt=\"行距\" title=\"一些行距\"></p>\n<p>注:以上两张图片是借用的，如有要求，可删除。<br><a href=\"https://jsfiddle.net/muxiaobai/8of4omak/\" target=\"_blank\" rel=\"noopener\">jsfiddle inline-height test </a><br>参考<a href=\"http://www.cnblogs.com/dolphinX/p/3236686.html\" target=\"_blank\" rel=\"noopener\">CSS行高——line-height</a><br><a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"noopener\">vertical-align-and-line-height</a></p>\n<h2 id=\"最后上两张图片\"><a href=\"#最后上两张图片\" class=\"headerlink\" title=\"最后上两张图片\"></a>最后上两张图片</h2><p><img src=\"/.io//69699506520645702.jpg\" alt=\"position\"><br><img src=\"/.io//779058981978531304.jpg\" alt=\"inline-height\"></p>\n"},{"title":"GitHub + Hexo 构建我的博客","date":"2016-06-17T06:57:31.000Z","_content":"\n# 有了Hexo后，我的文章就准备全部迁移至Github了。\n\n## 1.本机搭建\n### 使用环境 \n git node npm\n\n Github账户 username.github.io 仓库\n\n### 安装Hexo\n  Hexo安装，要用全局安装，加-g参数。\n\n```\nzhang@admin MINGW64 ~\n$ npm install –g hexo\n```\n\n<!--more-->\n##### 查看hexo的版本\n```\nzhang@admin MINGW64 ~\n$ hexo -v\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.5.2\nnode: 4.4.5\nv8: 4.5.103.35\nuv: 1.8.0\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n```\n\nhexo 帮助命令\n\n```\nzhang@admin MINGW64 ~\n$ hexo help\nUsage: hexo <command>\n\nCommands:\n  clean     Removed generated files and cache.\n  config    Get or set configurations.\n  deploy    Deploy your website.\n  generate  Generate static files.\n  help      Get help on a command.\n  init      Create a new Hexo folder.\n  list      List the information of the site\n  migrate   Migrate your site from other system to Hexo.\n  new       Create a new post.\n  publish   Moves a draft post from _drafts to _posts folder.\n  render    Render files with renderer plugins.\n  server    Start the server.\n  version   Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\n命令行解释：\n\n*  help 查看帮助信息\n*  init 创建一个hexo项目\n*  migrate 从其他系统向hexo迁移\n*  version 查看hexo的版本\n*  –config参数，指定配置文件，代替默认的_config.yml\n*  –debug参数，调试模式，输出所有日志信息\n*  –safe参数，安全模式，禁用所有的插件和脚本\n*  –silent参数，无日志输出模式\n\n### 安装好后，我们就可以使用Hexo创建项目了。\n\n##### 新建文件夹Hexo\n```\nzhang@admin MINGW64 ~\n$ mkdir Hexo\n$ cd Hexo\n```\n\n##### 初始化进入目录。\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo init\nINFO  Cloning hexo-starter to D:\\hexo\nINFO  Start blogging with Hexo!\n```\n##### 启动服务\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo server\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n```\n\n这时端口4000被打开了，我们能过浏览器打开地址，http://localhost:4000/ 。\n你可以按Ctrl+C 停止Server。\n\n### Create a new post\n\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo new 'My'\nINFO  Created: ~\\Hexo\\source\\_posts\\My.md\n```\n\n刷新http://localhost:4000/，可以发现已生成了一篇新文章 \"My\"。\n\n### Generate static files\n\n##### 执行`hexo generate`下面的命令，将markdown文件生成静态网页。\n\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo generate\n```\n\n该命令执行完后，会在 C:\\Users\\zhang\\Hexo\\public 目录下生成一系列html，css等文件。\n\n到此已经搭建一个个人博客，但是网站都是给别人看的，因此需要发布，我们可以借用Github来部署我们的网站。\n\n## 2.部署到Github\n\n##### 修改配置文件\n\n部署到Github前需要配置_config.yml文件，首先找到下面的内容\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n```\n\n然后将它们修改为\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/muxiaobai/muxiaobai.github.io.git\n  branch: master\n```\n\n##### 执行`hexo deploy`发布网站\n\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo deploy\n```\n\nNOTE1:\n\nRepository：\nSSH形式的url（git@github.com:muxiaobai/muxiaobai.github.io.git ），\n在SSH下，上传错误，于是就用了HTTPS形式\n\nHTTPS形式的url（https://github.com/muxiaobai/muxiaobai.github.io.git ），\n会让你输入用户名,密码.\n\nNOTE2：\n\n如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。\n### 测试\n当部署完成后，在浏览器中打开https://muxiaobai.github.io/（https://muxiaobai.github.io/） ，正常显示网页，表明部署成功。\n### 总结：部署步骤\n\n每次部署的步骤，可按以下三步来进行。\n\nhexo clean\n\nhexo generate\n\nhexo deploy","source":"_posts/GitHub Hexo.md","raw":"---\ntitle: GitHub + Hexo 构建我的博客\ndate: 2016-06-17 14:57:31\ntags: [Github,Hexo]\ncategories: 搭建网站\n---\n\n# 有了Hexo后，我的文章就准备全部迁移至Github了。\n\n## 1.本机搭建\n### 使用环境 \n git node npm\n\n Github账户 username.github.io 仓库\n\n### 安装Hexo\n  Hexo安装，要用全局安装，加-g参数。\n\n```\nzhang@admin MINGW64 ~\n$ npm install –g hexo\n```\n\n<!--more-->\n##### 查看hexo的版本\n```\nzhang@admin MINGW64 ~\n$ hexo -v\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.5.2\nnode: 4.4.5\nv8: 4.5.103.35\nuv: 1.8.0\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n```\n\nhexo 帮助命令\n\n```\nzhang@admin MINGW64 ~\n$ hexo help\nUsage: hexo <command>\n\nCommands:\n  clean     Removed generated files and cache.\n  config    Get or set configurations.\n  deploy    Deploy your website.\n  generate  Generate static files.\n  help      Get help on a command.\n  init      Create a new Hexo folder.\n  list      List the information of the site\n  migrate   Migrate your site from other system to Hexo.\n  new       Create a new post.\n  publish   Moves a draft post from _drafts to _posts folder.\n  render    Render files with renderer plugins.\n  server    Start the server.\n  version   Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\n命令行解释：\n\n*  help 查看帮助信息\n*  init 创建一个hexo项目\n*  migrate 从其他系统向hexo迁移\n*  version 查看hexo的版本\n*  –config参数，指定配置文件，代替默认的_config.yml\n*  –debug参数，调试模式，输出所有日志信息\n*  –safe参数，安全模式，禁用所有的插件和脚本\n*  –silent参数，无日志输出模式\n\n### 安装好后，我们就可以使用Hexo创建项目了。\n\n##### 新建文件夹Hexo\n```\nzhang@admin MINGW64 ~\n$ mkdir Hexo\n$ cd Hexo\n```\n\n##### 初始化进入目录。\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo init\nINFO  Cloning hexo-starter to D:\\hexo\nINFO  Start blogging with Hexo!\n```\n##### 启动服务\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo server\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n```\n\n这时端口4000被打开了，我们能过浏览器打开地址，http://localhost:4000/ 。\n你可以按Ctrl+C 停止Server。\n\n### Create a new post\n\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo new 'My'\nINFO  Created: ~\\Hexo\\source\\_posts\\My.md\n```\n\n刷新http://localhost:4000/，可以发现已生成了一篇新文章 \"My\"。\n\n### Generate static files\n\n##### 执行`hexo generate`下面的命令，将markdown文件生成静态网页。\n\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo generate\n```\n\n该命令执行完后，会在 C:\\Users\\zhang\\Hexo\\public 目录下生成一系列html，css等文件。\n\n到此已经搭建一个个人博客，但是网站都是给别人看的，因此需要发布，我们可以借用Github来部署我们的网站。\n\n## 2.部署到Github\n\n##### 修改配置文件\n\n部署到Github前需要配置_config.yml文件，首先找到下面的内容\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n```\n\n然后将它们修改为\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/muxiaobai/muxiaobai.github.io.git\n  branch: master\n```\n\n##### 执行`hexo deploy`发布网站\n\n```\nzhang@admin MINGW64 ~/Hexo\n$ hexo deploy\n```\n\nNOTE1:\n\nRepository：\nSSH形式的url（git@github.com:muxiaobai/muxiaobai.github.io.git ），\n在SSH下，上传错误，于是就用了HTTPS形式\n\nHTTPS形式的url（https://github.com/muxiaobai/muxiaobai.github.io.git ），\n会让你输入用户名,密码.\n\nNOTE2：\n\n如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。\n### 测试\n当部署完成后，在浏览器中打开https://muxiaobai.github.io/（https://muxiaobai.github.io/） ，正常显示网页，表明部署成功。\n### 总结：部署步骤\n\n每次部署的步骤，可按以下三步来进行。\n\nhexo clean\n\nhexo generate\n\nhexo deploy","slug":"GitHub Hexo","published":1,"updated":"2016-08-31T12:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz76l0007ugv5hwhrl150","content":"<h1 id=\"有了Hexo后，我的文章就准备全部迁移至Github了。\"><a href=\"#有了Hexo后，我的文章就准备全部迁移至Github了。\" class=\"headerlink\" title=\"有了Hexo后，我的文章就准备全部迁移至Github了。\"></a>有了Hexo后，我的文章就准备全部迁移至Github了。</h1><h2 id=\"1-本机搭建\"><a href=\"#1-本机搭建\" class=\"headerlink\" title=\"1.本机搭建\"></a>1.本机搭建</h2><h3 id=\"使用环境\"><a href=\"#使用环境\" class=\"headerlink\" title=\"使用环境\"></a>使用环境</h3><p> git node npm</p>\n<p> Github账户 username.github.io 仓库</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>  Hexo安装，要用全局安装，加-g参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~</span><br><span class=\"line\">$ npm install –g hexo</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"查看hexo的版本\"><a href=\"#查看hexo的版本\" class=\"headerlink\" title=\"查看hexo的版本\"></a>查看hexo的版本</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~</span><br><span class=\"line\">$ hexo -v</span><br><span class=\"line\">hexo-cli: 1.0.2</span><br><span class=\"line\">os: Windows_NT 6.3.9600 win32 x64</span><br><span class=\"line\">http_parser: 2.5.2</span><br><span class=\"line\">node: 4.4.5</span><br><span class=\"line\">v8: 4.5.103.35</span><br><span class=\"line\">uv: 1.8.0</span><br><span class=\"line\">zlib: 1.2.8</span><br><span class=\"line\">ares: 1.10.1-DEV</span><br><span class=\"line\">icu: 56.1</span><br><span class=\"line\">modules: 46</span><br><span class=\"line\">openssl: 1.0.2h</span><br></pre></td></tr></table></figure>\n<p>hexo 帮助命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~</span><br><span class=\"line\">$ hexo help</span><br><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  clean     Removed generated files and cache.</span><br><span class=\"line\">  config    Get or set configurations.</span><br><span class=\"line\">  deploy    Deploy your website.</span><br><span class=\"line\">  generate  Generate static files.</span><br><span class=\"line\">  help      Get help on a command.</span><br><span class=\"line\">  init      Create a new Hexo folder.</span><br><span class=\"line\">  list      List the information of the site</span><br><span class=\"line\">  migrate   Migrate your site from other system to Hexo.</span><br><span class=\"line\">  new       Create a new post.</span><br><span class=\"line\">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class=\"line\">  render    Render files with renderer plugins.</span><br><span class=\"line\">  server    Start the server.</span><br><span class=\"line\">  version   Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages in the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n<p>命令行解释：</p>\n<ul>\n<li>help 查看帮助信息</li>\n<li>init 创建一个hexo项目</li>\n<li>migrate 从其他系统向hexo迁移</li>\n<li>version 查看hexo的版本</li>\n<li>–config参数，指定配置文件，代替默认的_config.yml</li>\n<li>–debug参数，调试模式，输出所有日志信息</li>\n<li>–safe参数，安全模式，禁用所有的插件和脚本</li>\n<li>–silent参数，无日志输出模式</li>\n</ul>\n<h3 id=\"安装好后，我们就可以使用Hexo创建项目了。\"><a href=\"#安装好后，我们就可以使用Hexo创建项目了。\" class=\"headerlink\" title=\"安装好后，我们就可以使用Hexo创建项目了。\"></a>安装好后，我们就可以使用Hexo创建项目了。</h3><h5 id=\"新建文件夹Hexo\"><a href=\"#新建文件夹Hexo\" class=\"headerlink\" title=\"新建文件夹Hexo\"></a>新建文件夹Hexo</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~</span><br><span class=\"line\">$ mkdir Hexo</span><br><span class=\"line\">$ cd Hexo</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化进入目录。\"><a href=\"#初始化进入目录。\" class=\"headerlink\" title=\"初始化进入目录。\"></a>初始化进入目录。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo init</span><br><span class=\"line\">INFO  Cloning hexo-starter to D:\\hexo</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>这时端口4000被打开了，我们能过浏览器打开地址，<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 。<br>你可以按Ctrl+C 停止Server。</p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo new &apos;My&apos;</span><br><span class=\"line\">INFO  Created: ~\\Hexo\\source\\_posts\\My.md</span><br></pre></td></tr></table></figure>\n<p>刷新<a href=\"http://localhost:4000/，可以发现已生成了一篇新文章\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，可以发现已生成了一篇新文章</a> “My”。</p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><h5 id=\"执行hexo-generate下面的命令，将markdown文件生成静态网页。\"><a href=\"#执行hexo-generate下面的命令，将markdown文件生成静态网页。\" class=\"headerlink\" title=\"执行hexo generate下面的命令，将markdown文件生成静态网页。\"></a>执行<code>hexo generate</code>下面的命令，将markdown文件生成静态网页。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>该命令执行完后，会在 C:\\Users\\zhang\\Hexo\\public 目录下生成一系列html，css等文件。</p>\n<p>到此已经搭建一个个人博客，但是网站都是给别人看的，因此需要发布，我们可以借用Github来部署我们的网站。</p>\n<h2 id=\"2-部署到Github\"><a href=\"#2-部署到Github\" class=\"headerlink\" title=\"2.部署到Github\"></a>2.部署到Github</h2><h5 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h5><p>部署到Github前需要配置_config.yml文件，首先找到下面的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br></pre></td></tr></table></figure>\n<p>然后将它们修改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/muxiaobai/muxiaobai.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"执行hexo-deploy发布网站\"><a href=\"#执行hexo-deploy发布网站\" class=\"headerlink\" title=\"执行hexo deploy发布网站\"></a>执行<code>hexo deploy</code>发布网站</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>NOTE1:</p>\n<p>Repository：<br>SSH形式的url（<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:muxiaobai/muxiaobai.github.io.git ），<br>在SSH下，上传错误，于是就用了HTTPS形式</p>\n<p>HTTPS形式的url（<a href=\"https://github.com/muxiaobai/muxiaobai.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/muxiaobai/muxiaobai.github.io.git</a> ），<br>会让你输入用户名,密码.</p>\n<p>NOTE2：</p>\n<p>如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>当部署完成后，在浏览器中打开<a href=\"https://muxiaobai.github.io/（https://muxiaobai.github.io/）\">https://muxiaobai.github.io/（https://muxiaobai.github.io/）</a> ，正常显示网页，表明部署成功。</p>\n<h3 id=\"总结：部署步骤\"><a href=\"#总结：部署步骤\" class=\"headerlink\" title=\"总结：部署步骤\"></a>总结：部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>\n<p>hexo clean</p>\n<p>hexo generate</p>\n<p>hexo deploy</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"有了Hexo后，我的文章就准备全部迁移至Github了。\"><a href=\"#有了Hexo后，我的文章就准备全部迁移至Github了。\" class=\"headerlink\" title=\"有了Hexo后，我的文章就准备全部迁移至Github了。\"></a>有了Hexo后，我的文章就准备全部迁移至Github了。</h1><h2 id=\"1-本机搭建\"><a href=\"#1-本机搭建\" class=\"headerlink\" title=\"1.本机搭建\"></a>1.本机搭建</h2><h3 id=\"使用环境\"><a href=\"#使用环境\" class=\"headerlink\" title=\"使用环境\"></a>使用环境</h3><p> git node npm</p>\n<p> Github账户 username.github.io 仓库</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>  Hexo安装，要用全局安装，加-g参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~</span><br><span class=\"line\">$ npm install –g hexo</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"查看hexo的版本\"><a href=\"#查看hexo的版本\" class=\"headerlink\" title=\"查看hexo的版本\"></a>查看hexo的版本</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~</span><br><span class=\"line\">$ hexo -v</span><br><span class=\"line\">hexo-cli: 1.0.2</span><br><span class=\"line\">os: Windows_NT 6.3.9600 win32 x64</span><br><span class=\"line\">http_parser: 2.5.2</span><br><span class=\"line\">node: 4.4.5</span><br><span class=\"line\">v8: 4.5.103.35</span><br><span class=\"line\">uv: 1.8.0</span><br><span class=\"line\">zlib: 1.2.8</span><br><span class=\"line\">ares: 1.10.1-DEV</span><br><span class=\"line\">icu: 56.1</span><br><span class=\"line\">modules: 46</span><br><span class=\"line\">openssl: 1.0.2h</span><br></pre></td></tr></table></figure>\n<p>hexo 帮助命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~</span><br><span class=\"line\">$ hexo help</span><br><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  clean     Removed generated files and cache.</span><br><span class=\"line\">  config    Get or set configurations.</span><br><span class=\"line\">  deploy    Deploy your website.</span><br><span class=\"line\">  generate  Generate static files.</span><br><span class=\"line\">  help      Get help on a command.</span><br><span class=\"line\">  init      Create a new Hexo folder.</span><br><span class=\"line\">  list      List the information of the site</span><br><span class=\"line\">  migrate   Migrate your site from other system to Hexo.</span><br><span class=\"line\">  new       Create a new post.</span><br><span class=\"line\">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class=\"line\">  render    Render files with renderer plugins.</span><br><span class=\"line\">  server    Start the server.</span><br><span class=\"line\">  version   Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages in the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n<p>命令行解释：</p>\n<ul>\n<li>help 查看帮助信息</li>\n<li>init 创建一个hexo项目</li>\n<li>migrate 从其他系统向hexo迁移</li>\n<li>version 查看hexo的版本</li>\n<li>–config参数，指定配置文件，代替默认的_config.yml</li>\n<li>–debug参数，调试模式，输出所有日志信息</li>\n<li>–safe参数，安全模式，禁用所有的插件和脚本</li>\n<li>–silent参数，无日志输出模式</li>\n</ul>\n<h3 id=\"安装好后，我们就可以使用Hexo创建项目了。\"><a href=\"#安装好后，我们就可以使用Hexo创建项目了。\" class=\"headerlink\" title=\"安装好后，我们就可以使用Hexo创建项目了。\"></a>安装好后，我们就可以使用Hexo创建项目了。</h3><h5 id=\"新建文件夹Hexo\"><a href=\"#新建文件夹Hexo\" class=\"headerlink\" title=\"新建文件夹Hexo\"></a>新建文件夹Hexo</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~</span><br><span class=\"line\">$ mkdir Hexo</span><br><span class=\"line\">$ cd Hexo</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化进入目录。\"><a href=\"#初始化进入目录。\" class=\"headerlink\" title=\"初始化进入目录。\"></a>初始化进入目录。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo init</span><br><span class=\"line\">INFO  Cloning hexo-starter to D:\\hexo</span><br><span class=\"line\">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo server</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>这时端口4000被打开了，我们能过浏览器打开地址，<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 。<br>你可以按Ctrl+C 停止Server。</p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo new &apos;My&apos;</span><br><span class=\"line\">INFO  Created: ~\\Hexo\\source\\_posts\\My.md</span><br></pre></td></tr></table></figure>\n<p>刷新<a href=\"http://localhost:4000/，可以发现已生成了一篇新文章\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，可以发现已生成了一篇新文章</a> “My”。</p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><h5 id=\"执行hexo-generate下面的命令，将markdown文件生成静态网页。\"><a href=\"#执行hexo-generate下面的命令，将markdown文件生成静态网页。\" class=\"headerlink\" title=\"执行hexo generate下面的命令，将markdown文件生成静态网页。\"></a>执行<code>hexo generate</code>下面的命令，将markdown文件生成静态网页。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>该命令执行完后，会在 C:\\Users\\zhang\\Hexo\\public 目录下生成一系列html，css等文件。</p>\n<p>到此已经搭建一个个人博客，但是网站都是给别人看的，因此需要发布，我们可以借用Github来部署我们的网站。</p>\n<h2 id=\"2-部署到Github\"><a href=\"#2-部署到Github\" class=\"headerlink\" title=\"2.部署到Github\"></a>2.部署到Github</h2><h5 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h5><p>部署到Github前需要配置_config.yml文件，首先找到下面的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br></pre></td></tr></table></figure>\n<p>然后将它们修改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/muxiaobai/muxiaobai.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"执行hexo-deploy发布网站\"><a href=\"#执行hexo-deploy发布网站\" class=\"headerlink\" title=\"执行hexo deploy发布网站\"></a>执行<code>hexo deploy</code>发布网站</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhang@admin MINGW64 ~/Hexo</span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>NOTE1:</p>\n<p>Repository：<br>SSH形式的url（<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:muxiaobai/muxiaobai.github.io.git ），<br>在SSH下，上传错误，于是就用了HTTPS形式</p>\n<p>HTTPS形式的url（<a href=\"https://github.com/muxiaobai/muxiaobai.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/muxiaobai/muxiaobai.github.io.git</a> ），<br>会让你输入用户名,密码.</p>\n<p>NOTE2：</p>\n<p>如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>当部署完成后，在浏览器中打开<a href=\"https://muxiaobai.github.io/（https://muxiaobai.github.io/）\">https://muxiaobai.github.io/（https://muxiaobai.github.io/）</a> ，正常显示网页，表明部署成功。</p>\n<h3 id=\"总结：部署步骤\"><a href=\"#总结：部署步骤\" class=\"headerlink\" title=\"总结：部署步骤\"></a>总结：部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>\n<p>hexo clean</p>\n<p>hexo generate</p>\n<p>hexo deploy</p>"},{"title":"Javamelody 工具","date":"2017-08-02T01:05:00.000Z","description":"　JavaMelody用于对Java应用或者应用服务器的QA以及开发环境的监控。 ","_content":"\n## 只为监控而生\n\n它并不是一个模拟请求类似JMeter的压力测试工具，而是一个衡量并且计算在应用上的操作信息的工具，\n也就是说，`它只负责对行为进行监控，而不负责触发操作`。\n\n## 版本\n\nJava version required for execution: 1.6 or later (JDK or JRE or JRockit from Oracle or J9 from IBM)\nServer version required for execution: servlet api 2.4 at least (or JavaEE 1.4), like Tomcat 5.5 or +, GlassFish v2+, JBoss 4+, Jetty 6+, WebLogic 9+\nRequired dependency: jrobin 1.5.9+\n\n##两种方式 ：项目监控所有的其他正在运行的  和jar直接放在项目中配置\n\njavamelody.war   javamelody.jar 和 jrobin-1.5.9.jar\n\n如果是servlet 3.0好像不用web.xml配置 但是应用服务器版本tomcat8+  javamelody.jar 和 jrobin-1.5.9.jar\n但是你的servletAPI是3.0的，应用服务器tomcat7 glassfish v3 jboss6等等，那么就需要配置xml了。\n在应用war包的web.xml中添加如下的filter\n[javamelody用户指南](https://github.com/javamelody/javamelody/wiki/UserGuide)\n\n```\n<filter>\n    <filter-name>monitoring</filter-name>\n    <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>\n</filter>\n<filter-mapping>\n    <filter-name>monitoring</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n<listener>\n    <listener-class>net.bull.javamelody.SessionListener</listener-class>\n</listener>\n\n```\n\n现在就可以启动应用服务器打开网址查看监控效果了。网址：`http://<host>/<context>/monitoring`\n<host>是web应用服务器的部署IP，通常是localhost:8080 或者127.0.0.1:8080具体看你自己的应用服务器\n<context>是你的web应用的名字。\n\n\n![效果](Javamelody-工具/20170802.PNG)\n\n\n[javamylody github ](https://github.com/javamelody/javamelody)","source":"_posts/Javamelody-工具.md","raw":"---\ntitle: Javamelody 工具\ndate: 2017-08-02 09:05:00\ntags: 工具\ncategories: [java]\ndescription: \"　JavaMelody用于对Java应用或者应用服务器的QA以及开发环境的监控。 \"\n---\n\n## 只为监控而生\n\n它并不是一个模拟请求类似JMeter的压力测试工具，而是一个衡量并且计算在应用上的操作信息的工具，\n也就是说，`它只负责对行为进行监控，而不负责触发操作`。\n\n## 版本\n\nJava version required for execution: 1.6 or later (JDK or JRE or JRockit from Oracle or J9 from IBM)\nServer version required for execution: servlet api 2.4 at least (or JavaEE 1.4), like Tomcat 5.5 or +, GlassFish v2+, JBoss 4+, Jetty 6+, WebLogic 9+\nRequired dependency: jrobin 1.5.9+\n\n##两种方式 ：项目监控所有的其他正在运行的  和jar直接放在项目中配置\n\njavamelody.war   javamelody.jar 和 jrobin-1.5.9.jar\n\n如果是servlet 3.0好像不用web.xml配置 但是应用服务器版本tomcat8+  javamelody.jar 和 jrobin-1.5.9.jar\n但是你的servletAPI是3.0的，应用服务器tomcat7 glassfish v3 jboss6等等，那么就需要配置xml了。\n在应用war包的web.xml中添加如下的filter\n[javamelody用户指南](https://github.com/javamelody/javamelody/wiki/UserGuide)\n\n```\n<filter>\n    <filter-name>monitoring</filter-name>\n    <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>\n</filter>\n<filter-mapping>\n    <filter-name>monitoring</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n<listener>\n    <listener-class>net.bull.javamelody.SessionListener</listener-class>\n</listener>\n\n```\n\n现在就可以启动应用服务器打开网址查看监控效果了。网址：`http://<host>/<context>/monitoring`\n<host>是web应用服务器的部署IP，通常是localhost:8080 或者127.0.0.1:8080具体看你自己的应用服务器\n<context>是你的web应用的名字。\n\n\n![效果](Javamelody-工具/20170802.PNG)\n\n\n[javamylody github ](https://github.com/javamelody/javamelody)","slug":"Javamelody-工具","published":1,"updated":"2017-12-23T06:47:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz76m0008ugv5q3ebi6kd","content":"<h2 id=\"只为监控而生\"><a href=\"#只为监控而生\" class=\"headerlink\" title=\"只为监控而生\"></a>只为监控而生</h2><p>它并不是一个模拟请求类似JMeter的压力测试工具，而是一个衡量并且计算在应用上的操作信息的工具，<br>也就是说，<code>它只负责对行为进行监控，而不负责触发操作</code>。</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>Java version required for execution: 1.6 or later (JDK or JRE or JRockit from Oracle or J9 from IBM)<br>Server version required for execution: servlet api 2.4 at least (or JavaEE 1.4), like Tomcat 5.5 or +, GlassFish v2+, JBoss 4+, Jetty 6+, WebLogic 9+<br>Required dependency: jrobin 1.5.9+</p>\n<p>##两种方式 ：项目监控所有的其他正在运行的  和jar直接放在项目中配置</p>\n<p>javamelody.war   javamelody.jar 和 jrobin-1.5.9.jar</p>\n<p>如果是servlet 3.0好像不用web.xml配置 但是应用服务器版本tomcat8+  javamelody.jar 和 jrobin-1.5.9.jar<br>但是你的servletAPI是3.0的，应用服务器tomcat7 glassfish v3 jboss6等等，那么就需要配置xml了。<br>在应用war包的web.xml中添加如下的filter<br><a href=\"https://github.com/javamelody/javamelody/wiki/UserGuide\" target=\"_blank\" rel=\"noopener\">javamelody用户指南</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;monitoring&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;filter-class&gt;net.bull.javamelody.MonitoringFilter&lt;/filter-class&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;monitoring&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">    &lt;listener-class&gt;net.bull.javamelody.SessionListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n<p>现在就可以启动应用服务器打开网址查看监控效果了。网址：<code>http://&lt;host&gt;/&lt;context&gt;/monitoring</code></p>\n<p><host>是web应用服务器的部署IP，通常是localhost:8080 或者127.0.0.1:8080具体看你自己的应用服务器</host></p>\n<p><context>是你的web应用的名字。</context></p>\n<p><img src=\"/.io//20170802.PNG\" alt=\"效果\"></p>\n<p><a href=\"https://github.com/javamelody/javamelody\" target=\"_blank\" rel=\"noopener\">javamylody github </a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"只为监控而生\"><a href=\"#只为监控而生\" class=\"headerlink\" title=\"只为监控而生\"></a>只为监控而生</h2><p>它并不是一个模拟请求类似JMeter的压力测试工具，而是一个衡量并且计算在应用上的操作信息的工具，<br>也就是说，<code>它只负责对行为进行监控，而不负责触发操作</code>。</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>Java version required for execution: 1.6 or later (JDK or JRE or JRockit from Oracle or J9 from IBM)<br>Server version required for execution: servlet api 2.4 at least (or JavaEE 1.4), like Tomcat 5.5 or +, GlassFish v2+, JBoss 4+, Jetty 6+, WebLogic 9+<br>Required dependency: jrobin 1.5.9+</p>\n<p>##两种方式 ：项目监控所有的其他正在运行的  和jar直接放在项目中配置</p>\n<p>javamelody.war   javamelody.jar 和 jrobin-1.5.9.jar</p>\n<p>如果是servlet 3.0好像不用web.xml配置 但是应用服务器版本tomcat8+  javamelody.jar 和 jrobin-1.5.9.jar<br>但是你的servletAPI是3.0的，应用服务器tomcat7 glassfish v3 jboss6等等，那么就需要配置xml了。<br>在应用war包的web.xml中添加如下的filter<br><a href=\"https://github.com/javamelody/javamelody/wiki/UserGuide\" target=\"_blank\" rel=\"noopener\">javamelody用户指南</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;monitoring&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;filter-class&gt;net.bull.javamelody.MonitoringFilter&lt;/filter-class&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;monitoring&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">    &lt;listener-class&gt;net.bull.javamelody.SessionListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n<p>现在就可以启动应用服务器打开网址查看监控效果了。网址：<code>http://&lt;host&gt;/&lt;context&gt;/monitoring</code></p>\n<p><host>是web应用服务器的部署IP，通常是localhost:8080 或者127.0.0.1:8080具体看你自己的应用服务器</host></p>\n<p><context>是你的web应用的名字。</context></p>\n<p><img src=\"/.io//20170802.PNG\" alt=\"效果\"></p>\n<p><a href=\"https://github.com/javamelody/javamelody\" target=\"_blank\" rel=\"noopener\">javamylody github </a></p>\n"},{"title":"Linux 下安装SVN服务器","date":"2016-06-19T13:32:20.000Z","description":"SVN安装和错误","_content":"\n\n### 1、安装步骤如下：\n\n```\nyum install subversion\n\n```\n\n<!--more-->\n### 2、输入rpm -ql subversion查看安装位置，如下图：\n\n我们知道svn在bin目录下生成了几个二进制文件。\n![文件目录](Linux-下安装SVN服务器/201606192134.jpg)\n输入 svn --help可以查看svn的使用方法，如下图。\n![svn方法](Linux-下安装SVN服务器/201606192138.jpg)\n### 3、创建svn版本库目录\n\n```\nmkdir -p /var/svn/svnrepos\n```\n\n### 4、创建版本库\n```\nsvnadmin create /var/svn/svnrepos\n```\n执行了这个命令之后会在/var/svn/svnrepos目录下生成如下这些文件\n![版本目录](Linux-下安装SVN服务器/201606192139.jpg)\n### 5、进入conf目录（该svn版本库配置文件）\n\nauthz文件是权限控制文件\npasswd是帐号密码文件\nsvnserve.conf SVN服务配置文件\n\n### 6、设置帐号密码\n\n```\nvi passwd\n```\n\n在[users]块中添加用户和密码，格式：帐号=密码，如zhang=zhang\n\n### 7、设置权限\n```\nvi authz\n```\n在末尾添加如下代码：\n```\n[/]\nzhang=rw\nw=r\n```\n意思是版本库的根目录zhang对其有读写权限，w只有读权限。\n\n### 8、修改svnserve.conf文件\n```\nvi svnserve.conf（注意前面没有空格）\n```\n打开下面的几个注释：\n```\nanon-access = read #匿名用户可读\nauth-access = write #授权用户可写\npassword-db = passwd #使用哪个文件作为账号文件\nauthz-db = authz #使用哪个文件作为权限文件\nrealm = /var/svn/svnrepos # 认证空间名，版本库所在目录\n```\n\n### 9、启动svn版本库\n\n```\nsvnserve -d -r /var/svn/svnrepos\n```\n\n### 10、在windows上测试\n\n新建一个测试文件夹，在该文件夹下右键选择 SVN checkout如下图(要事先安装TortoiseSVN)：\n填写SVN的地址，如下图：\n输入密码，如下图：\n![右键单击](Linux-下安装SVN服务器/201606192140.jpg)\n\n![填写SVN地址](Linux-下安装SVN服务器/201606192141.jpg)\n# svn 日志文件显示时间为1970-01-01 No data ----------最终解决办法\n\n此问题主要出现在svnserve文件中的anon-access访问权限的设置问题上。\n\n##### 如果anon-access = none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，\n#####  所以在查看日志时，出现时间日期显示为1970-01-01， 日志信息显示no data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为 anon-access = read，只读模式。这样的话，日志文件即可显示正常。\n\n## 但是，实践证明`anon-access = none`才是正确的。\n","source":"_posts/Linux-下安装SVN服务器.md","raw":"---\ntitle: Linux 下安装SVN服务器\ndate: 2016-06-19 21:32:20\ntags: [svn,Linux]\ncategories: [Linux,服务器]\ndescription:  \"SVN安装和错误\"\n---\n\n\n### 1、安装步骤如下：\n\n```\nyum install subversion\n\n```\n\n<!--more-->\n### 2、输入rpm -ql subversion查看安装位置，如下图：\n\n我们知道svn在bin目录下生成了几个二进制文件。\n![文件目录](Linux-下安装SVN服务器/201606192134.jpg)\n输入 svn --help可以查看svn的使用方法，如下图。\n![svn方法](Linux-下安装SVN服务器/201606192138.jpg)\n### 3、创建svn版本库目录\n\n```\nmkdir -p /var/svn/svnrepos\n```\n\n### 4、创建版本库\n```\nsvnadmin create /var/svn/svnrepos\n```\n执行了这个命令之后会在/var/svn/svnrepos目录下生成如下这些文件\n![版本目录](Linux-下安装SVN服务器/201606192139.jpg)\n### 5、进入conf目录（该svn版本库配置文件）\n\nauthz文件是权限控制文件\npasswd是帐号密码文件\nsvnserve.conf SVN服务配置文件\n\n### 6、设置帐号密码\n\n```\nvi passwd\n```\n\n在[users]块中添加用户和密码，格式：帐号=密码，如zhang=zhang\n\n### 7、设置权限\n```\nvi authz\n```\n在末尾添加如下代码：\n```\n[/]\nzhang=rw\nw=r\n```\n意思是版本库的根目录zhang对其有读写权限，w只有读权限。\n\n### 8、修改svnserve.conf文件\n```\nvi svnserve.conf（注意前面没有空格）\n```\n打开下面的几个注释：\n```\nanon-access = read #匿名用户可读\nauth-access = write #授权用户可写\npassword-db = passwd #使用哪个文件作为账号文件\nauthz-db = authz #使用哪个文件作为权限文件\nrealm = /var/svn/svnrepos # 认证空间名，版本库所在目录\n```\n\n### 9、启动svn版本库\n\n```\nsvnserve -d -r /var/svn/svnrepos\n```\n\n### 10、在windows上测试\n\n新建一个测试文件夹，在该文件夹下右键选择 SVN checkout如下图(要事先安装TortoiseSVN)：\n填写SVN的地址，如下图：\n输入密码，如下图：\n![右键单击](Linux-下安装SVN服务器/201606192140.jpg)\n\n![填写SVN地址](Linux-下安装SVN服务器/201606192141.jpg)\n# svn 日志文件显示时间为1970-01-01 No data ----------最终解决办法\n\n此问题主要出现在svnserve文件中的anon-access访问权限的设置问题上。\n\n##### 如果anon-access = none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，\n#####  所以在查看日志时，出现时间日期显示为1970-01-01， 日志信息显示no data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为 anon-access = read，只读模式。这样的话，日志文件即可显示正常。\n\n## 但是，实践证明`anon-access = none`才是正确的。\n","slug":"Linux-下安装SVN服务器","published":1,"updated":"2016-08-31T12:24:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz76o000cugv5qa9fda8o","content":"<h3 id=\"1、安装步骤如下：\"><a href=\"#1、安装步骤如下：\" class=\"headerlink\" title=\"1、安装步骤如下：\"></a>1、安装步骤如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install subversion</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"2、输入rpm-ql-subversion查看安装位置，如下图：\"><a href=\"#2、输入rpm-ql-subversion查看安装位置，如下图：\" class=\"headerlink\" title=\"2、输入rpm -ql subversion查看安装位置，如下图：\"></a>2、输入rpm -ql subversion查看安装位置，如下图：</h3><p>我们知道svn在bin目录下生成了几个二进制文件。<br><img src=\"/.io//201606192134.jpg\" alt=\"文件目录\"><br>输入 svn –help可以查看svn的使用方法，如下图。<br><img src=\"/.io//201606192138.jpg\" alt=\"svn方法\"></p>\n<h3 id=\"3、创建svn版本库目录\"><a href=\"#3、创建svn版本库目录\" class=\"headerlink\" title=\"3、创建svn版本库目录\"></a>3、创建svn版本库目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/svn/svnrepos</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、创建版本库\"><a href=\"#4、创建版本库\" class=\"headerlink\" title=\"4、创建版本库\"></a>4、创建版本库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnadmin create /var/svn/svnrepos</span><br></pre></td></tr></table></figure>\n<p>执行了这个命令之后会在/var/svn/svnrepos目录下生成如下这些文件<br><img src=\"/.io//201606192139.jpg\" alt=\"版本目录\"></p>\n<h3 id=\"5、进入conf目录（该svn版本库配置文件）\"><a href=\"#5、进入conf目录（该svn版本库配置文件）\" class=\"headerlink\" title=\"5、进入conf目录（该svn版本库配置文件）\"></a>5、进入conf目录（该svn版本库配置文件）</h3><p>authz文件是权限控制文件<br>passwd是帐号密码文件<br>svnserve.conf SVN服务配置文件</p>\n<h3 id=\"6、设置帐号密码\"><a href=\"#6、设置帐号密码\" class=\"headerlink\" title=\"6、设置帐号密码\"></a>6、设置帐号密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi passwd</span><br></pre></td></tr></table></figure>\n<p>在[users]块中添加用户和密码，格式：帐号=密码，如zhang=zhang</p>\n<h3 id=\"7、设置权限\"><a href=\"#7、设置权限\" class=\"headerlink\" title=\"7、设置权限\"></a>7、设置权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi authz</span><br></pre></td></tr></table></figure>\n<p>在末尾添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[/]</span><br><span class=\"line\">zhang=rw</span><br><span class=\"line\">w=r</span><br></pre></td></tr></table></figure></p>\n<p>意思是版本库的根目录zhang对其有读写权限，w只有读权限。</p>\n<h3 id=\"8、修改svnserve-conf文件\"><a href=\"#8、修改svnserve-conf文件\" class=\"headerlink\" title=\"8、修改svnserve.conf文件\"></a>8、修改svnserve.conf文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi svnserve.conf（注意前面没有空格）</span><br></pre></td></tr></table></figure>\n<p>打开下面的几个注释：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = read #匿名用户可读</span><br><span class=\"line\">auth-access = write #授权用户可写</span><br><span class=\"line\">password-db = passwd #使用哪个文件作为账号文件</span><br><span class=\"line\">authz-db = authz #使用哪个文件作为权限文件</span><br><span class=\"line\">realm = /var/svn/svnrepos # 认证空间名，版本库所在目录</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9、启动svn版本库\"><a href=\"#9、启动svn版本库\" class=\"headerlink\" title=\"9、启动svn版本库\"></a>9、启动svn版本库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r /var/svn/svnrepos</span><br></pre></td></tr></table></figure>\n<h3 id=\"10、在windows上测试\"><a href=\"#10、在windows上测试\" class=\"headerlink\" title=\"10、在windows上测试\"></a>10、在windows上测试</h3><p>新建一个测试文件夹，在该文件夹下右键选择 SVN checkout如下图(要事先安装TortoiseSVN)：<br>填写SVN的地址，如下图：<br>输入密码，如下图：<br><img src=\"/.io//201606192140.jpg\" alt=\"右键单击\"></p>\n<p><img src=\"/.io//201606192141.jpg\" alt=\"填写SVN地址\"></p>\n<h1 id=\"svn-日志文件显示时间为1970-01-01-No-data-———-最终解决办法\"><a href=\"#svn-日志文件显示时间为1970-01-01-No-data-———-最终解决办法\" class=\"headerlink\" title=\"svn 日志文件显示时间为1970-01-01 No data ———-最终解决办法\"></a>svn 日志文件显示时间为1970-01-01 No data ———-最终解决办法</h1><p>此问题主要出现在svnserve文件中的anon-access访问权限的设置问题上。</p>\n<h5 id=\"如果anon-access-none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，\"><a href=\"#如果anon-access-none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，\" class=\"headerlink\" title=\"如果anon-access = none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，\"></a>如果anon-access = none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，</h5><h5 id=\"所以在查看日志时，出现时间日期显示为1970-01-01，-日志信息显示no-data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为-anon-access-read，只读模式。这样的话，日志文件即可显示正常。\"><a href=\"#所以在查看日志时，出现时间日期显示为1970-01-01，-日志信息显示no-data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为-anon-access-read，只读模式。这样的话，日志文件即可显示正常。\" class=\"headerlink\" title=\"所以在查看日志时，出现时间日期显示为1970-01-01， 日志信息显示no data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为 anon-access = read，只读模式。这样的话，日志文件即可显示正常。\"></a>所以在查看日志时，出现时间日期显示为1970-01-01， 日志信息显示no data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为 anon-access = read，只读模式。这样的话，日志文件即可显示正常。</h5><h2 id=\"但是，实践证明anon-access-none才是正确的。\"><a href=\"#但是，实践证明anon-access-none才是正确的。\" class=\"headerlink\" title=\"但是，实践证明anon-access = none才是正确的。\"></a>但是，实践证明<code>anon-access = none</code>才是正确的。</h2>","site":{"data":{}},"excerpt":"<h3 id=\"1、安装步骤如下：\"><a href=\"#1、安装步骤如下：\" class=\"headerlink\" title=\"1、安装步骤如下：\"></a>1、安装步骤如下：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install subversion</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2、输入rpm-ql-subversion查看安装位置，如下图：\"><a href=\"#2、输入rpm-ql-subversion查看安装位置，如下图：\" class=\"headerlink\" title=\"2、输入rpm -ql subversion查看安装位置，如下图：\"></a>2、输入rpm -ql subversion查看安装位置，如下图：</h3><p>我们知道svn在bin目录下生成了几个二进制文件。<br><img src=\"/.io//201606192134.jpg\" alt=\"文件目录\"><br>输入 svn –help可以查看svn的使用方法，如下图。<br><img src=\"/.io//201606192138.jpg\" alt=\"svn方法\"></p>\n<h3 id=\"3、创建svn版本库目录\"><a href=\"#3、创建svn版本库目录\" class=\"headerlink\" title=\"3、创建svn版本库目录\"></a>3、创建svn版本库目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/svn/svnrepos</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、创建版本库\"><a href=\"#4、创建版本库\" class=\"headerlink\" title=\"4、创建版本库\"></a>4、创建版本库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnadmin create /var/svn/svnrepos</span><br></pre></td></tr></table></figure>\n<p>执行了这个命令之后会在/var/svn/svnrepos目录下生成如下这些文件<br><img src=\"/.io//201606192139.jpg\" alt=\"版本目录\"></p>\n<h3 id=\"5、进入conf目录（该svn版本库配置文件）\"><a href=\"#5、进入conf目录（该svn版本库配置文件）\" class=\"headerlink\" title=\"5、进入conf目录（该svn版本库配置文件）\"></a>5、进入conf目录（该svn版本库配置文件）</h3><p>authz文件是权限控制文件<br>passwd是帐号密码文件<br>svnserve.conf SVN服务配置文件</p>\n<h3 id=\"6、设置帐号密码\"><a href=\"#6、设置帐号密码\" class=\"headerlink\" title=\"6、设置帐号密码\"></a>6、设置帐号密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi passwd</span><br></pre></td></tr></table></figure>\n<p>在[users]块中添加用户和密码，格式：帐号=密码，如zhang=zhang</p>\n<h3 id=\"7、设置权限\"><a href=\"#7、设置权限\" class=\"headerlink\" title=\"7、设置权限\"></a>7、设置权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi authz</span><br></pre></td></tr></table></figure>\n<p>在末尾添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[/]</span><br><span class=\"line\">zhang=rw</span><br><span class=\"line\">w=r</span><br></pre></td></tr></table></figure></p>\n<p>意思是版本库的根目录zhang对其有读写权限，w只有读权限。</p>\n<h3 id=\"8、修改svnserve-conf文件\"><a href=\"#8、修改svnserve-conf文件\" class=\"headerlink\" title=\"8、修改svnserve.conf文件\"></a>8、修改svnserve.conf文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi svnserve.conf（注意前面没有空格）</span><br></pre></td></tr></table></figure>\n<p>打开下面的几个注释：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anon-access = read #匿名用户可读</span><br><span class=\"line\">auth-access = write #授权用户可写</span><br><span class=\"line\">password-db = passwd #使用哪个文件作为账号文件</span><br><span class=\"line\">authz-db = authz #使用哪个文件作为权限文件</span><br><span class=\"line\">realm = /var/svn/svnrepos # 认证空间名，版本库所在目录</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9、启动svn版本库\"><a href=\"#9、启动svn版本库\" class=\"headerlink\" title=\"9、启动svn版本库\"></a>9、启动svn版本库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r /var/svn/svnrepos</span><br></pre></td></tr></table></figure>\n<h3 id=\"10、在windows上测试\"><a href=\"#10、在windows上测试\" class=\"headerlink\" title=\"10、在windows上测试\"></a>10、在windows上测试</h3><p>新建一个测试文件夹，在该文件夹下右键选择 SVN checkout如下图(要事先安装TortoiseSVN)：<br>填写SVN的地址，如下图：<br>输入密码，如下图：<br><img src=\"/.io//201606192140.jpg\" alt=\"右键单击\"></p>\n<p><img src=\"/.io//201606192141.jpg\" alt=\"填写SVN地址\"></p>\n<h1 id=\"svn-日志文件显示时间为1970-01-01-No-data-———-最终解决办法\"><a href=\"#svn-日志文件显示时间为1970-01-01-No-data-———-最终解决办法\" class=\"headerlink\" title=\"svn 日志文件显示时间为1970-01-01 No data ———-最终解决办法\"></a>svn 日志文件显示时间为1970-01-01 No data ———-最终解决办法</h1><p>此问题主要出现在svnserve文件中的anon-access访问权限的设置问题上。</p>\n<h5 id=\"如果anon-access-none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，\"><a href=\"#如果anon-access-none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，\" class=\"headerlink\" title=\"如果anon-access = none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，\"></a>如果anon-access = none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，</h5><h5 id=\"所以在查看日志时，出现时间日期显示为1970-01-01，-日志信息显示no-data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为-anon-access-read，只读模式。这样的话，日志文件即可显示正常。\"><a href=\"#所以在查看日志时，出现时间日期显示为1970-01-01，-日志信息显示no-data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为-anon-access-read，只读模式。这样的话，日志文件即可显示正常。\" class=\"headerlink\" title=\"所以在查看日志时，出现时间日期显示为1970-01-01， 日志信息显示no data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为 anon-access = read，只读模式。这样的话，日志文件即可显示正常。\"></a>所以在查看日志时，出现时间日期显示为1970-01-01， 日志信息显示no data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为 anon-access = read，只读模式。这样的话，日志文件即可显示正常。</h5><h2 id=\"但是，实践证明anon-access-none才是正确的。\"><a href=\"#但是，实践证明anon-access-none才是正确的。\" class=\"headerlink\" title=\"但是，实践证明anon-access = none才是正确的。\"></a>但是，实践证明<code>anon-access = none</code>才是正确的。</h2>"},{"title":"Linux 下的java安装、变更以及升级问题","date":"2017-07-18T22:40:26.000Z","description":"最近在研究hadoop，又牵扯到了java的linux安装，记录一下，方便日后查询","_content":"\n```\n修改/etc/profile文件 \n如果你的计算机仅仅作为开发使用时推荐使用这种方法，因为所有用户的shell都有权使用这些环境变量，可能会给系统带来安全性问题。 \n·用文本编辑器打开/etc/profile \n·在profile文件末尾加入： \nexport JAVA_HOME=/usr/local/jdk1.8.0_144 \nexport CLASSPATH=.:$JAVA_HOME/lib \nexport PATH=$JAVA_HOME/bin:$PATH \n\n```\n> source /etc/profile\n\n\n原本是有openjdk的但是为了少踩点坑，准备换成HotSpot，于是就遇到了很多问题，总是更换失败。\n\n环境变量/etc/profile  .bashrc .profile\n\n```\n#set oracle jdk environment\nexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_111  ## 这里要注意目录要换成自己解压的jdk 目录\nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH \n```\n#### java -version 版本查看\n#### which java 查看是执行的哪一个\n\n`which java `总是出现的就是一个/usr/bin/java 这里需要的是软链。\n\n将下载下来的java版本安装\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_111/bin/java 300\nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_111/bin/javac 300\n\nsudo update-alternatives --display java 展示\nsudo update-alternatives --config java 配置\nsudo update-alternatives --config javac 配置\nsudo update-java-alternatives -l\n需要选中一个\n\n-----------------------------------------\n\nhadoop配置文件 ，以及安装步骤\n[hadoop配置文件](https://ask.hellobi.com/blog/niupoop/8832)\n\nwindow用cygwin64 总是失败，就转换到linux，一下子就启动成功了。\n![jps](Linux-下的java安装、变更以及升级问题/20170720125445.png)\nCentOS 7.0默认使用的是firewall作为防火墙，这样对于传统的 `service iptables stop` 就没有用了,\n\n```\nsystemctl stop firewalld.service #停止firewall\nsystemctl disable firewalld.service #禁止firewall开机启动\nfirewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n```\n","source":"_posts/Linux-下的java安装、变更以及升级问题.md","raw":"---\ntitle: Linux 下的java安装、变更以及升级问题\ndate: 2017-07-19 06:40:26\ntags: \ncategories: [Linux,java,hadoop]\ndescription: \"最近在研究hadoop，又牵扯到了java的linux安装，记录一下，方便日后查询\"\n---\n\n```\n修改/etc/profile文件 \n如果你的计算机仅仅作为开发使用时推荐使用这种方法，因为所有用户的shell都有权使用这些环境变量，可能会给系统带来安全性问题。 \n·用文本编辑器打开/etc/profile \n·在profile文件末尾加入： \nexport JAVA_HOME=/usr/local/jdk1.8.0_144 \nexport CLASSPATH=.:$JAVA_HOME/lib \nexport PATH=$JAVA_HOME/bin:$PATH \n\n```\n> source /etc/profile\n\n\n原本是有openjdk的但是为了少踩点坑，准备换成HotSpot，于是就遇到了很多问题，总是更换失败。\n\n环境变量/etc/profile  .bashrc .profile\n\n```\n#set oracle jdk environment\nexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_111  ## 这里要注意目录要换成自己解压的jdk 目录\nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH \n```\n#### java -version 版本查看\n#### which java 查看是执行的哪一个\n\n`which java `总是出现的就是一个/usr/bin/java 这里需要的是软链。\n\n将下载下来的java版本安装\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_111/bin/java 300\nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_111/bin/javac 300\n\nsudo update-alternatives --display java 展示\nsudo update-alternatives --config java 配置\nsudo update-alternatives --config javac 配置\nsudo update-java-alternatives -l\n需要选中一个\n\n-----------------------------------------\n\nhadoop配置文件 ，以及安装步骤\n[hadoop配置文件](https://ask.hellobi.com/blog/niupoop/8832)\n\nwindow用cygwin64 总是失败，就转换到linux，一下子就启动成功了。\n![jps](Linux-下的java安装、变更以及升级问题/20170720125445.png)\nCentOS 7.0默认使用的是firewall作为防火墙，这样对于传统的 `service iptables stop` 就没有用了,\n\n```\nsystemctl stop firewalld.service #停止firewall\nsystemctl disable firewalld.service #禁止firewall开机启动\nfirewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）\n```\n","slug":"Linux-下的java安装、变更以及升级问题","published":1,"updated":"2019-01-22T08:13:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz76p000dugv5wsojol5c","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改/etc/profile文件 </span><br><span class=\"line\">如果你的计算机仅仅作为开发使用时推荐使用这种方法，因为所有用户的shell都有权使用这些环境变量，可能会给系统带来安全性问题。 </span><br><span class=\"line\">·用文本编辑器打开/etc/profile </span><br><span class=\"line\">·在profile文件末尾加入： </span><br><span class=\"line\">export JAVA_HOME=/usr/local/jdk1.8.0_144 </span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib </span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>source /etc/profile</p>\n</blockquote>\n<p>原本是有openjdk的但是为了少踩点坑，准备换成HotSpot，于是就遇到了很多问题，总是更换失败。</p>\n<p>环境变量/etc/profile  .bashrc .profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#set oracle jdk environment</span><br><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_111  ## 这里要注意目录要换成自己解压的jdk 目录</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>\n<h4 id=\"java-version-版本查看\"><a href=\"#java-version-版本查看\" class=\"headerlink\" title=\"java -version 版本查看\"></a>java -version 版本查看</h4><h4 id=\"which-java-查看是执行的哪一个\"><a href=\"#which-java-查看是执行的哪一个\" class=\"headerlink\" title=\"which java 查看是执行的哪一个\"></a>which java 查看是执行的哪一个</h4><p><code>which java</code>总是出现的就是一个/usr/bin/java 这里需要的是软链。</p>\n<p>将下载下来的java版本安装<br>sudo update-alternatives –install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_111/bin/java 300<br>sudo update-alternatives –install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_111/bin/javac 300</p>\n<p>sudo update-alternatives –display java 展示<br>sudo update-alternatives –config java 配置<br>sudo update-alternatives –config javac 配置<br>sudo update-java-alternatives -l<br>需要选中一个</p>\n<hr>\n<p>hadoop配置文件 ，以及安装步骤<br><a href=\"https://ask.hellobi.com/blog/niupoop/8832\" target=\"_blank\" rel=\"noopener\">hadoop配置文件</a></p>\n<p>window用cygwin64 总是失败，就转换到linux，一下子就启动成功了。<br><img src=\"/.io//20170720125445.png\" alt=\"jps\"><br>CentOS 7.0默认使用的是firewall作为防火墙，这样对于传统的 <code>service iptables stop</code> 就没有用了,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service #停止firewall</span><br><span class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class=\"line\">firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改/etc/profile文件 </span><br><span class=\"line\">如果你的计算机仅仅作为开发使用时推荐使用这种方法，因为所有用户的shell都有权使用这些环境变量，可能会给系统带来安全性问题。 </span><br><span class=\"line\">·用文本编辑器打开/etc/profile </span><br><span class=\"line\">·在profile文件末尾加入： </span><br><span class=\"line\">export JAVA_HOME=/usr/local/jdk1.8.0_144 </span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib </span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>source /etc/profile</p>\n</blockquote>\n<p>原本是有openjdk的但是为了少踩点坑，准备换成HotSpot，于是就遇到了很多问题，总是更换失败。</p>\n<p>环境变量/etc/profile  .bashrc .profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#set oracle jdk environment</span><br><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_111  ## 这里要注意目录要换成自己解压的jdk 目录</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>\n<h4 id=\"java-version-版本查看\"><a href=\"#java-version-版本查看\" class=\"headerlink\" title=\"java -version 版本查看\"></a>java -version 版本查看</h4><h4 id=\"which-java-查看是执行的哪一个\"><a href=\"#which-java-查看是执行的哪一个\" class=\"headerlink\" title=\"which java 查看是执行的哪一个\"></a>which java 查看是执行的哪一个</h4><p><code>which java</code>总是出现的就是一个/usr/bin/java 这里需要的是软链。</p>\n<p>将下载下来的java版本安装<br>sudo update-alternatives –install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_111/bin/java 300<br>sudo update-alternatives –install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_111/bin/javac 300</p>\n<p>sudo update-alternatives –display java 展示<br>sudo update-alternatives –config java 配置<br>sudo update-alternatives –config javac 配置<br>sudo update-java-alternatives -l<br>需要选中一个</p>\n<hr>\n<p>hadoop配置文件 ，以及安装步骤<br><a href=\"https://ask.hellobi.com/blog/niupoop/8832\" target=\"_blank\" rel=\"noopener\">hadoop配置文件</a></p>\n<p>window用cygwin64 总是失败，就转换到linux，一下子就启动成功了。<br><img src=\"/.io//20170720125445.png\" alt=\"jps\"><br>CentOS 7.0默认使用的是firewall作为防火墙，这样对于传统的 <code>service iptables stop</code> 就没有用了,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service #停止firewall</span><br><span class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class=\"line\">firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux 基础Shell脚本","date":"2016-07-09T11:38:00.000Z","description":"bash变量、系统变量、参数信息、运算符","_content":"\n# `#!/bin/bash`\n\n## Bash变量\n\n#### 用户自定义变量\n\n`变量名=变量值` 默认变量值为字符串\n\n`echo $变量名`\n\n变量叠加  x=\"$x\"other | x=${x}other\n\n`set`：查询所有变量\n\n`set -u` 然后调用未声明的变量会报错\n\n`unset 变量名`：删除变量\n\n`exoprt` 变成系统变量(实质上是`declare`)\n\n`env`:只能看到环境变量\n<!--more-->\n#### 常见系统变量\n\nHOSTNAME SHELL SSH USER  HOME MAIL TERM\n\nPATH\n\n`locale` 支持的语系 LANG系统主语系 LC_ALL\n\n下次开机的默认语系:/etc/sysconfig/i18n\n\nPS1 命令提示符变量\n\n#### 位置参数变量\n$n \n\n$0 命令本身\n\n$1-9 ${10} 参数\n\n$\\*  所有传入的参数是一个整体\n\n$@   所有传入的参数是独立的，有几个参数，循环几次\n\n$\\#  返回传入参数的个数\n\n------\n\n`read` 接受键盘输入(交互)\n\n##### -p 输入\n\n##### -t 等待时间\n\n##### -s 隐藏\n\n##### -n 指定输入的字节数\n\n--------\n\n#### 预定义变量\n\n$? 返回上一条命令的执行状态\n\n正确执行 返回0 | 执行错误 返回2 | 命令找不到 返回127\n\n$$ 返回当前进程的PID号\n\n$! 返回后台运行的最后一个进程的PID号\n\n## Shell运算符\n >弱类型，类似javascript\n\n`declare` [+/-] [i/a/]\n\n![变量参数](Linux-基础Shell脚本/201607101216.PNG)\n\n`expr` `let`\n\n##### $((运算式)) $[运算式]\n\n![变量参数](Linux-基础Shell脚本/201607101227.PNG)\n\n##### 变量测试\n\n![变量参数](Linux-基础Shell脚本/201607101231.PNG)\n\n## 环境变量配置文件\n\n重新加载配置文件: `source 配置文件`  `. 配置文件`\n\n正常登陆过程，主要的文件:\n\n/etc/profile\n\n/etc/profile.d/*.sh\n\n~/.bash_profile\n\n~/.bashrc\n\n/etc/bashrc\n\n加载文件顺序>>[login而不是开机]\n\n![变量参数](Linux-基础Shell脚本/201607101243.PNG)\n\n注销\n\n~/.bash_logout\n\n历史命令\n\n~/.bash_history\n\n## 正则表达式\n\n## 流程控制语句\n","source":"_posts/Linux-基础Shell脚本.md","raw":"---\ntitle: Linux 基础Shell脚本\ndate: 2016-07-09 19:38:00\ntags: Shell\ncategories: Linux\ndescription: \"bash变量、系统变量、参数信息、运算符\"\n---\n\n# `#!/bin/bash`\n\n## Bash变量\n\n#### 用户自定义变量\n\n`变量名=变量值` 默认变量值为字符串\n\n`echo $变量名`\n\n变量叠加  x=\"$x\"other | x=${x}other\n\n`set`：查询所有变量\n\n`set -u` 然后调用未声明的变量会报错\n\n`unset 变量名`：删除变量\n\n`exoprt` 变成系统变量(实质上是`declare`)\n\n`env`:只能看到环境变量\n<!--more-->\n#### 常见系统变量\n\nHOSTNAME SHELL SSH USER  HOME MAIL TERM\n\nPATH\n\n`locale` 支持的语系 LANG系统主语系 LC_ALL\n\n下次开机的默认语系:/etc/sysconfig/i18n\n\nPS1 命令提示符变量\n\n#### 位置参数变量\n$n \n\n$0 命令本身\n\n$1-9 ${10} 参数\n\n$\\*  所有传入的参数是一个整体\n\n$@   所有传入的参数是独立的，有几个参数，循环几次\n\n$\\#  返回传入参数的个数\n\n------\n\n`read` 接受键盘输入(交互)\n\n##### -p 输入\n\n##### -t 等待时间\n\n##### -s 隐藏\n\n##### -n 指定输入的字节数\n\n--------\n\n#### 预定义变量\n\n$? 返回上一条命令的执行状态\n\n正确执行 返回0 | 执行错误 返回2 | 命令找不到 返回127\n\n$$ 返回当前进程的PID号\n\n$! 返回后台运行的最后一个进程的PID号\n\n## Shell运算符\n >弱类型，类似javascript\n\n`declare` [+/-] [i/a/]\n\n![变量参数](Linux-基础Shell脚本/201607101216.PNG)\n\n`expr` `let`\n\n##### $((运算式)) $[运算式]\n\n![变量参数](Linux-基础Shell脚本/201607101227.PNG)\n\n##### 变量测试\n\n![变量参数](Linux-基础Shell脚本/201607101231.PNG)\n\n## 环境变量配置文件\n\n重新加载配置文件: `source 配置文件`  `. 配置文件`\n\n正常登陆过程，主要的文件:\n\n/etc/profile\n\n/etc/profile.d/*.sh\n\n~/.bash_profile\n\n~/.bashrc\n\n/etc/bashrc\n\n加载文件顺序>>[login而不是开机]\n\n![变量参数](Linux-基础Shell脚本/201607101243.PNG)\n\n注销\n\n~/.bash_logout\n\n历史命令\n\n~/.bash_history\n\n## 正则表达式\n\n## 流程控制语句\n","slug":"Linux-基础Shell脚本","published":1,"updated":"2016-08-31T12:24:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz76y000hugv560t97pyt","content":"<h1 id=\"bin-bash\"><a href=\"#bin-bash\" class=\"headerlink\" title=\"#!/bin/bash\"></a><code>#!/bin/bash</code></h1><h2 id=\"Bash变量\"><a href=\"#Bash变量\" class=\"headerlink\" title=\"Bash变量\"></a>Bash变量</h2><h4 id=\"用户自定义变量\"><a href=\"#用户自定义变量\" class=\"headerlink\" title=\"用户自定义变量\"></a>用户自定义变量</h4><p><code>变量名=变量值</code> 默认变量值为字符串</p>\n<p><code>echo $变量名</code></p>\n<p>变量叠加  x=”$x”other | x=${x}other</p>\n<p><code>set</code>：查询所有变量</p>\n<p><code>set -u</code> 然后调用未声明的变量会报错</p>\n<p><code>unset 变量名</code>：删除变量</p>\n<p><code>exoprt</code> 变成系统变量(实质上是<code>declare</code>)</p>\n<p><code>env</code>:只能看到环境变量<br><a id=\"more\"></a></p>\n<h4 id=\"常见系统变量\"><a href=\"#常见系统变量\" class=\"headerlink\" title=\"常见系统变量\"></a>常见系统变量</h4><p>HOSTNAME SHELL SSH USER  HOME MAIL TERM</p>\n<p>PATH</p>\n<p><code>locale</code> 支持的语系 LANG系统主语系 LC_ALL</p>\n<p>下次开机的默认语系:/etc/sysconfig/i18n</p>\n<p>PS1 命令提示符变量</p>\n<h4 id=\"位置参数变量\"><a href=\"#位置参数变量\" class=\"headerlink\" title=\"位置参数变量\"></a>位置参数变量</h4><p>$n </p>\n<p>$0 命令本身</p>\n<p>$1-9 ${10} 参数</p>\n<p>$*  所有传入的参数是一个整体</p>\n<p>$@   所有传入的参数是独立的，有几个参数，循环几次</p>\n<p>$#  返回传入参数的个数</p>\n<hr>\n<p><code>read</code> 接受键盘输入(交互)</p>\n<h5 id=\"p-输入\"><a href=\"#p-输入\" class=\"headerlink\" title=\"-p 输入\"></a>-p 输入</h5><h5 id=\"t-等待时间\"><a href=\"#t-等待时间\" class=\"headerlink\" title=\"-t 等待时间\"></a>-t 等待时间</h5><h5 id=\"s-隐藏\"><a href=\"#s-隐藏\" class=\"headerlink\" title=\"-s 隐藏\"></a>-s 隐藏</h5><h5 id=\"n-指定输入的字节数\"><a href=\"#n-指定输入的字节数\" class=\"headerlink\" title=\"-n 指定输入的字节数\"></a>-n 指定输入的字节数</h5><hr>\n<h4 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h4><p>$? 返回上一条命令的执行状态</p>\n<p>正确执行 返回0 | 执行错误 返回2 | 命令找不到 返回127</p>\n<p>$$ 返回当前进程的PID号</p>\n<p>$! 返回后台运行的最后一个进程的PID号</p>\n<h2 id=\"Shell运算符\"><a href=\"#Shell运算符\" class=\"headerlink\" title=\"Shell运算符\"></a>Shell运算符</h2><blockquote>\n<p>弱类型，类似javascript</p>\n</blockquote>\n<p><code>declare</code> [+/-] [i/a/]</p>\n<p><img src=\"/.io//201607101216.PNG\" alt=\"变量参数\"></p>\n<p><code>expr</code> <code>let</code></p>\n<h5 id=\"运算式-运算式\"><a href=\"#运算式-运算式\" class=\"headerlink\" title=\"$((运算式)) $[运算式]\"></a>$((运算式)) $[运算式]</h5><p><img src=\"/.io//201607101227.PNG\" alt=\"变量参数\"></p>\n<h5 id=\"变量测试\"><a href=\"#变量测试\" class=\"headerlink\" title=\"变量测试\"></a>变量测试</h5><p><img src=\"/.io//201607101231.PNG\" alt=\"变量参数\"></p>\n<h2 id=\"环境变量配置文件\"><a href=\"#环境变量配置文件\" class=\"headerlink\" title=\"环境变量配置文件\"></a>环境变量配置文件</h2><p>重新加载配置文件: <code>source 配置文件</code>  <code>. 配置文件</code></p>\n<p>正常登陆过程，主要的文件:</p>\n<p>/etc/profile</p>\n<p>/etc/profile.d/*.sh</p>\n<p>~/.bash_profile</p>\n<p>~/.bashrc</p>\n<p>/etc/bashrc</p>\n<p>加载文件顺序&gt;&gt;[login而不是开机]</p>\n<p><img src=\"/.io//201607101243.PNG\" alt=\"变量参数\"></p>\n<p>注销</p>\n<p>~/.bash_logout</p>\n<p>历史命令</p>\n<p>~/.bash_history</p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><h2 id=\"流程控制语句\"><a href=\"#流程控制语句\" class=\"headerlink\" title=\"流程控制语句\"></a>流程控制语句</h2>","site":{"data":{}},"excerpt":"<h1 id=\"bin-bash\"><a href=\"#bin-bash\" class=\"headerlink\" title=\"#!/bin/bash\"></a><code>#!/bin/bash</code></h1><h2 id=\"Bash变量\"><a href=\"#Bash变量\" class=\"headerlink\" title=\"Bash变量\"></a>Bash变量</h2><h4 id=\"用户自定义变量\"><a href=\"#用户自定义变量\" class=\"headerlink\" title=\"用户自定义变量\"></a>用户自定义变量</h4><p><code>变量名=变量值</code> 默认变量值为字符串</p>\n<p><code>echo $变量名</code></p>\n<p>变量叠加  x=”$x”other | x=${x}other</p>\n<p><code>set</code>：查询所有变量</p>\n<p><code>set -u</code> 然后调用未声明的变量会报错</p>\n<p><code>unset 变量名</code>：删除变量</p>\n<p><code>exoprt</code> 变成系统变量(实质上是<code>declare</code>)</p>\n<p><code>env</code>:只能看到环境变量<br></p>","more":"<p></p>\n<h4 id=\"常见系统变量\"><a href=\"#常见系统变量\" class=\"headerlink\" title=\"常见系统变量\"></a>常见系统变量</h4><p>HOSTNAME SHELL SSH USER  HOME MAIL TERM</p>\n<p>PATH</p>\n<p><code>locale</code> 支持的语系 LANG系统主语系 LC_ALL</p>\n<p>下次开机的默认语系:/etc/sysconfig/i18n</p>\n<p>PS1 命令提示符变量</p>\n<h4 id=\"位置参数变量\"><a href=\"#位置参数变量\" class=\"headerlink\" title=\"位置参数变量\"></a>位置参数变量</h4><p>$n </p>\n<p>$0 命令本身</p>\n<p>$1-9 ${10} 参数</p>\n<p>$*  所有传入的参数是一个整体</p>\n<p>$@   所有传入的参数是独立的，有几个参数，循环几次</p>\n<p>$#  返回传入参数的个数</p>\n<hr>\n<p><code>read</code> 接受键盘输入(交互)</p>\n<h5 id=\"p-输入\"><a href=\"#p-输入\" class=\"headerlink\" title=\"-p 输入\"></a>-p 输入</h5><h5 id=\"t-等待时间\"><a href=\"#t-等待时间\" class=\"headerlink\" title=\"-t 等待时间\"></a>-t 等待时间</h5><h5 id=\"s-隐藏\"><a href=\"#s-隐藏\" class=\"headerlink\" title=\"-s 隐藏\"></a>-s 隐藏</h5><h5 id=\"n-指定输入的字节数\"><a href=\"#n-指定输入的字节数\" class=\"headerlink\" title=\"-n 指定输入的字节数\"></a>-n 指定输入的字节数</h5><hr>\n<h4 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h4><p>$? 返回上一条命令的执行状态</p>\n<p>正确执行 返回0 | 执行错误 返回2 | 命令找不到 返回127</p>\n<p>$$ 返回当前进程的PID号</p>\n<p>$! 返回后台运行的最后一个进程的PID号</p>\n<h2 id=\"Shell运算符\"><a href=\"#Shell运算符\" class=\"headerlink\" title=\"Shell运算符\"></a>Shell运算符</h2><blockquote>\n<p>弱类型，类似javascript</p>\n</blockquote>\n<p><code>declare</code> [+/-] [i/a/]</p>\n<p><img src=\"/.io//201607101216.PNG\" alt=\"变量参数\"></p>\n<p><code>expr</code> <code>let</code></p>\n<h5 id=\"运算式-运算式\"><a href=\"#运算式-运算式\" class=\"headerlink\" title=\"$((运算式)) $[运算式]\"></a>$((运算式)) $[运算式]</h5><p><img src=\"/.io//201607101227.PNG\" alt=\"变量参数\"></p>\n<h5 id=\"变量测试\"><a href=\"#变量测试\" class=\"headerlink\" title=\"变量测试\"></a>变量测试</h5><p><img src=\"/.io//201607101231.PNG\" alt=\"变量参数\"></p>\n<h2 id=\"环境变量配置文件\"><a href=\"#环境变量配置文件\" class=\"headerlink\" title=\"环境变量配置文件\"></a>环境变量配置文件</h2><p>重新加载配置文件: <code>source 配置文件</code>  <code>. 配置文件</code></p>\n<p>正常登陆过程，主要的文件:</p>\n<p>/etc/profile</p>\n<p>/etc/profile.d/*.sh</p>\n<p>~/.bash_profile</p>\n<p>~/.bashrc</p>\n<p>/etc/bashrc</p>\n<p>加载文件顺序&gt;&gt;[login而不是开机]</p>\n<p><img src=\"/.io//201607101243.PNG\" alt=\"变量参数\"></p>\n<p>注销</p>\n<p>~/.bash_logout</p>\n<p>历史命令</p>\n<p>~/.bash_history</p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><h2 id=\"流程控制语句\"><a href=\"#流程控制语句\" class=\"headerlink\" title=\"流程控制语句\"></a>流程控制语句</h2>"},{"title":"Linux 基础命令总结","date":"2016-06-27T12:47:05.000Z","description":"文件、文件内容、目录、压缩打包、帮助","_content":"\n\n## 目录(文件夹directory)/文件(file)相关\n\n`ls`: 列出所有内容(list) -l 详细信息 -h 文件大小\n\n`touch`: 新建(实际上是触摸一下,会更改文件时间戳)\n\n`cp`: 复制文件(Copy) \n\n`mv`: 重命名文件(Move,移动到当前文件夹下，即重命名)\n\n`rm`: 删除文件(Remove) -rf 强制递归删除\n\n`ln`: 创建文件链接(link)  ln -s yuan   mubiao\n\n##### -r: 递归\n\n##### -f: 强制(不询问覆盖或删除)\n<!--more-->\n`cd`:  切换目录(Change directory)\n\n`mkdir`: 新建目录(Make directory)\n\n`rmdir`: 删除目录(Remove directory) (`rm -r`: 强制删除非空目录)(`rm -rf`)\n\n##### -p: 递归创建/删除非空目录\n\n`pwd`: 显示当前工作目录的绝对路径(Print work directory)\n\n`basename`: 显示文件名\n\n`dirname`: 显示路径\n\n## 文件内容相关\n\n#### 查看内容\n\n`cat`: 查看内容(Catenate)\n\n`less`: 分页满屏显示 (less is more)\n\n`more`: 和less功能相似，但是没有less强大\n\n`head`: 显示文件前10行(-N/-nN 参数N为要显示的行号)\n\n`tail`: 显示文件尾10行(-N/-nN 参数N为要显示的行号) tail -fn 300 /th/log.log  实时查看log文件\n\n`nl`: `cat -n`的加强版(Number of Lines)\n\n`strings/od/xxd/`: 二进制文件\n\n`acroread/gv/`: pdf文件和PostScript文件(Adobe Reader/Adobe PostScript/Ghostview)(大部分不支持)\n\n`xdvi`: (TeX文本处理器输出二进制文件)(大部分不支持)\n\n`>、<、>>` ：echo ssss > aaa.txt      写入   echo  ssss >> aaa.txt 追加ssss到文件aaa.txt   cat  < aaa.txt 读出文件到cat命令中作为输入\n\n##### -n/N:行\n\n##### -h/H:帮助\n\n#### 文件属性相关\n\n`stat`: 文件属性(status),修改时间，创建时间\n\n`file`: 文件类型，txt ，tar.gz等，文件大小用 ls -lh\n\n`du`: 文件占用的磁盘空间(disk usage,磁盘使用情况)\n\n`chmod` `chown` `chgrp`: 改变权限(Change mode/owner/group)\n\n##### -R 递归\n\n`chattr`: 改变文件属性(Change file attributes)\n\n`lsattr`: 显示`chattr`改变的属性(List file attributes)\n\n#### 文件的文本性操作\n\n`sort`: 排序\n\n`wc`: 统计(Word Count)(行  词  字节)\n\n`grep` `egrep` `fgrep`: 匹配正则/扩展正则/文本\n\n`cut`: 提取特定列\n\n`paste`: 合并\n\n`uniq`: 查找重复文本(unique)\n\n`tee`:  (T形水管接口)\n\n`tr`: 替换(Traslate)\n\n`printf`：\n\n\n\n## 归档(打包、压缩)相关(一般情况下,用`tar`)☆\n\n`tar`: 打包(tape Archive)`tar -cf`代替(.tar)\n\n__________________\n##### -c 创建归档文件(Create)\n\n##### -t 列出文件()\n\n##### -x 解压()\n\n##### -r 在已有的归档文件后添加新的文件\n\n##### -u 在已有的归档文件后添加新的文件或者修改原有归档文件\n__________________\n##### -z (gzip)\n\n##### -j (bzip2)\n\n##### -Z (Unix传统格式compress)\n__________________\n##### -v 打印详细信息(View)\n\n##### -f 从文件下打包(File)\n__________________\n- tar -xvf file.tar //解压 tar包\n- tar -xzvf file.tar.gz //解压tar.gz\n- tar -xjvf file.tar.bz2   //解压 tar.bz2\n- tar -xZvf file.tar.Z   //解压tar.Z\n- unrar e file.rar //解压rar\n- unzip file.zip //解压zip\n- unzip -o  file.zip  覆盖解压\n\n`zip`: Windows Zip格式压缩(.zip)(.tar.zip)\n\n`gzip`: GNU Zip格式压缩(.gz)(.tar.gz),`tar -czf`代替\n\n`bzip2`: BZip格式压缩(.bz2)(.tar.bz2),`tar -cjf`代替\n\n`compress`: Unix传统格式压缩(.Z)(.tar.Z),`tar -cZf`代替\n\n`unzip`: -o  file.zip  覆盖解压\n\n`gunzip`: `tar -xzf`代替\n\n`bunzip2`: `tar -xjf`代替\n\n`uncompress`: `tar -xZf`代替\n\n`zcat`: (支持gzip Unix传统格式)\n\n`bzcat`: (支持BZip格式)\n\n`metamail`: (MIME格式)\n\n`rpm2cpio`:rpm包中抽取文件\n\n-C 临时切换目录\ntar -czvf xxx.tar.gz -C /usr/local/tomcat/web-apps ROOT/\n\n>注意:打包和压缩是两个步骤。\n\n\n#### 查找文件\n\n`find`: 在当前目录树中查找文件\n\n`whereis`: 查找文件或者命令的源文件在哪里\n\n`type`: 查找shell命令的类型(bash shell内部命令)\n\n`which`: 查找shell命令所在的位置\n\n`locate`: 创建索引 搜索/var/lib/mlocate/mlocate.db\n\n#### 修改内容\n\n`vi/vim`: Vi(Vim)(其他编辑器Emacs,soffice,abiword,gnumeric)\n\nhjkl 左下上右\ni ESC :  !qw quit write  ！强制\n\n[参考Linux基础命令总结3]()\n\n`vimtutor`: Vim帮助\n\n## 帮助\n\n`man`: (manual)\n\n`help`:\n\n`info`: \n\n\n","source":"_posts/Linux-基础命令总结.md","raw":"---\ntitle: Linux 基础命令总结\ndate: 2016-06-27 20:47:05\ntags: [基础命令,file,directory,tar]\ncategories: Linux\ndescription: \"文件、文件内容、目录、压缩打包、帮助\"\n---\n\n\n## 目录(文件夹directory)/文件(file)相关\n\n`ls`: 列出所有内容(list) -l 详细信息 -h 文件大小\n\n`touch`: 新建(实际上是触摸一下,会更改文件时间戳)\n\n`cp`: 复制文件(Copy) \n\n`mv`: 重命名文件(Move,移动到当前文件夹下，即重命名)\n\n`rm`: 删除文件(Remove) -rf 强制递归删除\n\n`ln`: 创建文件链接(link)  ln -s yuan   mubiao\n\n##### -r: 递归\n\n##### -f: 强制(不询问覆盖或删除)\n<!--more-->\n`cd`:  切换目录(Change directory)\n\n`mkdir`: 新建目录(Make directory)\n\n`rmdir`: 删除目录(Remove directory) (`rm -r`: 强制删除非空目录)(`rm -rf`)\n\n##### -p: 递归创建/删除非空目录\n\n`pwd`: 显示当前工作目录的绝对路径(Print work directory)\n\n`basename`: 显示文件名\n\n`dirname`: 显示路径\n\n## 文件内容相关\n\n#### 查看内容\n\n`cat`: 查看内容(Catenate)\n\n`less`: 分页满屏显示 (less is more)\n\n`more`: 和less功能相似，但是没有less强大\n\n`head`: 显示文件前10行(-N/-nN 参数N为要显示的行号)\n\n`tail`: 显示文件尾10行(-N/-nN 参数N为要显示的行号) tail -fn 300 /th/log.log  实时查看log文件\n\n`nl`: `cat -n`的加强版(Number of Lines)\n\n`strings/od/xxd/`: 二进制文件\n\n`acroread/gv/`: pdf文件和PostScript文件(Adobe Reader/Adobe PostScript/Ghostview)(大部分不支持)\n\n`xdvi`: (TeX文本处理器输出二进制文件)(大部分不支持)\n\n`>、<、>>` ：echo ssss > aaa.txt      写入   echo  ssss >> aaa.txt 追加ssss到文件aaa.txt   cat  < aaa.txt 读出文件到cat命令中作为输入\n\n##### -n/N:行\n\n##### -h/H:帮助\n\n#### 文件属性相关\n\n`stat`: 文件属性(status),修改时间，创建时间\n\n`file`: 文件类型，txt ，tar.gz等，文件大小用 ls -lh\n\n`du`: 文件占用的磁盘空间(disk usage,磁盘使用情况)\n\n`chmod` `chown` `chgrp`: 改变权限(Change mode/owner/group)\n\n##### -R 递归\n\n`chattr`: 改变文件属性(Change file attributes)\n\n`lsattr`: 显示`chattr`改变的属性(List file attributes)\n\n#### 文件的文本性操作\n\n`sort`: 排序\n\n`wc`: 统计(Word Count)(行  词  字节)\n\n`grep` `egrep` `fgrep`: 匹配正则/扩展正则/文本\n\n`cut`: 提取特定列\n\n`paste`: 合并\n\n`uniq`: 查找重复文本(unique)\n\n`tee`:  (T形水管接口)\n\n`tr`: 替换(Traslate)\n\n`printf`：\n\n\n\n## 归档(打包、压缩)相关(一般情况下,用`tar`)☆\n\n`tar`: 打包(tape Archive)`tar -cf`代替(.tar)\n\n__________________\n##### -c 创建归档文件(Create)\n\n##### -t 列出文件()\n\n##### -x 解压()\n\n##### -r 在已有的归档文件后添加新的文件\n\n##### -u 在已有的归档文件后添加新的文件或者修改原有归档文件\n__________________\n##### -z (gzip)\n\n##### -j (bzip2)\n\n##### -Z (Unix传统格式compress)\n__________________\n##### -v 打印详细信息(View)\n\n##### -f 从文件下打包(File)\n__________________\n- tar -xvf file.tar //解压 tar包\n- tar -xzvf file.tar.gz //解压tar.gz\n- tar -xjvf file.tar.bz2   //解压 tar.bz2\n- tar -xZvf file.tar.Z   //解压tar.Z\n- unrar e file.rar //解压rar\n- unzip file.zip //解压zip\n- unzip -o  file.zip  覆盖解压\n\n`zip`: Windows Zip格式压缩(.zip)(.tar.zip)\n\n`gzip`: GNU Zip格式压缩(.gz)(.tar.gz),`tar -czf`代替\n\n`bzip2`: BZip格式压缩(.bz2)(.tar.bz2),`tar -cjf`代替\n\n`compress`: Unix传统格式压缩(.Z)(.tar.Z),`tar -cZf`代替\n\n`unzip`: -o  file.zip  覆盖解压\n\n`gunzip`: `tar -xzf`代替\n\n`bunzip2`: `tar -xjf`代替\n\n`uncompress`: `tar -xZf`代替\n\n`zcat`: (支持gzip Unix传统格式)\n\n`bzcat`: (支持BZip格式)\n\n`metamail`: (MIME格式)\n\n`rpm2cpio`:rpm包中抽取文件\n\n-C 临时切换目录\ntar -czvf xxx.tar.gz -C /usr/local/tomcat/web-apps ROOT/\n\n>注意:打包和压缩是两个步骤。\n\n\n#### 查找文件\n\n`find`: 在当前目录树中查找文件\n\n`whereis`: 查找文件或者命令的源文件在哪里\n\n`type`: 查找shell命令的类型(bash shell内部命令)\n\n`which`: 查找shell命令所在的位置\n\n`locate`: 创建索引 搜索/var/lib/mlocate/mlocate.db\n\n#### 修改内容\n\n`vi/vim`: Vi(Vim)(其他编辑器Emacs,soffice,abiword,gnumeric)\n\nhjkl 左下上右\ni ESC :  !qw quit write  ！强制\n\n[参考Linux基础命令总结3]()\n\n`vimtutor`: Vim帮助\n\n## 帮助\n\n`man`: (manual)\n\n`help`:\n\n`info`: \n\n\n","slug":"Linux-基础命令总结","published":1,"updated":"2019-02-16T05:01:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz770000iugv5q552o4lp","content":"<h2 id=\"目录-文件夹directory-文件-file-相关\"><a href=\"#目录-文件夹directory-文件-file-相关\" class=\"headerlink\" title=\"目录(文件夹directory)/文件(file)相关\"></a>目录(文件夹directory)/文件(file)相关</h2><p><code>ls</code>: 列出所有内容(list) -l 详细信息 -h 文件大小</p>\n<p><code>touch</code>: 新建(实际上是触摸一下,会更改文件时间戳)</p>\n<p><code>cp</code>: 复制文件(Copy) </p>\n<p><code>mv</code>: 重命名文件(Move,移动到当前文件夹下，即重命名)</p>\n<p><code>rm</code>: 删除文件(Remove) -rf 强制递归删除</p>\n<p><code>ln</code>: 创建文件链接(link)  ln -s yuan   mubiao</p>\n<h5 id=\"r-递归\"><a href=\"#r-递归\" class=\"headerlink\" title=\"-r: 递归\"></a>-r: 递归</h5><h5 id=\"f-强制-不询问覆盖或删除\"><a href=\"#f-强制-不询问覆盖或删除\" class=\"headerlink\" title=\"-f: 强制(不询问覆盖或删除)\"></a>-f: 强制(不询问覆盖或删除)</h5><a id=\"more\"></a>\n<p><code>cd</code>:  切换目录(Change directory)</p>\n<p><code>mkdir</code>: 新建目录(Make directory)</p>\n<p><code>rmdir</code>: 删除目录(Remove directory) (<code>rm -r</code>: 强制删除非空目录)(<code>rm -rf</code>)</p>\n<h5 id=\"p-递归创建-删除非空目录\"><a href=\"#p-递归创建-删除非空目录\" class=\"headerlink\" title=\"-p: 递归创建/删除非空目录\"></a>-p: 递归创建/删除非空目录</h5><p><code>pwd</code>: 显示当前工作目录的绝对路径(Print work directory)</p>\n<p><code>basename</code>: 显示文件名</p>\n<p><code>dirname</code>: 显示路径</p>\n<h2 id=\"文件内容相关\"><a href=\"#文件内容相关\" class=\"headerlink\" title=\"文件内容相关\"></a>文件内容相关</h2><h4 id=\"查看内容\"><a href=\"#查看内容\" class=\"headerlink\" title=\"查看内容\"></a>查看内容</h4><p><code>cat</code>: 查看内容(Catenate)</p>\n<p><code>less</code>: 分页满屏显示 (less is more)</p>\n<p><code>more</code>: 和less功能相似，但是没有less强大</p>\n<p><code>head</code>: 显示文件前10行(-N/-nN 参数N为要显示的行号)</p>\n<p><code>tail</code>: 显示文件尾10行(-N/-nN 参数N为要显示的行号) tail -fn 300 /th/log.log  实时查看log文件</p>\n<p><code>nl</code>: <code>cat -n</code>的加强版(Number of Lines)</p>\n<p><code>strings/od/xxd/</code>: 二进制文件</p>\n<p><code>acroread/gv/</code>: pdf文件和PostScript文件(Adobe Reader/Adobe PostScript/Ghostview)(大部分不支持)</p>\n<p><code>xdvi</code>: (TeX文本处理器输出二进制文件)(大部分不支持)</p>\n<p><code>&gt;、&lt;、&gt;&gt;</code> ：echo ssss &gt; aaa.txt      写入   echo  ssss &gt;&gt; aaa.txt 追加ssss到文件aaa.txt   cat  &lt; aaa.txt 读出文件到cat命令中作为输入</p>\n<h5 id=\"n-N-行\"><a href=\"#n-N-行\" class=\"headerlink\" title=\"-n/N:行\"></a>-n/N:行</h5><h5 id=\"h-H-帮助\"><a href=\"#h-H-帮助\" class=\"headerlink\" title=\"-h/H:帮助\"></a>-h/H:帮助</h5><h4 id=\"文件属性相关\"><a href=\"#文件属性相关\" class=\"headerlink\" title=\"文件属性相关\"></a>文件属性相关</h4><p><code>stat</code>: 文件属性(status),修改时间，创建时间</p>\n<p><code>file</code>: 文件类型，txt ，tar.gz等，文件大小用 ls -lh</p>\n<p><code>du</code>: 文件占用的磁盘空间(disk usage,磁盘使用情况)</p>\n<p><code>chmod</code> <code>chown</code> <code>chgrp</code>: 改变权限(Change mode/owner/group)</p>\n<h5 id=\"R-递归\"><a href=\"#R-递归\" class=\"headerlink\" title=\"-R 递归\"></a>-R 递归</h5><p><code>chattr</code>: 改变文件属性(Change file attributes)</p>\n<p><code>lsattr</code>: 显示<code>chattr</code>改变的属性(List file attributes)</p>\n<h4 id=\"文件的文本性操作\"><a href=\"#文件的文本性操作\" class=\"headerlink\" title=\"文件的文本性操作\"></a>文件的文本性操作</h4><p><code>sort</code>: 排序</p>\n<p><code>wc</code>: 统计(Word Count)(行  词  字节)</p>\n<p><code>grep</code> <code>egrep</code> <code>fgrep</code>: 匹配正则/扩展正则/文本</p>\n<p><code>cut</code>: 提取特定列</p>\n<p><code>paste</code>: 合并</p>\n<p><code>uniq</code>: 查找重复文本(unique)</p>\n<p><code>tee</code>:  (T形水管接口)</p>\n<p><code>tr</code>: 替换(Traslate)</p>\n<p><code>printf</code>：</p>\n<h2 id=\"归档-打包、压缩-相关-一般情况下-用tar-☆\"><a href=\"#归档-打包、压缩-相关-一般情况下-用tar-☆\" class=\"headerlink\" title=\"归档(打包、压缩)相关(一般情况下,用tar)☆\"></a>归档(打包、压缩)相关(一般情况下,用<code>tar</code>)☆</h2><p><code>tar</code>: 打包(tape Archive)<code>tar -cf</code>代替(.tar)</p>\n<hr>\n<h5 id=\"c-创建归档文件-Create\"><a href=\"#c-创建归档文件-Create\" class=\"headerlink\" title=\"-c 创建归档文件(Create)\"></a>-c 创建归档文件(Create)</h5><h5 id=\"t-列出文件\"><a href=\"#t-列出文件\" class=\"headerlink\" title=\"-t 列出文件()\"></a>-t 列出文件()</h5><h5 id=\"x-解压\"><a href=\"#x-解压\" class=\"headerlink\" title=\"-x 解压()\"></a>-x 解压()</h5><h5 id=\"r-在已有的归档文件后添加新的文件\"><a href=\"#r-在已有的归档文件后添加新的文件\" class=\"headerlink\" title=\"-r 在已有的归档文件后添加新的文件\"></a>-r 在已有的归档文件后添加新的文件</h5><h5 id=\"u-在已有的归档文件后添加新的文件或者修改原有归档文件\"><a href=\"#u-在已有的归档文件后添加新的文件或者修改原有归档文件\" class=\"headerlink\" title=\"-u 在已有的归档文件后添加新的文件或者修改原有归档文件\"></a>-u 在已有的归档文件后添加新的文件或者修改原有归档文件</h5><hr>\n<h5 id=\"z-gzip\"><a href=\"#z-gzip\" class=\"headerlink\" title=\"-z (gzip)\"></a>-z (gzip)</h5><h5 id=\"j-bzip2\"><a href=\"#j-bzip2\" class=\"headerlink\" title=\"-j (bzip2)\"></a>-j (bzip2)</h5><h5 id=\"Z-Unix传统格式compress\"><a href=\"#Z-Unix传统格式compress\" class=\"headerlink\" title=\"-Z (Unix传统格式compress)\"></a>-Z (Unix传统格式compress)</h5><hr>\n<h5 id=\"v-打印详细信息-View\"><a href=\"#v-打印详细信息-View\" class=\"headerlink\" title=\"-v 打印详细信息(View)\"></a>-v 打印详细信息(View)</h5><h5 id=\"f-从文件下打包-File\"><a href=\"#f-从文件下打包-File\" class=\"headerlink\" title=\"-f 从文件下打包(File)\"></a>-f 从文件下打包(File)</h5><hr>\n<ul>\n<li>tar -xvf file.tar //解压 tar包</li>\n<li>tar -xzvf file.tar.gz //解压tar.gz</li>\n<li>tar -xjvf file.tar.bz2   //解压 tar.bz2</li>\n<li>tar -xZvf file.tar.Z   //解压tar.Z</li>\n<li>unrar e file.rar //解压rar</li>\n<li>unzip file.zip //解压zip</li>\n<li>unzip -o  file.zip  覆盖解压</li>\n</ul>\n<p><code>zip</code>: Windows Zip格式压缩(.zip)(.tar.zip)</p>\n<p><code>gzip</code>: GNU Zip格式压缩(.gz)(.tar.gz),<code>tar -czf</code>代替</p>\n<p><code>bzip2</code>: BZip格式压缩(.bz2)(.tar.bz2),<code>tar -cjf</code>代替</p>\n<p><code>compress</code>: Unix传统格式压缩(.Z)(.tar.Z),<code>tar -cZf</code>代替</p>\n<p><code>unzip</code>: -o  file.zip  覆盖解压</p>\n<p><code>gunzip</code>: <code>tar -xzf</code>代替</p>\n<p><code>bunzip2</code>: <code>tar -xjf</code>代替</p>\n<p><code>uncompress</code>: <code>tar -xZf</code>代替</p>\n<p><code>zcat</code>: (支持gzip Unix传统格式)</p>\n<p><code>bzcat</code>: (支持BZip格式)</p>\n<p><code>metamail</code>: (MIME格式)</p>\n<p><code>rpm2cpio</code>:rpm包中抽取文件</p>\n<p>-C 临时切换目录<br>tar -czvf xxx.tar.gz -C /usr/local/tomcat/web-apps ROOT/</p>\n<blockquote>\n<p>注意:打包和压缩是两个步骤。</p>\n</blockquote>\n<h4 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h4><p><code>find</code>: 在当前目录树中查找文件</p>\n<p><code>whereis</code>: 查找文件或者命令的源文件在哪里</p>\n<p><code>type</code>: 查找shell命令的类型(bash shell内部命令)</p>\n<p><code>which</code>: 查找shell命令所在的位置</p>\n<p><code>locate</code>: 创建索引 搜索/var/lib/mlocate/mlocate.db</p>\n<h4 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h4><p><code>vi/vim</code>: Vi(Vim)(其他编辑器Emacs,soffice,abiword,gnumeric)</p>\n<p>hjkl 左下上右<br>i ESC :  !qw quit write  ！强制</p>\n<p><a href>参考Linux基础命令总结3</a></p>\n<p><code>vimtutor</code>: Vim帮助</p>\n<h2 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h2><p><code>man</code>: (manual)</p>\n<p><code>help</code>:</p>\n<p><code>info</code>: </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"目录-文件夹directory-文件-file-相关\"><a href=\"#目录-文件夹directory-文件-file-相关\" class=\"headerlink\" title=\"目录(文件夹directory)/文件(file)相关\"></a>目录(文件夹directory)/文件(file)相关</h2><p><code>ls</code>: 列出所有内容(list) -l 详细信息 -h 文件大小</p>\n<p><code>touch</code>: 新建(实际上是触摸一下,会更改文件时间戳)</p>\n<p><code>cp</code>: 复制文件(Copy) </p>\n<p><code>mv</code>: 重命名文件(Move,移动到当前文件夹下，即重命名)</p>\n<p><code>rm</code>: 删除文件(Remove) -rf 强制递归删除</p>\n<p><code>ln</code>: 创建文件链接(link)  ln -s yuan   mubiao</p>\n<h5 id=\"r-递归\"><a href=\"#r-递归\" class=\"headerlink\" title=\"-r: 递归\"></a>-r: 递归</h5><h5 id=\"f-强制-不询问覆盖或删除\"><a href=\"#f-强制-不询问覆盖或删除\" class=\"headerlink\" title=\"-f: 强制(不询问覆盖或删除)\"></a>-f: 强制(不询问覆盖或删除)</h5>","more":"<p><code>cd</code>:  切换目录(Change directory)</p>\n<p><code>mkdir</code>: 新建目录(Make directory)</p>\n<p><code>rmdir</code>: 删除目录(Remove directory) (<code>rm -r</code>: 强制删除非空目录)(<code>rm -rf</code>)</p>\n<h5 id=\"p-递归创建-删除非空目录\"><a href=\"#p-递归创建-删除非空目录\" class=\"headerlink\" title=\"-p: 递归创建/删除非空目录\"></a>-p: 递归创建/删除非空目录</h5><p><code>pwd</code>: 显示当前工作目录的绝对路径(Print work directory)</p>\n<p><code>basename</code>: 显示文件名</p>\n<p><code>dirname</code>: 显示路径</p>\n<h2 id=\"文件内容相关\"><a href=\"#文件内容相关\" class=\"headerlink\" title=\"文件内容相关\"></a>文件内容相关</h2><h4 id=\"查看内容\"><a href=\"#查看内容\" class=\"headerlink\" title=\"查看内容\"></a>查看内容</h4><p><code>cat</code>: 查看内容(Catenate)</p>\n<p><code>less</code>: 分页满屏显示 (less is more)</p>\n<p><code>more</code>: 和less功能相似，但是没有less强大</p>\n<p><code>head</code>: 显示文件前10行(-N/-nN 参数N为要显示的行号)</p>\n<p><code>tail</code>: 显示文件尾10行(-N/-nN 参数N为要显示的行号) tail -fn 300 /th/log.log  实时查看log文件</p>\n<p><code>nl</code>: <code>cat -n</code>的加强版(Number of Lines)</p>\n<p><code>strings/od/xxd/</code>: 二进制文件</p>\n<p><code>acroread/gv/</code>: pdf文件和PostScript文件(Adobe Reader/Adobe PostScript/Ghostview)(大部分不支持)</p>\n<p><code>xdvi</code>: (TeX文本处理器输出二进制文件)(大部分不支持)</p>\n<p><code>&gt;、&lt;、&gt;&gt;</code> ：echo ssss &gt; aaa.txt      写入   echo  ssss &gt;&gt; aaa.txt 追加ssss到文件aaa.txt   cat  &lt; aaa.txt 读出文件到cat命令中作为输入</p>\n<h5 id=\"n-N-行\"><a href=\"#n-N-行\" class=\"headerlink\" title=\"-n/N:行\"></a>-n/N:行</h5><h5 id=\"h-H-帮助\"><a href=\"#h-H-帮助\" class=\"headerlink\" title=\"-h/H:帮助\"></a>-h/H:帮助</h5><h4 id=\"文件属性相关\"><a href=\"#文件属性相关\" class=\"headerlink\" title=\"文件属性相关\"></a>文件属性相关</h4><p><code>stat</code>: 文件属性(status),修改时间，创建时间</p>\n<p><code>file</code>: 文件类型，txt ，tar.gz等，文件大小用 ls -lh</p>\n<p><code>du</code>: 文件占用的磁盘空间(disk usage,磁盘使用情况)</p>\n<p><code>chmod</code> <code>chown</code> <code>chgrp</code>: 改变权限(Change mode/owner/group)</p>\n<h5 id=\"R-递归\"><a href=\"#R-递归\" class=\"headerlink\" title=\"-R 递归\"></a>-R 递归</h5><p><code>chattr</code>: 改变文件属性(Change file attributes)</p>\n<p><code>lsattr</code>: 显示<code>chattr</code>改变的属性(List file attributes)</p>\n<h4 id=\"文件的文本性操作\"><a href=\"#文件的文本性操作\" class=\"headerlink\" title=\"文件的文本性操作\"></a>文件的文本性操作</h4><p><code>sort</code>: 排序</p>\n<p><code>wc</code>: 统计(Word Count)(行  词  字节)</p>\n<p><code>grep</code> <code>egrep</code> <code>fgrep</code>: 匹配正则/扩展正则/文本</p>\n<p><code>cut</code>: 提取特定列</p>\n<p><code>paste</code>: 合并</p>\n<p><code>uniq</code>: 查找重复文本(unique)</p>\n<p><code>tee</code>:  (T形水管接口)</p>\n<p><code>tr</code>: 替换(Traslate)</p>\n<p><code>printf</code>：</p>\n<h2 id=\"归档-打包、压缩-相关-一般情况下-用tar-☆\"><a href=\"#归档-打包、压缩-相关-一般情况下-用tar-☆\" class=\"headerlink\" title=\"归档(打包、压缩)相关(一般情况下,用tar)☆\"></a>归档(打包、压缩)相关(一般情况下,用<code>tar</code>)☆</h2><p><code>tar</code>: 打包(tape Archive)<code>tar -cf</code>代替(.tar)</p>\n<hr>\n<h5 id=\"c-创建归档文件-Create\"><a href=\"#c-创建归档文件-Create\" class=\"headerlink\" title=\"-c 创建归档文件(Create)\"></a>-c 创建归档文件(Create)</h5><h5 id=\"t-列出文件\"><a href=\"#t-列出文件\" class=\"headerlink\" title=\"-t 列出文件()\"></a>-t 列出文件()</h5><h5 id=\"x-解压\"><a href=\"#x-解压\" class=\"headerlink\" title=\"-x 解压()\"></a>-x 解压()</h5><h5 id=\"r-在已有的归档文件后添加新的文件\"><a href=\"#r-在已有的归档文件后添加新的文件\" class=\"headerlink\" title=\"-r 在已有的归档文件后添加新的文件\"></a>-r 在已有的归档文件后添加新的文件</h5><h5 id=\"u-在已有的归档文件后添加新的文件或者修改原有归档文件\"><a href=\"#u-在已有的归档文件后添加新的文件或者修改原有归档文件\" class=\"headerlink\" title=\"-u 在已有的归档文件后添加新的文件或者修改原有归档文件\"></a>-u 在已有的归档文件后添加新的文件或者修改原有归档文件</h5><hr>\n<h5 id=\"z-gzip\"><a href=\"#z-gzip\" class=\"headerlink\" title=\"-z (gzip)\"></a>-z (gzip)</h5><h5 id=\"j-bzip2\"><a href=\"#j-bzip2\" class=\"headerlink\" title=\"-j (bzip2)\"></a>-j (bzip2)</h5><h5 id=\"Z-Unix传统格式compress\"><a href=\"#Z-Unix传统格式compress\" class=\"headerlink\" title=\"-Z (Unix传统格式compress)\"></a>-Z (Unix传统格式compress)</h5><hr>\n<h5 id=\"v-打印详细信息-View\"><a href=\"#v-打印详细信息-View\" class=\"headerlink\" title=\"-v 打印详细信息(View)\"></a>-v 打印详细信息(View)</h5><h5 id=\"f-从文件下打包-File\"><a href=\"#f-从文件下打包-File\" class=\"headerlink\" title=\"-f 从文件下打包(File)\"></a>-f 从文件下打包(File)</h5><hr>\n<ul>\n<li>tar -xvf file.tar //解压 tar包</li>\n<li>tar -xzvf file.tar.gz //解压tar.gz</li>\n<li>tar -xjvf file.tar.bz2   //解压 tar.bz2</li>\n<li>tar -xZvf file.tar.Z   //解压tar.Z</li>\n<li>unrar e file.rar //解压rar</li>\n<li>unzip file.zip //解压zip</li>\n<li>unzip -o  file.zip  覆盖解压</li>\n</ul>\n<p><code>zip</code>: Windows Zip格式压缩(.zip)(.tar.zip)</p>\n<p><code>gzip</code>: GNU Zip格式压缩(.gz)(.tar.gz),<code>tar -czf</code>代替</p>\n<p><code>bzip2</code>: BZip格式压缩(.bz2)(.tar.bz2),<code>tar -cjf</code>代替</p>\n<p><code>compress</code>: Unix传统格式压缩(.Z)(.tar.Z),<code>tar -cZf</code>代替</p>\n<p><code>unzip</code>: -o  file.zip  覆盖解压</p>\n<p><code>gunzip</code>: <code>tar -xzf</code>代替</p>\n<p><code>bunzip2</code>: <code>tar -xjf</code>代替</p>\n<p><code>uncompress</code>: <code>tar -xZf</code>代替</p>\n<p><code>zcat</code>: (支持gzip Unix传统格式)</p>\n<p><code>bzcat</code>: (支持BZip格式)</p>\n<p><code>metamail</code>: (MIME格式)</p>\n<p><code>rpm2cpio</code>:rpm包中抽取文件</p>\n<p>-C 临时切换目录<br>tar -czvf xxx.tar.gz -C /usr/local/tomcat/web-apps ROOT/</p>\n<blockquote>\n<p>注意:打包和压缩是两个步骤。</p>\n</blockquote>\n<h4 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h4><p><code>find</code>: 在当前目录树中查找文件</p>\n<p><code>whereis</code>: 查找文件或者命令的源文件在哪里</p>\n<p><code>type</code>: 查找shell命令的类型(bash shell内部命令)</p>\n<p><code>which</code>: 查找shell命令所在的位置</p>\n<p><code>locate</code>: 创建索引 搜索/var/lib/mlocate/mlocate.db</p>\n<h4 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h4><p><code>vi/vim</code>: Vi(Vim)(其他编辑器Emacs,soffice,abiword,gnumeric)</p>\n<p>hjkl 左下上右<br>i ESC :  !qw quit write  ！强制</p>\n<p><a href>参考Linux基础命令总结3</a></p>\n<p><code>vimtutor</code>: Vim帮助</p>\n<h2 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h2><p><code>man</code>: (manual)</p>\n<p><code>help</code>:</p>\n<p><code>info</code>: </p>"},{"title":"Linux 基础命令总结3","date":"2017-09-16T16:43:52.000Z","description":"软件安装 yum，Vim","_content":"\n## 安装\n\n#### yum \n\n\n`yum list` \n\n`yum install`\n\n`rpm`\n\n-a：查询所有套件； \n-b<完成阶段><套件档>+或-t <完成阶段><套件档>+：设置包装套件的完成阶段，并指定套件档的文件名称； \n-c：只列出组态配置文件，本参数需配合\"-l\"参数使用； \n-d：只列出文本文件，本参数需配合\"-l\"参数使用； \n-e<套件档>或--erase<套件档>：删除指定的套件； \n-f<文件>+：查询拥有指定文件的套件； \n-h或--hash：套件安装时列出标记； \n-i：显示套件的相关信息； -i<套件档>或--install<套件档>：安装指定的套件档； \n-l：显示套件的文件列表； -p<套件档>+：查询指定的RPM套件档； \n-q：使用询问模式，当遇到任何问题时，rpm指令会先询问用户； \n-R：显示套件的关联性信息； \n-s：显示文件状态，本参数需配合\"-l\"参数使用； \n-U<套件档>或--upgrade<套件档>：升级指定的套件档； \n-v：显示指令执行过程； \n-vv：详细显示指令执行过程，便于排错。\n\n\n`yum`\n\ninstall：安装rpm软件包； \nupdate：更新rpm软件包； \ncheck-update：检查是否有可用的更新rpm软件包； \nremove：删除指定的rpm软件包； \nlist：显示软件包的信息； \nsearch：检查软件包的信息； \ninfo：显示指定的rpm软件包的描述信息和概要信息； \nclean：清理yum过期的缓存； \nshell：进入yum的shell提示符； \nresolvedep：显示rpm软件包的依赖关系； \nlocalinstall：安装本地的rpm软件包； \nlocalupdate：显示本地rpm软件包进行更新；\ndeplist：显示rpm软件包的所有依赖关系。\n\n## Vim\n\n- 选中 v，移动光标 然后y复制  （visual mode）\n- 复制yy 3yy 复制光标行，复制光标及下面两行（yank拉取）\n- 粘贴p 光标处粘贴复制内容（put paste放置）\n- 删除dd 3dd 删除光标行，删除光标及以下三行（delete）\n- u 撤销（undo）  Ctrl +R 回撤\n- Ctrl f 下一页 Ctrl b 上一页（）\n- 行头行尾 0/^行首 $ 行尾\n- 文件头文件尾 gg/1G 文件头部  3G 第三行 G 文件尾部 \n- /查找匹配\n\n![图解命令](Linux-基础命令总结3/1353759337_6781.png)\n![图解命令](Linux-基础命令总结3/chinese.gif)\n![图解命令](Linux-基础命令总结3/english.gif)\n[网址](https://blog.csdn.net/de_moivre/article/details/84663132)\n\n## 高级\n\n`awk` `gawk`: \n\n![图片说明](1089507-20170126222420597-662074402.jpg)\n\nawk '{print $0}'\n\n    -F参数：指定分隔符，可指定一个或多个\n awk -F\":\" '{ print $1 }' /etc/passwd  冒号作为分隔符\n awk -F '[ ,]+' '{print $3\" \"$7}' test.txt    空格和逗号都分隔\n\n[awk 操作指南](http://www.cnblogs.com/ginvip/p/6352157.html)\n\n\n\n`sed`: \n\n`m4`: \n\n`gcc`: gcc/g++程序,语言C、C++\n\n`perl`: perl程序,语言Perl\n\n`python`: python程序,语言Python\n\n`java`: javac程序,语言java\n\n`mono`: mono程序,语言.NET\n\n`php`: php程序,语言PHP\n\n`ruby`: ruby程序,语言Ruby\n\n[CMD快捷键](https://www.cnblogs.com/webzhangnan/p/3221410.html)\n\n[scp](https://www.cnblogs.com/webnote/p/5877920.html)","source":"_posts/Linux-基础命令总结3.md","raw":"---\ntitle: Linux 基础命令总结3\ndate: 2017-09-17 00:43:52\ntags: 基础命令\ncategories: Linux\ndescription: \"软件安装 yum，Vim\"\n---\n\n## 安装\n\n#### yum \n\n\n`yum list` \n\n`yum install`\n\n`rpm`\n\n-a：查询所有套件； \n-b<完成阶段><套件档>+或-t <完成阶段><套件档>+：设置包装套件的完成阶段，并指定套件档的文件名称； \n-c：只列出组态配置文件，本参数需配合\"-l\"参数使用； \n-d：只列出文本文件，本参数需配合\"-l\"参数使用； \n-e<套件档>或--erase<套件档>：删除指定的套件； \n-f<文件>+：查询拥有指定文件的套件； \n-h或--hash：套件安装时列出标记； \n-i：显示套件的相关信息； -i<套件档>或--install<套件档>：安装指定的套件档； \n-l：显示套件的文件列表； -p<套件档>+：查询指定的RPM套件档； \n-q：使用询问模式，当遇到任何问题时，rpm指令会先询问用户； \n-R：显示套件的关联性信息； \n-s：显示文件状态，本参数需配合\"-l\"参数使用； \n-U<套件档>或--upgrade<套件档>：升级指定的套件档； \n-v：显示指令执行过程； \n-vv：详细显示指令执行过程，便于排错。\n\n\n`yum`\n\ninstall：安装rpm软件包； \nupdate：更新rpm软件包； \ncheck-update：检查是否有可用的更新rpm软件包； \nremove：删除指定的rpm软件包； \nlist：显示软件包的信息； \nsearch：检查软件包的信息； \ninfo：显示指定的rpm软件包的描述信息和概要信息； \nclean：清理yum过期的缓存； \nshell：进入yum的shell提示符； \nresolvedep：显示rpm软件包的依赖关系； \nlocalinstall：安装本地的rpm软件包； \nlocalupdate：显示本地rpm软件包进行更新；\ndeplist：显示rpm软件包的所有依赖关系。\n\n## Vim\n\n- 选中 v，移动光标 然后y复制  （visual mode）\n- 复制yy 3yy 复制光标行，复制光标及下面两行（yank拉取）\n- 粘贴p 光标处粘贴复制内容（put paste放置）\n- 删除dd 3dd 删除光标行，删除光标及以下三行（delete）\n- u 撤销（undo）  Ctrl +R 回撤\n- Ctrl f 下一页 Ctrl b 上一页（）\n- 行头行尾 0/^行首 $ 行尾\n- 文件头文件尾 gg/1G 文件头部  3G 第三行 G 文件尾部 \n- /查找匹配\n\n![图解命令](Linux-基础命令总结3/1353759337_6781.png)\n![图解命令](Linux-基础命令总结3/chinese.gif)\n![图解命令](Linux-基础命令总结3/english.gif)\n[网址](https://blog.csdn.net/de_moivre/article/details/84663132)\n\n## 高级\n\n`awk` `gawk`: \n\n![图片说明](1089507-20170126222420597-662074402.jpg)\n\nawk '{print $0}'\n\n    -F参数：指定分隔符，可指定一个或多个\n awk -F\":\" '{ print $1 }' /etc/passwd  冒号作为分隔符\n awk -F '[ ,]+' '{print $3\" \"$7}' test.txt    空格和逗号都分隔\n\n[awk 操作指南](http://www.cnblogs.com/ginvip/p/6352157.html)\n\n\n\n`sed`: \n\n`m4`: \n\n`gcc`: gcc/g++程序,语言C、C++\n\n`perl`: perl程序,语言Perl\n\n`python`: python程序,语言Python\n\n`java`: javac程序,语言java\n\n`mono`: mono程序,语言.NET\n\n`php`: php程序,语言PHP\n\n`ruby`: ruby程序,语言Ruby\n\n[CMD快捷键](https://www.cnblogs.com/webzhangnan/p/3221410.html)\n\n[scp](https://www.cnblogs.com/webnote/p/5877920.html)","slug":"Linux-基础命令总结3","published":1,"updated":"2019-04-01T10:35:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz773000mugv52t3o1cus","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h4 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h4><p><code>yum list</code> </p>\n<p><code>yum install</code></p>\n<p><code>rpm</code></p>\n<p>-a：查询所有套件；<br>-b&lt;完成阶段&gt;&lt;套件档&gt;+或-t &lt;完成阶段&gt;&lt;套件档&gt;+：设置包装套件的完成阶段，并指定套件档的文件名称；<br>-c：只列出组态配置文件，本参数需配合”-l”参数使用；<br>-d：只列出文本文件，本参数需配合”-l”参数使用；<br>-e&lt;套件档&gt;或–erase&lt;套件档&gt;：删除指定的套件；<br>-f&lt;文件&gt;+：查询拥有指定文件的套件；<br>-h或–hash：套件安装时列出标记；<br>-i：显示套件的相关信息； -i&lt;套件档&gt;或–install&lt;套件档&gt;：安装指定的套件档；<br>-l：显示套件的文件列表； -p&lt;套件档&gt;+：查询指定的RPM套件档；<br>-q：使用询问模式，当遇到任何问题时，rpm指令会先询问用户；<br>-R：显示套件的关联性信息；<br>-s：显示文件状态，本参数需配合”-l”参数使用；<br>-U&lt;套件档&gt;或–upgrade&lt;套件档&gt;：升级指定的套件档；<br>-v：显示指令执行过程；<br>-vv：详细显示指令执行过程，便于排错。</p>\n<p><code>yum</code></p>\n<p>install：安装rpm软件包；<br>update：更新rpm软件包；<br>check-update：检查是否有可用的更新rpm软件包；<br>remove：删除指定的rpm软件包；<br>list：显示软件包的信息；<br>search：检查软件包的信息；<br>info：显示指定的rpm软件包的描述信息和概要信息；<br>clean：清理yum过期的缓存；<br>shell：进入yum的shell提示符；<br>resolvedep：显示rpm软件包的依赖关系；<br>localinstall：安装本地的rpm软件包；<br>localupdate：显示本地rpm软件包进行更新；<br>deplist：显示rpm软件包的所有依赖关系。</p>\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><ul>\n<li>选中 v，移动光标 然后y复制  （visual mode）</li>\n<li>复制yy 3yy 复制光标行，复制光标及下面两行（yank拉取）</li>\n<li>粘贴p 光标处粘贴复制内容（put paste放置）</li>\n<li>删除dd 3dd 删除光标行，删除光标及以下三行（delete）</li>\n<li>u 撤销（undo）  Ctrl +R 回撤</li>\n<li>Ctrl f 下一页 Ctrl b 上一页（）</li>\n<li>行头行尾 0/^行首 $ 行尾</li>\n<li>文件头文件尾 gg/1G 文件头部  3G 第三行 G 文件尾部 </li>\n<li>/查找匹配</li>\n</ul>\n<p><img src=\"/.io//1353759337_6781.png\" alt=\"图解命令\"><br><img src=\"/.io//chinese.gif\" alt=\"图解命令\"><br><img src=\"/.io//english.gif\" alt=\"图解命令\"><br><a href=\"https://blog.csdn.net/de_moivre/article/details/84663132\" target=\"_blank\" rel=\"noopener\">网址</a></p>\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><p><code>awk</code> <code>gawk</code>: </p>\n<p><img src=\"/.io//1089507-20170126222420597-662074402.jpg\" alt=\"图片说明\"></p>\n<p>awk ‘{print $0}’</p>\n<pre><code>-F参数：指定分隔符，可指定一个或多个\n</code></pre><p> awk -F”:” ‘{ print $1 }’ /etc/passwd  冒号作为分隔符<br> awk -F ‘[ ,]+’ ‘{print $3” “$7}’ test.txt    空格和逗号都分隔</p>\n<p><a href=\"http://www.cnblogs.com/ginvip/p/6352157.html\" target=\"_blank\" rel=\"noopener\">awk 操作指南</a></p>\n<p><code>sed</code>: </p>\n<p><code>m4</code>: </p>\n<p><code>gcc</code>: gcc/g++程序,语言C、C++</p>\n<p><code>perl</code>: perl程序,语言Perl</p>\n<p><code>python</code>: python程序,语言Python</p>\n<p><code>java</code>: javac程序,语言java</p>\n<p><code>mono</code>: mono程序,语言.NET</p>\n<p><code>php</code>: php程序,语言PHP</p>\n<p><code>ruby</code>: ruby程序,语言Ruby</p>\n<p><a href=\"https://www.cnblogs.com/webzhangnan/p/3221410.html\" target=\"_blank\" rel=\"noopener\">CMD快捷键</a></p>\n<p><a href=\"https://www.cnblogs.com/webnote/p/5877920.html\" target=\"_blank\" rel=\"noopener\">scp</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h4 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h4><p><code>yum list</code> </p>\n<p><code>yum install</code></p>\n<p><code>rpm</code></p>\n<p>-a：查询所有套件；<br>-b&lt;完成阶段&gt;&lt;套件档&gt;+或-t &lt;完成阶段&gt;&lt;套件档&gt;+：设置包装套件的完成阶段，并指定套件档的文件名称；<br>-c：只列出组态配置文件，本参数需配合”-l”参数使用；<br>-d：只列出文本文件，本参数需配合”-l”参数使用；<br>-e&lt;套件档&gt;或–erase&lt;套件档&gt;：删除指定的套件；<br>-f&lt;文件&gt;+：查询拥有指定文件的套件；<br>-h或–hash：套件安装时列出标记；<br>-i：显示套件的相关信息； -i&lt;套件档&gt;或–install&lt;套件档&gt;：安装指定的套件档；<br>-l：显示套件的文件列表； -p&lt;套件档&gt;+：查询指定的RPM套件档；<br>-q：使用询问模式，当遇到任何问题时，rpm指令会先询问用户；<br>-R：显示套件的关联性信息；<br>-s：显示文件状态，本参数需配合”-l”参数使用；<br>-U&lt;套件档&gt;或–upgrade&lt;套件档&gt;：升级指定的套件档；<br>-v：显示指令执行过程；<br>-vv：详细显示指令执行过程，便于排错。</p>\n<p><code>yum</code></p>\n<p>install：安装rpm软件包；<br>update：更新rpm软件包；<br>check-update：检查是否有可用的更新rpm软件包；<br>remove：删除指定的rpm软件包；<br>list：显示软件包的信息；<br>search：检查软件包的信息；<br>info：显示指定的rpm软件包的描述信息和概要信息；<br>clean：清理yum过期的缓存；<br>shell：进入yum的shell提示符；<br>resolvedep：显示rpm软件包的依赖关系；<br>localinstall：安装本地的rpm软件包；<br>localupdate：显示本地rpm软件包进行更新；<br>deplist：显示rpm软件包的所有依赖关系。</p>\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><ul>\n<li>选中 v，移动光标 然后y复制  （visual mode）</li>\n<li>复制yy 3yy 复制光标行，复制光标及下面两行（yank拉取）</li>\n<li>粘贴p 光标处粘贴复制内容（put paste放置）</li>\n<li>删除dd 3dd 删除光标行，删除光标及以下三行（delete）</li>\n<li>u 撤销（undo）  Ctrl +R 回撤</li>\n<li>Ctrl f 下一页 Ctrl b 上一页（）</li>\n<li>行头行尾 0/^行首 $ 行尾</li>\n<li>文件头文件尾 gg/1G 文件头部  3G 第三行 G 文件尾部 </li>\n<li>/查找匹配</li>\n</ul>\n<p><img src=\"/.io//1353759337_6781.png\" alt=\"图解命令\"><br><img src=\"/.io//chinese.gif\" alt=\"图解命令\"><br><img src=\"/.io//english.gif\" alt=\"图解命令\"><br><a href=\"https://blog.csdn.net/de_moivre/article/details/84663132\" target=\"_blank\" rel=\"noopener\">网址</a></p>\n<h2 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h2><p><code>awk</code> <code>gawk</code>: </p>\n<p><img src=\"/.io//1089507-20170126222420597-662074402.jpg\" alt=\"图片说明\"></p>\n<p>awk ‘{print $0}’</p>\n<pre><code>-F参数：指定分隔符，可指定一个或多个\n</code></pre><p> awk -F”:” ‘{ print $1 }’ /etc/passwd  冒号作为分隔符<br> awk -F ‘[ ,]+’ ‘{print $3” “$7}’ test.txt    空格和逗号都分隔</p>\n<p><a href=\"http://www.cnblogs.com/ginvip/p/6352157.html\" target=\"_blank\" rel=\"noopener\">awk 操作指南</a></p>\n<p><code>sed</code>: </p>\n<p><code>m4</code>: </p>\n<p><code>gcc</code>: gcc/g++程序,语言C、C++</p>\n<p><code>perl</code>: perl程序,语言Perl</p>\n<p><code>python</code>: python程序,语言Python</p>\n<p><code>java</code>: javac程序,语言java</p>\n<p><code>mono</code>: mono程序,语言.NET</p>\n<p><code>php</code>: php程序,语言PHP</p>\n<p><code>ruby</code>: ruby程序,语言Ruby</p>\n<p><a href=\"https://www.cnblogs.com/webzhangnan/p/3221410.html\" target=\"_blank\" rel=\"noopener\">CMD快捷键</a></p>\n<p><a href=\"https://www.cnblogs.com/webnote/p/5877920.html\" target=\"_blank\" rel=\"noopener\">scp</a></p>\n"},{"title":"Linux 基础命令总结4","date":"2019-03-31T21:19:12.000Z","description":"shell快捷件键，常用命令","_content":"\n\n#### shell 常用快捷键\n\n[常用shell快捷键](https://blog.csdn.net/weixin_42256178/article/details/80392077)\n\n- ctrl + a 命令行首\n- ctrl + e 命令行尾（end）\n- ctrl + b 相当于方向键左←（）\n- ctrl + f 相当于方向键右→\n- \n- ctrl + u 剪切光标到行首\n- ctrl + k 剪切光标到行尾\n- ctrl + w 剪切光标前一个单词\n- ctrl + y 粘贴上面三个的复制\n- ctrl + z 挂起当前命令 jobs bg fg  唤醒\n- \n- ctrl + r 搜索之前的命令\n- ctrl + g 取消搜索\n-\n- ctrl + s 锁屏，挂起当前shell\n- ctrl + q 取消锁屏，重新启用当前shell\n- ctrl + l clear 清屏\n\n- ctrl + insert 插入\n\n#### 其他常用命令\n\n- ps -ef | grep tomcat \n- ps -aux | sort -k4nr |head -h 10 内存前十的进程\n- du -sh *   当前路径（disk usage）\n- df -hP  整个磁盘（disk free）\n- crontab -l 定时任务\n- tail -f /root/file.log 查看实时日志文件\n- free -h 查询内存文件\n- /var/log/messages 系统日志，\n-  service /etc/init.d  启动脚本位置","source":"_posts/Linux-基础命令总结4.md","raw":"---\ntitle: Linux 基础命令总结4\ndate: 2019-04-01 05:19:12\ntags: 基础命令\ncategories: Linux\ndescription: \"shell快捷件键，常用命令\"\n---\n\n\n#### shell 常用快捷键\n\n[常用shell快捷键](https://blog.csdn.net/weixin_42256178/article/details/80392077)\n\n- ctrl + a 命令行首\n- ctrl + e 命令行尾（end）\n- ctrl + b 相当于方向键左←（）\n- ctrl + f 相当于方向键右→\n- \n- ctrl + u 剪切光标到行首\n- ctrl + k 剪切光标到行尾\n- ctrl + w 剪切光标前一个单词\n- ctrl + y 粘贴上面三个的复制\n- ctrl + z 挂起当前命令 jobs bg fg  唤醒\n- \n- ctrl + r 搜索之前的命令\n- ctrl + g 取消搜索\n-\n- ctrl + s 锁屏，挂起当前shell\n- ctrl + q 取消锁屏，重新启用当前shell\n- ctrl + l clear 清屏\n\n- ctrl + insert 插入\n\n#### 其他常用命令\n\n- ps -ef | grep tomcat \n- ps -aux | sort -k4nr |head -h 10 内存前十的进程\n- du -sh *   当前路径（disk usage）\n- df -hP  整个磁盘（disk free）\n- crontab -l 定时任务\n- tail -f /root/file.log 查看实时日志文件\n- free -h 查询内存文件\n- /var/log/messages 系统日志，\n-  service /etc/init.d  启动脚本位置","slug":"Linux-基础命令总结4","published":1,"updated":"2019-04-10T08:29:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz775000ougv5ql6dnkjc","content":"<h4 id=\"shell-常用快捷键\"><a href=\"#shell-常用快捷键\" class=\"headerlink\" title=\"shell 常用快捷键\"></a>shell 常用快捷键</h4><p><a href=\"https://blog.csdn.net/weixin_42256178/article/details/80392077\" target=\"_blank\" rel=\"noopener\">常用shell快捷键</a></p>\n<ul>\n<li>ctrl + a 命令行首</li>\n<li>ctrl + e 命令行尾（end）</li>\n<li>ctrl + b 相当于方向键左←（）</li>\n<li>ctrl + f 相当于方向键右→</li>\n<li></li>\n<li>ctrl + u 剪切光标到行首</li>\n<li>ctrl + k 剪切光标到行尾</li>\n<li>ctrl + w 剪切光标前一个单词</li>\n<li>ctrl + y 粘贴上面三个的复制</li>\n<li>ctrl + z 挂起当前命令 jobs bg fg  唤醒</li>\n<li></li>\n<li>ctrl + r 搜索之前的命令</li>\n<li>ctrl + g 取消搜索<br>-</li>\n<li>ctrl + s 锁屏，挂起当前shell</li>\n<li>ctrl + q 取消锁屏，重新启用当前shell</li>\n<li><p>ctrl + l clear 清屏</p>\n</li>\n<li><p>ctrl + insert 插入</p>\n</li>\n</ul>\n<h4 id=\"其他常用命令\"><a href=\"#其他常用命令\" class=\"headerlink\" title=\"其他常用命令\"></a>其他常用命令</h4><ul>\n<li>ps -ef | grep tomcat </li>\n<li>ps -aux | sort -k4nr |head -h 10 内存前十的进程</li>\n<li>du -sh *   当前路径（disk usage）</li>\n<li>df -hP  整个磁盘（disk free）</li>\n<li>crontab -l 定时任务</li>\n<li>tail -f /root/file.log 查看实时日志文件</li>\n<li>free -h 查询内存文件</li>\n<li>/var/log/messages 系统日志，</li>\n<li>service /etc/init.d  启动脚本位置</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"shell-常用快捷键\"><a href=\"#shell-常用快捷键\" class=\"headerlink\" title=\"shell 常用快捷键\"></a>shell 常用快捷键</h4><p><a href=\"https://blog.csdn.net/weixin_42256178/article/details/80392077\" target=\"_blank\" rel=\"noopener\">常用shell快捷键</a></p>\n<ul>\n<li>ctrl + a 命令行首</li>\n<li>ctrl + e 命令行尾（end）</li>\n<li>ctrl + b 相当于方向键左←（）</li>\n<li>ctrl + f 相当于方向键右→</li>\n<li></li>\n<li>ctrl + u 剪切光标到行首</li>\n<li>ctrl + k 剪切光标到行尾</li>\n<li>ctrl + w 剪切光标前一个单词</li>\n<li>ctrl + y 粘贴上面三个的复制</li>\n<li>ctrl + z 挂起当前命令 jobs bg fg  唤醒</li>\n<li></li>\n<li>ctrl + r 搜索之前的命令</li>\n<li>ctrl + g 取消搜索<br>-</li>\n<li>ctrl + s 锁屏，挂起当前shell</li>\n<li>ctrl + q 取消锁屏，重新启用当前shell</li>\n<li><p>ctrl + l clear 清屏</p>\n</li>\n<li><p>ctrl + insert 插入</p>\n</li>\n</ul>\n<h4 id=\"其他常用命令\"><a href=\"#其他常用命令\" class=\"headerlink\" title=\"其他常用命令\"></a>其他常用命令</h4><ul>\n<li>ps -ef | grep tomcat </li>\n<li>ps -aux | sort -k4nr |head -h 10 内存前十的进程</li>\n<li>du -sh *   当前路径（disk usage）</li>\n<li>df -hP  整个磁盘（disk free）</li>\n<li>crontab -l 定时任务</li>\n<li>tail -f /root/file.log 查看实时日志文件</li>\n<li>free -h 查询内存文件</li>\n<li>/var/log/messages 系统日志，</li>\n<li>service /etc/init.d  启动脚本位置</li>\n</ul>\n"},{"title":"RSS好工具","date":"2017-12-21T06:32:47.000Z","description":"信息丰富的网络社会，让我们失去了自我，采用RSS这个工具，很老的东西，很有用！","_content":"\n\n主动订阅RSS\n\n[RSS阅读器](https://www.zhihu.com/question/24175829)\n\nFeedDemon 查看软件\n[RSS](https://www.zhihu.com/question/19580096)\n\n太多的信息，主动订阅需要的信息。\n\n\n\n印象云笔记适配软件[RightNote](https://pan.baidu.com/s/1hqxNY5m)\n\nRightNote是由Bauer Apps出品的一款个人信息管理软件。该软件一共有三个版本，包括：免费版、标准版及专业按，此次活动赠送的是标准版。RightNote可以处理文本、html、财务数据、源代码、一般列表、待办事项列表、联系人列表等。RightNote含有多项应用选项，可根据个人喜好定制界面；强大的导入和导出选项，可从各种数据源导入数据，也可以把数据导出成常见的文件格式，如.txt、 .rtf、 .rvf、 .html和.xls等；内建各种键盘快捷键、预定义的热键、预定义的文字和背景颜色，以及近期/经常使用的笔记列表，可更容易、更有效地处理常见的、重复性的任务；强大的web导入；可对信息进行128位加密；内置的全文搜索引擎；可使用Evernote同步；支持更多层级，可建立树状笔记结构。\n\n活动页面： http://sharewareonsale.com/s/bauer-apps-rightnote-giveaway-coupon-sale\n\n活动统一激活信息： Registration Name: SharewareOnSale Giveaway Jan2015\n\nLicense Key: SGX3A-4X5MNALA-F6YNNSBU-GDKU7KWA-6NO3G2MT-ZZVHGBPT-GAWQEFIA-6UZHH2KL-FZ5KGPCO-YJTMVYYP-WCG5LMVR-AIKFOWV7-O5UHQZZN-D2R3PHPY-AVRXAWYH-MKLARJLG\n\n下载地址：\n安装版：http://pan.baidu.com/s/1c0zsfWs\n免安装版： http://pan.baidu.com/s/1hqxNY5m\n\n\n","source":"_posts/RSS好工具.md","raw":"---\ntitle: RSS好工具\ndate: 2017-12-21 14:32:47\ntags: 软件\ncategories: 资源\ndescription: \"信息丰富的网络社会，让我们失去了自我，采用RSS这个工具，很老的东西，很有用！\"\n---\n\n\n主动订阅RSS\n\n[RSS阅读器](https://www.zhihu.com/question/24175829)\n\nFeedDemon 查看软件\n[RSS](https://www.zhihu.com/question/19580096)\n\n太多的信息，主动订阅需要的信息。\n\n\n\n印象云笔记适配软件[RightNote](https://pan.baidu.com/s/1hqxNY5m)\n\nRightNote是由Bauer Apps出品的一款个人信息管理软件。该软件一共有三个版本，包括：免费版、标准版及专业按，此次活动赠送的是标准版。RightNote可以处理文本、html、财务数据、源代码、一般列表、待办事项列表、联系人列表等。RightNote含有多项应用选项，可根据个人喜好定制界面；强大的导入和导出选项，可从各种数据源导入数据，也可以把数据导出成常见的文件格式，如.txt、 .rtf、 .rvf、 .html和.xls等；内建各种键盘快捷键、预定义的热键、预定义的文字和背景颜色，以及近期/经常使用的笔记列表，可更容易、更有效地处理常见的、重复性的任务；强大的web导入；可对信息进行128位加密；内置的全文搜索引擎；可使用Evernote同步；支持更多层级，可建立树状笔记结构。\n\n活动页面： http://sharewareonsale.com/s/bauer-apps-rightnote-giveaway-coupon-sale\n\n活动统一激活信息： Registration Name: SharewareOnSale Giveaway Jan2015\n\nLicense Key: SGX3A-4X5MNALA-F6YNNSBU-GDKU7KWA-6NO3G2MT-ZZVHGBPT-GAWQEFIA-6UZHH2KL-FZ5KGPCO-YJTMVYYP-WCG5LMVR-AIKFOWV7-O5UHQZZN-D2R3PHPY-AVRXAWYH-MKLARJLG\n\n下载地址：\n安装版：http://pan.baidu.com/s/1c0zsfWs\n免安装版： http://pan.baidu.com/s/1hqxNY5m\n\n\n","slug":"RSS好工具","published":1,"updated":"2017-12-21T15:13:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz778000sugv51kdz8m23","content":"<p>主动订阅RSS</p>\n<p><a href=\"https://www.zhihu.com/question/24175829\" target=\"_blank\" rel=\"noopener\">RSS阅读器</a></p>\n<p>FeedDemon 查看软件<br><a href=\"https://www.zhihu.com/question/19580096\" target=\"_blank\" rel=\"noopener\">RSS</a></p>\n<p>太多的信息，主动订阅需要的信息。</p>\n<p>印象云笔记适配软件<a href=\"https://pan.baidu.com/s/1hqxNY5m\" target=\"_blank\" rel=\"noopener\">RightNote</a></p>\n<p>RightNote是由Bauer Apps出品的一款个人信息管理软件。该软件一共有三个版本，包括：免费版、标准版及专业按，此次活动赠送的是标准版。RightNote可以处理文本、html、财务数据、源代码、一般列表、待办事项列表、联系人列表等。RightNote含有多项应用选项，可根据个人喜好定制界面；强大的导入和导出选项，可从各种数据源导入数据，也可以把数据导出成常见的文件格式，如.txt、 .rtf、 .rvf、 .html和.xls等；内建各种键盘快捷键、预定义的热键、预定义的文字和背景颜色，以及近期/经常使用的笔记列表，可更容易、更有效地处理常见的、重复性的任务；强大的web导入；可对信息进行128位加密；内置的全文搜索引擎；可使用Evernote同步；支持更多层级，可建立树状笔记结构。</p>\n<p>活动页面： <a href=\"http://sharewareonsale.com/s/bauer-apps-rightnote-giveaway-coupon-sale\" target=\"_blank\" rel=\"noopener\">http://sharewareonsale.com/s/bauer-apps-rightnote-giveaway-coupon-sale</a></p>\n<p>活动统一激活信息： Registration Name: SharewareOnSale Giveaway Jan2015</p>\n<p>License Key: SGX3A-4X5MNALA-F6YNNSBU-GDKU7KWA-6NO3G2MT-ZZVHGBPT-GAWQEFIA-6UZHH2KL-FZ5KGPCO-YJTMVYYP-WCG5LMVR-AIKFOWV7-O5UHQZZN-D2R3PHPY-AVRXAWYH-MKLARJLG</p>\n<p>下载地址：<br>安装版：<a href=\"http://pan.baidu.com/s/1c0zsfWs\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1c0zsfWs</a><br>免安装版： <a href=\"http://pan.baidu.com/s/1hqxNY5m\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hqxNY5m</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>主动订阅RSS</p>\n<p><a href=\"https://www.zhihu.com/question/24175829\" target=\"_blank\" rel=\"noopener\">RSS阅读器</a></p>\n<p>FeedDemon 查看软件<br><a href=\"https://www.zhihu.com/question/19580096\" target=\"_blank\" rel=\"noopener\">RSS</a></p>\n<p>太多的信息，主动订阅需要的信息。</p>\n<p>印象云笔记适配软件<a href=\"https://pan.baidu.com/s/1hqxNY5m\" target=\"_blank\" rel=\"noopener\">RightNote</a></p>\n<p>RightNote是由Bauer Apps出品的一款个人信息管理软件。该软件一共有三个版本，包括：免费版、标准版及专业按，此次活动赠送的是标准版。RightNote可以处理文本、html、财务数据、源代码、一般列表、待办事项列表、联系人列表等。RightNote含有多项应用选项，可根据个人喜好定制界面；强大的导入和导出选项，可从各种数据源导入数据，也可以把数据导出成常见的文件格式，如.txt、 .rtf、 .rvf、 .html和.xls等；内建各种键盘快捷键、预定义的热键、预定义的文字和背景颜色，以及近期/经常使用的笔记列表，可更容易、更有效地处理常见的、重复性的任务；强大的web导入；可对信息进行128位加密；内置的全文搜索引擎；可使用Evernote同步；支持更多层级，可建立树状笔记结构。</p>\n<p>活动页面： <a href=\"http://sharewareonsale.com/s/bauer-apps-rightnote-giveaway-coupon-sale\" target=\"_blank\" rel=\"noopener\">http://sharewareonsale.com/s/bauer-apps-rightnote-giveaway-coupon-sale</a></p>\n<p>活动统一激活信息： Registration Name: SharewareOnSale Giveaway Jan2015</p>\n<p>License Key: SGX3A-4X5MNALA-F6YNNSBU-GDKU7KWA-6NO3G2MT-ZZVHGBPT-GAWQEFIA-6UZHH2KL-FZ5KGPCO-YJTMVYYP-WCG5LMVR-AIKFOWV7-O5UHQZZN-D2R3PHPY-AVRXAWYH-MKLARJLG</p>\n<p>下载地址：<br>安装版：<a href=\"http://pan.baidu.com/s/1c0zsfWs\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1c0zsfWs</a><br>免安装版： <a href=\"http://pan.baidu.com/s/1hqxNY5m\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hqxNY5m</a></p>\n"},{"title":"Spring源码阅读之Ioc控制反转","date":"2018-06-21T23:55:45.000Z","description":"源码阅读两大模块之控制反转IOC（Inversion of Control）","_content":"\n![IOC](Spring源码阅读之Ioc控制反转/SpringIOC.png)\n<!--more-->\n\n[github简易Spring实现](https://github.com/code4craft/tiny-spring)\n\n加载文件，解析XML\n\n如果是`<bean  id =\"a1\" class =\"b\">`,AbstractBeanFactory.beanDefinitionMap中会添加一份Bean的描述其中Map<key=\"a1\",value =\"beanDefinition\">beanDefinition中是描述这个Bean的，包含Bean对象，beanClass类对象，beanClassName类名，和对应的属性PropertyValues，就是List PropertyValue,\n\n```\nString name = ele.getAttribute(\"id\");\nString className = ele.getAttribute(\"class\");\nBeanDefinition beanDefinition = new BeanDefinition();\nprocessProperty(ele, beanDefinition);\nbeanDefinition.setBeanClassName(className);\ngetRegistry().put(name, beanDefinition);\n\n```\n\n如果Bean内部是`<property  name =\"a1\" value =\"b1\">`,这时候PropertyValue就是一个{name =\"a1\",value =\"b1\"},\n\n定义BeanDefination{bean,beanClass,beanClassName,PropertyValues=[list<PropertyValue> propertyValueList]}\n\n处理引用ref\n\n如果Bean内部是`<property  name =\"a1\" ref =\"b2\">`,这时候创建一个BeanReference(\"b2\"),PropertyValue就是一个{name =\"a1\",value =BeanReference},\n\n\n```\nif (value instanceof BeanReference) {\n\t\t\t\tBeanReference beanReference = (BeanReference) value;\n\t\t\t\tvalue = getBean(beanReference.getName());//根据b2获取bean\n}\n\nMethod declaredMethod = bean.getClass().getDeclaredMethod(\n\t\t\t\t\t\t\"set\" + propertyValue.getName().substring(0, 1).toUpperCase()\n\t\t\t\t\t\t\t\t+ propertyValue.getName().substring(1), value.getClass());\ndeclaredMethod.setAccessible(true);\n\ndeclaredMethod.invoke(bean, value);//把b2放到a1中，反射调用\n\n```\n这里的简化版本所有的引用都是在getBean之后进行的。\n\n把所有的Bean都注册到BeanFactory中。AbstractBeanFactory.beanDefinitionMap中包含所有的{name =\"\", BeanDefinition = \"\"},定义的Bean的名字和对应class的Bean的描述类\n\n获取Bean的时候BeanFactory.getBean()，反射newInstance()\n`beanDefinition.getBeanClass().newInstance();`直接得到类对象，进行实例化。再处理各种引用等问题。\n\n以上这个简版的Spring已经把主要的逻辑讲了，当然这只是原理，Spring比这个跟严谨更复杂。","source":"_posts/Spring源码阅读之Ioc控制反转.md","raw":"---\ntitle: Spring源码阅读之Ioc控制反转\ndate: 2018-06-22 07:55:45\ntags: Spring\ncategories: java\ndescription: \"源码阅读两大模块之控制反转IOC（Inversion of Control）\"\n---\n\n![IOC](Spring源码阅读之Ioc控制反转/SpringIOC.png)\n<!--more-->\n\n[github简易Spring实现](https://github.com/code4craft/tiny-spring)\n\n加载文件，解析XML\n\n如果是`<bean  id =\"a1\" class =\"b\">`,AbstractBeanFactory.beanDefinitionMap中会添加一份Bean的描述其中Map<key=\"a1\",value =\"beanDefinition\">beanDefinition中是描述这个Bean的，包含Bean对象，beanClass类对象，beanClassName类名，和对应的属性PropertyValues，就是List PropertyValue,\n\n```\nString name = ele.getAttribute(\"id\");\nString className = ele.getAttribute(\"class\");\nBeanDefinition beanDefinition = new BeanDefinition();\nprocessProperty(ele, beanDefinition);\nbeanDefinition.setBeanClassName(className);\ngetRegistry().put(name, beanDefinition);\n\n```\n\n如果Bean内部是`<property  name =\"a1\" value =\"b1\">`,这时候PropertyValue就是一个{name =\"a1\",value =\"b1\"},\n\n定义BeanDefination{bean,beanClass,beanClassName,PropertyValues=[list<PropertyValue> propertyValueList]}\n\n处理引用ref\n\n如果Bean内部是`<property  name =\"a1\" ref =\"b2\">`,这时候创建一个BeanReference(\"b2\"),PropertyValue就是一个{name =\"a1\",value =BeanReference},\n\n\n```\nif (value instanceof BeanReference) {\n\t\t\t\tBeanReference beanReference = (BeanReference) value;\n\t\t\t\tvalue = getBean(beanReference.getName());//根据b2获取bean\n}\n\nMethod declaredMethod = bean.getClass().getDeclaredMethod(\n\t\t\t\t\t\t\"set\" + propertyValue.getName().substring(0, 1).toUpperCase()\n\t\t\t\t\t\t\t\t+ propertyValue.getName().substring(1), value.getClass());\ndeclaredMethod.setAccessible(true);\n\ndeclaredMethod.invoke(bean, value);//把b2放到a1中，反射调用\n\n```\n这里的简化版本所有的引用都是在getBean之后进行的。\n\n把所有的Bean都注册到BeanFactory中。AbstractBeanFactory.beanDefinitionMap中包含所有的{name =\"\", BeanDefinition = \"\"},定义的Bean的名字和对应class的Bean的描述类\n\n获取Bean的时候BeanFactory.getBean()，反射newInstance()\n`beanDefinition.getBeanClass().newInstance();`直接得到类对象，进行实例化。再处理各种引用等问题。\n\n以上这个简版的Spring已经把主要的逻辑讲了，当然这只是原理，Spring比这个跟严谨更复杂。","slug":"Spring源码阅读之Ioc控制反转","published":1,"updated":"2018-06-25T03:08:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77c000tugv54me8fsbm","content":"<p><img src=\"/.io//SpringIOC.png\" alt=\"IOC\"><br><a id=\"more\"></a></p>\n<p><a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">github简易Spring实现</a></p>\n<p>加载文件，解析XML</p>\n<p>如果是<code>&lt;bean  id =&quot;a1&quot; class =&quot;b&quot;&gt;</code>,AbstractBeanFactory.beanDefinitionMap中会添加一份Bean的描述其中Map&lt;key=”a1”,value =”beanDefinition”&gt;beanDefinition中是描述这个Bean的，包含Bean对象，beanClass类对象，beanClassName类名，和对应的属性PropertyValues，就是List PropertyValue,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name = ele.getAttribute(&quot;id&quot;);</span><br><span class=\"line\">String className = ele.getAttribute(&quot;class&quot;);</span><br><span class=\"line\">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class=\"line\">processProperty(ele, beanDefinition);</span><br><span class=\"line\">beanDefinition.setBeanClassName(className);</span><br><span class=\"line\">getRegistry().put(name, beanDefinition);</span><br></pre></td></tr></table></figure>\n<p>如果Bean内部是<code>&lt;property  name =&quot;a1&quot; value =&quot;b1&quot;&gt;</code>,这时候PropertyValue就是一个{name =”a1”,value =”b1”},</p>\n<p>定义BeanDefination{bean,beanClass,beanClassName,PropertyValues=[list<propertyvalue> propertyValueList]}</propertyvalue></p>\n<p>处理引用ref</p>\n<p>如果Bean内部是<code>&lt;property  name =&quot;a1&quot; ref =&quot;b2&quot;&gt;</code>,这时候创建一个BeanReference(“b2”),PropertyValue就是一个{name =”a1”,value =BeanReference},</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (value instanceof BeanReference) &#123;</span><br><span class=\"line\">\t\t\t\tBeanReference beanReference = (BeanReference) value;</span><br><span class=\"line\">\t\t\t\tvalue = getBean(beanReference.getName());//根据b2获取bean</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Method declaredMethod = bean.getClass().getDeclaredMethod(</span><br><span class=\"line\">\t\t\t\t\t\t&quot;set&quot; + propertyValue.getName().substring(0, 1).toUpperCase()</span><br><span class=\"line\">\t\t\t\t\t\t\t\t+ propertyValue.getName().substring(1), value.getClass());</span><br><span class=\"line\">declaredMethod.setAccessible(true);</span><br><span class=\"line\"></span><br><span class=\"line\">declaredMethod.invoke(bean, value);//把b2放到a1中，反射调用</span><br></pre></td></tr></table></figure>\n<p>这里的简化版本所有的引用都是在getBean之后进行的。</p>\n<p>把所有的Bean都注册到BeanFactory中。AbstractBeanFactory.beanDefinitionMap中包含所有的{name =””, BeanDefinition = “”},定义的Bean的名字和对应class的Bean的描述类</p>\n<p>获取Bean的时候BeanFactory.getBean()，反射newInstance()<br><code>beanDefinition.getBeanClass().newInstance();</code>直接得到类对象，进行实例化。再处理各种引用等问题。</p>\n<p>以上这个简版的Spring已经把主要的逻辑讲了，当然这只是原理，Spring比这个跟严谨更复杂。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/.io//SpringIOC.png\" alt=\"IOC\"><br></p>","more":"<p></p>\n<p><a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">github简易Spring实现</a></p>\n<p>加载文件，解析XML</p>\n<p>如果是<code>&lt;bean  id =&quot;a1&quot; class =&quot;b&quot;&gt;</code>,AbstractBeanFactory.beanDefinitionMap中会添加一份Bean的描述其中Map&lt;key=”a1”,value =”beanDefinition”&gt;beanDefinition中是描述这个Bean的，包含Bean对象，beanClass类对象，beanClassName类名，和对应的属性PropertyValues，就是List PropertyValue,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name = ele.getAttribute(&quot;id&quot;);</span><br><span class=\"line\">String className = ele.getAttribute(&quot;class&quot;);</span><br><span class=\"line\">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class=\"line\">processProperty(ele, beanDefinition);</span><br><span class=\"line\">beanDefinition.setBeanClassName(className);</span><br><span class=\"line\">getRegistry().put(name, beanDefinition);</span><br></pre></td></tr></table></figure>\n<p>如果Bean内部是<code>&lt;property  name =&quot;a1&quot; value =&quot;b1&quot;&gt;</code>,这时候PropertyValue就是一个{name =”a1”,value =”b1”},</p>\n<p>定义BeanDefination{bean,beanClass,beanClassName,PropertyValues=[list<propertyvalue> propertyValueList]}</propertyvalue></p>\n<p>处理引用ref</p>\n<p>如果Bean内部是<code>&lt;property  name =&quot;a1&quot; ref =&quot;b2&quot;&gt;</code>,这时候创建一个BeanReference(“b2”),PropertyValue就是一个{name =”a1”,value =BeanReference},</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (value instanceof BeanReference) &#123;</span><br><span class=\"line\">\t\t\t\tBeanReference beanReference = (BeanReference) value;</span><br><span class=\"line\">\t\t\t\tvalue = getBean(beanReference.getName());//根据b2获取bean</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Method declaredMethod = bean.getClass().getDeclaredMethod(</span><br><span class=\"line\">\t\t\t\t\t\t&quot;set&quot; + propertyValue.getName().substring(0, 1).toUpperCase()</span><br><span class=\"line\">\t\t\t\t\t\t\t\t+ propertyValue.getName().substring(1), value.getClass());</span><br><span class=\"line\">declaredMethod.setAccessible(true);</span><br><span class=\"line\"></span><br><span class=\"line\">declaredMethod.invoke(bean, value);//把b2放到a1中，反射调用</span><br></pre></td></tr></table></figure>\n<p>这里的简化版本所有的引用都是在getBean之后进行的。</p>\n<p>把所有的Bean都注册到BeanFactory中。AbstractBeanFactory.beanDefinitionMap中包含所有的{name =””, BeanDefinition = “”},定义的Bean的名字和对应class的Bean的描述类</p>\n<p>获取Bean的时候BeanFactory.getBean()，反射newInstance()<br><code>beanDefinition.getBeanClass().newInstance();</code>直接得到类对象，进行实例化。再处理各种引用等问题。</p>\n<p>以上这个简版的Spring已经把主要的逻辑讲了，当然这只是原理，Spring比这个跟严谨更复杂。</p>"},{"title":"Spring源码阅读之AOP两种代理模式","date":"2018-06-24T19:13:09.000Z","description":"源码阅读两大模块之AOP,面向切面编程，与jdk代理和cglib代理","_content":"\n\n![AOP](Spring源码阅读之AOP两种代理模式/20180628.png)\n<!--more-->\n\n\n[github简易Spring实现](https://github.com/code4craft/tiny-spring)\n\n\n一般用作：日志，权限控制，异常，事务等情况下。\n\nxml中的解析\n\n```\n    <bean id=\"autoProxyCreator\" class=\"us.codecraft.tinyioc.aop.AspectJAwareAdvisorAutoProxyCreator\"></bean>\n\n    <bean id=\"timeInterceptor\" class=\"us.codecraft.tinyioc.aop.TimerInterceptor\"></bean>\n\n    <bean id=\"aspectjAspect\" class=\"us.codecraft.tinyioc.aop.AspectJExpressionPointcutAdvisor\">\n        <property name=\"advice\" ref=\"timeInterceptor\"></property>\n        <property name=\"expression\" value=\"execution(* us.codecraft.tinyioc.*.*(..))\"></property>\n    </bean>\n    \n```\nAspectJAwareAdvisorAutoProxyCreator implements BeanPostProcessor\n所以扫描这个类的时候会执行AspectJAwareAdvisorAutoProxyCreator.postProcessAfterInitialization()。\n\n```\npublic Object postProcessAfterInitialization(Object bean, String beanName) throws Exception {\n\t\tif (bean instanceof AspectJExpressionPointcutAdvisor) {\n\t\t\treturn bean;\n\t\t}\n\t\tif (bean instanceof MethodInterceptor) {\n\t\t\treturn bean;\n\t\t}\n\t\tList<AspectJExpressionPointcutAdvisor> advisors = beanFactory\n\t\t\t\t.getBeansForType(AspectJExpressionPointcutAdvisor.class);\n\t\tfor (AspectJExpressionPointcutAdvisor advisor : advisors) {\n\t\t\tif (advisor.getPointcut().getClassFilter().matches(bean.getClass())) {\n                ProxyFactory advisedSupport = new ProxyFactory();\n\t\t\t\tadvisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());\n\t\t\t\tadvisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());\n\n\t\t\t\tTargetSource targetSource = new TargetSource(bean, bean.getClass(), bean.getClass().getInterfaces());\n\t\t\t\tadvisedSupport.setTargetSource(targetSource);\n\n\t\t\t\treturn advisedSupport.getProxy();\n\t\t\t}\n\t\t}\n\t\treturn bean;\n\t}\n```\n然后遍历所有的AspectJExpressionPointcutAdvisor,如果有其他的bean满足条件advisor.getPointcut().getClassFilter().matches(bean.getClass())那么则返回代理对象。\n\n\n这里面的返回代理对象如果用代码来写的话就是下面这样，\n\n```\n    // 1. 设置被代理对象(Joinpoint)\n\tAdvisedSupport advisedSupport = new AdvisedSupport();\n\tTargetSource targetSource = new TargetSource(helloWorldService, HelloWorldServiceImpl.class,\n\t\t\tHelloWorldService.class);\n\tadvisedSupport.setTargetSource(targetSource);\n\t\n\t//设置匹配的match\n\tMethodMatcher methodMatcher = new MethodMatcher() {\n        \n        @Override\n        public boolean matches(Method method, Class targetClass) {\n            return true;\n        }\n    };\n\tadvisedSupport.setMethodMatcher(methodMatcher);\n\t\n\t// 2. 设置拦截器(Advice)\n\tTimerInterceptor timerInterceptor = new TimerInterceptor();\n\tadvisedSupport.setMethodInterceptor(timerInterceptor);\n\n\t// 3. 创建代理(Proxy)\n\tJdkDynamicAopProxy jdkDynamicAopProxy = new JdkDynamicAopProxy(advisedSupport);\n\tHelloWorldService helloWorldServiceProxy = (HelloWorldService) jdkDynamicAopProxy.getProxy();\n\n\t// 4. 基于AOP的调用\n\thelloWorldServiceProxy.helloWorld();\n\t\t\n```\n\nadvisedSupport{targetSource,methodMatcher,methodInterceptor}\n这个里面记录了代理目标，和匹配的expression和具体的拦截操作\n\n\n#### JDK动态代理\n\nimplements InvocationHandler\n\n先获取代理类Proxy.newProxyInstance(getClass().getClassLoader(), advised.getTargetSource().getInterfaces(), this);，然后implements InvocationHandler ,上面的this,执行target方法的时候就会优先执行InvocationHandler.invoke(final Object proxy, final Method method, final Object[] args);\n\n##### Proxy.newProxyInstance()\n\n这个是jdk动态代理，需要代理类实现接口，而且只能代理接口里面的方法，因为使用接口来创建代理。\n\nProxy.newProxyInstance(),获取代理类方法：\n\n```\n public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        Objects.requireNonNull(h);//InvocationHandler 不为空\n\n        final Class<?>[] intfs = interfaces.clone();\n        \n        /*\n         * Look up or generate the designated proxy class.\n         * 查找或生成指定的代理类。\n         */\n        Class<?> cl = getProxyClass0(loader, intfs);//\n\n        /*\n         * Invoke its constructor with the designated invocation handler.\n         * 用指定的调用处理程序调用它的构造函数。 constructorParams = InvocationHandler.class\n         */\n        final Constructor<?> cons = cl.getConstructor(constructorParams);\n       \n        return cons.newInstance(new Object[]{h});//返回代理类\n\n    }\n```\n\ngetProxyClass0()\n\n```\n\tprivate static Class<?> getProxyClass0(ClassLoader loader,\n                                           Class<?>... interfaces) {\n        if (interfaces.length > 65535) {\n            throw new IllegalArgumentException(\"interface limit exceeded\");\n        }\n\n        // If the proxy class defined by the given loader implementing\n        // the given interfaces exists, this will simply return the cached copy;\n        // otherwise, it will create the proxy class via the ProxyClassFactory\n        //如果classloader加载的接口代理类存在，直接从cache中国返回\n        //否则从ProxyClassFactory创建一个新的代理类\n        return proxyClassCache.get(loader, interfaces);\n    }\n```\n\n#### CGLIB\n\n\nimplements MethodInterceptor \n\n获取代理类\n\nEnhancer e=new Enhancer();//创建代理对象类\ne.setSuperclass(object.getClass());//声明代理对象的父类是谁（是目标对象）\ne.setCallback(this);//设置回调函数，即调用intercept()\nreturn e.create();//返回创建的代理对象\n\n\n执行intercept(Object obj, Method method, Object[] args, MethodProxy proxy);\n\n\n- [Java JDK代理、CGLIB、AspectJ代理分析比较](https://zhuanlan.zhihu.com/p/27757233)\n- [Spring AOP 实现原理](https://blog.csdn.net/moreevan/article/details/11977115)\n- [Spring源代码解析(收藏)](http://www.cnblogs.com/dazhaxie/archive/2012/06/18/2553300.html)","source":"_posts/Spring源码阅读之AOP两种代理模式.md","raw":"---\ntitle: Spring源码阅读之AOP两种代理模式\ndate: 2018-06-25 03:13:09\ntags: Spring\ncategories: java\ndescription: \"源码阅读两大模块之AOP,面向切面编程，与jdk代理和cglib代理\"\n---\n\n\n![AOP](Spring源码阅读之AOP两种代理模式/20180628.png)\n<!--more-->\n\n\n[github简易Spring实现](https://github.com/code4craft/tiny-spring)\n\n\n一般用作：日志，权限控制，异常，事务等情况下。\n\nxml中的解析\n\n```\n    <bean id=\"autoProxyCreator\" class=\"us.codecraft.tinyioc.aop.AspectJAwareAdvisorAutoProxyCreator\"></bean>\n\n    <bean id=\"timeInterceptor\" class=\"us.codecraft.tinyioc.aop.TimerInterceptor\"></bean>\n\n    <bean id=\"aspectjAspect\" class=\"us.codecraft.tinyioc.aop.AspectJExpressionPointcutAdvisor\">\n        <property name=\"advice\" ref=\"timeInterceptor\"></property>\n        <property name=\"expression\" value=\"execution(* us.codecraft.tinyioc.*.*(..))\"></property>\n    </bean>\n    \n```\nAspectJAwareAdvisorAutoProxyCreator implements BeanPostProcessor\n所以扫描这个类的时候会执行AspectJAwareAdvisorAutoProxyCreator.postProcessAfterInitialization()。\n\n```\npublic Object postProcessAfterInitialization(Object bean, String beanName) throws Exception {\n\t\tif (bean instanceof AspectJExpressionPointcutAdvisor) {\n\t\t\treturn bean;\n\t\t}\n\t\tif (bean instanceof MethodInterceptor) {\n\t\t\treturn bean;\n\t\t}\n\t\tList<AspectJExpressionPointcutAdvisor> advisors = beanFactory\n\t\t\t\t.getBeansForType(AspectJExpressionPointcutAdvisor.class);\n\t\tfor (AspectJExpressionPointcutAdvisor advisor : advisors) {\n\t\t\tif (advisor.getPointcut().getClassFilter().matches(bean.getClass())) {\n                ProxyFactory advisedSupport = new ProxyFactory();\n\t\t\t\tadvisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());\n\t\t\t\tadvisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());\n\n\t\t\t\tTargetSource targetSource = new TargetSource(bean, bean.getClass(), bean.getClass().getInterfaces());\n\t\t\t\tadvisedSupport.setTargetSource(targetSource);\n\n\t\t\t\treturn advisedSupport.getProxy();\n\t\t\t}\n\t\t}\n\t\treturn bean;\n\t}\n```\n然后遍历所有的AspectJExpressionPointcutAdvisor,如果有其他的bean满足条件advisor.getPointcut().getClassFilter().matches(bean.getClass())那么则返回代理对象。\n\n\n这里面的返回代理对象如果用代码来写的话就是下面这样，\n\n```\n    // 1. 设置被代理对象(Joinpoint)\n\tAdvisedSupport advisedSupport = new AdvisedSupport();\n\tTargetSource targetSource = new TargetSource(helloWorldService, HelloWorldServiceImpl.class,\n\t\t\tHelloWorldService.class);\n\tadvisedSupport.setTargetSource(targetSource);\n\t\n\t//设置匹配的match\n\tMethodMatcher methodMatcher = new MethodMatcher() {\n        \n        @Override\n        public boolean matches(Method method, Class targetClass) {\n            return true;\n        }\n    };\n\tadvisedSupport.setMethodMatcher(methodMatcher);\n\t\n\t// 2. 设置拦截器(Advice)\n\tTimerInterceptor timerInterceptor = new TimerInterceptor();\n\tadvisedSupport.setMethodInterceptor(timerInterceptor);\n\n\t// 3. 创建代理(Proxy)\n\tJdkDynamicAopProxy jdkDynamicAopProxy = new JdkDynamicAopProxy(advisedSupport);\n\tHelloWorldService helloWorldServiceProxy = (HelloWorldService) jdkDynamicAopProxy.getProxy();\n\n\t// 4. 基于AOP的调用\n\thelloWorldServiceProxy.helloWorld();\n\t\t\n```\n\nadvisedSupport{targetSource,methodMatcher,methodInterceptor}\n这个里面记录了代理目标，和匹配的expression和具体的拦截操作\n\n\n#### JDK动态代理\n\nimplements InvocationHandler\n\n先获取代理类Proxy.newProxyInstance(getClass().getClassLoader(), advised.getTargetSource().getInterfaces(), this);，然后implements InvocationHandler ,上面的this,执行target方法的时候就会优先执行InvocationHandler.invoke(final Object proxy, final Method method, final Object[] args);\n\n##### Proxy.newProxyInstance()\n\n这个是jdk动态代理，需要代理类实现接口，而且只能代理接口里面的方法，因为使用接口来创建代理。\n\nProxy.newProxyInstance(),获取代理类方法：\n\n```\n public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        Objects.requireNonNull(h);//InvocationHandler 不为空\n\n        final Class<?>[] intfs = interfaces.clone();\n        \n        /*\n         * Look up or generate the designated proxy class.\n         * 查找或生成指定的代理类。\n         */\n        Class<?> cl = getProxyClass0(loader, intfs);//\n\n        /*\n         * Invoke its constructor with the designated invocation handler.\n         * 用指定的调用处理程序调用它的构造函数。 constructorParams = InvocationHandler.class\n         */\n        final Constructor<?> cons = cl.getConstructor(constructorParams);\n       \n        return cons.newInstance(new Object[]{h});//返回代理类\n\n    }\n```\n\ngetProxyClass0()\n\n```\n\tprivate static Class<?> getProxyClass0(ClassLoader loader,\n                                           Class<?>... interfaces) {\n        if (interfaces.length > 65535) {\n            throw new IllegalArgumentException(\"interface limit exceeded\");\n        }\n\n        // If the proxy class defined by the given loader implementing\n        // the given interfaces exists, this will simply return the cached copy;\n        // otherwise, it will create the proxy class via the ProxyClassFactory\n        //如果classloader加载的接口代理类存在，直接从cache中国返回\n        //否则从ProxyClassFactory创建一个新的代理类\n        return proxyClassCache.get(loader, interfaces);\n    }\n```\n\n#### CGLIB\n\n\nimplements MethodInterceptor \n\n获取代理类\n\nEnhancer e=new Enhancer();//创建代理对象类\ne.setSuperclass(object.getClass());//声明代理对象的父类是谁（是目标对象）\ne.setCallback(this);//设置回调函数，即调用intercept()\nreturn e.create();//返回创建的代理对象\n\n\n执行intercept(Object obj, Method method, Object[] args, MethodProxy proxy);\n\n\n- [Java JDK代理、CGLIB、AspectJ代理分析比较](https://zhuanlan.zhihu.com/p/27757233)\n- [Spring AOP 实现原理](https://blog.csdn.net/moreevan/article/details/11977115)\n- [Spring源代码解析(收藏)](http://www.cnblogs.com/dazhaxie/archive/2012/06/18/2553300.html)","slug":"Spring源码阅读之AOP两种代理模式","published":1,"updated":"2018-06-28T03:44:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77e000wugv5cdm3t66s","content":"<p><img src=\"/.io//20180628.png\" alt=\"AOP\"><br><a id=\"more\"></a></p>\n<p><a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">github简易Spring实现</a></p>\n<p>一般用作：日志，权限控制，异常，事务等情况下。</p>\n<p>xml中的解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;autoProxyCreator&quot; class=&quot;us.codecraft.tinyioc.aop.AspectJAwareAdvisorAutoProxyCreator&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;timeInterceptor&quot; class=&quot;us.codecraft.tinyioc.aop.TimerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;aspectjAspect&quot; class=&quot;us.codecraft.tinyioc.aop.AspectJExpressionPointcutAdvisor&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;advice&quot; ref=&quot;timeInterceptor&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=&quot;expression&quot; value=&quot;execution(* us.codecraft.tinyioc.*.*(..))&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>AspectJAwareAdvisorAutoProxyCreator implements BeanPostProcessor<br>所以扫描这个类的时候会执行AspectJAwareAdvisorAutoProxyCreator.postProcessAfterInitialization()。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object postProcessAfterInitialization(Object bean, String beanName) throws Exception &#123;</span><br><span class=\"line\">\t\tif (bean instanceof AspectJExpressionPointcutAdvisor) &#123;</span><br><span class=\"line\">\t\t\treturn bean;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (bean instanceof MethodInterceptor) &#123;</span><br><span class=\"line\">\t\t\treturn bean;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tList&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory</span><br><span class=\"line\">\t\t\t\t.getBeansForType(AspectJExpressionPointcutAdvisor.class);</span><br><span class=\"line\">\t\tfor (AspectJExpressionPointcutAdvisor advisor : advisors) &#123;</span><br><span class=\"line\">\t\t\tif (advisor.getPointcut().getClassFilter().matches(bean.getClass())) &#123;</span><br><span class=\"line\">                ProxyFactory advisedSupport = new ProxyFactory();</span><br><span class=\"line\">\t\t\t\tadvisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());</span><br><span class=\"line\">\t\t\t\tadvisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tTargetSource targetSource = new TargetSource(bean, bean.getClass(), bean.getClass().getInterfaces());</span><br><span class=\"line\">\t\t\t\tadvisedSupport.setTargetSource(targetSource);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\treturn advisedSupport.getProxy();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn bean;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>然后遍历所有的AspectJExpressionPointcutAdvisor,如果有其他的bean满足条件advisor.getPointcut().getClassFilter().matches(bean.getClass())那么则返回代理对象。</p>\n<p>这里面的返回代理对象如果用代码来写的话就是下面这样，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   // 1. 设置被代理对象(Joinpoint)</span><br><span class=\"line\">AdvisedSupport advisedSupport = new AdvisedSupport();</span><br><span class=\"line\">TargetSource targetSource = new TargetSource(helloWorldService, HelloWorldServiceImpl.class,</span><br><span class=\"line\">\t\tHelloWorldService.class);</span><br><span class=\"line\">advisedSupport.setTargetSource(targetSource);</span><br><span class=\"line\"></span><br><span class=\"line\">//设置匹配的match</span><br><span class=\"line\">MethodMatcher methodMatcher = new MethodMatcher() &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public boolean matches(Method method, Class targetClass) &#123;</span><br><span class=\"line\">           return true;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">advisedSupport.setMethodMatcher(methodMatcher);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 设置拦截器(Advice)</span><br><span class=\"line\">TimerInterceptor timerInterceptor = new TimerInterceptor();</span><br><span class=\"line\">advisedSupport.setMethodInterceptor(timerInterceptor);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 创建代理(Proxy)</span><br><span class=\"line\">JdkDynamicAopProxy jdkDynamicAopProxy = new JdkDynamicAopProxy(advisedSupport);</span><br><span class=\"line\">HelloWorldService helloWorldServiceProxy = (HelloWorldService) jdkDynamicAopProxy.getProxy();</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. 基于AOP的调用</span><br><span class=\"line\">helloWorldServiceProxy.helloWorld();</span><br></pre></td></tr></table></figure>\n<p>advisedSupport{targetSource,methodMatcher,methodInterceptor}<br>这个里面记录了代理目标，和匹配的expression和具体的拦截操作</p>\n<h4 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h4><p>implements InvocationHandler</p>\n<p>先获取代理类Proxy.newProxyInstance(getClass().getClassLoader(), advised.getTargetSource().getInterfaces(), this);，然后implements InvocationHandler ,上面的this,执行target方法的时候就会优先执行InvocationHandler.invoke(final Object proxy, final Method method, final Object[] args);</p>\n<h5 id=\"Proxy-newProxyInstance\"><a href=\"#Proxy-newProxyInstance\" class=\"headerlink\" title=\"Proxy.newProxyInstance()\"></a>Proxy.newProxyInstance()</h5><p>这个是jdk动态代理，需要代理类实现接口，而且只能代理接口里面的方法，因为使用接口来创建代理。</p>\n<p>Proxy.newProxyInstance(),获取代理类方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader,</span><br><span class=\"line\">                                         Class&lt;?&gt;[] interfaces,</span><br><span class=\"line\">                                         InvocationHandler h)</span><br><span class=\"line\">       throws IllegalArgumentException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       Objects.requireNonNull(h);//InvocationHandler 不为空</span><br><span class=\"line\"></span><br><span class=\"line\">       final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">       </span><br><span class=\"line\">       /*</span><br><span class=\"line\">        * Look up or generate the designated proxy class.</span><br><span class=\"line\">        * 查找或生成指定的代理类。</span><br><span class=\"line\">        */</span><br><span class=\"line\">       Class&lt;?&gt; cl = getProxyClass0(loader, intfs);//</span><br><span class=\"line\"></span><br><span class=\"line\">       /*</span><br><span class=\"line\">        * Invoke its constructor with the designated invocation handler.</span><br><span class=\"line\">        * 用指定的调用处理程序调用它的构造函数。 constructorParams = InvocationHandler.class</span><br><span class=\"line\">        */</span><br><span class=\"line\">       final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">      </span><br><span class=\"line\">       return cons.newInstance(new Object[]&#123;h&#125;);//返回代理类</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>getProxyClass0()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class=\"line\">                                          Class&lt;?&gt;... interfaces) &#123;</span><br><span class=\"line\">       if (interfaces.length &gt; 65535) &#123;</span><br><span class=\"line\">           throw new IllegalArgumentException(&quot;interface limit exceeded&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // If the proxy class defined by the given loader implementing</span><br><span class=\"line\">       // the given interfaces exists, this will simply return the cached copy;</span><br><span class=\"line\">       // otherwise, it will create the proxy class via the ProxyClassFactory</span><br><span class=\"line\">       //如果classloader加载的接口代理类存在，直接从cache中国返回</span><br><span class=\"line\">       //否则从ProxyClassFactory创建一个新的代理类</span><br><span class=\"line\">       return proxyClassCache.get(loader, interfaces);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CGLIB\"><a href=\"#CGLIB\" class=\"headerlink\" title=\"CGLIB\"></a>CGLIB</h4><p>implements MethodInterceptor </p>\n<p>获取代理类</p>\n<p>Enhancer e=new Enhancer();//创建代理对象类<br>e.setSuperclass(object.getClass());//声明代理对象的父类是谁（是目标对象）<br>e.setCallback(this);//设置回调函数，即调用intercept()<br>return e.create();//返回创建的代理对象</p>\n<p>执行intercept(Object obj, Method method, Object[] args, MethodProxy proxy);</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27757233\" target=\"_blank\" rel=\"noopener\">Java JDK代理、CGLIB、AspectJ代理分析比较</a></li>\n<li><a href=\"https://blog.csdn.net/moreevan/article/details/11977115\" target=\"_blank\" rel=\"noopener\">Spring AOP 实现原理</a></li>\n<li><a href=\"http://www.cnblogs.com/dazhaxie/archive/2012/06/18/2553300.html\" target=\"_blank\" rel=\"noopener\">Spring源代码解析(收藏)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/.io//20180628.png\" alt=\"AOP\"><br></p>","more":"<p></p>\n<p><a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"noopener\">github简易Spring实现</a></p>\n<p>一般用作：日志，权限控制，异常，事务等情况下。</p>\n<p>xml中的解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;autoProxyCreator&quot; class=&quot;us.codecraft.tinyioc.aop.AspectJAwareAdvisorAutoProxyCreator&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;timeInterceptor&quot; class=&quot;us.codecraft.tinyioc.aop.TimerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;aspectjAspect&quot; class=&quot;us.codecraft.tinyioc.aop.AspectJExpressionPointcutAdvisor&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;advice&quot; ref=&quot;timeInterceptor&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">    &lt;property name=&quot;expression&quot; value=&quot;execution(* us.codecraft.tinyioc.*.*(..))&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>AspectJAwareAdvisorAutoProxyCreator implements BeanPostProcessor<br>所以扫描这个类的时候会执行AspectJAwareAdvisorAutoProxyCreator.postProcessAfterInitialization()。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object postProcessAfterInitialization(Object bean, String beanName) throws Exception &#123;</span><br><span class=\"line\">\t\tif (bean instanceof AspectJExpressionPointcutAdvisor) &#123;</span><br><span class=\"line\">\t\t\treturn bean;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (bean instanceof MethodInterceptor) &#123;</span><br><span class=\"line\">\t\t\treturn bean;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tList&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory</span><br><span class=\"line\">\t\t\t\t.getBeansForType(AspectJExpressionPointcutAdvisor.class);</span><br><span class=\"line\">\t\tfor (AspectJExpressionPointcutAdvisor advisor : advisors) &#123;</span><br><span class=\"line\">\t\t\tif (advisor.getPointcut().getClassFilter().matches(bean.getClass())) &#123;</span><br><span class=\"line\">                ProxyFactory advisedSupport = new ProxyFactory();</span><br><span class=\"line\">\t\t\t\tadvisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());</span><br><span class=\"line\">\t\t\t\tadvisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tTargetSource targetSource = new TargetSource(bean, bean.getClass(), bean.getClass().getInterfaces());</span><br><span class=\"line\">\t\t\t\tadvisedSupport.setTargetSource(targetSource);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\treturn advisedSupport.getProxy();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn bean;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>然后遍历所有的AspectJExpressionPointcutAdvisor,如果有其他的bean满足条件advisor.getPointcut().getClassFilter().matches(bean.getClass())那么则返回代理对象。</p>\n<p>这里面的返回代理对象如果用代码来写的话就是下面这样，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   // 1. 设置被代理对象(Joinpoint)</span><br><span class=\"line\">AdvisedSupport advisedSupport = new AdvisedSupport();</span><br><span class=\"line\">TargetSource targetSource = new TargetSource(helloWorldService, HelloWorldServiceImpl.class,</span><br><span class=\"line\">\t\tHelloWorldService.class);</span><br><span class=\"line\">advisedSupport.setTargetSource(targetSource);</span><br><span class=\"line\"></span><br><span class=\"line\">//设置匹配的match</span><br><span class=\"line\">MethodMatcher methodMatcher = new MethodMatcher() &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public boolean matches(Method method, Class targetClass) &#123;</span><br><span class=\"line\">           return true;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">advisedSupport.setMethodMatcher(methodMatcher);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 设置拦截器(Advice)</span><br><span class=\"line\">TimerInterceptor timerInterceptor = new TimerInterceptor();</span><br><span class=\"line\">advisedSupport.setMethodInterceptor(timerInterceptor);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 创建代理(Proxy)</span><br><span class=\"line\">JdkDynamicAopProxy jdkDynamicAopProxy = new JdkDynamicAopProxy(advisedSupport);</span><br><span class=\"line\">HelloWorldService helloWorldServiceProxy = (HelloWorldService) jdkDynamicAopProxy.getProxy();</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. 基于AOP的调用</span><br><span class=\"line\">helloWorldServiceProxy.helloWorld();</span><br></pre></td></tr></table></figure>\n<p>advisedSupport{targetSource,methodMatcher,methodInterceptor}<br>这个里面记录了代理目标，和匹配的expression和具体的拦截操作</p>\n<h4 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h4><p>implements InvocationHandler</p>\n<p>先获取代理类Proxy.newProxyInstance(getClass().getClassLoader(), advised.getTargetSource().getInterfaces(), this);，然后implements InvocationHandler ,上面的this,执行target方法的时候就会优先执行InvocationHandler.invoke(final Object proxy, final Method method, final Object[] args);</p>\n<h5 id=\"Proxy-newProxyInstance\"><a href=\"#Proxy-newProxyInstance\" class=\"headerlink\" title=\"Proxy.newProxyInstance()\"></a>Proxy.newProxyInstance()</h5><p>这个是jdk动态代理，需要代理类实现接口，而且只能代理接口里面的方法，因为使用接口来创建代理。</p>\n<p>Proxy.newProxyInstance(),获取代理类方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader,</span><br><span class=\"line\">                                         Class&lt;?&gt;[] interfaces,</span><br><span class=\"line\">                                         InvocationHandler h)</span><br><span class=\"line\">       throws IllegalArgumentException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       Objects.requireNonNull(h);//InvocationHandler 不为空</span><br><span class=\"line\"></span><br><span class=\"line\">       final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">       </span><br><span class=\"line\">       /*</span><br><span class=\"line\">        * Look up or generate the designated proxy class.</span><br><span class=\"line\">        * 查找或生成指定的代理类。</span><br><span class=\"line\">        */</span><br><span class=\"line\">       Class&lt;?&gt; cl = getProxyClass0(loader, intfs);//</span><br><span class=\"line\"></span><br><span class=\"line\">       /*</span><br><span class=\"line\">        * Invoke its constructor with the designated invocation handler.</span><br><span class=\"line\">        * 用指定的调用处理程序调用它的构造函数。 constructorParams = InvocationHandler.class</span><br><span class=\"line\">        */</span><br><span class=\"line\">       final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">      </span><br><span class=\"line\">       return cons.newInstance(new Object[]&#123;h&#125;);//返回代理类</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>getProxyClass0()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class=\"line\">                                          Class&lt;?&gt;... interfaces) &#123;</span><br><span class=\"line\">       if (interfaces.length &gt; 65535) &#123;</span><br><span class=\"line\">           throw new IllegalArgumentException(&quot;interface limit exceeded&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // If the proxy class defined by the given loader implementing</span><br><span class=\"line\">       // the given interfaces exists, this will simply return the cached copy;</span><br><span class=\"line\">       // otherwise, it will create the proxy class via the ProxyClassFactory</span><br><span class=\"line\">       //如果classloader加载的接口代理类存在，直接从cache中国返回</span><br><span class=\"line\">       //否则从ProxyClassFactory创建一个新的代理类</span><br><span class=\"line\">       return proxyClassCache.get(loader, interfaces);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"CGLIB\"><a href=\"#CGLIB\" class=\"headerlink\" title=\"CGLIB\"></a>CGLIB</h4><p>implements MethodInterceptor </p>\n<p>获取代理类</p>\n<p>Enhancer e=new Enhancer();//创建代理对象类<br>e.setSuperclass(object.getClass());//声明代理对象的父类是谁（是目标对象）<br>e.setCallback(this);//设置回调函数，即调用intercept()<br>return e.create();//返回创建的代理对象</p>\n<p>执行intercept(Object obj, Method method, Object[] args, MethodProxy proxy);</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27757233\" target=\"_blank\" rel=\"noopener\">Java JDK代理、CGLIB、AspectJ代理分析比较</a></li>\n<li><a href=\"https://blog.csdn.net/moreevan/article/details/11977115\" target=\"_blank\" rel=\"noopener\">Spring AOP 实现原理</a></li>\n<li><a href=\"http://www.cnblogs.com/dazhaxie/archive/2012/06/18/2553300.html\" target=\"_blank\" rel=\"noopener\">Spring源代码解析(收藏)</a></li>\n</ul>"},{"title":"Sublime 下运行Java文件","date":"2016-07-19T06:57:09.000Z","description":"添加批处理 Ctrl + B 运行","_content":"\n## Sublime下运行java文件\n<!--more-->\n#### 首先确保命令行可以正常使用javac和java，请自行百度。\n\n#### 在JDK的bin目录下新建runJava.bat文件，右键选编辑，复制粘贴如下代码并保存：\n\n```\n@echo off\ncd %~dp1\necho Compiling %~nx1......\nif EXIST %~n1.class (\ndel %~n1.class\n)\njavac -encoding UTF-8 %~nx1\nif exist %~n1.class (\necho ------OUTPUT------\njava %~n1\n)\n```\n#### 打开Sublime Text 3，依次点击Preference, Browse Packages，在打开的窗口中双击User文件夹，新建文件JavaC.sublime-build，用记事本打开，粘贴下面的代码并保存关闭：\n```\n{\n\"shell_cmd\": \"runJava.bat \\\"$file\\\"\",\n\"file_regex\": \"^(...*?):([0-9]*):?([0-9]*)\",\n\"selector\": \"source.java\",\n\"encoding\": \"UTF-8\"\n}\n```\n目的是\n>将第一行的“shell_cmd\": javac \\\"$file\\\"\"改成\"shell_cmd\": \"runJava.bat \\\"$file\\\"\"\n\n\n或者通过Package Resource Viewer来找到要修改的文件\n\n#### 安装Package Resource Viewer。同上面的步骤，打开package control，输入PackageResourceViewer:Open Resource，回车后输入java，回车后输入Javac.sublime-build,就能够打开我们所需要修改的文件\n\n>主要是用批处理文件处理sublime中的文件，用runJava.bat 代替javac和java\n\n## 保存后即可在Sublime Text 3中按 **`Ctrl+B`** 编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错","source":"_posts/Sublime-下运行Java文件.md","raw":"---\ntitle: Sublime 下运行Java文件\ndate: 2016-07-19 14:57:09\ntags: [Sublime,编辑器]\ncategories: Sublime\ndescription: \"添加批处理 Ctrl + B 运行\"\n---\n\n## Sublime下运行java文件\n<!--more-->\n#### 首先确保命令行可以正常使用javac和java，请自行百度。\n\n#### 在JDK的bin目录下新建runJava.bat文件，右键选编辑，复制粘贴如下代码并保存：\n\n```\n@echo off\ncd %~dp1\necho Compiling %~nx1......\nif EXIST %~n1.class (\ndel %~n1.class\n)\njavac -encoding UTF-8 %~nx1\nif exist %~n1.class (\necho ------OUTPUT------\njava %~n1\n)\n```\n#### 打开Sublime Text 3，依次点击Preference, Browse Packages，在打开的窗口中双击User文件夹，新建文件JavaC.sublime-build，用记事本打开，粘贴下面的代码并保存关闭：\n```\n{\n\"shell_cmd\": \"runJava.bat \\\"$file\\\"\",\n\"file_regex\": \"^(...*?):([0-9]*):?([0-9]*)\",\n\"selector\": \"source.java\",\n\"encoding\": \"UTF-8\"\n}\n```\n目的是\n>将第一行的“shell_cmd\": javac \\\"$file\\\"\"改成\"shell_cmd\": \"runJava.bat \\\"$file\\\"\"\n\n\n或者通过Package Resource Viewer来找到要修改的文件\n\n#### 安装Package Resource Viewer。同上面的步骤，打开package control，输入PackageResourceViewer:Open Resource，回车后输入java，回车后输入Javac.sublime-build,就能够打开我们所需要修改的文件\n\n>主要是用批处理文件处理sublime中的文件，用runJava.bat 代替javac和java\n\n## 保存后即可在Sublime Text 3中按 **`Ctrl+B`** 编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错","slug":"Sublime-下运行Java文件","published":1,"updated":"2016-08-31T12:24:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77h000yugv5r7n7603h","content":"<h2 id=\"Sublime下运行java文件\"><a href=\"#Sublime下运行java文件\" class=\"headerlink\" title=\"Sublime下运行java文件\"></a>Sublime下运行java文件</h2><a id=\"more\"></a>\n<h4 id=\"首先确保命令行可以正常使用javac和java，请自行百度。\"><a href=\"#首先确保命令行可以正常使用javac和java，请自行百度。\" class=\"headerlink\" title=\"首先确保命令行可以正常使用javac和java，请自行百度。\"></a>首先确保命令行可以正常使用javac和java，请自行百度。</h4><h4 id=\"在JDK的bin目录下新建runJava-bat文件，右键选编辑，复制粘贴如下代码并保存：\"><a href=\"#在JDK的bin目录下新建runJava-bat文件，右键选编辑，复制粘贴如下代码并保存：\" class=\"headerlink\" title=\"在JDK的bin目录下新建runJava.bat文件，右键选编辑，复制粘贴如下代码并保存：\"></a>在JDK的bin目录下新建runJava.bat文件，右键选编辑，复制粘贴如下代码并保存：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">cd %~dp1</span><br><span class=\"line\">echo Compiling %~nx1......</span><br><span class=\"line\">if EXIST %~n1.class (</span><br><span class=\"line\">del %~n1.class</span><br><span class=\"line\">)</span><br><span class=\"line\">javac -encoding UTF-8 %~nx1</span><br><span class=\"line\">if exist %~n1.class (</span><br><span class=\"line\">echo ------OUTPUT------</span><br><span class=\"line\">java %~n1</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"打开Sublime-Text-3，依次点击Preference-Browse-Packages，在打开的窗口中双击User文件夹，新建文件JavaC-sublime-build，用记事本打开，粘贴下面的代码并保存关闭：\"><a href=\"#打开Sublime-Text-3，依次点击Preference-Browse-Packages，在打开的窗口中双击User文件夹，新建文件JavaC-sublime-build，用记事本打开，粘贴下面的代码并保存关闭：\" class=\"headerlink\" title=\"打开Sublime Text 3，依次点击Preference, Browse Packages，在打开的窗口中双击User文件夹，新建文件JavaC.sublime-build，用记事本打开，粘贴下面的代码并保存关闭：\"></a>打开Sublime Text 3，依次点击Preference, Browse Packages，在打开的窗口中双击User文件夹，新建文件JavaC.sublime-build，用记事本打开，粘贴下面的代码并保存关闭：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;shell_cmd&quot;: &quot;runJava.bat \\&quot;$file\\&quot;&quot;,</span><br><span class=\"line\">&quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,</span><br><span class=\"line\">&quot;selector&quot;: &quot;source.java&quot;,</span><br><span class=\"line\">&quot;encoding&quot;: &quot;UTF-8&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目的是</p>\n<blockquote>\n<p>将第一行的“shell_cmd”: javac \\”$file\\””改成”shell_cmd”: “runJava.bat \\”$file\\””</p>\n</blockquote>\n<p>或者通过Package Resource Viewer来找到要修改的文件</p>\n<h4 id=\"安装Package-Resource-Viewer。同上面的步骤，打开package-control，输入PackageResourceViewer-Open-Resource，回车后输入java，回车后输入Javac-sublime-build-就能够打开我们所需要修改的文件\"><a href=\"#安装Package-Resource-Viewer。同上面的步骤，打开package-control，输入PackageResourceViewer-Open-Resource，回车后输入java，回车后输入Javac-sublime-build-就能够打开我们所需要修改的文件\" class=\"headerlink\" title=\"安装Package Resource Viewer。同上面的步骤，打开package control，输入PackageResourceViewer:Open Resource，回车后输入java，回车后输入Javac.sublime-build,就能够打开我们所需要修改的文件\"></a>安装Package Resource Viewer。同上面的步骤，打开package control，输入PackageResourceViewer:Open Resource，回车后输入java，回车后输入Javac.sublime-build,就能够打开我们所需要修改的文件</h4><blockquote>\n<p>主要是用批处理文件处理sublime中的文件，用runJava.bat 代替javac和java</p>\n</blockquote>\n<h2 id=\"保存后即可在Sublime-Text-3中按-Ctrl-B-编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错\"><a href=\"#保存后即可在Sublime-Text-3中按-Ctrl-B-编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错\" class=\"headerlink\" title=\"保存后即可在Sublime Text 3中按 Ctrl+B 编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错\"></a>保存后即可在Sublime Text 3中按 <strong><code>Ctrl+B</code></strong> 编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错</h2>","site":{"data":{}},"excerpt":"<h2 id=\"Sublime下运行java文件\"><a href=\"#Sublime下运行java文件\" class=\"headerlink\" title=\"Sublime下运行java文件\"></a>Sublime下运行java文件</h2>","more":"<h4 id=\"首先确保命令行可以正常使用javac和java，请自行百度。\"><a href=\"#首先确保命令行可以正常使用javac和java，请自行百度。\" class=\"headerlink\" title=\"首先确保命令行可以正常使用javac和java，请自行百度。\"></a>首先确保命令行可以正常使用javac和java，请自行百度。</h4><h4 id=\"在JDK的bin目录下新建runJava-bat文件，右键选编辑，复制粘贴如下代码并保存：\"><a href=\"#在JDK的bin目录下新建runJava-bat文件，右键选编辑，复制粘贴如下代码并保存：\" class=\"headerlink\" title=\"在JDK的bin目录下新建runJava.bat文件，右键选编辑，复制粘贴如下代码并保存：\"></a>在JDK的bin目录下新建runJava.bat文件，右键选编辑，复制粘贴如下代码并保存：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">cd %~dp1</span><br><span class=\"line\">echo Compiling %~nx1......</span><br><span class=\"line\">if EXIST %~n1.class (</span><br><span class=\"line\">del %~n1.class</span><br><span class=\"line\">)</span><br><span class=\"line\">javac -encoding UTF-8 %~nx1</span><br><span class=\"line\">if exist %~n1.class (</span><br><span class=\"line\">echo ------OUTPUT------</span><br><span class=\"line\">java %~n1</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"打开Sublime-Text-3，依次点击Preference-Browse-Packages，在打开的窗口中双击User文件夹，新建文件JavaC-sublime-build，用记事本打开，粘贴下面的代码并保存关闭：\"><a href=\"#打开Sublime-Text-3，依次点击Preference-Browse-Packages，在打开的窗口中双击User文件夹，新建文件JavaC-sublime-build，用记事本打开，粘贴下面的代码并保存关闭：\" class=\"headerlink\" title=\"打开Sublime Text 3，依次点击Preference, Browse Packages，在打开的窗口中双击User文件夹，新建文件JavaC.sublime-build，用记事本打开，粘贴下面的代码并保存关闭：\"></a>打开Sublime Text 3，依次点击Preference, Browse Packages，在打开的窗口中双击User文件夹，新建文件JavaC.sublime-build，用记事本打开，粘贴下面的代码并保存关闭：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;shell_cmd&quot;: &quot;runJava.bat \\&quot;$file\\&quot;&quot;,</span><br><span class=\"line\">&quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,</span><br><span class=\"line\">&quot;selector&quot;: &quot;source.java&quot;,</span><br><span class=\"line\">&quot;encoding&quot;: &quot;UTF-8&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目的是</p>\n<blockquote>\n<p>将第一行的“shell_cmd”: javac \\”$file\\””改成”shell_cmd”: “runJava.bat \\”$file\\””</p>\n</blockquote>\n<p>或者通过Package Resource Viewer来找到要修改的文件</p>\n<h4 id=\"安装Package-Resource-Viewer。同上面的步骤，打开package-control，输入PackageResourceViewer-Open-Resource，回车后输入java，回车后输入Javac-sublime-build-就能够打开我们所需要修改的文件\"><a href=\"#安装Package-Resource-Viewer。同上面的步骤，打开package-control，输入PackageResourceViewer-Open-Resource，回车后输入java，回车后输入Javac-sublime-build-就能够打开我们所需要修改的文件\" class=\"headerlink\" title=\"安装Package Resource Viewer。同上面的步骤，打开package control，输入PackageResourceViewer:Open Resource，回车后输入java，回车后输入Javac.sublime-build,就能够打开我们所需要修改的文件\"></a>安装Package Resource Viewer。同上面的步骤，打开package control，输入PackageResourceViewer:Open Resource，回车后输入java，回车后输入Javac.sublime-build,就能够打开我们所需要修改的文件</h4><blockquote>\n<p>主要是用批处理文件处理sublime中的文件，用runJava.bat 代替javac和java</p>\n</blockquote>\n<h2 id=\"保存后即可在Sublime-Text-3中按-Ctrl-B-编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错\"><a href=\"#保存后即可在Sublime-Text-3中按-Ctrl-B-编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错\" class=\"headerlink\" title=\"保存后即可在Sublime Text 3中按 Ctrl+B 编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错\"></a>保存后即可在Sublime Text 3中按 <strong><code>Ctrl+B</code></strong> 编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错</h2>"},{"title":"Thinkin in java 基础之网络Socket","description":"TCP/UDP 其他","date":"2016-09-23T23:01:20.000Z","_content":"\n#### TCP\n\nServer:\n\n```\npackage Socket;\nimport java.net.*;\nimport java.io.*;\npublic  class TCPServer {\n\tpublic static void main(String[] args) throws Exception{\n\t\tServerSocket ss=new ServerSocket(6666);\n\t\t\twhile (true) {\n\t\t\t\tSocket s=ss.accept();\n\t\t\t\tSystem.out.println(\"hello word!\");\n\t\t\t\tDataInputStream  Dim=new DataInputStream(s.getInputStream());\n\t\t\t\tSystem.out.println(Dim.readUTF());\n\t\t\t\ts.close();\n\t\t\t}\n\t}\n\n}\n```\nTCPClient\n\n```\npackage Socket;\n\nimport java.io.DataOutputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class TCPClient {\n\tpublic TCPClient() {\n\t}\n\tpublic static void main(String[] args) throws Exception{\n\t\tSocket s =new Socket(\"127.0.0.1\",6666);\n\t\tOutputStream os=s.getOutputStream();\n\t\tDataOutputStream dos=new DataOutputStream(os);\n\t\tdos.writeUTF(\"Hello Server!\");\n\t\tdos.flush();\n\t\tdos.close();\n\t\ts.close();\n\t}\n\n}\n\n```\n#### UDP\n\nUDPServer\n\n```\npackage Socket;\nimport java.net.*;\nimport java.io.*;\npublic  class UDPServer {\n\tpublic static void main(String[] args) throws Exception {\n\t\tbyte[] buf=new byte[1024];\n\t\tDatagramPacket dp=new DatagramPacket(buf,buf.length);\n\t\tDatagramSocket ds=new DatagramSocket(6666);\n\t\twhile (true) {\n\t\t\tds.receive(dp);\n\t\t\tSystem.out.println(\"IP:\"+ds.getInetAddress());\n\t\t\tSystem.out.println(\"Port:\"+ds.getPort());\n\t\t//System.out.println(new String(buf,0,dp.getLength()));\n\t\t\tByteArrayInputStream bais=new ByteArrayInputStream(buf);\n\t\t\tDataInputStream dis=new DataInputStream(bais);\n\t\t\tSystem.out.println(dis.readLong());\n\t\t}\n\t}\n}\n```\nUDPClient\n\n```\npackage Socket;\nimport java.net.*;\nimport java.io.*;\npublic  class UDPClient {\n\tpublic static void main(String[] args)throws Exception {\n\t\tlong i=10000L;\n\t\tByteArrayOutputStream baos=new ByteArrayOutputStream();\n\t\tDataOutputStream dos=new DataOutputStream(baos);\n\t\tdos.writeLong(i);\n\t\t//byte[] buf=(new String(\"hello\")).getBytes();\n\t\tbyte[] buf=baos.toByteArray();\n\t\tSystem.out.println(buf.length);\n\t\tDatagramPacket dp=new DatagramPacket(buf,buf.length,new InetSocketAddress(\"127.0.0.1\",6666));\n\t\tDatagramSocket ds=new DatagramSocket(8888);\n\t\tds.send(dp);\n\t\tds.close();\n\t}\n\n}\n```\n\n","source":"_posts/Thinking-in-java-基础之网络Socket.md","raw":"---\ntitle: Thinkin in java 基础之网络Socket\ntags:\n  - Socket\ncategories: java\ndescription: \"TCP/UDP 其他\"\ndate: 2016-09-24 07:01:20\n---\n\n#### TCP\n\nServer:\n\n```\npackage Socket;\nimport java.net.*;\nimport java.io.*;\npublic  class TCPServer {\n\tpublic static void main(String[] args) throws Exception{\n\t\tServerSocket ss=new ServerSocket(6666);\n\t\t\twhile (true) {\n\t\t\t\tSocket s=ss.accept();\n\t\t\t\tSystem.out.println(\"hello word!\");\n\t\t\t\tDataInputStream  Dim=new DataInputStream(s.getInputStream());\n\t\t\t\tSystem.out.println(Dim.readUTF());\n\t\t\t\ts.close();\n\t\t\t}\n\t}\n\n}\n```\nTCPClient\n\n```\npackage Socket;\n\nimport java.io.DataOutputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class TCPClient {\n\tpublic TCPClient() {\n\t}\n\tpublic static void main(String[] args) throws Exception{\n\t\tSocket s =new Socket(\"127.0.0.1\",6666);\n\t\tOutputStream os=s.getOutputStream();\n\t\tDataOutputStream dos=new DataOutputStream(os);\n\t\tdos.writeUTF(\"Hello Server!\");\n\t\tdos.flush();\n\t\tdos.close();\n\t\ts.close();\n\t}\n\n}\n\n```\n#### UDP\n\nUDPServer\n\n```\npackage Socket;\nimport java.net.*;\nimport java.io.*;\npublic  class UDPServer {\n\tpublic static void main(String[] args) throws Exception {\n\t\tbyte[] buf=new byte[1024];\n\t\tDatagramPacket dp=new DatagramPacket(buf,buf.length);\n\t\tDatagramSocket ds=new DatagramSocket(6666);\n\t\twhile (true) {\n\t\t\tds.receive(dp);\n\t\t\tSystem.out.println(\"IP:\"+ds.getInetAddress());\n\t\t\tSystem.out.println(\"Port:\"+ds.getPort());\n\t\t//System.out.println(new String(buf,0,dp.getLength()));\n\t\t\tByteArrayInputStream bais=new ByteArrayInputStream(buf);\n\t\t\tDataInputStream dis=new DataInputStream(bais);\n\t\t\tSystem.out.println(dis.readLong());\n\t\t}\n\t}\n}\n```\nUDPClient\n\n```\npackage Socket;\nimport java.net.*;\nimport java.io.*;\npublic  class UDPClient {\n\tpublic static void main(String[] args)throws Exception {\n\t\tlong i=10000L;\n\t\tByteArrayOutputStream baos=new ByteArrayOutputStream();\n\t\tDataOutputStream dos=new DataOutputStream(baos);\n\t\tdos.writeLong(i);\n\t\t//byte[] buf=(new String(\"hello\")).getBytes();\n\t\tbyte[] buf=baos.toByteArray();\n\t\tSystem.out.println(buf.length);\n\t\tDatagramPacket dp=new DatagramPacket(buf,buf.length,new InetSocketAddress(\"127.0.0.1\",6666));\n\t\tDatagramSocket ds=new DatagramSocket(8888);\n\t\tds.send(dp);\n\t\tds.close();\n\t}\n\n}\n```\n\n","slug":"Thinking-in-java-基础之网络Socket","published":1,"updated":"2016-09-24T12:04:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77i0010ugv5n2zkcw63","content":"<h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><p>Server:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Socket;</span><br><span class=\"line\">import java.net.*;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public  class TCPServer &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\">\t\tServerSocket ss=new ServerSocket(6666);</span><br><span class=\"line\">\t\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\t\tSocket s=ss.accept();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;hello word!&quot;);</span><br><span class=\"line\">\t\t\t\tDataInputStream  Dim=new DataInputStream(s.getInputStream());</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Dim.readUTF());</span><br><span class=\"line\">\t\t\t\ts.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TCPClient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Socket;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.DataOutputStream;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TCPClient &#123;</span><br><span class=\"line\">\tpublic TCPClient() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\">\t\tSocket s =new Socket(&quot;127.0.0.1&quot;,6666);</span><br><span class=\"line\">\t\tOutputStream os=s.getOutputStream();</span><br><span class=\"line\">\t\tDataOutputStream dos=new DataOutputStream(os);</span><br><span class=\"line\">\t\tdos.writeUTF(&quot;Hello Server!&quot;);</span><br><span class=\"line\">\t\tdos.flush();</span><br><span class=\"line\">\t\tdos.close();</span><br><span class=\"line\">\t\ts.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><p>UDPServer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Socket;</span><br><span class=\"line\">import java.net.*;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public  class UDPServer &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tbyte[] buf=new byte[1024];</span><br><span class=\"line\">\t\tDatagramPacket dp=new DatagramPacket(buf,buf.length);</span><br><span class=\"line\">\t\tDatagramSocket ds=new DatagramSocket(6666);</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\tds.receive(dp);</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;IP:&quot;+ds.getInetAddress());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;Port:&quot;+ds.getPort());</span><br><span class=\"line\">\t\t//System.out.println(new String(buf,0,dp.getLength()));</span><br><span class=\"line\">\t\t\tByteArrayInputStream bais=new ByteArrayInputStream(buf);</span><br><span class=\"line\">\t\t\tDataInputStream dis=new DataInputStream(bais);</span><br><span class=\"line\">\t\t\tSystem.out.println(dis.readLong());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UDPClient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Socket;</span><br><span class=\"line\">import java.net.*;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public  class UDPClient &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">\t\tlong i=10000L;</span><br><span class=\"line\">\t\tByteArrayOutputStream baos=new ByteArrayOutputStream();</span><br><span class=\"line\">\t\tDataOutputStream dos=new DataOutputStream(baos);</span><br><span class=\"line\">\t\tdos.writeLong(i);</span><br><span class=\"line\">\t\t//byte[] buf=(new String(&quot;hello&quot;)).getBytes();</span><br><span class=\"line\">\t\tbyte[] buf=baos.toByteArray();</span><br><span class=\"line\">\t\tSystem.out.println(buf.length);</span><br><span class=\"line\">\t\tDatagramPacket dp=new DatagramPacket(buf,buf.length,new InetSocketAddress(&quot;127.0.0.1&quot;,6666));</span><br><span class=\"line\">\t\tDatagramSocket ds=new DatagramSocket(8888);</span><br><span class=\"line\">\t\tds.send(dp);</span><br><span class=\"line\">\t\tds.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><p>Server:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Socket;</span><br><span class=\"line\">import java.net.*;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public  class TCPServer &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\">\t\tServerSocket ss=new ServerSocket(6666);</span><br><span class=\"line\">\t\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\t\tSocket s=ss.accept();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;hello word!&quot;);</span><br><span class=\"line\">\t\t\t\tDataInputStream  Dim=new DataInputStream(s.getInputStream());</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Dim.readUTF());</span><br><span class=\"line\">\t\t\t\ts.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TCPClient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Socket;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.DataOutputStream;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TCPClient &#123;</span><br><span class=\"line\">\tpublic TCPClient() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\">\t\tSocket s =new Socket(&quot;127.0.0.1&quot;,6666);</span><br><span class=\"line\">\t\tOutputStream os=s.getOutputStream();</span><br><span class=\"line\">\t\tDataOutputStream dos=new DataOutputStream(os);</span><br><span class=\"line\">\t\tdos.writeUTF(&quot;Hello Server!&quot;);</span><br><span class=\"line\">\t\tdos.flush();</span><br><span class=\"line\">\t\tdos.close();</span><br><span class=\"line\">\t\ts.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><p>UDPServer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Socket;</span><br><span class=\"line\">import java.net.*;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public  class UDPServer &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tbyte[] buf=new byte[1024];</span><br><span class=\"line\">\t\tDatagramPacket dp=new DatagramPacket(buf,buf.length);</span><br><span class=\"line\">\t\tDatagramSocket ds=new DatagramSocket(6666);</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\tds.receive(dp);</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;IP:&quot;+ds.getInetAddress());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;Port:&quot;+ds.getPort());</span><br><span class=\"line\">\t\t//System.out.println(new String(buf,0,dp.getLength()));</span><br><span class=\"line\">\t\t\tByteArrayInputStream bais=new ByteArrayInputStream(buf);</span><br><span class=\"line\">\t\t\tDataInputStream dis=new DataInputStream(bais);</span><br><span class=\"line\">\t\t\tSystem.out.println(dis.readLong());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UDPClient</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Socket;</span><br><span class=\"line\">import java.net.*;</span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public  class UDPClient &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">\t\tlong i=10000L;</span><br><span class=\"line\">\t\tByteArrayOutputStream baos=new ByteArrayOutputStream();</span><br><span class=\"line\">\t\tDataOutputStream dos=new DataOutputStream(baos);</span><br><span class=\"line\">\t\tdos.writeLong(i);</span><br><span class=\"line\">\t\t//byte[] buf=(new String(&quot;hello&quot;)).getBytes();</span><br><span class=\"line\">\t\tbyte[] buf=baos.toByteArray();</span><br><span class=\"line\">\t\tSystem.out.println(buf.length);</span><br><span class=\"line\">\t\tDatagramPacket dp=new DatagramPacket(buf,buf.length,new InetSocketAddress(&quot;127.0.0.1&quot;,6666));</span><br><span class=\"line\">\t\tDatagramSocket ds=new DatagramSocket(8888);</span><br><span class=\"line\">\t\tds.send(dp);</span><br><span class=\"line\">\t\tds.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"hadoop-Sqoop-Hive等的安装","date":"2017-07-19T22:38:48.000Z","description":"简单介绍安装过程，以及各个工具的作用","_content":"\n先介绍工具，然后进行安装\n#### hadoop 大象\n\nHDFS 文件系统 存储\nMapReduce     计算\nYARN 资源分配、管理工具MapReducev2\nHBase\n\n[hadoop的安装](https://muxiaobai.github.io/2017/07/19/Linux-%E4%B8%8B%E7%9A%84java%E5%AE%89%E8%A3%85%E3%80%81%E5%8F%98%E6%9B%B4%E4%BB%A5%E5%8F%8A%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98/)\n\n\n#### sqoop\n\n一个Apache的命令行工具 ，作用是：Transformation\n\nhadoop(HBase,Hive) 和结构化数据(structural data)的转换\n1.4.6 和1.99.3 建议1.4.6更稳定，使用的广泛，常见问题大都有解决。\n[Sqoop 1.99.3 安装](http://houshangxiao.iteye.com/blog/2070057)\n\n#### Hive 小蜜蜂 和 Pig 猪\n数据仓库\nMR写起来比较繁琐，产生Hive，而且Hive比较易懂，方便。\n一种通过SQL来操作分布式存储数据的数据仓库工具。交换式查询\nFaceBook开发的 \n文件类型: ',' 'tab' 本本文件  ORC  Parquet\n访问方式: CLI JDBC/ODBC WEB UI  Derby 内存数据库 单用户连接\nImpala 是实时的\n\nHive 默认是 MapReduce 引擎\nHive on Spark\n\n#### Spark\n\nSpark MapReduce Storm 是三种不同的计算处理\nMapReduce 是大的批量操作，不要求时限。基于文件系统，hdfs。\nSpark 是快速的批量操作，基于内存，所以速度快。其主要亮点在于把过程给数据。\nStorm是流式处理，快速实时。\nSpark Streaming 跟Storm类似，只不过Spark Streaming是小时间窗口的处理，Storm是实时的来一条处理一条。\n[三者比较](http://blog.csdn.net/wangfei8348/article/details/52924723)\nSpark SQL\n\n\n#### Zookeeper\n\n\n\n\n\n\n\n\n\n","source":"_posts/hadoop-Sqoop-Hive等的安装.md","raw":"---\ntitle: hadoop-Sqoop-Hive等的安装\ndate: 2017-07-20 06:38:48\ntags:   \ncategories: [hadoop]\ndescription: \"简单介绍安装过程，以及各个工具的作用\"\n---\n\n先介绍工具，然后进行安装\n#### hadoop 大象\n\nHDFS 文件系统 存储\nMapReduce     计算\nYARN 资源分配、管理工具MapReducev2\nHBase\n\n[hadoop的安装](https://muxiaobai.github.io/2017/07/19/Linux-%E4%B8%8B%E7%9A%84java%E5%AE%89%E8%A3%85%E3%80%81%E5%8F%98%E6%9B%B4%E4%BB%A5%E5%8F%8A%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98/)\n\n\n#### sqoop\n\n一个Apache的命令行工具 ，作用是：Transformation\n\nhadoop(HBase,Hive) 和结构化数据(structural data)的转换\n1.4.6 和1.99.3 建议1.4.6更稳定，使用的广泛，常见问题大都有解决。\n[Sqoop 1.99.3 安装](http://houshangxiao.iteye.com/blog/2070057)\n\n#### Hive 小蜜蜂 和 Pig 猪\n数据仓库\nMR写起来比较繁琐，产生Hive，而且Hive比较易懂，方便。\n一种通过SQL来操作分布式存储数据的数据仓库工具。交换式查询\nFaceBook开发的 \n文件类型: ',' 'tab' 本本文件  ORC  Parquet\n访问方式: CLI JDBC/ODBC WEB UI  Derby 内存数据库 单用户连接\nImpala 是实时的\n\nHive 默认是 MapReduce 引擎\nHive on Spark\n\n#### Spark\n\nSpark MapReduce Storm 是三种不同的计算处理\nMapReduce 是大的批量操作，不要求时限。基于文件系统，hdfs。\nSpark 是快速的批量操作，基于内存，所以速度快。其主要亮点在于把过程给数据。\nStorm是流式处理，快速实时。\nSpark Streaming 跟Storm类似，只不过Spark Streaming是小时间窗口的处理，Storm是实时的来一条处理一条。\n[三者比较](http://blog.csdn.net/wangfei8348/article/details/52924723)\nSpark SQL\n\n\n#### Zookeeper\n\n\n\n\n\n\n\n\n\n","slug":"hadoop-Sqoop-Hive等的安装","published":1,"updated":"2017-07-20T07:24:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77j0014ugv5v86ur7d9","content":"<p>先介绍工具，然后进行安装</p>\n<h4 id=\"hadoop-大象\"><a href=\"#hadoop-大象\" class=\"headerlink\" title=\"hadoop 大象\"></a>hadoop 大象</h4><p>HDFS 文件系统 存储<br>MapReduce     计算<br>YARN 资源分配、管理工具MapReducev2<br>HBase</p>\n<p><a href=\"https://muxiaobai.github.io/2017/07/19/Linux-%E4%B8%8B%E7%9A%84java%E5%AE%89%E8%A3%85%E3%80%81%E5%8F%98%E6%9B%B4%E4%BB%A5%E5%8F%8A%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98/\">hadoop的安装</a></p>\n<h4 id=\"sqoop\"><a href=\"#sqoop\" class=\"headerlink\" title=\"sqoop\"></a>sqoop</h4><p>一个Apache的命令行工具 ，作用是：Transformation</p>\n<p>hadoop(HBase,Hive) 和结构化数据(structural data)的转换<br>1.4.6 和1.99.3 建议1.4.6更稳定，使用的广泛，常见问题大都有解决。<br><a href=\"http://houshangxiao.iteye.com/blog/2070057\" target=\"_blank\" rel=\"noopener\">Sqoop 1.99.3 安装</a></p>\n<h4 id=\"Hive-小蜜蜂-和-Pig-猪\"><a href=\"#Hive-小蜜蜂-和-Pig-猪\" class=\"headerlink\" title=\"Hive 小蜜蜂 和 Pig 猪\"></a>Hive 小蜜蜂 和 Pig 猪</h4><p>数据仓库<br>MR写起来比较繁琐，产生Hive，而且Hive比较易懂，方便。<br>一种通过SQL来操作分布式存储数据的数据仓库工具。交换式查询<br>FaceBook开发的<br>文件类型: ‘,’ ‘tab’ 本本文件  ORC  Parquet<br>访问方式: CLI JDBC/ODBC WEB UI  Derby 内存数据库 单用户连接<br>Impala 是实时的</p>\n<p>Hive 默认是 MapReduce 引擎<br>Hive on Spark</p>\n<h4 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h4><p>Spark MapReduce Storm 是三种不同的计算处理<br>MapReduce 是大的批量操作，不要求时限。基于文件系统，hdfs。<br>Spark 是快速的批量操作，基于内存，所以速度快。其主要亮点在于把过程给数据。<br>Storm是流式处理，快速实时。<br>Spark Streaming 跟Storm类似，只不过Spark Streaming是小时间窗口的处理，Storm是实时的来一条处理一条。<br><a href=\"http://blog.csdn.net/wangfei8348/article/details/52924723\" target=\"_blank\" rel=\"noopener\">三者比较</a><br>Spark SQL</p>\n<h4 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h4>","site":{"data":{}},"excerpt":"","more":"<p>先介绍工具，然后进行安装</p>\n<h4 id=\"hadoop-大象\"><a href=\"#hadoop-大象\" class=\"headerlink\" title=\"hadoop 大象\"></a>hadoop 大象</h4><p>HDFS 文件系统 存储<br>MapReduce     计算<br>YARN 资源分配、管理工具MapReducev2<br>HBase</p>\n<p><a href=\"https://muxiaobai.github.io/2017/07/19/Linux-%E4%B8%8B%E7%9A%84java%E5%AE%89%E8%A3%85%E3%80%81%E5%8F%98%E6%9B%B4%E4%BB%A5%E5%8F%8A%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98/\">hadoop的安装</a></p>\n<h4 id=\"sqoop\"><a href=\"#sqoop\" class=\"headerlink\" title=\"sqoop\"></a>sqoop</h4><p>一个Apache的命令行工具 ，作用是：Transformation</p>\n<p>hadoop(HBase,Hive) 和结构化数据(structural data)的转换<br>1.4.6 和1.99.3 建议1.4.6更稳定，使用的广泛，常见问题大都有解决。<br><a href=\"http://houshangxiao.iteye.com/blog/2070057\" target=\"_blank\" rel=\"noopener\">Sqoop 1.99.3 安装</a></p>\n<h4 id=\"Hive-小蜜蜂-和-Pig-猪\"><a href=\"#Hive-小蜜蜂-和-Pig-猪\" class=\"headerlink\" title=\"Hive 小蜜蜂 和 Pig 猪\"></a>Hive 小蜜蜂 和 Pig 猪</h4><p>数据仓库<br>MR写起来比较繁琐，产生Hive，而且Hive比较易懂，方便。<br>一种通过SQL来操作分布式存储数据的数据仓库工具。交换式查询<br>FaceBook开发的<br>文件类型: ‘,’ ‘tab’ 本本文件  ORC  Parquet<br>访问方式: CLI JDBC/ODBC WEB UI  Derby 内存数据库 单用户连接<br>Impala 是实时的</p>\n<p>Hive 默认是 MapReduce 引擎<br>Hive on Spark</p>\n<h4 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h4><p>Spark MapReduce Storm 是三种不同的计算处理<br>MapReduce 是大的批量操作，不要求时限。基于文件系统，hdfs。<br>Spark 是快速的批量操作，基于内存，所以速度快。其主要亮点在于把过程给数据。<br>Storm是流式处理，快速实时。<br>Spark Streaming 跟Storm类似，只不过Spark Streaming是小时间窗口的处理，Storm是实时的来一条处理一条。<br><a href=\"http://blog.csdn.net/wangfei8348/article/details/52924723\" target=\"_blank\" rel=\"noopener\">三者比较</a><br>Spark SQL</p>\n<h4 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h4>"},{"title":"Tomcat源码阅读之组件生命周期","date":"2018-04-16T02:39:09.000Z","description":"研究tomcat系列,组件之间是怎么组合的，生命周期","_content":"\n\n![start&stop](/Tomcat源码阅读之组件生命周期/Lifecycle.PNG)\n\n上篇说道Catalina中的load 和init 方法,提到了getServer().init(),和getServer().start(),这两个方法，本文主要通过这两个方法，进一步研究组件之间的关系和各种状态，希望先看一下server.xml配置文件中的组件关系图。\n\n需要先了解一个知识点digester，讲xml文件转换成java对象，\n常用的几个方法\n\n- digester.addObjectCreate(\"Server\",\"org.apache.catalina.core.StandardServer\",\"className\");\n- digester.addSetProperties(\"Server\");\n- digester.addSetNext(\"Server\",\"setServer\",\"org.apache.catalina.Server\");\n\n\n\n## Catalina中的load方法\n\n重点代码\n\n```\nDigester digester = createStartDigester();\n....\n....\n....\nfile = configFile();\ninputStream = new FileInputStream(file);\ninputSource = new InputSource(file.toURI().toURL().toString());\n......\n......\n......\ninputSource.setByteStream(inputStream);\ndigester.push(this);\ndigester.parse(inputSource);\n....\n....\n....\ngetServer().setCatalina(this);\ngetServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());\ngetServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());\n// Stream redirection\ninitStreams();\n// Start the new server\ngetServer().init();\n···\n···\n···\nlog.info(\"Initialization processed in \" + ((t2 - t1) / 1000000) + \" ms\");\n\n```\ncreateStartDigester()设置规则，找到xml节点执行对应的方法，configFile()这里就是读取具体的配置文件server.xml,`protected String configFile = \"conf/server.xml\";`然后就是digester把Catalina  push进来，parse进行解析xml。这里说明的是中间有一段  digester.addSetNext(\"Server\",\"setServer\",\"org.apache.catalina.Server\");,这句就是执行setServer方法，对应的参数是org.apache.catalina.Server这种类型，然后上面还有一句，addObjectCreate，org.apache.catalina.core.StandardServer这个就是实际创建的对象类，这样就可以通过Catalina把Server联系起来的，之后的init()等这种方法，就都是调用的getServer()，上面这个对象了。\n\n##  Standard其他类中的方法Server Service Connector Engine等\n\nStandardServer.addService() 方法\n```\n    public void addService(Service service) {\n\n        service.setServer(this);\n\n        synchronized (servicesLock) {\n            Service results[] = new Service[services.length + 1];\n            System.arraycopy(services, 0, results, 0, services.length);\n            results[services.length] = service;\n            services = results;\n\n            if (getState().isAvailable()) {\n                try {\n                    service.start();\n                } catch (LifecycleException e) {\n                    // Ignore\n                }\n            }\n\n            // Report this property change to interested listeners\n            support.firePropertyChange(\"service\", null, service);\n        }\n\n    }\n```\n\n每一个Server可以包含多个Service，一样通过Catalina的digester来调用addService方法，这里维护了一个数组，这也是神奇的地方，一对多的关系是用数组来维护的，虽然说java中没有所谓的动态数组概念，但是，这里通过\n``` \nService results[] = new Service[services.length + 1];\nSystem.arraycopy(services, 0, results, 0, services.length);\nresults[services.length] = service;\nservices = results;\n```\n这四句话，System.arraycopy是native的方法，比较奇特。另外这个synchronized 了一个空对象` private final Object servicesLock = new Object();`来保证对services的操作是线程安全。其他的findService,findServices,removeService等都是如此操作，remove用的是for循环。\n\n#### 其他容器的关系调用方法\n\n- StandardService 中的  setContainer(是一个Engine，在EngineRuleSet中)  addConnector addExecutor  digester规则在Catalina里面对应  还有一个await方法没有讲☆\n- Connector 中的 addSslHostConfig\n- StandardEngine 中的 addChild(HostRuleSet)只添加Host、setCluster、addValve digester规则在EngineRuleSet里面对应\n- StandardHost 中的 addChild只添加Host，setCluster、addValve  digester规则在HostRuleSet里面对应\n等等之类的调用关系，都在digester中\n\n## Lifecycle类\n\n通过上面的init(),找到StandredServer,可发现这没有init方法，继续`public final class StandardServer extends LifecycleMBeanBase implements Server `，`public abstract class LifecycleMBeanBase extends LifecycleBase implements JmxEnabled `,`public abstract class LifecycleBase implements Lifecycle `,最终我们在这个抽象类LifecycleBase中发现了这个方法.然后就发现，这个init里面中会调用一个`initInternal`方法，这个在LifecycleBase中是一个抽象方法，这些集成了它的类都重写了，因此我们在getServer.init(),实际上就相当于调用initInternal。\n\n\n### 模板方法\n\norg.apache.catalina.LifecycleState  和 org.apache.catalina.Lifecycle 看最上面的图(此图也是在Lifecycle内)：\n```\nNEW(false, null),\nINITIALIZING(false, Lifecycle.BEFORE_INIT_EVENT),\nINITIALIZED(false, Lifecycle.AFTER_INIT_EVENT),\nSTARTING_PREP(false, Lifecycle.BEFORE_START_EVENT),\nSTARTING(true, Lifecycle.START_EVENT),\nSTARTED(true, Lifecycle.AFTER_START_EVENT),\nSTOPPING_PREP(true, Lifecycle.BEFORE_STOP_EVENT),\nSTOPPING(false, Lifecycle.STOP_EVENT),\nSTOPPED(false, Lifecycle.AFTER_STOP_EVENT),\nDESTROYING(false, Lifecycle.BEFORE_DESTROY_EVENT),\nDESTROYED(false, Lifecycle.AFTER_DESTROY_EVENT),\nFAILED(false, null);\n```\n12种状态: new(1)  init(2)  start(3)  stop(3)  destroy(2)  failed(1)\nLifecycle有四个基本的方法，init start stop destroy 外加一个addLifecycleListener()事件监听\n`public abstract class LifecycleBase implements Lifecycle` 这个org.apache.catalina.util.LifecycleBean中重写了上面四个方法(synchronized)，然后这里又\n在内部加一个initInternal方法调用,这里就用到了模板方法，在调用init的时候，前后做一些操作，判断当前状态啊，日志啊，等等。\n另外这里又有一个方法fireLifecycleEvent，触发生命周期事件。\n\n![start&stop](/Tomcat源码阅读之组件生命周期/LifecycleBaseinit.PNG)\n\n一般所有的组件是实现的org.apache.catalina.util.LifecycleMBeanBase这个BaseBean的生命周期，重写了initInternal，然后在使用组件的时候对生命周期做得操作，init等就直接调用LifecycleMBeanBase，又调用本组件的initInternal.\n\n见图StandardService中的initInternal方法:\n![start&stop](/Tomcat源码阅读之组件生命周期/StandardService.PNG)\n\n\n                             \n系列文章\n\n- [Tomcat源码阅读之从server.xml看组件关系](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/)\n- [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)\n- [Tomcat源码阅读之URL请求解析](http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/)\n- [Tomcat源码阅读之Container责任链](https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/)\n\n参看文献:\n- 《深入剖析Tomcat》\n- [Tomcat 系统架构与设计模式](https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)\n- [tomcat8.5.30源码](http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip)\n- [手写一个简化版Tomcat](https://my.oschina.net/liughDevelop/blog/1790893#comment-list)","source":"_posts/Tomcat源码阅读之组件生命周期.md","raw":"---\ntitle: Tomcat源码阅读之组件生命周期\ndate: 2018-04-16 10:39:09\ntags: tomcat\ncategories: java\ndescription: \"研究tomcat系列,组件之间是怎么组合的，生命周期\"\n---\n\n\n![start&stop](/Tomcat源码阅读之组件生命周期/Lifecycle.PNG)\n\n上篇说道Catalina中的load 和init 方法,提到了getServer().init(),和getServer().start(),这两个方法，本文主要通过这两个方法，进一步研究组件之间的关系和各种状态，希望先看一下server.xml配置文件中的组件关系图。\n\n需要先了解一个知识点digester，讲xml文件转换成java对象，\n常用的几个方法\n\n- digester.addObjectCreate(\"Server\",\"org.apache.catalina.core.StandardServer\",\"className\");\n- digester.addSetProperties(\"Server\");\n- digester.addSetNext(\"Server\",\"setServer\",\"org.apache.catalina.Server\");\n\n\n\n## Catalina中的load方法\n\n重点代码\n\n```\nDigester digester = createStartDigester();\n....\n....\n....\nfile = configFile();\ninputStream = new FileInputStream(file);\ninputSource = new InputSource(file.toURI().toURL().toString());\n......\n......\n......\ninputSource.setByteStream(inputStream);\ndigester.push(this);\ndigester.parse(inputSource);\n....\n....\n....\ngetServer().setCatalina(this);\ngetServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());\ngetServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());\n// Stream redirection\ninitStreams();\n// Start the new server\ngetServer().init();\n···\n···\n···\nlog.info(\"Initialization processed in \" + ((t2 - t1) / 1000000) + \" ms\");\n\n```\ncreateStartDigester()设置规则，找到xml节点执行对应的方法，configFile()这里就是读取具体的配置文件server.xml,`protected String configFile = \"conf/server.xml\";`然后就是digester把Catalina  push进来，parse进行解析xml。这里说明的是中间有一段  digester.addSetNext(\"Server\",\"setServer\",\"org.apache.catalina.Server\");,这句就是执行setServer方法，对应的参数是org.apache.catalina.Server这种类型，然后上面还有一句，addObjectCreate，org.apache.catalina.core.StandardServer这个就是实际创建的对象类，这样就可以通过Catalina把Server联系起来的，之后的init()等这种方法，就都是调用的getServer()，上面这个对象了。\n\n##  Standard其他类中的方法Server Service Connector Engine等\n\nStandardServer.addService() 方法\n```\n    public void addService(Service service) {\n\n        service.setServer(this);\n\n        synchronized (servicesLock) {\n            Service results[] = new Service[services.length + 1];\n            System.arraycopy(services, 0, results, 0, services.length);\n            results[services.length] = service;\n            services = results;\n\n            if (getState().isAvailable()) {\n                try {\n                    service.start();\n                } catch (LifecycleException e) {\n                    // Ignore\n                }\n            }\n\n            // Report this property change to interested listeners\n            support.firePropertyChange(\"service\", null, service);\n        }\n\n    }\n```\n\n每一个Server可以包含多个Service，一样通过Catalina的digester来调用addService方法，这里维护了一个数组，这也是神奇的地方，一对多的关系是用数组来维护的，虽然说java中没有所谓的动态数组概念，但是，这里通过\n``` \nService results[] = new Service[services.length + 1];\nSystem.arraycopy(services, 0, results, 0, services.length);\nresults[services.length] = service;\nservices = results;\n```\n这四句话，System.arraycopy是native的方法，比较奇特。另外这个synchronized 了一个空对象` private final Object servicesLock = new Object();`来保证对services的操作是线程安全。其他的findService,findServices,removeService等都是如此操作，remove用的是for循环。\n\n#### 其他容器的关系调用方法\n\n- StandardService 中的  setContainer(是一个Engine，在EngineRuleSet中)  addConnector addExecutor  digester规则在Catalina里面对应  还有一个await方法没有讲☆\n- Connector 中的 addSslHostConfig\n- StandardEngine 中的 addChild(HostRuleSet)只添加Host、setCluster、addValve digester规则在EngineRuleSet里面对应\n- StandardHost 中的 addChild只添加Host，setCluster、addValve  digester规则在HostRuleSet里面对应\n等等之类的调用关系，都在digester中\n\n## Lifecycle类\n\n通过上面的init(),找到StandredServer,可发现这没有init方法，继续`public final class StandardServer extends LifecycleMBeanBase implements Server `，`public abstract class LifecycleMBeanBase extends LifecycleBase implements JmxEnabled `,`public abstract class LifecycleBase implements Lifecycle `,最终我们在这个抽象类LifecycleBase中发现了这个方法.然后就发现，这个init里面中会调用一个`initInternal`方法，这个在LifecycleBase中是一个抽象方法，这些集成了它的类都重写了，因此我们在getServer.init(),实际上就相当于调用initInternal。\n\n\n### 模板方法\n\norg.apache.catalina.LifecycleState  和 org.apache.catalina.Lifecycle 看最上面的图(此图也是在Lifecycle内)：\n```\nNEW(false, null),\nINITIALIZING(false, Lifecycle.BEFORE_INIT_EVENT),\nINITIALIZED(false, Lifecycle.AFTER_INIT_EVENT),\nSTARTING_PREP(false, Lifecycle.BEFORE_START_EVENT),\nSTARTING(true, Lifecycle.START_EVENT),\nSTARTED(true, Lifecycle.AFTER_START_EVENT),\nSTOPPING_PREP(true, Lifecycle.BEFORE_STOP_EVENT),\nSTOPPING(false, Lifecycle.STOP_EVENT),\nSTOPPED(false, Lifecycle.AFTER_STOP_EVENT),\nDESTROYING(false, Lifecycle.BEFORE_DESTROY_EVENT),\nDESTROYED(false, Lifecycle.AFTER_DESTROY_EVENT),\nFAILED(false, null);\n```\n12种状态: new(1)  init(2)  start(3)  stop(3)  destroy(2)  failed(1)\nLifecycle有四个基本的方法，init start stop destroy 外加一个addLifecycleListener()事件监听\n`public abstract class LifecycleBase implements Lifecycle` 这个org.apache.catalina.util.LifecycleBean中重写了上面四个方法(synchronized)，然后这里又\n在内部加一个initInternal方法调用,这里就用到了模板方法，在调用init的时候，前后做一些操作，判断当前状态啊，日志啊，等等。\n另外这里又有一个方法fireLifecycleEvent，触发生命周期事件。\n\n![start&stop](/Tomcat源码阅读之组件生命周期/LifecycleBaseinit.PNG)\n\n一般所有的组件是实现的org.apache.catalina.util.LifecycleMBeanBase这个BaseBean的生命周期，重写了initInternal，然后在使用组件的时候对生命周期做得操作，init等就直接调用LifecycleMBeanBase，又调用本组件的initInternal.\n\n见图StandardService中的initInternal方法:\n![start&stop](/Tomcat源码阅读之组件生命周期/StandardService.PNG)\n\n\n                             \n系列文章\n\n- [Tomcat源码阅读之从server.xml看组件关系](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/)\n- [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)\n- [Tomcat源码阅读之URL请求解析](http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/)\n- [Tomcat源码阅读之Container责任链](https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/)\n\n参看文献:\n- 《深入剖析Tomcat》\n- [Tomcat 系统架构与设计模式](https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)\n- [tomcat8.5.30源码](http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip)\n- [手写一个简化版Tomcat](https://my.oschina.net/liughDevelop/blog/1790893#comment-list)","slug":"Tomcat源码阅读之组件生命周期","published":1,"updated":"2018-04-20T07:49:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77k0017ugv5isl9nl3v","content":"<p><img src=\"/.io//Lifecycle.PNG\" alt=\"start&amp;stop\"></p>\n<p>上篇说道Catalina中的load 和init 方法,提到了getServer().init(),和getServer().start(),这两个方法，本文主要通过这两个方法，进一步研究组件之间的关系和各种状态，希望先看一下server.xml配置文件中的组件关系图。</p>\n<p>需要先了解一个知识点digester，讲xml文件转换成java对象，<br>常用的几个方法</p>\n<ul>\n<li>digester.addObjectCreate(“Server”,”org.apache.catalina.core.StandardServer”,”className”);</li>\n<li>digester.addSetProperties(“Server”);</li>\n<li>digester.addSetNext(“Server”,”setServer”,”org.apache.catalina.Server”);</li>\n</ul>\n<h2 id=\"Catalina中的load方法\"><a href=\"#Catalina中的load方法\" class=\"headerlink\" title=\"Catalina中的load方法\"></a>Catalina中的load方法</h2><p>重点代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Digester digester = createStartDigester();</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">file = configFile();</span><br><span class=\"line\">inputStream = new FileInputStream(file);</span><br><span class=\"line\">inputSource = new InputSource(file.toURI().toURL().toString());</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">inputSource.setByteStream(inputStream);</span><br><span class=\"line\">digester.push(this);</span><br><span class=\"line\">digester.parse(inputSource);</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">getServer().setCatalina(this);</span><br><span class=\"line\">getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</span><br><span class=\"line\">getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</span><br><span class=\"line\">// Stream redirection</span><br><span class=\"line\">initStreams();</span><br><span class=\"line\">// Start the new server</span><br><span class=\"line\">getServer().init();</span><br><span class=\"line\">···</span><br><span class=\"line\">···</span><br><span class=\"line\">···</span><br><span class=\"line\">log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br></pre></td></tr></table></figure>\n<p>createStartDigester()设置规则，找到xml节点执行对应的方法，configFile()这里就是读取具体的配置文件server.xml,<code>protected String configFile = &quot;conf/server.xml&quot;;</code>然后就是digester把Catalina  push进来，parse进行解析xml。这里说明的是中间有一段  digester.addSetNext(“Server”,”setServer”,”org.apache.catalina.Server”);,这句就是执行setServer方法，对应的参数是org.apache.catalina.Server这种类型，然后上面还有一句，addObjectCreate，org.apache.catalina.core.StandardServer这个就是实际创建的对象类，这样就可以通过Catalina把Server联系起来的，之后的init()等这种方法，就都是调用的getServer()，上面这个对象了。</p>\n<h2 id=\"Standard其他类中的方法Server-Service-Connector-Engine等\"><a href=\"#Standard其他类中的方法Server-Service-Connector-Engine等\" class=\"headerlink\" title=\"Standard其他类中的方法Server Service Connector Engine等\"></a>Standard其他类中的方法Server Service Connector Engine等</h2><p>StandardServer.addService() 方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void addService(Service service) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    service.setServer(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized (servicesLock) &#123;</span><br><span class=\"line\">        Service results[] = new Service[services.length + 1];</span><br><span class=\"line\">        System.arraycopy(services, 0, results, 0, services.length);</span><br><span class=\"line\">        results[services.length] = service;</span><br><span class=\"line\">        services = results;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (getState().isAvailable()) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                service.start();</span><br><span class=\"line\">            &#125; catch (LifecycleException e) &#123;</span><br><span class=\"line\">                // Ignore</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Report this property change to interested listeners</span><br><span class=\"line\">        support.firePropertyChange(&quot;service&quot;, null, service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每一个Server可以包含多个Service，一样通过Catalina的digester来调用addService方法，这里维护了一个数组，这也是神奇的地方，一对多的关系是用数组来维护的，虽然说java中没有所谓的动态数组概念，但是，这里通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service results[] = new Service[services.length + 1];</span><br><span class=\"line\">System.arraycopy(services, 0, results, 0, services.length);</span><br><span class=\"line\">results[services.length] = service;</span><br><span class=\"line\">services = results;</span><br></pre></td></tr></table></figure></p>\n<p>这四句话，System.arraycopy是native的方法，比较奇特。另外这个synchronized 了一个空对象<code>private final Object servicesLock = new Object();</code>来保证对services的操作是线程安全。其他的findService,findServices,removeService等都是如此操作，remove用的是for循环。</p>\n<h4 id=\"其他容器的关系调用方法\"><a href=\"#其他容器的关系调用方法\" class=\"headerlink\" title=\"其他容器的关系调用方法\"></a>其他容器的关系调用方法</h4><ul>\n<li>StandardService 中的  setContainer(是一个Engine，在EngineRuleSet中)  addConnector addExecutor  digester规则在Catalina里面对应  还有一个await方法没有讲☆</li>\n<li>Connector 中的 addSslHostConfig</li>\n<li>StandardEngine 中的 addChild(HostRuleSet)只添加Host、setCluster、addValve digester规则在EngineRuleSet里面对应</li>\n<li>StandardHost 中的 addChild只添加Host，setCluster、addValve  digester规则在HostRuleSet里面对应<br>等等之类的调用关系，都在digester中</li>\n</ul>\n<h2 id=\"Lifecycle类\"><a href=\"#Lifecycle类\" class=\"headerlink\" title=\"Lifecycle类\"></a>Lifecycle类</h2><p>通过上面的init(),找到StandredServer,可发现这没有init方法，继续<code>public final class StandardServer extends LifecycleMBeanBase implements Server</code>，<code>public abstract class LifecycleMBeanBase extends LifecycleBase implements JmxEnabled</code>,<code>public abstract class LifecycleBase implements Lifecycle</code>,最终我们在这个抽象类LifecycleBase中发现了这个方法.然后就发现，这个init里面中会调用一个<code>initInternal</code>方法，这个在LifecycleBase中是一个抽象方法，这些集成了它的类都重写了，因此我们在getServer.init(),实际上就相当于调用initInternal。</p>\n<h3 id=\"模板方法\"><a href=\"#模板方法\" class=\"headerlink\" title=\"模板方法\"></a>模板方法</h3><p>org.apache.catalina.LifecycleState  和 org.apache.catalina.Lifecycle 看最上面的图(此图也是在Lifecycle内)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NEW(false, null),</span><br><span class=\"line\">INITIALIZING(false, Lifecycle.BEFORE_INIT_EVENT),</span><br><span class=\"line\">INITIALIZED(false, Lifecycle.AFTER_INIT_EVENT),</span><br><span class=\"line\">STARTING_PREP(false, Lifecycle.BEFORE_START_EVENT),</span><br><span class=\"line\">STARTING(true, Lifecycle.START_EVENT),</span><br><span class=\"line\">STARTED(true, Lifecycle.AFTER_START_EVENT),</span><br><span class=\"line\">STOPPING_PREP(true, Lifecycle.BEFORE_STOP_EVENT),</span><br><span class=\"line\">STOPPING(false, Lifecycle.STOP_EVENT),</span><br><span class=\"line\">STOPPED(false, Lifecycle.AFTER_STOP_EVENT),</span><br><span class=\"line\">DESTROYING(false, Lifecycle.BEFORE_DESTROY_EVENT),</span><br><span class=\"line\">DESTROYED(false, Lifecycle.AFTER_DESTROY_EVENT),</span><br><span class=\"line\">FAILED(false, null);</span><br></pre></td></tr></table></figure></p>\n<p>12种状态: new(1)  init(2)  start(3)  stop(3)  destroy(2)  failed(1)<br>Lifecycle有四个基本的方法，init start stop destroy 外加一个addLifecycleListener()事件监听<br><code>public abstract class LifecycleBase implements Lifecycle</code> 这个org.apache.catalina.util.LifecycleBean中重写了上面四个方法(synchronized)，然后这里又<br>在内部加一个initInternal方法调用,这里就用到了模板方法，在调用init的时候，前后做一些操作，判断当前状态啊，日志啊，等等。<br>另外这里又有一个方法fireLifecycleEvent，触发生命周期事件。</p>\n<p><img src=\"/.io//LifecycleBaseinit.PNG\" alt=\"start&amp;stop\"></p>\n<p>一般所有的组件是实现的org.apache.catalina.util.LifecycleMBeanBase这个BaseBean的生命周期，重写了initInternal，然后在使用组件的时候对生命周期做得操作，init等就直接调用LifecycleMBeanBase，又调用本组件的initInternal.</p>\n<p>见图StandardService中的initInternal方法:<br><img src=\"/.io//StandardService.PNG\" alt=\"start&amp;stop\"></p>\n<p>系列文章</p>\n<ul>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/\">Tomcat源码阅读之从server.xml看组件关系</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/\">Tomcat源码阅读之URL请求解析</a></li>\n<li><a href=\"https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/\">Tomcat源码阅读之Container责任链</a></li>\n</ul>\n<p>参看文献:</p>\n<ul>\n<li>《深入剖析Tomcat》</li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">Tomcat 系统架构与设计模式</a></li>\n<li><a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip\" target=\"_blank\" rel=\"noopener\">tomcat8.5.30源码</a></li>\n<li><a href=\"https://my.oschina.net/liughDevelop/blog/1790893#comment-list\" target=\"_blank\" rel=\"noopener\">手写一个简化版Tomcat</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/.io//Lifecycle.PNG\" alt=\"start&amp;stop\"></p>\n<p>上篇说道Catalina中的load 和init 方法,提到了getServer().init(),和getServer().start(),这两个方法，本文主要通过这两个方法，进一步研究组件之间的关系和各种状态，希望先看一下server.xml配置文件中的组件关系图。</p>\n<p>需要先了解一个知识点digester，讲xml文件转换成java对象，<br>常用的几个方法</p>\n<ul>\n<li>digester.addObjectCreate(“Server”,”org.apache.catalina.core.StandardServer”,”className”);</li>\n<li>digester.addSetProperties(“Server”);</li>\n<li>digester.addSetNext(“Server”,”setServer”,”org.apache.catalina.Server”);</li>\n</ul>\n<h2 id=\"Catalina中的load方法\"><a href=\"#Catalina中的load方法\" class=\"headerlink\" title=\"Catalina中的load方法\"></a>Catalina中的load方法</h2><p>重点代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Digester digester = createStartDigester();</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">file = configFile();</span><br><span class=\"line\">inputStream = new FileInputStream(file);</span><br><span class=\"line\">inputSource = new InputSource(file.toURI().toURL().toString());</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">inputSource.setByteStream(inputStream);</span><br><span class=\"line\">digester.push(this);</span><br><span class=\"line\">digester.parse(inputSource);</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">....</span><br><span class=\"line\">getServer().setCatalina(this);</span><br><span class=\"line\">getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</span><br><span class=\"line\">getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</span><br><span class=\"line\">// Stream redirection</span><br><span class=\"line\">initStreams();</span><br><span class=\"line\">// Start the new server</span><br><span class=\"line\">getServer().init();</span><br><span class=\"line\">···</span><br><span class=\"line\">···</span><br><span class=\"line\">···</span><br><span class=\"line\">log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br></pre></td></tr></table></figure>\n<p>createStartDigester()设置规则，找到xml节点执行对应的方法，configFile()这里就是读取具体的配置文件server.xml,<code>protected String configFile = &quot;conf/server.xml&quot;;</code>然后就是digester把Catalina  push进来，parse进行解析xml。这里说明的是中间有一段  digester.addSetNext(“Server”,”setServer”,”org.apache.catalina.Server”);,这句就是执行setServer方法，对应的参数是org.apache.catalina.Server这种类型，然后上面还有一句，addObjectCreate，org.apache.catalina.core.StandardServer这个就是实际创建的对象类，这样就可以通过Catalina把Server联系起来的，之后的init()等这种方法，就都是调用的getServer()，上面这个对象了。</p>\n<h2 id=\"Standard其他类中的方法Server-Service-Connector-Engine等\"><a href=\"#Standard其他类中的方法Server-Service-Connector-Engine等\" class=\"headerlink\" title=\"Standard其他类中的方法Server Service Connector Engine等\"></a>Standard其他类中的方法Server Service Connector Engine等</h2><p>StandardServer.addService() 方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void addService(Service service) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    service.setServer(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized (servicesLock) &#123;</span><br><span class=\"line\">        Service results[] = new Service[services.length + 1];</span><br><span class=\"line\">        System.arraycopy(services, 0, results, 0, services.length);</span><br><span class=\"line\">        results[services.length] = service;</span><br><span class=\"line\">        services = results;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (getState().isAvailable()) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                service.start();</span><br><span class=\"line\">            &#125; catch (LifecycleException e) &#123;</span><br><span class=\"line\">                // Ignore</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Report this property change to interested listeners</span><br><span class=\"line\">        support.firePropertyChange(&quot;service&quot;, null, service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>每一个Server可以包含多个Service，一样通过Catalina的digester来调用addService方法，这里维护了一个数组，这也是神奇的地方，一对多的关系是用数组来维护的，虽然说java中没有所谓的动态数组概念，但是，这里通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service results[] = new Service[services.length + 1];</span><br><span class=\"line\">System.arraycopy(services, 0, results, 0, services.length);</span><br><span class=\"line\">results[services.length] = service;</span><br><span class=\"line\">services = results;</span><br></pre></td></tr></table></figure></p>\n<p>这四句话，System.arraycopy是native的方法，比较奇特。另外这个synchronized 了一个空对象<code>private final Object servicesLock = new Object();</code>来保证对services的操作是线程安全。其他的findService,findServices,removeService等都是如此操作，remove用的是for循环。</p>\n<h4 id=\"其他容器的关系调用方法\"><a href=\"#其他容器的关系调用方法\" class=\"headerlink\" title=\"其他容器的关系调用方法\"></a>其他容器的关系调用方法</h4><ul>\n<li>StandardService 中的  setContainer(是一个Engine，在EngineRuleSet中)  addConnector addExecutor  digester规则在Catalina里面对应  还有一个await方法没有讲☆</li>\n<li>Connector 中的 addSslHostConfig</li>\n<li>StandardEngine 中的 addChild(HostRuleSet)只添加Host、setCluster、addValve digester规则在EngineRuleSet里面对应</li>\n<li>StandardHost 中的 addChild只添加Host，setCluster、addValve  digester规则在HostRuleSet里面对应<br>等等之类的调用关系，都在digester中</li>\n</ul>\n<h2 id=\"Lifecycle类\"><a href=\"#Lifecycle类\" class=\"headerlink\" title=\"Lifecycle类\"></a>Lifecycle类</h2><p>通过上面的init(),找到StandredServer,可发现这没有init方法，继续<code>public final class StandardServer extends LifecycleMBeanBase implements Server</code>，<code>public abstract class LifecycleMBeanBase extends LifecycleBase implements JmxEnabled</code>,<code>public abstract class LifecycleBase implements Lifecycle</code>,最终我们在这个抽象类LifecycleBase中发现了这个方法.然后就发现，这个init里面中会调用一个<code>initInternal</code>方法，这个在LifecycleBase中是一个抽象方法，这些集成了它的类都重写了，因此我们在getServer.init(),实际上就相当于调用initInternal。</p>\n<h3 id=\"模板方法\"><a href=\"#模板方法\" class=\"headerlink\" title=\"模板方法\"></a>模板方法</h3><p>org.apache.catalina.LifecycleState  和 org.apache.catalina.Lifecycle 看最上面的图(此图也是在Lifecycle内)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NEW(false, null),</span><br><span class=\"line\">INITIALIZING(false, Lifecycle.BEFORE_INIT_EVENT),</span><br><span class=\"line\">INITIALIZED(false, Lifecycle.AFTER_INIT_EVENT),</span><br><span class=\"line\">STARTING_PREP(false, Lifecycle.BEFORE_START_EVENT),</span><br><span class=\"line\">STARTING(true, Lifecycle.START_EVENT),</span><br><span class=\"line\">STARTED(true, Lifecycle.AFTER_START_EVENT),</span><br><span class=\"line\">STOPPING_PREP(true, Lifecycle.BEFORE_STOP_EVENT),</span><br><span class=\"line\">STOPPING(false, Lifecycle.STOP_EVENT),</span><br><span class=\"line\">STOPPED(false, Lifecycle.AFTER_STOP_EVENT),</span><br><span class=\"line\">DESTROYING(false, Lifecycle.BEFORE_DESTROY_EVENT),</span><br><span class=\"line\">DESTROYED(false, Lifecycle.AFTER_DESTROY_EVENT),</span><br><span class=\"line\">FAILED(false, null);</span><br></pre></td></tr></table></figure></p>\n<p>12种状态: new(1)  init(2)  start(3)  stop(3)  destroy(2)  failed(1)<br>Lifecycle有四个基本的方法，init start stop destroy 外加一个addLifecycleListener()事件监听<br><code>public abstract class LifecycleBase implements Lifecycle</code> 这个org.apache.catalina.util.LifecycleBean中重写了上面四个方法(synchronized)，然后这里又<br>在内部加一个initInternal方法调用,这里就用到了模板方法，在调用init的时候，前后做一些操作，判断当前状态啊，日志啊，等等。<br>另外这里又有一个方法fireLifecycleEvent，触发生命周期事件。</p>\n<p><img src=\"/.io//LifecycleBaseinit.PNG\" alt=\"start&amp;stop\"></p>\n<p>一般所有的组件是实现的org.apache.catalina.util.LifecycleMBeanBase这个BaseBean的生命周期，重写了initInternal，然后在使用组件的时候对生命周期做得操作，init等就直接调用LifecycleMBeanBase，又调用本组件的initInternal.</p>\n<p>见图StandardService中的initInternal方法:<br><img src=\"/.io//StandardService.PNG\" alt=\"start&amp;stop\"></p>\n<p>系列文章</p>\n<ul>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/\">Tomcat源码阅读之从server.xml看组件关系</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/\">Tomcat源码阅读之URL请求解析</a></li>\n<li><a href=\"https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/\">Tomcat源码阅读之Container责任链</a></li>\n</ul>\n<p>参看文献:</p>\n<ul>\n<li>《深入剖析Tomcat》</li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">Tomcat 系统架构与设计模式</a></li>\n<li><a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip\" target=\"_blank\" rel=\"noopener\">tomcat8.5.30源码</a></li>\n<li><a href=\"https://my.oschina.net/liughDevelop/blog/1790893#comment-list\" target=\"_blank\" rel=\"noopener\">手写一个简化版Tomcat</a></li>\n</ul>\n"},{"title":"Hello World","date":"2016-06-28T22:20:02.000Z","description":"   Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Create a new draft\n\n``` bash\n$ hexo new  draft \"My New Draft\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### publish draft to post \n\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\nMore info: [public](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n``` bash\n$ hexo server -p 5000\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-06-29 06:20:02\ncategories: 搭建网站\ndescription: \"   Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\"\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Create a new draft\n\n``` bash\n$ hexo new  draft \"My New Draft\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### publish draft to post \n\n\n``` bash\n$ hexo publish [layout] <filename>\n```\n\nMore info: [public](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n``` bash\n$ hexo server -p 5000\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-06-29T07:48:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77l001bugv50lf2ubhs","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Create-a-new-draft\"><a href=\"#Create-a-new-draft\" class=\"headerlink\" title=\"Create a new draft\"></a>Create a new draft</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new  draft <span class=\"string\">\"My New Draft\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"publish-draft-to-post\"><a href=\"#publish-draft-to-post\" class=\"headerlink\" title=\"publish draft to post\"></a>publish draft to post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">public</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Create-a-new-draft\"><a href=\"#Create-a-new-draft\" class=\"headerlink\" title=\"Create a new draft\"></a>Create a new draft</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new  draft <span class=\"string\">\"My New Draft\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"publish-draft-to-post\"><a href=\"#publish-draft-to-post\" class=\"headerlink\" title=\"publish draft to post\"></a>publish draft to post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">public</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"javascript-常用代码","date":"2018-10-08T22:31:08.000Z","description":"前端主要是JS的用法，获取参数，去重，","_content":"\n#### select option选择\n\n```\nvar options=$(\"#select option:selected\"); //获取选中的项\nalert(options.val()); //拿到选中项的值\nalert(options.text()); //拿到选中项的文本\nalert(options.attr('url')); //拿到选中项的url值\n\n```\n\n#### Ajax,设置时间超时 \n\n```\nvar ajaxTimeoutTest = $.ajax({\n　　url:'',  //请求的URL\n　　timeout : 1000, //超时时间设置，单位毫秒\n　　type : 'get',  //请求方式，get或post\n　　data :{},  //请求所传参数，json格式\n　　dataType:'json',//返回的数据格式\n　　success:function(data){ //请求成功的回调函数\n　　　　alert(\"成功\");\n　　},\n　　complete : function(XMLHttpRequest,status){ //请求完成后最终执行参数\n　　　　if(status=='timeout'){//超时,status还有success,error等值的情况\n 　　　　　 ajaxTimeoutTest.abort();\n　　　　　  alert(\"超时\");\n　　　　}\n　　}\n});\n\nfunction request(url, data, success_callback,error_callback) {\n    console.log(\"url:\"+url);\n\nvar xhr = $.ajax({\n        //提交数据的类型 POST GET\n        type: \"POST\",\n        //提交的网址\n        url: url,\n        //提交的数据\n        data: data,\n        //设置为同步\n        async:false,\n        // 设置超时的时间20s\n        timeout:20000,\n        //返回数据的格式\n        datatype: \"json\", //\"xml\", \"html\", \"script\", \"json\", \"jsonp\", \"text\".\n        xhrFields: {\n            withCredentials: true\n        },\n        crossDomain: true,\n        //在请求之前调用的函数\n        beforeSend: function () {\n \n        },\n        //调用执行后调用的函数\n        complete: function (XMLHttpRequest, textStatus) {\n            if(textStatus == 'timeout'){//超时,status还有success,error等值的情况\n                if (error_callback != null && error_callback != \"\") {            \n                    error_callback();\n                };\n            }\n        },\n        //成功返回之后调用的函数             \n        success: function (response) {\n            handleResponse(response, success_callback,error_callback);\n        },\n      \n        //调用出错执行的函数\n        error: function () {\n            //请求出错处理\n            console.log(\"error\");\n        }\n    });\n}\n\n```\n\n#### 数组对象去重\n\n\n```\n\nvar arr=[{id:1,name:\"z\"},{id:2,name:\"g\"},{id:1,name:\"z\"];\narr = unique(arr,\"id\");\nconsole.log(arr);\n\nfunction arrayUnique2(arr, name) {\n\t\t  var hash = {};\n\t\t  return arr.reduce(function (item, next) {\n\t\t    hash[next[name]] ? '' : hash[next[name]] = true && item.push(next);\n\t\t    return item;\n\t\t  }, []);\n}\n\n\nreduce函数\n\n```\n#### 数组去重\n\n```\n\n//数组去重\nfunction uniqueList(array){\n    var r = [];\n    for(var i = 0, l = array.length; i < l; i++) {\n        for(var j = i + 1; j < l; j++)\n            if (JSON.stringify(array[i]) == JSON.stringify(array[j])) j = ++i;\n        r.push(array[i]);\n    }\n    return r;\n}\n\n\n```\n#### 数组delete 之后length无效\n\n```\n//删除的数组obj, 删除第i个数据\n//delete obj[i];\nfunction changeLength(obj,i){\n\treturn  obj.slice(0,i).concat(obj.slice(i+1,obj.length));\n}\n\n```\n#### 深拷贝\n\n```\n\n普通数组直接使用[].concat(_test)\n对象数组：[].concat(JSON.parse(JSON.stringify(_test)))\n\n```\n\n#### 替代eval方案\n\n```\nfunction  evil(fn)\n{\n    var Fn = Function;\n    return new Fn('return ' + fn)(); \n}\n\n\nevil(\"function(){console.log(1111);console.log(this)}()\")\n\n```\n\n#### 获取地址中的参数\n\n```\n//正则\nfunction getUrlParam(name) {\n \tvar reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); //构造一个含有目标参数的正则表达式对象\n    var r = window.location.search.substr(1).match(reg);  //匹配目标参数\n    if (r != null) return unescape(r[2]); return null; //返回参数值\n     }\n\n//第二种，循环\nfunction getQueryVariable(variable)\n{\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n    for (var i=0;i<vars.length;i++) {\n        var pair = vars[i].split(\"=\");\n        if(pair[0] == variable){return pair[1];}\n    }\n    return(false);\n}\n\n\n```\n\n#### 加密解密\n\n\nlet encodedData = window.btoa(\"Hello, world\"); // 编码\nlet decodedData = window.atob(encodedData); // 解码\n\nparams.passwd = btoa($('input[name=\"passwd\"]').val(), true);\n\norg.apache.commons;\n\nnew String(Base64.decodeBase64(form.get(\"passwd\"))));\n\n加密解密账号\n\n```\n<script type=\"text/javascript\">\n\t$(function() {\n\t\t$(\"#btn\").click(function() {\n\t\t\tvar username = encode64($(\"#username\").val());  //对数据加密\n\t\t\tvar password = encode64($(\"#password\").val());\n\t\t\t$(\"#username\").val(username);\n\t\t\t$(\"#password\").val(password);\n\t\t\tdocument.fm.submit();  //fm为form表单name\n\t\t})\n\t})\n\t\n\t// base64加密开始\n\tvar keyStr = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\"\n\t\t\t+ \"wxyz0123456789+/\" + \"=\";\n\t\n\tfunction encode64(input) {\n \n\t\tvar output = \"\";\n\t\tvar chr1, chr2, chr3 = \"\";\n\t\tvar enc1, enc2, enc3, enc4 = \"\";\n\t\tvar i = 0;\n\t\tdo {\n\t\t\tchr1 = input.charCodeAt(i++);\n\t\t\tchr2 = input.charCodeAt(i++);\n\t\t\tchr3 = input.charCodeAt(i++);\n\t\t\tenc1 = chr1 >> 2;\n\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\tenc4 = chr3 & 63;\n\t\t\tif (isNaN(chr2)) {\n\t\t\t\tenc3 = enc4 = 64;\n\t\t\t} else if (isNaN(chr3)) {\n\t\t\t\tenc4 = 64;\n\t\t\t}\n\t\t\toutput = output + keyStr.charAt(enc1) + keyStr.charAt(enc2)\n\t\t\t\t\t+ keyStr.charAt(enc3) + keyStr.charAt(enc4);\n\t\t\tchr1 = chr2 = chr3 = \"\";\n\t\t\tenc1 = enc2 = enc3 = enc4 = \"\";\n\t\t} while (i < input.length);\n \n\t\treturn output;\n\t}\n\t// base64加密结束\n</script>\n```\n\n\n\n```\nprivate static char[] base64EncodeChars = new char[] { 'A', 'B', 'C', 'D',\n\t\t'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n\t\t'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',\n\t\t'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\n\t\t'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',\n\t\t'4', '5', '6', '7', '8', '9', '+', '/', };\n \nprivate static byte[] base64DecodeChars = new byte[] { -1, -1, -1, -1, -1,\n\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n\t\t-1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59,\n\t\t60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n\t\t10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1,\n\t\t-1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\n\t\t38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1,\n\t\t-1, -1 };\n \n/**\n * 解密\n * @param str\n * @return\n */\npublic static byte[] decode(String str) {\n\tbyte[] data = str.getBytes();\n\tint len = data.length;\n\tByteArrayOutputStream buf = new ByteArrayOutputStream(len);\n\tint i = 0;\n\tint b1, b2, b3, b4;\n \n\twhile (i < len) {\n\t\tdo {\n\t\t\tb1 = base64DecodeChars[data[i++]];\n\t\t} while (i < len && b1 == -1);\n\t\tif (b1 == -1) {\n\t\t\tbreak;\n\t\t}\n \n\t\tdo {\n\t\t\tb2 = base64DecodeChars[data[i++]];\n\t\t} while (i < len && b2 == -1);\n\t\tif (b2 == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tbuf.write((int) ((b1 << 2) | ((b2 & 0x30) >>> 4)));\n \n\t\tdo {\n\t\t\tb3 = data[i++];\n\t\t\tif (b3 == 61) {\n\t\t\t\treturn buf.toByteArray();\n\t\t\t}\n\t\t\tb3 = base64DecodeChars[b3];\n\t\t} while (i < len && b3 == -1);\n\t\tif (b3 == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tbuf.write((int) (((b2 & 0x0f) << 4) | ((b3 & 0x3c) >>> 2)));\n \n\t\tdo {\n\t\t\tb4 = data[i++];\n\t\t\tif (b4 == 61) {\n\t\t\t\treturn buf.toByteArray();\n\t\t\t}\n\t\t\tb4 = base64DecodeChars[b4];\n\t\t} while (i < len && b4 == -1);\n\t\tif (b4 == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tbuf.write((int) (((b3 & 0x03) << 6) | b4));\n\t}\n\treturn buf.toByteArray();\n}\n```","source":"_posts/javascript-常用代码.md","raw":"---\ntitle: javascript-常用代码\ndate: 2018-10-09 06:31:08\ntags: 前端\ncategories: javascript\ndescription: \"前端主要是JS的用法，获取参数，去重，\"\n---\n\n#### select option选择\n\n```\nvar options=$(\"#select option:selected\"); //获取选中的项\nalert(options.val()); //拿到选中项的值\nalert(options.text()); //拿到选中项的文本\nalert(options.attr('url')); //拿到选中项的url值\n\n```\n\n#### Ajax,设置时间超时 \n\n```\nvar ajaxTimeoutTest = $.ajax({\n　　url:'',  //请求的URL\n　　timeout : 1000, //超时时间设置，单位毫秒\n　　type : 'get',  //请求方式，get或post\n　　data :{},  //请求所传参数，json格式\n　　dataType:'json',//返回的数据格式\n　　success:function(data){ //请求成功的回调函数\n　　　　alert(\"成功\");\n　　},\n　　complete : function(XMLHttpRequest,status){ //请求完成后最终执行参数\n　　　　if(status=='timeout'){//超时,status还有success,error等值的情况\n 　　　　　 ajaxTimeoutTest.abort();\n　　　　　  alert(\"超时\");\n　　　　}\n　　}\n});\n\nfunction request(url, data, success_callback,error_callback) {\n    console.log(\"url:\"+url);\n\nvar xhr = $.ajax({\n        //提交数据的类型 POST GET\n        type: \"POST\",\n        //提交的网址\n        url: url,\n        //提交的数据\n        data: data,\n        //设置为同步\n        async:false,\n        // 设置超时的时间20s\n        timeout:20000,\n        //返回数据的格式\n        datatype: \"json\", //\"xml\", \"html\", \"script\", \"json\", \"jsonp\", \"text\".\n        xhrFields: {\n            withCredentials: true\n        },\n        crossDomain: true,\n        //在请求之前调用的函数\n        beforeSend: function () {\n \n        },\n        //调用执行后调用的函数\n        complete: function (XMLHttpRequest, textStatus) {\n            if(textStatus == 'timeout'){//超时,status还有success,error等值的情况\n                if (error_callback != null && error_callback != \"\") {            \n                    error_callback();\n                };\n            }\n        },\n        //成功返回之后调用的函数             \n        success: function (response) {\n            handleResponse(response, success_callback,error_callback);\n        },\n      \n        //调用出错执行的函数\n        error: function () {\n            //请求出错处理\n            console.log(\"error\");\n        }\n    });\n}\n\n```\n\n#### 数组对象去重\n\n\n```\n\nvar arr=[{id:1,name:\"z\"},{id:2,name:\"g\"},{id:1,name:\"z\"];\narr = unique(arr,\"id\");\nconsole.log(arr);\n\nfunction arrayUnique2(arr, name) {\n\t\t  var hash = {};\n\t\t  return arr.reduce(function (item, next) {\n\t\t    hash[next[name]] ? '' : hash[next[name]] = true && item.push(next);\n\t\t    return item;\n\t\t  }, []);\n}\n\n\nreduce函数\n\n```\n#### 数组去重\n\n```\n\n//数组去重\nfunction uniqueList(array){\n    var r = [];\n    for(var i = 0, l = array.length; i < l; i++) {\n        for(var j = i + 1; j < l; j++)\n            if (JSON.stringify(array[i]) == JSON.stringify(array[j])) j = ++i;\n        r.push(array[i]);\n    }\n    return r;\n}\n\n\n```\n#### 数组delete 之后length无效\n\n```\n//删除的数组obj, 删除第i个数据\n//delete obj[i];\nfunction changeLength(obj,i){\n\treturn  obj.slice(0,i).concat(obj.slice(i+1,obj.length));\n}\n\n```\n#### 深拷贝\n\n```\n\n普通数组直接使用[].concat(_test)\n对象数组：[].concat(JSON.parse(JSON.stringify(_test)))\n\n```\n\n#### 替代eval方案\n\n```\nfunction  evil(fn)\n{\n    var Fn = Function;\n    return new Fn('return ' + fn)(); \n}\n\n\nevil(\"function(){console.log(1111);console.log(this)}()\")\n\n```\n\n#### 获取地址中的参数\n\n```\n//正则\nfunction getUrlParam(name) {\n \tvar reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); //构造一个含有目标参数的正则表达式对象\n    var r = window.location.search.substr(1).match(reg);  //匹配目标参数\n    if (r != null) return unescape(r[2]); return null; //返回参数值\n     }\n\n//第二种，循环\nfunction getQueryVariable(variable)\n{\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n    for (var i=0;i<vars.length;i++) {\n        var pair = vars[i].split(\"=\");\n        if(pair[0] == variable){return pair[1];}\n    }\n    return(false);\n}\n\n\n```\n\n#### 加密解密\n\n\nlet encodedData = window.btoa(\"Hello, world\"); // 编码\nlet decodedData = window.atob(encodedData); // 解码\n\nparams.passwd = btoa($('input[name=\"passwd\"]').val(), true);\n\norg.apache.commons;\n\nnew String(Base64.decodeBase64(form.get(\"passwd\"))));\n\n加密解密账号\n\n```\n<script type=\"text/javascript\">\n\t$(function() {\n\t\t$(\"#btn\").click(function() {\n\t\t\tvar username = encode64($(\"#username\").val());  //对数据加密\n\t\t\tvar password = encode64($(\"#password\").val());\n\t\t\t$(\"#username\").val(username);\n\t\t\t$(\"#password\").val(password);\n\t\t\tdocument.fm.submit();  //fm为form表单name\n\t\t})\n\t})\n\t\n\t// base64加密开始\n\tvar keyStr = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\"\n\t\t\t+ \"wxyz0123456789+/\" + \"=\";\n\t\n\tfunction encode64(input) {\n \n\t\tvar output = \"\";\n\t\tvar chr1, chr2, chr3 = \"\";\n\t\tvar enc1, enc2, enc3, enc4 = \"\";\n\t\tvar i = 0;\n\t\tdo {\n\t\t\tchr1 = input.charCodeAt(i++);\n\t\t\tchr2 = input.charCodeAt(i++);\n\t\t\tchr3 = input.charCodeAt(i++);\n\t\t\tenc1 = chr1 >> 2;\n\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\tenc4 = chr3 & 63;\n\t\t\tif (isNaN(chr2)) {\n\t\t\t\tenc3 = enc4 = 64;\n\t\t\t} else if (isNaN(chr3)) {\n\t\t\t\tenc4 = 64;\n\t\t\t}\n\t\t\toutput = output + keyStr.charAt(enc1) + keyStr.charAt(enc2)\n\t\t\t\t\t+ keyStr.charAt(enc3) + keyStr.charAt(enc4);\n\t\t\tchr1 = chr2 = chr3 = \"\";\n\t\t\tenc1 = enc2 = enc3 = enc4 = \"\";\n\t\t} while (i < input.length);\n \n\t\treturn output;\n\t}\n\t// base64加密结束\n</script>\n```\n\n\n\n```\nprivate static char[] base64EncodeChars = new char[] { 'A', 'B', 'C', 'D',\n\t\t'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n\t\t'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',\n\t\t'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\n\t\t'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',\n\t\t'4', '5', '6', '7', '8', '9', '+', '/', };\n \nprivate static byte[] base64DecodeChars = new byte[] { -1, -1, -1, -1, -1,\n\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n\t\t-1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59,\n\t\t60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n\t\t10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1,\n\t\t-1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\n\t\t38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1,\n\t\t-1, -1 };\n \n/**\n * 解密\n * @param str\n * @return\n */\npublic static byte[] decode(String str) {\n\tbyte[] data = str.getBytes();\n\tint len = data.length;\n\tByteArrayOutputStream buf = new ByteArrayOutputStream(len);\n\tint i = 0;\n\tint b1, b2, b3, b4;\n \n\twhile (i < len) {\n\t\tdo {\n\t\t\tb1 = base64DecodeChars[data[i++]];\n\t\t} while (i < len && b1 == -1);\n\t\tif (b1 == -1) {\n\t\t\tbreak;\n\t\t}\n \n\t\tdo {\n\t\t\tb2 = base64DecodeChars[data[i++]];\n\t\t} while (i < len && b2 == -1);\n\t\tif (b2 == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tbuf.write((int) ((b1 << 2) | ((b2 & 0x30) >>> 4)));\n \n\t\tdo {\n\t\t\tb3 = data[i++];\n\t\t\tif (b3 == 61) {\n\t\t\t\treturn buf.toByteArray();\n\t\t\t}\n\t\t\tb3 = base64DecodeChars[b3];\n\t\t} while (i < len && b3 == -1);\n\t\tif (b3 == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tbuf.write((int) (((b2 & 0x0f) << 4) | ((b3 & 0x3c) >>> 2)));\n \n\t\tdo {\n\t\t\tb4 = data[i++];\n\t\t\tif (b4 == 61) {\n\t\t\t\treturn buf.toByteArray();\n\t\t\t}\n\t\t\tb4 = base64DecodeChars[b4];\n\t\t} while (i < len && b4 == -1);\n\t\tif (b4 == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tbuf.write((int) (((b3 & 0x03) << 6) | b4));\n\t}\n\treturn buf.toByteArray();\n}\n```","slug":"javascript-常用代码","published":1,"updated":"2019-03-05T08:19:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77n001eugv5u8byu6m3","content":"<h4 id=\"select-option选择\"><a href=\"#select-option选择\" class=\"headerlink\" title=\"select option选择\"></a>select option选择</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var options=$(&quot;#select option:selected&quot;); //获取选中的项</span><br><span class=\"line\">alert(options.val()); //拿到选中项的值</span><br><span class=\"line\">alert(options.text()); //拿到选中项的文本</span><br><span class=\"line\">alert(options.attr(&apos;url&apos;)); //拿到选中项的url值</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ajax-设置时间超时\"><a href=\"#Ajax-设置时间超时\" class=\"headerlink\" title=\"Ajax,设置时间超时\"></a>Ajax,设置时间超时</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ajaxTimeoutTest = $.ajax(&#123;</span><br><span class=\"line\">　　url:&apos;&apos;,  //请求的URL</span><br><span class=\"line\">　　timeout : 1000, //超时时间设置，单位毫秒</span><br><span class=\"line\">　　type : &apos;get&apos;,  //请求方式，get或post</span><br><span class=\"line\">　　data :&#123;&#125;,  //请求所传参数，json格式</span><br><span class=\"line\">　　dataType:&apos;json&apos;,//返回的数据格式</span><br><span class=\"line\">　　success:function(data)&#123; //请求成功的回调函数</span><br><span class=\"line\">　　　　alert(&quot;成功&quot;);</span><br><span class=\"line\">　　&#125;,</span><br><span class=\"line\">　　complete : function(XMLHttpRequest,status)&#123; //请求完成后最终执行参数</span><br><span class=\"line\">　　　　if(status==&apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class=\"line\"> 　　　　　 ajaxTimeoutTest.abort();</span><br><span class=\"line\">　　　　　  alert(&quot;超时&quot;);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">function request(url, data, success_callback,error_callback) &#123;</span><br><span class=\"line\">    console.log(&quot;url:&quot;+url);</span><br><span class=\"line\"></span><br><span class=\"line\">var xhr = $.ajax(&#123;</span><br><span class=\"line\">        //提交数据的类型 POST GET</span><br><span class=\"line\">        type: &quot;POST&quot;,</span><br><span class=\"line\">        //提交的网址</span><br><span class=\"line\">        url: url,</span><br><span class=\"line\">        //提交的数据</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">        //设置为同步</span><br><span class=\"line\">        async:false,</span><br><span class=\"line\">        // 设置超时的时间20s</span><br><span class=\"line\">        timeout:20000,</span><br><span class=\"line\">        //返回数据的格式</span><br><span class=\"line\">        datatype: &quot;json&quot;, //&quot;xml&quot;, &quot;html&quot;, &quot;script&quot;, &quot;json&quot;, &quot;jsonp&quot;, &quot;text&quot;.</span><br><span class=\"line\">        xhrFields: &#123;</span><br><span class=\"line\">            withCredentials: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        crossDomain: true,</span><br><span class=\"line\">        //在请求之前调用的函数</span><br><span class=\"line\">        beforeSend: function () &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //调用执行后调用的函数</span><br><span class=\"line\">        complete: function (XMLHttpRequest, textStatus) &#123;</span><br><span class=\"line\">            if(textStatus == &apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class=\"line\">                if (error_callback != null &amp;&amp; error_callback != &quot;&quot;) &#123;            </span><br><span class=\"line\">                    error_callback();</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //成功返回之后调用的函数             </span><br><span class=\"line\">        success: function (response) &#123;</span><br><span class=\"line\">            handleResponse(response, success_callback,error_callback);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      </span><br><span class=\"line\">        //调用出错执行的函数</span><br><span class=\"line\">        error: function () &#123;</span><br><span class=\"line\">            //请求出错处理</span><br><span class=\"line\">            console.log(&quot;error&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组对象去重\"><a href=\"#数组对象去重\" class=\"headerlink\" title=\"数组对象去重\"></a>数组对象去重</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var arr=[&#123;id:1,name:&quot;z&quot;&#125;,&#123;id:2,name:&quot;g&quot;&#125;,&#123;id:1,name:&quot;z&quot;];</span><br><span class=\"line\">arr = unique(arr,&quot;id&quot;);</span><br><span class=\"line\">console.log(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">function arrayUnique2(arr, name) &#123;</span><br><span class=\"line\">\t\t  var hash = &#123;&#125;;</span><br><span class=\"line\">\t\t  return arr.reduce(function (item, next) &#123;</span><br><span class=\"line\">\t\t    hash[next[name]] ? &apos;&apos; : hash[next[name]] = true &amp;&amp; item.push(next);</span><br><span class=\"line\">\t\t    return item;</span><br><span class=\"line\">\t\t  &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">reduce函数</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//数组去重</span><br><span class=\"line\">function uniqueList(array)&#123;</span><br><span class=\"line\">    var r = [];</span><br><span class=\"line\">    for(var i = 0, l = array.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        for(var j = i + 1; j &lt; l; j++)</span><br><span class=\"line\">            if (JSON.stringify(array[i]) == JSON.stringify(array[j])) j = ++i;</span><br><span class=\"line\">        r.push(array[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组delete-之后length无效\"><a href=\"#数组delete-之后length无效\" class=\"headerlink\" title=\"数组delete 之后length无效\"></a>数组delete 之后length无效</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除的数组obj, 删除第i个数据</span><br><span class=\"line\">//delete obj[i];</span><br><span class=\"line\">function changeLength(obj,i)&#123;</span><br><span class=\"line\">\treturn  obj.slice(0,i).concat(obj.slice(i+1,obj.length));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">普通数组直接使用[].concat(_test)</span><br><span class=\"line\">对象数组：[].concat(JSON.parse(JSON.stringify(_test)))</span><br></pre></td></tr></table></figure>\n<h4 id=\"替代eval方案\"><a href=\"#替代eval方案\" class=\"headerlink\" title=\"替代eval方案\"></a>替代eval方案</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function  evil(fn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var Fn = Function;</span><br><span class=\"line\">    return new Fn(&apos;return &apos; + fn)(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">evil(&quot;function()&#123;console.log(1111);console.log(this)&#125;()&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取地址中的参数\"><a href=\"#获取地址中的参数\" class=\"headerlink\" title=\"获取地址中的参数\"></a>获取地址中的参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//正则</span><br><span class=\"line\">function getUrlParam(name) &#123;</span><br><span class=\"line\"> \tvar reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); //构造一个含有目标参数的正则表达式对象</span><br><span class=\"line\">    var r = window.location.search.substr(1).match(reg);  //匹配目标参数</span><br><span class=\"line\">    if (r != null) return unescape(r[2]); return null; //返回参数值</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//第二种，循环</span><br><span class=\"line\">function getQueryVariable(variable)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var query = window.location.search.substring(1);</span><br><span class=\"line\">    var vars = query.split(&quot;&amp;&quot;);</span><br><span class=\"line\">    for (var i=0;i&lt;vars.length;i++) &#123;</span><br><span class=\"line\">        var pair = vars[i].split(&quot;=&quot;);</span><br><span class=\"line\">        if(pair[0] == variable)&#123;return pair[1];&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return(false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"加密解密\"><a href=\"#加密解密\" class=\"headerlink\" title=\"加密解密\"></a>加密解密</h4><p>let encodedData = window.btoa(“Hello, world”); // 编码<br>let decodedData = window.atob(encodedData); // 解码</p>\n<p>params.passwd = btoa($(‘input[name=”passwd”]’).val(), true);</p>\n<p>org.apache.commons;</p>\n<p>new String(Base64.decodeBase64(form.get(“passwd”))));</p>\n<p>加密解密账号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t$(function() &#123;</span><br><span class=\"line\">\t\t$(&quot;#btn&quot;).click(function() &#123;</span><br><span class=\"line\">\t\t\tvar username = encode64($(&quot;#username&quot;).val());  //对数据加密</span><br><span class=\"line\">\t\t\tvar password = encode64($(&quot;#password&quot;).val());</span><br><span class=\"line\">\t\t\t$(&quot;#username&quot;).val(username);</span><br><span class=\"line\">\t\t\t$(&quot;#password&quot;).val(password);</span><br><span class=\"line\">\t\t\tdocument.fm.submit();  //fm为form表单name</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// base64加密开始</span><br><span class=\"line\">\tvar keyStr = &quot;ABCDEFGHIJKLMNOP&quot; + &quot;QRSTUVWXYZabcdef&quot; + &quot;ghijklmnopqrstuv&quot;</span><br><span class=\"line\">\t\t\t+ &quot;wxyz0123456789+/&quot; + &quot;=&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction encode64(input) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tvar output = &quot;&quot;;</span><br><span class=\"line\">\t\tvar chr1, chr2, chr3 = &quot;&quot;;</span><br><span class=\"line\">\t\tvar enc1, enc2, enc3, enc4 = &quot;&quot;;</span><br><span class=\"line\">\t\tvar i = 0;</span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tchr1 = input.charCodeAt(i++);</span><br><span class=\"line\">\t\t\tchr2 = input.charCodeAt(i++);</span><br><span class=\"line\">\t\t\tchr3 = input.charCodeAt(i++);</span><br><span class=\"line\">\t\t\tenc1 = chr1 &gt;&gt; 2;</span><br><span class=\"line\">\t\t\tenc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);</span><br><span class=\"line\">\t\t\tenc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);</span><br><span class=\"line\">\t\t\tenc4 = chr3 &amp; 63;</span><br><span class=\"line\">\t\t\tif (isNaN(chr2)) &#123;</span><br><span class=\"line\">\t\t\t\tenc3 = enc4 = 64;</span><br><span class=\"line\">\t\t\t&#125; else if (isNaN(chr3)) &#123;</span><br><span class=\"line\">\t\t\t\tenc4 = 64;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\toutput = output + keyStr.charAt(enc1) + keyStr.charAt(enc2)</span><br><span class=\"line\">\t\t\t\t\t+ keyStr.charAt(enc3) + keyStr.charAt(enc4);</span><br><span class=\"line\">\t\t\tchr1 = chr2 = chr3 = &quot;&quot;;</span><br><span class=\"line\">\t\t\tenc1 = enc2 = enc3 = enc4 = &quot;&quot;;</span><br><span class=\"line\">\t\t&#125; while (i &lt; input.length);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\treturn output;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// base64加密结束</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static char[] base64EncodeChars = new char[] &#123; &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;,</span><br><span class=\"line\">\t\t&apos;E&apos;, &apos;F&apos;, &apos;G&apos;, &apos;H&apos;, &apos;I&apos;, &apos;J&apos;, &apos;K&apos;, &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;,</span><br><span class=\"line\">\t\t&apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;, &apos;X&apos;, &apos;Y&apos;, &apos;Z&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;,</span><br><span class=\"line\">\t\t&apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;,</span><br><span class=\"line\">\t\t&apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;,</span><br><span class=\"line\">\t\t&apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;+&apos;, &apos;/&apos;, &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">private static byte[] base64DecodeChars = new byte[] &#123; -1, -1, -1, -1, -1,</span><br><span class=\"line\">\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,</span><br><span class=\"line\">\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,</span><br><span class=\"line\">\t\t-1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59,</span><br><span class=\"line\">\t\t60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,</span><br><span class=\"line\">\t\t10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1,</span><br><span class=\"line\">\t\t-1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,</span><br><span class=\"line\">\t\t38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1,</span><br><span class=\"line\">\t\t-1, -1 &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 解密</span><br><span class=\"line\"> * @param str</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static byte[] decode(String str) &#123;</span><br><span class=\"line\">\tbyte[] data = str.getBytes();</span><br><span class=\"line\">\tint len = data.length;</span><br><span class=\"line\">\tByteArrayOutputStream buf = new ByteArrayOutputStream(len);</span><br><span class=\"line\">\tint i = 0;</span><br><span class=\"line\">\tint b1, b2, b3, b4;</span><br><span class=\"line\"> </span><br><span class=\"line\">\twhile (i &lt; len) &#123;</span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tb1 = base64DecodeChars[data[i++]];</span><br><span class=\"line\">\t\t&#125; while (i &lt; len &amp;&amp; b1 == -1);</span><br><span class=\"line\">\t\tif (b1 == -1) &#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tb2 = base64DecodeChars[data[i++]];</span><br><span class=\"line\">\t\t&#125; while (i &lt; len &amp;&amp; b2 == -1);</span><br><span class=\"line\">\t\tif (b2 == -1) &#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbuf.write((int) ((b1 &lt;&lt; 2) | ((b2 &amp; 0x30) &gt;&gt;&gt; 4)));</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tb3 = data[i++];</span><br><span class=\"line\">\t\t\tif (b3 == 61) &#123;</span><br><span class=\"line\">\t\t\t\treturn buf.toByteArray();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tb3 = base64DecodeChars[b3];</span><br><span class=\"line\">\t\t&#125; while (i &lt; len &amp;&amp; b3 == -1);</span><br><span class=\"line\">\t\tif (b3 == -1) &#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbuf.write((int) (((b2 &amp; 0x0f) &lt;&lt; 4) | ((b3 &amp; 0x3c) &gt;&gt;&gt; 2)));</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tb4 = data[i++];</span><br><span class=\"line\">\t\t\tif (b4 == 61) &#123;</span><br><span class=\"line\">\t\t\t\treturn buf.toByteArray();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tb4 = base64DecodeChars[b4];</span><br><span class=\"line\">\t\t&#125; while (i &lt; len &amp;&amp; b4 == -1);</span><br><span class=\"line\">\t\tif (b4 == -1) &#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbuf.write((int) (((b3 &amp; 0x03) &lt;&lt; 6) | b4));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn buf.toByteArray();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"select-option选择\"><a href=\"#select-option选择\" class=\"headerlink\" title=\"select option选择\"></a>select option选择</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var options=$(&quot;#select option:selected&quot;); //获取选中的项</span><br><span class=\"line\">alert(options.val()); //拿到选中项的值</span><br><span class=\"line\">alert(options.text()); //拿到选中项的文本</span><br><span class=\"line\">alert(options.attr(&apos;url&apos;)); //拿到选中项的url值</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ajax-设置时间超时\"><a href=\"#Ajax-设置时间超时\" class=\"headerlink\" title=\"Ajax,设置时间超时\"></a>Ajax,设置时间超时</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ajaxTimeoutTest = $.ajax(&#123;</span><br><span class=\"line\">　　url:&apos;&apos;,  //请求的URL</span><br><span class=\"line\">　　timeout : 1000, //超时时间设置，单位毫秒</span><br><span class=\"line\">　　type : &apos;get&apos;,  //请求方式，get或post</span><br><span class=\"line\">　　data :&#123;&#125;,  //请求所传参数，json格式</span><br><span class=\"line\">　　dataType:&apos;json&apos;,//返回的数据格式</span><br><span class=\"line\">　　success:function(data)&#123; //请求成功的回调函数</span><br><span class=\"line\">　　　　alert(&quot;成功&quot;);</span><br><span class=\"line\">　　&#125;,</span><br><span class=\"line\">　　complete : function(XMLHttpRequest,status)&#123; //请求完成后最终执行参数</span><br><span class=\"line\">　　　　if(status==&apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class=\"line\"> 　　　　　 ajaxTimeoutTest.abort();</span><br><span class=\"line\">　　　　　  alert(&quot;超时&quot;);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">function request(url, data, success_callback,error_callback) &#123;</span><br><span class=\"line\">    console.log(&quot;url:&quot;+url);</span><br><span class=\"line\"></span><br><span class=\"line\">var xhr = $.ajax(&#123;</span><br><span class=\"line\">        //提交数据的类型 POST GET</span><br><span class=\"line\">        type: &quot;POST&quot;,</span><br><span class=\"line\">        //提交的网址</span><br><span class=\"line\">        url: url,</span><br><span class=\"line\">        //提交的数据</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">        //设置为同步</span><br><span class=\"line\">        async:false,</span><br><span class=\"line\">        // 设置超时的时间20s</span><br><span class=\"line\">        timeout:20000,</span><br><span class=\"line\">        //返回数据的格式</span><br><span class=\"line\">        datatype: &quot;json&quot;, //&quot;xml&quot;, &quot;html&quot;, &quot;script&quot;, &quot;json&quot;, &quot;jsonp&quot;, &quot;text&quot;.</span><br><span class=\"line\">        xhrFields: &#123;</span><br><span class=\"line\">            withCredentials: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        crossDomain: true,</span><br><span class=\"line\">        //在请求之前调用的函数</span><br><span class=\"line\">        beforeSend: function () &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //调用执行后调用的函数</span><br><span class=\"line\">        complete: function (XMLHttpRequest, textStatus) &#123;</span><br><span class=\"line\">            if(textStatus == &apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class=\"line\">                if (error_callback != null &amp;&amp; error_callback != &quot;&quot;) &#123;            </span><br><span class=\"line\">                    error_callback();</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        //成功返回之后调用的函数             </span><br><span class=\"line\">        success: function (response) &#123;</span><br><span class=\"line\">            handleResponse(response, success_callback,error_callback);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      </span><br><span class=\"line\">        //调用出错执行的函数</span><br><span class=\"line\">        error: function () &#123;</span><br><span class=\"line\">            //请求出错处理</span><br><span class=\"line\">            console.log(&quot;error&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组对象去重\"><a href=\"#数组对象去重\" class=\"headerlink\" title=\"数组对象去重\"></a>数组对象去重</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var arr=[&#123;id:1,name:&quot;z&quot;&#125;,&#123;id:2,name:&quot;g&quot;&#125;,&#123;id:1,name:&quot;z&quot;];</span><br><span class=\"line\">arr = unique(arr,&quot;id&quot;);</span><br><span class=\"line\">console.log(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">function arrayUnique2(arr, name) &#123;</span><br><span class=\"line\">\t\t  var hash = &#123;&#125;;</span><br><span class=\"line\">\t\t  return arr.reduce(function (item, next) &#123;</span><br><span class=\"line\">\t\t    hash[next[name]] ? &apos;&apos; : hash[next[name]] = true &amp;&amp; item.push(next);</span><br><span class=\"line\">\t\t    return item;</span><br><span class=\"line\">\t\t  &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">reduce函数</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//数组去重</span><br><span class=\"line\">function uniqueList(array)&#123;</span><br><span class=\"line\">    var r = [];</span><br><span class=\"line\">    for(var i = 0, l = array.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        for(var j = i + 1; j &lt; l; j++)</span><br><span class=\"line\">            if (JSON.stringify(array[i]) == JSON.stringify(array[j])) j = ++i;</span><br><span class=\"line\">        r.push(array[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组delete-之后length无效\"><a href=\"#数组delete-之后length无效\" class=\"headerlink\" title=\"数组delete 之后length无效\"></a>数组delete 之后length无效</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除的数组obj, 删除第i个数据</span><br><span class=\"line\">//delete obj[i];</span><br><span class=\"line\">function changeLength(obj,i)&#123;</span><br><span class=\"line\">\treturn  obj.slice(0,i).concat(obj.slice(i+1,obj.length));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">普通数组直接使用[].concat(_test)</span><br><span class=\"line\">对象数组：[].concat(JSON.parse(JSON.stringify(_test)))</span><br></pre></td></tr></table></figure>\n<h4 id=\"替代eval方案\"><a href=\"#替代eval方案\" class=\"headerlink\" title=\"替代eval方案\"></a>替代eval方案</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function  evil(fn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var Fn = Function;</span><br><span class=\"line\">    return new Fn(&apos;return &apos; + fn)(); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">evil(&quot;function()&#123;console.log(1111);console.log(this)&#125;()&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取地址中的参数\"><a href=\"#获取地址中的参数\" class=\"headerlink\" title=\"获取地址中的参数\"></a>获取地址中的参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//正则</span><br><span class=\"line\">function getUrlParam(name) &#123;</span><br><span class=\"line\"> \tvar reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); //构造一个含有目标参数的正则表达式对象</span><br><span class=\"line\">    var r = window.location.search.substr(1).match(reg);  //匹配目标参数</span><br><span class=\"line\">    if (r != null) return unescape(r[2]); return null; //返回参数值</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//第二种，循环</span><br><span class=\"line\">function getQueryVariable(variable)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var query = window.location.search.substring(1);</span><br><span class=\"line\">    var vars = query.split(&quot;&amp;&quot;);</span><br><span class=\"line\">    for (var i=0;i&lt;vars.length;i++) &#123;</span><br><span class=\"line\">        var pair = vars[i].split(&quot;=&quot;);</span><br><span class=\"line\">        if(pair[0] == variable)&#123;return pair[1];&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return(false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"加密解密\"><a href=\"#加密解密\" class=\"headerlink\" title=\"加密解密\"></a>加密解密</h4><p>let encodedData = window.btoa(“Hello, world”); // 编码<br>let decodedData = window.atob(encodedData); // 解码</p>\n<p>params.passwd = btoa($(‘input[name=”passwd”]’).val(), true);</p>\n<p>org.apache.commons;</p>\n<p>new String(Base64.decodeBase64(form.get(“passwd”))));</p>\n<p>加密解密账号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t$(function() &#123;</span><br><span class=\"line\">\t\t$(&quot;#btn&quot;).click(function() &#123;</span><br><span class=\"line\">\t\t\tvar username = encode64($(&quot;#username&quot;).val());  //对数据加密</span><br><span class=\"line\">\t\t\tvar password = encode64($(&quot;#password&quot;).val());</span><br><span class=\"line\">\t\t\t$(&quot;#username&quot;).val(username);</span><br><span class=\"line\">\t\t\t$(&quot;#password&quot;).val(password);</span><br><span class=\"line\">\t\t\tdocument.fm.submit();  //fm为form表单name</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// base64加密开始</span><br><span class=\"line\">\tvar keyStr = &quot;ABCDEFGHIJKLMNOP&quot; + &quot;QRSTUVWXYZabcdef&quot; + &quot;ghijklmnopqrstuv&quot;</span><br><span class=\"line\">\t\t\t+ &quot;wxyz0123456789+/&quot; + &quot;=&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfunction encode64(input) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tvar output = &quot;&quot;;</span><br><span class=\"line\">\t\tvar chr1, chr2, chr3 = &quot;&quot;;</span><br><span class=\"line\">\t\tvar enc1, enc2, enc3, enc4 = &quot;&quot;;</span><br><span class=\"line\">\t\tvar i = 0;</span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tchr1 = input.charCodeAt(i++);</span><br><span class=\"line\">\t\t\tchr2 = input.charCodeAt(i++);</span><br><span class=\"line\">\t\t\tchr3 = input.charCodeAt(i++);</span><br><span class=\"line\">\t\t\tenc1 = chr1 &gt;&gt; 2;</span><br><span class=\"line\">\t\t\tenc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);</span><br><span class=\"line\">\t\t\tenc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);</span><br><span class=\"line\">\t\t\tenc4 = chr3 &amp; 63;</span><br><span class=\"line\">\t\t\tif (isNaN(chr2)) &#123;</span><br><span class=\"line\">\t\t\t\tenc3 = enc4 = 64;</span><br><span class=\"line\">\t\t\t&#125; else if (isNaN(chr3)) &#123;</span><br><span class=\"line\">\t\t\t\tenc4 = 64;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\toutput = output + keyStr.charAt(enc1) + keyStr.charAt(enc2)</span><br><span class=\"line\">\t\t\t\t\t+ keyStr.charAt(enc3) + keyStr.charAt(enc4);</span><br><span class=\"line\">\t\t\tchr1 = chr2 = chr3 = &quot;&quot;;</span><br><span class=\"line\">\t\t\tenc1 = enc2 = enc3 = enc4 = &quot;&quot;;</span><br><span class=\"line\">\t\t&#125; while (i &lt; input.length);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\treturn output;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// base64加密结束</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static char[] base64EncodeChars = new char[] &#123; &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;,</span><br><span class=\"line\">\t\t&apos;E&apos;, &apos;F&apos;, &apos;G&apos;, &apos;H&apos;, &apos;I&apos;, &apos;J&apos;, &apos;K&apos;, &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;,</span><br><span class=\"line\">\t\t&apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;, &apos;X&apos;, &apos;Y&apos;, &apos;Z&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;,</span><br><span class=\"line\">\t\t&apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;,</span><br><span class=\"line\">\t\t&apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;,</span><br><span class=\"line\">\t\t&apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;+&apos;, &apos;/&apos;, &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">private static byte[] base64DecodeChars = new byte[] &#123; -1, -1, -1, -1, -1,</span><br><span class=\"line\">\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,</span><br><span class=\"line\">\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,</span><br><span class=\"line\">\t\t-1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59,</span><br><span class=\"line\">\t\t60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,</span><br><span class=\"line\">\t\t10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1,</span><br><span class=\"line\">\t\t-1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,</span><br><span class=\"line\">\t\t38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1,</span><br><span class=\"line\">\t\t-1, -1 &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 解密</span><br><span class=\"line\"> * @param str</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span><br><span class=\"line\">public static byte[] decode(String str) &#123;</span><br><span class=\"line\">\tbyte[] data = str.getBytes();</span><br><span class=\"line\">\tint len = data.length;</span><br><span class=\"line\">\tByteArrayOutputStream buf = new ByteArrayOutputStream(len);</span><br><span class=\"line\">\tint i = 0;</span><br><span class=\"line\">\tint b1, b2, b3, b4;</span><br><span class=\"line\"> </span><br><span class=\"line\">\twhile (i &lt; len) &#123;</span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tb1 = base64DecodeChars[data[i++]];</span><br><span class=\"line\">\t\t&#125; while (i &lt; len &amp;&amp; b1 == -1);</span><br><span class=\"line\">\t\tif (b1 == -1) &#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tb2 = base64DecodeChars[data[i++]];</span><br><span class=\"line\">\t\t&#125; while (i &lt; len &amp;&amp; b2 == -1);</span><br><span class=\"line\">\t\tif (b2 == -1) &#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbuf.write((int) ((b1 &lt;&lt; 2) | ((b2 &amp; 0x30) &gt;&gt;&gt; 4)));</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tb3 = data[i++];</span><br><span class=\"line\">\t\t\tif (b3 == 61) &#123;</span><br><span class=\"line\">\t\t\t\treturn buf.toByteArray();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tb3 = base64DecodeChars[b3];</span><br><span class=\"line\">\t\t&#125; while (i &lt; len &amp;&amp; b3 == -1);</span><br><span class=\"line\">\t\tif (b3 == -1) &#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbuf.write((int) (((b2 &amp; 0x0f) &lt;&lt; 4) | ((b3 &amp; 0x3c) &gt;&gt;&gt; 2)));</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tdo &#123;</span><br><span class=\"line\">\t\t\tb4 = data[i++];</span><br><span class=\"line\">\t\t\tif (b4 == 61) &#123;</span><br><span class=\"line\">\t\t\t\treturn buf.toByteArray();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tb4 = base64DecodeChars[b4];</span><br><span class=\"line\">\t\t&#125; while (i &lt; len &amp;&amp; b4 == -1);</span><br><span class=\"line\">\t\tif (b4 == -1) &#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbuf.write((int) (((b3 &amp; 0x03) &lt;&lt; 6) | b4));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn buf.toByteArray();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"javascript再学习之Event","date":"2017-08-09T04:03:00.000Z","description":"顺着上一篇DOM结束，本来是CSS，但自己对事件了解的很少，就先看Event了","_content":"\n\n## Event\n\n\naddEventListener/attachEvent\n\nremoveEventListener/detachEvent\n\n通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；\n移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过addEventListener()添加的匿名函数无法移除\n布尔值参数是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。\n\n```\ndocument.body.addEventListener('touchmove', function (event) {\n    event.preventDefault();\n},false);\ndocument.body.removeEventListener('touchmove', function (event) {\n    event.preventDefault();\n},false);\n这样是不能移除的，因为第二个函数是一个新的空间函数，既是写的样子和第一个一样。\n\n```\n一：相同事件绑定和解除，需要使用共用函数；\n\n二：共用函数不能带参数；\n\n### 捕获与冒泡\n\nEvent原理\n\n\n一、事件捕获阶段\n\n二、事件目标阶段\n\n三、事件起泡阶段\n\njQuery\n\n在绑定的时候做了包装处理\n在执行的时候有过滤器处理\n\n[ JS添加事件和解绑事件：addEventListener()与removeEventListener()](http://blog.csdn.net/bingkingboy/article/details/50160221)\n[addEventListener()、attachEvent()和removeEventListener()、detachEvent()的区别？](http://blog.csdn.net/itpinpai/article/details/50915771)","source":"_posts/javascript再学习之Event.md","raw":"---\ntitle: javascript再学习之Event\ndate: 2017-08-09 12:03:00\ntags: 前端\ncategories: [javascript]\ndescription: \"顺着上一篇DOM结束，本来是CSS，但自己对事件了解的很少，就先看Event了\"\n---\n\n\n## Event\n\n\naddEventListener/attachEvent\n\nremoveEventListener/detachEvent\n\n通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；\n移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过addEventListener()添加的匿名函数无法移除\n布尔值参数是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。\n\n```\ndocument.body.addEventListener('touchmove', function (event) {\n    event.preventDefault();\n},false);\ndocument.body.removeEventListener('touchmove', function (event) {\n    event.preventDefault();\n},false);\n这样是不能移除的，因为第二个函数是一个新的空间函数，既是写的样子和第一个一样。\n\n```\n一：相同事件绑定和解除，需要使用共用函数；\n\n二：共用函数不能带参数；\n\n### 捕获与冒泡\n\nEvent原理\n\n\n一、事件捕获阶段\n\n二、事件目标阶段\n\n三、事件起泡阶段\n\njQuery\n\n在绑定的时候做了包装处理\n在执行的时候有过滤器处理\n\n[ JS添加事件和解绑事件：addEventListener()与removeEventListener()](http://blog.csdn.net/bingkingboy/article/details/50160221)\n[addEventListener()、attachEvent()和removeEventListener()、detachEvent()的区别？](http://blog.csdn.net/itpinpai/article/details/50915771)","slug":"javascript再学习之Event","published":1,"updated":"2018-01-24T09:40:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77o001hugv5b1flb7ai","content":"<h2 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h2><p>addEventListener/attachEvent</p>\n<p>removeEventListener/detachEvent</p>\n<p>通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；<br>移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过addEventListener()添加的匿名函数无法移除<br>布尔值参数是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.body.addEventListener(&apos;touchmove&apos;, function (event) &#123;</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">&#125;,false);</span><br><span class=\"line\">document.body.removeEventListener(&apos;touchmove&apos;, function (event) &#123;</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">&#125;,false);</span><br><span class=\"line\">这样是不能移除的，因为第二个函数是一个新的空间函数，既是写的样子和第一个一样。</span><br></pre></td></tr></table></figure>\n<p>一：相同事件绑定和解除，需要使用共用函数；</p>\n<p>二：共用函数不能带参数；</p>\n<h3 id=\"捕获与冒泡\"><a href=\"#捕获与冒泡\" class=\"headerlink\" title=\"捕获与冒泡\"></a>捕获与冒泡</h3><p>Event原理</p>\n<p>一、事件捕获阶段</p>\n<p>二、事件目标阶段</p>\n<p>三、事件起泡阶段</p>\n<p>jQuery</p>\n<p>在绑定的时候做了包装处理<br>在执行的时候有过滤器处理</p>\n<p><a href=\"http://blog.csdn.net/bingkingboy/article/details/50160221\" target=\"_blank\" rel=\"noopener\"> JS添加事件和解绑事件：addEventListener()与removeEventListener()</a><br><a href=\"http://blog.csdn.net/itpinpai/article/details/50915771\" target=\"_blank\" rel=\"noopener\">addEventListener()、attachEvent()和removeEventListener()、detachEvent()的区别？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h2><p>addEventListener/attachEvent</p>\n<p>removeEventListener/detachEvent</p>\n<p>通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；<br>移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过addEventListener()添加的匿名函数无法移除<br>布尔值参数是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.body.addEventListener(&apos;touchmove&apos;, function (event) &#123;</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">&#125;,false);</span><br><span class=\"line\">document.body.removeEventListener(&apos;touchmove&apos;, function (event) &#123;</span><br><span class=\"line\">    event.preventDefault();</span><br><span class=\"line\">&#125;,false);</span><br><span class=\"line\">这样是不能移除的，因为第二个函数是一个新的空间函数，既是写的样子和第一个一样。</span><br></pre></td></tr></table></figure>\n<p>一：相同事件绑定和解除，需要使用共用函数；</p>\n<p>二：共用函数不能带参数；</p>\n<h3 id=\"捕获与冒泡\"><a href=\"#捕获与冒泡\" class=\"headerlink\" title=\"捕获与冒泡\"></a>捕获与冒泡</h3><p>Event原理</p>\n<p>一、事件捕获阶段</p>\n<p>二、事件目标阶段</p>\n<p>三、事件起泡阶段</p>\n<p>jQuery</p>\n<p>在绑定的时候做了包装处理<br>在执行的时候有过滤器处理</p>\n<p><a href=\"http://blog.csdn.net/bingkingboy/article/details/50160221\" target=\"_blank\" rel=\"noopener\"> JS添加事件和解绑事件：addEventListener()与removeEventListener()</a><br><a href=\"http://blog.csdn.net/itpinpai/article/details/50915771\" target=\"_blank\" rel=\"noopener\">addEventListener()、attachEvent()和removeEventListener()、detachEvent()的区别？</a></p>\n"},{"title":"javascript再学习之prototype","date":"2017-12-21T18:38:06.000Z","description":"prototype永远是一个迷，值得去探索！","_content":"\n\n## Function中\n\n  有prototype 和\\_\\_proto\\_\\_\n\n#### 第一种情况 对象中有say\n\n![对象](javascript再学习之prototype/person.png)\n```\nfunction Person(){\n\t  this.say = function(){\n\t    console.log(\"Hello\");\n\t  };\n\t}\n\tvar person = new Person();\n\tperson.say(); //hello\n\tdebugger;\n```\n\nES6\n\n```\nclass Person {\n constructor() {\n     this.say = function() {\n         console.log(\"hello\");\n     };\n }\n}\n\nconst person = new Person();\nconst p2 = new Person();\nconsole.log(person.say === p2.say);// false\ndebugger;\n ```\n#### 第二种情况 原型上有say\n\n\n![原型](javascript再学习之prototype/person2.png)\n\np1.say == person.say 肯定是true\n\n```\nfunction Person {  \n}\nPerson.prototype.say = function(){\nconsole.log(\"hello\");\n}\nconst person = new Person();\nconst p2 = new Person();\nperson.say();//hello\ndebugger;\n\n```\n\nprototype实际上也是一个对象,然后constructor就是function Person\n\n```\nvar Person  = function () {\nconsole.log(\"person\");\n}\nPerson.prototype ={\n  constructor: Person,\n  say : function(){\n      console.log(\"hello\");\n     }\n}\nconst person = new Person();//person\nconst p2 = new Person();//person\nperson.say();//hello\nperson.say == p2.say;  //true\ndebugger;\n```\n\nES6\n\n```\nclass Person {\n say() {\n     console.log(\"hello\");\n }\n}\nconst person = new Person();\nconst p2 = new Person();\nperson.say();\ndebugger;\n```\n#### 第三种情况 两个都有say，执行哪一个？\n\n```\nvar Person  = function () {\n    console.log(\"person\");\n\tthis.say = function(){\n\t\tconsole.log(\"hello2\");\n\t}\n}\nPerson.prototype ={\n  constructor: Person,\n  say : function(){\n      console.log(\"hello\");\n     }\n}\nconst person = new Person();//person\nconst p2 = new Person();//person\nperson.say();//hello2\nperson.say == p2.say;  //false\ndebugger;\n```\nperson.say 执行最近的一个，因为对象中有,所以直接执行`hello2`,如果没有的话就找prototype中的方法，如果没有这个方法，则出错。\n\n\n#### Person 方法的\\_\\_proto\\_\\_\n\n\nPerson.\\_\\_proto\\_\\_  === Function.prototype\n\n这里实际上Person已经作为了Function的一个实例，对应到Person上来说，对象的\\_\\_proto\\_\\_和构造方法的prototype 是相等的\n\n即 person.\\_\\_proto\\_\\_ === Person.prototype\n\n## Object中\n\n只有 \\_\\_proto\\_\\_\n\n如果作为一个单纯的对象来说，是只有\\_\\_proto\\_\\_\n\n所以对于Object来说，实际上是Function的一个实例 ，那么  Object.\\_\\_proto\\_\\_ === Function.prototype;\n\n同时Object 也是一个方法,任何一个 var a ={},这样的话，a.\\_\\_proto\\_\\_ === Object.prototype;\n\n方法的prototype 是对象吧，那么Function.prototype就有 \\_\\_proto\\_\\_, 所以下面一个就说的通了,\n\nFunction.prototype.\\_\\_proto\\_\\_ ===Object.prototype;\n\n那么Object.prototype 是对象,那么它的\\_\\_proto\\_\\_是什么呢？ null\n\n下面这个怎么解释？\n\nFunction.\\_\\_proto\\_\\_ === Function.prototype \n\n\n\n\n```\n\n\nvar A = function(){}; // A是一个方法，当然也是个对象  \nvar a = new A(); // a是一个由A创造出的对象，不是方法  \n\n//看一看对象非方法的行为\nconsole.log(a.__proto__); //object  \nconsole.log(a.prototype); //undefined, 对象没有 \n\n//看一看方法的行为，方法也是对象哦\n\nconsole.log(A.__proto__); //function  \nconsole.log(A.prototype); //object  \n\n\n\nconsole.log(a.__proto__ === A.prototype); //true  \nconsole.log(a.prototype === undefined); //true\n\nconsole.log(A.__proto__ === Function.prototype); //true  \nconsole.log(A.prototype === a.__proto__); //true  \n\n//先看a这条链\nconsole.log(a.__proto__.__proto__ === A.prototype.__proto__); //true  \nconsole.log(a.__proto__.__proto__ === Object.prototype);//true  \nconsole.log(a.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  \nconsole.log(a.__proto__.__proto__.__proto__ === null);//true\n\n\n//再看看A这条条链\nconsole.log(A.__proto__.__proto__ === Function.prototype.__proto__);//true  \nconsole.log(A.__proto__.__proto__ === Object.prototype);//true  \nconsole.log(A.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  \nconsole.log(A.__proto__.__proto__.__proto__ === null);//true  \n\n```\n\n![prototype](javascript再学习之prototype/xproto-2.png)\n\n参考 [从 \\_\\_proto\\_\\_ prototype 说起](http://varnull.cn/cong-\\_\\_proto\\_\\_-prototype-shuo-qi/)","source":"_posts/javascript再学习之prototype.md","raw":"---\ntitle: javascript再学习之prototype\ndate: 2017-12-22 02:38:06\ntags: [前端,prototype]\ncategories: [javascript]\ndescription: \"prototype永远是一个迷，值得去探索！\"\n---\n\n\n## Function中\n\n  有prototype 和\\_\\_proto\\_\\_\n\n#### 第一种情况 对象中有say\n\n![对象](javascript再学习之prototype/person.png)\n```\nfunction Person(){\n\t  this.say = function(){\n\t    console.log(\"Hello\");\n\t  };\n\t}\n\tvar person = new Person();\n\tperson.say(); //hello\n\tdebugger;\n```\n\nES6\n\n```\nclass Person {\n constructor() {\n     this.say = function() {\n         console.log(\"hello\");\n     };\n }\n}\n\nconst person = new Person();\nconst p2 = new Person();\nconsole.log(person.say === p2.say);// false\ndebugger;\n ```\n#### 第二种情况 原型上有say\n\n\n![原型](javascript再学习之prototype/person2.png)\n\np1.say == person.say 肯定是true\n\n```\nfunction Person {  \n}\nPerson.prototype.say = function(){\nconsole.log(\"hello\");\n}\nconst person = new Person();\nconst p2 = new Person();\nperson.say();//hello\ndebugger;\n\n```\n\nprototype实际上也是一个对象,然后constructor就是function Person\n\n```\nvar Person  = function () {\nconsole.log(\"person\");\n}\nPerson.prototype ={\n  constructor: Person,\n  say : function(){\n      console.log(\"hello\");\n     }\n}\nconst person = new Person();//person\nconst p2 = new Person();//person\nperson.say();//hello\nperson.say == p2.say;  //true\ndebugger;\n```\n\nES6\n\n```\nclass Person {\n say() {\n     console.log(\"hello\");\n }\n}\nconst person = new Person();\nconst p2 = new Person();\nperson.say();\ndebugger;\n```\n#### 第三种情况 两个都有say，执行哪一个？\n\n```\nvar Person  = function () {\n    console.log(\"person\");\n\tthis.say = function(){\n\t\tconsole.log(\"hello2\");\n\t}\n}\nPerson.prototype ={\n  constructor: Person,\n  say : function(){\n      console.log(\"hello\");\n     }\n}\nconst person = new Person();//person\nconst p2 = new Person();//person\nperson.say();//hello2\nperson.say == p2.say;  //false\ndebugger;\n```\nperson.say 执行最近的一个，因为对象中有,所以直接执行`hello2`,如果没有的话就找prototype中的方法，如果没有这个方法，则出错。\n\n\n#### Person 方法的\\_\\_proto\\_\\_\n\n\nPerson.\\_\\_proto\\_\\_  === Function.prototype\n\n这里实际上Person已经作为了Function的一个实例，对应到Person上来说，对象的\\_\\_proto\\_\\_和构造方法的prototype 是相等的\n\n即 person.\\_\\_proto\\_\\_ === Person.prototype\n\n## Object中\n\n只有 \\_\\_proto\\_\\_\n\n如果作为一个单纯的对象来说，是只有\\_\\_proto\\_\\_\n\n所以对于Object来说，实际上是Function的一个实例 ，那么  Object.\\_\\_proto\\_\\_ === Function.prototype;\n\n同时Object 也是一个方法,任何一个 var a ={},这样的话，a.\\_\\_proto\\_\\_ === Object.prototype;\n\n方法的prototype 是对象吧，那么Function.prototype就有 \\_\\_proto\\_\\_, 所以下面一个就说的通了,\n\nFunction.prototype.\\_\\_proto\\_\\_ ===Object.prototype;\n\n那么Object.prototype 是对象,那么它的\\_\\_proto\\_\\_是什么呢？ null\n\n下面这个怎么解释？\n\nFunction.\\_\\_proto\\_\\_ === Function.prototype \n\n\n\n\n```\n\n\nvar A = function(){}; // A是一个方法，当然也是个对象  \nvar a = new A(); // a是一个由A创造出的对象，不是方法  \n\n//看一看对象非方法的行为\nconsole.log(a.__proto__); //object  \nconsole.log(a.prototype); //undefined, 对象没有 \n\n//看一看方法的行为，方法也是对象哦\n\nconsole.log(A.__proto__); //function  \nconsole.log(A.prototype); //object  \n\n\n\nconsole.log(a.__proto__ === A.prototype); //true  \nconsole.log(a.prototype === undefined); //true\n\nconsole.log(A.__proto__ === Function.prototype); //true  \nconsole.log(A.prototype === a.__proto__); //true  \n\n//先看a这条链\nconsole.log(a.__proto__.__proto__ === A.prototype.__proto__); //true  \nconsole.log(a.__proto__.__proto__ === Object.prototype);//true  \nconsole.log(a.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  \nconsole.log(a.__proto__.__proto__.__proto__ === null);//true\n\n\n//再看看A这条条链\nconsole.log(A.__proto__.__proto__ === Function.prototype.__proto__);//true  \nconsole.log(A.__proto__.__proto__ === Object.prototype);//true  \nconsole.log(A.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  \nconsole.log(A.__proto__.__proto__.__proto__ === null);//true  \n\n```\n\n![prototype](javascript再学习之prototype/xproto-2.png)\n\n参考 [从 \\_\\_proto\\_\\_ prototype 说起](http://varnull.cn/cong-\\_\\_proto\\_\\_-prototype-shuo-qi/)","slug":"javascript再学习之prototype","published":1,"updated":"2017-12-26T07:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77p001kugv5m3ys6xa2","content":"<h2 id=\"Function中\"><a href=\"#Function中\" class=\"headerlink\" title=\"Function中\"></a>Function中</h2><p>  有prototype 和__proto__</p>\n<h4 id=\"第一种情况-对象中有say\"><a href=\"#第一种情况-对象中有say\" class=\"headerlink\" title=\"第一种情况 对象中有say\"></a>第一种情况 对象中有say</h4><p><img src=\"/.io//person.png\" alt=\"对象\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">\t  this.say = function()&#123;</span><br><span class=\"line\">\t    console.log(&quot;Hello&quot;);</span><br><span class=\"line\">\t  &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar person = new Person();</span><br><span class=\"line\">\tperson.say(); //hello</span><br><span class=\"line\">\tdebugger;</span><br></pre></td></tr></table></figure></p>\n<p>ES6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\"> constructor() &#123;</span><br><span class=\"line\">     this.say = function() &#123;</span><br><span class=\"line\">         console.log(&quot;hello&quot;);</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">const p2 = new Person();</span><br><span class=\"line\">console.log(person.say === p2.say);// false</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二种情况-原型上有say\"><a href=\"#第二种情况-原型上有say\" class=\"headerlink\" title=\"第二种情况 原型上有say\"></a>第二种情况 原型上有say</h4><p><img src=\"/.io//person2.png\" alt=\"原型\"></p>\n<p>p1.say == person.say 肯定是true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person &#123;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.say = function()&#123;</span><br><span class=\"line\">console.log(&quot;hello&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">const p2 = new Person();</span><br><span class=\"line\">person.say();//hello</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<p>prototype实际上也是一个对象,然后constructor就是function Person</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Person  = function () &#123;</span><br><span class=\"line\">console.log(&quot;person&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype =&#123;</span><br><span class=\"line\">  constructor: Person,</span><br><span class=\"line\">  say : function()&#123;</span><br><span class=\"line\">      console.log(&quot;hello&quot;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();//person</span><br><span class=\"line\">const p2 = new Person();//person</span><br><span class=\"line\">person.say();//hello</span><br><span class=\"line\">person.say == p2.say;  //true</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<p>ES6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\"> say() &#123;</span><br><span class=\"line\">     console.log(&quot;hello&quot;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">const p2 = new Person();</span><br><span class=\"line\">person.say();</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三种情况-两个都有say，执行哪一个？\"><a href=\"#第三种情况-两个都有say，执行哪一个？\" class=\"headerlink\" title=\"第三种情况 两个都有say，执行哪一个？\"></a>第三种情况 两个都有say，执行哪一个？</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Person  = function () &#123;</span><br><span class=\"line\">    console.log(&quot;person&quot;);</span><br><span class=\"line\">\tthis.say = function()&#123;</span><br><span class=\"line\">\t\tconsole.log(&quot;hello2&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype =&#123;</span><br><span class=\"line\">  constructor: Person,</span><br><span class=\"line\">  say : function()&#123;</span><br><span class=\"line\">      console.log(&quot;hello&quot;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();//person</span><br><span class=\"line\">const p2 = new Person();//person</span><br><span class=\"line\">person.say();//hello2</span><br><span class=\"line\">person.say == p2.say;  //false</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<p>person.say 执行最近的一个，因为对象中有,所以直接执行<code>hello2</code>,如果没有的话就找prototype中的方法，如果没有这个方法，则出错。</p>\n<h4 id=\"Person-方法的-proto\"><a href=\"#Person-方法的-proto\" class=\"headerlink\" title=\"Person 方法的__proto__\"></a>Person 方法的__proto__</h4><p>Person.__proto__  === Function.prototype</p>\n<p>这里实际上Person已经作为了Function的一个实例，对应到Person上来说，对象的__proto__和构造方法的prototype 是相等的</p>\n<p>即 person.__proto__ === Person.prototype</p>\n<h2 id=\"Object中\"><a href=\"#Object中\" class=\"headerlink\" title=\"Object中\"></a>Object中</h2><p>只有 __proto__</p>\n<p>如果作为一个单纯的对象来说，是只有__proto__</p>\n<p>所以对于Object来说，实际上是Function的一个实例 ，那么  Object.__proto__ === Function.prototype;</p>\n<p>同时Object 也是一个方法,任何一个 var a ={},这样的话，a.__proto__ === Object.prototype;</p>\n<p>方法的prototype 是对象吧，那么Function.prototype就有 __proto__, 所以下面一个就说的通了,</p>\n<p>Function.prototype.__proto__ ===Object.prototype;</p>\n<p>那么Object.prototype 是对象,那么它的__proto__是什么呢？ null</p>\n<p>下面这个怎么解释？</p>\n<p>Function.__proto__ === Function.prototype </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var A = function()&#123;&#125;; // A是一个方法，当然也是个对象  </span><br><span class=\"line\">var a = new A(); // a是一个由A创造出的对象，不是方法  </span><br><span class=\"line\"></span><br><span class=\"line\">//看一看对象非方法的行为</span><br><span class=\"line\">console.log(a.__proto__); //object  </span><br><span class=\"line\">console.log(a.prototype); //undefined, 对象没有 </span><br><span class=\"line\"></span><br><span class=\"line\">//看一看方法的行为，方法也是对象哦</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(A.__proto__); //function  </span><br><span class=\"line\">console.log(A.prototype); //object  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a.__proto__ === A.prototype); //true  </span><br><span class=\"line\">console.log(a.prototype === undefined); //true</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(A.__proto__ === Function.prototype); //true  </span><br><span class=\"line\">console.log(A.prototype === a.__proto__); //true  </span><br><span class=\"line\"></span><br><span class=\"line\">//先看a这条链</span><br><span class=\"line\">console.log(a.__proto__.__proto__ === A.prototype.__proto__); //true  </span><br><span class=\"line\">console.log(a.__proto__.__proto__ === Object.prototype);//true  </span><br><span class=\"line\">console.log(a.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  </span><br><span class=\"line\">console.log(a.__proto__.__proto__.__proto__ === null);//true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//再看看A这条条链</span><br><span class=\"line\">console.log(A.__proto__.__proto__ === Function.prototype.__proto__);//true  </span><br><span class=\"line\">console.log(A.__proto__.__proto__ === Object.prototype);//true  </span><br><span class=\"line\">console.log(A.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  </span><br><span class=\"line\">console.log(A.__proto__.__proto__.__proto__ === null);//true</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//xproto-2.png\" alt=\"prototype\"></p>\n<p>参考 <a href=\"http://varnull.cn/cong-\\_\\_proto\\_\\_-prototype-shuo-qi/\" target=\"_blank\" rel=\"noopener\">从 __proto__ prototype 说起</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Function中\"><a href=\"#Function中\" class=\"headerlink\" title=\"Function中\"></a>Function中</h2><p>  有prototype 和__proto__</p>\n<h4 id=\"第一种情况-对象中有say\"><a href=\"#第一种情况-对象中有say\" class=\"headerlink\" title=\"第一种情况 对象中有say\"></a>第一种情况 对象中有say</h4><p><img src=\"/.io//person.png\" alt=\"对象\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">\t  this.say = function()&#123;</span><br><span class=\"line\">\t    console.log(&quot;Hello&quot;);</span><br><span class=\"line\">\t  &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar person = new Person();</span><br><span class=\"line\">\tperson.say(); //hello</span><br><span class=\"line\">\tdebugger;</span><br></pre></td></tr></table></figure></p>\n<p>ES6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\"> constructor() &#123;</span><br><span class=\"line\">     this.say = function() &#123;</span><br><span class=\"line\">         console.log(&quot;hello&quot;);</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">const p2 = new Person();</span><br><span class=\"line\">console.log(person.say === p2.say);// false</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第二种情况-原型上有say\"><a href=\"#第二种情况-原型上有say\" class=\"headerlink\" title=\"第二种情况 原型上有say\"></a>第二种情况 原型上有say</h4><p><img src=\"/.io//person2.png\" alt=\"原型\"></p>\n<p>p1.say == person.say 肯定是true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person &#123;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.say = function()&#123;</span><br><span class=\"line\">console.log(&quot;hello&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">const p2 = new Person();</span><br><span class=\"line\">person.say();//hello</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<p>prototype实际上也是一个对象,然后constructor就是function Person</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Person  = function () &#123;</span><br><span class=\"line\">console.log(&quot;person&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype =&#123;</span><br><span class=\"line\">  constructor: Person,</span><br><span class=\"line\">  say : function()&#123;</span><br><span class=\"line\">      console.log(&quot;hello&quot;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();//person</span><br><span class=\"line\">const p2 = new Person();//person</span><br><span class=\"line\">person.say();//hello</span><br><span class=\"line\">person.say == p2.say;  //true</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<p>ES6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\"> say() &#123;</span><br><span class=\"line\">     console.log(&quot;hello&quot;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();</span><br><span class=\"line\">const p2 = new Person();</span><br><span class=\"line\">person.say();</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三种情况-两个都有say，执行哪一个？\"><a href=\"#第三种情况-两个都有say，执行哪一个？\" class=\"headerlink\" title=\"第三种情况 两个都有say，执行哪一个？\"></a>第三种情况 两个都有say，执行哪一个？</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Person  = function () &#123;</span><br><span class=\"line\">    console.log(&quot;person&quot;);</span><br><span class=\"line\">\tthis.say = function()&#123;</span><br><span class=\"line\">\t\tconsole.log(&quot;hello2&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype =&#123;</span><br><span class=\"line\">  constructor: Person,</span><br><span class=\"line\">  say : function()&#123;</span><br><span class=\"line\">      console.log(&quot;hello&quot;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const person = new Person();//person</span><br><span class=\"line\">const p2 = new Person();//person</span><br><span class=\"line\">person.say();//hello2</span><br><span class=\"line\">person.say == p2.say;  //false</span><br><span class=\"line\">debugger;</span><br></pre></td></tr></table></figure>\n<p>person.say 执行最近的一个，因为对象中有,所以直接执行<code>hello2</code>,如果没有的话就找prototype中的方法，如果没有这个方法，则出错。</p>\n<h4 id=\"Person-方法的-proto\"><a href=\"#Person-方法的-proto\" class=\"headerlink\" title=\"Person 方法的__proto__\"></a>Person 方法的__proto__</h4><p>Person.__proto__  === Function.prototype</p>\n<p>这里实际上Person已经作为了Function的一个实例，对应到Person上来说，对象的__proto__和构造方法的prototype 是相等的</p>\n<p>即 person.__proto__ === Person.prototype</p>\n<h2 id=\"Object中\"><a href=\"#Object中\" class=\"headerlink\" title=\"Object中\"></a>Object中</h2><p>只有 __proto__</p>\n<p>如果作为一个单纯的对象来说，是只有__proto__</p>\n<p>所以对于Object来说，实际上是Function的一个实例 ，那么  Object.__proto__ === Function.prototype;</p>\n<p>同时Object 也是一个方法,任何一个 var a ={},这样的话，a.__proto__ === Object.prototype;</p>\n<p>方法的prototype 是对象吧，那么Function.prototype就有 __proto__, 所以下面一个就说的通了,</p>\n<p>Function.prototype.__proto__ ===Object.prototype;</p>\n<p>那么Object.prototype 是对象,那么它的__proto__是什么呢？ null</p>\n<p>下面这个怎么解释？</p>\n<p>Function.__proto__ === Function.prototype </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var A = function()&#123;&#125;; // A是一个方法，当然也是个对象  </span><br><span class=\"line\">var a = new A(); // a是一个由A创造出的对象，不是方法  </span><br><span class=\"line\"></span><br><span class=\"line\">//看一看对象非方法的行为</span><br><span class=\"line\">console.log(a.__proto__); //object  </span><br><span class=\"line\">console.log(a.prototype); //undefined, 对象没有 </span><br><span class=\"line\"></span><br><span class=\"line\">//看一看方法的行为，方法也是对象哦</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(A.__proto__); //function  </span><br><span class=\"line\">console.log(A.prototype); //object  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a.__proto__ === A.prototype); //true  </span><br><span class=\"line\">console.log(a.prototype === undefined); //true</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(A.__proto__ === Function.prototype); //true  </span><br><span class=\"line\">console.log(A.prototype === a.__proto__); //true  </span><br><span class=\"line\"></span><br><span class=\"line\">//先看a这条链</span><br><span class=\"line\">console.log(a.__proto__.__proto__ === A.prototype.__proto__); //true  </span><br><span class=\"line\">console.log(a.__proto__.__proto__ === Object.prototype);//true  </span><br><span class=\"line\">console.log(a.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  </span><br><span class=\"line\">console.log(a.__proto__.__proto__.__proto__ === null);//true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//再看看A这条条链</span><br><span class=\"line\">console.log(A.__proto__.__proto__ === Function.prototype.__proto__);//true  </span><br><span class=\"line\">console.log(A.__proto__.__proto__ === Object.prototype);//true  </span><br><span class=\"line\">console.log(A.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  </span><br><span class=\"line\">console.log(A.__proto__.__proto__.__proto__ === null);//true</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//xproto-2.png\" alt=\"prototype\"></p>\n<p>参考 <a href=\"http://varnull.cn/cong-\\_\\_proto\\_\\_-prototype-shuo-qi/\" target=\"_blank\" rel=\"noopener\">从 __proto__ prototype 说起</a></p>\n"},{"title":"mongodb常用命令","date":"2019-01-10T19:07:27.000Z","description":"mongo 的常用数据库命令总结","_content":"\n常用的mongo语句，汇总，以便之后查阅。\n<!--more-->\n\n\n## 全局、数据库级别\n\n默认根目录：/db/mongodb-3.4.7/\n### 导入导出\n--导入\n/db/mongodb-3.4.7/bin/mongorestore --host=127.0.0.1 -u test_user -p test_pwd --port 27017 --db jy_db /db/mongo_bak/test_db\n\n--强制删除\n--drop：先删除所有的记录，然后恢复.\n/db/mongodb-3.4.7/bin/mongorestore --host=127.0.0.1 -u test_user -p test_pwd --port 27017 --db test_db --drop /db/mongo_bak/test_db\n\n--导出\n/db/mongodb-3.4.7/bin/mongodump --host 127.0.0.1 --port 9430 -d test_db -u test_user -p 123456 -o /db/mongo_bak/test_db\n\n/db/mongodb-3.4.7/bin/mongodump --host 127.0.0.1 --port 9430 -d test_db  -o /db/mongo_bak/test_db\n\n--打包\ntar -czvf  /db/mongo_bak/jy_db20181207.tar.gz /db/mongo_bak/test_db\n\n--导入\n/db/mongodb-3.4.7/bin/mongodump --host 127.0.0.1 --port 9430 -d test_db -u test_use -p test_pwd -o /db/mongo_bak/\n\n### 启动 登录，创建用户\n\n修改配置文件\n`vi /db/mongodb-3.4.7/mongodb.conf `\n常用配置：\n\n```\n\n后台启动\n`/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf `\n登录：\n`/db/mongodb-3.4.7/bin/mongo  --host 127.0.0.1 --port 9430 -u root -p FpTH2a`\n\nshow dbs;//展示所有数据库\n\nuse test_db;//创建数据库.切换到本数据库\n\n/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf  --shutdown\n\ndb.createUser({user:'name',pwd:'123456',roles: [{ role:\"readWrite\",db:\"name\"}]});\n\ndb.getCollection('system.users').find({})\n\ndb.getCollection('system.users').remove({user:\"name\"});\n\n```\n\n查询用户：\n\n### 数据库\n\nuse test_db;//\n\ndb.repairDatabase();//释放空间\n\ndb.runCommand({\"distinct\":\"fs.files\", \"key\":\"metadata.type\"});//所有的集合\n\n## 集合级别 collection\n\n- 所有  show collections;\n- 创建  db.createCollection(\"test\");\n- 添加  db.getCollection(\"test\").insert({\"name\":\"test\"});\n- 清空  db.getCollection(\"test\").remove({});\n- 删除  db.getCollection(\"test\").drop();\n- 查询  db.getCollection(\"test\").find({\"name\":\"test\"});\n","source":"_posts/mongodb常用命令.md","raw":"---\ntitle: mongodb常用命令\ndate: 2019-01-11 03:07:27\ntags: [mongo,常用命令]\ncategories: 数据库\ndescription: \"mongo 的常用数据库命令总结\"\n---\n\n常用的mongo语句，汇总，以便之后查阅。\n<!--more-->\n\n\n## 全局、数据库级别\n\n默认根目录：/db/mongodb-3.4.7/\n### 导入导出\n--导入\n/db/mongodb-3.4.7/bin/mongorestore --host=127.0.0.1 -u test_user -p test_pwd --port 27017 --db jy_db /db/mongo_bak/test_db\n\n--强制删除\n--drop：先删除所有的记录，然后恢复.\n/db/mongodb-3.4.7/bin/mongorestore --host=127.0.0.1 -u test_user -p test_pwd --port 27017 --db test_db --drop /db/mongo_bak/test_db\n\n--导出\n/db/mongodb-3.4.7/bin/mongodump --host 127.0.0.1 --port 9430 -d test_db -u test_user -p 123456 -o /db/mongo_bak/test_db\n\n/db/mongodb-3.4.7/bin/mongodump --host 127.0.0.1 --port 9430 -d test_db  -o /db/mongo_bak/test_db\n\n--打包\ntar -czvf  /db/mongo_bak/jy_db20181207.tar.gz /db/mongo_bak/test_db\n\n--导入\n/db/mongodb-3.4.7/bin/mongodump --host 127.0.0.1 --port 9430 -d test_db -u test_use -p test_pwd -o /db/mongo_bak/\n\n### 启动 登录，创建用户\n\n修改配置文件\n`vi /db/mongodb-3.4.7/mongodb.conf `\n常用配置：\n\n```\n\n后台启动\n`/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf `\n登录：\n`/db/mongodb-3.4.7/bin/mongo  --host 127.0.0.1 --port 9430 -u root -p FpTH2a`\n\nshow dbs;//展示所有数据库\n\nuse test_db;//创建数据库.切换到本数据库\n\n/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf  --shutdown\n\ndb.createUser({user:'name',pwd:'123456',roles: [{ role:\"readWrite\",db:\"name\"}]});\n\ndb.getCollection('system.users').find({})\n\ndb.getCollection('system.users').remove({user:\"name\"});\n\n```\n\n查询用户：\n\n### 数据库\n\nuse test_db;//\n\ndb.repairDatabase();//释放空间\n\ndb.runCommand({\"distinct\":\"fs.files\", \"key\":\"metadata.type\"});//所有的集合\n\n## 集合级别 collection\n\n- 所有  show collections;\n- 创建  db.createCollection(\"test\");\n- 添加  db.getCollection(\"test\").insert({\"name\":\"test\"});\n- 清空  db.getCollection(\"test\").remove({});\n- 删除  db.getCollection(\"test\").drop();\n- 查询  db.getCollection(\"test\").find({\"name\":\"test\"});\n","slug":"mongodb常用命令","published":1,"updated":"2019-04-19T06:30:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77r001ougv5yegnudhr","content":"<p>常用的mongo语句，汇总，以便之后查阅。<br><a id=\"more\"></a></p>\n<h2 id=\"全局、数据库级别\"><a href=\"#全局、数据库级别\" class=\"headerlink\" title=\"全局、数据库级别\"></a>全局、数据库级别</h2><p>默认根目录：/db/mongodb-3.4.7/</p>\n<h3 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h3><p>–导入<br>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 -u test_user -p test_pwd –port 27017 –db jy_db /db/mongo_bak/test_db</p>\n<p>–强制删除<br>–drop：先删除所有的记录，然后恢复.<br>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 -u test_user -p test_pwd –port 27017 –db test_db –drop /db/mongo_bak/test_db</p>\n<p>–导出<br>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db -u test_user -p 123456 -o /db/mongo_bak/test_db</p>\n<p>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db  -o /db/mongo_bak/test_db</p>\n<p>–打包<br>tar -czvf  /db/mongo_bak/jy_db20181207.tar.gz /db/mongo_bak/test_db</p>\n<p>–导入<br>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db -u test_use -p test_pwd -o /db/mongo_bak/</p>\n<h3 id=\"启动-登录，创建用户\"><a href=\"#启动-登录，创建用户\" class=\"headerlink\" title=\"启动 登录，创建用户\"></a>启动 登录，创建用户</h3><p>修改配置文件<br><code>vi /db/mongodb-3.4.7/mongodb.conf</code><br>常用配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">后台启动</span><br><span class=\"line\">`/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf `</span><br><span class=\"line\">登录：</span><br><span class=\"line\">`/db/mongodb-3.4.7/bin/mongo  --host 127.0.0.1 --port 9430 -u root -p FpTH2a`</span><br><span class=\"line\"></span><br><span class=\"line\">show dbs;//展示所有数据库</span><br><span class=\"line\"></span><br><span class=\"line\">use test_db;//创建数据库.切换到本数据库</span><br><span class=\"line\"></span><br><span class=\"line\">/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf  --shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(&#123;user:&apos;name&apos;,pwd:&apos;123456&apos;,roles: [&#123; role:&quot;readWrite&quot;,db:&quot;name&quot;&#125;]&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.getCollection(&apos;system.users&apos;).find(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">db.getCollection(&apos;system.users&apos;).remove(&#123;user:&quot;name&quot;&#125;);</span><br></pre></td></tr></table></figure>\n<p>查询用户：</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>use test_db;//</p>\n<p>db.repairDatabase();//释放空间</p>\n<p>db.runCommand({“distinct”:”fs.files”, “key”:”metadata.type”});//所有的集合</p>\n<h2 id=\"集合级别-collection\"><a href=\"#集合级别-collection\" class=\"headerlink\" title=\"集合级别 collection\"></a>集合级别 collection</h2><ul>\n<li>所有  show collections;</li>\n<li>创建  db.createCollection(“test”);</li>\n<li>添加  db.getCollection(“test”).insert({“name”:”test”});</li>\n<li>清空  db.getCollection(“test”).remove({});</li>\n<li>删除  db.getCollection(“test”).drop();</li>\n<li>查询  db.getCollection(“test”).find({“name”:”test”});</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>常用的mongo语句，汇总，以便之后查阅。<br></p>","more":"<p></p>\n<h2 id=\"全局、数据库级别\"><a href=\"#全局、数据库级别\" class=\"headerlink\" title=\"全局、数据库级别\"></a>全局、数据库级别</h2><p>默认根目录：/db/mongodb-3.4.7/</p>\n<h3 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h3><p>–导入<br>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 -u test_user -p test_pwd –port 27017 –db jy_db /db/mongo_bak/test_db</p>\n<p>–强制删除<br>–drop：先删除所有的记录，然后恢复.<br>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 -u test_user -p test_pwd –port 27017 –db test_db –drop /db/mongo_bak/test_db</p>\n<p>–导出<br>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db -u test_user -p 123456 -o /db/mongo_bak/test_db</p>\n<p>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db  -o /db/mongo_bak/test_db</p>\n<p>–打包<br>tar -czvf  /db/mongo_bak/jy_db20181207.tar.gz /db/mongo_bak/test_db</p>\n<p>–导入<br>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db -u test_use -p test_pwd -o /db/mongo_bak/</p>\n<h3 id=\"启动-登录，创建用户\"><a href=\"#启动-登录，创建用户\" class=\"headerlink\" title=\"启动 登录，创建用户\"></a>启动 登录，创建用户</h3><p>修改配置文件<br><code>vi /db/mongodb-3.4.7/mongodb.conf</code><br>常用配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">后台启动</span><br><span class=\"line\">`/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf `</span><br><span class=\"line\">登录：</span><br><span class=\"line\">`/db/mongodb-3.4.7/bin/mongo  --host 127.0.0.1 --port 9430 -u root -p FpTH2a`</span><br><span class=\"line\"></span><br><span class=\"line\">show dbs;//展示所有数据库</span><br><span class=\"line\"></span><br><span class=\"line\">use test_db;//创建数据库.切换到本数据库</span><br><span class=\"line\"></span><br><span class=\"line\">/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf  --shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(&#123;user:&apos;name&apos;,pwd:&apos;123456&apos;,roles: [&#123; role:&quot;readWrite&quot;,db:&quot;name&quot;&#125;]&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.getCollection(&apos;system.users&apos;).find(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">db.getCollection(&apos;system.users&apos;).remove(&#123;user:&quot;name&quot;&#125;);</span><br></pre></td></tr></table></figure>\n<p>查询用户：</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>use test_db;//</p>\n<p>db.repairDatabase();//释放空间</p>\n<p>db.runCommand({“distinct”:”fs.files”, “key”:”metadata.type”});//所有的集合</p>\n<h2 id=\"集合级别-collection\"><a href=\"#集合级别-collection\" class=\"headerlink\" title=\"集合级别 collection\"></a>集合级别 collection</h2><ul>\n<li>所有  show collections;</li>\n<li>创建  db.createCollection(“test”);</li>\n<li>添加  db.getCollection(“test”).insert({“name”:”test”});</li>\n<li>清空  db.getCollection(“test”).remove({});</li>\n<li>删除  db.getCollection(“test”).drop();</li>\n<li>查询  db.getCollection(“test”).find({“name”:”test”});</li>\n</ul>"},{"title":"mongodb主从架构设计","date":"2019-01-10T18:49:11.000Z","description":"设计mongo的主从架构","_content":"\n基本的MongoDB主从搭建语句，汇总，以便之后查阅。\n<!--more-->\n\n带参数启动MongoDB：` ./mongod -f mongo-master.conf `\n\n\n基本单机配置文件\n\n```\n# mongo.conf\n\n# fork and run in background\nfork=true\n\n# 端口\nport=9430\n\n# 认证模式\nauth=true\n\n# what storage engine to use - defaults to wiredTiger if no data files present directory for datafiles - defaults to /data/db\nstorageEngine=wiredTiger\n\n# maximum amount of memory to allocate for cache; defaults to 1/2 of physical RAM\nwiredTigerCacheSizeGB=1\n\n# 数据库文件保存位置\ndbpath=/db/mongodb-3.4.7/data/db\n\n# where to log\nlogpath=/db/logs/mongodb.log\n\n#以追加方式写入日志\nlogappend=true\n\n# each database will be stored in a separate directory\ndirectoryperdb=true\n\n# use a smaller default file size\nsmallfiles=true\n\n# enable http interface， port=28017\nhttpinterface=false\n\n# turn on simple rest api 开启rest api\nrest=false\n\n# comma separated list of ip addresses to  listen on - all local ips by default\n# bind_ip=192.168.1.120,192.168.1.123\n\n```\n\n简单的主从配置文件\n\nmaster.conf\n```\n# 设置数据文件的存放目录\ndbpath=/db/mongo/master/data\n# 设置日志文件的存放目录及其日志文件名\nlogpath=/db/mongo/master/logs/mongo.log\n# 设置端口号（默认的端口号是 27017）\nmaster=true\n#slave=true\n# 设置为以守护进程的方式运行，即在后台运行\nfork=true\n#监听网卡\nbind_ip= 0.0.0.0\n#服务端口\nport=27019\noplogSize=2048\n#source=127.0.0.1:27018\n#autoresync=true\n\n```\n\nslave.conf\n\n```\n# 设置数据文件的存放目录\ndbpath=/db/mongo/slave/data\n# 设置日志文件的存放目录及其日志文件名\nlogpath=/db/mongo/slave/logs/mongo.log\n# 设置端口号（默认的端口号是 27017）\n#master=true\nslave=true\n# 设置为以守护进程的方式运行，即在后台运行\nfork=true\n#监听网卡\nbind_ip= 0.0.0.0\n#服务端口\nport=27019\noplogSize=2048\nsource=127.0.0.1:27018\nautoresync=true\n\n```\n\n一些其他的参数：\n```\n--quiet # 安静输出\n--port arg  # 指定服务端口号，默认端口27017\n--bind_ip arg   # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP\n--logpath arg   # 指定MongoDB日志文件，注意是指定文件不是目录\n--logappend # 使用追加的方式写日志\n--pidfilepath arg   # PID File 的完整路径，如果没有设置，则没有PID文件\n--keyFile arg   # 集群的私钥的完整路径，只对于Replica Set 架构有效\n--unixSocketPrefix arg  # UNIX域套接字替代目录,(默认为 /tmp)\n--fork  # 以守护进程的方式运行MongoDB，创建服务器进程\n--auth  # 启用验证\n--cpu   # 定期显示CPU的CPU利用率和iowait\n--dbpath arg    # 指定数据库路径\n--diaglog arg   # diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads\n--directoryperdb    # 设置每个数据库将被保存在一个单独的目录\n--journal   # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里\n--journalOptions arg    # 启用日志诊断选项\n--ipv6  # 启用IPv6选项\n--jsonp # 允许JSONP形式通过HTTP访问（有安全影响）\n--maxConns arg  # 最大同时连接数 默认2000\n--noauth    # 不启用验证\n--nohttpinterface   # 关闭http接口，默认关闭27018端口访问\n--noprealloc    # 禁用数据文件预分配(往往影响性能)\n--noscripting   # 禁用脚本引擎\n--notablescan   # 不允许表扫描\n--nounixsocket  # 禁用Unix套接字监听\n--nssize arg (=16)  # 设置信数据库.ns文件大小(MB)\n--objcheck  # 在收到客户数据,检查的有效性，\n--profile arg   # 档案参数 0=off 1=slow, 2=all\n--quota # 限制每个数据库的文件数，设置默认为8\n--quotaFiles arg    # number of files allower per db, requires --quota\n--rest  # 开启简单的rest API\n--repair    # 修复所有数据库run repair on all dbs\n--repairpath arg    # 修复库生成的文件的目录,默认为目录名称dbpath\n--slowms arg (=100) # value of slow for profile and console log\n--smallfiles    # 使用较小的默认文件\n--syncdelay arg (=60)   # 数据写入磁盘的时间秒数(0=never,不推荐)\n--sysinfo   # 打印一些诊断系统信息\n--upgrade   # 如果需要升级数据库\n * Replicaton 参数\n \n--------------------------------------------------------------------------------\n \n \n--fastsync  # 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步\n--autoresync    # 如果从库与主库同步数据差得多，自动重新同步;当发现从服务器的数据不是最新时，开始从主服务器请求同步数据\n--oplogSize arg # 主节点的oplog日志大小，单位为M，建议设大点(更改oplog大小时，只需停主库，删除local.*，然后加--oplogSize=* 重新启动即可,*代表大小)\n * 主/从参数\n \n--------------------------------------------------------------------------------\n \n \n--master    # 主库模式\n--slave # 从库模式\n--source arg    # 从库 端口号\n--only arg  # 指定单一的数据库复制\n--slavedelay arg    # 设置从库同步主库的延迟时间\n * Replica set(副本集)选项：\n \n--------------------------------------------------------------------------------\n \n \n--replSet arg   # 设置副本集名称\n * Sharding(分片)选项\n \n--------------------------------------------------------------------------------\n\n--configsvr # 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb\n--shardsvr  # 声明这是一个集群的分片,默认端口27018\n--noMoveParanoia    # 关闭偏执为moveChunk数据保存\n```\n\n参考：[mongo主从配置](https://www.cnblogs.com/amoyzhu/p/7943018.html)\n\n### 主机中存储\n\n\ndb.createCollection(\"test\");\ndb.getCollection('test'). insert({\"name\":\"master\"})\n\n\n\n### 验证 在slave中查看是否有此数据\n./mongo host:port/db -u user -p pwd\n#mongo 127.0.0.1:9430/admin -u root -p FpTH2a\ndb.getCollection('test').find({});\n默认的SECONDARY是不允许读写的，使用命令解决\nrs.slaveOk();\n\n\n加Auth=true的验证\n\n### 疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？\n\n参考：\n- [mongodb 主从 部署 切换](https://blog.csdn.net/weixin_41988331/article/details/83116873)\n- [mongodb主从配置及备份](https://blog.csdn.net/lelemom/article/details/82704980)","source":"_posts/mongodb主从架构设计.md","raw":"---\ntitle: mongodb主从架构设计\ndate: 2019-01-11 02:49:11\ntags: [mongo,设计]\ncategories: [数据库]\ndescription: \"设计mongo的主从架构\"\n---\n\n基本的MongoDB主从搭建语句，汇总，以便之后查阅。\n<!--more-->\n\n带参数启动MongoDB：` ./mongod -f mongo-master.conf `\n\n\n基本单机配置文件\n\n```\n# mongo.conf\n\n# fork and run in background\nfork=true\n\n# 端口\nport=9430\n\n# 认证模式\nauth=true\n\n# what storage engine to use - defaults to wiredTiger if no data files present directory for datafiles - defaults to /data/db\nstorageEngine=wiredTiger\n\n# maximum amount of memory to allocate for cache; defaults to 1/2 of physical RAM\nwiredTigerCacheSizeGB=1\n\n# 数据库文件保存位置\ndbpath=/db/mongodb-3.4.7/data/db\n\n# where to log\nlogpath=/db/logs/mongodb.log\n\n#以追加方式写入日志\nlogappend=true\n\n# each database will be stored in a separate directory\ndirectoryperdb=true\n\n# use a smaller default file size\nsmallfiles=true\n\n# enable http interface， port=28017\nhttpinterface=false\n\n# turn on simple rest api 开启rest api\nrest=false\n\n# comma separated list of ip addresses to  listen on - all local ips by default\n# bind_ip=192.168.1.120,192.168.1.123\n\n```\n\n简单的主从配置文件\n\nmaster.conf\n```\n# 设置数据文件的存放目录\ndbpath=/db/mongo/master/data\n# 设置日志文件的存放目录及其日志文件名\nlogpath=/db/mongo/master/logs/mongo.log\n# 设置端口号（默认的端口号是 27017）\nmaster=true\n#slave=true\n# 设置为以守护进程的方式运行，即在后台运行\nfork=true\n#监听网卡\nbind_ip= 0.0.0.0\n#服务端口\nport=27019\noplogSize=2048\n#source=127.0.0.1:27018\n#autoresync=true\n\n```\n\nslave.conf\n\n```\n# 设置数据文件的存放目录\ndbpath=/db/mongo/slave/data\n# 设置日志文件的存放目录及其日志文件名\nlogpath=/db/mongo/slave/logs/mongo.log\n# 设置端口号（默认的端口号是 27017）\n#master=true\nslave=true\n# 设置为以守护进程的方式运行，即在后台运行\nfork=true\n#监听网卡\nbind_ip= 0.0.0.0\n#服务端口\nport=27019\noplogSize=2048\nsource=127.0.0.1:27018\nautoresync=true\n\n```\n\n一些其他的参数：\n```\n--quiet # 安静输出\n--port arg  # 指定服务端口号，默认端口27017\n--bind_ip arg   # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP\n--logpath arg   # 指定MongoDB日志文件，注意是指定文件不是目录\n--logappend # 使用追加的方式写日志\n--pidfilepath arg   # PID File 的完整路径，如果没有设置，则没有PID文件\n--keyFile arg   # 集群的私钥的完整路径，只对于Replica Set 架构有效\n--unixSocketPrefix arg  # UNIX域套接字替代目录,(默认为 /tmp)\n--fork  # 以守护进程的方式运行MongoDB，创建服务器进程\n--auth  # 启用验证\n--cpu   # 定期显示CPU的CPU利用率和iowait\n--dbpath arg    # 指定数据库路径\n--diaglog arg   # diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads\n--directoryperdb    # 设置每个数据库将被保存在一个单独的目录\n--journal   # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里\n--journalOptions arg    # 启用日志诊断选项\n--ipv6  # 启用IPv6选项\n--jsonp # 允许JSONP形式通过HTTP访问（有安全影响）\n--maxConns arg  # 最大同时连接数 默认2000\n--noauth    # 不启用验证\n--nohttpinterface   # 关闭http接口，默认关闭27018端口访问\n--noprealloc    # 禁用数据文件预分配(往往影响性能)\n--noscripting   # 禁用脚本引擎\n--notablescan   # 不允许表扫描\n--nounixsocket  # 禁用Unix套接字监听\n--nssize arg (=16)  # 设置信数据库.ns文件大小(MB)\n--objcheck  # 在收到客户数据,检查的有效性，\n--profile arg   # 档案参数 0=off 1=slow, 2=all\n--quota # 限制每个数据库的文件数，设置默认为8\n--quotaFiles arg    # number of files allower per db, requires --quota\n--rest  # 开启简单的rest API\n--repair    # 修复所有数据库run repair on all dbs\n--repairpath arg    # 修复库生成的文件的目录,默认为目录名称dbpath\n--slowms arg (=100) # value of slow for profile and console log\n--smallfiles    # 使用较小的默认文件\n--syncdelay arg (=60)   # 数据写入磁盘的时间秒数(0=never,不推荐)\n--sysinfo   # 打印一些诊断系统信息\n--upgrade   # 如果需要升级数据库\n * Replicaton 参数\n \n--------------------------------------------------------------------------------\n \n \n--fastsync  # 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步\n--autoresync    # 如果从库与主库同步数据差得多，自动重新同步;当发现从服务器的数据不是最新时，开始从主服务器请求同步数据\n--oplogSize arg # 主节点的oplog日志大小，单位为M，建议设大点(更改oplog大小时，只需停主库，删除local.*，然后加--oplogSize=* 重新启动即可,*代表大小)\n * 主/从参数\n \n--------------------------------------------------------------------------------\n \n \n--master    # 主库模式\n--slave # 从库模式\n--source arg    # 从库 端口号\n--only arg  # 指定单一的数据库复制\n--slavedelay arg    # 设置从库同步主库的延迟时间\n * Replica set(副本集)选项：\n \n--------------------------------------------------------------------------------\n \n \n--replSet arg   # 设置副本集名称\n * Sharding(分片)选项\n \n--------------------------------------------------------------------------------\n\n--configsvr # 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb\n--shardsvr  # 声明这是一个集群的分片,默认端口27018\n--noMoveParanoia    # 关闭偏执为moveChunk数据保存\n```\n\n参考：[mongo主从配置](https://www.cnblogs.com/amoyzhu/p/7943018.html)\n\n### 主机中存储\n\n\ndb.createCollection(\"test\");\ndb.getCollection('test'). insert({\"name\":\"master\"})\n\n\n\n### 验证 在slave中查看是否有此数据\n./mongo host:port/db -u user -p pwd\n#mongo 127.0.0.1:9430/admin -u root -p FpTH2a\ndb.getCollection('test').find({});\n默认的SECONDARY是不允许读写的，使用命令解决\nrs.slaveOk();\n\n\n加Auth=true的验证\n\n### 疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？\n\n参考：\n- [mongodb 主从 部署 切换](https://blog.csdn.net/weixin_41988331/article/details/83116873)\n- [mongodb主从配置及备份](https://blog.csdn.net/lelemom/article/details/82704980)","slug":"mongodb主从架构设计","published":1,"updated":"2019-01-22T08:09:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77s001sugv52zzm82ub","content":"<p>基本的MongoDB主从搭建语句，汇总，以便之后查阅。<br><a id=\"more\"></a></p>\n<p>带参数启动MongoDB：<code>./mongod -f mongo-master.conf</code></p>\n<p>基本单机配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mongo.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># fork and run in background</span><br><span class=\"line\">fork=true</span><br><span class=\"line\"></span><br><span class=\"line\"># 端口</span><br><span class=\"line\">port=9430</span><br><span class=\"line\"></span><br><span class=\"line\"># 认证模式</span><br><span class=\"line\">auth=true</span><br><span class=\"line\"></span><br><span class=\"line\"># what storage engine to use - defaults to wiredTiger if no data files present directory for datafiles - defaults to /data/db</span><br><span class=\"line\">storageEngine=wiredTiger</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum amount of memory to allocate for cache; defaults to 1/2 of physical RAM</span><br><span class=\"line\">wiredTigerCacheSizeGB=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 数据库文件保存位置</span><br><span class=\"line\">dbpath=/db/mongodb-3.4.7/data/db</span><br><span class=\"line\"></span><br><span class=\"line\"># where to log</span><br><span class=\"line\">logpath=/db/logs/mongodb.log</span><br><span class=\"line\"></span><br><span class=\"line\">#以追加方式写入日志</span><br><span class=\"line\">logappend=true</span><br><span class=\"line\"></span><br><span class=\"line\"># each database will be stored in a separate directory</span><br><span class=\"line\">directoryperdb=true</span><br><span class=\"line\"></span><br><span class=\"line\"># use a smaller default file size</span><br><span class=\"line\">smallfiles=true</span><br><span class=\"line\"></span><br><span class=\"line\"># enable http interface， port=28017</span><br><span class=\"line\">httpinterface=false</span><br><span class=\"line\"></span><br><span class=\"line\"># turn on simple rest api 开启rest api</span><br><span class=\"line\">rest=false</span><br><span class=\"line\"></span><br><span class=\"line\"># comma separated list of ip addresses to  listen on - all local ips by default</span><br><span class=\"line\"># bind_ip=192.168.1.120,192.168.1.123</span><br></pre></td></tr></table></figure>\n<p>简单的主从配置文件</p>\n<p>master.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置数据文件的存放目录</span><br><span class=\"line\">dbpath=/db/mongo/master/data</span><br><span class=\"line\"># 设置日志文件的存放目录及其日志文件名</span><br><span class=\"line\">logpath=/db/mongo/master/logs/mongo.log</span><br><span class=\"line\"># 设置端口号（默认的端口号是 27017）</span><br><span class=\"line\">master=true</span><br><span class=\"line\">#slave=true</span><br><span class=\"line\"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class=\"line\">fork=true</span><br><span class=\"line\">#监听网卡</span><br><span class=\"line\">bind_ip= 0.0.0.0</span><br><span class=\"line\">#服务端口</span><br><span class=\"line\">port=27019</span><br><span class=\"line\">oplogSize=2048</span><br><span class=\"line\">#source=127.0.0.1:27018</span><br><span class=\"line\">#autoresync=true</span><br></pre></td></tr></table></figure></p>\n<p>slave.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置数据文件的存放目录</span><br><span class=\"line\">dbpath=/db/mongo/slave/data</span><br><span class=\"line\"># 设置日志文件的存放目录及其日志文件名</span><br><span class=\"line\">logpath=/db/mongo/slave/logs/mongo.log</span><br><span class=\"line\"># 设置端口号（默认的端口号是 27017）</span><br><span class=\"line\">#master=true</span><br><span class=\"line\">slave=true</span><br><span class=\"line\"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class=\"line\">fork=true</span><br><span class=\"line\">#监听网卡</span><br><span class=\"line\">bind_ip= 0.0.0.0</span><br><span class=\"line\">#服务端口</span><br><span class=\"line\">port=27019</span><br><span class=\"line\">oplogSize=2048</span><br><span class=\"line\">source=127.0.0.1:27018</span><br><span class=\"line\">autoresync=true</span><br></pre></td></tr></table></figure>\n<p>一些其他的参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--quiet # 安静输出</span><br><span class=\"line\">--port arg  # 指定服务端口号，默认端口27017</span><br><span class=\"line\">--bind_ip arg   # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</span><br><span class=\"line\">--logpath arg   # 指定MongoDB日志文件，注意是指定文件不是目录</span><br><span class=\"line\">--logappend # 使用追加的方式写日志</span><br><span class=\"line\">--pidfilepath arg   # PID File 的完整路径，如果没有设置，则没有PID文件</span><br><span class=\"line\">--keyFile arg   # 集群的私钥的完整路径，只对于Replica Set 架构有效</span><br><span class=\"line\">--unixSocketPrefix arg  # UNIX域套接字替代目录,(默认为 /tmp)</span><br><span class=\"line\">--fork  # 以守护进程的方式运行MongoDB，创建服务器进程</span><br><span class=\"line\">--auth  # 启用验证</span><br><span class=\"line\">--cpu   # 定期显示CPU的CPU利用率和iowait</span><br><span class=\"line\">--dbpath arg    # 指定数据库路径</span><br><span class=\"line\">--diaglog arg   # diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads</span><br><span class=\"line\">--directoryperdb    # 设置每个数据库将被保存在一个单独的目录</span><br><span class=\"line\">--journal   # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里</span><br><span class=\"line\">--journalOptions arg    # 启用日志诊断选项</span><br><span class=\"line\">--ipv6  # 启用IPv6选项</span><br><span class=\"line\">--jsonp # 允许JSONP形式通过HTTP访问（有安全影响）</span><br><span class=\"line\">--maxConns arg  # 最大同时连接数 默认2000</span><br><span class=\"line\">--noauth    # 不启用验证</span><br><span class=\"line\">--nohttpinterface   # 关闭http接口，默认关闭27018端口访问</span><br><span class=\"line\">--noprealloc    # 禁用数据文件预分配(往往影响性能)</span><br><span class=\"line\">--noscripting   # 禁用脚本引擎</span><br><span class=\"line\">--notablescan   # 不允许表扫描</span><br><span class=\"line\">--nounixsocket  # 禁用Unix套接字监听</span><br><span class=\"line\">--nssize arg (=16)  # 设置信数据库.ns文件大小(MB)</span><br><span class=\"line\">--objcheck  # 在收到客户数据,检查的有效性，</span><br><span class=\"line\">--profile arg   # 档案参数 0=off 1=slow, 2=all</span><br><span class=\"line\">--quota # 限制每个数据库的文件数，设置默认为8</span><br><span class=\"line\">--quotaFiles arg    # number of files allower per db, requires --quota</span><br><span class=\"line\">--rest  # 开启简单的rest API</span><br><span class=\"line\">--repair    # 修复所有数据库run repair on all dbs</span><br><span class=\"line\">--repairpath arg    # 修复库生成的文件的目录,默认为目录名称dbpath</span><br><span class=\"line\">--slowms arg (=100) # value of slow for profile and console log</span><br><span class=\"line\">--smallfiles    # 使用较小的默认文件</span><br><span class=\"line\">--syncdelay arg (=60)   # 数据写入磁盘的时间秒数(0=never,不推荐)</span><br><span class=\"line\">--sysinfo   # 打印一些诊断系统信息</span><br><span class=\"line\">--upgrade   # 如果需要升级数据库</span><br><span class=\"line\"> * Replicaton 参数</span><br><span class=\"line\"> </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">--fastsync  # 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步</span><br><span class=\"line\">--autoresync    # 如果从库与主库同步数据差得多，自动重新同步;当发现从服务器的数据不是最新时，开始从主服务器请求同步数据</span><br><span class=\"line\">--oplogSize arg # 主节点的oplog日志大小，单位为M，建议设大点(更改oplog大小时，只需停主库，删除local.*，然后加--oplogSize=* 重新启动即可,*代表大小)</span><br><span class=\"line\"> * 主/从参数</span><br><span class=\"line\"> </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">--master    # 主库模式</span><br><span class=\"line\">--slave # 从库模式</span><br><span class=\"line\">--source arg    # 从库 端口号</span><br><span class=\"line\">--only arg  # 指定单一的数据库复制</span><br><span class=\"line\">--slavedelay arg    # 设置从库同步主库的延迟时间</span><br><span class=\"line\"> * Replica set(副本集)选项：</span><br><span class=\"line\"> </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">--replSet arg   # 设置副本集名称</span><br><span class=\"line\"> * Sharding(分片)选项</span><br><span class=\"line\"> </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">--configsvr # 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb</span><br><span class=\"line\">--shardsvr  # 声明这是一个集群的分片,默认端口27018</span><br><span class=\"line\">--noMoveParanoia    # 关闭偏执为moveChunk数据保存</span><br></pre></td></tr></table></figure></p>\n<p>参考：<a href=\"https://www.cnblogs.com/amoyzhu/p/7943018.html\" target=\"_blank\" rel=\"noopener\">mongo主从配置</a></p>\n<h3 id=\"主机中存储\"><a href=\"#主机中存储\" class=\"headerlink\" title=\"主机中存储\"></a>主机中存储</h3><p>db.createCollection(“test”);<br>db.getCollection(‘test’). insert({“name”:”master”})</p>\n<h3 id=\"验证-在slave中查看是否有此数据\"><a href=\"#验证-在slave中查看是否有此数据\" class=\"headerlink\" title=\"验证 在slave中查看是否有此数据\"></a>验证 在slave中查看是否有此数据</h3><p>./mongo host:port/db -u user -p pwd</p>\n<p>#mongo 127.0.0.1:9430/admin -u root -p FpTH2a<br>db.getCollection(‘test’).find({});<br>默认的SECONDARY是不允许读写的，使用命令解决<br>rs.slaveOk();</p>\n<p>加Auth=true的验证</p>\n<h3 id=\"疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？\"><a href=\"#疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？\" class=\"headerlink\" title=\"疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？\"></a>疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？</h3><p>参考：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_41988331/article/details/83116873\" target=\"_blank\" rel=\"noopener\">mongodb 主从 部署 切换</a></li>\n<li><a href=\"https://blog.csdn.net/lelemom/article/details/82704980\" target=\"_blank\" rel=\"noopener\">mongodb主从配置及备份</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>基本的MongoDB主从搭建语句，汇总，以便之后查阅。<br></p>","more":"<p></p>\n<p>带参数启动MongoDB：<code>./mongod -f mongo-master.conf</code></p>\n<p>基本单机配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mongo.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># fork and run in background</span><br><span class=\"line\">fork=true</span><br><span class=\"line\"></span><br><span class=\"line\"># 端口</span><br><span class=\"line\">port=9430</span><br><span class=\"line\"></span><br><span class=\"line\"># 认证模式</span><br><span class=\"line\">auth=true</span><br><span class=\"line\"></span><br><span class=\"line\"># what storage engine to use - defaults to wiredTiger if no data files present directory for datafiles - defaults to /data/db</span><br><span class=\"line\">storageEngine=wiredTiger</span><br><span class=\"line\"></span><br><span class=\"line\"># maximum amount of memory to allocate for cache; defaults to 1/2 of physical RAM</span><br><span class=\"line\">wiredTigerCacheSizeGB=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 数据库文件保存位置</span><br><span class=\"line\">dbpath=/db/mongodb-3.4.7/data/db</span><br><span class=\"line\"></span><br><span class=\"line\"># where to log</span><br><span class=\"line\">logpath=/db/logs/mongodb.log</span><br><span class=\"line\"></span><br><span class=\"line\">#以追加方式写入日志</span><br><span class=\"line\">logappend=true</span><br><span class=\"line\"></span><br><span class=\"line\"># each database will be stored in a separate directory</span><br><span class=\"line\">directoryperdb=true</span><br><span class=\"line\"></span><br><span class=\"line\"># use a smaller default file size</span><br><span class=\"line\">smallfiles=true</span><br><span class=\"line\"></span><br><span class=\"line\"># enable http interface， port=28017</span><br><span class=\"line\">httpinterface=false</span><br><span class=\"line\"></span><br><span class=\"line\"># turn on simple rest api 开启rest api</span><br><span class=\"line\">rest=false</span><br><span class=\"line\"></span><br><span class=\"line\"># comma separated list of ip addresses to  listen on - all local ips by default</span><br><span class=\"line\"># bind_ip=192.168.1.120,192.168.1.123</span><br></pre></td></tr></table></figure>\n<p>简单的主从配置文件</p>\n<p>master.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置数据文件的存放目录</span><br><span class=\"line\">dbpath=/db/mongo/master/data</span><br><span class=\"line\"># 设置日志文件的存放目录及其日志文件名</span><br><span class=\"line\">logpath=/db/mongo/master/logs/mongo.log</span><br><span class=\"line\"># 设置端口号（默认的端口号是 27017）</span><br><span class=\"line\">master=true</span><br><span class=\"line\">#slave=true</span><br><span class=\"line\"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class=\"line\">fork=true</span><br><span class=\"line\">#监听网卡</span><br><span class=\"line\">bind_ip= 0.0.0.0</span><br><span class=\"line\">#服务端口</span><br><span class=\"line\">port=27019</span><br><span class=\"line\">oplogSize=2048</span><br><span class=\"line\">#source=127.0.0.1:27018</span><br><span class=\"line\">#autoresync=true</span><br></pre></td></tr></table></figure></p>\n<p>slave.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置数据文件的存放目录</span><br><span class=\"line\">dbpath=/db/mongo/slave/data</span><br><span class=\"line\"># 设置日志文件的存放目录及其日志文件名</span><br><span class=\"line\">logpath=/db/mongo/slave/logs/mongo.log</span><br><span class=\"line\"># 设置端口号（默认的端口号是 27017）</span><br><span class=\"line\">#master=true</span><br><span class=\"line\">slave=true</span><br><span class=\"line\"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class=\"line\">fork=true</span><br><span class=\"line\">#监听网卡</span><br><span class=\"line\">bind_ip= 0.0.0.0</span><br><span class=\"line\">#服务端口</span><br><span class=\"line\">port=27019</span><br><span class=\"line\">oplogSize=2048</span><br><span class=\"line\">source=127.0.0.1:27018</span><br><span class=\"line\">autoresync=true</span><br></pre></td></tr></table></figure>\n<p>一些其他的参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--quiet # 安静输出</span><br><span class=\"line\">--port arg  # 指定服务端口号，默认端口27017</span><br><span class=\"line\">--bind_ip arg   # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</span><br><span class=\"line\">--logpath arg   # 指定MongoDB日志文件，注意是指定文件不是目录</span><br><span class=\"line\">--logappend # 使用追加的方式写日志</span><br><span class=\"line\">--pidfilepath arg   # PID File 的完整路径，如果没有设置，则没有PID文件</span><br><span class=\"line\">--keyFile arg   # 集群的私钥的完整路径，只对于Replica Set 架构有效</span><br><span class=\"line\">--unixSocketPrefix arg  # UNIX域套接字替代目录,(默认为 /tmp)</span><br><span class=\"line\">--fork  # 以守护进程的方式运行MongoDB，创建服务器进程</span><br><span class=\"line\">--auth  # 启用验证</span><br><span class=\"line\">--cpu   # 定期显示CPU的CPU利用率和iowait</span><br><span class=\"line\">--dbpath arg    # 指定数据库路径</span><br><span class=\"line\">--diaglog arg   # diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads</span><br><span class=\"line\">--directoryperdb    # 设置每个数据库将被保存在一个单独的目录</span><br><span class=\"line\">--journal   # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里</span><br><span class=\"line\">--journalOptions arg    # 启用日志诊断选项</span><br><span class=\"line\">--ipv6  # 启用IPv6选项</span><br><span class=\"line\">--jsonp # 允许JSONP形式通过HTTP访问（有安全影响）</span><br><span class=\"line\">--maxConns arg  # 最大同时连接数 默认2000</span><br><span class=\"line\">--noauth    # 不启用验证</span><br><span class=\"line\">--nohttpinterface   # 关闭http接口，默认关闭27018端口访问</span><br><span class=\"line\">--noprealloc    # 禁用数据文件预分配(往往影响性能)</span><br><span class=\"line\">--noscripting   # 禁用脚本引擎</span><br><span class=\"line\">--notablescan   # 不允许表扫描</span><br><span class=\"line\">--nounixsocket  # 禁用Unix套接字监听</span><br><span class=\"line\">--nssize arg (=16)  # 设置信数据库.ns文件大小(MB)</span><br><span class=\"line\">--objcheck  # 在收到客户数据,检查的有效性，</span><br><span class=\"line\">--profile arg   # 档案参数 0=off 1=slow, 2=all</span><br><span class=\"line\">--quota # 限制每个数据库的文件数，设置默认为8</span><br><span class=\"line\">--quotaFiles arg    # number of files allower per db, requires --quota</span><br><span class=\"line\">--rest  # 开启简单的rest API</span><br><span class=\"line\">--repair    # 修复所有数据库run repair on all dbs</span><br><span class=\"line\">--repairpath arg    # 修复库生成的文件的目录,默认为目录名称dbpath</span><br><span class=\"line\">--slowms arg (=100) # value of slow for profile and console log</span><br><span class=\"line\">--smallfiles    # 使用较小的默认文件</span><br><span class=\"line\">--syncdelay arg (=60)   # 数据写入磁盘的时间秒数(0=never,不推荐)</span><br><span class=\"line\">--sysinfo   # 打印一些诊断系统信息</span><br><span class=\"line\">--upgrade   # 如果需要升级数据库</span><br><span class=\"line\"> * Replicaton 参数</span><br><span class=\"line\"> </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">--fastsync  # 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步</span><br><span class=\"line\">--autoresync    # 如果从库与主库同步数据差得多，自动重新同步;当发现从服务器的数据不是最新时，开始从主服务器请求同步数据</span><br><span class=\"line\">--oplogSize arg # 主节点的oplog日志大小，单位为M，建议设大点(更改oplog大小时，只需停主库，删除local.*，然后加--oplogSize=* 重新启动即可,*代表大小)</span><br><span class=\"line\"> * 主/从参数</span><br><span class=\"line\"> </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">--master    # 主库模式</span><br><span class=\"line\">--slave # 从库模式</span><br><span class=\"line\">--source arg    # 从库 端口号</span><br><span class=\"line\">--only arg  # 指定单一的数据库复制</span><br><span class=\"line\">--slavedelay arg    # 设置从库同步主库的延迟时间</span><br><span class=\"line\"> * Replica set(副本集)选项：</span><br><span class=\"line\"> </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">--replSet arg   # 设置副本集名称</span><br><span class=\"line\"> * Sharding(分片)选项</span><br><span class=\"line\"> </span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">--configsvr # 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb</span><br><span class=\"line\">--shardsvr  # 声明这是一个集群的分片,默认端口27018</span><br><span class=\"line\">--noMoveParanoia    # 关闭偏执为moveChunk数据保存</span><br></pre></td></tr></table></figure></p>\n<p>参考：<a href=\"https://www.cnblogs.com/amoyzhu/p/7943018.html\" target=\"_blank\" rel=\"noopener\">mongo主从配置</a></p>\n<h3 id=\"主机中存储\"><a href=\"#主机中存储\" class=\"headerlink\" title=\"主机中存储\"></a>主机中存储</h3><p>db.createCollection(“test”);<br>db.getCollection(‘test’). insert({“name”:”master”})</p>\n<h3 id=\"验证-在slave中查看是否有此数据\"><a href=\"#验证-在slave中查看是否有此数据\" class=\"headerlink\" title=\"验证 在slave中查看是否有此数据\"></a>验证 在slave中查看是否有此数据</h3><p>./mongo host:port/db -u user -p pwd</p>\n<p>#mongo 127.0.0.1:9430/admin -u root -p FpTH2a<br>db.getCollection(‘test’).find({});<br>默认的SECONDARY是不允许读写的，使用命令解决<br>rs.slaveOk();</p>\n<p>加Auth=true的验证</p>\n<h3 id=\"疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？\"><a href=\"#疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？\" class=\"headerlink\" title=\"疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？\"></a>疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？</h3><p>参考：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_41988331/article/details/83116873\" target=\"_blank\" rel=\"noopener\">mongodb 主从 部署 切换</a></li>\n<li><a href=\"https://blog.csdn.net/lelemom/article/details/82704980\" target=\"_blank\" rel=\"noopener\">mongodb主从配置及备份</a></li>\n</ul>"},{"title":"前后台数据交互方式总结","date":"2016-07-20T00:21:41.000Z","description":"Form AJAX 总结","_content":"\n## 不同的角度，不同的说辞-------------前后台数据交互\n\n#### 传输数据形式 \n\n##### JSON(流行)(Javascript object Notation)\nJSON\n对象{} 数组[] 属性名:属性值  \"键\":\"值\"\n\nJSONP(JSON with Padding)(解决同源策略)\n\nHTML中 script\\>、img\\>、iframe\\>标签可以跨域\n\nJSONP可用于解决主流浏览器的跨域数据访问的问题；\n\njQuery利用**script\\>**标签，来实现跨域的数据交换，然后包装的AJAX中,外部调用的时候因此就可以向各个域名下请求资源。\n\nRESTFul(Representational State Transfer)\n放在这只是显示一下JSON的趋势。\n\n##### xml text html\n\nxml :曾经很辉煌，现在是一个失势的宠儿，就是因为JSON，JSON看起来更容易进行数据交互，体积小，方便，简洁。\n\ntext html :老样子，我不在乎你们的争吵，一副为老独尊的样子，看你们玩耍，我不信，你们还能隔空传物？\n#### 提交方式\n\n#### Form\n##### HTML的form\n\n```\n<form action=\"\" method=\"\" enctype=\"\">\nmethod: post/get\n\n```\n\n\nenctype \n\napplication/x-www-form-urlencoded 在发送前编码所有字符（默认）\n\nmultipart/form-data 不对字符编码。在使用包含**文件上传**控件的表单时，必须使用该值。\n\ntext/plain\t空格转换为 \"+\" 加号，但不对特殊字符编码。\n\n按钮直接提交button/submit\n\n##### js代替按钮的\"form\"\n某一事件调用js，代为提交 \n\n这种形式可以添加表单验证\n\n在form上添加onsubmit=\"\"事件返回false则不提交form\n\nform.submit()\n\n#### AJAX(Asynchronous JavaScript and XML)(异步更新)\n##### xhr(XmlHttpRequest) ajax的原始形态\nIE6及之前的版本使用ActiveXObject,IE7之后及其它浏览器使用XMLHttpRequest\n因此很少原生的对象，现在随着jQuery的流行和增强，浏览器的升级，可以说，全部浏览器都支持XMLHttpRequest对象，我们就可以直接使用jQuery中的ajax来进行前后台交互。\n\n偷个懒，放两篇bolg在这，\n[AJAX——核心XMLHttpRequest对象](http://blog.csdn.net/liujiahan629629/article/details/17126727)\n[轻松掌握XMLHttpRequest对象](http://www.cnblogs.com/beniao/archive/2008/03/29/1128914.html)\n\n注:XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个\"表单\".比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个**二进制文件**. \n \n[FormData对象](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData) [Html5 FormData+Ajax表单数据提交](http://www.tuicool.com/articles/uuiE3y)\n\n所有主流浏览器的较新版本都已经支持这个对象了，比如Chrome 7+、Firefox 4+、IE 10+、Opera 12+、Safari 5+。\n\n> 但是jQuery不支持FormData,此对象只能在原生XmlHttpRequest中使用。\n##### jQuery\n包装后的形式，不用考虑浏览器的兼容性，更方便.\n\n\n```\n$.ajax({\n\turl:\"\",\n\ttype:\"\",// get post\n\tcache:\"\",\n\tdata:\"\",\n\tdataType:\"\",\n\tsuccess:function(){},\n\terror: function(){},\n});\n\n```\n\nurl:请求地址。\n\n-----\n\ncache:要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。\n\n---------------\n\ndata: Object对象，JSON\n\n---------\n\ndataType是返回的数据类型。\n\ndataType:要求为String类型的参数，预期服务器返回的数据类型。\n如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：\n\nxml：返回XML文档，可用JQuery处理。\n\nhtml：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。\n\nscript：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。\n\njson：返回JSON数据。\n\njsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。\n\ntext：返回纯文本字符串。\n\n---------\n\nsuccess/error function(){}成功或者失败回调\n\n```\n$.get();\n$.post();\n$.getJSON();\n\n```\n\n和 ```$.ajax()```类似\n\n![](前后台数据交互方式总结/201608031301.PNG)\n\n$.getJSON() 调用get()\n![](前后台数据交互方式总结/201608031249.PNG)\n\n$.get() $.post() 调用ajax()\n\n但是jQuery**不支持异步上传文件**，我们可以引入AjaxFileUpload插件来实现。\n\n#####","source":"_posts/前后台数据交互方式总结.md","raw":"---\ntitle: 前后台数据交互方式总结\ndate: 2016-07-20 08:21:41\ntags: [前端,后端]\ncategories: 数据交互\ndescription: \"Form AJAX 总结\"\n---\n\n## 不同的角度，不同的说辞-------------前后台数据交互\n\n#### 传输数据形式 \n\n##### JSON(流行)(Javascript object Notation)\nJSON\n对象{} 数组[] 属性名:属性值  \"键\":\"值\"\n\nJSONP(JSON with Padding)(解决同源策略)\n\nHTML中 script\\>、img\\>、iframe\\>标签可以跨域\n\nJSONP可用于解决主流浏览器的跨域数据访问的问题；\n\njQuery利用**script\\>**标签，来实现跨域的数据交换，然后包装的AJAX中,外部调用的时候因此就可以向各个域名下请求资源。\n\nRESTFul(Representational State Transfer)\n放在这只是显示一下JSON的趋势。\n\n##### xml text html\n\nxml :曾经很辉煌，现在是一个失势的宠儿，就是因为JSON，JSON看起来更容易进行数据交互，体积小，方便，简洁。\n\ntext html :老样子，我不在乎你们的争吵，一副为老独尊的样子，看你们玩耍，我不信，你们还能隔空传物？\n#### 提交方式\n\n#### Form\n##### HTML的form\n\n```\n<form action=\"\" method=\"\" enctype=\"\">\nmethod: post/get\n\n```\n\n\nenctype \n\napplication/x-www-form-urlencoded 在发送前编码所有字符（默认）\n\nmultipart/form-data 不对字符编码。在使用包含**文件上传**控件的表单时，必须使用该值。\n\ntext/plain\t空格转换为 \"+\" 加号，但不对特殊字符编码。\n\n按钮直接提交button/submit\n\n##### js代替按钮的\"form\"\n某一事件调用js，代为提交 \n\n这种形式可以添加表单验证\n\n在form上添加onsubmit=\"\"事件返回false则不提交form\n\nform.submit()\n\n#### AJAX(Asynchronous JavaScript and XML)(异步更新)\n##### xhr(XmlHttpRequest) ajax的原始形态\nIE6及之前的版本使用ActiveXObject,IE7之后及其它浏览器使用XMLHttpRequest\n因此很少原生的对象，现在随着jQuery的流行和增强，浏览器的升级，可以说，全部浏览器都支持XMLHttpRequest对象，我们就可以直接使用jQuery中的ajax来进行前后台交互。\n\n偷个懒，放两篇bolg在这，\n[AJAX——核心XMLHttpRequest对象](http://blog.csdn.net/liujiahan629629/article/details/17126727)\n[轻松掌握XMLHttpRequest对象](http://www.cnblogs.com/beniao/archive/2008/03/29/1128914.html)\n\n注:XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个\"表单\".比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个**二进制文件**. \n \n[FormData对象](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData) [Html5 FormData+Ajax表单数据提交](http://www.tuicool.com/articles/uuiE3y)\n\n所有主流浏览器的较新版本都已经支持这个对象了，比如Chrome 7+、Firefox 4+、IE 10+、Opera 12+、Safari 5+。\n\n> 但是jQuery不支持FormData,此对象只能在原生XmlHttpRequest中使用。\n##### jQuery\n包装后的形式，不用考虑浏览器的兼容性，更方便.\n\n\n```\n$.ajax({\n\turl:\"\",\n\ttype:\"\",// get post\n\tcache:\"\",\n\tdata:\"\",\n\tdataType:\"\",\n\tsuccess:function(){},\n\terror: function(){},\n});\n\n```\n\nurl:请求地址。\n\n-----\n\ncache:要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。\n\n---------------\n\ndata: Object对象，JSON\n\n---------\n\ndataType是返回的数据类型。\n\ndataType:要求为String类型的参数，预期服务器返回的数据类型。\n如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：\n\nxml：返回XML文档，可用JQuery处理。\n\nhtml：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。\n\nscript：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。\n\njson：返回JSON数据。\n\njsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。\n\ntext：返回纯文本字符串。\n\n---------\n\nsuccess/error function(){}成功或者失败回调\n\n```\n$.get();\n$.post();\n$.getJSON();\n\n```\n\n和 ```$.ajax()```类似\n\n![](前后台数据交互方式总结/201608031301.PNG)\n\n$.getJSON() 调用get()\n![](前后台数据交互方式总结/201608031249.PNG)\n\n$.get() $.post() 调用ajax()\n\n但是jQuery**不支持异步上传文件**，我们可以引入AjaxFileUpload插件来实现。\n\n#####","slug":"前后台数据交互方式总结","published":1,"updated":"2016-08-31T12:24:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77t001vugv5jkp2hvvs","content":"<h2 id=\"不同的角度，不同的说辞————-前后台数据交互\"><a href=\"#不同的角度，不同的说辞————-前后台数据交互\" class=\"headerlink\" title=\"不同的角度，不同的说辞————-前后台数据交互\"></a>不同的角度，不同的说辞————-前后台数据交互</h2><h4 id=\"传输数据形式\"><a href=\"#传输数据形式\" class=\"headerlink\" title=\"传输数据形式\"></a>传输数据形式</h4><h5 id=\"JSON-流行-Javascript-object-Notation\"><a href=\"#JSON-流行-Javascript-object-Notation\" class=\"headerlink\" title=\"JSON(流行)(Javascript object Notation)\"></a>JSON(流行)(Javascript object Notation)</h5><p>JSON<br>对象{} 数组[] 属性名:属性值  “键”:”值”</p>\n<p>JSONP(JSON with Padding)(解决同源策略)</p>\n<p>HTML中 script>、img>、iframe>标签可以跨域</p>\n<p>JSONP可用于解决主流浏览器的跨域数据访问的问题；</p>\n<p>jQuery利用<strong>script></strong>标签，来实现跨域的数据交换，然后包装的AJAX中,外部调用的时候因此就可以向各个域名下请求资源。</p>\n<p>RESTFul(Representational State Transfer)<br>放在这只是显示一下JSON的趋势。</p>\n<h5 id=\"xml-text-html\"><a href=\"#xml-text-html\" class=\"headerlink\" title=\"xml text html\"></a>xml text html</h5><p>xml :曾经很辉煌，现在是一个失势的宠儿，就是因为JSON，JSON看起来更容易进行数据交互，体积小，方便，简洁。</p>\n<p>text html :老样子，我不在乎你们的争吵，一副为老独尊的样子，看你们玩耍，我不信，你们还能隔空传物？</p>\n<h4 id=\"提交方式\"><a href=\"#提交方式\" class=\"headerlink\" title=\"提交方式\"></a>提交方式</h4><h4 id=\"Form\"><a href=\"#Form\" class=\"headerlink\" title=\"Form\"></a>Form</h4><h5 id=\"HTML的form\"><a href=\"#HTML的form\" class=\"headerlink\" title=\"HTML的form\"></a>HTML的form</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;&quot; method=&quot;&quot; enctype=&quot;&quot;&gt;</span><br><span class=\"line\">method: post/get</span><br></pre></td></tr></table></figure>\n<p>enctype </p>\n<p>application/x-www-form-urlencoded 在发送前编码所有字符（默认）</p>\n<p>multipart/form-data 不对字符编码。在使用包含<strong>文件上传</strong>控件的表单时，必须使用该值。</p>\n<p>text/plain    空格转换为 “+” 加号，但不对特殊字符编码。</p>\n<p>按钮直接提交button/submit</p>\n<h5 id=\"js代替按钮的”form”\"><a href=\"#js代替按钮的”form”\" class=\"headerlink\" title=\"js代替按钮的”form”\"></a>js代替按钮的”form”</h5><p>某一事件调用js，代为提交 </p>\n<p>这种形式可以添加表单验证</p>\n<p>在form上添加onsubmit=””事件返回false则不提交form</p>\n<p>form.submit()</p>\n<h4 id=\"AJAX-Asynchronous-JavaScript-and-XML-异步更新\"><a href=\"#AJAX-Asynchronous-JavaScript-and-XML-异步更新\" class=\"headerlink\" title=\"AJAX(Asynchronous JavaScript and XML)(异步更新)\"></a>AJAX(Asynchronous JavaScript and XML)(异步更新)</h4><h5 id=\"xhr-XmlHttpRequest-ajax的原始形态\"><a href=\"#xhr-XmlHttpRequest-ajax的原始形态\" class=\"headerlink\" title=\"xhr(XmlHttpRequest) ajax的原始形态\"></a>xhr(XmlHttpRequest) ajax的原始形态</h5><p>IE6及之前的版本使用ActiveXObject,IE7之后及其它浏览器使用XMLHttpRequest<br>因此很少原生的对象，现在随着jQuery的流行和增强，浏览器的升级，可以说，全部浏览器都支持XMLHttpRequest对象，我们就可以直接使用jQuery中的ajax来进行前后台交互。</p>\n<p>偷个懒，放两篇bolg在这，<br><a href=\"http://blog.csdn.net/liujiahan629629/article/details/17126727\" target=\"_blank\" rel=\"noopener\">AJAX——核心XMLHttpRequest对象</a><br><a href=\"http://www.cnblogs.com/beniao/archive/2008/03/29/1128914.html\" target=\"_blank\" rel=\"noopener\">轻松掌握XMLHttpRequest对象</a></p>\n<p>注:XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个”表单”.比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个<strong>二进制文件</strong>. </p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\" target=\"_blank\" rel=\"noopener\">FormData对象</a> <a href=\"http://www.tuicool.com/articles/uuiE3y\" target=\"_blank\" rel=\"noopener\">Html5 FormData+Ajax表单数据提交</a></p>\n<p>所有主流浏览器的较新版本都已经支持这个对象了，比如Chrome 7+、Firefox 4+、IE 10+、Opera 12+、Safari 5+。</p>\n<blockquote>\n<p>但是jQuery不支持FormData,此对象只能在原生XmlHttpRequest中使用。</p>\n</blockquote>\n<h5 id=\"jQuery\"><a href=\"#jQuery\" class=\"headerlink\" title=\"jQuery\"></a>jQuery</h5><p>包装后的形式，不用考虑浏览器的兼容性，更方便.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\turl:&quot;&quot;,</span><br><span class=\"line\">\ttype:&quot;&quot;,// get post</span><br><span class=\"line\">\tcache:&quot;&quot;,</span><br><span class=\"line\">\tdata:&quot;&quot;,</span><br><span class=\"line\">\tdataType:&quot;&quot;,</span><br><span class=\"line\">\tsuccess:function()&#123;&#125;,</span><br><span class=\"line\">\terror: function()&#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>url:请求地址。</p>\n<hr>\n<p>cache:要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p>\n<hr>\n<p>data: Object对象，JSON</p>\n<hr>\n<p>dataType是返回的数据类型。</p>\n<p>dataType:要求为String类型的参数，预期服务器返回的数据类型。<br>如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：</p>\n<p>xml：返回XML文档，可用JQuery处理。</p>\n<p>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。</p>\n<p>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。</p>\n<p>json：返回JSON数据。</p>\n<p>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。</p>\n<p>text：返回纯文本字符串。</p>\n<hr>\n<p>success/error function(){}成功或者失败回调</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get();</span><br><span class=\"line\">$.post();</span><br><span class=\"line\">$.getJSON();</span><br></pre></td></tr></table></figure>\n<p>和 <code>$.ajax()</code>类似</p>\n<p><img src=\"/.io//201608031301.PNG\" alt></p>\n<p>$.getJSON() 调用get()<br><img src=\"/.io//201608031249.PNG\" alt></p>\n<p>$.get() $.post() 调用ajax()</p>\n<p>但是jQuery<strong>不支持异步上传文件</strong>，我们可以引入AjaxFileUpload插件来实现。</p>\n<p>#####</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"不同的角度，不同的说辞————-前后台数据交互\"><a href=\"#不同的角度，不同的说辞————-前后台数据交互\" class=\"headerlink\" title=\"不同的角度，不同的说辞————-前后台数据交互\"></a>不同的角度，不同的说辞————-前后台数据交互</h2><h4 id=\"传输数据形式\"><a href=\"#传输数据形式\" class=\"headerlink\" title=\"传输数据形式\"></a>传输数据形式</h4><h5 id=\"JSON-流行-Javascript-object-Notation\"><a href=\"#JSON-流行-Javascript-object-Notation\" class=\"headerlink\" title=\"JSON(流行)(Javascript object Notation)\"></a>JSON(流行)(Javascript object Notation)</h5><p>JSON<br>对象{} 数组[] 属性名:属性值  “键”:”值”</p>\n<p>JSONP(JSON with Padding)(解决同源策略)</p>\n<p>HTML中 script>、img>、iframe>标签可以跨域</p>\n<p>JSONP可用于解决主流浏览器的跨域数据访问的问题；</p>\n<p>jQuery利用<strong>script></strong>标签，来实现跨域的数据交换，然后包装的AJAX中,外部调用的时候因此就可以向各个域名下请求资源。</p>\n<p>RESTFul(Representational State Transfer)<br>放在这只是显示一下JSON的趋势。</p>\n<h5 id=\"xml-text-html\"><a href=\"#xml-text-html\" class=\"headerlink\" title=\"xml text html\"></a>xml text html</h5><p>xml :曾经很辉煌，现在是一个失势的宠儿，就是因为JSON，JSON看起来更容易进行数据交互，体积小，方便，简洁。</p>\n<p>text html :老样子，我不在乎你们的争吵，一副为老独尊的样子，看你们玩耍，我不信，你们还能隔空传物？</p>\n<h4 id=\"提交方式\"><a href=\"#提交方式\" class=\"headerlink\" title=\"提交方式\"></a>提交方式</h4><h4 id=\"Form\"><a href=\"#Form\" class=\"headerlink\" title=\"Form\"></a>Form</h4><h5 id=\"HTML的form\"><a href=\"#HTML的form\" class=\"headerlink\" title=\"HTML的form\"></a>HTML的form</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;&quot; method=&quot;&quot; enctype=&quot;&quot;&gt;</span><br><span class=\"line\">method: post/get</span><br></pre></td></tr></table></figure>\n<p>enctype </p>\n<p>application/x-www-form-urlencoded 在发送前编码所有字符（默认）</p>\n<p>multipart/form-data 不对字符编码。在使用包含<strong>文件上传</strong>控件的表单时，必须使用该值。</p>\n<p>text/plain    空格转换为 “+” 加号，但不对特殊字符编码。</p>\n<p>按钮直接提交button/submit</p>\n<h5 id=\"js代替按钮的”form”\"><a href=\"#js代替按钮的”form”\" class=\"headerlink\" title=\"js代替按钮的”form”\"></a>js代替按钮的”form”</h5><p>某一事件调用js，代为提交 </p>\n<p>这种形式可以添加表单验证</p>\n<p>在form上添加onsubmit=””事件返回false则不提交form</p>\n<p>form.submit()</p>\n<h4 id=\"AJAX-Asynchronous-JavaScript-and-XML-异步更新\"><a href=\"#AJAX-Asynchronous-JavaScript-and-XML-异步更新\" class=\"headerlink\" title=\"AJAX(Asynchronous JavaScript and XML)(异步更新)\"></a>AJAX(Asynchronous JavaScript and XML)(异步更新)</h4><h5 id=\"xhr-XmlHttpRequest-ajax的原始形态\"><a href=\"#xhr-XmlHttpRequest-ajax的原始形态\" class=\"headerlink\" title=\"xhr(XmlHttpRequest) ajax的原始形态\"></a>xhr(XmlHttpRequest) ajax的原始形态</h5><p>IE6及之前的版本使用ActiveXObject,IE7之后及其它浏览器使用XMLHttpRequest<br>因此很少原生的对象，现在随着jQuery的流行和增强，浏览器的升级，可以说，全部浏览器都支持XMLHttpRequest对象，我们就可以直接使用jQuery中的ajax来进行前后台交互。</p>\n<p>偷个懒，放两篇bolg在这，<br><a href=\"http://blog.csdn.net/liujiahan629629/article/details/17126727\" target=\"_blank\" rel=\"noopener\">AJAX——核心XMLHttpRequest对象</a><br><a href=\"http://www.cnblogs.com/beniao/archive/2008/03/29/1128914.html\" target=\"_blank\" rel=\"noopener\">轻松掌握XMLHttpRequest对象</a></p>\n<p>注:XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个”表单”.比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个<strong>二进制文件</strong>. </p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\" target=\"_blank\" rel=\"noopener\">FormData对象</a> <a href=\"http://www.tuicool.com/articles/uuiE3y\" target=\"_blank\" rel=\"noopener\">Html5 FormData+Ajax表单数据提交</a></p>\n<p>所有主流浏览器的较新版本都已经支持这个对象了，比如Chrome 7+、Firefox 4+、IE 10+、Opera 12+、Safari 5+。</p>\n<blockquote>\n<p>但是jQuery不支持FormData,此对象只能在原生XmlHttpRequest中使用。</p>\n</blockquote>\n<h5 id=\"jQuery\"><a href=\"#jQuery\" class=\"headerlink\" title=\"jQuery\"></a>jQuery</h5><p>包装后的形式，不用考虑浏览器的兼容性，更方便.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\turl:&quot;&quot;,</span><br><span class=\"line\">\ttype:&quot;&quot;,// get post</span><br><span class=\"line\">\tcache:&quot;&quot;,</span><br><span class=\"line\">\tdata:&quot;&quot;,</span><br><span class=\"line\">\tdataType:&quot;&quot;,</span><br><span class=\"line\">\tsuccess:function()&#123;&#125;,</span><br><span class=\"line\">\terror: function()&#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>url:请求地址。</p>\n<hr>\n<p>cache:要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p>\n<hr>\n<p>data: Object对象，JSON</p>\n<hr>\n<p>dataType是返回的数据类型。</p>\n<p>dataType:要求为String类型的参数，预期服务器返回的数据类型。<br>如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：</p>\n<p>xml：返回XML文档，可用JQuery处理。</p>\n<p>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。</p>\n<p>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。</p>\n<p>json：返回JSON数据。</p>\n<p>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。</p>\n<p>text：返回纯文本字符串。</p>\n<hr>\n<p>success/error function(){}成功或者失败回调</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get();</span><br><span class=\"line\">$.post();</span><br><span class=\"line\">$.getJSON();</span><br></pre></td></tr></table></figure>\n<p>和 <code>$.ajax()</code>类似</p>\n<p><img src=\"/.io//201608031301.PNG\" alt></p>\n<p>$.getJSON() 调用get()<br><img src=\"/.io//201608031249.PNG\" alt></p>\n<p>$.get() $.post() 调用ajax()</p>\n<p>但是jQuery<strong>不支持异步上传文件</strong>，我们可以引入AjaxFileUpload插件来实现。</p>\n<p>#####</p>\n"},{"title":"前端小tips","date":"2017-10-22T22:19:32.000Z","description":"记录一些工作中前端的不了解的小知识点","_content":"\n\nbutton默认的type 是submit  \ntextarea固定，不可拖拽： textarea{ resize:none;}\n\nhttp://garlicjs.org/#download 可以form缓存，猜测应该是使用localStorage\n![garlicjs](前端小tips/P71102-200420.jpg)\n\n\njQuery兼容性\n\nIE jQuery的支持程度\n\njquery在IE下append等需要把string转换成jquery对象 append($(str))\n操作获取html或者text时也要是jquery对象不能使xmlDOM\nhttp://www.jb51.net/Special/354.htm JQuery操作xml\n\nIE9下使用append是怎么回事？\nappend($(\"file\",xml));\n$(window.frameElement)获取当期的iframe\nreadonly只读\n对象问题innerHTML属于js原生的。DOM XMLDOM 等究竟是什么？\n\n[卸载IE](http://www.jb51.net/softjc/148524.html)\n\n[javascript内存](http://web.jobbole.com/82625/)\n\n[为什么 \\[\"1\", \"2\", \"3\"\\].map(parseInt) 返回 \\[1,NaN,NaN\\]？](http://blog.csdn.net/justjavac/article/details/19473199)\nparseInt(String,radix)string可以转换成数字，radix 在2-36之间，\nmap 会给callback传三个参数（element，index，arr）而index刚好给了parseInt的radix\n\n[++\\[\\[\\]\\]\\[+\\[\\]\\]+\\[+\\[\\]\\] = 10](http://justjavac.com/javascript/2012/05/24/can-you-explain-why-10.html)\n\n[JS去除空格和换行的正则表达式(推荐)](http://www.jb51.net/article/86547.htm)\n正则\\r\\n\n\n空格会变成 %20\n\n当js方法没有进入的时候，考虑一下是否有重名的方法。导致原来的方法被覆盖。\n\nPWA & AMP\n\nPWA(Progressive Web App)  渐进式网页应用\nAMP(Accelerated Mobile Pages) 加速移动网页\n\n\n系统问题,window7\n标准账户上网\n\n\nentity中：注解配置文件写有schema  \n\n生成sshkey  `ssh-keygen -t rsa -C \"xxxxxx@yy.com\"  `","source":"_posts/前端小tips.md","raw":"---\ntitle: 前端小tips\ndate: 2017-10-23 06:19:32\ntags: 前端\ncategories: \ndescription: \"记录一些工作中前端的不了解的小知识点\"\n---\n\n\nbutton默认的type 是submit  \ntextarea固定，不可拖拽： textarea{ resize:none;}\n\nhttp://garlicjs.org/#download 可以form缓存，猜测应该是使用localStorage\n![garlicjs](前端小tips/P71102-200420.jpg)\n\n\njQuery兼容性\n\nIE jQuery的支持程度\n\njquery在IE下append等需要把string转换成jquery对象 append($(str))\n操作获取html或者text时也要是jquery对象不能使xmlDOM\nhttp://www.jb51.net/Special/354.htm JQuery操作xml\n\nIE9下使用append是怎么回事？\nappend($(\"file\",xml));\n$(window.frameElement)获取当期的iframe\nreadonly只读\n对象问题innerHTML属于js原生的。DOM XMLDOM 等究竟是什么？\n\n[卸载IE](http://www.jb51.net/softjc/148524.html)\n\n[javascript内存](http://web.jobbole.com/82625/)\n\n[为什么 \\[\"1\", \"2\", \"3\"\\].map(parseInt) 返回 \\[1,NaN,NaN\\]？](http://blog.csdn.net/justjavac/article/details/19473199)\nparseInt(String,radix)string可以转换成数字，radix 在2-36之间，\nmap 会给callback传三个参数（element，index，arr）而index刚好给了parseInt的radix\n\n[++\\[\\[\\]\\]\\[+\\[\\]\\]+\\[+\\[\\]\\] = 10](http://justjavac.com/javascript/2012/05/24/can-you-explain-why-10.html)\n\n[JS去除空格和换行的正则表达式(推荐)](http://www.jb51.net/article/86547.htm)\n正则\\r\\n\n\n空格会变成 %20\n\n当js方法没有进入的时候，考虑一下是否有重名的方法。导致原来的方法被覆盖。\n\nPWA & AMP\n\nPWA(Progressive Web App)  渐进式网页应用\nAMP(Accelerated Mobile Pages) 加速移动网页\n\n\n系统问题,window7\n标准账户上网\n\n\nentity中：注解配置文件写有schema  \n\n生成sshkey  `ssh-keygen -t rsa -C \"xxxxxx@yy.com\"  `","slug":"前端小tips","published":1,"updated":"2018-01-05T06:18:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77u001yugv5k9dygh1t","content":"<p>button默认的type 是submit<br>textarea固定，不可拖拽： textarea{ resize:none;}</p>\n<p><a href=\"http://garlicjs.org/#download\" target=\"_blank\" rel=\"noopener\">http://garlicjs.org/#download</a> 可以form缓存，猜测应该是使用localStorage<br><img src=\"/.io//P71102-200420.jpg\" alt=\"garlicjs\"></p>\n<p>jQuery兼容性</p>\n<p>IE jQuery的支持程度</p>\n<p>jquery在IE下append等需要把string转换成jquery对象 append($(str))<br>操作获取html或者text时也要是jquery对象不能使xmlDOM<br><a href=\"http://www.jb51.net/Special/354.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/Special/354.htm</a> JQuery操作xml</p>\n<p>IE9下使用append是怎么回事？<br>append($(“file”,xml));<br>$(window.frameElement)获取当期的iframe<br>readonly只读<br>对象问题innerHTML属于js原生的。DOM XMLDOM 等究竟是什么？</p>\n<p><a href=\"http://www.jb51.net/softjc/148524.html\" target=\"_blank\" rel=\"noopener\">卸载IE</a></p>\n<p><a href=\"http://web.jobbole.com/82625/\" target=\"_blank\" rel=\"noopener\">javascript内存</a></p>\n<p><a href=\"http://blog.csdn.net/justjavac/article/details/19473199\" target=\"_blank\" rel=\"noopener\">为什么 [“1”, “2”, “3”].map(parseInt) 返回 [1,NaN,NaN]？</a><br>parseInt(String,radix)string可以转换成数字，radix 在2-36之间，<br>map 会给callback传三个参数（element，index，arr）而index刚好给了parseInt的radix</p>\n<p><a href=\"http://justjavac.com/javascript/2012/05/24/can-you-explain-why-10.html\" target=\"_blank\" rel=\"noopener\">++[[]][+[]]+[+[]] = 10</a></p>\n<p><a href=\"http://www.jb51.net/article/86547.htm\" target=\"_blank\" rel=\"noopener\">JS去除空格和换行的正则表达式(推荐)</a><br>正则\\r\\n</p>\n<p>空格会变成 %20</p>\n<p>当js方法没有进入的时候，考虑一下是否有重名的方法。导致原来的方法被覆盖。</p>\n<p>PWA &amp; AMP</p>\n<p>PWA(Progressive Web App)  渐进式网页应用<br>AMP(Accelerated Mobile Pages) 加速移动网页</p>\n<p>系统问题,window7<br>标准账户上网</p>\n<p>entity中：注解配置文件写有schema  </p>\n<p>生成sshkey  <code>ssh-keygen -t rsa -C &quot;xxxxxx@yy.com&quot;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>button默认的type 是submit<br>textarea固定，不可拖拽： textarea{ resize:none;}</p>\n<p><a href=\"http://garlicjs.org/#download\" target=\"_blank\" rel=\"noopener\">http://garlicjs.org/#download</a> 可以form缓存，猜测应该是使用localStorage<br><img src=\"/.io//P71102-200420.jpg\" alt=\"garlicjs\"></p>\n<p>jQuery兼容性</p>\n<p>IE jQuery的支持程度</p>\n<p>jquery在IE下append等需要把string转换成jquery对象 append($(str))<br>操作获取html或者text时也要是jquery对象不能使xmlDOM<br><a href=\"http://www.jb51.net/Special/354.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/Special/354.htm</a> JQuery操作xml</p>\n<p>IE9下使用append是怎么回事？<br>append($(“file”,xml));<br>$(window.frameElement)获取当期的iframe<br>readonly只读<br>对象问题innerHTML属于js原生的。DOM XMLDOM 等究竟是什么？</p>\n<p><a href=\"http://www.jb51.net/softjc/148524.html\" target=\"_blank\" rel=\"noopener\">卸载IE</a></p>\n<p><a href=\"http://web.jobbole.com/82625/\" target=\"_blank\" rel=\"noopener\">javascript内存</a></p>\n<p><a href=\"http://blog.csdn.net/justjavac/article/details/19473199\" target=\"_blank\" rel=\"noopener\">为什么 [“1”, “2”, “3”].map(parseInt) 返回 [1,NaN,NaN]？</a><br>parseInt(String,radix)string可以转换成数字，radix 在2-36之间，<br>map 会给callback传三个参数（element，index，arr）而index刚好给了parseInt的radix</p>\n<p><a href=\"http://justjavac.com/javascript/2012/05/24/can-you-explain-why-10.html\" target=\"_blank\" rel=\"noopener\">++[[]][+[]]+[+[]] = 10</a></p>\n<p><a href=\"http://www.jb51.net/article/86547.htm\" target=\"_blank\" rel=\"noopener\">JS去除空格和换行的正则表达式(推荐)</a><br>正则\\r\\n</p>\n<p>空格会变成 %20</p>\n<p>当js方法没有进入的时候，考虑一下是否有重名的方法。导致原来的方法被覆盖。</p>\n<p>PWA &amp; AMP</p>\n<p>PWA(Progressive Web App)  渐进式网页应用<br>AMP(Accelerated Mobile Pages) 加速移动网页</p>\n<p>系统问题,window7<br>标准账户上网</p>\n<p>entity中：注解配置文件写有schema  </p>\n<p>生成sshkey  <code>ssh-keygen -t rsa -C &quot;xxxxxx@yy.com&quot;</code></p>\n"},{"title":"前言技术之OCR识别","date":"2018-12-21T01:10:12.000Z","description":"OCR,文字识别技术","_content":"\nOCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。\n\n主要是两个步骤，先获取输入源数据，例如扫描仪、相机等，然后进行识别，目前流行的识别技术主要是RNN循环神经网络、LSTM等，传统的OCR\n<!--more-->\ntesseract-ocr 识别，当前使用版本4.0，下载的时候,直接在github中的wiki即可。\n\nwin\n\n环境变量\n\n增加一个PATH变量名，变量值还是我的安装路径C:\\Program Files (x86)\\Tesseract-OCR;\n\n增加一个TESSDATA_PREFIX变量名，变量值还是我的安装路径C:\\Program Files (x86)\\Tesseract-OCR\\tessdata;\n\n\n```\ntesseract -v\n\ntesseract test.png output_1 –l eng\n\n```\n\n[wiki](https://github.com/tesseract-ocr/tesseract/wiki)\n[安装](https://www.cnblogs.com/jianqingwang/p/6978724.html)\n[使用](https://www.cnblogs.com/cnlian/p/5765871.html)","source":"_posts/前言技术之OCR识别.md","raw":"---\ntitle: 前言技术之OCR识别\ndate: 2018-12-21 09:10:12\ntags: 前沿技术\ncategories: OCR\ndescription: \"OCR,文字识别技术\"\n---\n\nOCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。\n\n主要是两个步骤，先获取输入源数据，例如扫描仪、相机等，然后进行识别，目前流行的识别技术主要是RNN循环神经网络、LSTM等，传统的OCR\n<!--more-->\ntesseract-ocr 识别，当前使用版本4.0，下载的时候,直接在github中的wiki即可。\n\nwin\n\n环境变量\n\n增加一个PATH变量名，变量值还是我的安装路径C:\\Program Files (x86)\\Tesseract-OCR;\n\n增加一个TESSDATA_PREFIX变量名，变量值还是我的安装路径C:\\Program Files (x86)\\Tesseract-OCR\\tessdata;\n\n\n```\ntesseract -v\n\ntesseract test.png output_1 –l eng\n\n```\n\n[wiki](https://github.com/tesseract-ocr/tesseract/wiki)\n[安装](https://www.cnblogs.com/jianqingwang/p/6978724.html)\n[使用](https://www.cnblogs.com/cnlian/p/5765871.html)","slug":"前言技术之OCR识别","published":1,"updated":"2018-12-24T02:07:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77v0021ugv5ve0zy6f9","content":"<p>OCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。</p>\n<p>主要是两个步骤，先获取输入源数据，例如扫描仪、相机等，然后进行识别，目前流行的识别技术主要是RNN循环神经网络、LSTM等，传统的OCR<br><a id=\"more\"></a><br>tesseract-ocr 识别，当前使用版本4.0，下载的时候,直接在github中的wiki即可。</p>\n<p>win</p>\n<p>环境变量</p>\n<p>增加一个PATH变量名，变量值还是我的安装路径C:\\Program Files (x86)\\Tesseract-OCR;</p>\n<p>增加一个TESSDATA_PREFIX变量名，变量值还是我的安装路径C:\\Program Files (x86)\\Tesseract-OCR\\tessdata;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract -v</span><br><span class=\"line\"></span><br><span class=\"line\">tesseract test.png output_1 –l eng</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/tesseract-ocr/tesseract/wiki\" target=\"_blank\" rel=\"noopener\">wiki</a><br><a href=\"https://www.cnblogs.com/jianqingwang/p/6978724.html\" target=\"_blank\" rel=\"noopener\">安装</a><br><a href=\"https://www.cnblogs.com/cnlian/p/5765871.html\" target=\"_blank\" rel=\"noopener\">使用</a></p>\n","site":{"data":{}},"excerpt":"<p>OCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。</p>\n<p>主要是两个步骤，先获取输入源数据，例如扫描仪、相机等，然后进行识别，目前流行的识别技术主要是RNN循环神经网络、LSTM等，传统的OCR<br></p>","more":"<br>tesseract-ocr 识别，当前使用版本4.0，下载的时候,直接在github中的wiki即可。<p></p>\n<p>win</p>\n<p>环境变量</p>\n<p>增加一个PATH变量名，变量值还是我的安装路径C:\\Program Files (x86)\\Tesseract-OCR;</p>\n<p>增加一个TESSDATA_PREFIX变量名，变量值还是我的安装路径C:\\Program Files (x86)\\Tesseract-OCR\\tessdata;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract -v</span><br><span class=\"line\"></span><br><span class=\"line\">tesseract test.png output_1 –l eng</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/tesseract-ocr/tesseract/wiki\" target=\"_blank\" rel=\"noopener\">wiki</a><br><a href=\"https://www.cnblogs.com/jianqingwang/p/6978724.html\" target=\"_blank\" rel=\"noopener\">安装</a><br><a href=\"https://www.cnblogs.com/cnlian/p/5765871.html\" target=\"_blank\" rel=\"noopener\">使用</a></p>"},{"title":"好软件,靠机遇","date":"2016-07-01T14:58:39.000Z","description":"提高效率软件","_content":"# 搜索\n-------------\n## Lanuchy  快速启动软件\n#### [Launchy 2.1.2 快捷列](http://www.playpcesor.com/2008/08/launchy-212.html)\n#### [Lanuchy](http://www.360doc.com/content/13/0314/11/11502803_271427641.shtml)\n## Everything 搜索本地文件\n#### [Everything](http://www.voidtools.com/)\n## 装饰资源管理器\n#### [Clover](http://cn.ejie.me/)_\n\n保护色 f.lux 软件 [f.lux](https://justgetflux.com/)\n\n\n[多标签](http://cn.ejie.me/)\n<!--more-->\n\n拼图组合 [CollageIt Pro 网上有绿色版](http://www.collageitfree.com/)\nsoapUI 测试 [soap](https://www.soapui.org/)\nteamViewer 穿透内网远程控制 [teamViewer](https://www.teamviewer.com/zhCN/)\n\n模拟机器学习的过程：[mldemo](http://mldemos.epfl.ch/)\n","source":"_posts/好软件-靠机遇.md","raw":"---\ntitle: '好软件,靠机遇'\ndate: 2016-07-01 22:58:39\ntags: 软件\ncategories: 资源\ndescription: \"提高效率软件\"\n---\n# 搜索\n-------------\n## Lanuchy  快速启动软件\n#### [Launchy 2.1.2 快捷列](http://www.playpcesor.com/2008/08/launchy-212.html)\n#### [Lanuchy](http://www.360doc.com/content/13/0314/11/11502803_271427641.shtml)\n## Everything 搜索本地文件\n#### [Everything](http://www.voidtools.com/)\n## 装饰资源管理器\n#### [Clover](http://cn.ejie.me/)_\n\n保护色 f.lux 软件 [f.lux](https://justgetflux.com/)\n\n\n[多标签](http://cn.ejie.me/)\n<!--more-->\n\n拼图组合 [CollageIt Pro 网上有绿色版](http://www.collageitfree.com/)\nsoapUI 测试 [soap](https://www.soapui.org/)\nteamViewer 穿透内网远程控制 [teamViewer](https://www.teamviewer.com/zhCN/)\n\n模拟机器学习的过程：[mldemo](http://mldemos.epfl.ch/)\n","slug":"好软件-靠机遇","published":1,"updated":"2018-06-08T03:54:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77w0023ugv56g398oux","content":"<h1 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h1><hr>\n<h2 id=\"Lanuchy-快速启动软件\"><a href=\"#Lanuchy-快速启动软件\" class=\"headerlink\" title=\"Lanuchy  快速启动软件\"></a>Lanuchy  快速启动软件</h2><h4 id=\"Launchy-2-1-2-快捷列\"><a href=\"#Launchy-2-1-2-快捷列\" class=\"headerlink\" title=\"Launchy 2.1.2 快捷列\"></a><a href=\"http://www.playpcesor.com/2008/08/launchy-212.html\" target=\"_blank\" rel=\"noopener\">Launchy 2.1.2 快捷列</a></h4><h4 id=\"Lanuchy\"><a href=\"#Lanuchy\" class=\"headerlink\" title=\"Lanuchy\"></a><a href=\"http://www.360doc.com/content/13/0314/11/11502803_271427641.shtml\" target=\"_blank\" rel=\"noopener\">Lanuchy</a></h4><h2 id=\"Everything-搜索本地文件\"><a href=\"#Everything-搜索本地文件\" class=\"headerlink\" title=\"Everything 搜索本地文件\"></a>Everything 搜索本地文件</h2><h4 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a><a href=\"http://www.voidtools.com/\" target=\"_blank\" rel=\"noopener\">Everything</a></h4><h2 id=\"装饰资源管理器\"><a href=\"#装饰资源管理器\" class=\"headerlink\" title=\"装饰资源管理器\"></a>装饰资源管理器</h2><h4 id=\"Clover\"><a href=\"#Clover\" class=\"headerlink\" title=\"Clover_\"></a><a href=\"http://cn.ejie.me/\" target=\"_blank\" rel=\"noopener\">Clover</a>_</h4><p>保护色 f.lux 软件 <a href=\"https://justgetflux.com/\" target=\"_blank\" rel=\"noopener\">f.lux</a></p>\n<p><a href=\"http://cn.ejie.me/\" target=\"_blank\" rel=\"noopener\">多标签</a><br><a id=\"more\"></a></p>\n<p>拼图组合 <a href=\"http://www.collageitfree.com/\" target=\"_blank\" rel=\"noopener\">CollageIt Pro 网上有绿色版</a><br>soapUI 测试 <a href=\"https://www.soapui.org/\" target=\"_blank\" rel=\"noopener\">soap</a><br>teamViewer 穿透内网远程控制 <a href=\"https://www.teamviewer.com/zhCN/\" target=\"_blank\" rel=\"noopener\">teamViewer</a></p>\n<p>模拟机器学习的过程：<a href=\"http://mldemos.epfl.ch/\" target=\"_blank\" rel=\"noopener\">mldemo</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h1><hr>\n<h2 id=\"Lanuchy-快速启动软件\"><a href=\"#Lanuchy-快速启动软件\" class=\"headerlink\" title=\"Lanuchy  快速启动软件\"></a>Lanuchy  快速启动软件</h2><h4 id=\"Launchy-2-1-2-快捷列\"><a href=\"#Launchy-2-1-2-快捷列\" class=\"headerlink\" title=\"Launchy 2.1.2 快捷列\"></a><a href=\"http://www.playpcesor.com/2008/08/launchy-212.html\" target=\"_blank\" rel=\"noopener\">Launchy 2.1.2 快捷列</a></h4><h4 id=\"Lanuchy\"><a href=\"#Lanuchy\" class=\"headerlink\" title=\"Lanuchy\"></a><a href=\"http://www.360doc.com/content/13/0314/11/11502803_271427641.shtml\" target=\"_blank\" rel=\"noopener\">Lanuchy</a></h4><h2 id=\"Everything-搜索本地文件\"><a href=\"#Everything-搜索本地文件\" class=\"headerlink\" title=\"Everything 搜索本地文件\"></a>Everything 搜索本地文件</h2><h4 id=\"Everything\"><a href=\"#Everything\" class=\"headerlink\" title=\"Everything\"></a><a href=\"http://www.voidtools.com/\" target=\"_blank\" rel=\"noopener\">Everything</a></h4><h2 id=\"装饰资源管理器\"><a href=\"#装饰资源管理器\" class=\"headerlink\" title=\"装饰资源管理器\"></a>装饰资源管理器</h2><h4 id=\"Clover\"><a href=\"#Clover\" class=\"headerlink\" title=\"Clover_\"></a><a href=\"http://cn.ejie.me/\" target=\"_blank\" rel=\"noopener\">Clover</a>_</h4><p>保护色 f.lux 软件 <a href=\"https://justgetflux.com/\" target=\"_blank\" rel=\"noopener\">f.lux</a></p>\n<p><a href=\"http://cn.ejie.me/\" target=\"_blank\" rel=\"noopener\">多标签</a><br></p>","more":"<p></p>\n<p>拼图组合 <a href=\"http://www.collageitfree.com/\" target=\"_blank\" rel=\"noopener\">CollageIt Pro 网上有绿色版</a><br>soapUI 测试 <a href=\"https://www.soapui.org/\" target=\"_blank\" rel=\"noopener\">soap</a><br>teamViewer 穿透内网远程控制 <a href=\"https://www.teamviewer.com/zhCN/\" target=\"_blank\" rel=\"noopener\">teamViewer</a></p>\n<p>模拟机器学习的过程：<a href=\"http://mldemos.epfl.ch/\" target=\"_blank\" rel=\"noopener\">mldemo</a></p>"},{"title":"好网站,天天记","date":"2016-06-29T12:24:19.000Z","description":"网站资源总结","_content":" \n## 搜索\n\n##### [精美图片搜索](http://librestock.com/)\n##### [虫部落搜索](http://so.chongbuluo.com)\n\n## chrome插件\n\n##### [Disconnect：保护网络安全](http://chromecj.com/productivity/2016-04/704.html)\n##### [Chrome 的 Github 扩展 Octotree](http://www.oschina.net/p/octotree) \n##### [屏蔽弹出式广告：Poper Blocker](http://chromecj.com/productivity/2014-12/309.html) \n##### [月光博客12个强大的Chrome插件](http://www.williamlong.info/archives/3548.html) \n##### [75款实用chrome插件推荐](http://www.360doc.com/content/12/0325/00/2982817_197418499.shtml) \n##### [史上最全的Chrome使用技巧集锦](http://www.codeceo.com/article/chrome-usage-most-useful.html)\n##### tampermonkey添加脚本[脚本地址](https://greasyfork.org/zh-CN/)\n##### [油猴子脚本，屏蔽一些东西，其他人写好的脚本](https://greasyfork.org/zh-CN/scripts)\n<!--more-->\n## 编辑器&IDE\n\n#### Sublime插件\n\n##### [动图展示16个Sublime Text快捷键用法](http://www.linuxidc.com/Linux/2014-12/110930.htm)\n##### [package control](https://packagecontrol.io/)\n##### [Sublime插件：增强篇](http://www.jianshu.com/p/5905f927d01b)\n##### [Sublime Text 3能用支持的插件推荐](http://dengo.org/archives/923)\n##### [Sublime Text 3下两款Markdown插件](http://www.linuxidc.com/Linux/2015-08/121178.htm)\n##### [MarkdownEditing 语法](https://github.com/SublimeText-Markdown/MarkdownEditing)\n##### [OmniMarkupPreviewer 即时预览MarkDown ctrl+alt+o](https://github.com/timonwong/OmniMarkupPreviewer)\n##### [ConvertToUTF8](https://github.com/seanliang/ConvertToUTF8)\n##### [SideBarEnhancements](https://github.com/titoBouzout/SideBarEnhancements)\n\n#### eclipse插件,编码,默认习惯\n\n##### [将Eclipse中现有的java类生成类图ModelGoon](http://www.it610.com/article/1677574.htm)\n##### [你应该关注的几个Eclipse超酷插件](http://www.importnew.com/4707.html)\n\n  \n## 个人博客\n\n##### [没有什么难的](http://www.newtonk.com/Blogs/index)\n##### [SSH整合的那些坑](http://www.newtonk.com/Blogs/read?id=3)\n##### [Spring源码分析](http://www.newtonk.com/Blogs/read?id=29)\n##### [Tomcat架构分析](http://www.newtonk.com/Blogs/read?id=27)\n##### [Darren_聂微东 - 关注前端技术](http://www.cnblogs.com/Darren_code/)\n##### [聂微东，一枚Web技术领域的手艺人](http://www.fefork.com/)\n##### [方糖气球](http://ftqq.com/)\n##### [程序员如何优雅的挣零花钱？](http://ftqq.com/2016/03/cheng-xu-yuan-ru-he-you-ya-de-zheng-ling-hua-qian/)\n##### [对程序员而言，订阅哪些信息源最能让你跟上前沿?](https://www.zhihu.com/question/33524185)\n##### [说说自己知道的各个领域水平比较不错的论坛](https://v2ex.com/t/37663)\n##### [java-my-life设计模式等](http://www.cnblogs.com/java-my-life/)\n##### [走向架构师之路](http://blog.csdn.net/cutesource?viewmode=contents)\n\n## 资源\n\n#### 开发快速生成代码或者其他资源\n\n##### [netcraft探测服务器](http://www.netcraft.com/)\n##### [jsrun 在线运行JS](http://jsrun.net/)\n##### [bootstrap快速生成1](http://www.ibootstrap.cn/)\n##### [bootstrap快速生成2](http://www.bootcss.com/p/layoutit/)\n##### [Codeuml代码编写UML](http://www.codeuml.com/)\n\n\n\n#### 开发类优秀网站\n\n##### [segmentfault](https://segmentfault.com/)\n##### [github里一个小朋友整理的各大公司开发部和个人的博客大合集](https://github.com/kilimchoi/engineering-blogs)\n##### [邮件订阅 全栈必读：Fullweb](http://fullweb.io/)\n##### [开发者速查表](http://devhints.cn/)\n\n\n\n##### 信息源的三大网站:\n[Hacker News](https://news.ycombinator.com/)\n[Designer News](https://www.designernews.co/)\n[Reddit 的 Programming](https://www.reddit.com/r/programming/)\n\n##### [JavaRanger](http://www.javaranger.com/)\n\n## 流程图/脑图\n##### [workflowy](https://workflowy.com/)\n##### [百度H5](http://h5.baidu.com/list)\n##### [百度脑图](http://naotu.baidu.com/home)\n##### [画图工具](https://www.mindmup.com)\n##### []()\n\n\n#### 其他资源\n\n##### [优雅记单词](http://visuwords.com/)\n\n#### 图片\n\n##### [免费高清矢量图](https://pixabay.com/)\n##### [free nature stock 自然景观](http://freenaturestock.com/)\n##### [创意、新奇](http://www.gratisography.com/)\n##### [免费素材,可商用](http://isorepublic.com/)\n##### [visual hunt 免费高质量](https://visualhunt.com/)\n##### [精美图片分享站,免费,可商用](https://stocksnap.io/)\n##### [无归属,免费商用](https://www.pexels.com/)\n##### [高分辨率,值得收藏](https://unsplash.com/)\n##### [TAGUL - WORD CLOUD ART 字体艺术中文支持不是很友好](https://tagul.com/)\n##### [自己画图，对称](http://weavesilk.com/)\n##### [在线PS工具](https://www.photopea.com/)\n\n#### JS&CSS&HTML\n\n##### [Bootstap3常用插件总结](http://cyeboss.iteye.com/blog/2094683)\n##### [动态JS背景](http://jsrun.net/pkKKp/embedded/all/light)\n##### [前端导航](http://jsdig.com/)\n##### [你的浏览器对html5的支持程度](http://html5test.com/)  \n##### [显示css的各种样式](http://cssreference.io/)五星推荐\n \n\n#### JAVA\n\n#### excel\n\n##### [excelhome](www.excelhome.net)\n##### [excelpx](www.excelpx.com)","source":"_posts/好网站-天天记.md","raw":"---\ntitle: '好网站,天天记'\ndate: 2016-06-29 20:24:19\ntags: [网站,插件]\ncategories: 资源\ndescription: \"网站资源总结\"\n---\n \n## 搜索\n\n##### [精美图片搜索](http://librestock.com/)\n##### [虫部落搜索](http://so.chongbuluo.com)\n\n## chrome插件\n\n##### [Disconnect：保护网络安全](http://chromecj.com/productivity/2016-04/704.html)\n##### [Chrome 的 Github 扩展 Octotree](http://www.oschina.net/p/octotree) \n##### [屏蔽弹出式广告：Poper Blocker](http://chromecj.com/productivity/2014-12/309.html) \n##### [月光博客12个强大的Chrome插件](http://www.williamlong.info/archives/3548.html) \n##### [75款实用chrome插件推荐](http://www.360doc.com/content/12/0325/00/2982817_197418499.shtml) \n##### [史上最全的Chrome使用技巧集锦](http://www.codeceo.com/article/chrome-usage-most-useful.html)\n##### tampermonkey添加脚本[脚本地址](https://greasyfork.org/zh-CN/)\n##### [油猴子脚本，屏蔽一些东西，其他人写好的脚本](https://greasyfork.org/zh-CN/scripts)\n<!--more-->\n## 编辑器&IDE\n\n#### Sublime插件\n\n##### [动图展示16个Sublime Text快捷键用法](http://www.linuxidc.com/Linux/2014-12/110930.htm)\n##### [package control](https://packagecontrol.io/)\n##### [Sublime插件：增强篇](http://www.jianshu.com/p/5905f927d01b)\n##### [Sublime Text 3能用支持的插件推荐](http://dengo.org/archives/923)\n##### [Sublime Text 3下两款Markdown插件](http://www.linuxidc.com/Linux/2015-08/121178.htm)\n##### [MarkdownEditing 语法](https://github.com/SublimeText-Markdown/MarkdownEditing)\n##### [OmniMarkupPreviewer 即时预览MarkDown ctrl+alt+o](https://github.com/timonwong/OmniMarkupPreviewer)\n##### [ConvertToUTF8](https://github.com/seanliang/ConvertToUTF8)\n##### [SideBarEnhancements](https://github.com/titoBouzout/SideBarEnhancements)\n\n#### eclipse插件,编码,默认习惯\n\n##### [将Eclipse中现有的java类生成类图ModelGoon](http://www.it610.com/article/1677574.htm)\n##### [你应该关注的几个Eclipse超酷插件](http://www.importnew.com/4707.html)\n\n  \n## 个人博客\n\n##### [没有什么难的](http://www.newtonk.com/Blogs/index)\n##### [SSH整合的那些坑](http://www.newtonk.com/Blogs/read?id=3)\n##### [Spring源码分析](http://www.newtonk.com/Blogs/read?id=29)\n##### [Tomcat架构分析](http://www.newtonk.com/Blogs/read?id=27)\n##### [Darren_聂微东 - 关注前端技术](http://www.cnblogs.com/Darren_code/)\n##### [聂微东，一枚Web技术领域的手艺人](http://www.fefork.com/)\n##### [方糖气球](http://ftqq.com/)\n##### [程序员如何优雅的挣零花钱？](http://ftqq.com/2016/03/cheng-xu-yuan-ru-he-you-ya-de-zheng-ling-hua-qian/)\n##### [对程序员而言，订阅哪些信息源最能让你跟上前沿?](https://www.zhihu.com/question/33524185)\n##### [说说自己知道的各个领域水平比较不错的论坛](https://v2ex.com/t/37663)\n##### [java-my-life设计模式等](http://www.cnblogs.com/java-my-life/)\n##### [走向架构师之路](http://blog.csdn.net/cutesource?viewmode=contents)\n\n## 资源\n\n#### 开发快速生成代码或者其他资源\n\n##### [netcraft探测服务器](http://www.netcraft.com/)\n##### [jsrun 在线运行JS](http://jsrun.net/)\n##### [bootstrap快速生成1](http://www.ibootstrap.cn/)\n##### [bootstrap快速生成2](http://www.bootcss.com/p/layoutit/)\n##### [Codeuml代码编写UML](http://www.codeuml.com/)\n\n\n\n#### 开发类优秀网站\n\n##### [segmentfault](https://segmentfault.com/)\n##### [github里一个小朋友整理的各大公司开发部和个人的博客大合集](https://github.com/kilimchoi/engineering-blogs)\n##### [邮件订阅 全栈必读：Fullweb](http://fullweb.io/)\n##### [开发者速查表](http://devhints.cn/)\n\n\n\n##### 信息源的三大网站:\n[Hacker News](https://news.ycombinator.com/)\n[Designer News](https://www.designernews.co/)\n[Reddit 的 Programming](https://www.reddit.com/r/programming/)\n\n##### [JavaRanger](http://www.javaranger.com/)\n\n## 流程图/脑图\n##### [workflowy](https://workflowy.com/)\n##### [百度H5](http://h5.baidu.com/list)\n##### [百度脑图](http://naotu.baidu.com/home)\n##### [画图工具](https://www.mindmup.com)\n##### []()\n\n\n#### 其他资源\n\n##### [优雅记单词](http://visuwords.com/)\n\n#### 图片\n\n##### [免费高清矢量图](https://pixabay.com/)\n##### [free nature stock 自然景观](http://freenaturestock.com/)\n##### [创意、新奇](http://www.gratisography.com/)\n##### [免费素材,可商用](http://isorepublic.com/)\n##### [visual hunt 免费高质量](https://visualhunt.com/)\n##### [精美图片分享站,免费,可商用](https://stocksnap.io/)\n##### [无归属,免费商用](https://www.pexels.com/)\n##### [高分辨率,值得收藏](https://unsplash.com/)\n##### [TAGUL - WORD CLOUD ART 字体艺术中文支持不是很友好](https://tagul.com/)\n##### [自己画图，对称](http://weavesilk.com/)\n##### [在线PS工具](https://www.photopea.com/)\n\n#### JS&CSS&HTML\n\n##### [Bootstap3常用插件总结](http://cyeboss.iteye.com/blog/2094683)\n##### [动态JS背景](http://jsrun.net/pkKKp/embedded/all/light)\n##### [前端导航](http://jsdig.com/)\n##### [你的浏览器对html5的支持程度](http://html5test.com/)  \n##### [显示css的各种样式](http://cssreference.io/)五星推荐\n \n\n#### JAVA\n\n#### excel\n\n##### [excelhome](www.excelhome.net)\n##### [excelpx](www.excelpx.com)","slug":"好网站-天天记","published":1,"updated":"2018-11-08T11:46:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77x0027ugv5bsszqpsp","content":"<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><h5 id=\"精美图片搜索\"><a href=\"#精美图片搜索\" class=\"headerlink\" title=\"精美图片搜索\"></a><a href=\"http://librestock.com/\" target=\"_blank\" rel=\"noopener\">精美图片搜索</a></h5><h5 id=\"虫部落搜索\"><a href=\"#虫部落搜索\" class=\"headerlink\" title=\"虫部落搜索\"></a><a href=\"http://so.chongbuluo.com\" target=\"_blank\" rel=\"noopener\">虫部落搜索</a></h5><h2 id=\"chrome插件\"><a href=\"#chrome插件\" class=\"headerlink\" title=\"chrome插件\"></a>chrome插件</h2><h5 id=\"Disconnect：保护网络安全\"><a href=\"#Disconnect：保护网络安全\" class=\"headerlink\" title=\"Disconnect：保护网络安全\"></a><a href=\"http://chromecj.com/productivity/2016-04/704.html\" target=\"_blank\" rel=\"noopener\">Disconnect：保护网络安全</a></h5><h5 id=\"Chrome-的-Github-扩展-Octotree\"><a href=\"#Chrome-的-Github-扩展-Octotree\" class=\"headerlink\" title=\"Chrome 的 Github 扩展 Octotree\"></a><a href=\"http://www.oschina.net/p/octotree\" target=\"_blank\" rel=\"noopener\">Chrome 的 Github 扩展 Octotree</a></h5><h5 id=\"屏蔽弹出式广告：Poper-Blocker\"><a href=\"#屏蔽弹出式广告：Poper-Blocker\" class=\"headerlink\" title=\"屏蔽弹出式广告：Poper Blocker\"></a><a href=\"http://chromecj.com/productivity/2014-12/309.html\" target=\"_blank\" rel=\"noopener\">屏蔽弹出式广告：Poper Blocker</a></h5><h5 id=\"月光博客12个强大的Chrome插件\"><a href=\"#月光博客12个强大的Chrome插件\" class=\"headerlink\" title=\"月光博客12个强大的Chrome插件\"></a><a href=\"http://www.williamlong.info/archives/3548.html\" target=\"_blank\" rel=\"noopener\">月光博客12个强大的Chrome插件</a></h5><h5 id=\"75款实用chrome插件推荐\"><a href=\"#75款实用chrome插件推荐\" class=\"headerlink\" title=\"75款实用chrome插件推荐\"></a><a href=\"http://www.360doc.com/content/12/0325/00/2982817_197418499.shtml\" target=\"_blank\" rel=\"noopener\">75款实用chrome插件推荐</a></h5><h5 id=\"史上最全的Chrome使用技巧集锦\"><a href=\"#史上最全的Chrome使用技巧集锦\" class=\"headerlink\" title=\"史上最全的Chrome使用技巧集锦\"></a><a href=\"http://www.codeceo.com/article/chrome-usage-most-useful.html\" target=\"_blank\" rel=\"noopener\">史上最全的Chrome使用技巧集锦</a></h5><h5 id=\"tampermonkey添加脚本脚本地址\"><a href=\"#tampermonkey添加脚本脚本地址\" class=\"headerlink\" title=\"tampermonkey添加脚本脚本地址\"></a>tampermonkey添加脚本<a href=\"https://greasyfork.org/zh-CN/\" target=\"_blank\" rel=\"noopener\">脚本地址</a></h5><h5 id=\"油猴子脚本，屏蔽一些东西，其他人写好的脚本\"><a href=\"#油猴子脚本，屏蔽一些东西，其他人写好的脚本\" class=\"headerlink\" title=\"油猴子脚本，屏蔽一些东西，其他人写好的脚本\"></a><a href=\"https://greasyfork.org/zh-CN/scripts\" target=\"_blank\" rel=\"noopener\">油猴子脚本，屏蔽一些东西，其他人写好的脚本</a></h5><a id=\"more\"></a>\n<h2 id=\"编辑器-amp-IDE\"><a href=\"#编辑器-amp-IDE\" class=\"headerlink\" title=\"编辑器&amp;IDE\"></a>编辑器&amp;IDE</h2><h4 id=\"Sublime插件\"><a href=\"#Sublime插件\" class=\"headerlink\" title=\"Sublime插件\"></a>Sublime插件</h4><h5 id=\"动图展示16个Sublime-Text快捷键用法\"><a href=\"#动图展示16个Sublime-Text快捷键用法\" class=\"headerlink\" title=\"动图展示16个Sublime Text快捷键用法\"></a><a href=\"http://www.linuxidc.com/Linux/2014-12/110930.htm\" target=\"_blank\" rel=\"noopener\">动图展示16个Sublime Text快捷键用法</a></h5><h5 id=\"package-control\"><a href=\"#package-control\" class=\"headerlink\" title=\"package control\"></a><a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"noopener\">package control</a></h5><h5 id=\"Sublime插件：增强篇\"><a href=\"#Sublime插件：增强篇\" class=\"headerlink\" title=\"Sublime插件：增强篇\"></a><a href=\"http://www.jianshu.com/p/5905f927d01b\" target=\"_blank\" rel=\"noopener\">Sublime插件：增强篇</a></h5><h5 id=\"Sublime-Text-3能用支持的插件推荐\"><a href=\"#Sublime-Text-3能用支持的插件推荐\" class=\"headerlink\" title=\"Sublime Text 3能用支持的插件推荐\"></a><a href=\"http://dengo.org/archives/923\" target=\"_blank\" rel=\"noopener\">Sublime Text 3能用支持的插件推荐</a></h5><h5 id=\"Sublime-Text-3下两款Markdown插件\"><a href=\"#Sublime-Text-3下两款Markdown插件\" class=\"headerlink\" title=\"Sublime Text 3下两款Markdown插件\"></a><a href=\"http://www.linuxidc.com/Linux/2015-08/121178.htm\" target=\"_blank\" rel=\"noopener\">Sublime Text 3下两款Markdown插件</a></h5><h5 id=\"MarkdownEditing-语法\"><a href=\"#MarkdownEditing-语法\" class=\"headerlink\" title=\"MarkdownEditing 语法\"></a><a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\" target=\"_blank\" rel=\"noopener\">MarkdownEditing 语法</a></h5><h5 id=\"OmniMarkupPreviewer-即时预览MarkDown-ctrl-alt-o\"><a href=\"#OmniMarkupPreviewer-即时预览MarkDown-ctrl-alt-o\" class=\"headerlink\" title=\"OmniMarkupPreviewer 即时预览MarkDown ctrl+alt+o\"></a><a href=\"https://github.com/timonwong/OmniMarkupPreviewer\" target=\"_blank\" rel=\"noopener\">OmniMarkupPreviewer 即时预览MarkDown ctrl+alt+o</a></h5><h5 id=\"ConvertToUTF8\"><a href=\"#ConvertToUTF8\" class=\"headerlink\" title=\"ConvertToUTF8\"></a><a href=\"https://github.com/seanliang/ConvertToUTF8\" target=\"_blank\" rel=\"noopener\">ConvertToUTF8</a></h5><h5 id=\"SideBarEnhancements\"><a href=\"#SideBarEnhancements\" class=\"headerlink\" title=\"SideBarEnhancements\"></a><a href=\"https://github.com/titoBouzout/SideBarEnhancements\" target=\"_blank\" rel=\"noopener\">SideBarEnhancements</a></h5><h4 id=\"eclipse插件-编码-默认习惯\"><a href=\"#eclipse插件-编码-默认习惯\" class=\"headerlink\" title=\"eclipse插件,编码,默认习惯\"></a>eclipse插件,编码,默认习惯</h4><h5 id=\"将Eclipse中现有的java类生成类图ModelGoon\"><a href=\"#将Eclipse中现有的java类生成类图ModelGoon\" class=\"headerlink\" title=\"将Eclipse中现有的java类生成类图ModelGoon\"></a><a href=\"http://www.it610.com/article/1677574.htm\" target=\"_blank\" rel=\"noopener\">将Eclipse中现有的java类生成类图ModelGoon</a></h5><h5 id=\"你应该关注的几个Eclipse超酷插件\"><a href=\"#你应该关注的几个Eclipse超酷插件\" class=\"headerlink\" title=\"你应该关注的几个Eclipse超酷插件\"></a><a href=\"http://www.importnew.com/4707.html\" target=\"_blank\" rel=\"noopener\">你应该关注的几个Eclipse超酷插件</a></h5><h2 id=\"个人博客\"><a href=\"#个人博客\" class=\"headerlink\" title=\"个人博客\"></a>个人博客</h2><h5 id=\"没有什么难的\"><a href=\"#没有什么难的\" class=\"headerlink\" title=\"没有什么难的\"></a><a href=\"http://www.newtonk.com/Blogs/index\" target=\"_blank\" rel=\"noopener\">没有什么难的</a></h5><h5 id=\"SSH整合的那些坑\"><a href=\"#SSH整合的那些坑\" class=\"headerlink\" title=\"SSH整合的那些坑\"></a><a href=\"http://www.newtonk.com/Blogs/read?id=3\" target=\"_blank\" rel=\"noopener\">SSH整合的那些坑</a></h5><h5 id=\"Spring源码分析\"><a href=\"#Spring源码分析\" class=\"headerlink\" title=\"Spring源码分析\"></a><a href=\"http://www.newtonk.com/Blogs/read?id=29\" target=\"_blank\" rel=\"noopener\">Spring源码分析</a></h5><h5 id=\"Tomcat架构分析\"><a href=\"#Tomcat架构分析\" class=\"headerlink\" title=\"Tomcat架构分析\"></a><a href=\"http://www.newtonk.com/Blogs/read?id=27\" target=\"_blank\" rel=\"noopener\">Tomcat架构分析</a></h5><h5 id=\"Darren-聂微东-关注前端技术\"><a href=\"#Darren-聂微东-关注前端技术\" class=\"headerlink\" title=\"Darren_聂微东 - 关注前端技术\"></a><a href=\"http://www.cnblogs.com/Darren_code/\" target=\"_blank\" rel=\"noopener\">Darren_聂微东 - 关注前端技术</a></h5><h5 id=\"聂微东，一枚Web技术领域的手艺人\"><a href=\"#聂微东，一枚Web技术领域的手艺人\" class=\"headerlink\" title=\"聂微东，一枚Web技术领域的手艺人\"></a><a href=\"http://www.fefork.com/\" target=\"_blank\" rel=\"noopener\">聂微东，一枚Web技术领域的手艺人</a></h5><h5 id=\"方糖气球\"><a href=\"#方糖气球\" class=\"headerlink\" title=\"方糖气球\"></a><a href=\"http://ftqq.com/\" target=\"_blank\" rel=\"noopener\">方糖气球</a></h5><h5 id=\"程序员如何优雅的挣零花钱？\"><a href=\"#程序员如何优雅的挣零花钱？\" class=\"headerlink\" title=\"程序员如何优雅的挣零花钱？\"></a><a href=\"http://ftqq.com/2016/03/cheng-xu-yuan-ru-he-you-ya-de-zheng-ling-hua-qian/\" target=\"_blank\" rel=\"noopener\">程序员如何优雅的挣零花钱？</a></h5><h5 id=\"对程序员而言，订阅哪些信息源最能让你跟上前沿\"><a href=\"#对程序员而言，订阅哪些信息源最能让你跟上前沿\" class=\"headerlink\" title=\"对程序员而言，订阅哪些信息源最能让你跟上前沿?\"></a><a href=\"https://www.zhihu.com/question/33524185\" target=\"_blank\" rel=\"noopener\">对程序员而言，订阅哪些信息源最能让你跟上前沿?</a></h5><h5 id=\"说说自己知道的各个领域水平比较不错的论坛\"><a href=\"#说说自己知道的各个领域水平比较不错的论坛\" class=\"headerlink\" title=\"说说自己知道的各个领域水平比较不错的论坛\"></a><a href=\"https://v2ex.com/t/37663\" target=\"_blank\" rel=\"noopener\">说说自己知道的各个领域水平比较不错的论坛</a></h5><h5 id=\"java-my-life设计模式等\"><a href=\"#java-my-life设计模式等\" class=\"headerlink\" title=\"java-my-life设计模式等\"></a><a href=\"http://www.cnblogs.com/java-my-life/\" target=\"_blank\" rel=\"noopener\">java-my-life设计模式等</a></h5><h5 id=\"走向架构师之路\"><a href=\"#走向架构师之路\" class=\"headerlink\" title=\"走向架构师之路\"></a><a href=\"http://blog.csdn.net/cutesource?viewmode=contents\" target=\"_blank\" rel=\"noopener\">走向架构师之路</a></h5><h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><h4 id=\"开发快速生成代码或者其他资源\"><a href=\"#开发快速生成代码或者其他资源\" class=\"headerlink\" title=\"开发快速生成代码或者其他资源\"></a>开发快速生成代码或者其他资源</h4><h5 id=\"netcraft探测服务器\"><a href=\"#netcraft探测服务器\" class=\"headerlink\" title=\"netcraft探测服务器\"></a><a href=\"http://www.netcraft.com/\" target=\"_blank\" rel=\"noopener\">netcraft探测服务器</a></h5><h5 id=\"jsrun-在线运行JS\"><a href=\"#jsrun-在线运行JS\" class=\"headerlink\" title=\"jsrun 在线运行JS\"></a><a href=\"http://jsrun.net/\" target=\"_blank\" rel=\"noopener\">jsrun 在线运行JS</a></h5><h5 id=\"bootstrap快速生成1\"><a href=\"#bootstrap快速生成1\" class=\"headerlink\" title=\"bootstrap快速生成1\"></a><a href=\"http://www.ibootstrap.cn/\" target=\"_blank\" rel=\"noopener\">bootstrap快速生成1</a></h5><h5 id=\"bootstrap快速生成2\"><a href=\"#bootstrap快速生成2\" class=\"headerlink\" title=\"bootstrap快速生成2\"></a><a href=\"http://www.bootcss.com/p/layoutit/\" target=\"_blank\" rel=\"noopener\">bootstrap快速生成2</a></h5><h5 id=\"Codeuml代码编写UML\"><a href=\"#Codeuml代码编写UML\" class=\"headerlink\" title=\"Codeuml代码编写UML\"></a><a href=\"http://www.codeuml.com/\" target=\"_blank\" rel=\"noopener\">Codeuml代码编写UML</a></h5><h4 id=\"开发类优秀网站\"><a href=\"#开发类优秀网站\" class=\"headerlink\" title=\"开发类优秀网站\"></a>开发类优秀网站</h4><h5 id=\"segmentfault\"><a href=\"#segmentfault\" class=\"headerlink\" title=\"segmentfault\"></a><a href=\"https://segmentfault.com/\" target=\"_blank\" rel=\"noopener\">segmentfault</a></h5><h5 id=\"github里一个小朋友整理的各大公司开发部和个人的博客大合集\"><a href=\"#github里一个小朋友整理的各大公司开发部和个人的博客大合集\" class=\"headerlink\" title=\"github里一个小朋友整理的各大公司开发部和个人的博客大合集\"></a><a href=\"https://github.com/kilimchoi/engineering-blogs\" target=\"_blank\" rel=\"noopener\">github里一个小朋友整理的各大公司开发部和个人的博客大合集</a></h5><h5 id=\"邮件订阅-全栈必读：Fullweb\"><a href=\"#邮件订阅-全栈必读：Fullweb\" class=\"headerlink\" title=\"邮件订阅 全栈必读：Fullweb\"></a><a href=\"http://fullweb.io/\" target=\"_blank\" rel=\"noopener\">邮件订阅 全栈必读：Fullweb</a></h5><h5 id=\"开发者速查表\"><a href=\"#开发者速查表\" class=\"headerlink\" title=\"开发者速查表\"></a><a href=\"http://devhints.cn/\" target=\"_blank\" rel=\"noopener\">开发者速查表</a></h5><h5 id=\"信息源的三大网站\"><a href=\"#信息源的三大网站\" class=\"headerlink\" title=\"信息源的三大网站:\"></a>信息源的三大网站:</h5><p><a href=\"https://news.ycombinator.com/\" target=\"_blank\" rel=\"noopener\">Hacker News</a><br><a href=\"https://www.designernews.co/\" target=\"_blank\" rel=\"noopener\">Designer News</a><br><a href=\"https://www.reddit.com/r/programming/\" target=\"_blank\" rel=\"noopener\">Reddit 的 Programming</a></p>\n<h5 id=\"JavaRanger\"><a href=\"#JavaRanger\" class=\"headerlink\" title=\"JavaRanger\"></a><a href=\"http://www.javaranger.com/\" target=\"_blank\" rel=\"noopener\">JavaRanger</a></h5><h2 id=\"流程图-脑图\"><a href=\"#流程图-脑图\" class=\"headerlink\" title=\"流程图/脑图\"></a>流程图/脑图</h2><h5 id=\"workflowy\"><a href=\"#workflowy\" class=\"headerlink\" title=\"workflowy\"></a><a href=\"https://workflowy.com/\" target=\"_blank\" rel=\"noopener\">workflowy</a></h5><h5 id=\"百度H5\"><a href=\"#百度H5\" class=\"headerlink\" title=\"百度H5\"></a><a href=\"http://h5.baidu.com/list\" target=\"_blank\" rel=\"noopener\">百度H5</a></h5><h5 id=\"百度脑图\"><a href=\"#百度脑图\" class=\"headerlink\" title=\"百度脑图\"></a><a href=\"http://naotu.baidu.com/home\" target=\"_blank\" rel=\"noopener\">百度脑图</a></h5><h5 id=\"画图工具\"><a href=\"#画图工具\" class=\"headerlink\" title=\"画图工具\"></a><a href=\"https://www.mindmup.com\" target=\"_blank\" rel=\"noopener\">画图工具</a></h5><h5 id><a href=\"#\" class=\"headerlink\" title></a><a href></a></h5><h4 id=\"其他资源\"><a href=\"#其他资源\" class=\"headerlink\" title=\"其他资源\"></a>其他资源</h4><h5 id=\"优雅记单词\"><a href=\"#优雅记单词\" class=\"headerlink\" title=\"优雅记单词\"></a><a href=\"http://visuwords.com/\" target=\"_blank\" rel=\"noopener\">优雅记单词</a></h5><h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><h5 id=\"免费高清矢量图\"><a href=\"#免费高清矢量图\" class=\"headerlink\" title=\"免费高清矢量图\"></a><a href=\"https://pixabay.com/\" target=\"_blank\" rel=\"noopener\">免费高清矢量图</a></h5><h5 id=\"free-nature-stock-自然景观\"><a href=\"#free-nature-stock-自然景观\" class=\"headerlink\" title=\"free nature stock 自然景观\"></a><a href=\"http://freenaturestock.com/\" target=\"_blank\" rel=\"noopener\">free nature stock 自然景观</a></h5><h5 id=\"创意、新奇\"><a href=\"#创意、新奇\" class=\"headerlink\" title=\"创意、新奇\"></a><a href=\"http://www.gratisography.com/\" target=\"_blank\" rel=\"noopener\">创意、新奇</a></h5><h5 id=\"免费素材-可商用\"><a href=\"#免费素材-可商用\" class=\"headerlink\" title=\"免费素材,可商用\"></a><a href=\"http://isorepublic.com/\" target=\"_blank\" rel=\"noopener\">免费素材,可商用</a></h5><h5 id=\"visual-hunt-免费高质量\"><a href=\"#visual-hunt-免费高质量\" class=\"headerlink\" title=\"visual hunt 免费高质量\"></a><a href=\"https://visualhunt.com/\" target=\"_blank\" rel=\"noopener\">visual hunt 免费高质量</a></h5><h5 id=\"精美图片分享站-免费-可商用\"><a href=\"#精美图片分享站-免费-可商用\" class=\"headerlink\" title=\"精美图片分享站,免费,可商用\"></a><a href=\"https://stocksnap.io/\" target=\"_blank\" rel=\"noopener\">精美图片分享站,免费,可商用</a></h5><h5 id=\"无归属-免费商用\"><a href=\"#无归属-免费商用\" class=\"headerlink\" title=\"无归属,免费商用\"></a><a href=\"https://www.pexels.com/\" target=\"_blank\" rel=\"noopener\">无归属,免费商用</a></h5><h5 id=\"高分辨率-值得收藏\"><a href=\"#高分辨率-值得收藏\" class=\"headerlink\" title=\"高分辨率,值得收藏\"></a><a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">高分辨率,值得收藏</a></h5><h5 id=\"TAGUL-WORD-CLOUD-ART-字体艺术中文支持不是很友好\"><a href=\"#TAGUL-WORD-CLOUD-ART-字体艺术中文支持不是很友好\" class=\"headerlink\" title=\"TAGUL - WORD CLOUD ART 字体艺术中文支持不是很友好\"></a><a href=\"https://tagul.com/\" target=\"_blank\" rel=\"noopener\">TAGUL - WORD CLOUD ART 字体艺术中文支持不是很友好</a></h5><h5 id=\"自己画图，对称\"><a href=\"#自己画图，对称\" class=\"headerlink\" title=\"自己画图，对称\"></a><a href=\"http://weavesilk.com/\" target=\"_blank\" rel=\"noopener\">自己画图，对称</a></h5><h5 id=\"在线PS工具\"><a href=\"#在线PS工具\" class=\"headerlink\" title=\"在线PS工具\"></a><a href=\"https://www.photopea.com/\" target=\"_blank\" rel=\"noopener\">在线PS工具</a></h5><h4 id=\"JS-amp-CSS-amp-HTML\"><a href=\"#JS-amp-CSS-amp-HTML\" class=\"headerlink\" title=\"JS&amp;CSS&amp;HTML\"></a>JS&amp;CSS&amp;HTML</h4><h5 id=\"Bootstap3常用插件总结\"><a href=\"#Bootstap3常用插件总结\" class=\"headerlink\" title=\"Bootstap3常用插件总结\"></a><a href=\"http://cyeboss.iteye.com/blog/2094683\" target=\"_blank\" rel=\"noopener\">Bootstap3常用插件总结</a></h5><h5 id=\"动态JS背景\"><a href=\"#动态JS背景\" class=\"headerlink\" title=\"动态JS背景\"></a><a href=\"http://jsrun.net/pkKKp/embedded/all/light\" target=\"_blank\" rel=\"noopener\">动态JS背景</a></h5><h5 id=\"前端导航\"><a href=\"#前端导航\" class=\"headerlink\" title=\"前端导航\"></a><a href=\"http://jsdig.com/\" target=\"_blank\" rel=\"noopener\">前端导航</a></h5><h5 id=\"你的浏览器对html5的支持程度\"><a href=\"#你的浏览器对html5的支持程度\" class=\"headerlink\" title=\"你的浏览器对html5的支持程度\"></a><a href=\"http://html5test.com/\" target=\"_blank\" rel=\"noopener\">你的浏览器对html5的支持程度</a></h5><h5 id=\"显示css的各种样式五星推荐\"><a href=\"#显示css的各种样式五星推荐\" class=\"headerlink\" title=\"显示css的各种样式五星推荐\"></a><a href=\"http://cssreference.io/\" target=\"_blank\" rel=\"noopener\">显示css的各种样式</a>五星推荐</h5><h4 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h4><h4 id=\"excel\"><a href=\"#excel\" class=\"headerlink\" title=\"excel\"></a>excel</h4><h5 id=\"excelhome\"><a href=\"#excelhome\" class=\"headerlink\" title=\"excelhome\"></a><a href=\"www.excelhome.net\">excelhome</a></h5><h5 id=\"excelpx\"><a href=\"#excelpx\" class=\"headerlink\" title=\"excelpx\"></a><a href=\"www.excelpx.com\">excelpx</a></h5>","site":{"data":{}},"excerpt":"<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><h5 id=\"精美图片搜索\"><a href=\"#精美图片搜索\" class=\"headerlink\" title=\"精美图片搜索\"></a><a href=\"http://librestock.com/\" target=\"_blank\" rel=\"noopener\">精美图片搜索</a></h5><h5 id=\"虫部落搜索\"><a href=\"#虫部落搜索\" class=\"headerlink\" title=\"虫部落搜索\"></a><a href=\"http://so.chongbuluo.com\" target=\"_blank\" rel=\"noopener\">虫部落搜索</a></h5><h2 id=\"chrome插件\"><a href=\"#chrome插件\" class=\"headerlink\" title=\"chrome插件\"></a>chrome插件</h2><h5 id=\"Disconnect：保护网络安全\"><a href=\"#Disconnect：保护网络安全\" class=\"headerlink\" title=\"Disconnect：保护网络安全\"></a><a href=\"http://chromecj.com/productivity/2016-04/704.html\" target=\"_blank\" rel=\"noopener\">Disconnect：保护网络安全</a></h5><h5 id=\"Chrome-的-Github-扩展-Octotree\"><a href=\"#Chrome-的-Github-扩展-Octotree\" class=\"headerlink\" title=\"Chrome 的 Github 扩展 Octotree\"></a><a href=\"http://www.oschina.net/p/octotree\" target=\"_blank\" rel=\"noopener\">Chrome 的 Github 扩展 Octotree</a></h5><h5 id=\"屏蔽弹出式广告：Poper-Blocker\"><a href=\"#屏蔽弹出式广告：Poper-Blocker\" class=\"headerlink\" title=\"屏蔽弹出式广告：Poper Blocker\"></a><a href=\"http://chromecj.com/productivity/2014-12/309.html\" target=\"_blank\" rel=\"noopener\">屏蔽弹出式广告：Poper Blocker</a></h5><h5 id=\"月光博客12个强大的Chrome插件\"><a href=\"#月光博客12个强大的Chrome插件\" class=\"headerlink\" title=\"月光博客12个强大的Chrome插件\"></a><a href=\"http://www.williamlong.info/archives/3548.html\" target=\"_blank\" rel=\"noopener\">月光博客12个强大的Chrome插件</a></h5><h5 id=\"75款实用chrome插件推荐\"><a href=\"#75款实用chrome插件推荐\" class=\"headerlink\" title=\"75款实用chrome插件推荐\"></a><a href=\"http://www.360doc.com/content/12/0325/00/2982817_197418499.shtml\" target=\"_blank\" rel=\"noopener\">75款实用chrome插件推荐</a></h5><h5 id=\"史上最全的Chrome使用技巧集锦\"><a href=\"#史上最全的Chrome使用技巧集锦\" class=\"headerlink\" title=\"史上最全的Chrome使用技巧集锦\"></a><a href=\"http://www.codeceo.com/article/chrome-usage-most-useful.html\" target=\"_blank\" rel=\"noopener\">史上最全的Chrome使用技巧集锦</a></h5><h5 id=\"tampermonkey添加脚本脚本地址\"><a href=\"#tampermonkey添加脚本脚本地址\" class=\"headerlink\" title=\"tampermonkey添加脚本脚本地址\"></a>tampermonkey添加脚本<a href=\"https://greasyfork.org/zh-CN/\" target=\"_blank\" rel=\"noopener\">脚本地址</a></h5><h5 id=\"油猴子脚本，屏蔽一些东西，其他人写好的脚本\"><a href=\"#油猴子脚本，屏蔽一些东西，其他人写好的脚本\" class=\"headerlink\" title=\"油猴子脚本，屏蔽一些东西，其他人写好的脚本\"></a><a href=\"https://greasyfork.org/zh-CN/scripts\" target=\"_blank\" rel=\"noopener\">油猴子脚本，屏蔽一些东西，其他人写好的脚本</a></h5>","more":"<h2 id=\"编辑器-amp-IDE\"><a href=\"#编辑器-amp-IDE\" class=\"headerlink\" title=\"编辑器&amp;IDE\"></a>编辑器&amp;IDE</h2><h4 id=\"Sublime插件\"><a href=\"#Sublime插件\" class=\"headerlink\" title=\"Sublime插件\"></a>Sublime插件</h4><h5 id=\"动图展示16个Sublime-Text快捷键用法\"><a href=\"#动图展示16个Sublime-Text快捷键用法\" class=\"headerlink\" title=\"动图展示16个Sublime Text快捷键用法\"></a><a href=\"http://www.linuxidc.com/Linux/2014-12/110930.htm\" target=\"_blank\" rel=\"noopener\">动图展示16个Sublime Text快捷键用法</a></h5><h5 id=\"package-control\"><a href=\"#package-control\" class=\"headerlink\" title=\"package control\"></a><a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"noopener\">package control</a></h5><h5 id=\"Sublime插件：增强篇\"><a href=\"#Sublime插件：增强篇\" class=\"headerlink\" title=\"Sublime插件：增强篇\"></a><a href=\"http://www.jianshu.com/p/5905f927d01b\" target=\"_blank\" rel=\"noopener\">Sublime插件：增强篇</a></h5><h5 id=\"Sublime-Text-3能用支持的插件推荐\"><a href=\"#Sublime-Text-3能用支持的插件推荐\" class=\"headerlink\" title=\"Sublime Text 3能用支持的插件推荐\"></a><a href=\"http://dengo.org/archives/923\" target=\"_blank\" rel=\"noopener\">Sublime Text 3能用支持的插件推荐</a></h5><h5 id=\"Sublime-Text-3下两款Markdown插件\"><a href=\"#Sublime-Text-3下两款Markdown插件\" class=\"headerlink\" title=\"Sublime Text 3下两款Markdown插件\"></a><a href=\"http://www.linuxidc.com/Linux/2015-08/121178.htm\" target=\"_blank\" rel=\"noopener\">Sublime Text 3下两款Markdown插件</a></h5><h5 id=\"MarkdownEditing-语法\"><a href=\"#MarkdownEditing-语法\" class=\"headerlink\" title=\"MarkdownEditing 语法\"></a><a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\" target=\"_blank\" rel=\"noopener\">MarkdownEditing 语法</a></h5><h5 id=\"OmniMarkupPreviewer-即时预览MarkDown-ctrl-alt-o\"><a href=\"#OmniMarkupPreviewer-即时预览MarkDown-ctrl-alt-o\" class=\"headerlink\" title=\"OmniMarkupPreviewer 即时预览MarkDown ctrl+alt+o\"></a><a href=\"https://github.com/timonwong/OmniMarkupPreviewer\" target=\"_blank\" rel=\"noopener\">OmniMarkupPreviewer 即时预览MarkDown ctrl+alt+o</a></h5><h5 id=\"ConvertToUTF8\"><a href=\"#ConvertToUTF8\" class=\"headerlink\" title=\"ConvertToUTF8\"></a><a href=\"https://github.com/seanliang/ConvertToUTF8\" target=\"_blank\" rel=\"noopener\">ConvertToUTF8</a></h5><h5 id=\"SideBarEnhancements\"><a href=\"#SideBarEnhancements\" class=\"headerlink\" title=\"SideBarEnhancements\"></a><a href=\"https://github.com/titoBouzout/SideBarEnhancements\" target=\"_blank\" rel=\"noopener\">SideBarEnhancements</a></h5><h4 id=\"eclipse插件-编码-默认习惯\"><a href=\"#eclipse插件-编码-默认习惯\" class=\"headerlink\" title=\"eclipse插件,编码,默认习惯\"></a>eclipse插件,编码,默认习惯</h4><h5 id=\"将Eclipse中现有的java类生成类图ModelGoon\"><a href=\"#将Eclipse中现有的java类生成类图ModelGoon\" class=\"headerlink\" title=\"将Eclipse中现有的java类生成类图ModelGoon\"></a><a href=\"http://www.it610.com/article/1677574.htm\" target=\"_blank\" rel=\"noopener\">将Eclipse中现有的java类生成类图ModelGoon</a></h5><h5 id=\"你应该关注的几个Eclipse超酷插件\"><a href=\"#你应该关注的几个Eclipse超酷插件\" class=\"headerlink\" title=\"你应该关注的几个Eclipse超酷插件\"></a><a href=\"http://www.importnew.com/4707.html\" target=\"_blank\" rel=\"noopener\">你应该关注的几个Eclipse超酷插件</a></h5><h2 id=\"个人博客\"><a href=\"#个人博客\" class=\"headerlink\" title=\"个人博客\"></a>个人博客</h2><h5 id=\"没有什么难的\"><a href=\"#没有什么难的\" class=\"headerlink\" title=\"没有什么难的\"></a><a href=\"http://www.newtonk.com/Blogs/index\" target=\"_blank\" rel=\"noopener\">没有什么难的</a></h5><h5 id=\"SSH整合的那些坑\"><a href=\"#SSH整合的那些坑\" class=\"headerlink\" title=\"SSH整合的那些坑\"></a><a href=\"http://www.newtonk.com/Blogs/read?id=3\" target=\"_blank\" rel=\"noopener\">SSH整合的那些坑</a></h5><h5 id=\"Spring源码分析\"><a href=\"#Spring源码分析\" class=\"headerlink\" title=\"Spring源码分析\"></a><a href=\"http://www.newtonk.com/Blogs/read?id=29\" target=\"_blank\" rel=\"noopener\">Spring源码分析</a></h5><h5 id=\"Tomcat架构分析\"><a href=\"#Tomcat架构分析\" class=\"headerlink\" title=\"Tomcat架构分析\"></a><a href=\"http://www.newtonk.com/Blogs/read?id=27\" target=\"_blank\" rel=\"noopener\">Tomcat架构分析</a></h5><h5 id=\"Darren-聂微东-关注前端技术\"><a href=\"#Darren-聂微东-关注前端技术\" class=\"headerlink\" title=\"Darren_聂微东 - 关注前端技术\"></a><a href=\"http://www.cnblogs.com/Darren_code/\" target=\"_blank\" rel=\"noopener\">Darren_聂微东 - 关注前端技术</a></h5><h5 id=\"聂微东，一枚Web技术领域的手艺人\"><a href=\"#聂微东，一枚Web技术领域的手艺人\" class=\"headerlink\" title=\"聂微东，一枚Web技术领域的手艺人\"></a><a href=\"http://www.fefork.com/\" target=\"_blank\" rel=\"noopener\">聂微东，一枚Web技术领域的手艺人</a></h5><h5 id=\"方糖气球\"><a href=\"#方糖气球\" class=\"headerlink\" title=\"方糖气球\"></a><a href=\"http://ftqq.com/\" target=\"_blank\" rel=\"noopener\">方糖气球</a></h5><h5 id=\"程序员如何优雅的挣零花钱？\"><a href=\"#程序员如何优雅的挣零花钱？\" class=\"headerlink\" title=\"程序员如何优雅的挣零花钱？\"></a><a href=\"http://ftqq.com/2016/03/cheng-xu-yuan-ru-he-you-ya-de-zheng-ling-hua-qian/\" target=\"_blank\" rel=\"noopener\">程序员如何优雅的挣零花钱？</a></h5><h5 id=\"对程序员而言，订阅哪些信息源最能让你跟上前沿\"><a href=\"#对程序员而言，订阅哪些信息源最能让你跟上前沿\" class=\"headerlink\" title=\"对程序员而言，订阅哪些信息源最能让你跟上前沿?\"></a><a href=\"https://www.zhihu.com/question/33524185\" target=\"_blank\" rel=\"noopener\">对程序员而言，订阅哪些信息源最能让你跟上前沿?</a></h5><h5 id=\"说说自己知道的各个领域水平比较不错的论坛\"><a href=\"#说说自己知道的各个领域水平比较不错的论坛\" class=\"headerlink\" title=\"说说自己知道的各个领域水平比较不错的论坛\"></a><a href=\"https://v2ex.com/t/37663\" target=\"_blank\" rel=\"noopener\">说说自己知道的各个领域水平比较不错的论坛</a></h5><h5 id=\"java-my-life设计模式等\"><a href=\"#java-my-life设计模式等\" class=\"headerlink\" title=\"java-my-life设计模式等\"></a><a href=\"http://www.cnblogs.com/java-my-life/\" target=\"_blank\" rel=\"noopener\">java-my-life设计模式等</a></h5><h5 id=\"走向架构师之路\"><a href=\"#走向架构师之路\" class=\"headerlink\" title=\"走向架构师之路\"></a><a href=\"http://blog.csdn.net/cutesource?viewmode=contents\" target=\"_blank\" rel=\"noopener\">走向架构师之路</a></h5><h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><h4 id=\"开发快速生成代码或者其他资源\"><a href=\"#开发快速生成代码或者其他资源\" class=\"headerlink\" title=\"开发快速生成代码或者其他资源\"></a>开发快速生成代码或者其他资源</h4><h5 id=\"netcraft探测服务器\"><a href=\"#netcraft探测服务器\" class=\"headerlink\" title=\"netcraft探测服务器\"></a><a href=\"http://www.netcraft.com/\" target=\"_blank\" rel=\"noopener\">netcraft探测服务器</a></h5><h5 id=\"jsrun-在线运行JS\"><a href=\"#jsrun-在线运行JS\" class=\"headerlink\" title=\"jsrun 在线运行JS\"></a><a href=\"http://jsrun.net/\" target=\"_blank\" rel=\"noopener\">jsrun 在线运行JS</a></h5><h5 id=\"bootstrap快速生成1\"><a href=\"#bootstrap快速生成1\" class=\"headerlink\" title=\"bootstrap快速生成1\"></a><a href=\"http://www.ibootstrap.cn/\" target=\"_blank\" rel=\"noopener\">bootstrap快速生成1</a></h5><h5 id=\"bootstrap快速生成2\"><a href=\"#bootstrap快速生成2\" class=\"headerlink\" title=\"bootstrap快速生成2\"></a><a href=\"http://www.bootcss.com/p/layoutit/\" target=\"_blank\" rel=\"noopener\">bootstrap快速生成2</a></h5><h5 id=\"Codeuml代码编写UML\"><a href=\"#Codeuml代码编写UML\" class=\"headerlink\" title=\"Codeuml代码编写UML\"></a><a href=\"http://www.codeuml.com/\" target=\"_blank\" rel=\"noopener\">Codeuml代码编写UML</a></h5><h4 id=\"开发类优秀网站\"><a href=\"#开发类优秀网站\" class=\"headerlink\" title=\"开发类优秀网站\"></a>开发类优秀网站</h4><h5 id=\"segmentfault\"><a href=\"#segmentfault\" class=\"headerlink\" title=\"segmentfault\"></a><a href=\"https://segmentfault.com/\" target=\"_blank\" rel=\"noopener\">segmentfault</a></h5><h5 id=\"github里一个小朋友整理的各大公司开发部和个人的博客大合集\"><a href=\"#github里一个小朋友整理的各大公司开发部和个人的博客大合集\" class=\"headerlink\" title=\"github里一个小朋友整理的各大公司开发部和个人的博客大合集\"></a><a href=\"https://github.com/kilimchoi/engineering-blogs\" target=\"_blank\" rel=\"noopener\">github里一个小朋友整理的各大公司开发部和个人的博客大合集</a></h5><h5 id=\"邮件订阅-全栈必读：Fullweb\"><a href=\"#邮件订阅-全栈必读：Fullweb\" class=\"headerlink\" title=\"邮件订阅 全栈必读：Fullweb\"></a><a href=\"http://fullweb.io/\" target=\"_blank\" rel=\"noopener\">邮件订阅 全栈必读：Fullweb</a></h5><h5 id=\"开发者速查表\"><a href=\"#开发者速查表\" class=\"headerlink\" title=\"开发者速查表\"></a><a href=\"http://devhints.cn/\" target=\"_blank\" rel=\"noopener\">开发者速查表</a></h5><h5 id=\"信息源的三大网站\"><a href=\"#信息源的三大网站\" class=\"headerlink\" title=\"信息源的三大网站:\"></a>信息源的三大网站:</h5><p><a href=\"https://news.ycombinator.com/\" target=\"_blank\" rel=\"noopener\">Hacker News</a><br><a href=\"https://www.designernews.co/\" target=\"_blank\" rel=\"noopener\">Designer News</a><br><a href=\"https://www.reddit.com/r/programming/\" target=\"_blank\" rel=\"noopener\">Reddit 的 Programming</a></p>\n<h5 id=\"JavaRanger\"><a href=\"#JavaRanger\" class=\"headerlink\" title=\"JavaRanger\"></a><a href=\"http://www.javaranger.com/\" target=\"_blank\" rel=\"noopener\">JavaRanger</a></h5><h2 id=\"流程图-脑图\"><a href=\"#流程图-脑图\" class=\"headerlink\" title=\"流程图/脑图\"></a>流程图/脑图</h2><h5 id=\"workflowy\"><a href=\"#workflowy\" class=\"headerlink\" title=\"workflowy\"></a><a href=\"https://workflowy.com/\" target=\"_blank\" rel=\"noopener\">workflowy</a></h5><h5 id=\"百度H5\"><a href=\"#百度H5\" class=\"headerlink\" title=\"百度H5\"></a><a href=\"http://h5.baidu.com/list\" target=\"_blank\" rel=\"noopener\">百度H5</a></h5><h5 id=\"百度脑图\"><a href=\"#百度脑图\" class=\"headerlink\" title=\"百度脑图\"></a><a href=\"http://naotu.baidu.com/home\" target=\"_blank\" rel=\"noopener\">百度脑图</a></h5><h5 id=\"画图工具\"><a href=\"#画图工具\" class=\"headerlink\" title=\"画图工具\"></a><a href=\"https://www.mindmup.com\" target=\"_blank\" rel=\"noopener\">画图工具</a></h5><h5 id><a href=\"#\" class=\"headerlink\" title></a><a href></a></h5><h4 id=\"其他资源\"><a href=\"#其他资源\" class=\"headerlink\" title=\"其他资源\"></a>其他资源</h4><h5 id=\"优雅记单词\"><a href=\"#优雅记单词\" class=\"headerlink\" title=\"优雅记单词\"></a><a href=\"http://visuwords.com/\" target=\"_blank\" rel=\"noopener\">优雅记单词</a></h5><h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><h5 id=\"免费高清矢量图\"><a href=\"#免费高清矢量图\" class=\"headerlink\" title=\"免费高清矢量图\"></a><a href=\"https://pixabay.com/\" target=\"_blank\" rel=\"noopener\">免费高清矢量图</a></h5><h5 id=\"free-nature-stock-自然景观\"><a href=\"#free-nature-stock-自然景观\" class=\"headerlink\" title=\"free nature stock 自然景观\"></a><a href=\"http://freenaturestock.com/\" target=\"_blank\" rel=\"noopener\">free nature stock 自然景观</a></h5><h5 id=\"创意、新奇\"><a href=\"#创意、新奇\" class=\"headerlink\" title=\"创意、新奇\"></a><a href=\"http://www.gratisography.com/\" target=\"_blank\" rel=\"noopener\">创意、新奇</a></h5><h5 id=\"免费素材-可商用\"><a href=\"#免费素材-可商用\" class=\"headerlink\" title=\"免费素材,可商用\"></a><a href=\"http://isorepublic.com/\" target=\"_blank\" rel=\"noopener\">免费素材,可商用</a></h5><h5 id=\"visual-hunt-免费高质量\"><a href=\"#visual-hunt-免费高质量\" class=\"headerlink\" title=\"visual hunt 免费高质量\"></a><a href=\"https://visualhunt.com/\" target=\"_blank\" rel=\"noopener\">visual hunt 免费高质量</a></h5><h5 id=\"精美图片分享站-免费-可商用\"><a href=\"#精美图片分享站-免费-可商用\" class=\"headerlink\" title=\"精美图片分享站,免费,可商用\"></a><a href=\"https://stocksnap.io/\" target=\"_blank\" rel=\"noopener\">精美图片分享站,免费,可商用</a></h5><h5 id=\"无归属-免费商用\"><a href=\"#无归属-免费商用\" class=\"headerlink\" title=\"无归属,免费商用\"></a><a href=\"https://www.pexels.com/\" target=\"_blank\" rel=\"noopener\">无归属,免费商用</a></h5><h5 id=\"高分辨率-值得收藏\"><a href=\"#高分辨率-值得收藏\" class=\"headerlink\" title=\"高分辨率,值得收藏\"></a><a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">高分辨率,值得收藏</a></h5><h5 id=\"TAGUL-WORD-CLOUD-ART-字体艺术中文支持不是很友好\"><a href=\"#TAGUL-WORD-CLOUD-ART-字体艺术中文支持不是很友好\" class=\"headerlink\" title=\"TAGUL - WORD CLOUD ART 字体艺术中文支持不是很友好\"></a><a href=\"https://tagul.com/\" target=\"_blank\" rel=\"noopener\">TAGUL - WORD CLOUD ART 字体艺术中文支持不是很友好</a></h5><h5 id=\"自己画图，对称\"><a href=\"#自己画图，对称\" class=\"headerlink\" title=\"自己画图，对称\"></a><a href=\"http://weavesilk.com/\" target=\"_blank\" rel=\"noopener\">自己画图，对称</a></h5><h5 id=\"在线PS工具\"><a href=\"#在线PS工具\" class=\"headerlink\" title=\"在线PS工具\"></a><a href=\"https://www.photopea.com/\" target=\"_blank\" rel=\"noopener\">在线PS工具</a></h5><h4 id=\"JS-amp-CSS-amp-HTML\"><a href=\"#JS-amp-CSS-amp-HTML\" class=\"headerlink\" title=\"JS&amp;CSS&amp;HTML\"></a>JS&amp;CSS&amp;HTML</h4><h5 id=\"Bootstap3常用插件总结\"><a href=\"#Bootstap3常用插件总结\" class=\"headerlink\" title=\"Bootstap3常用插件总结\"></a><a href=\"http://cyeboss.iteye.com/blog/2094683\" target=\"_blank\" rel=\"noopener\">Bootstap3常用插件总结</a></h5><h5 id=\"动态JS背景\"><a href=\"#动态JS背景\" class=\"headerlink\" title=\"动态JS背景\"></a><a href=\"http://jsrun.net/pkKKp/embedded/all/light\" target=\"_blank\" rel=\"noopener\">动态JS背景</a></h5><h5 id=\"前端导航\"><a href=\"#前端导航\" class=\"headerlink\" title=\"前端导航\"></a><a href=\"http://jsdig.com/\" target=\"_blank\" rel=\"noopener\">前端导航</a></h5><h5 id=\"你的浏览器对html5的支持程度\"><a href=\"#你的浏览器对html5的支持程度\" class=\"headerlink\" title=\"你的浏览器对html5的支持程度\"></a><a href=\"http://html5test.com/\" target=\"_blank\" rel=\"noopener\">你的浏览器对html5的支持程度</a></h5><h5 id=\"显示css的各种样式五星推荐\"><a href=\"#显示css的各种样式五星推荐\" class=\"headerlink\" title=\"显示css的各种样式五星推荐\"></a><a href=\"http://cssreference.io/\" target=\"_blank\" rel=\"noopener\">显示css的各种样式</a>五星推荐</h5><h4 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h4><h4 id=\"excel\"><a href=\"#excel\" class=\"headerlink\" title=\"excel\"></a>excel</h4><h5 id=\"excelhome\"><a href=\"#excelhome\" class=\"headerlink\" title=\"excelhome\"></a><a href=\"www.excelhome.net\">excelhome</a></h5><h5 id=\"excelpx\"><a href=\"#excelpx\" class=\"headerlink\" title=\"excelpx\"></a><a href=\"www.excelpx.com\">excelpx</a></h5>"},{"title":"常见排序算法总结","date":"2016-09-29T04:51:53.000Z","description":"总结常见的排序算法，纯粹学习回顾。","_content":"\n## 排序算法\n\n> 首先推荐一个网站 [Visualgo](https://visualgo.net/) [中文版本](https://zh.visualgo.net/)这个网站上，可以动态显示排序等算法，以及表、栈、队、树、图等数据结构。这里只学习排序算法。\n\n\n![八大排序](常见排序算法总结/1342514529_5795.jpg)\n![八大排序](常见排序算法总结/20160925.gif)\n\n当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。\n\n快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；\n\n#### 插入排序(直接插入排序Insert   希尔排序Shell's 二分插入排序binary)\n\nstraightInsert逻辑：把我赋给一个临时变量，在我前面的依次和我比较，如果比我大，赋值，继续找前一个，如果比我小这个位置就是我的。\n\n希尔排序Shell:\n\n\nbinaryInsert:\n\n[InsertSort](https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/InsertSort.java)\n\n#### 选择排序 (简单选择排序SimpleSelect 堆排序Heap)\n\nSimpleSelect: 先找到最小的再和我做交换;\n\nHeap:\n[SelectSort](https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/SelectSort.java)\n#### 交换排序(冒泡Bubble 快速排序Quick)\n\nBubble: 只要小的数字就和当前的交换，小的数字往上走，\n\nQuick:\n\n\n#### 归并排序(Merge)\n\n\n\n#### 基数/桶排序(RadixSort)(bucketSort)\n\n基数: 个位 十位 百位 每循环一次都更新数据，拆分每位来排序\n\n桶：先定义小到最大的桶，记录每个桶的次数和相应的位置。根据桶信息依次取出。\n\n#### 计数排序(Count)\n\n\n[八大排序算法](http://blog.csdn.net/hguisu/article/details/7776068)\n[各种排序算法的分析及java实现](http://www.cnblogs.com/liuling/p/2013-7-24-01.html)\n[常用排序算法稳定性分析](http://www.cnblogs.com/Braveliu/archive/2013/01/15/2861201.html)\n[基于非比较的排序：计数排序（countSort），桶排序（bucketSort），基数排序（radixSort）](https://www.2cto.com/kf/201405/297908.html)\n[常见排序算法小结](http://blog.csdn.net/whuslei/article/details/6442755)\n","source":"_posts/常见排序算法总结.md","raw":"---\ntitle: 常见排序算法总结\ndate: 2016-09-29 12:51:53\ntags: 排序\ncategories: [数据结构,算法]\ndescription: \"总结常见的排序算法，纯粹学习回顾。\"\n---\n\n## 排序算法\n\n> 首先推荐一个网站 [Visualgo](https://visualgo.net/) [中文版本](https://zh.visualgo.net/)这个网站上，可以动态显示排序等算法，以及表、栈、队、树、图等数据结构。这里只学习排序算法。\n\n\n![八大排序](常见排序算法总结/1342514529_5795.jpg)\n![八大排序](常见排序算法总结/20160925.gif)\n\n当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。\n\n快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；\n\n#### 插入排序(直接插入排序Insert   希尔排序Shell's 二分插入排序binary)\n\nstraightInsert逻辑：把我赋给一个临时变量，在我前面的依次和我比较，如果比我大，赋值，继续找前一个，如果比我小这个位置就是我的。\n\n希尔排序Shell:\n\n\nbinaryInsert:\n\n[InsertSort](https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/InsertSort.java)\n\n#### 选择排序 (简单选择排序SimpleSelect 堆排序Heap)\n\nSimpleSelect: 先找到最小的再和我做交换;\n\nHeap:\n[SelectSort](https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/SelectSort.java)\n#### 交换排序(冒泡Bubble 快速排序Quick)\n\nBubble: 只要小的数字就和当前的交换，小的数字往上走，\n\nQuick:\n\n\n#### 归并排序(Merge)\n\n\n\n#### 基数/桶排序(RadixSort)(bucketSort)\n\n基数: 个位 十位 百位 每循环一次都更新数据，拆分每位来排序\n\n桶：先定义小到最大的桶，记录每个桶的次数和相应的位置。根据桶信息依次取出。\n\n#### 计数排序(Count)\n\n\n[八大排序算法](http://blog.csdn.net/hguisu/article/details/7776068)\n[各种排序算法的分析及java实现](http://www.cnblogs.com/liuling/p/2013-7-24-01.html)\n[常用排序算法稳定性分析](http://www.cnblogs.com/Braveliu/archive/2013/01/15/2861201.html)\n[基于非比较的排序：计数排序（countSort），桶排序（bucketSort），基数排序（radixSort）](https://www.2cto.com/kf/201405/297908.html)\n[常见排序算法小结](http://blog.csdn.net/whuslei/article/details/6442755)\n","slug":"常见排序算法总结","published":1,"updated":"2017-09-19T07:10:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77y002augv5qv87kxpr","content":"<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><blockquote>\n<p>首先推荐一个网站 <a href=\"https://visualgo.net/\" target=\"_blank\" rel=\"noopener\">Visualgo</a> <a href=\"https://zh.visualgo.net/\" target=\"_blank\" rel=\"noopener\">中文版本</a>这个网站上，可以动态显示排序等算法，以及表、栈、队、树、图等数据结构。这里只学习排序算法。</p>\n</blockquote>\n<p><img src=\"/.io//1342514529_5795.jpg\" alt=\"八大排序\"><br><img src=\"/.io//20160925.gif\" alt=\"八大排序\"></p>\n<p>当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。</p>\n<p>快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</p>\n<h4 id=\"插入排序-直接插入排序Insert-希尔排序Shell’s-二分插入排序binary\"><a href=\"#插入排序-直接插入排序Insert-希尔排序Shell’s-二分插入排序binary\" class=\"headerlink\" title=\"插入排序(直接插入排序Insert   希尔排序Shell’s 二分插入排序binary)\"></a>插入排序(直接插入排序Insert   希尔排序Shell’s 二分插入排序binary)</h4><p>straightInsert逻辑：把我赋给一个临时变量，在我前面的依次和我比较，如果比我大，赋值，继续找前一个，如果比我小这个位置就是我的。</p>\n<p>希尔排序Shell:</p>\n<p>binaryInsert:</p>\n<p><a href=\"https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/InsertSort.java\" target=\"_blank\" rel=\"noopener\">InsertSort</a></p>\n<h4 id=\"选择排序-简单选择排序SimpleSelect-堆排序Heap\"><a href=\"#选择排序-简单选择排序SimpleSelect-堆排序Heap\" class=\"headerlink\" title=\"选择排序 (简单选择排序SimpleSelect 堆排序Heap)\"></a>选择排序 (简单选择排序SimpleSelect 堆排序Heap)</h4><p>SimpleSelect: 先找到最小的再和我做交换;</p>\n<p>Heap:<br><a href=\"https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/SelectSort.java\" target=\"_blank\" rel=\"noopener\">SelectSort</a></p>\n<h4 id=\"交换排序-冒泡Bubble-快速排序Quick\"><a href=\"#交换排序-冒泡Bubble-快速排序Quick\" class=\"headerlink\" title=\"交换排序(冒泡Bubble 快速排序Quick)\"></a>交换排序(冒泡Bubble 快速排序Quick)</h4><p>Bubble: 只要小的数字就和当前的交换，小的数字往上走，</p>\n<p>Quick:</p>\n<h4 id=\"归并排序-Merge\"><a href=\"#归并排序-Merge\" class=\"headerlink\" title=\"归并排序(Merge)\"></a>归并排序(Merge)</h4><h4 id=\"基数-桶排序-RadixSort-bucketSort\"><a href=\"#基数-桶排序-RadixSort-bucketSort\" class=\"headerlink\" title=\"基数/桶排序(RadixSort)(bucketSort)\"></a>基数/桶排序(RadixSort)(bucketSort)</h4><p>基数: 个位 十位 百位 每循环一次都更新数据，拆分每位来排序</p>\n<p>桶：先定义小到最大的桶，记录每个桶的次数和相应的位置。根据桶信息依次取出。</p>\n<h4 id=\"计数排序-Count\"><a href=\"#计数排序-Count\" class=\"headerlink\" title=\"计数排序(Count)\"></a>计数排序(Count)</h4><p><a href=\"http://blog.csdn.net/hguisu/article/details/7776068\" target=\"_blank\" rel=\"noopener\">八大排序算法</a><br><a href=\"http://www.cnblogs.com/liuling/p/2013-7-24-01.html\" target=\"_blank\" rel=\"noopener\">各种排序算法的分析及java实现</a><br><a href=\"http://www.cnblogs.com/Braveliu/archive/2013/01/15/2861201.html\" target=\"_blank\" rel=\"noopener\">常用排序算法稳定性分析</a><br><a href=\"https://www.2cto.com/kf/201405/297908.html\" target=\"_blank\" rel=\"noopener\">基于非比较的排序：计数排序（countSort），桶排序（bucketSort），基数排序（radixSort）</a><br><a href=\"http://blog.csdn.net/whuslei/article/details/6442755\" target=\"_blank\" rel=\"noopener\">常见排序算法小结</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><blockquote>\n<p>首先推荐一个网站 <a href=\"https://visualgo.net/\" target=\"_blank\" rel=\"noopener\">Visualgo</a> <a href=\"https://zh.visualgo.net/\" target=\"_blank\" rel=\"noopener\">中文版本</a>这个网站上，可以动态显示排序等算法，以及表、栈、队、树、图等数据结构。这里只学习排序算法。</p>\n</blockquote>\n<p><img src=\"/.io//1342514529_5795.jpg\" alt=\"八大排序\"><br><img src=\"/.io//20160925.gif\" alt=\"八大排序\"></p>\n<p>当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。</p>\n<p>快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</p>\n<h4 id=\"插入排序-直接插入排序Insert-希尔排序Shell’s-二分插入排序binary\"><a href=\"#插入排序-直接插入排序Insert-希尔排序Shell’s-二分插入排序binary\" class=\"headerlink\" title=\"插入排序(直接插入排序Insert   希尔排序Shell’s 二分插入排序binary)\"></a>插入排序(直接插入排序Insert   希尔排序Shell’s 二分插入排序binary)</h4><p>straightInsert逻辑：把我赋给一个临时变量，在我前面的依次和我比较，如果比我大，赋值，继续找前一个，如果比我小这个位置就是我的。</p>\n<p>希尔排序Shell:</p>\n<p>binaryInsert:</p>\n<p><a href=\"https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/InsertSort.java\" target=\"_blank\" rel=\"noopener\">InsertSort</a></p>\n<h4 id=\"选择排序-简单选择排序SimpleSelect-堆排序Heap\"><a href=\"#选择排序-简单选择排序SimpleSelect-堆排序Heap\" class=\"headerlink\" title=\"选择排序 (简单选择排序SimpleSelect 堆排序Heap)\"></a>选择排序 (简单选择排序SimpleSelect 堆排序Heap)</h4><p>SimpleSelect: 先找到最小的再和我做交换;</p>\n<p>Heap:<br><a href=\"https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/SelectSort.java\" target=\"_blank\" rel=\"noopener\">SelectSort</a></p>\n<h4 id=\"交换排序-冒泡Bubble-快速排序Quick\"><a href=\"#交换排序-冒泡Bubble-快速排序Quick\" class=\"headerlink\" title=\"交换排序(冒泡Bubble 快速排序Quick)\"></a>交换排序(冒泡Bubble 快速排序Quick)</h4><p>Bubble: 只要小的数字就和当前的交换，小的数字往上走，</p>\n<p>Quick:</p>\n<h4 id=\"归并排序-Merge\"><a href=\"#归并排序-Merge\" class=\"headerlink\" title=\"归并排序(Merge)\"></a>归并排序(Merge)</h4><h4 id=\"基数-桶排序-RadixSort-bucketSort\"><a href=\"#基数-桶排序-RadixSort-bucketSort\" class=\"headerlink\" title=\"基数/桶排序(RadixSort)(bucketSort)\"></a>基数/桶排序(RadixSort)(bucketSort)</h4><p>基数: 个位 十位 百位 每循环一次都更新数据，拆分每位来排序</p>\n<p>桶：先定义小到最大的桶，记录每个桶的次数和相应的位置。根据桶信息依次取出。</p>\n<h4 id=\"计数排序-Count\"><a href=\"#计数排序-Count\" class=\"headerlink\" title=\"计数排序(Count)\"></a>计数排序(Count)</h4><p><a href=\"http://blog.csdn.net/hguisu/article/details/7776068\" target=\"_blank\" rel=\"noopener\">八大排序算法</a><br><a href=\"http://www.cnblogs.com/liuling/p/2013-7-24-01.html\" target=\"_blank\" rel=\"noopener\">各种排序算法的分析及java实现</a><br><a href=\"http://www.cnblogs.com/Braveliu/archive/2013/01/15/2861201.html\" target=\"_blank\" rel=\"noopener\">常用排序算法稳定性分析</a><br><a href=\"https://www.2cto.com/kf/201405/297908.html\" target=\"_blank\" rel=\"noopener\">基于非比较的排序：计数排序（countSort），桶排序（bucketSort），基数排序（radixSort）</a><br><a href=\"http://blog.csdn.net/whuslei/article/details/6442755\" target=\"_blank\" rel=\"noopener\">常见排序算法小结</a></p>\n"},{"title":"应用部署之nginx负载","date":"2017-09-02T02:46:10.000Z","description":"通过nginx部署两个tomcat并实现session共享","_content":"\n## 端口占用\n\n#### 1、在windows下如何查看80端口占用情况?是被哪个进程占用?如何终止等.\n        这里主要是用到windows下的DOS工具,点击\"开始\"--\"运行\",输入\"cmd\"后点击确定按钮,进入DOS窗口,接下来分别运行以下命令:\n        >netstat -aon | findstr \"80\"\n                Proto  Local Address          Foreign Address        State            PID\n                ====  ============      ==============  ==========  ======\n                TCP    0.0.0.0:80                    0.0.0.0:0                LISTENING      1688\n可以看出80端口被进程号为1688的程序占用.\n        >tasklist | findstr \"1688\"\n图像名                                                PID            会话名                    会话#       内存使用\n               ========================= ====== ================ ======== ============\n               inetinfo.exe                                        1688           Console                      0              2,800 K\n很明显,是inetinfo占用了80端口;inetinfo.exe主要用于支持微软Windows IIS网络服务的除错,这个程序对你系统的正常运行是非常重要的.\n        当然,并不是只有inetinfo.exe进程会占用80端口,这只是我机器上的情况.如果你并不了解此进程是干什么用的,千万不要盲目地将其kill掉,最好先百度或Google搜索一下;当然如果你很了解它,并确定可以终止,那么继续下面的命令.\n        >taskkill /pid 1688 /F\n成功: 已终止 PID 为 1688 的进程。\n如果你很熟悉此进程,并确定可以终止,那么就直接使用上面的命令把PID为1688的进程终止.(这一步同样可以在任务管理器中执行,inetinfo.exe就是任务管理器中的映像名称,选中它,点击\"结束进程\"即可)\n        >tasklist | findstr \"1688\"\n再次确认是否成功终止,如果成功终止此次执行命令后应返回空.\n\n#### 2、linux下如何查看80端口占用情况?是被哪个进程占用?如何终止等\n\n查询端口是否被占用，被哪个进程占用有两种方式：1、netstat -anl | grep \"80\" ；2、lsof -i:80\n\n终止进程的方式：kill pid\n\n## 启动停止nginx\n\n#### 1、启动：\n\nC:\\server\\nginx-1.0.2>start nginx\n\n或\n\nC:\\server\\nginx-1.0.2>nginx.exe\n\n注：建议使用第一种，第二种会使你的cmd窗口一直处于执行中，不能进行其他命令操作。\n\n#### 2、停止：\n\nC:\\server\\nginx-1.0.2>nginx.exe -s stop\n\n或\n\nC:\\server\\nginx-1.0.2>nginx.exe -s quit\n\n\n注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。\n\n#### 3、重新载入Nginx：\n\nC:\\server\\nginx-1.0.2>nginx.exe -s reload\n\n当配置信息修改，需要重新载入这些配置时使用此命令。\n\n#### 4、重新打开日志文件：\n\nC:\\server\\nginx-1.0.2>nginx.exe -s reopen\n\n#### 5、查看Nginx版本：\n\nC:\\server\\nginx-1.0.2>nginx -v\n\n\nnginx -c nginx.conf 加载配置启动\nnginx -t nginx.conf 测试配置文件是否ok\nnginx -s reload 重新加载配置\nnginx -s stop\nnginx -s quit\n\n端口号大于servername\n\n\n## 配置nginx.conf\n\n```\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    # gzip 压缩\n    gzip  on; #Gzip compression\n\n    #Server cluster \n    upstream  netitcast.com {  #Server cluster   \n        server    127.0.0.1:8081  weight=1; #Weight is the meaning of weight, the greater the weight, the greater the probability of distribution. \n        server    127.0.0.1:8082  weight=2;  \n    }\n    server {\n        listen       80;\n        server_name  127.0.0.1;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log;\n        # 日志按天生成\n    \tif ($time_iso8601 ~ '(\\d{4}-\\d{2}-\\d{2})') {\n            set $tttt $1;\n        }\n        access_log  logs/access-$tttt.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}\n        location / {  \n            proxy_pass http://netitcast.com;  #proxy name is upstream name\n            proxy_redirect default;  \n            expires      3d;   #cache three days\n        }  \n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8081;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n\n```","source":"_posts/应用部署之nginx负载.md","raw":"---\ntitle: 应用部署之nginx负载\ndate: 2017-09-02 10:46:10\ntags: [nginx,tomcat]\ncategories: deploy\ndescription: \"通过nginx部署两个tomcat并实现session共享\"\n---\n\n## 端口占用\n\n#### 1、在windows下如何查看80端口占用情况?是被哪个进程占用?如何终止等.\n        这里主要是用到windows下的DOS工具,点击\"开始\"--\"运行\",输入\"cmd\"后点击确定按钮,进入DOS窗口,接下来分别运行以下命令:\n        >netstat -aon | findstr \"80\"\n                Proto  Local Address          Foreign Address        State            PID\n                ====  ============      ==============  ==========  ======\n                TCP    0.0.0.0:80                    0.0.0.0:0                LISTENING      1688\n可以看出80端口被进程号为1688的程序占用.\n        >tasklist | findstr \"1688\"\n图像名                                                PID            会话名                    会话#       内存使用\n               ========================= ====== ================ ======== ============\n               inetinfo.exe                                        1688           Console                      0              2,800 K\n很明显,是inetinfo占用了80端口;inetinfo.exe主要用于支持微软Windows IIS网络服务的除错,这个程序对你系统的正常运行是非常重要的.\n        当然,并不是只有inetinfo.exe进程会占用80端口,这只是我机器上的情况.如果你并不了解此进程是干什么用的,千万不要盲目地将其kill掉,最好先百度或Google搜索一下;当然如果你很了解它,并确定可以终止,那么继续下面的命令.\n        >taskkill /pid 1688 /F\n成功: 已终止 PID 为 1688 的进程。\n如果你很熟悉此进程,并确定可以终止,那么就直接使用上面的命令把PID为1688的进程终止.(这一步同样可以在任务管理器中执行,inetinfo.exe就是任务管理器中的映像名称,选中它,点击\"结束进程\"即可)\n        >tasklist | findstr \"1688\"\n再次确认是否成功终止,如果成功终止此次执行命令后应返回空.\n\n#### 2、linux下如何查看80端口占用情况?是被哪个进程占用?如何终止等\n\n查询端口是否被占用，被哪个进程占用有两种方式：1、netstat -anl | grep \"80\" ；2、lsof -i:80\n\n终止进程的方式：kill pid\n\n## 启动停止nginx\n\n#### 1、启动：\n\nC:\\server\\nginx-1.0.2>start nginx\n\n或\n\nC:\\server\\nginx-1.0.2>nginx.exe\n\n注：建议使用第一种，第二种会使你的cmd窗口一直处于执行中，不能进行其他命令操作。\n\n#### 2、停止：\n\nC:\\server\\nginx-1.0.2>nginx.exe -s stop\n\n或\n\nC:\\server\\nginx-1.0.2>nginx.exe -s quit\n\n\n注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。\n\n#### 3、重新载入Nginx：\n\nC:\\server\\nginx-1.0.2>nginx.exe -s reload\n\n当配置信息修改，需要重新载入这些配置时使用此命令。\n\n#### 4、重新打开日志文件：\n\nC:\\server\\nginx-1.0.2>nginx.exe -s reopen\n\n#### 5、查看Nginx版本：\n\nC:\\server\\nginx-1.0.2>nginx -v\n\n\nnginx -c nginx.conf 加载配置启动\nnginx -t nginx.conf 测试配置文件是否ok\nnginx -s reload 重新加载配置\nnginx -s stop\nnginx -s quit\n\n端口号大于servername\n\n\n## 配置nginx.conf\n\n```\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    # gzip 压缩\n    gzip  on; #Gzip compression\n\n    #Server cluster \n    upstream  netitcast.com {  #Server cluster   \n        server    127.0.0.1:8081  weight=1; #Weight is the meaning of weight, the greater the weight, the greater the probability of distribution. \n        server    127.0.0.1:8082  weight=2;  \n    }\n    server {\n        listen       80;\n        server_name  127.0.0.1;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log;\n        # 日志按天生成\n    \tif ($time_iso8601 ~ '(\\d{4}-\\d{2}-\\d{2})') {\n            set $tttt $1;\n        }\n        access_log  logs/access-$tttt.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}\n        location / {  \n            proxy_pass http://netitcast.com;  #proxy name is upstream name\n            proxy_redirect default;  \n            expires      3d;   #cache three days\n        }  \n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8081;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n\n```","slug":"应用部署之nginx负载","published":1,"updated":"2019-04-01T05:54:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz77z002eugv5s8k3icgh","content":"<h2 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h2><h4 id=\"1、在windows下如何查看80端口占用情况-是被哪个进程占用-如何终止等\"><a href=\"#1、在windows下如何查看80端口占用情况-是被哪个进程占用-如何终止等\" class=\"headerlink\" title=\"1、在windows下如何查看80端口占用情况?是被哪个进程占用?如何终止等.\"></a>1、在windows下如何查看80端口占用情况?是被哪个进程占用?如何终止等.</h4><pre><code>这里主要是用到windows下的DOS工具,点击&quot;开始&quot;--&quot;运行&quot;,输入&quot;cmd&quot;后点击确定按钮,进入DOS窗口,接下来分别运行以下命令:\n&gt;netstat -aon | findstr &quot;80&quot;\n        Proto  Local Address          Foreign Address        State            PID\n        ====  ============      ==============  ==========  ======\n        TCP    0.0.0.0:80                    0.0.0.0:0                LISTENING      1688\n</code></pre><p>可以看出80端口被进程号为1688的程序占用.<br>        &gt;tasklist | findstr “1688”<br>图像名                                                PID            会话名                    会话#       内存使用<br>               ========================= ====== ================ ======== ============<br>               inetinfo.exe                                        1688           Console                      0              2,800 K<br>很明显,是inetinfo占用了80端口;inetinfo.exe主要用于支持微软Windows IIS网络服务的除错,这个程序对你系统的正常运行是非常重要的.<br>        当然,并不是只有inetinfo.exe进程会占用80端口,这只是我机器上的情况.如果你并不了解此进程是干什么用的,千万不要盲目地将其kill掉,最好先百度或Google搜索一下;当然如果你很了解它,并确定可以终止,那么继续下面的命令.<br>        &gt;taskkill /pid 1688 /F<br>成功: 已终止 PID 为 1688 的进程。<br>如果你很熟悉此进程,并确定可以终止,那么就直接使用上面的命令把PID为1688的进程终止.(这一步同样可以在任务管理器中执行,inetinfo.exe就是任务管理器中的映像名称,选中它,点击”结束进程”即可)<br>        &gt;tasklist | findstr “1688”<br>再次确认是否成功终止,如果成功终止此次执行命令后应返回空.</p>\n<h4 id=\"2、linux下如何查看80端口占用情况-是被哪个进程占用-如何终止等\"><a href=\"#2、linux下如何查看80端口占用情况-是被哪个进程占用-如何终止等\" class=\"headerlink\" title=\"2、linux下如何查看80端口占用情况?是被哪个进程占用?如何终止等\"></a>2、linux下如何查看80端口占用情况?是被哪个进程占用?如何终止等</h4><p>查询端口是否被占用，被哪个进程占用有两种方式：1、netstat -anl | grep “80” ；2、lsof -i:80</p>\n<p>终止进程的方式：kill pid</p>\n<h2 id=\"启动停止nginx\"><a href=\"#启动停止nginx\" class=\"headerlink\" title=\"启动停止nginx\"></a>启动停止nginx</h2><h4 id=\"1、启动：\"><a href=\"#1、启动：\" class=\"headerlink\" title=\"1、启动：\"></a>1、启动：</h4><p>C:\\server\\nginx-1.0.2&gt;start nginx</p>\n<p>或</p>\n<p>C:\\server\\nginx-1.0.2&gt;nginx.exe</p>\n<p>注：建议使用第一种，第二种会使你的cmd窗口一直处于执行中，不能进行其他命令操作。</p>\n<h4 id=\"2、停止：\"><a href=\"#2、停止：\" class=\"headerlink\" title=\"2、停止：\"></a>2、停止：</h4><p>C:\\server\\nginx-1.0.2&gt;nginx.exe -s stop</p>\n<p>或</p>\n<p>C:\\server\\nginx-1.0.2&gt;nginx.exe -s quit</p>\n<p>注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。</p>\n<h4 id=\"3、重新载入Nginx：\"><a href=\"#3、重新载入Nginx：\" class=\"headerlink\" title=\"3、重新载入Nginx：\"></a>3、重新载入Nginx：</h4><p>C:\\server\\nginx-1.0.2&gt;nginx.exe -s reload</p>\n<p>当配置信息修改，需要重新载入这些配置时使用此命令。</p>\n<h4 id=\"4、重新打开日志文件：\"><a href=\"#4、重新打开日志文件：\" class=\"headerlink\" title=\"4、重新打开日志文件：\"></a>4、重新打开日志文件：</h4><p>C:\\server\\nginx-1.0.2&gt;nginx.exe -s reopen</p>\n<h4 id=\"5、查看Nginx版本：\"><a href=\"#5、查看Nginx版本：\" class=\"headerlink\" title=\"5、查看Nginx版本：\"></a>5、查看Nginx版本：</h4><p>C:\\server\\nginx-1.0.2&gt;nginx -v</p>\n<p>nginx -c nginx.conf 加载配置启动<br>nginx -t nginx.conf 测试配置文件是否ok<br>nginx -s reload 重新加载配置<br>nginx -s stop<br>nginx -s quit</p>\n<p>端口号大于servername</p>\n<h2 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    # gzip 压缩</span><br><span class=\"line\">    gzip  on; #Gzip compression</span><br><span class=\"line\"></span><br><span class=\"line\">    #Server cluster </span><br><span class=\"line\">    upstream  netitcast.com &#123;  #Server cluster   </span><br><span class=\"line\">        server    127.0.0.1:8081  weight=1; #Weight is the meaning of weight, the greater the weight, the greater the probability of distribution. </span><br><span class=\"line\">        server    127.0.0.1:8082  weight=2;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  127.0.0.1;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log;</span><br><span class=\"line\">        # 日志按天生成</span><br><span class=\"line\">    \tif ($time_iso8601 ~ &apos;(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;)&apos;) &#123;</span><br><span class=\"line\">            set $tttt $1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        access_log  logs/access-$tttt.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #location / &#123;</span><br><span class=\"line\">        #    root   html;</span><br><span class=\"line\">        #    index  index.html index.htm;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        location / &#123;  </span><br><span class=\"line\">            proxy_pass http://netitcast.com;  #proxy name is upstream name</span><br><span class=\"line\">            proxy_redirect default;  </span><br><span class=\"line\">            expires      3d;   #cache three days</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8081;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h2><h4 id=\"1、在windows下如何查看80端口占用情况-是被哪个进程占用-如何终止等\"><a href=\"#1、在windows下如何查看80端口占用情况-是被哪个进程占用-如何终止等\" class=\"headerlink\" title=\"1、在windows下如何查看80端口占用情况?是被哪个进程占用?如何终止等.\"></a>1、在windows下如何查看80端口占用情况?是被哪个进程占用?如何终止等.</h4><pre><code>这里主要是用到windows下的DOS工具,点击&quot;开始&quot;--&quot;运行&quot;,输入&quot;cmd&quot;后点击确定按钮,进入DOS窗口,接下来分别运行以下命令:\n&gt;netstat -aon | findstr &quot;80&quot;\n        Proto  Local Address          Foreign Address        State            PID\n        ====  ============      ==============  ==========  ======\n        TCP    0.0.0.0:80                    0.0.0.0:0                LISTENING      1688\n</code></pre><p>可以看出80端口被进程号为1688的程序占用.<br>        &gt;tasklist | findstr “1688”<br>图像名                                                PID            会话名                    会话#       内存使用<br>               ========================= ====== ================ ======== ============<br>               inetinfo.exe                                        1688           Console                      0              2,800 K<br>很明显,是inetinfo占用了80端口;inetinfo.exe主要用于支持微软Windows IIS网络服务的除错,这个程序对你系统的正常运行是非常重要的.<br>        当然,并不是只有inetinfo.exe进程会占用80端口,这只是我机器上的情况.如果你并不了解此进程是干什么用的,千万不要盲目地将其kill掉,最好先百度或Google搜索一下;当然如果你很了解它,并确定可以终止,那么继续下面的命令.<br>        &gt;taskkill /pid 1688 /F<br>成功: 已终止 PID 为 1688 的进程。<br>如果你很熟悉此进程,并确定可以终止,那么就直接使用上面的命令把PID为1688的进程终止.(这一步同样可以在任务管理器中执行,inetinfo.exe就是任务管理器中的映像名称,选中它,点击”结束进程”即可)<br>        &gt;tasklist | findstr “1688”<br>再次确认是否成功终止,如果成功终止此次执行命令后应返回空.</p>\n<h4 id=\"2、linux下如何查看80端口占用情况-是被哪个进程占用-如何终止等\"><a href=\"#2、linux下如何查看80端口占用情况-是被哪个进程占用-如何终止等\" class=\"headerlink\" title=\"2、linux下如何查看80端口占用情况?是被哪个进程占用?如何终止等\"></a>2、linux下如何查看80端口占用情况?是被哪个进程占用?如何终止等</h4><p>查询端口是否被占用，被哪个进程占用有两种方式：1、netstat -anl | grep “80” ；2、lsof -i:80</p>\n<p>终止进程的方式：kill pid</p>\n<h2 id=\"启动停止nginx\"><a href=\"#启动停止nginx\" class=\"headerlink\" title=\"启动停止nginx\"></a>启动停止nginx</h2><h4 id=\"1、启动：\"><a href=\"#1、启动：\" class=\"headerlink\" title=\"1、启动：\"></a>1、启动：</h4><p>C:\\server\\nginx-1.0.2&gt;start nginx</p>\n<p>或</p>\n<p>C:\\server\\nginx-1.0.2&gt;nginx.exe</p>\n<p>注：建议使用第一种，第二种会使你的cmd窗口一直处于执行中，不能进行其他命令操作。</p>\n<h4 id=\"2、停止：\"><a href=\"#2、停止：\" class=\"headerlink\" title=\"2、停止：\"></a>2、停止：</h4><p>C:\\server\\nginx-1.0.2&gt;nginx.exe -s stop</p>\n<p>或</p>\n<p>C:\\server\\nginx-1.0.2&gt;nginx.exe -s quit</p>\n<p>注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。</p>\n<h4 id=\"3、重新载入Nginx：\"><a href=\"#3、重新载入Nginx：\" class=\"headerlink\" title=\"3、重新载入Nginx：\"></a>3、重新载入Nginx：</h4><p>C:\\server\\nginx-1.0.2&gt;nginx.exe -s reload</p>\n<p>当配置信息修改，需要重新载入这些配置时使用此命令。</p>\n<h4 id=\"4、重新打开日志文件：\"><a href=\"#4、重新打开日志文件：\" class=\"headerlink\" title=\"4、重新打开日志文件：\"></a>4、重新打开日志文件：</h4><p>C:\\server\\nginx-1.0.2&gt;nginx.exe -s reopen</p>\n<h4 id=\"5、查看Nginx版本：\"><a href=\"#5、查看Nginx版本：\" class=\"headerlink\" title=\"5、查看Nginx版本：\"></a>5、查看Nginx版本：</h4><p>C:\\server\\nginx-1.0.2&gt;nginx -v</p>\n<p>nginx -c nginx.conf 加载配置启动<br>nginx -t nginx.conf 测试配置文件是否ok<br>nginx -s reload 重新加载配置<br>nginx -s stop<br>nginx -s quit</p>\n<p>端口号大于servername</p>\n<h2 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    # gzip 压缩</span><br><span class=\"line\">    gzip  on; #Gzip compression</span><br><span class=\"line\"></span><br><span class=\"line\">    #Server cluster </span><br><span class=\"line\">    upstream  netitcast.com &#123;  #Server cluster   </span><br><span class=\"line\">        server    127.0.0.1:8081  weight=1; #Weight is the meaning of weight, the greater the weight, the greater the probability of distribution. </span><br><span class=\"line\">        server    127.0.0.1:8082  weight=2;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  127.0.0.1;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log;</span><br><span class=\"line\">        # 日志按天生成</span><br><span class=\"line\">    \tif ($time_iso8601 ~ &apos;(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;)&apos;) &#123;</span><br><span class=\"line\">            set $tttt $1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        access_log  logs/access-$tttt.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #location / &#123;</span><br><span class=\"line\">        #    root   html;</span><br><span class=\"line\">        #    index  index.html index.htm;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        location / &#123;  </span><br><span class=\"line\">            proxy_pass http://netitcast.com;  #proxy name is upstream name</span><br><span class=\"line\">            proxy_redirect default;  </span><br><span class=\"line\">            expires      3d;   #cache three days</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8081;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"性能优化之redis储存计算值","date":"2019-02-15T20:17:43.000Z","description":"redis存储值解决性能问题","_content":"\n## 问题\n\n两张表，一个主表，一个树形结构表，\n\n每一条树形结构数据都有一个状态，要统计出所有叶子节点的状态，展示在主表的列上，前期使用了oracle的`start connect`统计根节点，在前期主表中的数据量很小的时候，列表价在正常，后期数据量增大，列表响应速度异常。后经过分析，得出每一条根节点循环的时候需要600ms左右，然后数据增大直接是主表的600ms*n。\n\n树形结构超过三级，前两级结构超过50条记录，\n\n## 优化路思路：\n\nredis优化查询结果，因为是计算结果，这种数据，在数据库上执行第一次,随后再次查询列表的时候从缓存中获取，减少计算次数。\n\n## 解决方法\n\n#### 查询\n\n查询的时候先从redis中查询，如果有直接返回；如果没有，再查数据库，\n\n\n```\n//查询状态,有num直接返回:\n\nif(Redis.isCached(key, FORP.SPRING_CONTEXT.getBean(\"applicationPool\", JedisPool.class))){\n\treturn Integer.parseInt(Redis.getString(key, FORP.SPRING_CONTEXT.getBean(\"applicationPool\", JedisPool.class)));\n}\n\n//查询出的结果\nString sql =  \" select count(*) as num \"\n\t\t\t+ \" from pre_dutysubitem t1 ,pre_dutyitem t2 \"\n\t\t\t+ \" where t2.fk_dutyid = ?  \"\n\t\t\t+ \" and (select  count(*) from pre_dutysubitem t3 \"\n\t\t\t+ \" start with t3.id = t1.id \"\n\t\t\t+ \" connect by prior t3.id =t3.fk_parentid ) = 1 \"\n\t\t\t+ \" and t2.id=t1.fk_dutyitemid and t1.currstatus is not null \";\nSqlRowSet rs = null;\n\n//如果currStatus没值查统计全部子项数量，否则按状态统计\nif(StringUtils.isNotBlank(currStatus)){\n\tsql+=\" and t1.currstatus = ?  \";\n\trs = jdbc.queryForRowSet(sql, dutyId, currStatus);\n}else{\n\trs = jdbc.queryForRowSet(sql, dutyId);\n}\nint num = 0;\nwhile(rs.next()){\n\tnum =rs.getInt(\"num\");\n}\n//缓存查询结果\nRedis.cacheString(key, String.valueOf(num), FORP.SPRING_CONTEXT.getBean(\"applicationPool\", JedisPool.class));\n\nreturn num;\n```\n\n#### 修改状态\n\n修改状态的时候，先删除redis缓存，再更改数据库状态，可能会出现刚删除，数据库还没来得及更改，又有用户查询，导致redis缓存脏数据。\n\n```\n//更新数据状态\n//删除缓存状态：\n\nRedis.delete(key, FORP.SPRING_CONTEXT.getBean(\"applicationPool\", JedisPool.class));\n```\n","source":"_posts/性能优化之redis储存计算值.md","raw":"---\ntitle: 性能优化之redis储存计算值\ndate: 2019-02-16 04:17:43\ntags: redis\ncategories: 性能优化\ndescription: 'redis存储值解决性能问题'\n---\n\n## 问题\n\n两张表，一个主表，一个树形结构表，\n\n每一条树形结构数据都有一个状态，要统计出所有叶子节点的状态，展示在主表的列上，前期使用了oracle的`start connect`统计根节点，在前期主表中的数据量很小的时候，列表价在正常，后期数据量增大，列表响应速度异常。后经过分析，得出每一条根节点循环的时候需要600ms左右，然后数据增大直接是主表的600ms*n。\n\n树形结构超过三级，前两级结构超过50条记录，\n\n## 优化路思路：\n\nredis优化查询结果，因为是计算结果，这种数据，在数据库上执行第一次,随后再次查询列表的时候从缓存中获取，减少计算次数。\n\n## 解决方法\n\n#### 查询\n\n查询的时候先从redis中查询，如果有直接返回；如果没有，再查数据库，\n\n\n```\n//查询状态,有num直接返回:\n\nif(Redis.isCached(key, FORP.SPRING_CONTEXT.getBean(\"applicationPool\", JedisPool.class))){\n\treturn Integer.parseInt(Redis.getString(key, FORP.SPRING_CONTEXT.getBean(\"applicationPool\", JedisPool.class)));\n}\n\n//查询出的结果\nString sql =  \" select count(*) as num \"\n\t\t\t+ \" from pre_dutysubitem t1 ,pre_dutyitem t2 \"\n\t\t\t+ \" where t2.fk_dutyid = ?  \"\n\t\t\t+ \" and (select  count(*) from pre_dutysubitem t3 \"\n\t\t\t+ \" start with t3.id = t1.id \"\n\t\t\t+ \" connect by prior t3.id =t3.fk_parentid ) = 1 \"\n\t\t\t+ \" and t2.id=t1.fk_dutyitemid and t1.currstatus is not null \";\nSqlRowSet rs = null;\n\n//如果currStatus没值查统计全部子项数量，否则按状态统计\nif(StringUtils.isNotBlank(currStatus)){\n\tsql+=\" and t1.currstatus = ?  \";\n\trs = jdbc.queryForRowSet(sql, dutyId, currStatus);\n}else{\n\trs = jdbc.queryForRowSet(sql, dutyId);\n}\nint num = 0;\nwhile(rs.next()){\n\tnum =rs.getInt(\"num\");\n}\n//缓存查询结果\nRedis.cacheString(key, String.valueOf(num), FORP.SPRING_CONTEXT.getBean(\"applicationPool\", JedisPool.class));\n\nreturn num;\n```\n\n#### 修改状态\n\n修改状态的时候，先删除redis缓存，再更改数据库状态，可能会出现刚删除，数据库还没来得及更改，又有用户查询，导致redis缓存脏数据。\n\n```\n//更新数据状态\n//删除缓存状态：\n\nRedis.delete(key, FORP.SPRING_CONTEXT.getBean(\"applicationPool\", JedisPool.class));\n```\n","slug":"性能优化之redis储存计算值","published":1,"updated":"2019-02-16T05:01:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz780002fugv58a86z3qc","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>两张表，一个主表，一个树形结构表，</p>\n<p>每一条树形结构数据都有一个状态，要统计出所有叶子节点的状态，展示在主表的列上，前期使用了oracle的<code>start connect</code>统计根节点，在前期主表中的数据量很小的时候，列表价在正常，后期数据量增大，列表响应速度异常。后经过分析，得出每一条根节点循环的时候需要600ms左右，然后数据增大直接是主表的600ms*n。</p>\n<p>树形结构超过三级，前两级结构超过50条记录，</p>\n<h2 id=\"优化路思路：\"><a href=\"#优化路思路：\" class=\"headerlink\" title=\"优化路思路：\"></a>优化路思路：</h2><p>redis优化查询结果，因为是计算结果，这种数据，在数据库上执行第一次,随后再次查询列表的时候从缓存中获取，减少计算次数。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>查询的时候先从redis中查询，如果有直接返回；如果没有，再查数据库，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查询状态,有num直接返回:</span><br><span class=\"line\"></span><br><span class=\"line\">if(Redis.isCached(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class)))&#123;</span><br><span class=\"line\">\treturn Integer.parseInt(Redis.getString(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//查询出的结果</span><br><span class=\"line\">String sql =  &quot; select count(*) as num &quot;</span><br><span class=\"line\">\t\t\t+ &quot; from pre_dutysubitem t1 ,pre_dutyitem t2 &quot;</span><br><span class=\"line\">\t\t\t+ &quot; where t2.fk_dutyid = ?  &quot;</span><br><span class=\"line\">\t\t\t+ &quot; and (select  count(*) from pre_dutysubitem t3 &quot;</span><br><span class=\"line\">\t\t\t+ &quot; start with t3.id = t1.id &quot;</span><br><span class=\"line\">\t\t\t+ &quot; connect by prior t3.id =t3.fk_parentid ) = 1 &quot;</span><br><span class=\"line\">\t\t\t+ &quot; and t2.id=t1.fk_dutyitemid and t1.currstatus is not null &quot;;</span><br><span class=\"line\">SqlRowSet rs = null;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果currStatus没值查统计全部子项数量，否则按状态统计</span><br><span class=\"line\">if(StringUtils.isNotBlank(currStatus))&#123;</span><br><span class=\"line\">\tsql+=&quot; and t1.currstatus = ?  &quot;;</span><br><span class=\"line\">\trs = jdbc.queryForRowSet(sql, dutyId, currStatus);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\trs = jdbc.queryForRowSet(sql, dutyId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int num = 0;</span><br><span class=\"line\">while(rs.next())&#123;</span><br><span class=\"line\">\tnum =rs.getInt(&quot;num&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//缓存查询结果</span><br><span class=\"line\">Redis.cacheString(key, String.valueOf(num), FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class));</span><br><span class=\"line\"></span><br><span class=\"line\">return num;</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改状态\"><a href=\"#修改状态\" class=\"headerlink\" title=\"修改状态\"></a>修改状态</h4><p>修改状态的时候，先删除redis缓存，再更改数据库状态，可能会出现刚删除，数据库还没来得及更改，又有用户查询，导致redis缓存脏数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更新数据状态</span><br><span class=\"line\">//删除缓存状态：</span><br><span class=\"line\"></span><br><span class=\"line\">Redis.delete(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>两张表，一个主表，一个树形结构表，</p>\n<p>每一条树形结构数据都有一个状态，要统计出所有叶子节点的状态，展示在主表的列上，前期使用了oracle的<code>start connect</code>统计根节点，在前期主表中的数据量很小的时候，列表价在正常，后期数据量增大，列表响应速度异常。后经过分析，得出每一条根节点循环的时候需要600ms左右，然后数据增大直接是主表的600ms*n。</p>\n<p>树形结构超过三级，前两级结构超过50条记录，</p>\n<h2 id=\"优化路思路：\"><a href=\"#优化路思路：\" class=\"headerlink\" title=\"优化路思路：\"></a>优化路思路：</h2><p>redis优化查询结果，因为是计算结果，这种数据，在数据库上执行第一次,随后再次查询列表的时候从缓存中获取，减少计算次数。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>查询的时候先从redis中查询，如果有直接返回；如果没有，再查数据库，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查询状态,有num直接返回:</span><br><span class=\"line\"></span><br><span class=\"line\">if(Redis.isCached(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class)))&#123;</span><br><span class=\"line\">\treturn Integer.parseInt(Redis.getString(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//查询出的结果</span><br><span class=\"line\">String sql =  &quot; select count(*) as num &quot;</span><br><span class=\"line\">\t\t\t+ &quot; from pre_dutysubitem t1 ,pre_dutyitem t2 &quot;</span><br><span class=\"line\">\t\t\t+ &quot; where t2.fk_dutyid = ?  &quot;</span><br><span class=\"line\">\t\t\t+ &quot; and (select  count(*) from pre_dutysubitem t3 &quot;</span><br><span class=\"line\">\t\t\t+ &quot; start with t3.id = t1.id &quot;</span><br><span class=\"line\">\t\t\t+ &quot; connect by prior t3.id =t3.fk_parentid ) = 1 &quot;</span><br><span class=\"line\">\t\t\t+ &quot; and t2.id=t1.fk_dutyitemid and t1.currstatus is not null &quot;;</span><br><span class=\"line\">SqlRowSet rs = null;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果currStatus没值查统计全部子项数量，否则按状态统计</span><br><span class=\"line\">if(StringUtils.isNotBlank(currStatus))&#123;</span><br><span class=\"line\">\tsql+=&quot; and t1.currstatus = ?  &quot;;</span><br><span class=\"line\">\trs = jdbc.queryForRowSet(sql, dutyId, currStatus);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\trs = jdbc.queryForRowSet(sql, dutyId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int num = 0;</span><br><span class=\"line\">while(rs.next())&#123;</span><br><span class=\"line\">\tnum =rs.getInt(&quot;num&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//缓存查询结果</span><br><span class=\"line\">Redis.cacheString(key, String.valueOf(num), FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class));</span><br><span class=\"line\"></span><br><span class=\"line\">return num;</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改状态\"><a href=\"#修改状态\" class=\"headerlink\" title=\"修改状态\"></a>修改状态</h4><p>修改状态的时候，先删除redis缓存，再更改数据库状态，可能会出现刚删除，数据库还没来得及更改，又有用户查询，导致redis缓存脏数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更新数据状态</span><br><span class=\"line\">//删除缓存状态：</span><br><span class=\"line\"></span><br><span class=\"line\">Redis.delete(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class));</span><br></pre></td></tr></table></figure>\n"},{"title":"数据库操作-plsql操作","date":"2018-11-06T21:58:38.000Z","description":"plsql的一些操作","_content":"\n\nPLSQL的一些操作，\n<!--more-->\n\n####  快捷键\n\n在Tools->Perferences->Editor中Autoreplaces选择配置的shortcuts文件\n\nC:\\ProgramTool\\PLSQL Developer\\short.txt\n\n```\nsf = select * from \nw = where \nsf = select t.*, t.rowid from  \nsc = select count(1) from \ndf = delete from \n\n```\n\n#### Session查看 \n\nplsql 工具   Tools ----->Sessions---------> 查看\n\n#### 数据库比对工具\n\nplsql Tools ------->Compare User Objects 选择另外一个库\n\n#### 导入csv数据\n\n需要将csv另存为csv\n\nplsql Tools ------->Text Importer---->Open data file  --->Data to Oracle 选择Owener Table\n\n#### 记住密码多个账号，账号密码等\n\nTools->Preferences\n\ntools -> Preferences -> User Interface - Options\n勾选 Autosave username, ，保存即可\n\ntools -> Preferences -> Oracle -> logon History\n\nDefinition->Store history,Store with password\n\n->fixed user\n按格式：user/password@数据库 添加一个fixed user保存即可\nzzz/sdsdfs@192.168.1.12:1555/orcl\n\n\n[参考](https://www.cnblogs.com/Chary/p/No00008F.html)","source":"_posts/数据库操作-plsql操作.md","raw":"---\ntitle: 数据库操作-plsql操作\ndate: 2018-11-07 05:58:38\ntags: [常用代码]\ncategories: [SQL,数据库]\ndescription: \"plsql的一些操作\"\n---\n\n\nPLSQL的一些操作，\n<!--more-->\n\n####  快捷键\n\n在Tools->Perferences->Editor中Autoreplaces选择配置的shortcuts文件\n\nC:\\ProgramTool\\PLSQL Developer\\short.txt\n\n```\nsf = select * from \nw = where \nsf = select t.*, t.rowid from  \nsc = select count(1) from \ndf = delete from \n\n```\n\n#### Session查看 \n\nplsql 工具   Tools ----->Sessions---------> 查看\n\n#### 数据库比对工具\n\nplsql Tools ------->Compare User Objects 选择另外一个库\n\n#### 导入csv数据\n\n需要将csv另存为csv\n\nplsql Tools ------->Text Importer---->Open data file  --->Data to Oracle 选择Owener Table\n\n#### 记住密码多个账号，账号密码等\n\nTools->Preferences\n\ntools -> Preferences -> User Interface - Options\n勾选 Autosave username, ，保存即可\n\ntools -> Preferences -> Oracle -> logon History\n\nDefinition->Store history,Store with password\n\n->fixed user\n按格式：user/password@数据库 添加一个fixed user保存即可\nzzz/sdsdfs@192.168.1.12:1555/orcl\n\n\n[参考](https://www.cnblogs.com/Chary/p/No00008F.html)","slug":"数据库操作-plsql操作","published":1,"updated":"2019-01-11T02:52:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz781002jugv5lspzy8nf","content":"<p>PLSQL的一些操作，<br><a id=\"more\"></a></p>\n<h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><p>在Tools-&gt;Perferences-&gt;Editor中Autoreplaces选择配置的shortcuts文件</p>\n<p>C:\\ProgramTool\\PLSQL Developer\\short.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sf = select * from </span><br><span class=\"line\">w = where </span><br><span class=\"line\">sf = select t.*, t.rowid from  </span><br><span class=\"line\">sc = select count(1) from </span><br><span class=\"line\">df = delete from</span><br></pre></td></tr></table></figure>\n<h4 id=\"Session查看\"><a href=\"#Session查看\" class=\"headerlink\" title=\"Session查看\"></a>Session查看</h4><p>plsql 工具   Tools —–&gt;Sessions———&gt; 查看</p>\n<h4 id=\"数据库比对工具\"><a href=\"#数据库比对工具\" class=\"headerlink\" title=\"数据库比对工具\"></a>数据库比对工具</h4><p>plsql Tools ——-&gt;Compare User Objects 选择另外一个库</p>\n<h4 id=\"导入csv数据\"><a href=\"#导入csv数据\" class=\"headerlink\" title=\"导入csv数据\"></a>导入csv数据</h4><p>需要将csv另存为csv</p>\n<p>plsql Tools ——-&gt;Text Importer—-&gt;Open data file  —&gt;Data to Oracle 选择Owener Table</p>\n<h4 id=\"记住密码多个账号，账号密码等\"><a href=\"#记住密码多个账号，账号密码等\" class=\"headerlink\" title=\"记住密码多个账号，账号密码等\"></a>记住密码多个账号，账号密码等</h4><p>Tools-&gt;Preferences</p>\n<p>tools -&gt; Preferences -&gt; User Interface - Options<br>勾选 Autosave username, ，保存即可</p>\n<p>tools -&gt; Preferences -&gt; Oracle -&gt; logon History</p>\n<p>Definition-&gt;Store history,Store with password</p>\n<p>-&gt;fixed user<br>按格式：user/password@数据库 添加一个fixed user保存即可<br><a href=\"mailto:zzz/sdsdfs@192.168.1.12\" target=\"_blank\" rel=\"noopener\">zzz/sdsdfs@192.168.1.12</a>:1555/orcl</p>\n<p><a href=\"https://www.cnblogs.com/Chary/p/No00008F.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n","site":{"data":{}},"excerpt":"<p>PLSQL的一些操作，<br></p>","more":"<p></p>\n<h4 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h4><p>在Tools-&gt;Perferences-&gt;Editor中Autoreplaces选择配置的shortcuts文件</p>\n<p>C:\\ProgramTool\\PLSQL Developer\\short.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sf = select * from </span><br><span class=\"line\">w = where </span><br><span class=\"line\">sf = select t.*, t.rowid from  </span><br><span class=\"line\">sc = select count(1) from </span><br><span class=\"line\">df = delete from</span><br></pre></td></tr></table></figure>\n<h4 id=\"Session查看\"><a href=\"#Session查看\" class=\"headerlink\" title=\"Session查看\"></a>Session查看</h4><p>plsql 工具   Tools —–&gt;Sessions———&gt; 查看</p>\n<h4 id=\"数据库比对工具\"><a href=\"#数据库比对工具\" class=\"headerlink\" title=\"数据库比对工具\"></a>数据库比对工具</h4><p>plsql Tools ——-&gt;Compare User Objects 选择另外一个库</p>\n<h4 id=\"导入csv数据\"><a href=\"#导入csv数据\" class=\"headerlink\" title=\"导入csv数据\"></a>导入csv数据</h4><p>需要将csv另存为csv</p>\n<p>plsql Tools ——-&gt;Text Importer—-&gt;Open data file  —&gt;Data to Oracle 选择Owener Table</p>\n<h4 id=\"记住密码多个账号，账号密码等\"><a href=\"#记住密码多个账号，账号密码等\" class=\"headerlink\" title=\"记住密码多个账号，账号密码等\"></a>记住密码多个账号，账号密码等</h4><p>Tools-&gt;Preferences</p>\n<p>tools -&gt; Preferences -&gt; User Interface - Options<br>勾选 Autosave username, ，保存即可</p>\n<p>tools -&gt; Preferences -&gt; Oracle -&gt; logon History</p>\n<p>Definition-&gt;Store history,Store with password</p>\n<p>-&gt;fixed user<br>按格式：user/password@数据库 添加一个fixed user保存即可<br><a href=\"mailto:zzz/sdsdfs@192.168.1.12\" target=\"_blank\" rel=\"noopener\">zzz/sdsdfs@192.168.1.12</a>:1555/orcl</p>\n<p><a href=\"https://www.cnblogs.com/Chary/p/No00008F.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>"},{"title":"好软件,靠机遇","date":"2016-08-27T09:58:39.000Z","description":"Travis CI","_content":"-------------------------------\n\n## 自动线上构建博客Travis CI\n##### 其他的已经完成\n","source":"_posts/测试Travis CI.md","raw":"---\ntitle: '好软件,靠机遇'\ndate: 2016-08-27 17:58:39\ntags: CI\ncategories: Travis\ndescription: \"Travis CI\"\n---\n-------------------------------\n\n## 自动线上构建博客Travis CI\n##### 其他的已经完成\n","slug":"测试Travis CI","published":1,"updated":"2019-06-10T05:13:21.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz782002lugv5yuvx8oh0","content":"<hr>\n<h2 id=\"自动线上构建博客Travis-CI\"><a href=\"#自动线上构建博客Travis-CI\" class=\"headerlink\" title=\"自动线上构建博客Travis CI\"></a>自动线上构建博客Travis CI</h2><h5 id=\"其他的已经完成\"><a href=\"#其他的已经完成\" class=\"headerlink\" title=\"其他的已经完成\"></a>其他的已经完成</h5>","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"自动线上构建博客Travis-CI\"><a href=\"#自动线上构建博客Travis-CI\" class=\"headerlink\" title=\"自动线上构建博客Travis CI\"></a>自动线上构建博客Travis CI</h2><h5 id=\"其他的已经完成\"><a href=\"#其他的已经完成\" class=\"headerlink\" title=\"其他的已经完成\"></a>其他的已经完成</h5>"},{"title":"浏览器的加载页面过程及优化方法","date":"2018-06-07T19:45:26.000Z","description":"加载页面和优化，接着上一篇，跟着chrome开发者工具中的Memory和Performance来操作","_content":"\n\n## 接上一篇中的DOM所有时间，浏览器在做些什么？\n\n之前是接受资源,domLoading,domInteractive,domContentLoadedEventStart,domContentLoadedEventEnd,domComplete,之后是其他，主要分析这中间的时间，浏览器做什么来展示内容。\nloadEventStart,loadEventEnd\n\n### 构建DOM 渲染 绘画\n\n\n\n关键渲染路径:DOM javascript CSSOM Render Tree Layout Paint\n\n- 1.处理 HTML 标记并构建 DOM 树。\n- 2.处理 CSS 标记并构建 CSSOM 树。\n- 3.将 DOM 与 CSSOM 合并成一个渲染树。（Render Tree）\n- 4.根据渲染树来布局，以计算每个节点的几何信息。（Layout）\n- 5.将各个节点绘制到屏幕上。（Paint）\n\n\n\n\n## 性能分析\n\n\n### 网络\n\n![看一下时间的问题](浏览器的加载页面过程及优化方法/website3.png)\n```\n\n\"network(dns+tcp):\"+(window.performance.timing.requestStart - window.performance.timing.fetchStart)+\"ms,\"+\n\"TTFB:\"+ (window.performance.timing.responseStart  - window.performance.timing.requestStart)+\"ms,\"+\n\"Download HTML:\"+(window.performance.timing.responseEnd -window.performance.timing.responseStart)+\"ms,\"+\n\"other:\"+(window.performance.timing.domLoading -window.performance.timing.responseEnd)+\"ms,\"+\n\"DOM:\"+(window.performance.timing.domInteractive - window.performance.timing.domLoading)+\"ms,\"+\n\"DomContentLoaded:\" +(window.performance.timing.domInteractive -window.performance.timing.fetchStart)+\"ms,\"+\n\"DOMContentLoaded: 36+364+34+1+167 = 602ms,\"+\n\"download Other(css,js,pic)&hander:\"+ (window.performance.timing.domComplete- window.performance.timing.domInteractive)+\"ms,\"+\n\"load Event:\" + (window.performance.timing.domContentLoadedEventEnd - window.performance.timing.domContentLoadedEventStart) +\"ms,\"+\n\"Load: 602+1034 = 1634ms\"\n\n```\n先从时间上看：\n\n性能的话，如果，这里的(requestStart - fetchStart) 时间很大的话，就需要看一下是不是网络的问题了；如果responseStart - requestStart很大，是不是服务器的响应速度有问题呢？这个需要后台，负载等处理，查一下请求响应时间，是不是很长？然后在responseEnd之后，得到了HTML，就是浏览器的渲染等问题了。\n\n### 构建对象生成时间,生成DOM和CSSOM\n\n涉及到解析HTML等，语法解析问题。\n\nCSSOM，层级级联样式怎么最简化，怎么渲染的时候构建Render Tree最优。\n\nCSS选择器内套多层，越来越复杂;精简不用的样式\n\n### 加载资源时间\n\n> HTML 和 CSS 都是阻塞渲染的资源\n\nHTML 必须的，渲染内容。\n\n然后是CSS资源，CSS是阻塞资源，需要尽快加载，方便浏览器快速加载。使用媒体查询，让一些样式不用阻塞渲染。\n\n例:\n```\n<link href=\"style.css\" rel=\"stylesheet\">  默认是all\n<link href=\"style.css\"    rel=\"stylesheet\" media=\"all\">\n<link href=\"print.css\" rel=\"stylesheet\" media=\"print\"> 打印时\n<link href=\"other.css\" rel=\"stylesheet\" media=\"(min-width: 40em)\">最小宽度加载\n<link href=\"portrait.css\" rel=\"stylesheet\" media=\"orientation:portrait\"> 定输出设备中的页面可见区域高度大于或等于宽度，竖屏\n```\n注意“阻塞渲染”仅是指浏览器是否需要暂停网页的首次渲染，直至该资源准备就绪。无论哪一种情况，浏览器仍会下载 CSS 资源，只不过不阻塞渲染的资源优先级较低罢了。\n\nJavaScript 也会阻止 DOM 构建和延缓网页渲染。 为了实现最佳性能，可以让您的 JavaScript 异步执行，并去除关键渲染路径中任何不必要的 JavaScript。当 HTML 解析器遇到一个 script 标记时，它会暂停构建 DOM，将控制权移交给 JavaScript 引擎；等 JavaScript 引擎运行完毕，浏览器会从中断的地方恢复 DOM 构建。\n` <script src=\"app.js\" async></script>`可以添加异步，这样可以等资源加载完后，再进行执行。\n\n### 内存\n\n内存溢出:JS死循环，DOM引用\n\n\n### 怎样找到具体的问题代码\n\n![分析出现问题的位置](浏览器的加载页面过程及优化方法/website1.png)\n\n![分析出现问题的位置](浏览器的加载页面过程及优化方法/website2.png)\n[上面图的网址: https://googlechrome.github.io/devtools-samples/jank/](https://googlechrome.github.io/devtools-samples/jank/)\n先得到profile，现在已经在Performance面板中了，FPS一般都在60左右，这里有红色的已经降到10以下了。然后我们选取其中的一部分,上图分析了结果，找到问题的所在，然后进行处理。这个问题是: `Layout Forced和First Layout Invalidation`\n\n> 注：先降低CPU的速度。\n\n参考：\n\n- [google官方文档-关键渲染路径](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/)\n- [chrome-devtools](https://developers.google.com/web/tools/chrome-devtools/)\n- [分析关键渲染路径性能](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp)\n- [内存模型](https://developers.google.com/web/tools/chrome-devtools/memory-problems/)\n- [性能演示测试](https://googlechrome.github.io/devtools-samples/jank/)","source":"_posts/浏览器的加载页面过程及优化方法.md","raw":"---\ntitle: 浏览器的加载页面过程及优化方法\ndate: 2018-06-08 03:45:26\ntags: [前端,工具]\ncategories: [前端,性能优化]\ndescription: \"加载页面和优化，接着上一篇，跟着chrome开发者工具中的Memory和Performance来操作\"\n---\n\n\n## 接上一篇中的DOM所有时间，浏览器在做些什么？\n\n之前是接受资源,domLoading,domInteractive,domContentLoadedEventStart,domContentLoadedEventEnd,domComplete,之后是其他，主要分析这中间的时间，浏览器做什么来展示内容。\nloadEventStart,loadEventEnd\n\n### 构建DOM 渲染 绘画\n\n\n\n关键渲染路径:DOM javascript CSSOM Render Tree Layout Paint\n\n- 1.处理 HTML 标记并构建 DOM 树。\n- 2.处理 CSS 标记并构建 CSSOM 树。\n- 3.将 DOM 与 CSSOM 合并成一个渲染树。（Render Tree）\n- 4.根据渲染树来布局，以计算每个节点的几何信息。（Layout）\n- 5.将各个节点绘制到屏幕上。（Paint）\n\n\n\n\n## 性能分析\n\n\n### 网络\n\n![看一下时间的问题](浏览器的加载页面过程及优化方法/website3.png)\n```\n\n\"network(dns+tcp):\"+(window.performance.timing.requestStart - window.performance.timing.fetchStart)+\"ms,\"+\n\"TTFB:\"+ (window.performance.timing.responseStart  - window.performance.timing.requestStart)+\"ms,\"+\n\"Download HTML:\"+(window.performance.timing.responseEnd -window.performance.timing.responseStart)+\"ms,\"+\n\"other:\"+(window.performance.timing.domLoading -window.performance.timing.responseEnd)+\"ms,\"+\n\"DOM:\"+(window.performance.timing.domInteractive - window.performance.timing.domLoading)+\"ms,\"+\n\"DomContentLoaded:\" +(window.performance.timing.domInteractive -window.performance.timing.fetchStart)+\"ms,\"+\n\"DOMContentLoaded: 36+364+34+1+167 = 602ms,\"+\n\"download Other(css,js,pic)&hander:\"+ (window.performance.timing.domComplete- window.performance.timing.domInteractive)+\"ms,\"+\n\"load Event:\" + (window.performance.timing.domContentLoadedEventEnd - window.performance.timing.domContentLoadedEventStart) +\"ms,\"+\n\"Load: 602+1034 = 1634ms\"\n\n```\n先从时间上看：\n\n性能的话，如果，这里的(requestStart - fetchStart) 时间很大的话，就需要看一下是不是网络的问题了；如果responseStart - requestStart很大，是不是服务器的响应速度有问题呢？这个需要后台，负载等处理，查一下请求响应时间，是不是很长？然后在responseEnd之后，得到了HTML，就是浏览器的渲染等问题了。\n\n### 构建对象生成时间,生成DOM和CSSOM\n\n涉及到解析HTML等，语法解析问题。\n\nCSSOM，层级级联样式怎么最简化，怎么渲染的时候构建Render Tree最优。\n\nCSS选择器内套多层，越来越复杂;精简不用的样式\n\n### 加载资源时间\n\n> HTML 和 CSS 都是阻塞渲染的资源\n\nHTML 必须的，渲染内容。\n\n然后是CSS资源，CSS是阻塞资源，需要尽快加载，方便浏览器快速加载。使用媒体查询，让一些样式不用阻塞渲染。\n\n例:\n```\n<link href=\"style.css\" rel=\"stylesheet\">  默认是all\n<link href=\"style.css\"    rel=\"stylesheet\" media=\"all\">\n<link href=\"print.css\" rel=\"stylesheet\" media=\"print\"> 打印时\n<link href=\"other.css\" rel=\"stylesheet\" media=\"(min-width: 40em)\">最小宽度加载\n<link href=\"portrait.css\" rel=\"stylesheet\" media=\"orientation:portrait\"> 定输出设备中的页面可见区域高度大于或等于宽度，竖屏\n```\n注意“阻塞渲染”仅是指浏览器是否需要暂停网页的首次渲染，直至该资源准备就绪。无论哪一种情况，浏览器仍会下载 CSS 资源，只不过不阻塞渲染的资源优先级较低罢了。\n\nJavaScript 也会阻止 DOM 构建和延缓网页渲染。 为了实现最佳性能，可以让您的 JavaScript 异步执行，并去除关键渲染路径中任何不必要的 JavaScript。当 HTML 解析器遇到一个 script 标记时，它会暂停构建 DOM，将控制权移交给 JavaScript 引擎；等 JavaScript 引擎运行完毕，浏览器会从中断的地方恢复 DOM 构建。\n` <script src=\"app.js\" async></script>`可以添加异步，这样可以等资源加载完后，再进行执行。\n\n### 内存\n\n内存溢出:JS死循环，DOM引用\n\n\n### 怎样找到具体的问题代码\n\n![分析出现问题的位置](浏览器的加载页面过程及优化方法/website1.png)\n\n![分析出现问题的位置](浏览器的加载页面过程及优化方法/website2.png)\n[上面图的网址: https://googlechrome.github.io/devtools-samples/jank/](https://googlechrome.github.io/devtools-samples/jank/)\n先得到profile，现在已经在Performance面板中了，FPS一般都在60左右，这里有红色的已经降到10以下了。然后我们选取其中的一部分,上图分析了结果，找到问题的所在，然后进行处理。这个问题是: `Layout Forced和First Layout Invalidation`\n\n> 注：先降低CPU的速度。\n\n参考：\n\n- [google官方文档-关键渲染路径](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/)\n- [chrome-devtools](https://developers.google.com/web/tools/chrome-devtools/)\n- [分析关键渲染路径性能](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp)\n- [内存模型](https://developers.google.com/web/tools/chrome-devtools/memory-problems/)\n- [性能演示测试](https://googlechrome.github.io/devtools-samples/jank/)","slug":"浏览器的加载页面过程及优化方法","published":1,"updated":"2019-02-16T04:39:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz783002ougv5oduf4on1","content":"<h2 id=\"接上一篇中的DOM所有时间，浏览器在做些什么？\"><a href=\"#接上一篇中的DOM所有时间，浏览器在做些什么？\" class=\"headerlink\" title=\"接上一篇中的DOM所有时间，浏览器在做些什么？\"></a>接上一篇中的DOM所有时间，浏览器在做些什么？</h2><p>之前是接受资源,domLoading,domInteractive,domContentLoadedEventStart,domContentLoadedEventEnd,domComplete,之后是其他，主要分析这中间的时间，浏览器做什么来展示内容。<br>loadEventStart,loadEventEnd</p>\n<h3 id=\"构建DOM-渲染-绘画\"><a href=\"#构建DOM-渲染-绘画\" class=\"headerlink\" title=\"构建DOM 渲染 绘画\"></a>构建DOM 渲染 绘画</h3><p>关键渲染路径:DOM javascript CSSOM Render Tree Layout Paint</p>\n<ul>\n<li>1.处理 HTML 标记并构建 DOM 树。</li>\n<li>2.处理 CSS 标记并构建 CSSOM 树。</li>\n<li>3.将 DOM 与 CSSOM 合并成一个渲染树。（Render Tree）</li>\n<li>4.根据渲染树来布局，以计算每个节点的几何信息。（Layout）</li>\n<li>5.将各个节点绘制到屏幕上。（Paint）</li>\n</ul>\n<h2 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h2><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p><img src=\"/.io//website3.png\" alt=\"看一下时间的问题\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;network(dns+tcp):&quot;+(window.performance.timing.requestStart - window.performance.timing.fetchStart)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;TTFB:&quot;+ (window.performance.timing.responseStart  - window.performance.timing.requestStart)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;Download HTML:&quot;+(window.performance.timing.responseEnd -window.performance.timing.responseStart)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;other:&quot;+(window.performance.timing.domLoading -window.performance.timing.responseEnd)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;DOM:&quot;+(window.performance.timing.domInteractive - window.performance.timing.domLoading)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;DomContentLoaded:&quot; +(window.performance.timing.domInteractive -window.performance.timing.fetchStart)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;DOMContentLoaded: 36+364+34+1+167 = 602ms,&quot;+</span><br><span class=\"line\">&quot;download Other(css,js,pic)&amp;hander:&quot;+ (window.performance.timing.domComplete- window.performance.timing.domInteractive)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;load Event:&quot; + (window.performance.timing.domContentLoadedEventEnd - window.performance.timing.domContentLoadedEventStart) +&quot;ms,&quot;+</span><br><span class=\"line\">&quot;Load: 602+1034 = 1634ms&quot;</span><br></pre></td></tr></table></figure></p>\n<p>先从时间上看：</p>\n<p>性能的话，如果，这里的(requestStart - fetchStart) 时间很大的话，就需要看一下是不是网络的问题了；如果responseStart - requestStart很大，是不是服务器的响应速度有问题呢？这个需要后台，负载等处理，查一下请求响应时间，是不是很长？然后在responseEnd之后，得到了HTML，就是浏览器的渲染等问题了。</p>\n<h3 id=\"构建对象生成时间-生成DOM和CSSOM\"><a href=\"#构建对象生成时间-生成DOM和CSSOM\" class=\"headerlink\" title=\"构建对象生成时间,生成DOM和CSSOM\"></a>构建对象生成时间,生成DOM和CSSOM</h3><p>涉及到解析HTML等，语法解析问题。</p>\n<p>CSSOM，层级级联样式怎么最简化，怎么渲染的时候构建Render Tree最优。</p>\n<p>CSS选择器内套多层，越来越复杂;精简不用的样式</p>\n<h3 id=\"加载资源时间\"><a href=\"#加载资源时间\" class=\"headerlink\" title=\"加载资源时间\"></a>加载资源时间</h3><blockquote>\n<p>HTML 和 CSS 都是阻塞渲染的资源</p>\n</blockquote>\n<p>HTML 必须的，渲染内容。</p>\n<p>然后是CSS资源，CSS是阻塞资源，需要尽快加载，方便浏览器快速加载。使用媒体查询，让一些样式不用阻塞渲染。</p>\n<p>例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;  默认是all</span><br><span class=\"line\">&lt;link href=&quot;style.css&quot;    rel=&quot;stylesheet&quot; media=&quot;all&quot;&gt;</span><br><span class=\"line\">&lt;link href=&quot;print.css&quot; rel=&quot;stylesheet&quot; media=&quot;print&quot;&gt; 打印时</span><br><span class=\"line\">&lt;link href=&quot;other.css&quot; rel=&quot;stylesheet&quot; media=&quot;(min-width: 40em)&quot;&gt;最小宽度加载</span><br><span class=\"line\">&lt;link href=&quot;portrait.css&quot; rel=&quot;stylesheet&quot; media=&quot;orientation:portrait&quot;&gt; 定输出设备中的页面可见区域高度大于或等于宽度，竖屏</span><br></pre></td></tr></table></figure></p>\n<p>注意“阻塞渲染”仅是指浏览器是否需要暂停网页的首次渲染，直至该资源准备就绪。无论哪一种情况，浏览器仍会下载 CSS 资源，只不过不阻塞渲染的资源优先级较低罢了。</p>\n<p>JavaScript 也会阻止 DOM 构建和延缓网页渲染。 为了实现最佳性能，可以让您的 JavaScript 异步执行，并去除关键渲染路径中任何不必要的 JavaScript。当 HTML 解析器遇到一个 script 标记时，它会暂停构建 DOM，将控制权移交给 JavaScript 引擎；等 JavaScript 引擎运行完毕，浏览器会从中断的地方恢复 DOM 构建。<br><code>&lt;script src=&quot;app.js&quot; async&gt;&lt;/script&gt;</code>可以添加异步，这样可以等资源加载完后，再进行执行。</p>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>内存溢出:JS死循环，DOM引用</p>\n<h3 id=\"怎样找到具体的问题代码\"><a href=\"#怎样找到具体的问题代码\" class=\"headerlink\" title=\"怎样找到具体的问题代码\"></a>怎样找到具体的问题代码</h3><p><img src=\"/.io//website1.png\" alt=\"分析出现问题的位置\"></p>\n<p><img src=\"/.io//website2.png\" alt=\"分析出现问题的位置\"><br><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">上面图的网址: https://googlechrome.github.io/devtools-samples/jank/</a><br>先得到profile，现在已经在Performance面板中了，FPS一般都在60左右，这里有红色的已经降到10以下了。然后我们选取其中的一部分,上图分析了结果，找到问题的所在，然后进行处理。这个问题是: <code>Layout Forced和First Layout Invalidation</code></p>\n<blockquote>\n<p>注：先降低CPU的速度。</p>\n</blockquote>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\" target=\"_blank\" rel=\"noopener\">google官方文档-关键渲染路径</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">chrome-devtools</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp\" target=\"_blank\" rel=\"noopener\">分析关键渲染路径性能</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/\" target=\"_blank\" rel=\"noopener\">内存模型</a></li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">性能演示测试</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"接上一篇中的DOM所有时间，浏览器在做些什么？\"><a href=\"#接上一篇中的DOM所有时间，浏览器在做些什么？\" class=\"headerlink\" title=\"接上一篇中的DOM所有时间，浏览器在做些什么？\"></a>接上一篇中的DOM所有时间，浏览器在做些什么？</h2><p>之前是接受资源,domLoading,domInteractive,domContentLoadedEventStart,domContentLoadedEventEnd,domComplete,之后是其他，主要分析这中间的时间，浏览器做什么来展示内容。<br>loadEventStart,loadEventEnd</p>\n<h3 id=\"构建DOM-渲染-绘画\"><a href=\"#构建DOM-渲染-绘画\" class=\"headerlink\" title=\"构建DOM 渲染 绘画\"></a>构建DOM 渲染 绘画</h3><p>关键渲染路径:DOM javascript CSSOM Render Tree Layout Paint</p>\n<ul>\n<li>1.处理 HTML 标记并构建 DOM 树。</li>\n<li>2.处理 CSS 标记并构建 CSSOM 树。</li>\n<li>3.将 DOM 与 CSSOM 合并成一个渲染树。（Render Tree）</li>\n<li>4.根据渲染树来布局，以计算每个节点的几何信息。（Layout）</li>\n<li>5.将各个节点绘制到屏幕上。（Paint）</li>\n</ul>\n<h2 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h2><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p><img src=\"/.io//website3.png\" alt=\"看一下时间的问题\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;network(dns+tcp):&quot;+(window.performance.timing.requestStart - window.performance.timing.fetchStart)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;TTFB:&quot;+ (window.performance.timing.responseStart  - window.performance.timing.requestStart)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;Download HTML:&quot;+(window.performance.timing.responseEnd -window.performance.timing.responseStart)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;other:&quot;+(window.performance.timing.domLoading -window.performance.timing.responseEnd)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;DOM:&quot;+(window.performance.timing.domInteractive - window.performance.timing.domLoading)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;DomContentLoaded:&quot; +(window.performance.timing.domInteractive -window.performance.timing.fetchStart)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;DOMContentLoaded: 36+364+34+1+167 = 602ms,&quot;+</span><br><span class=\"line\">&quot;download Other(css,js,pic)&amp;hander:&quot;+ (window.performance.timing.domComplete- window.performance.timing.domInteractive)+&quot;ms,&quot;+</span><br><span class=\"line\">&quot;load Event:&quot; + (window.performance.timing.domContentLoadedEventEnd - window.performance.timing.domContentLoadedEventStart) +&quot;ms,&quot;+</span><br><span class=\"line\">&quot;Load: 602+1034 = 1634ms&quot;</span><br></pre></td></tr></table></figure></p>\n<p>先从时间上看：</p>\n<p>性能的话，如果，这里的(requestStart - fetchStart) 时间很大的话，就需要看一下是不是网络的问题了；如果responseStart - requestStart很大，是不是服务器的响应速度有问题呢？这个需要后台，负载等处理，查一下请求响应时间，是不是很长？然后在responseEnd之后，得到了HTML，就是浏览器的渲染等问题了。</p>\n<h3 id=\"构建对象生成时间-生成DOM和CSSOM\"><a href=\"#构建对象生成时间-生成DOM和CSSOM\" class=\"headerlink\" title=\"构建对象生成时间,生成DOM和CSSOM\"></a>构建对象生成时间,生成DOM和CSSOM</h3><p>涉及到解析HTML等，语法解析问题。</p>\n<p>CSSOM，层级级联样式怎么最简化，怎么渲染的时候构建Render Tree最优。</p>\n<p>CSS选择器内套多层，越来越复杂;精简不用的样式</p>\n<h3 id=\"加载资源时间\"><a href=\"#加载资源时间\" class=\"headerlink\" title=\"加载资源时间\"></a>加载资源时间</h3><blockquote>\n<p>HTML 和 CSS 都是阻塞渲染的资源</p>\n</blockquote>\n<p>HTML 必须的，渲染内容。</p>\n<p>然后是CSS资源，CSS是阻塞资源，需要尽快加载，方便浏览器快速加载。使用媒体查询，让一些样式不用阻塞渲染。</p>\n<p>例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;  默认是all</span><br><span class=\"line\">&lt;link href=&quot;style.css&quot;    rel=&quot;stylesheet&quot; media=&quot;all&quot;&gt;</span><br><span class=\"line\">&lt;link href=&quot;print.css&quot; rel=&quot;stylesheet&quot; media=&quot;print&quot;&gt; 打印时</span><br><span class=\"line\">&lt;link href=&quot;other.css&quot; rel=&quot;stylesheet&quot; media=&quot;(min-width: 40em)&quot;&gt;最小宽度加载</span><br><span class=\"line\">&lt;link href=&quot;portrait.css&quot; rel=&quot;stylesheet&quot; media=&quot;orientation:portrait&quot;&gt; 定输出设备中的页面可见区域高度大于或等于宽度，竖屏</span><br></pre></td></tr></table></figure></p>\n<p>注意“阻塞渲染”仅是指浏览器是否需要暂停网页的首次渲染，直至该资源准备就绪。无论哪一种情况，浏览器仍会下载 CSS 资源，只不过不阻塞渲染的资源优先级较低罢了。</p>\n<p>JavaScript 也会阻止 DOM 构建和延缓网页渲染。 为了实现最佳性能，可以让您的 JavaScript 异步执行，并去除关键渲染路径中任何不必要的 JavaScript。当 HTML 解析器遇到一个 script 标记时，它会暂停构建 DOM，将控制权移交给 JavaScript 引擎；等 JavaScript 引擎运行完毕，浏览器会从中断的地方恢复 DOM 构建。<br><code>&lt;script src=&quot;app.js&quot; async&gt;&lt;/script&gt;</code>可以添加异步，这样可以等资源加载完后，再进行执行。</p>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>内存溢出:JS死循环，DOM引用</p>\n<h3 id=\"怎样找到具体的问题代码\"><a href=\"#怎样找到具体的问题代码\" class=\"headerlink\" title=\"怎样找到具体的问题代码\"></a>怎样找到具体的问题代码</h3><p><img src=\"/.io//website1.png\" alt=\"分析出现问题的位置\"></p>\n<p><img src=\"/.io//website2.png\" alt=\"分析出现问题的位置\"><br><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">上面图的网址: https://googlechrome.github.io/devtools-samples/jank/</a><br>先得到profile，现在已经在Performance面板中了，FPS一般都在60左右，这里有红色的已经降到10以下了。然后我们选取其中的一部分,上图分析了结果，找到问题的所在，然后进行处理。这个问题是: <code>Layout Forced和First Layout Invalidation</code></p>\n<blockquote>\n<p>注：先降低CPU的速度。</p>\n</blockquote>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\" target=\"_blank\" rel=\"noopener\">google官方文档-关键渲染路径</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">chrome-devtools</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp\" target=\"_blank\" rel=\"noopener\">分析关键渲染路径性能</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/\" target=\"_blank\" rel=\"noopener\">内存模型</a></li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">性能演示测试</a></li>\n</ul>\n"},{"title":"深入理解JVM之远程监控","date":"2018-11-21T23:21:35.000Z","description":"JVM配置远程监控,配置","_content":"\n远程监控jconsole和jvisualvm\n<!--more-->\n\n修改服务器tomcat的bin/catalina.bat文件,\n\n新建setenv.sh,给权限\n\n```\nJAVA_OPTS=\"$JAVA_OPTS -Djava.rmi.server.hostname=192.168.202.121 -Dcom.sun.management.jmxremote\"\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.port=12345\"\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=true\"\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false\"\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.pwd.file=$JAVA_HOME/jre/lib/management/jmxremote.password\"\n\n```\n\n\n配置权限文件\n\n```\n\n[root@localhost bin]# cd $JAVA_HOME/jre/lib/management\n\n[root@localhost management]# cp jmxremote.password.template jmxremote.password\n\n[root@localhost management]# vi jmxremote.password\n\nmonitorRole QED\ncontrolRole chenqimiao\n\n[root@localhost management]# chmod 600 jmxremote.password jmxremote.access\n\n```\n\nlinux:  netstat -ano | grep 12345\nwin :   netstat -ano | findstr 12345\n\n\n修改jvisualvm工具无法下载插件问题。\n修改插件>>>设置中的地址\n在[visual VM 网址查询](https://visualvm.github.io/pluginscenters.html)\n\n- [JConsole远程连接](https://www.cnblogs.com/think-in-java/p/6138439.html)\n- [监控JVM带main方法](https://blog.csdn.net/yunzhu666/article/details/8662045)","source":"_posts/深入理解JVM之远程监控.md","raw":"---\ntitle: 深入理解JVM之远程监控\ndate: 2018-11-22 07:21:35\ntags: [jvm,tomcat]\ncategories: java\ndescription: \"JVM配置远程监控,配置\"\n---\n\n远程监控jconsole和jvisualvm\n<!--more-->\n\n修改服务器tomcat的bin/catalina.bat文件,\n\n新建setenv.sh,给权限\n\n```\nJAVA_OPTS=\"$JAVA_OPTS -Djava.rmi.server.hostname=192.168.202.121 -Dcom.sun.management.jmxremote\"\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.port=12345\"\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=true\"\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false\"\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.pwd.file=$JAVA_HOME/jre/lib/management/jmxremote.password\"\n\n```\n\n\n配置权限文件\n\n```\n\n[root@localhost bin]# cd $JAVA_HOME/jre/lib/management\n\n[root@localhost management]# cp jmxremote.password.template jmxremote.password\n\n[root@localhost management]# vi jmxremote.password\n\nmonitorRole QED\ncontrolRole chenqimiao\n\n[root@localhost management]# chmod 600 jmxremote.password jmxremote.access\n\n```\n\nlinux:  netstat -ano | grep 12345\nwin :   netstat -ano | findstr 12345\n\n\n修改jvisualvm工具无法下载插件问题。\n修改插件>>>设置中的地址\n在[visual VM 网址查询](https://visualvm.github.io/pluginscenters.html)\n\n- [JConsole远程连接](https://www.cnblogs.com/think-in-java/p/6138439.html)\n- [监控JVM带main方法](https://blog.csdn.net/yunzhu666/article/details/8662045)","slug":"深入理解JVM之远程监控","published":1,"updated":"2019-01-02T03:12:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz784002qugv5vpklc5wx","content":"<p>远程监控jconsole和jvisualvm<br><a id=\"more\"></a></p>\n<p>修改服务器tomcat的bin/catalina.bat文件,</p>\n<p>新建setenv.sh,给权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Djava.rmi.server.hostname=192.168.202.121 -Dcom.sun.management.jmxremote&quot;</span><br><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.port=12345&quot;</span><br><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=true&quot;</span><br><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false&quot;</span><br><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.pwd.file=$JAVA_HOME/jre/lib/management/jmxremote.password&quot;</span><br></pre></td></tr></table></figure>\n<p>配置权限文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@localhost bin]# cd $JAVA_HOME/jre/lib/management</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost management]# cp jmxremote.password.template jmxremote.password</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost management]# vi jmxremote.password</span><br><span class=\"line\"></span><br><span class=\"line\">monitorRole QED</span><br><span class=\"line\">controlRole chenqimiao</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost management]# chmod 600 jmxremote.password jmxremote.access</span><br></pre></td></tr></table></figure>\n<p>linux:  netstat -ano | grep 12345<br>win :   netstat -ano | findstr 12345</p>\n<p>修改jvisualvm工具无法下载插件问题。<br>修改插件&gt;&gt;&gt;设置中的地址<br>在<a href=\"https://visualvm.github.io/pluginscenters.html\" target=\"_blank\" rel=\"noopener\">visual VM 网址查询</a></p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/think-in-java/p/6138439.html\" target=\"_blank\" rel=\"noopener\">JConsole远程连接</a></li>\n<li><a href=\"https://blog.csdn.net/yunzhu666/article/details/8662045\" target=\"_blank\" rel=\"noopener\">监控JVM带main方法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>远程监控jconsole和jvisualvm<br></p>","more":"<p></p>\n<p>修改服务器tomcat的bin/catalina.bat文件,</p>\n<p>新建setenv.sh,给权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Djava.rmi.server.hostname=192.168.202.121 -Dcom.sun.management.jmxremote&quot;</span><br><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.port=12345&quot;</span><br><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=true&quot;</span><br><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false&quot;</span><br><span class=\"line\">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.pwd.file=$JAVA_HOME/jre/lib/management/jmxremote.password&quot;</span><br></pre></td></tr></table></figure>\n<p>配置权限文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@localhost bin]# cd $JAVA_HOME/jre/lib/management</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost management]# cp jmxremote.password.template jmxremote.password</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost management]# vi jmxremote.password</span><br><span class=\"line\"></span><br><span class=\"line\">monitorRole QED</span><br><span class=\"line\">controlRole chenqimiao</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost management]# chmod 600 jmxremote.password jmxremote.access</span><br></pre></td></tr></table></figure>\n<p>linux:  netstat -ano | grep 12345<br>win :   netstat -ano | findstr 12345</p>\n<p>修改jvisualvm工具无法下载插件问题。<br>修改插件&gt;&gt;&gt;设置中的地址<br>在<a href=\"https://visualvm.github.io/pluginscenters.html\" target=\"_blank\" rel=\"noopener\">visual VM 网址查询</a></p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/think-in-java/p/6138439.html\" target=\"_blank\" rel=\"noopener\">JConsole远程连接</a></li>\n<li><a href=\"https://blog.csdn.net/yunzhu666/article/details/8662045\" target=\"_blank\" rel=\"noopener\">监控JVM带main方法</a></li>\n</ul>"},{"title":"由ES6中的Proxy和Reflect再了解Object","date":"2016-09-18T17:24:58.000Z","description":" 最近在看ES6， 对Object又有了新的理解, 主要体现在 Object的用法和原型上。","_content":"\n## 看看Proxy和Reflect的作用\n\n  概念\n  \n  代理:对外暴露代理对象,操作的时候，表面上操作的是代理对象(proxy)，实际上改变的是目标对象 (target)，从而可以在操作代理对象的时候进行一些处理(handler)后，再传递到目标对象。 (全是个人理解) 没有官方论文引用。\n  \n  反射: 通过类的类类型来操作类的属性。在Javascript中这个作用可以通过Object中的方法来实现，不过为了保证各司其职，逐渐让Reflect做一些她该做的一些事情。而且Reflect有的方法，在Proxy中都有对应，如果在Proxy中调用Reflect的话，其实对应的就是默认行为。\n\n## 由作用到怎么用，这是一个实践过程呢。  \n\n他们的方法可以使用一个5+2+2+2+1+1的模板来总结。\n\n- get() set() has() deleteProperty() difineProperty()//与属性有关的方法\n- getOwnPropertyDescriptor() ownKeys()//Own的属性描述和属性keys\n- getPrototypeOf() setPrototypeOf()//与原型有关的方法\n- isExtensible()判断是否可以扩展 preventExtensions()阻止添加新属性\n- apply()//调用方法有关\n- construct()//和new 有关的\n\n```\nconsole.log(Reflect);\n\n```\n\n![Reflect中的方法](由ES6中的Proxy和Reflect再了解Object/201609201006.PNG)\n\n5+2+2+2+1+1模板出现，下面来看具体的一个使用:\n\n```\nvar target={};\nvar handler={\n    get:function(target,property){\n        console.log('handler get');\n        return target[property];\n    },\n    set(target,propkey,value){\n        console.log(\"handler set value:\"+value);\n        return Reflect.set(...arguments);\n    }\n};\nvar proxy=new Proxy(target,handler);\nproxy.a='a';\nconsole.log(\"target a:\"+target.a);//实际上不知道target，只知道proxy，所以所有的对target的操作都落在proxy上了。\nconsole.log(\"proxy a:\"+proxy.a);//通过proxy取得target上的值，广义上，通过操作proxy来操作target。\n```\n\n![Reflect中的方法](由ES6中的Proxy和Reflect再了解Object/201609201019.PNG)\n在上面的例子中，通过两个方法来说明Proxy和Reflect，我们一个一个看，handler中的set方法，在我们对proxy.a进行赋值的时候，Proxy对象首先通过handler的set，然后输出\"handler set value: a\",紧接着return了Reflect.set(),这里通过反射静态类方法，调用set，然后把proxy传过来的参数通过，各个参数对应起来，就相当于直接调用target['propkey']=value。\n\n> 注:这里的Reflect调用就是实现其默认行为。\n\n到这里实际上我是想直接在研究一下Object上到底还有什么东西？为了衔接，接着分析。\n\n在下一行，输出target的时候，在这里说明一下，因为是做实验，所以我们想通过调用target和调用proxy做一个对比，从而找出Proxy对象的不同，在实际情况中，应该是不知道target的，只知道proxy对象。\n\ntarget的时候，我们看到控制台只输出了\"target a:a\",但是proxy的时候，先输出了\"handler get\"然后才输出\"\"proxy a:a\",就是说调用proxy，实际上是返回就是target的，但是其中proxy做了一些处理。\n\n其他的一些13种方法就不再阐述了，和这两个是一模一样的。\n\n> 注:这其实就是代理模式的实现。\n\n## 回头再看Object \n\n先看一段代码:\n\n```\nvar Person=function(name,age){\n    this['Person function']='Person function';\n    this.name=name;\n    this.age=age;\n    this.getAge=function(){return this.age;};\n}\n\nPerson.prototype={constructor:Person,'Person.prototype':'Person.prototype'};\nvar myPerson=new Person('zhang',20);\nObject.preventExtensions(myPerson);\n//Object.freeze(myPerson);\n\nmyPerson.a='as';\nconsole.log(myPerson);\nconsole.log(myPerson.a);//undifined因为myPerson被freeze了，其中freeze是冻结，preventExtensions是组织扩展，阻止添加新属性\nconsole.log(myPerson.__proto__);\nconsole.log(Object.getPrototypeOf(myPerson));\nconsole.log(Person.prototype);//\n\nconsole.log(myPerson.constructor==Person);//true\nconsole.log(Person.prototype.constructor);\n\n```\n![Reflect中的方法](由ES6中的Proxy和Reflect再了解Object/201609201219.PNG)\n\n```\n {constructor:Person,'Person.prototype':'Person.prototype'};//这是一个神奇的东西\n```\n\nmyPerson.__proto__===Object.getPrototypeOf（myPerson）==Person.prototype\n\n实例的__proto__是这个神奇的东西，她的另一种取法是通过Object.getPrototypeOf(实例)，对应构造函数的prototype也是这个神奇的东西，而这个东西的constructor就是前面的函数。那我们再试一次函数的prototype是什么?\n```\nconsole.log(Person.prototype.constructor.prototype);\n```\n结果显示:\n```\n{constructor:Person,'Person.prototype':'Person.prototype'};还是这个神奇的东西\n\n```\n挺神奇的，是吧?\n\n## Object原型分析\n\n借用一幅图来说明\n\n![原型关系](由ES6中的Proxy和Reflect再了解Object/20160920.png)\n图片来源；[Javascript的原型链图（原创 知乎首发）](https://zhuanlan.zhihu.com/p/22189387)\n非常推荐用户去读一读这篇文章。到此结束！\n\n","source":"_posts/由ES6中的Proxy和Reflect再了解Object.md","raw":"---\ntitle: 由ES6中的Proxy和Reflect再了解Object\ndate: 2016-09-19 01:24:58\ntags: [javascript,Object]\ncategories:  前端 \ndescription: \" 最近在看ES6， 对Object又有了新的理解, 主要体现在 Object的用法和原型上。\"\n---\n\n## 看看Proxy和Reflect的作用\n\n  概念\n  \n  代理:对外暴露代理对象,操作的时候，表面上操作的是代理对象(proxy)，实际上改变的是目标对象 (target)，从而可以在操作代理对象的时候进行一些处理(handler)后，再传递到目标对象。 (全是个人理解) 没有官方论文引用。\n  \n  反射: 通过类的类类型来操作类的属性。在Javascript中这个作用可以通过Object中的方法来实现，不过为了保证各司其职，逐渐让Reflect做一些她该做的一些事情。而且Reflect有的方法，在Proxy中都有对应，如果在Proxy中调用Reflect的话，其实对应的就是默认行为。\n\n## 由作用到怎么用，这是一个实践过程呢。  \n\n他们的方法可以使用一个5+2+2+2+1+1的模板来总结。\n\n- get() set() has() deleteProperty() difineProperty()//与属性有关的方法\n- getOwnPropertyDescriptor() ownKeys()//Own的属性描述和属性keys\n- getPrototypeOf() setPrototypeOf()//与原型有关的方法\n- isExtensible()判断是否可以扩展 preventExtensions()阻止添加新属性\n- apply()//调用方法有关\n- construct()//和new 有关的\n\n```\nconsole.log(Reflect);\n\n```\n\n![Reflect中的方法](由ES6中的Proxy和Reflect再了解Object/201609201006.PNG)\n\n5+2+2+2+1+1模板出现，下面来看具体的一个使用:\n\n```\nvar target={};\nvar handler={\n    get:function(target,property){\n        console.log('handler get');\n        return target[property];\n    },\n    set(target,propkey,value){\n        console.log(\"handler set value:\"+value);\n        return Reflect.set(...arguments);\n    }\n};\nvar proxy=new Proxy(target,handler);\nproxy.a='a';\nconsole.log(\"target a:\"+target.a);//实际上不知道target，只知道proxy，所以所有的对target的操作都落在proxy上了。\nconsole.log(\"proxy a:\"+proxy.a);//通过proxy取得target上的值，广义上，通过操作proxy来操作target。\n```\n\n![Reflect中的方法](由ES6中的Proxy和Reflect再了解Object/201609201019.PNG)\n在上面的例子中，通过两个方法来说明Proxy和Reflect，我们一个一个看，handler中的set方法，在我们对proxy.a进行赋值的时候，Proxy对象首先通过handler的set，然后输出\"handler set value: a\",紧接着return了Reflect.set(),这里通过反射静态类方法，调用set，然后把proxy传过来的参数通过，各个参数对应起来，就相当于直接调用target['propkey']=value。\n\n> 注:这里的Reflect调用就是实现其默认行为。\n\n到这里实际上我是想直接在研究一下Object上到底还有什么东西？为了衔接，接着分析。\n\n在下一行，输出target的时候，在这里说明一下，因为是做实验，所以我们想通过调用target和调用proxy做一个对比，从而找出Proxy对象的不同，在实际情况中，应该是不知道target的，只知道proxy对象。\n\ntarget的时候，我们看到控制台只输出了\"target a:a\",但是proxy的时候，先输出了\"handler get\"然后才输出\"\"proxy a:a\",就是说调用proxy，实际上是返回就是target的，但是其中proxy做了一些处理。\n\n其他的一些13种方法就不再阐述了，和这两个是一模一样的。\n\n> 注:这其实就是代理模式的实现。\n\n## 回头再看Object \n\n先看一段代码:\n\n```\nvar Person=function(name,age){\n    this['Person function']='Person function';\n    this.name=name;\n    this.age=age;\n    this.getAge=function(){return this.age;};\n}\n\nPerson.prototype={constructor:Person,'Person.prototype':'Person.prototype'};\nvar myPerson=new Person('zhang',20);\nObject.preventExtensions(myPerson);\n//Object.freeze(myPerson);\n\nmyPerson.a='as';\nconsole.log(myPerson);\nconsole.log(myPerson.a);//undifined因为myPerson被freeze了，其中freeze是冻结，preventExtensions是组织扩展，阻止添加新属性\nconsole.log(myPerson.__proto__);\nconsole.log(Object.getPrototypeOf(myPerson));\nconsole.log(Person.prototype);//\n\nconsole.log(myPerson.constructor==Person);//true\nconsole.log(Person.prototype.constructor);\n\n```\n![Reflect中的方法](由ES6中的Proxy和Reflect再了解Object/201609201219.PNG)\n\n```\n {constructor:Person,'Person.prototype':'Person.prototype'};//这是一个神奇的东西\n```\n\nmyPerson.__proto__===Object.getPrototypeOf（myPerson）==Person.prototype\n\n实例的__proto__是这个神奇的东西，她的另一种取法是通过Object.getPrototypeOf(实例)，对应构造函数的prototype也是这个神奇的东西，而这个东西的constructor就是前面的函数。那我们再试一次函数的prototype是什么?\n```\nconsole.log(Person.prototype.constructor.prototype);\n```\n结果显示:\n```\n{constructor:Person,'Person.prototype':'Person.prototype'};还是这个神奇的东西\n\n```\n挺神奇的，是吧?\n\n## Object原型分析\n\n借用一幅图来说明\n\n![原型关系](由ES6中的Proxy和Reflect再了解Object/20160920.png)\n图片来源；[Javascript的原型链图（原创 知乎首发）](https://zhuanlan.zhihu.com/p/22189387)\n非常推荐用户去读一读这篇文章。到此结束！\n\n","slug":"由ES6中的Proxy和Reflect再了解Object","published":1,"updated":"2016-09-20T04:52:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz785002sugv5fgxawdie","content":"<h2 id=\"看看Proxy和Reflect的作用\"><a href=\"#看看Proxy和Reflect的作用\" class=\"headerlink\" title=\"看看Proxy和Reflect的作用\"></a>看看Proxy和Reflect的作用</h2><p>  概念</p>\n<p>  代理:对外暴露代理对象,操作的时候，表面上操作的是代理对象(proxy)，实际上改变的是目标对象 (target)，从而可以在操作代理对象的时候进行一些处理(handler)后，再传递到目标对象。 (全是个人理解) 没有官方论文引用。</p>\n<p>  反射: 通过类的类类型来操作类的属性。在Javascript中这个作用可以通过Object中的方法来实现，不过为了保证各司其职，逐渐让Reflect做一些她该做的一些事情。而且Reflect有的方法，在Proxy中都有对应，如果在Proxy中调用Reflect的话，其实对应的就是默认行为。</p>\n<h2 id=\"由作用到怎么用，这是一个实践过程呢。\"><a href=\"#由作用到怎么用，这是一个实践过程呢。\" class=\"headerlink\" title=\"由作用到怎么用，这是一个实践过程呢。\"></a>由作用到怎么用，这是一个实践过程呢。</h2><p>他们的方法可以使用一个5+2+2+2+1+1的模板来总结。</p>\n<ul>\n<li>get() set() has() deleteProperty() difineProperty()//与属性有关的方法</li>\n<li>getOwnPropertyDescriptor() ownKeys()//Own的属性描述和属性keys</li>\n<li>getPrototypeOf() setPrototypeOf()//与原型有关的方法</li>\n<li>isExtensible()判断是否可以扩展 preventExtensions()阻止添加新属性</li>\n<li>apply()//调用方法有关</li>\n<li>construct()//和new 有关的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Reflect);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609201006.PNG\" alt=\"Reflect中的方法\"></p>\n<p>5+2+2+2+1+1模板出现，下面来看具体的一个使用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var target=&#123;&#125;;</span><br><span class=\"line\">var handler=&#123;</span><br><span class=\"line\">    get:function(target,property)&#123;</span><br><span class=\"line\">        console.log(&apos;handler get&apos;);</span><br><span class=\"line\">        return target[property];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set(target,propkey,value)&#123;</span><br><span class=\"line\">        console.log(&quot;handler set value:&quot;+value);</span><br><span class=\"line\">        return Reflect.set(...arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var proxy=new Proxy(target,handler);</span><br><span class=\"line\">proxy.a=&apos;a&apos;;</span><br><span class=\"line\">console.log(&quot;target a:&quot;+target.a);//实际上不知道target，只知道proxy，所以所有的对target的操作都落在proxy上了。</span><br><span class=\"line\">console.log(&quot;proxy a:&quot;+proxy.a);//通过proxy取得target上的值，广义上，通过操作proxy来操作target。</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609201019.PNG\" alt=\"Reflect中的方法\"><br>在上面的例子中，通过两个方法来说明Proxy和Reflect，我们一个一个看，handler中的set方法，在我们对proxy.a进行赋值的时候，Proxy对象首先通过handler的set，然后输出”handler set value: a”,紧接着return了Reflect.set(),这里通过反射静态类方法，调用set，然后把proxy传过来的参数通过，各个参数对应起来，就相当于直接调用target[‘propkey’]=value。</p>\n<blockquote>\n<p>注:这里的Reflect调用就是实现其默认行为。</p>\n</blockquote>\n<p>到这里实际上我是想直接在研究一下Object上到底还有什么东西？为了衔接，接着分析。</p>\n<p>在下一行，输出target的时候，在这里说明一下，因为是做实验，所以我们想通过调用target和调用proxy做一个对比，从而找出Proxy对象的不同，在实际情况中，应该是不知道target的，只知道proxy对象。</p>\n<p>target的时候，我们看到控制台只输出了”target a:a”,但是proxy的时候，先输出了”handler get”然后才输出””proxy a:a”,就是说调用proxy，实际上是返回就是target的，但是其中proxy做了一些处理。</p>\n<p>其他的一些13种方法就不再阐述了，和这两个是一模一样的。</p>\n<blockquote>\n<p>注:这其实就是代理模式的实现。</p>\n</blockquote>\n<h2 id=\"回头再看Object\"><a href=\"#回头再看Object\" class=\"headerlink\" title=\"回头再看Object\"></a>回头再看Object</h2><p>先看一段代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Person=function(name,age)&#123;</span><br><span class=\"line\">    this[&apos;Person function&apos;]=&apos;Person function&apos;;</span><br><span class=\"line\">    this.name=name;</span><br><span class=\"line\">    this.age=age;</span><br><span class=\"line\">    this.getAge=function()&#123;return this.age;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype=&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;</span><br><span class=\"line\">var myPerson=new Person(&apos;zhang&apos;,20);</span><br><span class=\"line\">Object.preventExtensions(myPerson);</span><br><span class=\"line\">//Object.freeze(myPerson);</span><br><span class=\"line\"></span><br><span class=\"line\">myPerson.a=&apos;as&apos;;</span><br><span class=\"line\">console.log(myPerson);</span><br><span class=\"line\">console.log(myPerson.a);//undifined因为myPerson被freeze了，其中freeze是冻结，preventExtensions是组织扩展，阻止添加新属性</span><br><span class=\"line\">console.log(myPerson.__proto__);</span><br><span class=\"line\">console.log(Object.getPrototypeOf(myPerson));</span><br><span class=\"line\">console.log(Person.prototype);//</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(myPerson.constructor==Person);//true</span><br><span class=\"line\">console.log(Person.prototype.constructor);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609201219.PNG\" alt=\"Reflect中的方法\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;//这是一个神奇的东西</span><br></pre></td></tr></table></figure>\n<p>myPerson.<strong>proto</strong>===Object.getPrototypeOf（myPerson）==Person.prototype</p>\n<p>实例的<strong>proto</strong>是这个神奇的东西，她的另一种取法是通过Object.getPrototypeOf(实例)，对应构造函数的prototype也是这个神奇的东西，而这个东西的constructor就是前面的函数。那我们再试一次函数的prototype是什么?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Person.prototype.constructor.prototype);</span><br></pre></td></tr></table></figure></p>\n<p>结果显示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;还是这个神奇的东西</span><br></pre></td></tr></table></figure></p>\n<p>挺神奇的，是吧?</p>\n<h2 id=\"Object原型分析\"><a href=\"#Object原型分析\" class=\"headerlink\" title=\"Object原型分析\"></a>Object原型分析</h2><p>借用一幅图来说明</p>\n<p><img src=\"/.io//20160920.png\" alt=\"原型关系\"><br>图片来源；<a href=\"https://zhuanlan.zhihu.com/p/22189387\" target=\"_blank\" rel=\"noopener\">Javascript的原型链图（原创 知乎首发）</a><br>非常推荐用户去读一读这篇文章。到此结束！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"看看Proxy和Reflect的作用\"><a href=\"#看看Proxy和Reflect的作用\" class=\"headerlink\" title=\"看看Proxy和Reflect的作用\"></a>看看Proxy和Reflect的作用</h2><p>  概念</p>\n<p>  代理:对外暴露代理对象,操作的时候，表面上操作的是代理对象(proxy)，实际上改变的是目标对象 (target)，从而可以在操作代理对象的时候进行一些处理(handler)后，再传递到目标对象。 (全是个人理解) 没有官方论文引用。</p>\n<p>  反射: 通过类的类类型来操作类的属性。在Javascript中这个作用可以通过Object中的方法来实现，不过为了保证各司其职，逐渐让Reflect做一些她该做的一些事情。而且Reflect有的方法，在Proxy中都有对应，如果在Proxy中调用Reflect的话，其实对应的就是默认行为。</p>\n<h2 id=\"由作用到怎么用，这是一个实践过程呢。\"><a href=\"#由作用到怎么用，这是一个实践过程呢。\" class=\"headerlink\" title=\"由作用到怎么用，这是一个实践过程呢。\"></a>由作用到怎么用，这是一个实践过程呢。</h2><p>他们的方法可以使用一个5+2+2+2+1+1的模板来总结。</p>\n<ul>\n<li>get() set() has() deleteProperty() difineProperty()//与属性有关的方法</li>\n<li>getOwnPropertyDescriptor() ownKeys()//Own的属性描述和属性keys</li>\n<li>getPrototypeOf() setPrototypeOf()//与原型有关的方法</li>\n<li>isExtensible()判断是否可以扩展 preventExtensions()阻止添加新属性</li>\n<li>apply()//调用方法有关</li>\n<li>construct()//和new 有关的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Reflect);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609201006.PNG\" alt=\"Reflect中的方法\"></p>\n<p>5+2+2+2+1+1模板出现，下面来看具体的一个使用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var target=&#123;&#125;;</span><br><span class=\"line\">var handler=&#123;</span><br><span class=\"line\">    get:function(target,property)&#123;</span><br><span class=\"line\">        console.log(&apos;handler get&apos;);</span><br><span class=\"line\">        return target[property];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set(target,propkey,value)&#123;</span><br><span class=\"line\">        console.log(&quot;handler set value:&quot;+value);</span><br><span class=\"line\">        return Reflect.set(...arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var proxy=new Proxy(target,handler);</span><br><span class=\"line\">proxy.a=&apos;a&apos;;</span><br><span class=\"line\">console.log(&quot;target a:&quot;+target.a);//实际上不知道target，只知道proxy，所以所有的对target的操作都落在proxy上了。</span><br><span class=\"line\">console.log(&quot;proxy a:&quot;+proxy.a);//通过proxy取得target上的值，广义上，通过操作proxy来操作target。</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609201019.PNG\" alt=\"Reflect中的方法\"><br>在上面的例子中，通过两个方法来说明Proxy和Reflect，我们一个一个看，handler中的set方法，在我们对proxy.a进行赋值的时候，Proxy对象首先通过handler的set，然后输出”handler set value: a”,紧接着return了Reflect.set(),这里通过反射静态类方法，调用set，然后把proxy传过来的参数通过，各个参数对应起来，就相当于直接调用target[‘propkey’]=value。</p>\n<blockquote>\n<p>注:这里的Reflect调用就是实现其默认行为。</p>\n</blockquote>\n<p>到这里实际上我是想直接在研究一下Object上到底还有什么东西？为了衔接，接着分析。</p>\n<p>在下一行，输出target的时候，在这里说明一下，因为是做实验，所以我们想通过调用target和调用proxy做一个对比，从而找出Proxy对象的不同，在实际情况中，应该是不知道target的，只知道proxy对象。</p>\n<p>target的时候，我们看到控制台只输出了”target a:a”,但是proxy的时候，先输出了”handler get”然后才输出””proxy a:a”,就是说调用proxy，实际上是返回就是target的，但是其中proxy做了一些处理。</p>\n<p>其他的一些13种方法就不再阐述了，和这两个是一模一样的。</p>\n<blockquote>\n<p>注:这其实就是代理模式的实现。</p>\n</blockquote>\n<h2 id=\"回头再看Object\"><a href=\"#回头再看Object\" class=\"headerlink\" title=\"回头再看Object\"></a>回头再看Object</h2><p>先看一段代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Person=function(name,age)&#123;</span><br><span class=\"line\">    this[&apos;Person function&apos;]=&apos;Person function&apos;;</span><br><span class=\"line\">    this.name=name;</span><br><span class=\"line\">    this.age=age;</span><br><span class=\"line\">    this.getAge=function()&#123;return this.age;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype=&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;</span><br><span class=\"line\">var myPerson=new Person(&apos;zhang&apos;,20);</span><br><span class=\"line\">Object.preventExtensions(myPerson);</span><br><span class=\"line\">//Object.freeze(myPerson);</span><br><span class=\"line\"></span><br><span class=\"line\">myPerson.a=&apos;as&apos;;</span><br><span class=\"line\">console.log(myPerson);</span><br><span class=\"line\">console.log(myPerson.a);//undifined因为myPerson被freeze了，其中freeze是冻结，preventExtensions是组织扩展，阻止添加新属性</span><br><span class=\"line\">console.log(myPerson.__proto__);</span><br><span class=\"line\">console.log(Object.getPrototypeOf(myPerson));</span><br><span class=\"line\">console.log(Person.prototype);//</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(myPerson.constructor==Person);//true</span><br><span class=\"line\">console.log(Person.prototype.constructor);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609201219.PNG\" alt=\"Reflect中的方法\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;//这是一个神奇的东西</span><br></pre></td></tr></table></figure>\n<p>myPerson.<strong>proto</strong>===Object.getPrototypeOf（myPerson）==Person.prototype</p>\n<p>实例的<strong>proto</strong>是这个神奇的东西，她的另一种取法是通过Object.getPrototypeOf(实例)，对应构造函数的prototype也是这个神奇的东西，而这个东西的constructor就是前面的函数。那我们再试一次函数的prototype是什么?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Person.prototype.constructor.prototype);</span><br></pre></td></tr></table></figure></p>\n<p>结果显示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;还是这个神奇的东西</span><br></pre></td></tr></table></figure></p>\n<p>挺神奇的，是吧?</p>\n<h2 id=\"Object原型分析\"><a href=\"#Object原型分析\" class=\"headerlink\" title=\"Object原型分析\"></a>Object原型分析</h2><p>借用一幅图来说明</p>\n<p><img src=\"/.io//20160920.png\" alt=\"原型关系\"><br>图片来源；<a href=\"https://zhuanlan.zhihu.com/p/22189387\" target=\"_blank\" rel=\"noopener\">Javascript的原型链图（原创 知乎首发）</a><br>非常推荐用户去读一读这篇文章。到此结束！</p>\n"},{"title":"等待,等待,等待...","description":"在日常编程中，总会遇到加载数据的状况，总结一下，使用了一个例子，方便以后使用。","date":"2016-12-16T23:07:30.000Z","_content":"\n\n#### 先上代码\n\n```\n<div id=\"ld\" style=\"position:absolute; opacity:0.5;left:-2px; top:-2px; width:100%; height:100%; background-color:#393939; z-index:1000;\"> \n<div id=\"loading\" style=\"width:1758px;height:700px;display:table-cell;vertical-align:middle;text-align:center;\">\n <img src=\"loading.gif\" style=\"vertical-align:middle;\"/>\n</div>\n</div>\n\n```\n\n以上是为了锁屏，可以放在body里面，显示的时候，此div会因为z-index:1000,所以加载之后，会出现此div的样式；为了美观起见，所以使用了opacity透明0.5再加上颜色效果就好看了许多。\n\n\nwidth heigth 是需要100% 才能覆盖整个body的，\n\nPosition 是为了让div脱离文档流，方便在下一步中display:none;的时候不会影响到其他文档的位置。\n\n最后需要说明一下，里面一个div的宽和高，是为了让图片可以在屏幕的中间，最好可以使用js动态的调整赋值。\n\n```\nloading.style.width=$(window).width();\nloading.style.heigth=$(window).height();\n\n```\n\n#### waiting-waiting-waiting\n![图片](等待-等待-等待/loading.gif)\n\n```\n<script type=\"text/javascript\">\n\t  var count=0;\nsetTimeout(\nfunction(){\nalert(\"111111\");\nshowpage();\nld.style.display=\"none\";\n  f8=true;\n  },1000);\nfunction showpage(){\n\tcount++;\n\tconsole.log(count);\n\tif(count%2==0){\n\tld.style.display=\"none\"; \n\t}\n}\n</script>\n\n```\n\n重要的一句是\n\n```\n\nld.style.display=\"none\";\n\n```\n\ndiv部分的代码写在<head>之后,有些时候页面加载时间很短,就看不到等待的效果,可以把onload函数改成下面的,就可以看到效果了\n```\n\tdiv onload=\"winload();\">\n\t<script language=\"JavaScript\">\n\tfunction winload(){\n\tsetTimeout(\n\tfunction(){\n\talert(\"111111\");\n\tld.style.display=\"none\";\n\t  f8=true;\n\t  },1000);\n\t\n\t}\n</script>\n```\n","source":"_posts/等待-等待-等待.md","raw":"---\ntitle: '等待,等待,等待...'\ntags:\n  - 常用代码\ncategories: 前端\ndescription: 在日常编程中，总会遇到加载数据的状况，总结一下，使用了一个例子，方便以后使用。\ndate: 2016-12-17 07:07:30\n---\n\n\n#### 先上代码\n\n```\n<div id=\"ld\" style=\"position:absolute; opacity:0.5;left:-2px; top:-2px; width:100%; height:100%; background-color:#393939; z-index:1000;\"> \n<div id=\"loading\" style=\"width:1758px;height:700px;display:table-cell;vertical-align:middle;text-align:center;\">\n <img src=\"loading.gif\" style=\"vertical-align:middle;\"/>\n</div>\n</div>\n\n```\n\n以上是为了锁屏，可以放在body里面，显示的时候，此div会因为z-index:1000,所以加载之后，会出现此div的样式；为了美观起见，所以使用了opacity透明0.5再加上颜色效果就好看了许多。\n\n\nwidth heigth 是需要100% 才能覆盖整个body的，\n\nPosition 是为了让div脱离文档流，方便在下一步中display:none;的时候不会影响到其他文档的位置。\n\n最后需要说明一下，里面一个div的宽和高，是为了让图片可以在屏幕的中间，最好可以使用js动态的调整赋值。\n\n```\nloading.style.width=$(window).width();\nloading.style.heigth=$(window).height();\n\n```\n\n#### waiting-waiting-waiting\n![图片](等待-等待-等待/loading.gif)\n\n```\n<script type=\"text/javascript\">\n\t  var count=0;\nsetTimeout(\nfunction(){\nalert(\"111111\");\nshowpage();\nld.style.display=\"none\";\n  f8=true;\n  },1000);\nfunction showpage(){\n\tcount++;\n\tconsole.log(count);\n\tif(count%2==0){\n\tld.style.display=\"none\"; \n\t}\n}\n</script>\n\n```\n\n重要的一句是\n\n```\n\nld.style.display=\"none\";\n\n```\n\ndiv部分的代码写在<head>之后,有些时候页面加载时间很短,就看不到等待的效果,可以把onload函数改成下面的,就可以看到效果了\n```\n\tdiv onload=\"winload();\">\n\t<script language=\"JavaScript\">\n\tfunction winload(){\n\tsetTimeout(\n\tfunction(){\n\talert(\"111111\");\n\tld.style.display=\"none\";\n\t  f8=true;\n\t  },1000);\n\t\n\t}\n</script>\n```\n","slug":"等待-等待-等待","published":1,"updated":"2018-06-08T02:28:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz786002vugv5vly8554q","content":"<h4 id=\"先上代码\"><a href=\"#先上代码\" class=\"headerlink\" title=\"先上代码\"></a>先上代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;ld&quot; style=&quot;position:absolute; opacity:0.5;left:-2px; top:-2px; width:100%; height:100%; background-color:#393939; z-index:1000;&quot;&gt; </span><br><span class=\"line\">&lt;div id=&quot;loading&quot; style=&quot;width:1758px;height:700px;display:table-cell;vertical-align:middle;text-align:center;&quot;&gt;</span><br><span class=\"line\"> &lt;img src=&quot;loading.gif&quot; style=&quot;vertical-align:middle;&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>以上是为了锁屏，可以放在body里面，显示的时候，此div会因为z-index:1000,所以加载之后，会出现此div的样式；为了美观起见，所以使用了opacity透明0.5再加上颜色效果就好看了许多。</p>\n<p>width heigth 是需要100% 才能覆盖整个body的，</p>\n<p>Position 是为了让div脱离文档流，方便在下一步中display:none;的时候不会影响到其他文档的位置。</p>\n<p>最后需要说明一下，里面一个div的宽和高，是为了让图片可以在屏幕的中间，最好可以使用js动态的调整赋值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loading.style.width=$(window).width();</span><br><span class=\"line\">loading.style.heigth=$(window).height();</span><br></pre></td></tr></table></figure>\n<h4 id=\"waiting-waiting-waiting\"><a href=\"#waiting-waiting-waiting\" class=\"headerlink\" title=\"waiting-waiting-waiting\"></a>waiting-waiting-waiting</h4><p><img src=\"/.io//loading.gif\" alt=\"图片\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t  var count=0;</span><br><span class=\"line\">setTimeout(</span><br><span class=\"line\">function()&#123;</span><br><span class=\"line\">alert(&quot;111111&quot;);</span><br><span class=\"line\">showpage();</span><br><span class=\"line\">ld.style.display=&quot;none&quot;;</span><br><span class=\"line\">  f8=true;</span><br><span class=\"line\">  &#125;,1000);</span><br><span class=\"line\">function showpage()&#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\tconsole.log(count);</span><br><span class=\"line\">\tif(count%2==0)&#123;</span><br><span class=\"line\">\tld.style.display=&quot;none&quot;; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>重要的一句是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ld.style.display=&quot;none&quot;;</span><br></pre></td></tr></table></figure>\n<p>div部分的代码写在<head><meta name=\"generator\" content=\"Hexo 3.8.0\">之后,有些时候页面加载时间很短,就看不到等待的效果,可以把onload函数改成下面的,就可以看到效果了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tdiv onload=&quot;winload();&quot;&gt;</span><br><span class=\"line\">\t&lt;script language=&quot;JavaScript&quot;&gt;</span><br><span class=\"line\">\tfunction winload()&#123;</span><br><span class=\"line\">\tsetTimeout(</span><br><span class=\"line\">\tfunction()&#123;</span><br><span class=\"line\">\talert(&quot;111111&quot;);</span><br><span class=\"line\">\tld.style.display=&quot;none&quot;;</span><br><span class=\"line\">\t  f8=true;</span><br><span class=\"line\">\t  &#125;,1000);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></head></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"先上代码\"><a href=\"#先上代码\" class=\"headerlink\" title=\"先上代码\"></a>先上代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;ld&quot; style=&quot;position:absolute; opacity:0.5;left:-2px; top:-2px; width:100%; height:100%; background-color:#393939; z-index:1000;&quot;&gt; </span><br><span class=\"line\">&lt;div id=&quot;loading&quot; style=&quot;width:1758px;height:700px;display:table-cell;vertical-align:middle;text-align:center;&quot;&gt;</span><br><span class=\"line\"> &lt;img src=&quot;loading.gif&quot; style=&quot;vertical-align:middle;&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>以上是为了锁屏，可以放在body里面，显示的时候，此div会因为z-index:1000,所以加载之后，会出现此div的样式；为了美观起见，所以使用了opacity透明0.5再加上颜色效果就好看了许多。</p>\n<p>width heigth 是需要100% 才能覆盖整个body的，</p>\n<p>Position 是为了让div脱离文档流，方便在下一步中display:none;的时候不会影响到其他文档的位置。</p>\n<p>最后需要说明一下，里面一个div的宽和高，是为了让图片可以在屏幕的中间，最好可以使用js动态的调整赋值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loading.style.width=$(window).width();</span><br><span class=\"line\">loading.style.heigth=$(window).height();</span><br></pre></td></tr></table></figure>\n<h4 id=\"waiting-waiting-waiting\"><a href=\"#waiting-waiting-waiting\" class=\"headerlink\" title=\"waiting-waiting-waiting\"></a>waiting-waiting-waiting</h4><p><img src=\"/.io//loading.gif\" alt=\"图片\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t  var count=0;</span><br><span class=\"line\">setTimeout(</span><br><span class=\"line\">function()&#123;</span><br><span class=\"line\">alert(&quot;111111&quot;);</span><br><span class=\"line\">showpage();</span><br><span class=\"line\">ld.style.display=&quot;none&quot;;</span><br><span class=\"line\">  f8=true;</span><br><span class=\"line\">  &#125;,1000);</span><br><span class=\"line\">function showpage()&#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\tconsole.log(count);</span><br><span class=\"line\">\tif(count%2==0)&#123;</span><br><span class=\"line\">\tld.style.display=&quot;none&quot;; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>重要的一句是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ld.style.display=&quot;none&quot;;</span><br></pre></td></tr></table></figure>\n<p>div部分的代码写在<head><meta name=\"generator\" content=\"Hexo 3.8.0\">之后,有些时候页面加载时间很短,就看不到等待的效果,可以把onload函数改成下面的,就可以看到效果了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tdiv onload=&quot;winload();&quot;&gt;</span><br><span class=\"line\">\t&lt;script language=&quot;JavaScript&quot;&gt;</span><br><span class=\"line\">\tfunction winload()&#123;</span><br><span class=\"line\">\tsetTimeout(</span><br><span class=\"line\">\tfunction()&#123;</span><br><span class=\"line\">\talert(&quot;111111&quot;);</span><br><span class=\"line\">\tld.style.display=&quot;none&quot;;</span><br><span class=\"line\">\t  f8=true;</span><br><span class=\"line\">\t  &#125;,1000);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></head></p>\n"},{"title":"重装CENTOS一系列操作","date":"2018-03-01T17:43:26.000Z","description":"手贱，删掉引导盘内容，又重新安装，幸好之前的资料已经上传的github了","_content":"\n\n## 首先，安装的时候，\n\n使用UltraISO(软碟通)进行刻录U盘，修改盘符名为CENTOS\n\n启动选择U盘启动，\n\n选中install   按table键，修改label\n\n将菜单中vmlinuz initrd=initrd.imginst.stage2=hd:LABEL=CentOS\\x207\\x20x86_64 rd.live.check quiet\n\n改为：vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CENTOS quite\n\n以上都是系统安装的问题\n\n引导问题 使用EasyBCD修改\n\nUltraISO EasyBCD 百度有资源下载\n\n## 安装之后，\n\n资源在\n\n进入系统需要修改 java python  pip  默认路径oracle jdk 8+  python3 \n\n之后安装 中文键盘  yum install\"@Chinese support\"\n中文  https://blog.csdn.net/sunxiaopengsun/article/details/53965643\n\nteamviewer eclipse MARS  hadoop  anaconda\n\npython 库 g++ numpy pands matplotlib sklearn xgboost tensroflow \n\n\nbash Anaconda-2.1.0-Linux-x86_64.sh\n\n#### 环境变量\n\n解压缩之后环境变量\n\n`vim .bashrc`\n\nexport ANACONDA_HOME=/root/anaconda3\nexport PYTHON_HOME=/root/install/Python-3.6.5\nexport JDK_HOME=/root/install/jdk1.8.0_161\nexport CLASSPATH=.;$JDK_HOME/lib\nexport PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin;/root/bin\nexport PATH=$PYTHON_HOME:$ANACONDA_HOME/bin:$JDK_HOME/bin:$PATH\n\n`source .bashrc`\n#### 修改jupyter\n[jupyter 默认配置](https://www.cnblogs.com/dpf-learn/p/7941960.html)\n运行\n`jupyter notebook --generate-config --allow-root`\n\n修改： /root/.jupyter/jupyter_notebook_config.py  \n\nvim .jupyter/jupyter_notebook_config.py \n\n```\n62 #c.NotebookApp.allow_root = False  \n去掉62行的注释，并修改成True即可解决root权限运行的问题。  \n163 #c.NotebookApp.ip = 'localhost'  \n去掉注释，并把localhost改成0.0.0.0，这样就可以外部访问了，默认只有在本机可以访问的；  \n163 c.NotebookApp.ip = '0.0.0.0'  \n\nc.NotebookApp.base_project_url = '/root/jupyter'\n\n203 #c.NotebookApp.notebook_dir = '/root/jupyter'  \n改成如下，这样就会默认把notebook上创建的文件保存到指定目录下；需要事先创建。   \n203 c.NotebookApp.notebook_dir = u'/opt/jupyter'  \n```\n\n#### tensorflow\n\n[conda 安装tensorflow](https://www.cnblogs.com/willnote/p/6746499.html)\n\n修改镜像源\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --set show_channel_urls yes\n\nconda install numpy   #测试是否添加成功\n\n之后会自动在用户根目录生成“.condarc”文件，Ubuntu环境下路径为~/.condarc，Windows环境下路径为C:\\用户\\your_user_name\\.condarc\n\nchannels:\n - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n - defaults\nshow_channel_urls: yes\n\n如果要删除镜像，直接删除“.condarc”文件即可\n\n`anaconda search -t conda tensorflow`\n`anaconda show anaconda/tensorflow-base`对应版本\n`conda install --channel https://conda.anaconda.org/anaconda tensorflow-base` 对应https\n\n#### xgboost\n\n需要 `yum install gcc gcc-c++`\n\n`pip install xgboost` or ` conda install xgboost`\n\n\n","source":"_posts/重装CENTOS一系列操作.md","raw":"---\ntitle: 重装CENTOS一系列操作\ndate: 2018-03-02 01:43:26\ntags: Linux\ncategories: [Linux]\ndescription: \"手贱，删掉引导盘内容，又重新安装，幸好之前的资料已经上传的github了\"\n---\n\n\n## 首先，安装的时候，\n\n使用UltraISO(软碟通)进行刻录U盘，修改盘符名为CENTOS\n\n启动选择U盘启动，\n\n选中install   按table键，修改label\n\n将菜单中vmlinuz initrd=initrd.imginst.stage2=hd:LABEL=CentOS\\x207\\x20x86_64 rd.live.check quiet\n\n改为：vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CENTOS quite\n\n以上都是系统安装的问题\n\n引导问题 使用EasyBCD修改\n\nUltraISO EasyBCD 百度有资源下载\n\n## 安装之后，\n\n资源在\n\n进入系统需要修改 java python  pip  默认路径oracle jdk 8+  python3 \n\n之后安装 中文键盘  yum install\"@Chinese support\"\n中文  https://blog.csdn.net/sunxiaopengsun/article/details/53965643\n\nteamviewer eclipse MARS  hadoop  anaconda\n\npython 库 g++ numpy pands matplotlib sklearn xgboost tensroflow \n\n\nbash Anaconda-2.1.0-Linux-x86_64.sh\n\n#### 环境变量\n\n解压缩之后环境变量\n\n`vim .bashrc`\n\nexport ANACONDA_HOME=/root/anaconda3\nexport PYTHON_HOME=/root/install/Python-3.6.5\nexport JDK_HOME=/root/install/jdk1.8.0_161\nexport CLASSPATH=.;$JDK_HOME/lib\nexport PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin;/root/bin\nexport PATH=$PYTHON_HOME:$ANACONDA_HOME/bin:$JDK_HOME/bin:$PATH\n\n`source .bashrc`\n#### 修改jupyter\n[jupyter 默认配置](https://www.cnblogs.com/dpf-learn/p/7941960.html)\n运行\n`jupyter notebook --generate-config --allow-root`\n\n修改： /root/.jupyter/jupyter_notebook_config.py  \n\nvim .jupyter/jupyter_notebook_config.py \n\n```\n62 #c.NotebookApp.allow_root = False  \n去掉62行的注释，并修改成True即可解决root权限运行的问题。  \n163 #c.NotebookApp.ip = 'localhost'  \n去掉注释，并把localhost改成0.0.0.0，这样就可以外部访问了，默认只有在本机可以访问的；  \n163 c.NotebookApp.ip = '0.0.0.0'  \n\nc.NotebookApp.base_project_url = '/root/jupyter'\n\n203 #c.NotebookApp.notebook_dir = '/root/jupyter'  \n改成如下，这样就会默认把notebook上创建的文件保存到指定目录下；需要事先创建。   \n203 c.NotebookApp.notebook_dir = u'/opt/jupyter'  \n```\n\n#### tensorflow\n\n[conda 安装tensorflow](https://www.cnblogs.com/willnote/p/6746499.html)\n\n修改镜像源\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --set show_channel_urls yes\n\nconda install numpy   #测试是否添加成功\n\n之后会自动在用户根目录生成“.condarc”文件，Ubuntu环境下路径为~/.condarc，Windows环境下路径为C:\\用户\\your_user_name\\.condarc\n\nchannels:\n - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n - defaults\nshow_channel_urls: yes\n\n如果要删除镜像，直接删除“.condarc”文件即可\n\n`anaconda search -t conda tensorflow`\n`anaconda show anaconda/tensorflow-base`对应版本\n`conda install --channel https://conda.anaconda.org/anaconda tensorflow-base` 对应https\n\n#### xgboost\n\n需要 `yum install gcc gcc-c++`\n\n`pip install xgboost` or ` conda install xgboost`\n\n\n","slug":"重装CENTOS一系列操作","published":1,"updated":"2018-04-04T09:00:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz787002yugv5cxaydtxu","content":"<h2 id=\"首先，安装的时候，\"><a href=\"#首先，安装的时候，\" class=\"headerlink\" title=\"首先，安装的时候，\"></a>首先，安装的时候，</h2><p>使用UltraISO(软碟通)进行刻录U盘，修改盘符名为CENTOS</p>\n<p>启动选择U盘启动，</p>\n<p>选中install   按table键，修改label</p>\n<p>将菜单中vmlinuz initrd=initrd.imginst.stage2=hd:LABEL=CentOS\\x207\\x20x86_64 rd.live.check quiet</p>\n<p>改为：vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CENTOS quite</p>\n<p>以上都是系统安装的问题</p>\n<p>引导问题 使用EasyBCD修改</p>\n<p>UltraISO EasyBCD 百度有资源下载</p>\n<h2 id=\"安装之后，\"><a href=\"#安装之后，\" class=\"headerlink\" title=\"安装之后，\"></a>安装之后，</h2><p>资源在</p>\n<p>进入系统需要修改 java python  pip  默认路径oracle jdk 8+  python3 </p>\n<p>之后安装 中文键盘  yum install”@Chinese support”<br>中文  <a href=\"https://blog.csdn.net/sunxiaopengsun/article/details/53965643\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sunxiaopengsun/article/details/53965643</a></p>\n<p>teamviewer eclipse MARS  hadoop  anaconda</p>\n<p>python 库 g++ numpy pands matplotlib sklearn xgboost tensroflow </p>\n<p>bash Anaconda-2.1.0-Linux-x86_64.sh</p>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>解压缩之后环境变量</p>\n<p><code>vim .bashrc</code></p>\n<p>export ANACONDA_HOME=/root/anaconda3<br>export PYTHON_HOME=/root/install/Python-3.6.5<br>export JDK_HOME=/root/install/jdk1.8.0_161<br>export CLASSPATH=.;$JDK_HOME/lib<br>export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin;/root/bin<br>export PATH=$PYTHON_HOME:$ANACONDA_HOME/bin:$JDK_HOME/bin:$PATH</p>\n<p><code>source .bashrc</code></p>\n<h4 id=\"修改jupyter\"><a href=\"#修改jupyter\" class=\"headerlink\" title=\"修改jupyter\"></a>修改jupyter</h4><p><a href=\"https://www.cnblogs.com/dpf-learn/p/7941960.html\" target=\"_blank\" rel=\"noopener\">jupyter 默认配置</a><br>运行<br><code>jupyter notebook --generate-config --allow-root</code></p>\n<p>修改： /root/.jupyter/jupyter_notebook_config.py  </p>\n<p>vim .jupyter/jupyter_notebook_config.py </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">62 #c.NotebookApp.allow_root = False  </span><br><span class=\"line\">去掉62行的注释，并修改成True即可解决root权限运行的问题。  </span><br><span class=\"line\">163 #c.NotebookApp.ip = &apos;localhost&apos;  </span><br><span class=\"line\">去掉注释，并把localhost改成0.0.0.0，这样就可以外部访问了，默认只有在本机可以访问的；  </span><br><span class=\"line\">163 c.NotebookApp.ip = &apos;0.0.0.0&apos;  </span><br><span class=\"line\"></span><br><span class=\"line\">c.NotebookApp.base_project_url = &apos;/root/jupyter&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">203 #c.NotebookApp.notebook_dir = &apos;/root/jupyter&apos;  </span><br><span class=\"line\">改成如下，这样就会默认把notebook上创建的文件保存到指定目录下；需要事先创建。   </span><br><span class=\"line\">203 c.NotebookApp.notebook_dir = u&apos;/opt/jupyter&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"tensorflow\"><a href=\"#tensorflow\" class=\"headerlink\" title=\"tensorflow\"></a>tensorflow</h4><p><a href=\"https://www.cnblogs.com/willnote/p/6746499.html\" target=\"_blank\" rel=\"noopener\">conda 安装tensorflow</a></p>\n<p>修改镜像源<br>conda config –add channels <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config –set show_channel_urls yes</p>\n<p>conda install numpy   #测试是否添加成功</p>\n<p>之后会自动在用户根目录生成“.condarc”文件，Ubuntu环境下路径为~/.condarc，Windows环境下路径为C:\\用户\\your_user_name.condarc</p>\n<p>channels:</p>\n<ul>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a></li>\n<li>defaults<br>show_channel_urls: yes</li>\n</ul>\n<p>如果要删除镜像，直接删除“.condarc”文件即可</p>\n<p><code>anaconda search -t conda tensorflow</code><br><code>anaconda show anaconda/tensorflow-base</code>对应版本<br><code>conda install --channel https://conda.anaconda.org/anaconda tensorflow-base</code> 对应https</p>\n<h4 id=\"xgboost\"><a href=\"#xgboost\" class=\"headerlink\" title=\"xgboost\"></a>xgboost</h4><p>需要 <code>yum install gcc gcc-c++</code></p>\n<p><code>pip install xgboost</code> or <code>conda install xgboost</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"首先，安装的时候，\"><a href=\"#首先，安装的时候，\" class=\"headerlink\" title=\"首先，安装的时候，\"></a>首先，安装的时候，</h2><p>使用UltraISO(软碟通)进行刻录U盘，修改盘符名为CENTOS</p>\n<p>启动选择U盘启动，</p>\n<p>选中install   按table键，修改label</p>\n<p>将菜单中vmlinuz initrd=initrd.imginst.stage2=hd:LABEL=CentOS\\x207\\x20x86_64 rd.live.check quiet</p>\n<p>改为：vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CENTOS quite</p>\n<p>以上都是系统安装的问题</p>\n<p>引导问题 使用EasyBCD修改</p>\n<p>UltraISO EasyBCD 百度有资源下载</p>\n<h2 id=\"安装之后，\"><a href=\"#安装之后，\" class=\"headerlink\" title=\"安装之后，\"></a>安装之后，</h2><p>资源在</p>\n<p>进入系统需要修改 java python  pip  默认路径oracle jdk 8+  python3 </p>\n<p>之后安装 中文键盘  yum install”@Chinese support”<br>中文  <a href=\"https://blog.csdn.net/sunxiaopengsun/article/details/53965643\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sunxiaopengsun/article/details/53965643</a></p>\n<p>teamviewer eclipse MARS  hadoop  anaconda</p>\n<p>python 库 g++ numpy pands matplotlib sklearn xgboost tensroflow </p>\n<p>bash Anaconda-2.1.0-Linux-x86_64.sh</p>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>解压缩之后环境变量</p>\n<p><code>vim .bashrc</code></p>\n<p>export ANACONDA_HOME=/root/anaconda3<br>export PYTHON_HOME=/root/install/Python-3.6.5<br>export JDK_HOME=/root/install/jdk1.8.0_161<br>export CLASSPATH=.;$JDK_HOME/lib<br>export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin;/root/bin<br>export PATH=$PYTHON_HOME:$ANACONDA_HOME/bin:$JDK_HOME/bin:$PATH</p>\n<p><code>source .bashrc</code></p>\n<h4 id=\"修改jupyter\"><a href=\"#修改jupyter\" class=\"headerlink\" title=\"修改jupyter\"></a>修改jupyter</h4><p><a href=\"https://www.cnblogs.com/dpf-learn/p/7941960.html\" target=\"_blank\" rel=\"noopener\">jupyter 默认配置</a><br>运行<br><code>jupyter notebook --generate-config --allow-root</code></p>\n<p>修改： /root/.jupyter/jupyter_notebook_config.py  </p>\n<p>vim .jupyter/jupyter_notebook_config.py </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">62 #c.NotebookApp.allow_root = False  </span><br><span class=\"line\">去掉62行的注释，并修改成True即可解决root权限运行的问题。  </span><br><span class=\"line\">163 #c.NotebookApp.ip = &apos;localhost&apos;  </span><br><span class=\"line\">去掉注释，并把localhost改成0.0.0.0，这样就可以外部访问了，默认只有在本机可以访问的；  </span><br><span class=\"line\">163 c.NotebookApp.ip = &apos;0.0.0.0&apos;  </span><br><span class=\"line\"></span><br><span class=\"line\">c.NotebookApp.base_project_url = &apos;/root/jupyter&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">203 #c.NotebookApp.notebook_dir = &apos;/root/jupyter&apos;  </span><br><span class=\"line\">改成如下，这样就会默认把notebook上创建的文件保存到指定目录下；需要事先创建。   </span><br><span class=\"line\">203 c.NotebookApp.notebook_dir = u&apos;/opt/jupyter&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"tensorflow\"><a href=\"#tensorflow\" class=\"headerlink\" title=\"tensorflow\"></a>tensorflow</h4><p><a href=\"https://www.cnblogs.com/willnote/p/6746499.html\" target=\"_blank\" rel=\"noopener\">conda 安装tensorflow</a></p>\n<p>修改镜像源<br>conda config –add channels <a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config –set show_channel_urls yes</p>\n<p>conda install numpy   #测试是否添加成功</p>\n<p>之后会自动在用户根目录生成“.condarc”文件，Ubuntu环境下路径为~/.condarc，Windows环境下路径为C:\\用户\\your_user_name.condarc</p>\n<p>channels:</p>\n<ul>\n<li><a href=\"https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a></li>\n<li>defaults<br>show_channel_urls: yes</li>\n</ul>\n<p>如果要删除镜像，直接删除“.condarc”文件即可</p>\n<p><code>anaconda search -t conda tensorflow</code><br><code>anaconda show anaconda/tensorflow-base</code>对应版本<br><code>conda install --channel https://conda.anaconda.org/anaconda tensorflow-base</code> 对应https</p>\n<h4 id=\"xgboost\"><a href=\"#xgboost\" class=\"headerlink\" title=\"xgboost\"></a>xgboost</h4><p>需要 <code>yum install gcc gcc-c++</code></p>\n<p><code>pip install xgboost</code> or <code>conda install xgboost</code></p>\n"},{"title":"2016年个人总结","date":"2017-01-22T22:27:27.000Z","description":"2016年已经过去，总结一下。","_content":"\n\n## 首先梳理一下去年的工作生活\n\n#### 从时间上\n\n过完寒假，基本也宣告第一个项目失败了，不了了之。真心对不起老师的辛勤指导，后面再说经历体会。紧接着开始了第二个项目，从4月中旬到9月中旬左右，五到六个月，大家都很上心，想做好一个，来证明一下自己的能力，也是为之后找工作的时候可以拿出一个完整的项目，可惜啊，可惜。第二个项目到暑假结束，老板也是体会到了我们的进度，而且到十月份大家都开始找工作了，准备一些考研保研的材料等等，就把这个项目停下来了。在此同时也开始了加入了找工作的大军。到十一月底，来到深圳，开始新的经历，来深圳还是希望一个人也可以来，之后再说。然后就到2017年1月23号了，打工正式两个月。后天就准备回家，过大年。\n\n#### 从空间上\n\n去年来到过以下城市：徐州 武汉 枣庄 合肥 西安 南阳 东莞 深圳 惠州 广州 \n\n我觉得说空间上的经历展现一个人的经历，待在一个地方，我觉得不是我的风格，虽然说，某些地方也是蜻蜓点水一样，但是都有回忆。先说徐州，我大徐州，就不多介绍了，历史文化名城，大学已经在此三年了，说真的，现在写回忆的时候，还是挺怀念的。写上徐州的另一个原因，是今年国庆之后，带父母来徐州转了一圈，这可能是今年最开心的时光吧。一共拍了300多张，然后挑选比较好的，洗了20张，看到父母的笑容，虽然花了一些money，不过物有所值，花的值，就待花。\n\n武汉 参加云栖大会，第一次参加这么高规格的会议，虽然时间赶得比较紧，好歹也算见识了大场面，虽然只是参与的一员，也没学到什么意义上的知识，不过见识方面，那是可以的。武汉今年也看到你的涝灾，希望你可以好好的。\n\n枣庄 这也是一个和徐州类似的城市，我去的准确的说是下面的一个区-----台儿庄，晚上游台儿庄，那景象。真叫一个美，好有一番江南水乡的感觉，而且还和一个人，一起，枣庄，你好，一起走。\n\n合肥 面试，首次接触那么好的公司，面试都在酒店里面，就好像“约会”，他们从杭州到合肥，我为了赴约，也行徐州到了合肥，但是双方好感不佳，约谈失败，就准备找下一个了，不过那次面试，之后，我也知道了自己的水平，就像水壶里面的水，不倒出来怎么知道你有多少货，拿出来测一测，看一看究竟，就更好的衡量出来水平。合肥也是，我之前转车经常走的路线，合肥的包孝肃公，一共去了两次包孝肃公祠堂，第一次是游玩的心态，那是2015年过年回家在此转车，也是遇到下大雪，这次来，完全是为了敬仰一下他，向他看齐，刚正不阿！\n\n西安 找工作的城市，一共去了两次西安，因为之前又从西安转过车，又离家很近，无形中就增加了很多好感，这个城市真的很厚重，很符合我的气质，自大了，特别是来到深圳之后，更加的觉得西安就是“家”，一样，当初啊！！！从西安回家，太近了，可以周五回去，周天再回西安，在家玩的妥妥的。\n\n南阳 不用多说了，2016在家呆的时间不长，但是回去的次数挺多的，从寒假，到五一，暑假，十一，基本上总没事就回家转一圈，当初去徐州，真的离家不远，真的真的。现在回趟家，挺难得，怀念。\n\n东莞 为什么把它列出来呢，一个学生，第一次变成一个打工仔，到的第一站就是东莞，从一下火车就能体会到南方的“热情”，幸好，我在火车上就换下了羽绒服，穿上短袖，一身夏天的装束。之后又到东莞是星期天无聊和陶小陶一起去了虎门，出门走走，见识不小。还有一件和东莞有关的是新年的第一个朋友就是东莞的。\n\n深圳 这个爱恨交加的城市，到现在为止，深圳能一个人转的地方，应该是都去了，从梅林开始，也是住的地方，塘朗山，梅林水库，到莲花山，市民中心，充分利用下班时间闲逛的结果，很享受，然后是红树林，骑行，还不要脸的去了两次。还去后海跨海大桥，近距离看了一些没见过的汽车，和车牌，还吃了一碗面----京城御面堂。梧桐山，看到了盐田港，香港。哦，还有大梅沙小梅沙，这在三年前来深圳的时候就到了，那也是第一次看到大海，这次又看了较场尾，海是一个让人着迷的地方。很喜欢去安排时间，计划着刚好到，算好地铁什么时候到，到哪里转车最快最方便，呢段时间真是没谁的了。生活上基本就这些了。然后工作，真的喜欢编程，有挑战的编程，而不是重复，随便玩。这两月就用了一个东西MQ，其他的，自己感觉收获很小，其他细节在体会中说。还有在深圳看了罗胖的跨年演讲，还有在这上面认识的新年朋友，大老远的从东莞跑过来，真的是挺让人佩服的，我相信还有很多更远的朋友，我们一起度过呢个夜晚。除了工作方面，深圳的交通还不错，北边一个北环大道，南边一个滨海大道,中间随便玩，最烦人的是深圳的跨主干道，很多都是人行天桥，让人很是麻烦，一点都不注意行人的感受，这点，very bad！！ 深圳的另外一个特点就是新鲜事物的发源地，这也让我知道了，之前总是有什么一些试点，什么的，总是在北上广深大城市，因为这些城市，总是可以很快的接受这些新鲜事物，而且会很好的去改掉一些不适用的。像共享单车，我在这里已经骑过无数次，但是和家人的时候，还是一个很难解释的一个概念，但是和同学说的时候，则很好解释，有的时候思想教化程度挺严重的。哎要说啥子来的，本意是大城市和小城市之间的差距大。让我解释的太偏离主题。\n\n惠州 小而美的城市，来两次惠州了，大一大二，本来想着以后，很小机会来了，大三这刚过，大四就又来了，人生有的时候就是这么让人交错。从深圳这边到惠州，汽车两个半小时，真的是挺近的，另一个要说的就是这边的交通，实在是太方便了，“小的士”，大的士，公交，地铁，城际铁路，高铁，你能想象，从城市的一北边做个火车到城市的南段吗？这种事情我已经干过不少次了。当然了，这只有在相当发达的经济区域才会有的吧。长三角，珠三角，环渤海，说真的，还不错，这点应该放在深圳呢个空间说的吧。既然到惠州这个空间了，就放这里吧。\n\n广州 去广州到了白云机场，这才是重点，谁知道以后飞机和我还有没有缘分，这是第一次到飞机场，真的是太豪华了，我这从小地方来的，只要不被吓呆就已经是万幸的了。包括到什么酒店，好高端，好大气。另外从广州南到白云，两个小时的地铁，你能想象这个城市有多大吗？\n\n\n## 体会收获和感悟\n\n#### 体会  以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会.\n\n##### 报销，理财之类\n\n与钱有关的事情都是大事，什么补贴，报销等等之类，在学校的项目报销，很严格，花钱干了什么，为什么，每一笔钱的报销都是有依有据的，不过这样也是好的，我自己呢，也吃亏买了个教训，本来算下来的报销挺多的，但是好多都是不符合规定的，因此，就被刷下来了大部分。还有现在的报销也是难上加难，真的难以想象，过年的给的红包还要，要贴票据，到10月份还没发下来，我真的是，不过也是，钱嘛，都稀罕，运营的总希望能少则少，能推迟则推迟，这就是之前学到的钱的时间价值，很昂贵，理财，方面呢，也是不见起色，毕刚出来，之前的钱都dong光了，而且还能看到一个货币的膨胀，初中200，高中400，大学800，月月光，真的养活自己也是一件难事了，从一餐2块到5块到10块上下，一直到现在一餐25块左右，余华告诉我，要好好的《活着》。借用去年流行的一句话：挣钱不易，花钱易，且花且珍惜。\n\n##### 交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。\n\n之前总想着是在会议上，讲座上，主要是学知识，现在看来错了，错的离谱。实际上只是听听，是没有什么收获的，而且听到的现在都是僵化的，硬知识，我现在都有这种体会，自己知道的不少，信息量也还可以，就是很难串起来，能真正的融会贯通，这也是一种能力。这是其一，其二是能一起参加会议至少都是对此方面感兴趣的，肯定都有一定的看法，这是一个很好的话题，可是我发觉自己很难提出自己的观点，应该是还停留在表面，没有深入去思考，这和我的价值观也有很大的问题，总是随和，附和，与世无争，有时候讨论也是一种艺术，只有去辩论，才能更明。其三是有口才一定是人才，是人才的不一定有口才。肚里有货，说的出，让人信服，OK。说不出，即使才高八斗，没用，一定要常用举例说明，例子是重要的，不要做标题党，论点党，一定要有实例支撑你的论点，才能说明白。\n\n##### 自我表达能力，说的和别人理解的偏差太大。\n\n什么时候真正意识到这点的呢，公司的总结会上，我了一大堆，但是实际上的表达让别人觉得我就说了一个论点，能力强，没什么任务，比较闲。可是，我要真正要表达的是什么？我来是学知识，提高能力的，不是当坐台的。给布置任务要考虑客观因素，不要总是下班了，周五了来布置工作。这才是我想说明自己的观点的，可是呢？最终就让别人觉得我不可一世，实际上我是很谦虚的。只要是能说服我的，能说明缘由的，都可以接受。这个东西需要练习，以后要好好注意一下这点，词不达意，要人命。\n\n##### 工作收获\n\n失误，核对，一定要完成，说没用，做出来才可以。头脑要警惕（别得意）。\n如果自己不去做，永远不知道能不能做好，不能因为未来可能做不好，而不去做。行动起来。\n\n\n##### 前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门\n\n今年对于技术方面很是担忧，因为感觉不到那种明显的提升了，而且热情也明显有了滑落。对于前端，对于css的学习可以有明显的提升，像定位，盒模型，行高基线等，在工作中有挺大的提升，因为没碰数据方面，所有主要工作就是修改样式，这方面也确实不错，比之前的认识更深入了。但是javascript有遗忘，因为现在很少写，不过不能丢。在来深圳之前，js有过系统的看过一遍ES6的语法，还是能够接受，不过现在到实际应用方面，并没有参与太多，还不知道真正的水平。还有就是怎样优雅的写js，也是一个难点，不能总是function吧，这样怎么看都low了点，这点在明年要有一个提升。这是一个瓶颈，要克服，要突破。\n\n对于java后端，基本的只是已经掌握的差不多了，余下的是巩固基础和技术提升，基础巩固放面，看《thinking in java》，明年至少要结合代码把上面的示例演示一遍。如果能多看代码，并理解工作上的这套框架，就更好了。然后是对于hadoop zookeeper Spark等框架的理解，要有一个详细的理解，知道什么情况下应该使用什么工具。这也算是2017年的计划之一吧。\n\n机器学习，这是一个漫长的过程，但是也是一个很快的过程，如果2017能够入行，我对这个入行的标准是：能够做一个可用的项目。说白了还是代码能过。这引入了下一个体会。\n\n##### 英语 高数 线代 概率论的重要性\n\n这些基础学科，真的太重要了。英语，重要性不用多说了，我也有意识的提高它，看一些知道大致概念的pdf等，这个需要什么？积累，都是扯淡，需要能看懂，无字幕外国电影，外国书籍，这对于我来说还有不小的距离。虽然我们平时用不上，说话交流也不用，不过这个行业不会英语，出去开会什么的，怎么和别人交流，怎么讨论问题？再者说了，即使在github上面提个Issue，还是经常性的吧，总不能每次一个词一个词的去百度翻译吧？这样，效率是一方面，另一方面是意思真的能达到要求吗？\n\n数学的重要性，在2016年看机器学习的课程的时候，很多公式，数学公式莫名其妙的出来了，很多需要再认真想一想才能理解，有的甚至是不理解的，只是看一下，并没有去了解，这种线代矩阵转置、概率等问题，很困扰人，2016年暑假，我就意识到了当初把这些书都给卖了，好后悔，好后悔。我可是从来没有卖过书的人，看来书不能丢，不能丢，以后，一定要珍惜。不能丢。\n\n##### 见识\n\n在北方生活20多年的我，来到这里见了很多没见过的东西，特别是这两天，小金橘，青枣，榨菜，香蕉，椰树，“胡子叔”----大榕树，冬日里的桃花等东西。再加上自己在北方这么多年的生活，可谓是“走过南，闯过北”，这种经历在我的人生中，我认为是挺宝贵的，希望今后能多一些这种新奇的东西。\n    \n## 计划\n\n##### 需要提升的方面\n\n财务经济（慢慢学着理财，记账），业余爱好（轮滑，太极，学学网球），多参加一些活动，英语水平，自我表达能力\n\n#####  明年短期\n\n- 把前端知识系统起来。\n- thinking in java代码演示。\n- hadoop spark zookeeper等框架的理解。\n- 攒点钱------感觉这个最现实了，攒个两三万。\n- 身体方面，要保重，跑起来，运动起来。\n- 学学花，学学咖啡，学学植物，学学养生。这都是瞎扯的。\n\n\n#####  三年中期\n\n- 差不多父母也老了\n- 差不多该准备结婚了\n- 差不多到人生关键点了\n- 差不多也快要回家生活了。\n- 差不多玩的也够可以的了吧。\n\n\n#####  八年十年长期\n\n- 这个最不现实。\n- 这个也最影响人。\n- 这个是最扯的一个。\n- 这个是绝对要考虑的。\n\n2017.01.24 慕小白 于深圳宝安","source":"_posts/2016年个人总结.md","raw":"---\ntitle: 2016年个人总结\ndate: 2017-01-23 06:27:27\ntags: 2016\ncategories: 总结\ndescription: \"2016年已经过去，总结一下。\"\n---\n\n\n## 首先梳理一下去年的工作生活\n\n#### 从时间上\n\n过完寒假，基本也宣告第一个项目失败了，不了了之。真心对不起老师的辛勤指导，后面再说经历体会。紧接着开始了第二个项目，从4月中旬到9月中旬左右，五到六个月，大家都很上心，想做好一个，来证明一下自己的能力，也是为之后找工作的时候可以拿出一个完整的项目，可惜啊，可惜。第二个项目到暑假结束，老板也是体会到了我们的进度，而且到十月份大家都开始找工作了，准备一些考研保研的材料等等，就把这个项目停下来了。在此同时也开始了加入了找工作的大军。到十一月底，来到深圳，开始新的经历，来深圳还是希望一个人也可以来，之后再说。然后就到2017年1月23号了，打工正式两个月。后天就准备回家，过大年。\n\n#### 从空间上\n\n去年来到过以下城市：徐州 武汉 枣庄 合肥 西安 南阳 东莞 深圳 惠州 广州 \n\n我觉得说空间上的经历展现一个人的经历，待在一个地方，我觉得不是我的风格，虽然说，某些地方也是蜻蜓点水一样，但是都有回忆。先说徐州，我大徐州，就不多介绍了，历史文化名城，大学已经在此三年了，说真的，现在写回忆的时候，还是挺怀念的。写上徐州的另一个原因，是今年国庆之后，带父母来徐州转了一圈，这可能是今年最开心的时光吧。一共拍了300多张，然后挑选比较好的，洗了20张，看到父母的笑容，虽然花了一些money，不过物有所值，花的值，就待花。\n\n武汉 参加云栖大会，第一次参加这么高规格的会议，虽然时间赶得比较紧，好歹也算见识了大场面，虽然只是参与的一员，也没学到什么意义上的知识，不过见识方面，那是可以的。武汉今年也看到你的涝灾，希望你可以好好的。\n\n枣庄 这也是一个和徐州类似的城市，我去的准确的说是下面的一个区-----台儿庄，晚上游台儿庄，那景象。真叫一个美，好有一番江南水乡的感觉，而且还和一个人，一起，枣庄，你好，一起走。\n\n合肥 面试，首次接触那么好的公司，面试都在酒店里面，就好像“约会”，他们从杭州到合肥，我为了赴约，也行徐州到了合肥，但是双方好感不佳，约谈失败，就准备找下一个了，不过那次面试，之后，我也知道了自己的水平，就像水壶里面的水，不倒出来怎么知道你有多少货，拿出来测一测，看一看究竟，就更好的衡量出来水平。合肥也是，我之前转车经常走的路线，合肥的包孝肃公，一共去了两次包孝肃公祠堂，第一次是游玩的心态，那是2015年过年回家在此转车，也是遇到下大雪，这次来，完全是为了敬仰一下他，向他看齐，刚正不阿！\n\n西安 找工作的城市，一共去了两次西安，因为之前又从西安转过车，又离家很近，无形中就增加了很多好感，这个城市真的很厚重，很符合我的气质，自大了，特别是来到深圳之后，更加的觉得西安就是“家”，一样，当初啊！！！从西安回家，太近了，可以周五回去，周天再回西安，在家玩的妥妥的。\n\n南阳 不用多说了，2016在家呆的时间不长，但是回去的次数挺多的，从寒假，到五一，暑假，十一，基本上总没事就回家转一圈，当初去徐州，真的离家不远，真的真的。现在回趟家，挺难得，怀念。\n\n东莞 为什么把它列出来呢，一个学生，第一次变成一个打工仔，到的第一站就是东莞，从一下火车就能体会到南方的“热情”，幸好，我在火车上就换下了羽绒服，穿上短袖，一身夏天的装束。之后又到东莞是星期天无聊和陶小陶一起去了虎门，出门走走，见识不小。还有一件和东莞有关的是新年的第一个朋友就是东莞的。\n\n深圳 这个爱恨交加的城市，到现在为止，深圳能一个人转的地方，应该是都去了，从梅林开始，也是住的地方，塘朗山，梅林水库，到莲花山，市民中心，充分利用下班时间闲逛的结果，很享受，然后是红树林，骑行，还不要脸的去了两次。还去后海跨海大桥，近距离看了一些没见过的汽车，和车牌，还吃了一碗面----京城御面堂。梧桐山，看到了盐田港，香港。哦，还有大梅沙小梅沙，这在三年前来深圳的时候就到了，那也是第一次看到大海，这次又看了较场尾，海是一个让人着迷的地方。很喜欢去安排时间，计划着刚好到，算好地铁什么时候到，到哪里转车最快最方便，呢段时间真是没谁的了。生活上基本就这些了。然后工作，真的喜欢编程，有挑战的编程，而不是重复，随便玩。这两月就用了一个东西MQ，其他的，自己感觉收获很小，其他细节在体会中说。还有在深圳看了罗胖的跨年演讲，还有在这上面认识的新年朋友，大老远的从东莞跑过来，真的是挺让人佩服的，我相信还有很多更远的朋友，我们一起度过呢个夜晚。除了工作方面，深圳的交通还不错，北边一个北环大道，南边一个滨海大道,中间随便玩，最烦人的是深圳的跨主干道，很多都是人行天桥，让人很是麻烦，一点都不注意行人的感受，这点，very bad！！ 深圳的另外一个特点就是新鲜事物的发源地，这也让我知道了，之前总是有什么一些试点，什么的，总是在北上广深大城市，因为这些城市，总是可以很快的接受这些新鲜事物，而且会很好的去改掉一些不适用的。像共享单车，我在这里已经骑过无数次，但是和家人的时候，还是一个很难解释的一个概念，但是和同学说的时候，则很好解释，有的时候思想教化程度挺严重的。哎要说啥子来的，本意是大城市和小城市之间的差距大。让我解释的太偏离主题。\n\n惠州 小而美的城市，来两次惠州了，大一大二，本来想着以后，很小机会来了，大三这刚过，大四就又来了，人生有的时候就是这么让人交错。从深圳这边到惠州，汽车两个半小时，真的是挺近的，另一个要说的就是这边的交通，实在是太方便了，“小的士”，大的士，公交，地铁，城际铁路，高铁，你能想象，从城市的一北边做个火车到城市的南段吗？这种事情我已经干过不少次了。当然了，这只有在相当发达的经济区域才会有的吧。长三角，珠三角，环渤海，说真的，还不错，这点应该放在深圳呢个空间说的吧。既然到惠州这个空间了，就放这里吧。\n\n广州 去广州到了白云机场，这才是重点，谁知道以后飞机和我还有没有缘分，这是第一次到飞机场，真的是太豪华了，我这从小地方来的，只要不被吓呆就已经是万幸的了。包括到什么酒店，好高端，好大气。另外从广州南到白云，两个小时的地铁，你能想象这个城市有多大吗？\n\n\n## 体会收获和感悟\n\n#### 体会  以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会.\n\n##### 报销，理财之类\n\n与钱有关的事情都是大事，什么补贴，报销等等之类，在学校的项目报销，很严格，花钱干了什么，为什么，每一笔钱的报销都是有依有据的，不过这样也是好的，我自己呢，也吃亏买了个教训，本来算下来的报销挺多的，但是好多都是不符合规定的，因此，就被刷下来了大部分。还有现在的报销也是难上加难，真的难以想象，过年的给的红包还要，要贴票据，到10月份还没发下来，我真的是，不过也是，钱嘛，都稀罕，运营的总希望能少则少，能推迟则推迟，这就是之前学到的钱的时间价值，很昂贵，理财，方面呢，也是不见起色，毕刚出来，之前的钱都dong光了，而且还能看到一个货币的膨胀，初中200，高中400，大学800，月月光，真的养活自己也是一件难事了，从一餐2块到5块到10块上下，一直到现在一餐25块左右，余华告诉我，要好好的《活着》。借用去年流行的一句话：挣钱不易，花钱易，且花且珍惜。\n\n##### 交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。\n\n之前总想着是在会议上，讲座上，主要是学知识，现在看来错了，错的离谱。实际上只是听听，是没有什么收获的，而且听到的现在都是僵化的，硬知识，我现在都有这种体会，自己知道的不少，信息量也还可以，就是很难串起来，能真正的融会贯通，这也是一种能力。这是其一，其二是能一起参加会议至少都是对此方面感兴趣的，肯定都有一定的看法，这是一个很好的话题，可是我发觉自己很难提出自己的观点，应该是还停留在表面，没有深入去思考，这和我的价值观也有很大的问题，总是随和，附和，与世无争，有时候讨论也是一种艺术，只有去辩论，才能更明。其三是有口才一定是人才，是人才的不一定有口才。肚里有货，说的出，让人信服，OK。说不出，即使才高八斗，没用，一定要常用举例说明，例子是重要的，不要做标题党，论点党，一定要有实例支撑你的论点，才能说明白。\n\n##### 自我表达能力，说的和别人理解的偏差太大。\n\n什么时候真正意识到这点的呢，公司的总结会上，我了一大堆，但是实际上的表达让别人觉得我就说了一个论点，能力强，没什么任务，比较闲。可是，我要真正要表达的是什么？我来是学知识，提高能力的，不是当坐台的。给布置任务要考虑客观因素，不要总是下班了，周五了来布置工作。这才是我想说明自己的观点的，可是呢？最终就让别人觉得我不可一世，实际上我是很谦虚的。只要是能说服我的，能说明缘由的，都可以接受。这个东西需要练习，以后要好好注意一下这点，词不达意，要人命。\n\n##### 工作收获\n\n失误，核对，一定要完成，说没用，做出来才可以。头脑要警惕（别得意）。\n如果自己不去做，永远不知道能不能做好，不能因为未来可能做不好，而不去做。行动起来。\n\n\n##### 前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门\n\n今年对于技术方面很是担忧，因为感觉不到那种明显的提升了，而且热情也明显有了滑落。对于前端，对于css的学习可以有明显的提升，像定位，盒模型，行高基线等，在工作中有挺大的提升，因为没碰数据方面，所有主要工作就是修改样式，这方面也确实不错，比之前的认识更深入了。但是javascript有遗忘，因为现在很少写，不过不能丢。在来深圳之前，js有过系统的看过一遍ES6的语法，还是能够接受，不过现在到实际应用方面，并没有参与太多，还不知道真正的水平。还有就是怎样优雅的写js，也是一个难点，不能总是function吧，这样怎么看都low了点，这点在明年要有一个提升。这是一个瓶颈，要克服，要突破。\n\n对于java后端，基本的只是已经掌握的差不多了，余下的是巩固基础和技术提升，基础巩固放面，看《thinking in java》，明年至少要结合代码把上面的示例演示一遍。如果能多看代码，并理解工作上的这套框架，就更好了。然后是对于hadoop zookeeper Spark等框架的理解，要有一个详细的理解，知道什么情况下应该使用什么工具。这也算是2017年的计划之一吧。\n\n机器学习，这是一个漫长的过程，但是也是一个很快的过程，如果2017能够入行，我对这个入行的标准是：能够做一个可用的项目。说白了还是代码能过。这引入了下一个体会。\n\n##### 英语 高数 线代 概率论的重要性\n\n这些基础学科，真的太重要了。英语，重要性不用多说了，我也有意识的提高它，看一些知道大致概念的pdf等，这个需要什么？积累，都是扯淡，需要能看懂，无字幕外国电影，外国书籍，这对于我来说还有不小的距离。虽然我们平时用不上，说话交流也不用，不过这个行业不会英语，出去开会什么的，怎么和别人交流，怎么讨论问题？再者说了，即使在github上面提个Issue，还是经常性的吧，总不能每次一个词一个词的去百度翻译吧？这样，效率是一方面，另一方面是意思真的能达到要求吗？\n\n数学的重要性，在2016年看机器学习的课程的时候，很多公式，数学公式莫名其妙的出来了，很多需要再认真想一想才能理解，有的甚至是不理解的，只是看一下，并没有去了解，这种线代矩阵转置、概率等问题，很困扰人，2016年暑假，我就意识到了当初把这些书都给卖了，好后悔，好后悔。我可是从来没有卖过书的人，看来书不能丢，不能丢，以后，一定要珍惜。不能丢。\n\n##### 见识\n\n在北方生活20多年的我，来到这里见了很多没见过的东西，特别是这两天，小金橘，青枣，榨菜，香蕉，椰树，“胡子叔”----大榕树，冬日里的桃花等东西。再加上自己在北方这么多年的生活，可谓是“走过南，闯过北”，这种经历在我的人生中，我认为是挺宝贵的，希望今后能多一些这种新奇的东西。\n    \n## 计划\n\n##### 需要提升的方面\n\n财务经济（慢慢学着理财，记账），业余爱好（轮滑，太极，学学网球），多参加一些活动，英语水平，自我表达能力\n\n#####  明年短期\n\n- 把前端知识系统起来。\n- thinking in java代码演示。\n- hadoop spark zookeeper等框架的理解。\n- 攒点钱------感觉这个最现实了，攒个两三万。\n- 身体方面，要保重，跑起来，运动起来。\n- 学学花，学学咖啡，学学植物，学学养生。这都是瞎扯的。\n\n\n#####  三年中期\n\n- 差不多父母也老了\n- 差不多该准备结婚了\n- 差不多到人生关键点了\n- 差不多也快要回家生活了。\n- 差不多玩的也够可以的了吧。\n\n\n#####  八年十年长期\n\n- 这个最不现实。\n- 这个也最影响人。\n- 这个是最扯的一个。\n- 这个是绝对要考虑的。\n\n2017.01.24 慕小白 于深圳宝安","slug":"2016年个人总结","published":1,"updated":"2019-01-15T08:31:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79f006augv5zbi1tnsc","content":"<h2 id=\"首先梳理一下去年的工作生活\"><a href=\"#首先梳理一下去年的工作生活\" class=\"headerlink\" title=\"首先梳理一下去年的工作生活\"></a>首先梳理一下去年的工作生活</h2><h4 id=\"从时间上\"><a href=\"#从时间上\" class=\"headerlink\" title=\"从时间上\"></a>从时间上</h4><p>过完寒假，基本也宣告第一个项目失败了，不了了之。真心对不起老师的辛勤指导，后面再说经历体会。紧接着开始了第二个项目，从4月中旬到9月中旬左右，五到六个月，大家都很上心，想做好一个，来证明一下自己的能力，也是为之后找工作的时候可以拿出一个完整的项目，可惜啊，可惜。第二个项目到暑假结束，老板也是体会到了我们的进度，而且到十月份大家都开始找工作了，准备一些考研保研的材料等等，就把这个项目停下来了。在此同时也开始了加入了找工作的大军。到十一月底，来到深圳，开始新的经历，来深圳还是希望一个人也可以来，之后再说。然后就到2017年1月23号了，打工正式两个月。后天就准备回家，过大年。</p>\n<h4 id=\"从空间上\"><a href=\"#从空间上\" class=\"headerlink\" title=\"从空间上\"></a>从空间上</h4><p>去年来到过以下城市：徐州 武汉 枣庄 合肥 西安 南阳 东莞 深圳 惠州 广州 </p>\n<p>我觉得说空间上的经历展现一个人的经历，待在一个地方，我觉得不是我的风格，虽然说，某些地方也是蜻蜓点水一样，但是都有回忆。先说徐州，我大徐州，就不多介绍了，历史文化名城，大学已经在此三年了，说真的，现在写回忆的时候，还是挺怀念的。写上徐州的另一个原因，是今年国庆之后，带父母来徐州转了一圈，这可能是今年最开心的时光吧。一共拍了300多张，然后挑选比较好的，洗了20张，看到父母的笑容，虽然花了一些money，不过物有所值，花的值，就待花。</p>\n<p>武汉 参加云栖大会，第一次参加这么高规格的会议，虽然时间赶得比较紧，好歹也算见识了大场面，虽然只是参与的一员，也没学到什么意义上的知识，不过见识方面，那是可以的。武汉今年也看到你的涝灾，希望你可以好好的。</p>\n<p>枣庄 这也是一个和徐州类似的城市，我去的准确的说是下面的一个区—–台儿庄，晚上游台儿庄，那景象。真叫一个美，好有一番江南水乡的感觉，而且还和一个人，一起，枣庄，你好，一起走。</p>\n<p>合肥 面试，首次接触那么好的公司，面试都在酒店里面，就好像“约会”，他们从杭州到合肥，我为了赴约，也行徐州到了合肥，但是双方好感不佳，约谈失败，就准备找下一个了，不过那次面试，之后，我也知道了自己的水平，就像水壶里面的水，不倒出来怎么知道你有多少货，拿出来测一测，看一看究竟，就更好的衡量出来水平。合肥也是，我之前转车经常走的路线，合肥的包孝肃公，一共去了两次包孝肃公祠堂，第一次是游玩的心态，那是2015年过年回家在此转车，也是遇到下大雪，这次来，完全是为了敬仰一下他，向他看齐，刚正不阿！</p>\n<p>西安 找工作的城市，一共去了两次西安，因为之前又从西安转过车，又离家很近，无形中就增加了很多好感，这个城市真的很厚重，很符合我的气质，自大了，特别是来到深圳之后，更加的觉得西安就是“家”，一样，当初啊！！！从西安回家，太近了，可以周五回去，周天再回西安，在家玩的妥妥的。</p>\n<p>南阳 不用多说了，2016在家呆的时间不长，但是回去的次数挺多的，从寒假，到五一，暑假，十一，基本上总没事就回家转一圈，当初去徐州，真的离家不远，真的真的。现在回趟家，挺难得，怀念。</p>\n<p>东莞 为什么把它列出来呢，一个学生，第一次变成一个打工仔，到的第一站就是东莞，从一下火车就能体会到南方的“热情”，幸好，我在火车上就换下了羽绒服，穿上短袖，一身夏天的装束。之后又到东莞是星期天无聊和陶小陶一起去了虎门，出门走走，见识不小。还有一件和东莞有关的是新年的第一个朋友就是东莞的。</p>\n<p>深圳 这个爱恨交加的城市，到现在为止，深圳能一个人转的地方，应该是都去了，从梅林开始，也是住的地方，塘朗山，梅林水库，到莲花山，市民中心，充分利用下班时间闲逛的结果，很享受，然后是红树林，骑行，还不要脸的去了两次。还去后海跨海大桥，近距离看了一些没见过的汽车，和车牌，还吃了一碗面—-京城御面堂。梧桐山，看到了盐田港，香港。哦，还有大梅沙小梅沙，这在三年前来深圳的时候就到了，那也是第一次看到大海，这次又看了较场尾，海是一个让人着迷的地方。很喜欢去安排时间，计划着刚好到，算好地铁什么时候到，到哪里转车最快最方便，呢段时间真是没谁的了。生活上基本就这些了。然后工作，真的喜欢编程，有挑战的编程，而不是重复，随便玩。这两月就用了一个东西MQ，其他的，自己感觉收获很小，其他细节在体会中说。还有在深圳看了罗胖的跨年演讲，还有在这上面认识的新年朋友，大老远的从东莞跑过来，真的是挺让人佩服的，我相信还有很多更远的朋友，我们一起度过呢个夜晚。除了工作方面，深圳的交通还不错，北边一个北环大道，南边一个滨海大道,中间随便玩，最烦人的是深圳的跨主干道，很多都是人行天桥，让人很是麻烦，一点都不注意行人的感受，这点，very bad！！ 深圳的另外一个特点就是新鲜事物的发源地，这也让我知道了，之前总是有什么一些试点，什么的，总是在北上广深大城市，因为这些城市，总是可以很快的接受这些新鲜事物，而且会很好的去改掉一些不适用的。像共享单车，我在这里已经骑过无数次，但是和家人的时候，还是一个很难解释的一个概念，但是和同学说的时候，则很好解释，有的时候思想教化程度挺严重的。哎要说啥子来的，本意是大城市和小城市之间的差距大。让我解释的太偏离主题。</p>\n<p>惠州 小而美的城市，来两次惠州了，大一大二，本来想着以后，很小机会来了，大三这刚过，大四就又来了，人生有的时候就是这么让人交错。从深圳这边到惠州，汽车两个半小时，真的是挺近的，另一个要说的就是这边的交通，实在是太方便了，“小的士”，大的士，公交，地铁，城际铁路，高铁，你能想象，从城市的一北边做个火车到城市的南段吗？这种事情我已经干过不少次了。当然了，这只有在相当发达的经济区域才会有的吧。长三角，珠三角，环渤海，说真的，还不错，这点应该放在深圳呢个空间说的吧。既然到惠州这个空间了，就放这里吧。</p>\n<p>广州 去广州到了白云机场，这才是重点，谁知道以后飞机和我还有没有缘分，这是第一次到飞机场，真的是太豪华了，我这从小地方来的，只要不被吓呆就已经是万幸的了。包括到什么酒店，好高端，好大气。另外从广州南到白云，两个小时的地铁，你能想象这个城市有多大吗？</p>\n<h2 id=\"体会收获和感悟\"><a href=\"#体会收获和感悟\" class=\"headerlink\" title=\"体会收获和感悟\"></a>体会收获和感悟</h2><h4 id=\"体会-以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会\"><a href=\"#体会-以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会\" class=\"headerlink\" title=\"体会  以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会.\"></a>体会  以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会.</h4><h5 id=\"报销，理财之类\"><a href=\"#报销，理财之类\" class=\"headerlink\" title=\"报销，理财之类\"></a>报销，理财之类</h5><p>与钱有关的事情都是大事，什么补贴，报销等等之类，在学校的项目报销，很严格，花钱干了什么，为什么，每一笔钱的报销都是有依有据的，不过这样也是好的，我自己呢，也吃亏买了个教训，本来算下来的报销挺多的，但是好多都是不符合规定的，因此，就被刷下来了大部分。还有现在的报销也是难上加难，真的难以想象，过年的给的红包还要，要贴票据，到10月份还没发下来，我真的是，不过也是，钱嘛，都稀罕，运营的总希望能少则少，能推迟则推迟，这就是之前学到的钱的时间价值，很昂贵，理财，方面呢，也是不见起色，毕刚出来，之前的钱都dong光了，而且还能看到一个货币的膨胀，初中200，高中400，大学800，月月光，真的养活自己也是一件难事了，从一餐2块到5块到10块上下，一直到现在一餐25块左右，余华告诉我，要好好的《活着》。借用去年流行的一句话：挣钱不易，花钱易，且花且珍惜。</p>\n<h5 id=\"交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。\"><a href=\"#交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。\" class=\"headerlink\" title=\"交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。\"></a>交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。</h5><p>之前总想着是在会议上，讲座上，主要是学知识，现在看来错了，错的离谱。实际上只是听听，是没有什么收获的，而且听到的现在都是僵化的，硬知识，我现在都有这种体会，自己知道的不少，信息量也还可以，就是很难串起来，能真正的融会贯通，这也是一种能力。这是其一，其二是能一起参加会议至少都是对此方面感兴趣的，肯定都有一定的看法，这是一个很好的话题，可是我发觉自己很难提出自己的观点，应该是还停留在表面，没有深入去思考，这和我的价值观也有很大的问题，总是随和，附和，与世无争，有时候讨论也是一种艺术，只有去辩论，才能更明。其三是有口才一定是人才，是人才的不一定有口才。肚里有货，说的出，让人信服，OK。说不出，即使才高八斗，没用，一定要常用举例说明，例子是重要的，不要做标题党，论点党，一定要有实例支撑你的论点，才能说明白。</p>\n<h5 id=\"自我表达能力，说的和别人理解的偏差太大。\"><a href=\"#自我表达能力，说的和别人理解的偏差太大。\" class=\"headerlink\" title=\"自我表达能力，说的和别人理解的偏差太大。\"></a>自我表达能力，说的和别人理解的偏差太大。</h5><p>什么时候真正意识到这点的呢，公司的总结会上，我了一大堆，但是实际上的表达让别人觉得我就说了一个论点，能力强，没什么任务，比较闲。可是，我要真正要表达的是什么？我来是学知识，提高能力的，不是当坐台的。给布置任务要考虑客观因素，不要总是下班了，周五了来布置工作。这才是我想说明自己的观点的，可是呢？最终就让别人觉得我不可一世，实际上我是很谦虚的。只要是能说服我的，能说明缘由的，都可以接受。这个东西需要练习，以后要好好注意一下这点，词不达意，要人命。</p>\n<h5 id=\"工作收获\"><a href=\"#工作收获\" class=\"headerlink\" title=\"工作收获\"></a>工作收获</h5><p>失误，核对，一定要完成，说没用，做出来才可以。头脑要警惕（别得意）。<br>如果自己不去做，永远不知道能不能做好，不能因为未来可能做不好，而不去做。行动起来。</p>\n<h5 id=\"前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门\"><a href=\"#前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门\" class=\"headerlink\" title=\"前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门\"></a>前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门</h5><p>今年对于技术方面很是担忧，因为感觉不到那种明显的提升了，而且热情也明显有了滑落。对于前端，对于css的学习可以有明显的提升，像定位，盒模型，行高基线等，在工作中有挺大的提升，因为没碰数据方面，所有主要工作就是修改样式，这方面也确实不错，比之前的认识更深入了。但是javascript有遗忘，因为现在很少写，不过不能丢。在来深圳之前，js有过系统的看过一遍ES6的语法，还是能够接受，不过现在到实际应用方面，并没有参与太多，还不知道真正的水平。还有就是怎样优雅的写js，也是一个难点，不能总是function吧，这样怎么看都low了点，这点在明年要有一个提升。这是一个瓶颈，要克服，要突破。</p>\n<p>对于java后端，基本的只是已经掌握的差不多了，余下的是巩固基础和技术提升，基础巩固放面，看《thinking in java》，明年至少要结合代码把上面的示例演示一遍。如果能多看代码，并理解工作上的这套框架，就更好了。然后是对于hadoop zookeeper Spark等框架的理解，要有一个详细的理解，知道什么情况下应该使用什么工具。这也算是2017年的计划之一吧。</p>\n<p>机器学习，这是一个漫长的过程，但是也是一个很快的过程，如果2017能够入行，我对这个入行的标准是：能够做一个可用的项目。说白了还是代码能过。这引入了下一个体会。</p>\n<h5 id=\"英语-高数-线代-概率论的重要性\"><a href=\"#英语-高数-线代-概率论的重要性\" class=\"headerlink\" title=\"英语 高数 线代 概率论的重要性\"></a>英语 高数 线代 概率论的重要性</h5><p>这些基础学科，真的太重要了。英语，重要性不用多说了，我也有意识的提高它，看一些知道大致概念的pdf等，这个需要什么？积累，都是扯淡，需要能看懂，无字幕外国电影，外国书籍，这对于我来说还有不小的距离。虽然我们平时用不上，说话交流也不用，不过这个行业不会英语，出去开会什么的，怎么和别人交流，怎么讨论问题？再者说了，即使在github上面提个Issue，还是经常性的吧，总不能每次一个词一个词的去百度翻译吧？这样，效率是一方面，另一方面是意思真的能达到要求吗？</p>\n<p>数学的重要性，在2016年看机器学习的课程的时候，很多公式，数学公式莫名其妙的出来了，很多需要再认真想一想才能理解，有的甚至是不理解的，只是看一下，并没有去了解，这种线代矩阵转置、概率等问题，很困扰人，2016年暑假，我就意识到了当初把这些书都给卖了，好后悔，好后悔。我可是从来没有卖过书的人，看来书不能丢，不能丢，以后，一定要珍惜。不能丢。</p>\n<h5 id=\"见识\"><a href=\"#见识\" class=\"headerlink\" title=\"见识\"></a>见识</h5><p>在北方生活20多年的我，来到这里见了很多没见过的东西，特别是这两天，小金橘，青枣，榨菜，香蕉，椰树，“胡子叔”—-大榕树，冬日里的桃花等东西。再加上自己在北方这么多年的生活，可谓是“走过南，闯过北”，这种经历在我的人生中，我认为是挺宝贵的，希望今后能多一些这种新奇的东西。</p>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><h5 id=\"需要提升的方面\"><a href=\"#需要提升的方面\" class=\"headerlink\" title=\"需要提升的方面\"></a>需要提升的方面</h5><p>财务经济（慢慢学着理财，记账），业余爱好（轮滑，太极，学学网球），多参加一些活动，英语水平，自我表达能力</p>\n<h5 id=\"明年短期\"><a href=\"#明年短期\" class=\"headerlink\" title=\"明年短期\"></a>明年短期</h5><ul>\n<li>把前端知识系统起来。</li>\n<li>thinking in java代码演示。</li>\n<li>hadoop spark zookeeper等框架的理解。</li>\n<li>攒点钱——感觉这个最现实了，攒个两三万。</li>\n<li>身体方面，要保重，跑起来，运动起来。</li>\n<li>学学花，学学咖啡，学学植物，学学养生。这都是瞎扯的。</li>\n</ul>\n<h5 id=\"三年中期\"><a href=\"#三年中期\" class=\"headerlink\" title=\"三年中期\"></a>三年中期</h5><ul>\n<li>差不多父母也老了</li>\n<li>差不多该准备结婚了</li>\n<li>差不多到人生关键点了</li>\n<li>差不多也快要回家生活了。</li>\n<li>差不多玩的也够可以的了吧。</li>\n</ul>\n<h5 id=\"八年十年长期\"><a href=\"#八年十年长期\" class=\"headerlink\" title=\"八年十年长期\"></a>八年十年长期</h5><ul>\n<li>这个最不现实。</li>\n<li>这个也最影响人。</li>\n<li>这个是最扯的一个。</li>\n<li>这个是绝对要考虑的。</li>\n</ul>\n<p>2017.01.24 慕小白 于深圳宝安</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"首先梳理一下去年的工作生活\"><a href=\"#首先梳理一下去年的工作生活\" class=\"headerlink\" title=\"首先梳理一下去年的工作生活\"></a>首先梳理一下去年的工作生活</h2><h4 id=\"从时间上\"><a href=\"#从时间上\" class=\"headerlink\" title=\"从时间上\"></a>从时间上</h4><p>过完寒假，基本也宣告第一个项目失败了，不了了之。真心对不起老师的辛勤指导，后面再说经历体会。紧接着开始了第二个项目，从4月中旬到9月中旬左右，五到六个月，大家都很上心，想做好一个，来证明一下自己的能力，也是为之后找工作的时候可以拿出一个完整的项目，可惜啊，可惜。第二个项目到暑假结束，老板也是体会到了我们的进度，而且到十月份大家都开始找工作了，准备一些考研保研的材料等等，就把这个项目停下来了。在此同时也开始了加入了找工作的大军。到十一月底，来到深圳，开始新的经历，来深圳还是希望一个人也可以来，之后再说。然后就到2017年1月23号了，打工正式两个月。后天就准备回家，过大年。</p>\n<h4 id=\"从空间上\"><a href=\"#从空间上\" class=\"headerlink\" title=\"从空间上\"></a>从空间上</h4><p>去年来到过以下城市：徐州 武汉 枣庄 合肥 西安 南阳 东莞 深圳 惠州 广州 </p>\n<p>我觉得说空间上的经历展现一个人的经历，待在一个地方，我觉得不是我的风格，虽然说，某些地方也是蜻蜓点水一样，但是都有回忆。先说徐州，我大徐州，就不多介绍了，历史文化名城，大学已经在此三年了，说真的，现在写回忆的时候，还是挺怀念的。写上徐州的另一个原因，是今年国庆之后，带父母来徐州转了一圈，这可能是今年最开心的时光吧。一共拍了300多张，然后挑选比较好的，洗了20张，看到父母的笑容，虽然花了一些money，不过物有所值，花的值，就待花。</p>\n<p>武汉 参加云栖大会，第一次参加这么高规格的会议，虽然时间赶得比较紧，好歹也算见识了大场面，虽然只是参与的一员，也没学到什么意义上的知识，不过见识方面，那是可以的。武汉今年也看到你的涝灾，希望你可以好好的。</p>\n<p>枣庄 这也是一个和徐州类似的城市，我去的准确的说是下面的一个区—–台儿庄，晚上游台儿庄，那景象。真叫一个美，好有一番江南水乡的感觉，而且还和一个人，一起，枣庄，你好，一起走。</p>\n<p>合肥 面试，首次接触那么好的公司，面试都在酒店里面，就好像“约会”，他们从杭州到合肥，我为了赴约，也行徐州到了合肥，但是双方好感不佳，约谈失败，就准备找下一个了，不过那次面试，之后，我也知道了自己的水平，就像水壶里面的水，不倒出来怎么知道你有多少货，拿出来测一测，看一看究竟，就更好的衡量出来水平。合肥也是，我之前转车经常走的路线，合肥的包孝肃公，一共去了两次包孝肃公祠堂，第一次是游玩的心态，那是2015年过年回家在此转车，也是遇到下大雪，这次来，完全是为了敬仰一下他，向他看齐，刚正不阿！</p>\n<p>西安 找工作的城市，一共去了两次西安，因为之前又从西安转过车，又离家很近，无形中就增加了很多好感，这个城市真的很厚重，很符合我的气质，自大了，特别是来到深圳之后，更加的觉得西安就是“家”，一样，当初啊！！！从西安回家，太近了，可以周五回去，周天再回西安，在家玩的妥妥的。</p>\n<p>南阳 不用多说了，2016在家呆的时间不长，但是回去的次数挺多的，从寒假，到五一，暑假，十一，基本上总没事就回家转一圈，当初去徐州，真的离家不远，真的真的。现在回趟家，挺难得，怀念。</p>\n<p>东莞 为什么把它列出来呢，一个学生，第一次变成一个打工仔，到的第一站就是东莞，从一下火车就能体会到南方的“热情”，幸好，我在火车上就换下了羽绒服，穿上短袖，一身夏天的装束。之后又到东莞是星期天无聊和陶小陶一起去了虎门，出门走走，见识不小。还有一件和东莞有关的是新年的第一个朋友就是东莞的。</p>\n<p>深圳 这个爱恨交加的城市，到现在为止，深圳能一个人转的地方，应该是都去了，从梅林开始，也是住的地方，塘朗山，梅林水库，到莲花山，市民中心，充分利用下班时间闲逛的结果，很享受，然后是红树林，骑行，还不要脸的去了两次。还去后海跨海大桥，近距离看了一些没见过的汽车，和车牌，还吃了一碗面—-京城御面堂。梧桐山，看到了盐田港，香港。哦，还有大梅沙小梅沙，这在三年前来深圳的时候就到了，那也是第一次看到大海，这次又看了较场尾，海是一个让人着迷的地方。很喜欢去安排时间，计划着刚好到，算好地铁什么时候到，到哪里转车最快最方便，呢段时间真是没谁的了。生活上基本就这些了。然后工作，真的喜欢编程，有挑战的编程，而不是重复，随便玩。这两月就用了一个东西MQ，其他的，自己感觉收获很小，其他细节在体会中说。还有在深圳看了罗胖的跨年演讲，还有在这上面认识的新年朋友，大老远的从东莞跑过来，真的是挺让人佩服的，我相信还有很多更远的朋友，我们一起度过呢个夜晚。除了工作方面，深圳的交通还不错，北边一个北环大道，南边一个滨海大道,中间随便玩，最烦人的是深圳的跨主干道，很多都是人行天桥，让人很是麻烦，一点都不注意行人的感受，这点，very bad！！ 深圳的另外一个特点就是新鲜事物的发源地，这也让我知道了，之前总是有什么一些试点，什么的，总是在北上广深大城市，因为这些城市，总是可以很快的接受这些新鲜事物，而且会很好的去改掉一些不适用的。像共享单车，我在这里已经骑过无数次，但是和家人的时候，还是一个很难解释的一个概念，但是和同学说的时候，则很好解释，有的时候思想教化程度挺严重的。哎要说啥子来的，本意是大城市和小城市之间的差距大。让我解释的太偏离主题。</p>\n<p>惠州 小而美的城市，来两次惠州了，大一大二，本来想着以后，很小机会来了，大三这刚过，大四就又来了，人生有的时候就是这么让人交错。从深圳这边到惠州，汽车两个半小时，真的是挺近的，另一个要说的就是这边的交通，实在是太方便了，“小的士”，大的士，公交，地铁，城际铁路，高铁，你能想象，从城市的一北边做个火车到城市的南段吗？这种事情我已经干过不少次了。当然了，这只有在相当发达的经济区域才会有的吧。长三角，珠三角，环渤海，说真的，还不错，这点应该放在深圳呢个空间说的吧。既然到惠州这个空间了，就放这里吧。</p>\n<p>广州 去广州到了白云机场，这才是重点，谁知道以后飞机和我还有没有缘分，这是第一次到飞机场，真的是太豪华了，我这从小地方来的，只要不被吓呆就已经是万幸的了。包括到什么酒店，好高端，好大气。另外从广州南到白云，两个小时的地铁，你能想象这个城市有多大吗？</p>\n<h2 id=\"体会收获和感悟\"><a href=\"#体会收获和感悟\" class=\"headerlink\" title=\"体会收获和感悟\"></a>体会收获和感悟</h2><h4 id=\"体会-以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会\"><a href=\"#体会-以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会\" class=\"headerlink\" title=\"体会  以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会.\"></a>体会  以上一年的时间里去的城市，仅仅是过去，个人在一些事情上有以下几点体会.</h4><h5 id=\"报销，理财之类\"><a href=\"#报销，理财之类\" class=\"headerlink\" title=\"报销，理财之类\"></a>报销，理财之类</h5><p>与钱有关的事情都是大事，什么补贴，报销等等之类，在学校的项目报销，很严格，花钱干了什么，为什么，每一笔钱的报销都是有依有据的，不过这样也是好的，我自己呢，也吃亏买了个教训，本来算下来的报销挺多的，但是好多都是不符合规定的，因此，就被刷下来了大部分。还有现在的报销也是难上加难，真的难以想象，过年的给的红包还要，要贴票据，到10月份还没发下来，我真的是，不过也是，钱嘛，都稀罕，运营的总希望能少则少，能推迟则推迟，这就是之前学到的钱的时间价值，很昂贵，理财，方面呢，也是不见起色，毕刚出来，之前的钱都dong光了，而且还能看到一个货币的膨胀，初中200，高中400，大学800，月月光，真的养活自己也是一件难事了，从一餐2块到5块到10块上下，一直到现在一餐25块左右，余华告诉我，要好好的《活着》。借用去年流行的一句话：挣钱不易，花钱易，且花且珍惜。</p>\n<h5 id=\"交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。\"><a href=\"#交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。\" class=\"headerlink\" title=\"交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。\"></a>交流沟通能力的重要性，不仅仅是吃饭，参加会议，重要的是认识人。</h5><p>之前总想着是在会议上，讲座上，主要是学知识，现在看来错了，错的离谱。实际上只是听听，是没有什么收获的，而且听到的现在都是僵化的，硬知识，我现在都有这种体会，自己知道的不少，信息量也还可以，就是很难串起来，能真正的融会贯通，这也是一种能力。这是其一，其二是能一起参加会议至少都是对此方面感兴趣的，肯定都有一定的看法，这是一个很好的话题，可是我发觉自己很难提出自己的观点，应该是还停留在表面，没有深入去思考，这和我的价值观也有很大的问题，总是随和，附和，与世无争，有时候讨论也是一种艺术，只有去辩论，才能更明。其三是有口才一定是人才，是人才的不一定有口才。肚里有货，说的出，让人信服，OK。说不出，即使才高八斗，没用，一定要常用举例说明，例子是重要的，不要做标题党，论点党，一定要有实例支撑你的论点，才能说明白。</p>\n<h5 id=\"自我表达能力，说的和别人理解的偏差太大。\"><a href=\"#自我表达能力，说的和别人理解的偏差太大。\" class=\"headerlink\" title=\"自我表达能力，说的和别人理解的偏差太大。\"></a>自我表达能力，说的和别人理解的偏差太大。</h5><p>什么时候真正意识到这点的呢，公司的总结会上，我了一大堆，但是实际上的表达让别人觉得我就说了一个论点，能力强，没什么任务，比较闲。可是，我要真正要表达的是什么？我来是学知识，提高能力的，不是当坐台的。给布置任务要考虑客观因素，不要总是下班了，周五了来布置工作。这才是我想说明自己的观点的，可是呢？最终就让别人觉得我不可一世，实际上我是很谦虚的。只要是能说服我的，能说明缘由的，都可以接受。这个东西需要练习，以后要好好注意一下这点，词不达意，要人命。</p>\n<h5 id=\"工作收获\"><a href=\"#工作收获\" class=\"headerlink\" title=\"工作收获\"></a>工作收获</h5><p>失误，核对，一定要完成，说没用，做出来才可以。头脑要警惕（别得意）。<br>如果自己不去做，永远不知道能不能做好，不能因为未来可能做不好，而不去做。行动起来。</p>\n<h5 id=\"前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门\"><a href=\"#前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门\" class=\"headerlink\" title=\"前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门\"></a>前端技术突飞猛进，而后端架构方面不见起色，机器学习还没有入门</h5><p>今年对于技术方面很是担忧，因为感觉不到那种明显的提升了，而且热情也明显有了滑落。对于前端，对于css的学习可以有明显的提升，像定位，盒模型，行高基线等，在工作中有挺大的提升，因为没碰数据方面，所有主要工作就是修改样式，这方面也确实不错，比之前的认识更深入了。但是javascript有遗忘，因为现在很少写，不过不能丢。在来深圳之前，js有过系统的看过一遍ES6的语法，还是能够接受，不过现在到实际应用方面，并没有参与太多，还不知道真正的水平。还有就是怎样优雅的写js，也是一个难点，不能总是function吧，这样怎么看都low了点，这点在明年要有一个提升。这是一个瓶颈，要克服，要突破。</p>\n<p>对于java后端，基本的只是已经掌握的差不多了，余下的是巩固基础和技术提升，基础巩固放面，看《thinking in java》，明年至少要结合代码把上面的示例演示一遍。如果能多看代码，并理解工作上的这套框架，就更好了。然后是对于hadoop zookeeper Spark等框架的理解，要有一个详细的理解，知道什么情况下应该使用什么工具。这也算是2017年的计划之一吧。</p>\n<p>机器学习，这是一个漫长的过程，但是也是一个很快的过程，如果2017能够入行，我对这个入行的标准是：能够做一个可用的项目。说白了还是代码能过。这引入了下一个体会。</p>\n<h5 id=\"英语-高数-线代-概率论的重要性\"><a href=\"#英语-高数-线代-概率论的重要性\" class=\"headerlink\" title=\"英语 高数 线代 概率论的重要性\"></a>英语 高数 线代 概率论的重要性</h5><p>这些基础学科，真的太重要了。英语，重要性不用多说了，我也有意识的提高它，看一些知道大致概念的pdf等，这个需要什么？积累，都是扯淡，需要能看懂，无字幕外国电影，外国书籍，这对于我来说还有不小的距离。虽然我们平时用不上，说话交流也不用，不过这个行业不会英语，出去开会什么的，怎么和别人交流，怎么讨论问题？再者说了，即使在github上面提个Issue，还是经常性的吧，总不能每次一个词一个词的去百度翻译吧？这样，效率是一方面，另一方面是意思真的能达到要求吗？</p>\n<p>数学的重要性，在2016年看机器学习的课程的时候，很多公式，数学公式莫名其妙的出来了，很多需要再认真想一想才能理解，有的甚至是不理解的，只是看一下，并没有去了解，这种线代矩阵转置、概率等问题，很困扰人，2016年暑假，我就意识到了当初把这些书都给卖了，好后悔，好后悔。我可是从来没有卖过书的人，看来书不能丢，不能丢，以后，一定要珍惜。不能丢。</p>\n<h5 id=\"见识\"><a href=\"#见识\" class=\"headerlink\" title=\"见识\"></a>见识</h5><p>在北方生活20多年的我，来到这里见了很多没见过的东西，特别是这两天，小金橘，青枣，榨菜，香蕉，椰树，“胡子叔”—-大榕树，冬日里的桃花等东西。再加上自己在北方这么多年的生活，可谓是“走过南，闯过北”，这种经历在我的人生中，我认为是挺宝贵的，希望今后能多一些这种新奇的东西。</p>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><h5 id=\"需要提升的方面\"><a href=\"#需要提升的方面\" class=\"headerlink\" title=\"需要提升的方面\"></a>需要提升的方面</h5><p>财务经济（慢慢学着理财，记账），业余爱好（轮滑，太极，学学网球），多参加一些活动，英语水平，自我表达能力</p>\n<h5 id=\"明年短期\"><a href=\"#明年短期\" class=\"headerlink\" title=\"明年短期\"></a>明年短期</h5><ul>\n<li>把前端知识系统起来。</li>\n<li>thinking in java代码演示。</li>\n<li>hadoop spark zookeeper等框架的理解。</li>\n<li>攒点钱——感觉这个最现实了，攒个两三万。</li>\n<li>身体方面，要保重，跑起来，运动起来。</li>\n<li>学学花，学学咖啡，学学植物，学学养生。这都是瞎扯的。</li>\n</ul>\n<h5 id=\"三年中期\"><a href=\"#三年中期\" class=\"headerlink\" title=\"三年中期\"></a>三年中期</h5><ul>\n<li>差不多父母也老了</li>\n<li>差不多该准备结婚了</li>\n<li>差不多到人生关键点了</li>\n<li>差不多也快要回家生活了。</li>\n<li>差不多玩的也够可以的了吧。</li>\n</ul>\n<h5 id=\"八年十年长期\"><a href=\"#八年十年长期\" class=\"headerlink\" title=\"八年十年长期\"></a>八年十年长期</h5><ul>\n<li>这个最不现实。</li>\n<li>这个也最影响人。</li>\n<li>这个是最扯的一个。</li>\n<li>这个是绝对要考虑的。</li>\n</ul>\n<p>2017.01.24 慕小白 于深圳宝安</p>\n"},{"title":"2017年个人总结","date":"2018-01-04T23:47:29.000Z","description":"2017年已经过去，总结一下。","_content":"\n\n## 工作总结\n\n具体问题 具体总结\n\n#### 对接、接口\n\n与外面写接口的时候，一定要写log表记录所有的操作，这样在排查问题的时候也有依据。而且也可以避免一些扯皮，你说他改了，人家说没有改，纠缠在一起，搞不清楚。另外一个就是在调用别人的接口的时候，如果有别的方法进行验证的，一定要先验证，验证通过后，再进行对接，这不是说别人的接口怎么样，而是为了节省时间，一步一步来，先把外部的因素排除掉，确保此接口可以正常访问，可以得到我们需要的数据等。要不然自己在这里对了半天，结果人家说接口还有问题，这样的话，只会浪费时间，而且还搞得一团糟。有问题，一定要及时沟通，不管是什么，肯定是要去面对，要去解决的，最终把事情做好，达成共识。\n\n####  改问题，改bug\n\n看具体的现象，内因体现出来的现象，才能更好的了解内因。哲学思维，从现象看本质，同样适用于这个行业。另外一个哲学思维是：矛盾分为主要矛盾和次要矛盾，找问题就要找主要矛盾，找关键点。要是之后又遇到这种问题，是否就要考虑这种现象？就像重复的js方法被覆盖，总是进不去想要的那个，就要考虑是否出现了重复的，搜索一下，看看，也许就是这个问题呢？另外就是，这种通用的js让我写，是否要把内部的方法都包括起来，不对外暴露，要不然总是这样重复，覆盖，也会打乱原来的的一些逻辑。这种隐藏的问题是最让人崩溃的。\n\n\n#### 新内容\n\n认知的过程，没搞过，怎么办？先搞清楚需求，需求要做什么，这个技术能不能解决这个需求，有没有好的替代方案？就类似于上次的单点登录，对于客户来说只要能从一个系统跳转到另外一个系统，并且不用登录。那何必要使用WSO2  Identity Server来做验证，这个过程可以直接简单的post一个当前系统的用户名和密码，跨域，就可以解决的问题，为什么要使用那么复杂的软件来实现。当然用了新的东西是可以了解到别人对于单点登录是怎么解决的，对于自己来说，也了解到了单点登录的常用场景，至少在以后，如果别人谈起这个东西，知道是怎么一回事。\n\n怎么写新功能。写法和之前相比怎么样？有没有更优雅？\n\n网点管理模块，这个模块在实现的时候使用了angular，同时对象方法等都已经在用了，写的时候已经注意，还有一点不满意的是，上下组件传值，watch和emit，又脱离了angular，这个用起来有一点问题。所以采用原生js的写法，当这个改变修改其它。\n\necharts，好几个图表应该怎么写？有没有可能组合通用的方法。\n其中使用了原型，在这里也找了原型的一些优点和劣势，原型中的属性会被修改，那么所有这个原型下面的对象，在访问这些属性的时候就都会变。属性可以写到对象下面，原型上面，挂载的都是方法，只调用，不存储。 这里还有一个问题就是回调的时候怎么找到原来的this，暂时使用_this代替。这种不好，还没有找到好的方法。\n\n#### 网易产品（特指网易云音乐）\n\n产品是真的可以，平民化，特别是每日推荐，这种可能是关联规则，相似度的推荐，也可能是人工智能的推荐系统，\n\n#### 经验总结\n\n如果是自己，应该怎么进行沟通，管理，怎样让下属更有向心力？之前在学校带项目的时候，可能是都是学生，都没有太多外面的想法，没有什么家庭，晋升的顾虑，所以就比较好管理一点，大家做的时候都很用心，可是那时候都带的不好自己还有很多要练习的。这方面自己也有总结，现在在团队中也看到了一些优点和缺点，具体如下：\n\n> 1. 日报，周报，写东西，告诉用户，让用户知道我们在干什么。这就是沟通。这些在之前我自己带团队的时候，只是有什么问题改什么问题，虽然也有每周二进行一次例会，之后就越来越随意了，就导致客户不知道我们在干什么，双方沟通就出现了问题。所以需要，每周任务明细，完成度，能完成多少，打算做多少，这些工作，需要给自己的团队明确。让下属做的时候也知道是一个什么位置，大概还有什么要完成的，让下属自己进行规划和计划，同时需要把整体的任务、工作给到客户，让客户知道我们做的东西，毕竟做出来的东西是给人家用的，客户是甲方。这点我需要进行学习，怎么把控进度，碰到外部因素怎么办？如何解决。\n\n> 2. 准备工作：我们准备做什么，需要客户准备什么。我们做的任务需要客户配合的，客户一般肯定是会全力配合的，千万不要说，还有什么东西是需要客户提供的，他们没有提供，就做不了，以这种理由来进行推脱责任。这样只会让客户反感，站在客户的角度来说，你不提，那不就是没有问题，要不然这么久都没有反馈，这点和第一点很类似，也是为了让客户知道我们做什么，例如端口，服务器，接口等这些内容，虽然理所应当客户提供，但是他并不知道，需要这些，要告知客户。\n\n> 3. 解决问题才是最重要的。推来推去，还是这个东西，任务不会改变，也不会消失，只会浪费时间。另一个就是不要逃避，也是逃不了的。在自己带团队的时候就出现这种情况，有的问题比较复杂，就一次次的推脱，总想把这个给糊弄过去，实际上，你越是觉得不想做的，客户一下子就能感受的到，你是以一种负面的情绪来应对的。敷衍，敷衍不能了事。\n\n> 4. 需求沟通不明确，实施起来很难受，改的很辛苦。请不要用客户就是这么提的，当做令牌。客户提的要求并不是客户的需求，这点我们在学校做的时候，我认为是做的比较好的，每次我们在和客户确认新的功能点的时候，总会反复的论证，包含各类人员的参与，具体使用者、开发人员、需求调研人员。这样的需求只会让客户想一出是一出，做出来的东西也是一次次的修改，也增加了不稳定性。如果是设计没有考虑到，场景没有考虑到，做的修改，这些都是可以接受的，软件管理经过这20多年的经历，虽然说各种项目管理软件已经琳琅满目，但是真正能做到让项目按时交付，鲁棒性强，还是很难的。\n\n>5. 尽量不要做临时性的任务调整，除非真的很紧急。这种也是规划，因为每个人都希望自己的时间自己来支配，有多少任务，需要用多长时间，留多少时间来进行能力提升，做自己要做的事情。临时性的任务太多，就会导致员工感觉，自己的事情被打乱了，有一种被催、被干扰的负面情绪。这种会让员工干起活来总是不爽，试问？这样不好。\n\n>6. 预演。应急措施，万一着火了怎么办，万一打仗了怎么办，这种居安思危的态度不能少，忧患意识，这个服务器宕掉，备用服务器还可以运行吗？影响正常使用吗？这种事故每发生一次，就让客户对我们的信任度降低，频繁的发生，那可能客户已经想把你给换掉了，而且已经在行动了。\n\n## 生活\n\n2017元旦经历梧桐山登顶；好汉坡，有时候经历一下，坚持一下，就可以完成的。贵在坚持！！！\n\n毕业人，6月，毕业，好快好快，转眼间从2013到2017四年就过去了，从当初的青春懵懂，到现在的佛系无畏。是真的翻天覆地。2017上半年好像没什么要讲的，就一个毕业设计还值得一提，毕业设计上的具体东西，已经在上一篇有总结，好像毕业设计把自己的word排版练得不错，现在常规操作，无压力。excel,也还OK，ppt好像还差一点，太少自己做的模板了，知道一些操作，但是要是从头设计，漂亮的，有感觉得还是没有把握，好像是遗传了教学课件的基因，别的没学到，“课件模板”的精髓掌握的还挺好， ╮(╯▽╰)╭     \n\n工作，基本上已经没有什么压力，因为之前连框架都搭建过，一些基本的框架原理也都看过，再掌握的话也是在这个基础上进行添加，进行巩固。这个应该说再上一模块已经讲过了，不多说。下半年值得留意的几件小事如下：\n\n#### 捐赠回馈\n\n对于母校，那是一个只可以自己骂的，别人不能说一点不好的。可我不能回去，在功成名就之间，也没有理由和脸面回去。现在，给我曾经待过的实验室送了两本书，机器学习相关，就OK了。也不是什么大的回馈，只希望之后的学弟学妹们在实验室能够收获前言知识，不过好像内容也没那么容易，至少我自己看的时候还是需要下点功夫的。深深的感谢曾经的老师，孟老师，电商系的各位大佬们，母校，祝你们在新的一年里工作顺利，阖家欢乐。\n\n#### 人生第二次醉，惩罚自己2017不再喝酒\n\n国庆节，表哥结婚，我看的都留下了泪水。可看起来也没什么泪点啊，和平常一样，前年二姑家儿子结婚也没这样啊。是不是又长大了一岁，又多了很多感触，时间就是这样无情的在你的人生中留下痕迹。甚至，你都没有发觉。听说心情不好会醉酒，我这次是真滴醉了。直到2018-1-1，这两个月内我都没有碰过酒，要好好的反思一下，也为了另外一件事，不能说的秘密。\n\n酱香型酒-----郎酒(四川)果然不一样。味道感觉更醇厚（红花郎，青花郎），平时都是浓香型，洋河(江苏)蓝色经典 天之来，海之蓝，梦之蓝，这也是平时的娱乐活动吗？别的知识倒是没有没有什么长进，酒啊这些反倒是看了不少。\n\n附知乎[白酒区别](https://www.zhihu.com/question/20828281)\n\n#### 十一第一次坐飞机。\n\n国庆结束，值得说的就是坐飞机了，还记得高中，回外婆家，看见了一架直升飞机，问我弟说：“你想不想坐飞机？开飞机？”，那时谁能想到现在我就坐上了飞机呢？飞机是真滴快，2个小时，从南阳姜营机场到广州白云机场，还记得上次还是回学校等待答辩的时候，还在感慨高铁真的快，早上从广州南下午就到徐州东了，8个小时，相比飞机还是差了一点的。出行，外出，一直都是一件大事，老一辈还会挑选日子，“七不出门八不回家”，现在已经不再说这个日期了，不过背后的寓意还是要遵守的，柴米油盐酱醋茶七件东西没有准备好，不能出门，就是该准备的还要准备，准备好就可以随时出门。“孝悌忠义礼义廉耻”八条，没有做好，是不能回家的，现在，出门在外，一样要做到遵守法律法规，才能平安回家。\n\n今年的罗胖跨年演讲在上海-梅赛德斯奔驰文化中心，远程深圳卫视观看。得到，进行用户筛选，宝马在中间找我的客户。用户愿意付钱，十万百万已经足够了，这群就是你的忠实粉丝。你就要好好的对待她。同时，宝马也相中了这群用户，两者合作，也有有新的火花。看得到的用户，大都可能是买宝马的，买宝马的这群，很多都是看得到的。挺你,罗胖！\n虽然有时候说你是个兜卖知识的奸商。(*^▽^*)\n\n#### 做饭\n\n做饭，曾经以为很难的事情，现在也开始进行了，虽然不是特别好吃，特别没有卖相，但基本的像什么番茄炒鸡蛋，煎蛋，拍黄瓜，红萝卜炒肉，煲木耳羹，排骨汤啊，这些还是知道怎么做的了，最起码常见的一些套路还是有的。可以回家试一试，更加长进一点，再学习其他的一些做法，作品，好好学习，做拿手好菜，勾引她。哦对了，还要学习一个汤，大枣红糖姜水。像暖男靠近/^_^  (*￣︶￣)\n\n#### 还有最重要的一件事：girl friend\n\n做梦一般的！\n\n## 学习\n\n#### 机器学习\n\n感觉不能说什么了，就照着之后的计划进行就是万幸了。最近把github上的东西又“丢下”了！捡起来继续前行。ヾ(◍°∇°◍)ﾉﾞ\n\n邮箱登录：蒙牛风味酸牛奶\n[ML百度脑图](http://naotu.baidu.com/file/096b0afa7159d6c24a0d3c0e3b0f4375?token=51b6065fa03be141)\n密码：RLxn\n\n#### 股票基金\n\n我的本科知识，温习一下。开通证券账号，进行投资。\n\n## 计划\n\n#### 2017计划完成情况\n\n- 把前端知识系统起来。\n- thinking in java代码演示。\n- hadoop spark zookeeper等框架的理解。\n- 攒点钱------感觉这个最现实了，攒个两三万。\n- 身体方面，要保重，跑起来，运动起来。\n- 学学花，学学咖啡，学学植物，学学养生。这都是瞎扯的。\n\n完成度30%\n\n前端将js进行了深入，没有系统起来，如果从空白写一个页面，感觉还是无从下手。java代码没有演示，反倒是十大经典机器学习算法已经看完啦，hadoop等这些大数据的框架理论有了基础的了解，但是没有实际的应用，要进行一个hello world。运动方面，这是一个持久的话题。其他艺术方面，了解的也是一些烟酒茶吃喝等，其他艺术没有涉及，惭愧。\n\n#### 2018年计划\n\n- 人不要脸，书不能丢，一个月一本书。要有记录\n- 画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）\n- hello world 大数据 sparker等 demo\n- kaggle等课程熟悉，完成5次天池比赛\n\n#### 接下来怎么发展的问题\n\n\n\n\n\n2018.01.31慕小白 于广东佛山禅城","source":"_posts/2017年个人总结.md","raw":"---\ntitle: 2017年个人总结\ndate: 2018-01-05 07:47:29\ntags: 2017\ncategories: 总结\ndescription: \"2017年已经过去，总结一下。\"\n---\n\n\n## 工作总结\n\n具体问题 具体总结\n\n#### 对接、接口\n\n与外面写接口的时候，一定要写log表记录所有的操作，这样在排查问题的时候也有依据。而且也可以避免一些扯皮，你说他改了，人家说没有改，纠缠在一起，搞不清楚。另外一个就是在调用别人的接口的时候，如果有别的方法进行验证的，一定要先验证，验证通过后，再进行对接，这不是说别人的接口怎么样，而是为了节省时间，一步一步来，先把外部的因素排除掉，确保此接口可以正常访问，可以得到我们需要的数据等。要不然自己在这里对了半天，结果人家说接口还有问题，这样的话，只会浪费时间，而且还搞得一团糟。有问题，一定要及时沟通，不管是什么，肯定是要去面对，要去解决的，最终把事情做好，达成共识。\n\n####  改问题，改bug\n\n看具体的现象，内因体现出来的现象，才能更好的了解内因。哲学思维，从现象看本质，同样适用于这个行业。另外一个哲学思维是：矛盾分为主要矛盾和次要矛盾，找问题就要找主要矛盾，找关键点。要是之后又遇到这种问题，是否就要考虑这种现象？就像重复的js方法被覆盖，总是进不去想要的那个，就要考虑是否出现了重复的，搜索一下，看看，也许就是这个问题呢？另外就是，这种通用的js让我写，是否要把内部的方法都包括起来，不对外暴露，要不然总是这样重复，覆盖，也会打乱原来的的一些逻辑。这种隐藏的问题是最让人崩溃的。\n\n\n#### 新内容\n\n认知的过程，没搞过，怎么办？先搞清楚需求，需求要做什么，这个技术能不能解决这个需求，有没有好的替代方案？就类似于上次的单点登录，对于客户来说只要能从一个系统跳转到另外一个系统，并且不用登录。那何必要使用WSO2  Identity Server来做验证，这个过程可以直接简单的post一个当前系统的用户名和密码，跨域，就可以解决的问题，为什么要使用那么复杂的软件来实现。当然用了新的东西是可以了解到别人对于单点登录是怎么解决的，对于自己来说，也了解到了单点登录的常用场景，至少在以后，如果别人谈起这个东西，知道是怎么一回事。\n\n怎么写新功能。写法和之前相比怎么样？有没有更优雅？\n\n网点管理模块，这个模块在实现的时候使用了angular，同时对象方法等都已经在用了，写的时候已经注意，还有一点不满意的是，上下组件传值，watch和emit，又脱离了angular，这个用起来有一点问题。所以采用原生js的写法，当这个改变修改其它。\n\necharts，好几个图表应该怎么写？有没有可能组合通用的方法。\n其中使用了原型，在这里也找了原型的一些优点和劣势，原型中的属性会被修改，那么所有这个原型下面的对象，在访问这些属性的时候就都会变。属性可以写到对象下面，原型上面，挂载的都是方法，只调用，不存储。 这里还有一个问题就是回调的时候怎么找到原来的this，暂时使用_this代替。这种不好，还没有找到好的方法。\n\n#### 网易产品（特指网易云音乐）\n\n产品是真的可以，平民化，特别是每日推荐，这种可能是关联规则，相似度的推荐，也可能是人工智能的推荐系统，\n\n#### 经验总结\n\n如果是自己，应该怎么进行沟通，管理，怎样让下属更有向心力？之前在学校带项目的时候，可能是都是学生，都没有太多外面的想法，没有什么家庭，晋升的顾虑，所以就比较好管理一点，大家做的时候都很用心，可是那时候都带的不好自己还有很多要练习的。这方面自己也有总结，现在在团队中也看到了一些优点和缺点，具体如下：\n\n> 1. 日报，周报，写东西，告诉用户，让用户知道我们在干什么。这就是沟通。这些在之前我自己带团队的时候，只是有什么问题改什么问题，虽然也有每周二进行一次例会，之后就越来越随意了，就导致客户不知道我们在干什么，双方沟通就出现了问题。所以需要，每周任务明细，完成度，能完成多少，打算做多少，这些工作，需要给自己的团队明确。让下属做的时候也知道是一个什么位置，大概还有什么要完成的，让下属自己进行规划和计划，同时需要把整体的任务、工作给到客户，让客户知道我们做的东西，毕竟做出来的东西是给人家用的，客户是甲方。这点我需要进行学习，怎么把控进度，碰到外部因素怎么办？如何解决。\n\n> 2. 准备工作：我们准备做什么，需要客户准备什么。我们做的任务需要客户配合的，客户一般肯定是会全力配合的，千万不要说，还有什么东西是需要客户提供的，他们没有提供，就做不了，以这种理由来进行推脱责任。这样只会让客户反感，站在客户的角度来说，你不提，那不就是没有问题，要不然这么久都没有反馈，这点和第一点很类似，也是为了让客户知道我们做什么，例如端口，服务器，接口等这些内容，虽然理所应当客户提供，但是他并不知道，需要这些，要告知客户。\n\n> 3. 解决问题才是最重要的。推来推去，还是这个东西，任务不会改变，也不会消失，只会浪费时间。另一个就是不要逃避，也是逃不了的。在自己带团队的时候就出现这种情况，有的问题比较复杂，就一次次的推脱，总想把这个给糊弄过去，实际上，你越是觉得不想做的，客户一下子就能感受的到，你是以一种负面的情绪来应对的。敷衍，敷衍不能了事。\n\n> 4. 需求沟通不明确，实施起来很难受，改的很辛苦。请不要用客户就是这么提的，当做令牌。客户提的要求并不是客户的需求，这点我们在学校做的时候，我认为是做的比较好的，每次我们在和客户确认新的功能点的时候，总会反复的论证，包含各类人员的参与，具体使用者、开发人员、需求调研人员。这样的需求只会让客户想一出是一出，做出来的东西也是一次次的修改，也增加了不稳定性。如果是设计没有考虑到，场景没有考虑到，做的修改，这些都是可以接受的，软件管理经过这20多年的经历，虽然说各种项目管理软件已经琳琅满目，但是真正能做到让项目按时交付，鲁棒性强，还是很难的。\n\n>5. 尽量不要做临时性的任务调整，除非真的很紧急。这种也是规划，因为每个人都希望自己的时间自己来支配，有多少任务，需要用多长时间，留多少时间来进行能力提升，做自己要做的事情。临时性的任务太多，就会导致员工感觉，自己的事情被打乱了，有一种被催、被干扰的负面情绪。这种会让员工干起活来总是不爽，试问？这样不好。\n\n>6. 预演。应急措施，万一着火了怎么办，万一打仗了怎么办，这种居安思危的态度不能少，忧患意识，这个服务器宕掉，备用服务器还可以运行吗？影响正常使用吗？这种事故每发生一次，就让客户对我们的信任度降低，频繁的发生，那可能客户已经想把你给换掉了，而且已经在行动了。\n\n## 生活\n\n2017元旦经历梧桐山登顶；好汉坡，有时候经历一下，坚持一下，就可以完成的。贵在坚持！！！\n\n毕业人，6月，毕业，好快好快，转眼间从2013到2017四年就过去了，从当初的青春懵懂，到现在的佛系无畏。是真的翻天覆地。2017上半年好像没什么要讲的，就一个毕业设计还值得一提，毕业设计上的具体东西，已经在上一篇有总结，好像毕业设计把自己的word排版练得不错，现在常规操作，无压力。excel,也还OK，ppt好像还差一点，太少自己做的模板了，知道一些操作，但是要是从头设计，漂亮的，有感觉得还是没有把握，好像是遗传了教学课件的基因，别的没学到，“课件模板”的精髓掌握的还挺好， ╮(╯▽╰)╭     \n\n工作，基本上已经没有什么压力，因为之前连框架都搭建过，一些基本的框架原理也都看过，再掌握的话也是在这个基础上进行添加，进行巩固。这个应该说再上一模块已经讲过了，不多说。下半年值得留意的几件小事如下：\n\n#### 捐赠回馈\n\n对于母校，那是一个只可以自己骂的，别人不能说一点不好的。可我不能回去，在功成名就之间，也没有理由和脸面回去。现在，给我曾经待过的实验室送了两本书，机器学习相关，就OK了。也不是什么大的回馈，只希望之后的学弟学妹们在实验室能够收获前言知识，不过好像内容也没那么容易，至少我自己看的时候还是需要下点功夫的。深深的感谢曾经的老师，孟老师，电商系的各位大佬们，母校，祝你们在新的一年里工作顺利，阖家欢乐。\n\n#### 人生第二次醉，惩罚自己2017不再喝酒\n\n国庆节，表哥结婚，我看的都留下了泪水。可看起来也没什么泪点啊，和平常一样，前年二姑家儿子结婚也没这样啊。是不是又长大了一岁，又多了很多感触，时间就是这样无情的在你的人生中留下痕迹。甚至，你都没有发觉。听说心情不好会醉酒，我这次是真滴醉了。直到2018-1-1，这两个月内我都没有碰过酒，要好好的反思一下，也为了另外一件事，不能说的秘密。\n\n酱香型酒-----郎酒(四川)果然不一样。味道感觉更醇厚（红花郎，青花郎），平时都是浓香型，洋河(江苏)蓝色经典 天之来，海之蓝，梦之蓝，这也是平时的娱乐活动吗？别的知识倒是没有没有什么长进，酒啊这些反倒是看了不少。\n\n附知乎[白酒区别](https://www.zhihu.com/question/20828281)\n\n#### 十一第一次坐飞机。\n\n国庆结束，值得说的就是坐飞机了，还记得高中，回外婆家，看见了一架直升飞机，问我弟说：“你想不想坐飞机？开飞机？”，那时谁能想到现在我就坐上了飞机呢？飞机是真滴快，2个小时，从南阳姜营机场到广州白云机场，还记得上次还是回学校等待答辩的时候，还在感慨高铁真的快，早上从广州南下午就到徐州东了，8个小时，相比飞机还是差了一点的。出行，外出，一直都是一件大事，老一辈还会挑选日子，“七不出门八不回家”，现在已经不再说这个日期了，不过背后的寓意还是要遵守的，柴米油盐酱醋茶七件东西没有准备好，不能出门，就是该准备的还要准备，准备好就可以随时出门。“孝悌忠义礼义廉耻”八条，没有做好，是不能回家的，现在，出门在外，一样要做到遵守法律法规，才能平安回家。\n\n今年的罗胖跨年演讲在上海-梅赛德斯奔驰文化中心，远程深圳卫视观看。得到，进行用户筛选，宝马在中间找我的客户。用户愿意付钱，十万百万已经足够了，这群就是你的忠实粉丝。你就要好好的对待她。同时，宝马也相中了这群用户，两者合作，也有有新的火花。看得到的用户，大都可能是买宝马的，买宝马的这群，很多都是看得到的。挺你,罗胖！\n虽然有时候说你是个兜卖知识的奸商。(*^▽^*)\n\n#### 做饭\n\n做饭，曾经以为很难的事情，现在也开始进行了，虽然不是特别好吃，特别没有卖相，但基本的像什么番茄炒鸡蛋，煎蛋，拍黄瓜，红萝卜炒肉，煲木耳羹，排骨汤啊，这些还是知道怎么做的了，最起码常见的一些套路还是有的。可以回家试一试，更加长进一点，再学习其他的一些做法，作品，好好学习，做拿手好菜，勾引她。哦对了，还要学习一个汤，大枣红糖姜水。像暖男靠近/^_^  (*￣︶￣)\n\n#### 还有最重要的一件事：girl friend\n\n做梦一般的！\n\n## 学习\n\n#### 机器学习\n\n感觉不能说什么了，就照着之后的计划进行就是万幸了。最近把github上的东西又“丢下”了！捡起来继续前行。ヾ(◍°∇°◍)ﾉﾞ\n\n邮箱登录：蒙牛风味酸牛奶\n[ML百度脑图](http://naotu.baidu.com/file/096b0afa7159d6c24a0d3c0e3b0f4375?token=51b6065fa03be141)\n密码：RLxn\n\n#### 股票基金\n\n我的本科知识，温习一下。开通证券账号，进行投资。\n\n## 计划\n\n#### 2017计划完成情况\n\n- 把前端知识系统起来。\n- thinking in java代码演示。\n- hadoop spark zookeeper等框架的理解。\n- 攒点钱------感觉这个最现实了，攒个两三万。\n- 身体方面，要保重，跑起来，运动起来。\n- 学学花，学学咖啡，学学植物，学学养生。这都是瞎扯的。\n\n完成度30%\n\n前端将js进行了深入，没有系统起来，如果从空白写一个页面，感觉还是无从下手。java代码没有演示，反倒是十大经典机器学习算法已经看完啦，hadoop等这些大数据的框架理论有了基础的了解，但是没有实际的应用，要进行一个hello world。运动方面，这是一个持久的话题。其他艺术方面，了解的也是一些烟酒茶吃喝等，其他艺术没有涉及，惭愧。\n\n#### 2018年计划\n\n- 人不要脸，书不能丢，一个月一本书。要有记录\n- 画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）\n- hello world 大数据 sparker等 demo\n- kaggle等课程熟悉，完成5次天池比赛\n\n#### 接下来怎么发展的问题\n\n\n\n\n\n2018.01.31慕小白 于广东佛山禅城","slug":"2017年个人总结","published":1,"updated":"2019-01-25T03:05:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79g006cugv5gat7utsk","content":"<h2 id=\"工作总结\"><a href=\"#工作总结\" class=\"headerlink\" title=\"工作总结\"></a>工作总结</h2><p>具体问题 具体总结</p>\n<h4 id=\"对接、接口\"><a href=\"#对接、接口\" class=\"headerlink\" title=\"对接、接口\"></a>对接、接口</h4><p>与外面写接口的时候，一定要写log表记录所有的操作，这样在排查问题的时候也有依据。而且也可以避免一些扯皮，你说他改了，人家说没有改，纠缠在一起，搞不清楚。另外一个就是在调用别人的接口的时候，如果有别的方法进行验证的，一定要先验证，验证通过后，再进行对接，这不是说别人的接口怎么样，而是为了节省时间，一步一步来，先把外部的因素排除掉，确保此接口可以正常访问，可以得到我们需要的数据等。要不然自己在这里对了半天，结果人家说接口还有问题，这样的话，只会浪费时间，而且还搞得一团糟。有问题，一定要及时沟通，不管是什么，肯定是要去面对，要去解决的，最终把事情做好，达成共识。</p>\n<h4 id=\"改问题，改bug\"><a href=\"#改问题，改bug\" class=\"headerlink\" title=\"改问题，改bug\"></a>改问题，改bug</h4><p>看具体的现象，内因体现出来的现象，才能更好的了解内因。哲学思维，从现象看本质，同样适用于这个行业。另外一个哲学思维是：矛盾分为主要矛盾和次要矛盾，找问题就要找主要矛盾，找关键点。要是之后又遇到这种问题，是否就要考虑这种现象？就像重复的js方法被覆盖，总是进不去想要的那个，就要考虑是否出现了重复的，搜索一下，看看，也许就是这个问题呢？另外就是，这种通用的js让我写，是否要把内部的方法都包括起来，不对外暴露，要不然总是这样重复，覆盖，也会打乱原来的的一些逻辑。这种隐藏的问题是最让人崩溃的。</p>\n<h4 id=\"新内容\"><a href=\"#新内容\" class=\"headerlink\" title=\"新内容\"></a>新内容</h4><p>认知的过程，没搞过，怎么办？先搞清楚需求，需求要做什么，这个技术能不能解决这个需求，有没有好的替代方案？就类似于上次的单点登录，对于客户来说只要能从一个系统跳转到另外一个系统，并且不用登录。那何必要使用WSO2  Identity Server来做验证，这个过程可以直接简单的post一个当前系统的用户名和密码，跨域，就可以解决的问题，为什么要使用那么复杂的软件来实现。当然用了新的东西是可以了解到别人对于单点登录是怎么解决的，对于自己来说，也了解到了单点登录的常用场景，至少在以后，如果别人谈起这个东西，知道是怎么一回事。</p>\n<p>怎么写新功能。写法和之前相比怎么样？有没有更优雅？</p>\n<p>网点管理模块，这个模块在实现的时候使用了angular，同时对象方法等都已经在用了，写的时候已经注意，还有一点不满意的是，上下组件传值，watch和emit，又脱离了angular，这个用起来有一点问题。所以采用原生js的写法，当这个改变修改其它。</p>\n<p>echarts，好几个图表应该怎么写？有没有可能组合通用的方法。<br>其中使用了原型，在这里也找了原型的一些优点和劣势，原型中的属性会被修改，那么所有这个原型下面的对象，在访问这些属性的时候就都会变。属性可以写到对象下面，原型上面，挂载的都是方法，只调用，不存储。 这里还有一个问题就是回调的时候怎么找到原来的this，暂时使用_this代替。这种不好，还没有找到好的方法。</p>\n<h4 id=\"网易产品（特指网易云音乐）\"><a href=\"#网易产品（特指网易云音乐）\" class=\"headerlink\" title=\"网易产品（特指网易云音乐）\"></a>网易产品（特指网易云音乐）</h4><p>产品是真的可以，平民化，特别是每日推荐，这种可能是关联规则，相似度的推荐，也可能是人工智能的推荐系统，</p>\n<h4 id=\"经验总结\"><a href=\"#经验总结\" class=\"headerlink\" title=\"经验总结\"></a>经验总结</h4><p>如果是自己，应该怎么进行沟通，管理，怎样让下属更有向心力？之前在学校带项目的时候，可能是都是学生，都没有太多外面的想法，没有什么家庭，晋升的顾虑，所以就比较好管理一点，大家做的时候都很用心，可是那时候都带的不好自己还有很多要练习的。这方面自己也有总结，现在在团队中也看到了一些优点和缺点，具体如下：</p>\n<blockquote>\n<ol>\n<li>日报，周报，写东西，告诉用户，让用户知道我们在干什么。这就是沟通。这些在之前我自己带团队的时候，只是有什么问题改什么问题，虽然也有每周二进行一次例会，之后就越来越随意了，就导致客户不知道我们在干什么，双方沟通就出现了问题。所以需要，每周任务明细，完成度，能完成多少，打算做多少，这些工作，需要给自己的团队明确。让下属做的时候也知道是一个什么位置，大概还有什么要完成的，让下属自己进行规划和计划，同时需要把整体的任务、工作给到客户，让客户知道我们做的东西，毕竟做出来的东西是给人家用的，客户是甲方。这点我需要进行学习，怎么把控进度，碰到外部因素怎么办？如何解决。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>准备工作：我们准备做什么，需要客户准备什么。我们做的任务需要客户配合的，客户一般肯定是会全力配合的，千万不要说，还有什么东西是需要客户提供的，他们没有提供，就做不了，以这种理由来进行推脱责任。这样只会让客户反感，站在客户的角度来说，你不提，那不就是没有问题，要不然这么久都没有反馈，这点和第一点很类似，也是为了让客户知道我们做什么，例如端口，服务器，接口等这些内容，虽然理所应当客户提供，但是他并不知道，需要这些，要告知客户。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>解决问题才是最重要的。推来推去，还是这个东西，任务不会改变，也不会消失，只会浪费时间。另一个就是不要逃避，也是逃不了的。在自己带团队的时候就出现这种情况，有的问题比较复杂，就一次次的推脱，总想把这个给糊弄过去，实际上，你越是觉得不想做的，客户一下子就能感受的到，你是以一种负面的情绪来应对的。敷衍，敷衍不能了事。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>需求沟通不明确，实施起来很难受，改的很辛苦。请不要用客户就是这么提的，当做令牌。客户提的要求并不是客户的需求，这点我们在学校做的时候，我认为是做的比较好的，每次我们在和客户确认新的功能点的时候，总会反复的论证，包含各类人员的参与，具体使用者、开发人员、需求调研人员。这样的需求只会让客户想一出是一出，做出来的东西也是一次次的修改，也增加了不稳定性。如果是设计没有考虑到，场景没有考虑到，做的修改，这些都是可以接受的，软件管理经过这20多年的经历，虽然说各种项目管理软件已经琳琅满目，但是真正能做到让项目按时交付，鲁棒性强，还是很难的。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"5\">\n<li>尽量不要做临时性的任务调整，除非真的很紧急。这种也是规划，因为每个人都希望自己的时间自己来支配，有多少任务，需要用多长时间，留多少时间来进行能力提升，做自己要做的事情。临时性的任务太多，就会导致员工感觉，自己的事情被打乱了，有一种被催、被干扰的负面情绪。这种会让员工干起活来总是不爽，试问？这样不好。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"6\">\n<li>预演。应急措施，万一着火了怎么办，万一打仗了怎么办，这种居安思危的态度不能少，忧患意识，这个服务器宕掉，备用服务器还可以运行吗？影响正常使用吗？这种事故每发生一次，就让客户对我们的信任度降低，频繁的发生，那可能客户已经想把你给换掉了，而且已经在行动了。</li>\n</ol>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>2017元旦经历梧桐山登顶；好汉坡，有时候经历一下，坚持一下，就可以完成的。贵在坚持！！！</p>\n<p>毕业人，6月，毕业，好快好快，转眼间从2013到2017四年就过去了，从当初的青春懵懂，到现在的佛系无畏。是真的翻天覆地。2017上半年好像没什么要讲的，就一个毕业设计还值得一提，毕业设计上的具体东西，已经在上一篇有总结，好像毕业设计把自己的word排版练得不错，现在常规操作，无压力。excel,也还OK，ppt好像还差一点，太少自己做的模板了，知道一些操作，但是要是从头设计，漂亮的，有感觉得还是没有把握，好像是遗传了教学课件的基因，别的没学到，“课件模板”的精髓掌握的还挺好， ╮(╯▽╰)╭     </p>\n<p>工作，基本上已经没有什么压力，因为之前连框架都搭建过，一些基本的框架原理也都看过，再掌握的话也是在这个基础上进行添加，进行巩固。这个应该说再上一模块已经讲过了，不多说。下半年值得留意的几件小事如下：</p>\n<h4 id=\"捐赠回馈\"><a href=\"#捐赠回馈\" class=\"headerlink\" title=\"捐赠回馈\"></a>捐赠回馈</h4><p>对于母校，那是一个只可以自己骂的，别人不能说一点不好的。可我不能回去，在功成名就之间，也没有理由和脸面回去。现在，给我曾经待过的实验室送了两本书，机器学习相关，就OK了。也不是什么大的回馈，只希望之后的学弟学妹们在实验室能够收获前言知识，不过好像内容也没那么容易，至少我自己看的时候还是需要下点功夫的。深深的感谢曾经的老师，孟老师，电商系的各位大佬们，母校，祝你们在新的一年里工作顺利，阖家欢乐。</p>\n<h4 id=\"人生第二次醉，惩罚自己2017不再喝酒\"><a href=\"#人生第二次醉，惩罚自己2017不再喝酒\" class=\"headerlink\" title=\"人生第二次醉，惩罚自己2017不再喝酒\"></a>人生第二次醉，惩罚自己2017不再喝酒</h4><p>国庆节，表哥结婚，我看的都留下了泪水。可看起来也没什么泪点啊，和平常一样，前年二姑家儿子结婚也没这样啊。是不是又长大了一岁，又多了很多感触，时间就是这样无情的在你的人生中留下痕迹。甚至，你都没有发觉。听说心情不好会醉酒，我这次是真滴醉了。直到2018-1-1，这两个月内我都没有碰过酒，要好好的反思一下，也为了另外一件事，不能说的秘密。</p>\n<p>酱香型酒—–郎酒(四川)果然不一样。味道感觉更醇厚（红花郎，青花郎），平时都是浓香型，洋河(江苏)蓝色经典 天之来，海之蓝，梦之蓝，这也是平时的娱乐活动吗？别的知识倒是没有没有什么长进，酒啊这些反倒是看了不少。</p>\n<p>附知乎<a href=\"https://www.zhihu.com/question/20828281\" target=\"_blank\" rel=\"noopener\">白酒区别</a></p>\n<h4 id=\"十一第一次坐飞机。\"><a href=\"#十一第一次坐飞机。\" class=\"headerlink\" title=\"十一第一次坐飞机。\"></a>十一第一次坐飞机。</h4><p>国庆结束，值得说的就是坐飞机了，还记得高中，回外婆家，看见了一架直升飞机，问我弟说：“你想不想坐飞机？开飞机？”，那时谁能想到现在我就坐上了飞机呢？飞机是真滴快，2个小时，从南阳姜营机场到广州白云机场，还记得上次还是回学校等待答辩的时候，还在感慨高铁真的快，早上从广州南下午就到徐州东了，8个小时，相比飞机还是差了一点的。出行，外出，一直都是一件大事，老一辈还会挑选日子，“七不出门八不回家”，现在已经不再说这个日期了，不过背后的寓意还是要遵守的，柴米油盐酱醋茶七件东西没有准备好，不能出门，就是该准备的还要准备，准备好就可以随时出门。“孝悌忠义礼义廉耻”八条，没有做好，是不能回家的，现在，出门在外，一样要做到遵守法律法规，才能平安回家。</p>\n<p>今年的罗胖跨年演讲在上海-梅赛德斯奔驰文化中心，远程深圳卫视观看。得到，进行用户筛选，宝马在中间找我的客户。用户愿意付钱，十万百万已经足够了，这群就是你的忠实粉丝。你就要好好的对待她。同时，宝马也相中了这群用户，两者合作，也有有新的火花。看得到的用户，大都可能是买宝马的，买宝马的这群，很多都是看得到的。挺你,罗胖！<br>虽然有时候说你是个兜卖知识的奸商。(<em>^▽^</em>)</p>\n<h4 id=\"做饭\"><a href=\"#做饭\" class=\"headerlink\" title=\"做饭\"></a>做饭</h4><p>做饭，曾经以为很难的事情，现在也开始进行了，虽然不是特别好吃，特别没有卖相，但基本的像什么番茄炒鸡蛋，煎蛋，拍黄瓜，红萝卜炒肉，煲木耳羹，排骨汤啊，这些还是知道怎么做的了，最起码常见的一些套路还是有的。可以回家试一试，更加长进一点，再学习其他的一些做法，作品，好好学习，做拿手好菜，勾引她。哦对了，还要学习一个汤，大枣红糖姜水。像暖男靠近/^_^  (*￣︶￣)</p>\n<h4 id=\"还有最重要的一件事：girl-friend\"><a href=\"#还有最重要的一件事：girl-friend\" class=\"headerlink\" title=\"还有最重要的一件事：girl friend\"></a>还有最重要的一件事：girl friend</h4><p>做梦一般的！</p>\n<h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2><h4 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h4><p>感觉不能说什么了，就照着之后的计划进行就是万幸了。最近把github上的东西又“丢下”了！捡起来继续前行。ヾ(◍°∇°◍)ﾉﾞ</p>\n<p>邮箱登录：蒙牛风味酸牛奶<br><a href=\"http://naotu.baidu.com/file/096b0afa7159d6c24a0d3c0e3b0f4375?token=51b6065fa03be141\" target=\"_blank\" rel=\"noopener\">ML百度脑图</a><br>密码：RLxn</p>\n<h4 id=\"股票基金\"><a href=\"#股票基金\" class=\"headerlink\" title=\"股票基金\"></a>股票基金</h4><p>我的本科知识，温习一下。开通证券账号，进行投资。</p>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><h4 id=\"2017计划完成情况\"><a href=\"#2017计划完成情况\" class=\"headerlink\" title=\"2017计划完成情况\"></a>2017计划完成情况</h4><ul>\n<li>把前端知识系统起来。</li>\n<li>thinking in java代码演示。</li>\n<li>hadoop spark zookeeper等框架的理解。</li>\n<li>攒点钱——感觉这个最现实了，攒个两三万。</li>\n<li>身体方面，要保重，跑起来，运动起来。</li>\n<li>学学花，学学咖啡，学学植物，学学养生。这都是瞎扯的。</li>\n</ul>\n<p>完成度30%</p>\n<p>前端将js进行了深入，没有系统起来，如果从空白写一个页面，感觉还是无从下手。java代码没有演示，反倒是十大经典机器学习算法已经看完啦，hadoop等这些大数据的框架理论有了基础的了解，但是没有实际的应用，要进行一个hello world。运动方面，这是一个持久的话题。其他艺术方面，了解的也是一些烟酒茶吃喝等，其他艺术没有涉及，惭愧。</p>\n<h4 id=\"2018年计划\"><a href=\"#2018年计划\" class=\"headerlink\" title=\"2018年计划\"></a>2018年计划</h4><ul>\n<li>人不要脸，书不能丢，一个月一本书。要有记录</li>\n<li>画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）</li>\n<li>hello world 大数据 sparker等 demo</li>\n<li>kaggle等课程熟悉，完成5次天池比赛</li>\n</ul>\n<h4 id=\"接下来怎么发展的问题\"><a href=\"#接下来怎么发展的问题\" class=\"headerlink\" title=\"接下来怎么发展的问题\"></a>接下来怎么发展的问题</h4><p>2018.01.31慕小白 于广东佛山禅城</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工作总结\"><a href=\"#工作总结\" class=\"headerlink\" title=\"工作总结\"></a>工作总结</h2><p>具体问题 具体总结</p>\n<h4 id=\"对接、接口\"><a href=\"#对接、接口\" class=\"headerlink\" title=\"对接、接口\"></a>对接、接口</h4><p>与外面写接口的时候，一定要写log表记录所有的操作，这样在排查问题的时候也有依据。而且也可以避免一些扯皮，你说他改了，人家说没有改，纠缠在一起，搞不清楚。另外一个就是在调用别人的接口的时候，如果有别的方法进行验证的，一定要先验证，验证通过后，再进行对接，这不是说别人的接口怎么样，而是为了节省时间，一步一步来，先把外部的因素排除掉，确保此接口可以正常访问，可以得到我们需要的数据等。要不然自己在这里对了半天，结果人家说接口还有问题，这样的话，只会浪费时间，而且还搞得一团糟。有问题，一定要及时沟通，不管是什么，肯定是要去面对，要去解决的，最终把事情做好，达成共识。</p>\n<h4 id=\"改问题，改bug\"><a href=\"#改问题，改bug\" class=\"headerlink\" title=\"改问题，改bug\"></a>改问题，改bug</h4><p>看具体的现象，内因体现出来的现象，才能更好的了解内因。哲学思维，从现象看本质，同样适用于这个行业。另外一个哲学思维是：矛盾分为主要矛盾和次要矛盾，找问题就要找主要矛盾，找关键点。要是之后又遇到这种问题，是否就要考虑这种现象？就像重复的js方法被覆盖，总是进不去想要的那个，就要考虑是否出现了重复的，搜索一下，看看，也许就是这个问题呢？另外就是，这种通用的js让我写，是否要把内部的方法都包括起来，不对外暴露，要不然总是这样重复，覆盖，也会打乱原来的的一些逻辑。这种隐藏的问题是最让人崩溃的。</p>\n<h4 id=\"新内容\"><a href=\"#新内容\" class=\"headerlink\" title=\"新内容\"></a>新内容</h4><p>认知的过程，没搞过，怎么办？先搞清楚需求，需求要做什么，这个技术能不能解决这个需求，有没有好的替代方案？就类似于上次的单点登录，对于客户来说只要能从一个系统跳转到另外一个系统，并且不用登录。那何必要使用WSO2  Identity Server来做验证，这个过程可以直接简单的post一个当前系统的用户名和密码，跨域，就可以解决的问题，为什么要使用那么复杂的软件来实现。当然用了新的东西是可以了解到别人对于单点登录是怎么解决的，对于自己来说，也了解到了单点登录的常用场景，至少在以后，如果别人谈起这个东西，知道是怎么一回事。</p>\n<p>怎么写新功能。写法和之前相比怎么样？有没有更优雅？</p>\n<p>网点管理模块，这个模块在实现的时候使用了angular，同时对象方法等都已经在用了，写的时候已经注意，还有一点不满意的是，上下组件传值，watch和emit，又脱离了angular，这个用起来有一点问题。所以采用原生js的写法，当这个改变修改其它。</p>\n<p>echarts，好几个图表应该怎么写？有没有可能组合通用的方法。<br>其中使用了原型，在这里也找了原型的一些优点和劣势，原型中的属性会被修改，那么所有这个原型下面的对象，在访问这些属性的时候就都会变。属性可以写到对象下面，原型上面，挂载的都是方法，只调用，不存储。 这里还有一个问题就是回调的时候怎么找到原来的this，暂时使用_this代替。这种不好，还没有找到好的方法。</p>\n<h4 id=\"网易产品（特指网易云音乐）\"><a href=\"#网易产品（特指网易云音乐）\" class=\"headerlink\" title=\"网易产品（特指网易云音乐）\"></a>网易产品（特指网易云音乐）</h4><p>产品是真的可以，平民化，特别是每日推荐，这种可能是关联规则，相似度的推荐，也可能是人工智能的推荐系统，</p>\n<h4 id=\"经验总结\"><a href=\"#经验总结\" class=\"headerlink\" title=\"经验总结\"></a>经验总结</h4><p>如果是自己，应该怎么进行沟通，管理，怎样让下属更有向心力？之前在学校带项目的时候，可能是都是学生，都没有太多外面的想法，没有什么家庭，晋升的顾虑，所以就比较好管理一点，大家做的时候都很用心，可是那时候都带的不好自己还有很多要练习的。这方面自己也有总结，现在在团队中也看到了一些优点和缺点，具体如下：</p>\n<blockquote>\n<ol>\n<li>日报，周报，写东西，告诉用户，让用户知道我们在干什么。这就是沟通。这些在之前我自己带团队的时候，只是有什么问题改什么问题，虽然也有每周二进行一次例会，之后就越来越随意了，就导致客户不知道我们在干什么，双方沟通就出现了问题。所以需要，每周任务明细，完成度，能完成多少，打算做多少，这些工作，需要给自己的团队明确。让下属做的时候也知道是一个什么位置，大概还有什么要完成的，让下属自己进行规划和计划，同时需要把整体的任务、工作给到客户，让客户知道我们做的东西，毕竟做出来的东西是给人家用的，客户是甲方。这点我需要进行学习，怎么把控进度，碰到外部因素怎么办？如何解决。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>准备工作：我们准备做什么，需要客户准备什么。我们做的任务需要客户配合的，客户一般肯定是会全力配合的，千万不要说，还有什么东西是需要客户提供的，他们没有提供，就做不了，以这种理由来进行推脱责任。这样只会让客户反感，站在客户的角度来说，你不提，那不就是没有问题，要不然这么久都没有反馈，这点和第一点很类似，也是为了让客户知道我们做什么，例如端口，服务器，接口等这些内容，虽然理所应当客户提供，但是他并不知道，需要这些，要告知客户。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"3\">\n<li>解决问题才是最重要的。推来推去，还是这个东西，任务不会改变，也不会消失，只会浪费时间。另一个就是不要逃避，也是逃不了的。在自己带团队的时候就出现这种情况，有的问题比较复杂，就一次次的推脱，总想把这个给糊弄过去，实际上，你越是觉得不想做的，客户一下子就能感受的到，你是以一种负面的情绪来应对的。敷衍，敷衍不能了事。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"4\">\n<li>需求沟通不明确，实施起来很难受，改的很辛苦。请不要用客户就是这么提的，当做令牌。客户提的要求并不是客户的需求，这点我们在学校做的时候，我认为是做的比较好的，每次我们在和客户确认新的功能点的时候，总会反复的论证，包含各类人员的参与，具体使用者、开发人员、需求调研人员。这样的需求只会让客户想一出是一出，做出来的东西也是一次次的修改，也增加了不稳定性。如果是设计没有考虑到，场景没有考虑到，做的修改，这些都是可以接受的，软件管理经过这20多年的经历，虽然说各种项目管理软件已经琳琅满目，但是真正能做到让项目按时交付，鲁棒性强，还是很难的。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"5\">\n<li>尽量不要做临时性的任务调整，除非真的很紧急。这种也是规划，因为每个人都希望自己的时间自己来支配，有多少任务，需要用多长时间，留多少时间来进行能力提升，做自己要做的事情。临时性的任务太多，就会导致员工感觉，自己的事情被打乱了，有一种被催、被干扰的负面情绪。这种会让员工干起活来总是不爽，试问？这样不好。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"6\">\n<li>预演。应急措施，万一着火了怎么办，万一打仗了怎么办，这种居安思危的态度不能少，忧患意识，这个服务器宕掉，备用服务器还可以运行吗？影响正常使用吗？这种事故每发生一次，就让客户对我们的信任度降低，频繁的发生，那可能客户已经想把你给换掉了，而且已经在行动了。</li>\n</ol>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>2017元旦经历梧桐山登顶；好汉坡，有时候经历一下，坚持一下，就可以完成的。贵在坚持！！！</p>\n<p>毕业人，6月，毕业，好快好快，转眼间从2013到2017四年就过去了，从当初的青春懵懂，到现在的佛系无畏。是真的翻天覆地。2017上半年好像没什么要讲的，就一个毕业设计还值得一提，毕业设计上的具体东西，已经在上一篇有总结，好像毕业设计把自己的word排版练得不错，现在常规操作，无压力。excel,也还OK，ppt好像还差一点，太少自己做的模板了，知道一些操作，但是要是从头设计，漂亮的，有感觉得还是没有把握，好像是遗传了教学课件的基因，别的没学到，“课件模板”的精髓掌握的还挺好， ╮(╯▽╰)╭     </p>\n<p>工作，基本上已经没有什么压力，因为之前连框架都搭建过，一些基本的框架原理也都看过，再掌握的话也是在这个基础上进行添加，进行巩固。这个应该说再上一模块已经讲过了，不多说。下半年值得留意的几件小事如下：</p>\n<h4 id=\"捐赠回馈\"><a href=\"#捐赠回馈\" class=\"headerlink\" title=\"捐赠回馈\"></a>捐赠回馈</h4><p>对于母校，那是一个只可以自己骂的，别人不能说一点不好的。可我不能回去，在功成名就之间，也没有理由和脸面回去。现在，给我曾经待过的实验室送了两本书，机器学习相关，就OK了。也不是什么大的回馈，只希望之后的学弟学妹们在实验室能够收获前言知识，不过好像内容也没那么容易，至少我自己看的时候还是需要下点功夫的。深深的感谢曾经的老师，孟老师，电商系的各位大佬们，母校，祝你们在新的一年里工作顺利，阖家欢乐。</p>\n<h4 id=\"人生第二次醉，惩罚自己2017不再喝酒\"><a href=\"#人生第二次醉，惩罚自己2017不再喝酒\" class=\"headerlink\" title=\"人生第二次醉，惩罚自己2017不再喝酒\"></a>人生第二次醉，惩罚自己2017不再喝酒</h4><p>国庆节，表哥结婚，我看的都留下了泪水。可看起来也没什么泪点啊，和平常一样，前年二姑家儿子结婚也没这样啊。是不是又长大了一岁，又多了很多感触，时间就是这样无情的在你的人生中留下痕迹。甚至，你都没有发觉。听说心情不好会醉酒，我这次是真滴醉了。直到2018-1-1，这两个月内我都没有碰过酒，要好好的反思一下，也为了另外一件事，不能说的秘密。</p>\n<p>酱香型酒—–郎酒(四川)果然不一样。味道感觉更醇厚（红花郎，青花郎），平时都是浓香型，洋河(江苏)蓝色经典 天之来，海之蓝，梦之蓝，这也是平时的娱乐活动吗？别的知识倒是没有没有什么长进，酒啊这些反倒是看了不少。</p>\n<p>附知乎<a href=\"https://www.zhihu.com/question/20828281\" target=\"_blank\" rel=\"noopener\">白酒区别</a></p>\n<h4 id=\"十一第一次坐飞机。\"><a href=\"#十一第一次坐飞机。\" class=\"headerlink\" title=\"十一第一次坐飞机。\"></a>十一第一次坐飞机。</h4><p>国庆结束，值得说的就是坐飞机了，还记得高中，回外婆家，看见了一架直升飞机，问我弟说：“你想不想坐飞机？开飞机？”，那时谁能想到现在我就坐上了飞机呢？飞机是真滴快，2个小时，从南阳姜营机场到广州白云机场，还记得上次还是回学校等待答辩的时候，还在感慨高铁真的快，早上从广州南下午就到徐州东了，8个小时，相比飞机还是差了一点的。出行，外出，一直都是一件大事，老一辈还会挑选日子，“七不出门八不回家”，现在已经不再说这个日期了，不过背后的寓意还是要遵守的，柴米油盐酱醋茶七件东西没有准备好，不能出门，就是该准备的还要准备，准备好就可以随时出门。“孝悌忠义礼义廉耻”八条，没有做好，是不能回家的，现在，出门在外，一样要做到遵守法律法规，才能平安回家。</p>\n<p>今年的罗胖跨年演讲在上海-梅赛德斯奔驰文化中心，远程深圳卫视观看。得到，进行用户筛选，宝马在中间找我的客户。用户愿意付钱，十万百万已经足够了，这群就是你的忠实粉丝。你就要好好的对待她。同时，宝马也相中了这群用户，两者合作，也有有新的火花。看得到的用户，大都可能是买宝马的，买宝马的这群，很多都是看得到的。挺你,罗胖！<br>虽然有时候说你是个兜卖知识的奸商。(<em>^▽^</em>)</p>\n<h4 id=\"做饭\"><a href=\"#做饭\" class=\"headerlink\" title=\"做饭\"></a>做饭</h4><p>做饭，曾经以为很难的事情，现在也开始进行了，虽然不是特别好吃，特别没有卖相，但基本的像什么番茄炒鸡蛋，煎蛋，拍黄瓜，红萝卜炒肉，煲木耳羹，排骨汤啊，这些还是知道怎么做的了，最起码常见的一些套路还是有的。可以回家试一试，更加长进一点，再学习其他的一些做法，作品，好好学习，做拿手好菜，勾引她。哦对了，还要学习一个汤，大枣红糖姜水。像暖男靠近/^_^  (*￣︶￣)</p>\n<h4 id=\"还有最重要的一件事：girl-friend\"><a href=\"#还有最重要的一件事：girl-friend\" class=\"headerlink\" title=\"还有最重要的一件事：girl friend\"></a>还有最重要的一件事：girl friend</h4><p>做梦一般的！</p>\n<h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2><h4 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h4><p>感觉不能说什么了，就照着之后的计划进行就是万幸了。最近把github上的东西又“丢下”了！捡起来继续前行。ヾ(◍°∇°◍)ﾉﾞ</p>\n<p>邮箱登录：蒙牛风味酸牛奶<br><a href=\"http://naotu.baidu.com/file/096b0afa7159d6c24a0d3c0e3b0f4375?token=51b6065fa03be141\" target=\"_blank\" rel=\"noopener\">ML百度脑图</a><br>密码：RLxn</p>\n<h4 id=\"股票基金\"><a href=\"#股票基金\" class=\"headerlink\" title=\"股票基金\"></a>股票基金</h4><p>我的本科知识，温习一下。开通证券账号，进行投资。</p>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><h4 id=\"2017计划完成情况\"><a href=\"#2017计划完成情况\" class=\"headerlink\" title=\"2017计划完成情况\"></a>2017计划完成情况</h4><ul>\n<li>把前端知识系统起来。</li>\n<li>thinking in java代码演示。</li>\n<li>hadoop spark zookeeper等框架的理解。</li>\n<li>攒点钱——感觉这个最现实了，攒个两三万。</li>\n<li>身体方面，要保重，跑起来，运动起来。</li>\n<li>学学花，学学咖啡，学学植物，学学养生。这都是瞎扯的。</li>\n</ul>\n<p>完成度30%</p>\n<p>前端将js进行了深入，没有系统起来，如果从空白写一个页面，感觉还是无从下手。java代码没有演示，反倒是十大经典机器学习算法已经看完啦，hadoop等这些大数据的框架理论有了基础的了解，但是没有实际的应用，要进行一个hello world。运动方面，这是一个持久的话题。其他艺术方面，了解的也是一些烟酒茶吃喝等，其他艺术没有涉及，惭愧。</p>\n<h4 id=\"2018年计划\"><a href=\"#2018年计划\" class=\"headerlink\" title=\"2018年计划\"></a>2018年计划</h4><ul>\n<li>人不要脸，书不能丢，一个月一本书。要有记录</li>\n<li>画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）</li>\n<li>hello world 大数据 sparker等 demo</li>\n<li>kaggle等课程熟悉，完成5次天池比赛</li>\n</ul>\n<h4 id=\"接下来怎么发展的问题\"><a href=\"#接下来怎么发展的问题\" class=\"headerlink\" title=\"接下来怎么发展的问题\"></a>接下来怎么发展的问题</h4><p>2018.01.31慕小白 于广东佛山禅城</p>\n"},{"title":"2018年个人总结","date":"2019-01-14T20:19:28.000Z","description":"2018年已经过去，总结一下。","_content":"\n\n## 工作，个人技能\n\n#### 新事物、新工具\n\n- 自己前期对一些node等命令了解一些，现在通过在项目中使用，更加熟悉，像node、 npm、yarn、vs code 等工具。使用electron，可以实现在win和mac平台上打包成程序。\n- Hbuilder工具可以打包成Android和ios上的应用。\n- MongoDB redis等基本命令；之前也想着看，但是只是了解到一点儿内容，没有实际的使用，并没有把握，现在这些东西都可以说是熟悉了。\n- 更新系统可以基本实现脚本化，并且可以保留原始备份应用，之前一直都在写，后来因为window server的原因，中断了，现在又使用起来，肯定要把这部分的知识拾起来，深入一下了。\n- 杨百翰Coca语料库网站使用，antconc语料分析工具，如果工作上也出现这种没有接触过的工具，应该怎么处理？ \n\n\n#### 如何接触新事物、学习新工具\n\n新事物、新工具这类可以统称为“我的未知世界”、“我的盲区”。\n\n可以分为三类，一类是知道，简单的使用过，没有深入研究，参加使用英语语种讨论；第二类是听说过，但没有使用过，这类和第三类没有什么区别，参加使用，日语韩语德语等语种研讨，第三类是听都没有听说过，这种是有很大的专业性壁垒，类似去参加一场不知道是什么语言的研讨；\n\n明确一点的是首先要知道这个工具是做什么用的？出现这个工具，肯定是有一些背景的，为什么会出现，这就是原因，然后找一下有没有类似的工具，可以参考的理念性的，因为同一类工具，是解决同一类问题，，背后会有一定的原理性的东西存在。这样的东西把握住了之后，就能把握主旨。\n\n最次一级的是怎么使用这个工具？但这个也是最实用的一点。具体的使用情况，在具体用的时候再去研究，这样就能节省时间；人的精力是有限的，之前一位老师和我这么讲的时候，我还总觉得无所谓，我的精力无限，但是现在看来，该听的话还是要听一下的，把时间用在最需要研究的地方。\n\n> 最后一条，网络如此发达，谷歌百度为何不用？老师在你身边，怎能不好好学习。\n\n> 方法论比方法更重要。\n\n#### 计划性、把控方面\n\n分两部分，一个是对整体的项目规划性\n\n计划性认知，比之前有很大的提升，最开始在学校的时候，虽然也是带项目，但是对于一个项目的整体规划，整体到什么阶段，要做到什么事情，要给客户展示什么内容，缺乏认识；只是一味的往前做，没有给客户一个安心，每一个周期做什么东西了，并没有给客户。这样客户的感觉就是很随意，看到什么就做什么。\n\n二是对任务的把控方面\n\n能够把任务进行分解，分模块，按步骤进行处理。可以大致预估任务的复杂度，预计的人天,这可以说是提升最大的软技能，上一份工作中，只是对自己能力的预估，慢慢的掌握住方法；任务复杂或者简单，和负责人说有多少内容，慢慢的自己就有了一点感觉，在对别人的时间把控方面也有了提升，这点还要通过看别人的代码，逐渐建立起来的体系。\n\n#### 分析问题，解决问题\n\n例如：①有一个树形查询的oracle语句，在数据量少的时候很快就可以查出来列表，数据量大之后，因为每一条数据都要统计其他的信息，列表就要加载很久，最后采用redis的形式，存储这个计算出来的值。\n\n在影响这个计算值的时候，把redis中的数据清空，在查询的时候把这个值填到redis中，下次列表查询的时候就直接使用这个值，具体可以参考其他的文章[性能优化之redis储存计算值](https://muxiaobai.github.io/2019/02/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bredis%E5%82%A8%E5%AD%98%E8%AE%A1%E7%AE%97%E5%80%BC/)\n\n②有一个列表，后台响应很快，大概300ms的时间，数据都已经到前台了，但是前台的页面重新layout，又采用的是easyui的组件，因此通过chrome的Performance来进行积累渲染的过程，优化前台的渲染逻辑，从而达到要求。\n\n> 这个实际上也是因为平时经常看一些文章，所以就有这方面的想法，算是厚积薄发吧，还是要注重积累，现在如果分析到响应速度呀等，就先从前后台的交互位置查起，看是前台，还是后台的问题导致的，再进一步找后台sql还是循环，是数据量大，传输过程，网络影响，还是前台渲染的时候有问题。\n\n遇到问题应该找谁来解决，协调，把握几点吧，自己能解决的问题，说出大概的时间解决，自己解决不了的问题，找相关人员解决，自己不知道找谁来解决的问题，向领导反馈，这些基本的逻辑，有的时候还真的是没呢么容易做到，一般总是想着我来做我来做，但是呢，一个人的精力有限，该分出去的就要分出去，有时，可能就会想着都经过自己的话，就知道，能把控，可是，该放松的该授权的就要授权。\n\n####\n\n## 生活\n\n#### 踏过的地方\n\n踏过的城市：南阳、枣庄、西安、宝鸡太白、深圳、香港、广西河池-柳州、杭州\n\n\n> 西安  正南正北的规矩，古代皇宫式的华丽\n\n北方真不是人呆的地方，夏天热的要死，冬天雾霾让人无法呼吸，还是南方好，不冷，空气好，就是离家远了点儿，西安的夏天高达40度，怎么玩？玩不了丫。还是喜欢走路上班。从第一份工作，到现在，上下班都是住宿和公司都是相差不远的，走路，还可以锻炼一下身体，棒棒哒！！！\n\n> 宝鸡太白 看秦岭云海  高山云海之上，神仙居住的地方\n\n山里面凉快，真的是很凉快，在里面看的水还好一点，但是在一条路上，有一个缺口，可能就是在这里突出一下秦岭的威严，天然的露出了一个小口子，让你们看看，在我大秦岭面前，你们这些小如蝼蚁的人们，都给我臣服吧。再来插播一条，云海去看过的都说好。ps：并没有收广告费。\n\n> 香港 去体验一把，维多利亚港 高楼，海港，游轮，帆船\n\n登上游轮，吹着海风，别有一番滋味，想到一句话：你以为有钱人是幸福的，实际上，有钱人的幸福你想都想不到。莎莎、万宁、屈臣氏、卓悦，遍地，人挨人，人挤人，护肤品，化妆品，奶粉，保健品（贴膏），很奇怪，奶粉和保健品会在这里售卖?\n电影里面总能看到有人拿的是一卷钱，用卷起来的，这次过去换港币的时候，真的是这样子的，我跑到一个小的巷道里面，找的是一个比较正规的柜台，当时，旁边有很多那种“一卷”钱，在香港这种地方，没有港币真的很麻烦，很多地方还是只收现金，1000的不收。不像大陆地区，哪怕没有带现金，吃穿玩，一切都正常。\n想象中的紫金花广场应该很霸气的，到跟前一看，哎呀，还不如大陆的一个小广场，不过还是拍照留念了一下。毕竟来了一趟，不容易呢。\n\n> 广西河池 看山看水 山水一体，原始山川河流\n\n抖音小视频，山顶上转圈，转圈，我真的是去了，虽然是在不知名的小山顶上，但是这也是山丫，感觉很舒服，和秦岭的山水，和香港的海风是完全不一样的感觉，这里的山水，是小景，是一种温文尔雅的舒适感，坐船真坐的够够的了，不贵，而且将近一个小时，回来的路上，坐的人们都是冷飕飕的，刘三姐的故事，在广西真的是随处都是，路桥，山里，坊间，一会儿说是桂林阳朔的，一会说是河池宜州。本来就是游山玩水，历史问题就不再考究。听说这里的人们还在唱山歌，原来山间人家，自有山间的一些儿玩法，中原人没有见过的，就觉得神奇，唱的都是人家自己的语言和调调。\n\n> 柳州 近代工业  一种厚重，有工业底蕴的城市\n\n螺蛳粉真的是有螺蛳的，螺蛳熬得汤，加酸笋，加腐竹，加豆泡（豆腐泡），加卤水。\n\n柳江从中穿过，别称“壶城”，柳州城有很多桥，当时已经建好的有21座，还有在规划中的，为了交通，横穿柳江过来，桥梁工程应该是很发达的；柳工，柳钢，五菱，重工业基地，双面针，金嗓子等，柳钢雪条，雪糕，是一座小城，和惠州，徐州很像，但是没有惠州那么浮躁，没有徐州那么庄重，个人感觉柳州很随和，但也很稳。\n\n> 杭州 西湖加现代设计的一种和谐\n\n听说是有：西湖醋鱼，龙井虾仁 八宝豆腐等。楼外楼。真的只是听说，去一周，直接就回来了，什么都没有带，遗憾，还说带一点茶叶回来呢，西湖，龙井绿茶，不过自己出去跑一趟，就很好的了。\n\n> 实际上只要看到外部的，未经历过的，都是心情舒畅。\n\n#### 公开课\n\n前段时间一直在看心理学的公开课，说实话，收获挺大的，早就想看一些这种社会学心理学的内容，这也是`下一年重点内容`，\n\n#### 经历过的事情\n\n> 辞职和找工作、要福利\n\n和领导说辞职的时候，一定要挺住，别放松，说一个月才能办理，咱就要要一周就能出结果。很多情况下，只不过是口头上说，一般不是要职人员，当前没有必要的项目，那么这种流程很快就能结束的，一个月，待在那里还不要疯了，何必在那里碍眼。找工作的时候，该问清楚的就要问清楚，该有的利益福利，该要就要。有些话适合说清楚，就别含糊。\n\n\n> 学会拒绝\n\n\n上级，上次一个任务，我明确的和上级说过，可能会出现这种问题，需要我们这边提供帮助，可是呀，他说不用我们这边，不用，结果，两天之后，果然还是出现这种问题了，然后又打电话让我给他解决，我就说现在没有时间，要到晚上才行。想其他办法，我估计，还是会找我来进行处理。\n\n该跑的坑就要跑，上一任技术走了，眼看当下没有人接手，烫手的山芋，让我接，都不是傻瓜。我还是选择出去待在项目上，能跟着实力强的人再学习，何乐而不为呢？蚂蚁金服，唯一对不住的就是她，刚回去，就又跑了。\n\n亲友，为什么亲属长辈问我有没有钱？真的是很无语，果断拒绝。当时我就不抱有给他的可能，因为我也知道这种人，但像同学，这次问我借钱的时候，我直接问他要多少，有什么事情要帮忙的，有的时候，亲戚这种关系更不能掺和利益，麻烦，说不清，道不明，反而惹得都不舒服。\n\n\n> 学会表达自己的真实感受\n\n没有表达好，直言快语，有话直说，工作上在对待上司，工资等，简单一点儿，直接一点儿，省的把自己搞的很累，还过得不舒服。有不知道的就直接问，\n\n> 学会控制自己的真实感受\n\n从心理学学到的，而且在生活中经历过的。\n\n- 1.避免表达出事后诸葛亮的一种态度。\n- 2.想解决办法，而不是制造麻烦。\n- 3.有时候太直白，不利于团队团结。\n\n\n## 计划\n\n\n#### 2018年计划完成情况\n\n- 人不要脸，书不能丢，一个月一本书。要有记录\n- 画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）\n- hello world 大数据 sparker等 demo\n- kaggle等课程熟悉，完成5次天池比赛\n\n完成度20%\n\n没有驱动性，自驱力差；机器学习只学了点儿皮毛，kaggle完成2个，熟悉大致的操作流程，无法商用。后半年都没有实际操作。反倒是MongoDB、redis等工具开始用起来；运维方面的知识掌握不少，把之前简单的脚本重新掌握并应用了。\n\n#### 2019年计划\n\n- 听讲座，参加技术，文化，社会论坛等，扩展知识广度。\n- 心理学知识，受益匪浅，需要继续学习。\n- 研究服务器性能、部署等问题，分析出自己的一套配置。\n- \n\n\n2019.01.15 慕小白 于浙江杭州","source":"_posts/2018年个人总结.md","raw":"---\ntitle: 2018年个人总结\ndate: 2019-01-15 04:19:28\ntags: 2018\ncategories: 总结\ndescription: \"2018年已经过去，总结一下。\"\n---\n\n\n## 工作，个人技能\n\n#### 新事物、新工具\n\n- 自己前期对一些node等命令了解一些，现在通过在项目中使用，更加熟悉，像node、 npm、yarn、vs code 等工具。使用electron，可以实现在win和mac平台上打包成程序。\n- Hbuilder工具可以打包成Android和ios上的应用。\n- MongoDB redis等基本命令；之前也想着看，但是只是了解到一点儿内容，没有实际的使用，并没有把握，现在这些东西都可以说是熟悉了。\n- 更新系统可以基本实现脚本化，并且可以保留原始备份应用，之前一直都在写，后来因为window server的原因，中断了，现在又使用起来，肯定要把这部分的知识拾起来，深入一下了。\n- 杨百翰Coca语料库网站使用，antconc语料分析工具，如果工作上也出现这种没有接触过的工具，应该怎么处理？ \n\n\n#### 如何接触新事物、学习新工具\n\n新事物、新工具这类可以统称为“我的未知世界”、“我的盲区”。\n\n可以分为三类，一类是知道，简单的使用过，没有深入研究，参加使用英语语种讨论；第二类是听说过，但没有使用过，这类和第三类没有什么区别，参加使用，日语韩语德语等语种研讨，第三类是听都没有听说过，这种是有很大的专业性壁垒，类似去参加一场不知道是什么语言的研讨；\n\n明确一点的是首先要知道这个工具是做什么用的？出现这个工具，肯定是有一些背景的，为什么会出现，这就是原因，然后找一下有没有类似的工具，可以参考的理念性的，因为同一类工具，是解决同一类问题，，背后会有一定的原理性的东西存在。这样的东西把握住了之后，就能把握主旨。\n\n最次一级的是怎么使用这个工具？但这个也是最实用的一点。具体的使用情况，在具体用的时候再去研究，这样就能节省时间；人的精力是有限的，之前一位老师和我这么讲的时候，我还总觉得无所谓，我的精力无限，但是现在看来，该听的话还是要听一下的，把时间用在最需要研究的地方。\n\n> 最后一条，网络如此发达，谷歌百度为何不用？老师在你身边，怎能不好好学习。\n\n> 方法论比方法更重要。\n\n#### 计划性、把控方面\n\n分两部分，一个是对整体的项目规划性\n\n计划性认知，比之前有很大的提升，最开始在学校的时候，虽然也是带项目，但是对于一个项目的整体规划，整体到什么阶段，要做到什么事情，要给客户展示什么内容，缺乏认识；只是一味的往前做，没有给客户一个安心，每一个周期做什么东西了，并没有给客户。这样客户的感觉就是很随意，看到什么就做什么。\n\n二是对任务的把控方面\n\n能够把任务进行分解，分模块，按步骤进行处理。可以大致预估任务的复杂度，预计的人天,这可以说是提升最大的软技能，上一份工作中，只是对自己能力的预估，慢慢的掌握住方法；任务复杂或者简单，和负责人说有多少内容，慢慢的自己就有了一点感觉，在对别人的时间把控方面也有了提升，这点还要通过看别人的代码，逐渐建立起来的体系。\n\n#### 分析问题，解决问题\n\n例如：①有一个树形查询的oracle语句，在数据量少的时候很快就可以查出来列表，数据量大之后，因为每一条数据都要统计其他的信息，列表就要加载很久，最后采用redis的形式，存储这个计算出来的值。\n\n在影响这个计算值的时候，把redis中的数据清空，在查询的时候把这个值填到redis中，下次列表查询的时候就直接使用这个值，具体可以参考其他的文章[性能优化之redis储存计算值](https://muxiaobai.github.io/2019/02/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bredis%E5%82%A8%E5%AD%98%E8%AE%A1%E7%AE%97%E5%80%BC/)\n\n②有一个列表，后台响应很快，大概300ms的时间，数据都已经到前台了，但是前台的页面重新layout，又采用的是easyui的组件，因此通过chrome的Performance来进行积累渲染的过程，优化前台的渲染逻辑，从而达到要求。\n\n> 这个实际上也是因为平时经常看一些文章，所以就有这方面的想法，算是厚积薄发吧，还是要注重积累，现在如果分析到响应速度呀等，就先从前后台的交互位置查起，看是前台，还是后台的问题导致的，再进一步找后台sql还是循环，是数据量大，传输过程，网络影响，还是前台渲染的时候有问题。\n\n遇到问题应该找谁来解决，协调，把握几点吧，自己能解决的问题，说出大概的时间解决，自己解决不了的问题，找相关人员解决，自己不知道找谁来解决的问题，向领导反馈，这些基本的逻辑，有的时候还真的是没呢么容易做到，一般总是想着我来做我来做，但是呢，一个人的精力有限，该分出去的就要分出去，有时，可能就会想着都经过自己的话，就知道，能把控，可是，该放松的该授权的就要授权。\n\n####\n\n## 生活\n\n#### 踏过的地方\n\n踏过的城市：南阳、枣庄、西安、宝鸡太白、深圳、香港、广西河池-柳州、杭州\n\n\n> 西安  正南正北的规矩，古代皇宫式的华丽\n\n北方真不是人呆的地方，夏天热的要死，冬天雾霾让人无法呼吸，还是南方好，不冷，空气好，就是离家远了点儿，西安的夏天高达40度，怎么玩？玩不了丫。还是喜欢走路上班。从第一份工作，到现在，上下班都是住宿和公司都是相差不远的，走路，还可以锻炼一下身体，棒棒哒！！！\n\n> 宝鸡太白 看秦岭云海  高山云海之上，神仙居住的地方\n\n山里面凉快，真的是很凉快，在里面看的水还好一点，但是在一条路上，有一个缺口，可能就是在这里突出一下秦岭的威严，天然的露出了一个小口子，让你们看看，在我大秦岭面前，你们这些小如蝼蚁的人们，都给我臣服吧。再来插播一条，云海去看过的都说好。ps：并没有收广告费。\n\n> 香港 去体验一把，维多利亚港 高楼，海港，游轮，帆船\n\n登上游轮，吹着海风，别有一番滋味，想到一句话：你以为有钱人是幸福的，实际上，有钱人的幸福你想都想不到。莎莎、万宁、屈臣氏、卓悦，遍地，人挨人，人挤人，护肤品，化妆品，奶粉，保健品（贴膏），很奇怪，奶粉和保健品会在这里售卖?\n电影里面总能看到有人拿的是一卷钱，用卷起来的，这次过去换港币的时候，真的是这样子的，我跑到一个小的巷道里面，找的是一个比较正规的柜台，当时，旁边有很多那种“一卷”钱，在香港这种地方，没有港币真的很麻烦，很多地方还是只收现金，1000的不收。不像大陆地区，哪怕没有带现金，吃穿玩，一切都正常。\n想象中的紫金花广场应该很霸气的，到跟前一看，哎呀，还不如大陆的一个小广场，不过还是拍照留念了一下。毕竟来了一趟，不容易呢。\n\n> 广西河池 看山看水 山水一体，原始山川河流\n\n抖音小视频，山顶上转圈，转圈，我真的是去了，虽然是在不知名的小山顶上，但是这也是山丫，感觉很舒服，和秦岭的山水，和香港的海风是完全不一样的感觉，这里的山水，是小景，是一种温文尔雅的舒适感，坐船真坐的够够的了，不贵，而且将近一个小时，回来的路上，坐的人们都是冷飕飕的，刘三姐的故事，在广西真的是随处都是，路桥，山里，坊间，一会儿说是桂林阳朔的，一会说是河池宜州。本来就是游山玩水，历史问题就不再考究。听说这里的人们还在唱山歌，原来山间人家，自有山间的一些儿玩法，中原人没有见过的，就觉得神奇，唱的都是人家自己的语言和调调。\n\n> 柳州 近代工业  一种厚重，有工业底蕴的城市\n\n螺蛳粉真的是有螺蛳的，螺蛳熬得汤，加酸笋，加腐竹，加豆泡（豆腐泡），加卤水。\n\n柳江从中穿过，别称“壶城”，柳州城有很多桥，当时已经建好的有21座，还有在规划中的，为了交通，横穿柳江过来，桥梁工程应该是很发达的；柳工，柳钢，五菱，重工业基地，双面针，金嗓子等，柳钢雪条，雪糕，是一座小城，和惠州，徐州很像，但是没有惠州那么浮躁，没有徐州那么庄重，个人感觉柳州很随和，但也很稳。\n\n> 杭州 西湖加现代设计的一种和谐\n\n听说是有：西湖醋鱼，龙井虾仁 八宝豆腐等。楼外楼。真的只是听说，去一周，直接就回来了，什么都没有带，遗憾，还说带一点茶叶回来呢，西湖，龙井绿茶，不过自己出去跑一趟，就很好的了。\n\n> 实际上只要看到外部的，未经历过的，都是心情舒畅。\n\n#### 公开课\n\n前段时间一直在看心理学的公开课，说实话，收获挺大的，早就想看一些这种社会学心理学的内容，这也是`下一年重点内容`，\n\n#### 经历过的事情\n\n> 辞职和找工作、要福利\n\n和领导说辞职的时候，一定要挺住，别放松，说一个月才能办理，咱就要要一周就能出结果。很多情况下，只不过是口头上说，一般不是要职人员，当前没有必要的项目，那么这种流程很快就能结束的，一个月，待在那里还不要疯了，何必在那里碍眼。找工作的时候，该问清楚的就要问清楚，该有的利益福利，该要就要。有些话适合说清楚，就别含糊。\n\n\n> 学会拒绝\n\n\n上级，上次一个任务，我明确的和上级说过，可能会出现这种问题，需要我们这边提供帮助，可是呀，他说不用我们这边，不用，结果，两天之后，果然还是出现这种问题了，然后又打电话让我给他解决，我就说现在没有时间，要到晚上才行。想其他办法，我估计，还是会找我来进行处理。\n\n该跑的坑就要跑，上一任技术走了，眼看当下没有人接手，烫手的山芋，让我接，都不是傻瓜。我还是选择出去待在项目上，能跟着实力强的人再学习，何乐而不为呢？蚂蚁金服，唯一对不住的就是她，刚回去，就又跑了。\n\n亲友，为什么亲属长辈问我有没有钱？真的是很无语，果断拒绝。当时我就不抱有给他的可能，因为我也知道这种人，但像同学，这次问我借钱的时候，我直接问他要多少，有什么事情要帮忙的，有的时候，亲戚这种关系更不能掺和利益，麻烦，说不清，道不明，反而惹得都不舒服。\n\n\n> 学会表达自己的真实感受\n\n没有表达好，直言快语，有话直说，工作上在对待上司，工资等，简单一点儿，直接一点儿，省的把自己搞的很累，还过得不舒服。有不知道的就直接问，\n\n> 学会控制自己的真实感受\n\n从心理学学到的，而且在生活中经历过的。\n\n- 1.避免表达出事后诸葛亮的一种态度。\n- 2.想解决办法，而不是制造麻烦。\n- 3.有时候太直白，不利于团队团结。\n\n\n## 计划\n\n\n#### 2018年计划完成情况\n\n- 人不要脸，书不能丢，一个月一本书。要有记录\n- 画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）\n- hello world 大数据 sparker等 demo\n- kaggle等课程熟悉，完成5次天池比赛\n\n完成度20%\n\n没有驱动性，自驱力差；机器学习只学了点儿皮毛，kaggle完成2个，熟悉大致的操作流程，无法商用。后半年都没有实际操作。反倒是MongoDB、redis等工具开始用起来；运维方面的知识掌握不少，把之前简单的脚本重新掌握并应用了。\n\n#### 2019年计划\n\n- 听讲座，参加技术，文化，社会论坛等，扩展知识广度。\n- 心理学知识，受益匪浅，需要继续学习。\n- 研究服务器性能、部署等问题，分析出自己的一套配置。\n- \n\n\n2019.01.15 慕小白 于浙江杭州","slug":"2018年个人总结","published":1,"updated":"2019-02-16T04:58:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79j006gugv5yog7o727","content":"<h2 id=\"工作，个人技能\"><a href=\"#工作，个人技能\" class=\"headerlink\" title=\"工作，个人技能\"></a>工作，个人技能</h2><h4 id=\"新事物、新工具\"><a href=\"#新事物、新工具\" class=\"headerlink\" title=\"新事物、新工具\"></a>新事物、新工具</h4><ul>\n<li>自己前期对一些node等命令了解一些，现在通过在项目中使用，更加熟悉，像node、 npm、yarn、vs code 等工具。使用electron，可以实现在win和mac平台上打包成程序。</li>\n<li>Hbuilder工具可以打包成Android和ios上的应用。</li>\n<li>MongoDB redis等基本命令；之前也想着看，但是只是了解到一点儿内容，没有实际的使用，并没有把握，现在这些东西都可以说是熟悉了。</li>\n<li>更新系统可以基本实现脚本化，并且可以保留原始备份应用，之前一直都在写，后来因为window server的原因，中断了，现在又使用起来，肯定要把这部分的知识拾起来，深入一下了。</li>\n<li>杨百翰Coca语料库网站使用，antconc语料分析工具，如果工作上也出现这种没有接触过的工具，应该怎么处理？ </li>\n</ul>\n<h4 id=\"如何接触新事物、学习新工具\"><a href=\"#如何接触新事物、学习新工具\" class=\"headerlink\" title=\"如何接触新事物、学习新工具\"></a>如何接触新事物、学习新工具</h4><p>新事物、新工具这类可以统称为“我的未知世界”、“我的盲区”。</p>\n<p>可以分为三类，一类是知道，简单的使用过，没有深入研究，参加使用英语语种讨论；第二类是听说过，但没有使用过，这类和第三类没有什么区别，参加使用，日语韩语德语等语种研讨，第三类是听都没有听说过，这种是有很大的专业性壁垒，类似去参加一场不知道是什么语言的研讨；</p>\n<p>明确一点的是首先要知道这个工具是做什么用的？出现这个工具，肯定是有一些背景的，为什么会出现，这就是原因，然后找一下有没有类似的工具，可以参考的理念性的，因为同一类工具，是解决同一类问题，，背后会有一定的原理性的东西存在。这样的东西把握住了之后，就能把握主旨。</p>\n<p>最次一级的是怎么使用这个工具？但这个也是最实用的一点。具体的使用情况，在具体用的时候再去研究，这样就能节省时间；人的精力是有限的，之前一位老师和我这么讲的时候，我还总觉得无所谓，我的精力无限，但是现在看来，该听的话还是要听一下的，把时间用在最需要研究的地方。</p>\n<blockquote>\n<p>最后一条，网络如此发达，谷歌百度为何不用？老师在你身边，怎能不好好学习。</p>\n</blockquote>\n<blockquote>\n<p>方法论比方法更重要。</p>\n</blockquote>\n<h4 id=\"计划性、把控方面\"><a href=\"#计划性、把控方面\" class=\"headerlink\" title=\"计划性、把控方面\"></a>计划性、把控方面</h4><p>分两部分，一个是对整体的项目规划性</p>\n<p>计划性认知，比之前有很大的提升，最开始在学校的时候，虽然也是带项目，但是对于一个项目的整体规划，整体到什么阶段，要做到什么事情，要给客户展示什么内容，缺乏认识；只是一味的往前做，没有给客户一个安心，每一个周期做什么东西了，并没有给客户。这样客户的感觉就是很随意，看到什么就做什么。</p>\n<p>二是对任务的把控方面</p>\n<p>能够把任务进行分解，分模块，按步骤进行处理。可以大致预估任务的复杂度，预计的人天,这可以说是提升最大的软技能，上一份工作中，只是对自己能力的预估，慢慢的掌握住方法；任务复杂或者简单，和负责人说有多少内容，慢慢的自己就有了一点感觉，在对别人的时间把控方面也有了提升，这点还要通过看别人的代码，逐渐建立起来的体系。</p>\n<h4 id=\"分析问题，解决问题\"><a href=\"#分析问题，解决问题\" class=\"headerlink\" title=\"分析问题，解决问题\"></a>分析问题，解决问题</h4><p>例如：①有一个树形查询的oracle语句，在数据量少的时候很快就可以查出来列表，数据量大之后，因为每一条数据都要统计其他的信息，列表就要加载很久，最后采用redis的形式，存储这个计算出来的值。</p>\n<p>在影响这个计算值的时候，把redis中的数据清空，在查询的时候把这个值填到redis中，下次列表查询的时候就直接使用这个值，具体可以参考其他的文章<a href=\"https://muxiaobai.github.io/2019/02/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bredis%E5%82%A8%E5%AD%98%E8%AE%A1%E7%AE%97%E5%80%BC/\">性能优化之redis储存计算值</a></p>\n<p>②有一个列表，后台响应很快，大概300ms的时间，数据都已经到前台了，但是前台的页面重新layout，又采用的是easyui的组件，因此通过chrome的Performance来进行积累渲染的过程，优化前台的渲染逻辑，从而达到要求。</p>\n<blockquote>\n<p>这个实际上也是因为平时经常看一些文章，所以就有这方面的想法，算是厚积薄发吧，还是要注重积累，现在如果分析到响应速度呀等，就先从前后台的交互位置查起，看是前台，还是后台的问题导致的，再进一步找后台sql还是循环，是数据量大，传输过程，网络影响，还是前台渲染的时候有问题。</p>\n</blockquote>\n<p>遇到问题应该找谁来解决，协调，把握几点吧，自己能解决的问题，说出大概的时间解决，自己解决不了的问题，找相关人员解决，自己不知道找谁来解决的问题，向领导反馈，这些基本的逻辑，有的时候还真的是没呢么容易做到，一般总是想着我来做我来做，但是呢，一个人的精力有限，该分出去的就要分出去，有时，可能就会想着都经过自己的话，就知道，能把控，可是，该放松的该授权的就要授权。</p>\n<p>####</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><h4 id=\"踏过的地方\"><a href=\"#踏过的地方\" class=\"headerlink\" title=\"踏过的地方\"></a>踏过的地方</h4><p>踏过的城市：南阳、枣庄、西安、宝鸡太白、深圳、香港、广西河池-柳州、杭州</p>\n<blockquote>\n<p>西安  正南正北的规矩，古代皇宫式的华丽</p>\n</blockquote>\n<p>北方真不是人呆的地方，夏天热的要死，冬天雾霾让人无法呼吸，还是南方好，不冷，空气好，就是离家远了点儿，西安的夏天高达40度，怎么玩？玩不了丫。还是喜欢走路上班。从第一份工作，到现在，上下班都是住宿和公司都是相差不远的，走路，还可以锻炼一下身体，棒棒哒！！！</p>\n<blockquote>\n<p>宝鸡太白 看秦岭云海  高山云海之上，神仙居住的地方</p>\n</blockquote>\n<p>山里面凉快，真的是很凉快，在里面看的水还好一点，但是在一条路上，有一个缺口，可能就是在这里突出一下秦岭的威严，天然的露出了一个小口子，让你们看看，在我大秦岭面前，你们这些小如蝼蚁的人们，都给我臣服吧。再来插播一条，云海去看过的都说好。ps：并没有收广告费。</p>\n<blockquote>\n<p>香港 去体验一把，维多利亚港 高楼，海港，游轮，帆船</p>\n</blockquote>\n<p>登上游轮，吹着海风，别有一番滋味，想到一句话：你以为有钱人是幸福的，实际上，有钱人的幸福你想都想不到。莎莎、万宁、屈臣氏、卓悦，遍地，人挨人，人挤人，护肤品，化妆品，奶粉，保健品（贴膏），很奇怪，奶粉和保健品会在这里售卖?<br>电影里面总能看到有人拿的是一卷钱，用卷起来的，这次过去换港币的时候，真的是这样子的，我跑到一个小的巷道里面，找的是一个比较正规的柜台，当时，旁边有很多那种“一卷”钱，在香港这种地方，没有港币真的很麻烦，很多地方还是只收现金，1000的不收。不像大陆地区，哪怕没有带现金，吃穿玩，一切都正常。<br>想象中的紫金花广场应该很霸气的，到跟前一看，哎呀，还不如大陆的一个小广场，不过还是拍照留念了一下。毕竟来了一趟，不容易呢。</p>\n<blockquote>\n<p>广西河池 看山看水 山水一体，原始山川河流</p>\n</blockquote>\n<p>抖音小视频，山顶上转圈，转圈，我真的是去了，虽然是在不知名的小山顶上，但是这也是山丫，感觉很舒服，和秦岭的山水，和香港的海风是完全不一样的感觉，这里的山水，是小景，是一种温文尔雅的舒适感，坐船真坐的够够的了，不贵，而且将近一个小时，回来的路上，坐的人们都是冷飕飕的，刘三姐的故事，在广西真的是随处都是，路桥，山里，坊间，一会儿说是桂林阳朔的，一会说是河池宜州。本来就是游山玩水，历史问题就不再考究。听说这里的人们还在唱山歌，原来山间人家，自有山间的一些儿玩法，中原人没有见过的，就觉得神奇，唱的都是人家自己的语言和调调。</p>\n<blockquote>\n<p>柳州 近代工业  一种厚重，有工业底蕴的城市</p>\n</blockquote>\n<p>螺蛳粉真的是有螺蛳的，螺蛳熬得汤，加酸笋，加腐竹，加豆泡（豆腐泡），加卤水。</p>\n<p>柳江从中穿过，别称“壶城”，柳州城有很多桥，当时已经建好的有21座，还有在规划中的，为了交通，横穿柳江过来，桥梁工程应该是很发达的；柳工，柳钢，五菱，重工业基地，双面针，金嗓子等，柳钢雪条，雪糕，是一座小城，和惠州，徐州很像，但是没有惠州那么浮躁，没有徐州那么庄重，个人感觉柳州很随和，但也很稳。</p>\n<blockquote>\n<p>杭州 西湖加现代设计的一种和谐</p>\n</blockquote>\n<p>听说是有：西湖醋鱼，龙井虾仁 八宝豆腐等。楼外楼。真的只是听说，去一周，直接就回来了，什么都没有带，遗憾，还说带一点茶叶回来呢，西湖，龙井绿茶，不过自己出去跑一趟，就很好的了。</p>\n<blockquote>\n<p>实际上只要看到外部的，未经历过的，都是心情舒畅。</p>\n</blockquote>\n<h4 id=\"公开课\"><a href=\"#公开课\" class=\"headerlink\" title=\"公开课\"></a>公开课</h4><p>前段时间一直在看心理学的公开课，说实话，收获挺大的，早就想看一些这种社会学心理学的内容，这也是<code>下一年重点内容</code>，</p>\n<h4 id=\"经历过的事情\"><a href=\"#经历过的事情\" class=\"headerlink\" title=\"经历过的事情\"></a>经历过的事情</h4><blockquote>\n<p>辞职和找工作、要福利</p>\n</blockquote>\n<p>和领导说辞职的时候，一定要挺住，别放松，说一个月才能办理，咱就要要一周就能出结果。很多情况下，只不过是口头上说，一般不是要职人员，当前没有必要的项目，那么这种流程很快就能结束的，一个月，待在那里还不要疯了，何必在那里碍眼。找工作的时候，该问清楚的就要问清楚，该有的利益福利，该要就要。有些话适合说清楚，就别含糊。</p>\n<blockquote>\n<p>学会拒绝</p>\n</blockquote>\n<p>上级，上次一个任务，我明确的和上级说过，可能会出现这种问题，需要我们这边提供帮助，可是呀，他说不用我们这边，不用，结果，两天之后，果然还是出现这种问题了，然后又打电话让我给他解决，我就说现在没有时间，要到晚上才行。想其他办法，我估计，还是会找我来进行处理。</p>\n<p>该跑的坑就要跑，上一任技术走了，眼看当下没有人接手，烫手的山芋，让我接，都不是傻瓜。我还是选择出去待在项目上，能跟着实力强的人再学习，何乐而不为呢？蚂蚁金服，唯一对不住的就是她，刚回去，就又跑了。</p>\n<p>亲友，为什么亲属长辈问我有没有钱？真的是很无语，果断拒绝。当时我就不抱有给他的可能，因为我也知道这种人，但像同学，这次问我借钱的时候，我直接问他要多少，有什么事情要帮忙的，有的时候，亲戚这种关系更不能掺和利益，麻烦，说不清，道不明，反而惹得都不舒服。</p>\n<blockquote>\n<p>学会表达自己的真实感受</p>\n</blockquote>\n<p>没有表达好，直言快语，有话直说，工作上在对待上司，工资等，简单一点儿，直接一点儿，省的把自己搞的很累，还过得不舒服。有不知道的就直接问，</p>\n<blockquote>\n<p>学会控制自己的真实感受</p>\n</blockquote>\n<p>从心理学学到的，而且在生活中经历过的。</p>\n<ul>\n<li>1.避免表达出事后诸葛亮的一种态度。</li>\n<li>2.想解决办法，而不是制造麻烦。</li>\n<li>3.有时候太直白，不利于团队团结。</li>\n</ul>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><h4 id=\"2018年计划完成情况\"><a href=\"#2018年计划完成情况\" class=\"headerlink\" title=\"2018年计划完成情况\"></a>2018年计划完成情况</h4><ul>\n<li>人不要脸，书不能丢，一个月一本书。要有记录</li>\n<li>画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）</li>\n<li>hello world 大数据 sparker等 demo</li>\n<li>kaggle等课程熟悉，完成5次天池比赛</li>\n</ul>\n<p>完成度20%</p>\n<p>没有驱动性，自驱力差；机器学习只学了点儿皮毛，kaggle完成2个，熟悉大致的操作流程，无法商用。后半年都没有实际操作。反倒是MongoDB、redis等工具开始用起来；运维方面的知识掌握不少，把之前简单的脚本重新掌握并应用了。</p>\n<h4 id=\"2019年计划\"><a href=\"#2019年计划\" class=\"headerlink\" title=\"2019年计划\"></a>2019年计划</h4><ul>\n<li>听讲座，参加技术，文化，社会论坛等，扩展知识广度。</li>\n<li>心理学知识，受益匪浅，需要继续学习。</li>\n<li>研究服务器性能、部署等问题，分析出自己的一套配置。</li>\n<li></li>\n</ul>\n<p>2019.01.15 慕小白 于浙江杭州</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工作，个人技能\"><a href=\"#工作，个人技能\" class=\"headerlink\" title=\"工作，个人技能\"></a>工作，个人技能</h2><h4 id=\"新事物、新工具\"><a href=\"#新事物、新工具\" class=\"headerlink\" title=\"新事物、新工具\"></a>新事物、新工具</h4><ul>\n<li>自己前期对一些node等命令了解一些，现在通过在项目中使用，更加熟悉，像node、 npm、yarn、vs code 等工具。使用electron，可以实现在win和mac平台上打包成程序。</li>\n<li>Hbuilder工具可以打包成Android和ios上的应用。</li>\n<li>MongoDB redis等基本命令；之前也想着看，但是只是了解到一点儿内容，没有实际的使用，并没有把握，现在这些东西都可以说是熟悉了。</li>\n<li>更新系统可以基本实现脚本化，并且可以保留原始备份应用，之前一直都在写，后来因为window server的原因，中断了，现在又使用起来，肯定要把这部分的知识拾起来，深入一下了。</li>\n<li>杨百翰Coca语料库网站使用，antconc语料分析工具，如果工作上也出现这种没有接触过的工具，应该怎么处理？ </li>\n</ul>\n<h4 id=\"如何接触新事物、学习新工具\"><a href=\"#如何接触新事物、学习新工具\" class=\"headerlink\" title=\"如何接触新事物、学习新工具\"></a>如何接触新事物、学习新工具</h4><p>新事物、新工具这类可以统称为“我的未知世界”、“我的盲区”。</p>\n<p>可以分为三类，一类是知道，简单的使用过，没有深入研究，参加使用英语语种讨论；第二类是听说过，但没有使用过，这类和第三类没有什么区别，参加使用，日语韩语德语等语种研讨，第三类是听都没有听说过，这种是有很大的专业性壁垒，类似去参加一场不知道是什么语言的研讨；</p>\n<p>明确一点的是首先要知道这个工具是做什么用的？出现这个工具，肯定是有一些背景的，为什么会出现，这就是原因，然后找一下有没有类似的工具，可以参考的理念性的，因为同一类工具，是解决同一类问题，，背后会有一定的原理性的东西存在。这样的东西把握住了之后，就能把握主旨。</p>\n<p>最次一级的是怎么使用这个工具？但这个也是最实用的一点。具体的使用情况，在具体用的时候再去研究，这样就能节省时间；人的精力是有限的，之前一位老师和我这么讲的时候，我还总觉得无所谓，我的精力无限，但是现在看来，该听的话还是要听一下的，把时间用在最需要研究的地方。</p>\n<blockquote>\n<p>最后一条，网络如此发达，谷歌百度为何不用？老师在你身边，怎能不好好学习。</p>\n</blockquote>\n<blockquote>\n<p>方法论比方法更重要。</p>\n</blockquote>\n<h4 id=\"计划性、把控方面\"><a href=\"#计划性、把控方面\" class=\"headerlink\" title=\"计划性、把控方面\"></a>计划性、把控方面</h4><p>分两部分，一个是对整体的项目规划性</p>\n<p>计划性认知，比之前有很大的提升，最开始在学校的时候，虽然也是带项目，但是对于一个项目的整体规划，整体到什么阶段，要做到什么事情，要给客户展示什么内容，缺乏认识；只是一味的往前做，没有给客户一个安心，每一个周期做什么东西了，并没有给客户。这样客户的感觉就是很随意，看到什么就做什么。</p>\n<p>二是对任务的把控方面</p>\n<p>能够把任务进行分解，分模块，按步骤进行处理。可以大致预估任务的复杂度，预计的人天,这可以说是提升最大的软技能，上一份工作中，只是对自己能力的预估，慢慢的掌握住方法；任务复杂或者简单，和负责人说有多少内容，慢慢的自己就有了一点感觉，在对别人的时间把控方面也有了提升，这点还要通过看别人的代码，逐渐建立起来的体系。</p>\n<h4 id=\"分析问题，解决问题\"><a href=\"#分析问题，解决问题\" class=\"headerlink\" title=\"分析问题，解决问题\"></a>分析问题，解决问题</h4><p>例如：①有一个树形查询的oracle语句，在数据量少的时候很快就可以查出来列表，数据量大之后，因为每一条数据都要统计其他的信息，列表就要加载很久，最后采用redis的形式，存储这个计算出来的值。</p>\n<p>在影响这个计算值的时候，把redis中的数据清空，在查询的时候把这个值填到redis中，下次列表查询的时候就直接使用这个值，具体可以参考其他的文章<a href=\"https://muxiaobai.github.io/2019/02/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bredis%E5%82%A8%E5%AD%98%E8%AE%A1%E7%AE%97%E5%80%BC/\">性能优化之redis储存计算值</a></p>\n<p>②有一个列表，后台响应很快，大概300ms的时间，数据都已经到前台了，但是前台的页面重新layout，又采用的是easyui的组件，因此通过chrome的Performance来进行积累渲染的过程，优化前台的渲染逻辑，从而达到要求。</p>\n<blockquote>\n<p>这个实际上也是因为平时经常看一些文章，所以就有这方面的想法，算是厚积薄发吧，还是要注重积累，现在如果分析到响应速度呀等，就先从前后台的交互位置查起，看是前台，还是后台的问题导致的，再进一步找后台sql还是循环，是数据量大，传输过程，网络影响，还是前台渲染的时候有问题。</p>\n</blockquote>\n<p>遇到问题应该找谁来解决，协调，把握几点吧，自己能解决的问题，说出大概的时间解决，自己解决不了的问题，找相关人员解决，自己不知道找谁来解决的问题，向领导反馈，这些基本的逻辑，有的时候还真的是没呢么容易做到，一般总是想着我来做我来做，但是呢，一个人的精力有限，该分出去的就要分出去，有时，可能就会想着都经过自己的话，就知道，能把控，可是，该放松的该授权的就要授权。</p>\n<p>####</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><h4 id=\"踏过的地方\"><a href=\"#踏过的地方\" class=\"headerlink\" title=\"踏过的地方\"></a>踏过的地方</h4><p>踏过的城市：南阳、枣庄、西安、宝鸡太白、深圳、香港、广西河池-柳州、杭州</p>\n<blockquote>\n<p>西安  正南正北的规矩，古代皇宫式的华丽</p>\n</blockquote>\n<p>北方真不是人呆的地方，夏天热的要死，冬天雾霾让人无法呼吸，还是南方好，不冷，空气好，就是离家远了点儿，西安的夏天高达40度，怎么玩？玩不了丫。还是喜欢走路上班。从第一份工作，到现在，上下班都是住宿和公司都是相差不远的，走路，还可以锻炼一下身体，棒棒哒！！！</p>\n<blockquote>\n<p>宝鸡太白 看秦岭云海  高山云海之上，神仙居住的地方</p>\n</blockquote>\n<p>山里面凉快，真的是很凉快，在里面看的水还好一点，但是在一条路上，有一个缺口，可能就是在这里突出一下秦岭的威严，天然的露出了一个小口子，让你们看看，在我大秦岭面前，你们这些小如蝼蚁的人们，都给我臣服吧。再来插播一条，云海去看过的都说好。ps：并没有收广告费。</p>\n<blockquote>\n<p>香港 去体验一把，维多利亚港 高楼，海港，游轮，帆船</p>\n</blockquote>\n<p>登上游轮，吹着海风，别有一番滋味，想到一句话：你以为有钱人是幸福的，实际上，有钱人的幸福你想都想不到。莎莎、万宁、屈臣氏、卓悦，遍地，人挨人，人挤人，护肤品，化妆品，奶粉，保健品（贴膏），很奇怪，奶粉和保健品会在这里售卖?<br>电影里面总能看到有人拿的是一卷钱，用卷起来的，这次过去换港币的时候，真的是这样子的，我跑到一个小的巷道里面，找的是一个比较正规的柜台，当时，旁边有很多那种“一卷”钱，在香港这种地方，没有港币真的很麻烦，很多地方还是只收现金，1000的不收。不像大陆地区，哪怕没有带现金，吃穿玩，一切都正常。<br>想象中的紫金花广场应该很霸气的，到跟前一看，哎呀，还不如大陆的一个小广场，不过还是拍照留念了一下。毕竟来了一趟，不容易呢。</p>\n<blockquote>\n<p>广西河池 看山看水 山水一体，原始山川河流</p>\n</blockquote>\n<p>抖音小视频，山顶上转圈，转圈，我真的是去了，虽然是在不知名的小山顶上，但是这也是山丫，感觉很舒服，和秦岭的山水，和香港的海风是完全不一样的感觉，这里的山水，是小景，是一种温文尔雅的舒适感，坐船真坐的够够的了，不贵，而且将近一个小时，回来的路上，坐的人们都是冷飕飕的，刘三姐的故事，在广西真的是随处都是，路桥，山里，坊间，一会儿说是桂林阳朔的，一会说是河池宜州。本来就是游山玩水，历史问题就不再考究。听说这里的人们还在唱山歌，原来山间人家，自有山间的一些儿玩法，中原人没有见过的，就觉得神奇，唱的都是人家自己的语言和调调。</p>\n<blockquote>\n<p>柳州 近代工业  一种厚重，有工业底蕴的城市</p>\n</blockquote>\n<p>螺蛳粉真的是有螺蛳的，螺蛳熬得汤，加酸笋，加腐竹，加豆泡（豆腐泡），加卤水。</p>\n<p>柳江从中穿过，别称“壶城”，柳州城有很多桥，当时已经建好的有21座，还有在规划中的，为了交通，横穿柳江过来，桥梁工程应该是很发达的；柳工，柳钢，五菱，重工业基地，双面针，金嗓子等，柳钢雪条，雪糕，是一座小城，和惠州，徐州很像，但是没有惠州那么浮躁，没有徐州那么庄重，个人感觉柳州很随和，但也很稳。</p>\n<blockquote>\n<p>杭州 西湖加现代设计的一种和谐</p>\n</blockquote>\n<p>听说是有：西湖醋鱼，龙井虾仁 八宝豆腐等。楼外楼。真的只是听说，去一周，直接就回来了，什么都没有带，遗憾，还说带一点茶叶回来呢，西湖，龙井绿茶，不过自己出去跑一趟，就很好的了。</p>\n<blockquote>\n<p>实际上只要看到外部的，未经历过的，都是心情舒畅。</p>\n</blockquote>\n<h4 id=\"公开课\"><a href=\"#公开课\" class=\"headerlink\" title=\"公开课\"></a>公开课</h4><p>前段时间一直在看心理学的公开课，说实话，收获挺大的，早就想看一些这种社会学心理学的内容，这也是<code>下一年重点内容</code>，</p>\n<h4 id=\"经历过的事情\"><a href=\"#经历过的事情\" class=\"headerlink\" title=\"经历过的事情\"></a>经历过的事情</h4><blockquote>\n<p>辞职和找工作、要福利</p>\n</blockquote>\n<p>和领导说辞职的时候，一定要挺住，别放松，说一个月才能办理，咱就要要一周就能出结果。很多情况下，只不过是口头上说，一般不是要职人员，当前没有必要的项目，那么这种流程很快就能结束的，一个月，待在那里还不要疯了，何必在那里碍眼。找工作的时候，该问清楚的就要问清楚，该有的利益福利，该要就要。有些话适合说清楚，就别含糊。</p>\n<blockquote>\n<p>学会拒绝</p>\n</blockquote>\n<p>上级，上次一个任务，我明确的和上级说过，可能会出现这种问题，需要我们这边提供帮助，可是呀，他说不用我们这边，不用，结果，两天之后，果然还是出现这种问题了，然后又打电话让我给他解决，我就说现在没有时间，要到晚上才行。想其他办法，我估计，还是会找我来进行处理。</p>\n<p>该跑的坑就要跑，上一任技术走了，眼看当下没有人接手，烫手的山芋，让我接，都不是傻瓜。我还是选择出去待在项目上，能跟着实力强的人再学习，何乐而不为呢？蚂蚁金服，唯一对不住的就是她，刚回去，就又跑了。</p>\n<p>亲友，为什么亲属长辈问我有没有钱？真的是很无语，果断拒绝。当时我就不抱有给他的可能，因为我也知道这种人，但像同学，这次问我借钱的时候，我直接问他要多少，有什么事情要帮忙的，有的时候，亲戚这种关系更不能掺和利益，麻烦，说不清，道不明，反而惹得都不舒服。</p>\n<blockquote>\n<p>学会表达自己的真实感受</p>\n</blockquote>\n<p>没有表达好，直言快语，有话直说，工作上在对待上司，工资等，简单一点儿，直接一点儿，省的把自己搞的很累，还过得不舒服。有不知道的就直接问，</p>\n<blockquote>\n<p>学会控制自己的真实感受</p>\n</blockquote>\n<p>从心理学学到的，而且在生活中经历过的。</p>\n<ul>\n<li>1.避免表达出事后诸葛亮的一种态度。</li>\n<li>2.想解决办法，而不是制造麻烦。</li>\n<li>3.有时候太直白，不利于团队团结。</li>\n</ul>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><h4 id=\"2018年计划完成情况\"><a href=\"#2018年计划完成情况\" class=\"headerlink\" title=\"2018年计划完成情况\"></a>2018年计划完成情况</h4><ul>\n<li>人不要脸，书不能丢，一个月一本书。要有记录</li>\n<li>画一画自己知识体系，思维导图（包括但不限于JAVA、JS、CSS、browser、network、）</li>\n<li>hello world 大数据 sparker等 demo</li>\n<li>kaggle等课程熟悉，完成5次天池比赛</li>\n</ul>\n<p>完成度20%</p>\n<p>没有驱动性，自驱力差；机器学习只学了点儿皮毛，kaggle完成2个，熟悉大致的操作流程，无法商用。后半年都没有实际操作。反倒是MongoDB、redis等工具开始用起来；运维方面的知识掌握不少，把之前简单的脚本重新掌握并应用了。</p>\n<h4 id=\"2019年计划\"><a href=\"#2019年计划\" class=\"headerlink\" title=\"2019年计划\"></a>2019年计划</h4><ul>\n<li>听讲座，参加技术，文化，社会论坛等，扩展知识广度。</li>\n<li>心理学知识，受益匪浅，需要继续学习。</li>\n<li>研究服务器性能、部署等问题，分析出自己的一套配置。</li>\n<li></li>\n</ul>\n<p>2019.01.15 慕小白 于浙江杭州</p>\n"},{"title":"HTML5 API 新特性","description":"HTML5 新特性,近期在做项目的时候发现了File,挺好用的，就顺便学习一下其他的新特性。","date":"2016-08-20T07:32:41.000Z","_content":"\n\n# HTML5-API新特性\n\n主要内容：存储、文件 、图形图像、 媒体（视频、音频）\n\n---------------\n\n## Storage 存储\n\n#### Local Storage\n\n```\n\tvar local=this.localStorage;\n\tvar STORAGE_KEY = 'Local';\n\tvar items={\"name\":\"zhang\",\"password\":\"123456\"}\n\tvar STORAGE_KEY2 = 'Local2';\n\tvar items2={\"name\":\"wang\",\"sto\":\"storage\"}\n\tlocal.setItem(STORAGE_KEY, JSON.stringify(items));//把itemJSON话后，添加到LocalStorage，此时在浏览器中可以看到\n\tconsole.log(local.getItem(STORAGE_KEY));//根据key获取{key:value}\n\tconsole.log(local);\n\tlocal.setItem(STORAGE_KEY2, JSON.stringify(items2));\n\tconsole.log(local);\n\tconsole.log(local.key(1));\n\t\n\tconsole.log(local.key(0));获取第一个{key:value}\n\tconsole.log(local.length);\n\tlocal.removeItem(STORAGE_KEY);//根据key移除{key:value}\n\n\tconsole.log(local.length);//获取内容的长度\n\t\n\tconsole.log(local);\n\tlocal.clear();//清除localStorage\n\tconsole.log(local);\n```\n![控制台输出](HTML5-API-新特性/201608201813.PNG)\n![LocalStorage信息](HTML5-API-新特性/201608201816.PNG)\n\n- 获取添加移除:getItem(),setItem() removeItem()\n\n- 长度 length\n\n- 清除所有{key:value}:LocalStorage.clear()\n\n其中LocalStorage对象中，存储5M左右内容，同时这个对象和Cookies不同，Cookies会和Server进行信息传递，但是LocalStorage不会，根据名字就可以看出，这个对象只存在于本地。\n\n#### Session Storage\n\nSessionStorage和LocalStorage类似，方法也一样，只不过存在的生命周期和存储大小、服务器不同。比较：\n\n| 比较       | sessionStorage           | localStorage  | cookie|\n| ------------- |:-------------:| -----:|-----:|\n| 存储大小      | 5M | 5M或者更大 | cookie数据不能超过4k，cookie只适合保存很小的数据，如会话标识。|\n| 生命周期     | 一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。    |   始终有效 | 取决于expires/max-age|\n| 同源策略 |  不可跨域     |    在所有同源窗口中都是共享的 |不可以跨域调用。|\n| \t是否和服务器交换数据 |数据和服务器交换  | 只存在于本地|每次http请求都会携带cookie，|\n\n\n\n#### IndexedDB  Web SQL\n\n这两个存储，一般属于离线应用的数据保存。web网页一般不使用，主要是应用、游戏等使用。\n\n支持的浏览器：WEB SQL DATABASE SUPPORT\n\n|IE |\tFIREFOX\t|SAFARI|\tCHROME\t|OPERA\t|IPHONE|\tANDROID|\n|----:|:----:|----:|----:|----:|----:|\n|·\t·\t|4.0+|\t4.0+\t|10.5+\t|3.0+|\t2.0+|\n\n#### Cookies\n\n\ndocument.cookie=\"userId=1\";\n\ndocument.cookie=\"userName=hulk\";\n\ndocument.cookie它的赋值并不意味着丢失原来的值，上面两句说明浏览器将维护两个cookie，分别是userId和userName，因此给document.cookie赋值更像执\n行类似这样的语句：\n\ndocument.addCookie(\"userId=1\");\n\ndocument.addCookie(\"userName=hulk\");\n\n事实上，浏览器就是按照这样的方式来设置cookie的，如果要改变一个cookie的值，只需重新赋值，例如：\n\ndocument.cookie=\"userId=2\";\n\n这样就将名为userId的cookie值设置为了2。\n\n```\n\t\tvar date=new Date();\n\t\tvar expireDays=10;\n\t\t//将date设置为10天以后的时间\n\t\tdate.setTime(date.getTime()+expireDays*24*3600*1000);\n\t\tdocument.cookie = 'cookiename=cookievalue;expires=+'+date.toGMTString()+';';\n\t\tdocument.cookie = 'cookiez=zhangsad; max-age='+(60*60*24*365)+';path=/;';\n\t\tfunction getCookie(c_name){\n\t\t\t var i,x,y; \n\t\t\t var cookieArray = document.cookie.split(\";\"); \n\t\t\t console.log(cookieArray);\n\t\t\t for (i=0;i<cookieArray.length;i++){\n\t\t\t  x = cookieArray[i].substr(0,cookieArray[i].indexOf(\"=\")); \n\t\t\t  y = cookieArray[i].substr(cookieArray[i].indexOf(\"=\")+1); \n\t\t\t  x = x.replace(/^\\s+|\\s+$/g,\"\"); \n\t\t\t  console.log(y);\n\t\t\t  if(x == c_name){ \n\t\t\t\t  return unescape(y); \n\t\t\t  }\n\t\t\t }\n\t\t } \n\t\tconsole.log(getCookie('cookiez'));\n\t\tconsole.log(document.cookie);\n\n```\nChrome浏览器上的显示结果:\n\n![Chrome浏览器Cookies](HTML5-API-新特性/201608230954.PNG)\n![Chrome浏览器控制台](HTML5-API-新特性/201608230958.PNG)\n## Cache\n\n#### Cache Storage Application Cache\n\n离线缓存技术主要是应用于在没有网络的情况下，通过创建cache manifest文件，可以轻松的创建离线应用。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" manifest=\"static/manifest/manifest.appcache\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>APP CACHE</title>\n    <script type=\"text/javascript\" src=\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=1.4\"></script>\n <script type=\"text/javascript\" src=\"http://developer.baidu.com/map/jsdemo/demo/convertor.js\"></script>\n  <script src=\"static/ajaxjs/myzhang.js\" type=\"text/javascript\"></script>\n <script src=\"static/ajaxjs/geolocation.js\" type=\"text/javascript\"></script>\n</head><!-- text/cache-mainfest -->\n<body>\n    <img src=\"static/img/1.jpg\">\n    <img src=\"static/img/2.jpg\">\n<script type=\"text/javascript\">\n    window.addEventListener('load', function(e){\n        console.log(window.applicationCache.status);\n    })\n</script>\n</body>\n</html>\n```\n在html上使用manifest属性，引用appcache文件，文件下主要内容如下：\n\n```\nCACHE MANIFEST\n#version 1.3\n# 需要缓存的列表\nCACHE:\n    ../ajaxjs/myzhang.js\n    ../ajaxjs/geolocation.js\n    ../img/2.jpg\n    ../img/2.jpg\nNETWORK:\n# 不需要缓存的\n    *\n\nFALLBACK:\n# 访问缓存失败后，备用访问的资源，第一个是访问源，第二个是替换文件*.html /offline.html\n2.jpg/3.jpg\n\n```\nCACHE上面的内容就是下载的内容，保存在本地，作为缓存。\n\n![Cache](HTML5-API-新特性/201608231046.PNG)\n![Cache](HTML5-API-新特性/201608231049.PNG)\n[HTML5应用程序缓存Application Cache详解](http://www.admin10000.com/document/5921.html)\n[HTML5离线存储之Application Cache](https://www.nihaoshijie.com.cn/index.php/archives/425)\n## 文件\n\n#### File\n具体应用：\n[上传图片立即显示](http://blog.csdn.net/a35038438/article/details/51162291)\n1.文件即传即显\n\n```\n$(\"input:file\").on(\"click\",function(){\n    console.log($(this));\n    var img=$($($(this).next(\"label\"))).find(\"img\");\n    //*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/  \n    $(this).change(function() {  \n        var $file = $(this);  \n        var objUrl = $file[0].files[0];  \n        var windowURL = window.URL || window.webkitURL;  \n        //createObjectURL创建一个指向该参数对象(图片)的URL  \n        var dataURL;  \n        dataURL = windowURL.createObjectURL(objUrl);  \n        $(img).attr(\"src\",dataURL);  \n    });  \n})\n```\n2.AJAX上传文件 XMLHttpRequest Level 2中的的FormData\n\n```\n\n\t\n\tvar data=new FormData();\n\tdata.append(\"currentPage\", 1);\n\tdata.append(\"order\", \"desc\"); \n\tajax(\"\",\"\",data);\n\nfunction ajax(method,url,data){\n\tvar xhr ;\n    if (window.XMLHttpRequest) { // Mozilla, Safari, ...\n        xhr = new XMLHttpRequest();\n    } else if (window.ActiveXObject) { // IE\n        xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xhr.addEventListener(\"progress\", updateProgress, false);\n    xhr.addEventListener(\"load\", transferComplete, false);\n    xhr.addEventListener(\"error\", transferFailed, false);\n    xhr.addEventListener(\"abort\", transferCanceled, false);\n    xhr.open(method,url, true);\n    xhr.setRequestHeader(\"Content-Type\",\"multipart/form-data\");\n    xhr.send(data);\n}\n\n// progress on transfers from the server to the client (downloads)\nfunction updateProgress(evt) {\n  if (evt.lengthComputable) {\n    var percentComplete = evt.loaded / evt.total;\n    console.log(\"The transfer is updateProgress.\");\n  } else {\n    // Unable to compute progress information since the total size is unknown\n  }\n}\n\nfunction transferComplete(evt) {\n\tconsole.log(evt);\n\tconsole.log(this.response);\n\tconsole.log(JSON.parse(this.response));\n\tconsole.log(evt.responseText);\n\tconsole.log(\"The transfer is complete.\");\n}\n\nfunction transferFailed(evt) {\n\t console.log(\"An error occurred while transferring the file.\");\n}\n\nfunction transferCanceled(evt) {\n\t console.log(\"The transfer has been canceled by the user.\");\n}\n\n```\n[使用FormData对象](https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects)\n[什么是 AJAX?](https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started)\n\n#### FileReader Blob\n\n\n## 图形图像、多媒体\n\n#### Canvas SVG\n在body中添加Canvas和svg标签，具体的图形图像展示需要在js中书写。\n\n```\n<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" height=\"190\"></svg>\n<script type=\"text/javascript\">\nvar ctx=document.getElementById(\"myCanvas\");\nctx.fillStyle = \"green\";\nctx.fillRect(10, 10, 100, 100);\n</script>\n\n```\n具体的内容就不展开了。\n[Canvas](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n\n\n#### video \n```\n <video id=\"video\" width=\"420\" style=\"margin-top:15px;\">\n    <source src=\"/example/html5/mov_bbb.mp4\" type=\"video/mp4\" />\n    <source src=\"/example/html5/mov_bbb.ogg\" type=\"video/ogg\" />\n    Your browser does not support HTML5 video.\n  </video>\n\n```\n\n#### audio\n```\n<audio src=\"song.ogg\" controls=\"controls\"></audio>\n\n```\n\n## 其他API\n\n#### navigator.geolocation 位置信息\n\n结合手机和PC,通过百度Map和google convertor\n\n```\n<script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=1.4\"></script>\n<script type=\"text/javascript\" src=\"http://developer.baidu.com/map/jsdemo/demo/convertor.js\"></script>\n\n//获取地理信息并Hander\n $(function(){\n\t\t \n\t\t if(check()){\n\t\t\t pc();\n\t\t }else{\n\t\t\t phone();\n\t\t }\n\t\n })\n//geo\n function Hander(city){\n\t console.log(city);\n\t// if(city.charAt(city.length-1)==\"市\"&&city.substring(city.length-2,city.length-1)!=\"市\"){\n\t//\t city=city.substring(0,city.length-1); \n\t// }\n \t//city=\"徐州\";\n }\n\n function check() {\n\t  var userAgentInfo=navigator.userAgent;\n\t  var Agents =new Array(\"Android\",\"iPhone\",\"SymbianOS\",\"Windows Phone\",\"iPad\",\"iPod\");\n\t  var flag=true;\n\t  for(var v=0;v<Agents.length;v++) {\n\t     if(userAgentInfo.indexOf(Agents[v])>0) {\n\t       flag=false;\n\t       break;\n\t     }\n\t   }\n\t return flag;\n}\n\nfunction pc(){\n $.getScript('http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js',getCity);\n}\n\nfunction getCity(_result){\n\t  if (remote_ip_info.ret == '1') {\n\t         console.log(remote_ip_info.country + ' ,' + remote_ip_info.province + '省,' + remote_ip_info.city+ '市'   );\n\t         Hander(remote_ip_info.city);\n\t     } else {\n\t    \t console.log('没有找到匹配的IP地址信息！');\n\t     }\n}\n\nfunction phone(){\n\t    var options={\n\t            enableHighAccuracy:true,\n\t            maximunAge:1000,\n\t            timeout:5000\n\t    };\n\t    if(window.navigator.geolocation){\n\t        navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);\n\t    }else{\n\t    \t console.log('你的浏览器不支持地理位置！');\n\t}\n}\n \nfunction successCallback(position){\n\t\t// 百度地图API功能\n\t   var lng = position.coords.longitude;\n\t   var lat = position.coords.latitude;\n\t   var point = new BMap.Point(lng, lat); // 创建点坐标//116.331398,39.897445\n\t   BMap.Convertor.translate(point,0,translateCallback); \n\t   console.log('当前地址的经纬度：经度' + lng + '，纬度' + lat);\n\t   \n}\nfunction translateCallback(point){\n\t console.log(point);\n\t  var geoc = new BMap.Geocoder();//地址解析类 \n\t  geoc.getLocation(point, function(rs){\n\t\t var defCity = {\n\t\t\t        id: '000001',\n\t\t\t        name: '北京',\n\t\t\t        date: new Date()//获取当前时间方法\n\t\t};\n\t\tvar addComp = rs.addressComponents;\n\t\tconsole.log(addComp.province + \", \" + addComp.city + \", \" + addComp.district + \", \" + addComp.street + \", \" + addComp.streetNumber);\n\t\tHander(addComp.city);\n\t});\n}\n\t\nfunction errorCallback(error){\n   switch(error.code){\n   case error.PERMISSION_DENIED:\n\t   console.log(\"you have denied access to your position .\");\n       break;\n   case error.POSITION_UNAVAILABLE:\n\t   console.log(\"there was a problem getting yout position .\");\n       break;\n   case error.TIMEOUT:\n       console.log(\"The application has timed out attempting to get your location .\");\n       break;\n   }\n}\n\n```\n\nnavigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);\n\nGeolocation.getCurrentPosition()\n\nDetermines the device's current location and gives back a Position object with the data.\n\nGeolocation.watchPosition()\n\nReturns a long value representing the newly established callback function to be invoked whenever the device location changes.\n\nGeolocation.clearWatch()\n\nRemoves the particular handler previously installed using watchPosition().\n\ngeolocation有三个方法，其中getCurrentPosition中的回调函数。\n\n会回传参数Position其中有两个参数Coordinates和timestamp\n\nPosition.coords Read only : Returns a Coordinates object defining the current location.\n\nPosition.timestamp Read only : Returns a DOMTimeStamp representing the time at which the location was retrieved.\n\n#### history 历史信息\n\nhistory.back():后退  加载 history 列表中的前一个 URL。\n\nhistory.forward() 加载 history 列表中的下一个 URL。\n\nhistory.go(0);//刷新当前页面\n\n//以下是要在浏览器中有历史记录的,否则不会有效果.\nhistory.go(1);//前进一页\n\nhistory.go(-1);//后退一页\n\nhistory.go(-2);//后退两页\n\nhistory.length;//当前窗口包含的历史记录条数\n\n#### Worker\n\n[深入 HTML5 Web Worker 应用实践：多线程编程](http://www.ibm.com/developerworks/cn/web/1112_sunch_webworker/)","source":"_posts/HTML5-API-新特性.md","raw":"---\ntitle: HTML5 API 新特性\ntags:\n  - API\n  - Canvas\n  - Storage\n  - Cache\ncategories: HTML\ndescription: 'HTML5 新特性,近期在做项目的时候发现了File,挺好用的，就顺便学习一下其他的新特性。'\ndate: 2016-08-20 15:32:41\n---\n\n\n# HTML5-API新特性\n\n主要内容：存储、文件 、图形图像、 媒体（视频、音频）\n\n---------------\n\n## Storage 存储\n\n#### Local Storage\n\n```\n\tvar local=this.localStorage;\n\tvar STORAGE_KEY = 'Local';\n\tvar items={\"name\":\"zhang\",\"password\":\"123456\"}\n\tvar STORAGE_KEY2 = 'Local2';\n\tvar items2={\"name\":\"wang\",\"sto\":\"storage\"}\n\tlocal.setItem(STORAGE_KEY, JSON.stringify(items));//把itemJSON话后，添加到LocalStorage，此时在浏览器中可以看到\n\tconsole.log(local.getItem(STORAGE_KEY));//根据key获取{key:value}\n\tconsole.log(local);\n\tlocal.setItem(STORAGE_KEY2, JSON.stringify(items2));\n\tconsole.log(local);\n\tconsole.log(local.key(1));\n\t\n\tconsole.log(local.key(0));获取第一个{key:value}\n\tconsole.log(local.length);\n\tlocal.removeItem(STORAGE_KEY);//根据key移除{key:value}\n\n\tconsole.log(local.length);//获取内容的长度\n\t\n\tconsole.log(local);\n\tlocal.clear();//清除localStorage\n\tconsole.log(local);\n```\n![控制台输出](HTML5-API-新特性/201608201813.PNG)\n![LocalStorage信息](HTML5-API-新特性/201608201816.PNG)\n\n- 获取添加移除:getItem(),setItem() removeItem()\n\n- 长度 length\n\n- 清除所有{key:value}:LocalStorage.clear()\n\n其中LocalStorage对象中，存储5M左右内容，同时这个对象和Cookies不同，Cookies会和Server进行信息传递，但是LocalStorage不会，根据名字就可以看出，这个对象只存在于本地。\n\n#### Session Storage\n\nSessionStorage和LocalStorage类似，方法也一样，只不过存在的生命周期和存储大小、服务器不同。比较：\n\n| 比较       | sessionStorage           | localStorage  | cookie|\n| ------------- |:-------------:| -----:|-----:|\n| 存储大小      | 5M | 5M或者更大 | cookie数据不能超过4k，cookie只适合保存很小的数据，如会话标识。|\n| 生命周期     | 一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。    |   始终有效 | 取决于expires/max-age|\n| 同源策略 |  不可跨域     |    在所有同源窗口中都是共享的 |不可以跨域调用。|\n| \t是否和服务器交换数据 |数据和服务器交换  | 只存在于本地|每次http请求都会携带cookie，|\n\n\n\n#### IndexedDB  Web SQL\n\n这两个存储，一般属于离线应用的数据保存。web网页一般不使用，主要是应用、游戏等使用。\n\n支持的浏览器：WEB SQL DATABASE SUPPORT\n\n|IE |\tFIREFOX\t|SAFARI|\tCHROME\t|OPERA\t|IPHONE|\tANDROID|\n|----:|:----:|----:|----:|----:|----:|\n|·\t·\t|4.0+|\t4.0+\t|10.5+\t|3.0+|\t2.0+|\n\n#### Cookies\n\n\ndocument.cookie=\"userId=1\";\n\ndocument.cookie=\"userName=hulk\";\n\ndocument.cookie它的赋值并不意味着丢失原来的值，上面两句说明浏览器将维护两个cookie，分别是userId和userName，因此给document.cookie赋值更像执\n行类似这样的语句：\n\ndocument.addCookie(\"userId=1\");\n\ndocument.addCookie(\"userName=hulk\");\n\n事实上，浏览器就是按照这样的方式来设置cookie的，如果要改变一个cookie的值，只需重新赋值，例如：\n\ndocument.cookie=\"userId=2\";\n\n这样就将名为userId的cookie值设置为了2。\n\n```\n\t\tvar date=new Date();\n\t\tvar expireDays=10;\n\t\t//将date设置为10天以后的时间\n\t\tdate.setTime(date.getTime()+expireDays*24*3600*1000);\n\t\tdocument.cookie = 'cookiename=cookievalue;expires=+'+date.toGMTString()+';';\n\t\tdocument.cookie = 'cookiez=zhangsad; max-age='+(60*60*24*365)+';path=/;';\n\t\tfunction getCookie(c_name){\n\t\t\t var i,x,y; \n\t\t\t var cookieArray = document.cookie.split(\";\"); \n\t\t\t console.log(cookieArray);\n\t\t\t for (i=0;i<cookieArray.length;i++){\n\t\t\t  x = cookieArray[i].substr(0,cookieArray[i].indexOf(\"=\")); \n\t\t\t  y = cookieArray[i].substr(cookieArray[i].indexOf(\"=\")+1); \n\t\t\t  x = x.replace(/^\\s+|\\s+$/g,\"\"); \n\t\t\t  console.log(y);\n\t\t\t  if(x == c_name){ \n\t\t\t\t  return unescape(y); \n\t\t\t  }\n\t\t\t }\n\t\t } \n\t\tconsole.log(getCookie('cookiez'));\n\t\tconsole.log(document.cookie);\n\n```\nChrome浏览器上的显示结果:\n\n![Chrome浏览器Cookies](HTML5-API-新特性/201608230954.PNG)\n![Chrome浏览器控制台](HTML5-API-新特性/201608230958.PNG)\n## Cache\n\n#### Cache Storage Application Cache\n\n离线缓存技术主要是应用于在没有网络的情况下，通过创建cache manifest文件，可以轻松的创建离线应用。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" manifest=\"static/manifest/manifest.appcache\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>APP CACHE</title>\n    <script type=\"text/javascript\" src=\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=1.4\"></script>\n <script type=\"text/javascript\" src=\"http://developer.baidu.com/map/jsdemo/demo/convertor.js\"></script>\n  <script src=\"static/ajaxjs/myzhang.js\" type=\"text/javascript\"></script>\n <script src=\"static/ajaxjs/geolocation.js\" type=\"text/javascript\"></script>\n</head><!-- text/cache-mainfest -->\n<body>\n    <img src=\"static/img/1.jpg\">\n    <img src=\"static/img/2.jpg\">\n<script type=\"text/javascript\">\n    window.addEventListener('load', function(e){\n        console.log(window.applicationCache.status);\n    })\n</script>\n</body>\n</html>\n```\n在html上使用manifest属性，引用appcache文件，文件下主要内容如下：\n\n```\nCACHE MANIFEST\n#version 1.3\n# 需要缓存的列表\nCACHE:\n    ../ajaxjs/myzhang.js\n    ../ajaxjs/geolocation.js\n    ../img/2.jpg\n    ../img/2.jpg\nNETWORK:\n# 不需要缓存的\n    *\n\nFALLBACK:\n# 访问缓存失败后，备用访问的资源，第一个是访问源，第二个是替换文件*.html /offline.html\n2.jpg/3.jpg\n\n```\nCACHE上面的内容就是下载的内容，保存在本地，作为缓存。\n\n![Cache](HTML5-API-新特性/201608231046.PNG)\n![Cache](HTML5-API-新特性/201608231049.PNG)\n[HTML5应用程序缓存Application Cache详解](http://www.admin10000.com/document/5921.html)\n[HTML5离线存储之Application Cache](https://www.nihaoshijie.com.cn/index.php/archives/425)\n## 文件\n\n#### File\n具体应用：\n[上传图片立即显示](http://blog.csdn.net/a35038438/article/details/51162291)\n1.文件即传即显\n\n```\n$(\"input:file\").on(\"click\",function(){\n    console.log($(this));\n    var img=$($($(this).next(\"label\"))).find(\"img\");\n    //*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/  \n    $(this).change(function() {  \n        var $file = $(this);  \n        var objUrl = $file[0].files[0];  \n        var windowURL = window.URL || window.webkitURL;  \n        //createObjectURL创建一个指向该参数对象(图片)的URL  \n        var dataURL;  \n        dataURL = windowURL.createObjectURL(objUrl);  \n        $(img).attr(\"src\",dataURL);  \n    });  \n})\n```\n2.AJAX上传文件 XMLHttpRequest Level 2中的的FormData\n\n```\n\n\t\n\tvar data=new FormData();\n\tdata.append(\"currentPage\", 1);\n\tdata.append(\"order\", \"desc\"); \n\tajax(\"\",\"\",data);\n\nfunction ajax(method,url,data){\n\tvar xhr ;\n    if (window.XMLHttpRequest) { // Mozilla, Safari, ...\n        xhr = new XMLHttpRequest();\n    } else if (window.ActiveXObject) { // IE\n        xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xhr.addEventListener(\"progress\", updateProgress, false);\n    xhr.addEventListener(\"load\", transferComplete, false);\n    xhr.addEventListener(\"error\", transferFailed, false);\n    xhr.addEventListener(\"abort\", transferCanceled, false);\n    xhr.open(method,url, true);\n    xhr.setRequestHeader(\"Content-Type\",\"multipart/form-data\");\n    xhr.send(data);\n}\n\n// progress on transfers from the server to the client (downloads)\nfunction updateProgress(evt) {\n  if (evt.lengthComputable) {\n    var percentComplete = evt.loaded / evt.total;\n    console.log(\"The transfer is updateProgress.\");\n  } else {\n    // Unable to compute progress information since the total size is unknown\n  }\n}\n\nfunction transferComplete(evt) {\n\tconsole.log(evt);\n\tconsole.log(this.response);\n\tconsole.log(JSON.parse(this.response));\n\tconsole.log(evt.responseText);\n\tconsole.log(\"The transfer is complete.\");\n}\n\nfunction transferFailed(evt) {\n\t console.log(\"An error occurred while transferring the file.\");\n}\n\nfunction transferCanceled(evt) {\n\t console.log(\"The transfer has been canceled by the user.\");\n}\n\n```\n[使用FormData对象](https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects)\n[什么是 AJAX?](https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started)\n\n#### FileReader Blob\n\n\n## 图形图像、多媒体\n\n#### Canvas SVG\n在body中添加Canvas和svg标签，具体的图形图像展示需要在js中书写。\n\n```\n<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" height=\"190\"></svg>\n<script type=\"text/javascript\">\nvar ctx=document.getElementById(\"myCanvas\");\nctx.fillStyle = \"green\";\nctx.fillRect(10, 10, 100, 100);\n</script>\n\n```\n具体的内容就不展开了。\n[Canvas](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n\n\n#### video \n```\n <video id=\"video\" width=\"420\" style=\"margin-top:15px;\">\n    <source src=\"/example/html5/mov_bbb.mp4\" type=\"video/mp4\" />\n    <source src=\"/example/html5/mov_bbb.ogg\" type=\"video/ogg\" />\n    Your browser does not support HTML5 video.\n  </video>\n\n```\n\n#### audio\n```\n<audio src=\"song.ogg\" controls=\"controls\"></audio>\n\n```\n\n## 其他API\n\n#### navigator.geolocation 位置信息\n\n结合手机和PC,通过百度Map和google convertor\n\n```\n<script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=1.4\"></script>\n<script type=\"text/javascript\" src=\"http://developer.baidu.com/map/jsdemo/demo/convertor.js\"></script>\n\n//获取地理信息并Hander\n $(function(){\n\t\t \n\t\t if(check()){\n\t\t\t pc();\n\t\t }else{\n\t\t\t phone();\n\t\t }\n\t\n })\n//geo\n function Hander(city){\n\t console.log(city);\n\t// if(city.charAt(city.length-1)==\"市\"&&city.substring(city.length-2,city.length-1)!=\"市\"){\n\t//\t city=city.substring(0,city.length-1); \n\t// }\n \t//city=\"徐州\";\n }\n\n function check() {\n\t  var userAgentInfo=navigator.userAgent;\n\t  var Agents =new Array(\"Android\",\"iPhone\",\"SymbianOS\",\"Windows Phone\",\"iPad\",\"iPod\");\n\t  var flag=true;\n\t  for(var v=0;v<Agents.length;v++) {\n\t     if(userAgentInfo.indexOf(Agents[v])>0) {\n\t       flag=false;\n\t       break;\n\t     }\n\t   }\n\t return flag;\n}\n\nfunction pc(){\n $.getScript('http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js',getCity);\n}\n\nfunction getCity(_result){\n\t  if (remote_ip_info.ret == '1') {\n\t         console.log(remote_ip_info.country + ' ,' + remote_ip_info.province + '省,' + remote_ip_info.city+ '市'   );\n\t         Hander(remote_ip_info.city);\n\t     } else {\n\t    \t console.log('没有找到匹配的IP地址信息！');\n\t     }\n}\n\nfunction phone(){\n\t    var options={\n\t            enableHighAccuracy:true,\n\t            maximunAge:1000,\n\t            timeout:5000\n\t    };\n\t    if(window.navigator.geolocation){\n\t        navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);\n\t    }else{\n\t    \t console.log('你的浏览器不支持地理位置！');\n\t}\n}\n \nfunction successCallback(position){\n\t\t// 百度地图API功能\n\t   var lng = position.coords.longitude;\n\t   var lat = position.coords.latitude;\n\t   var point = new BMap.Point(lng, lat); // 创建点坐标//116.331398,39.897445\n\t   BMap.Convertor.translate(point,0,translateCallback); \n\t   console.log('当前地址的经纬度：经度' + lng + '，纬度' + lat);\n\t   \n}\nfunction translateCallback(point){\n\t console.log(point);\n\t  var geoc = new BMap.Geocoder();//地址解析类 \n\t  geoc.getLocation(point, function(rs){\n\t\t var defCity = {\n\t\t\t        id: '000001',\n\t\t\t        name: '北京',\n\t\t\t        date: new Date()//获取当前时间方法\n\t\t};\n\t\tvar addComp = rs.addressComponents;\n\t\tconsole.log(addComp.province + \", \" + addComp.city + \", \" + addComp.district + \", \" + addComp.street + \", \" + addComp.streetNumber);\n\t\tHander(addComp.city);\n\t});\n}\n\t\nfunction errorCallback(error){\n   switch(error.code){\n   case error.PERMISSION_DENIED:\n\t   console.log(\"you have denied access to your position .\");\n       break;\n   case error.POSITION_UNAVAILABLE:\n\t   console.log(\"there was a problem getting yout position .\");\n       break;\n   case error.TIMEOUT:\n       console.log(\"The application has timed out attempting to get your location .\");\n       break;\n   }\n}\n\n```\n\nnavigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);\n\nGeolocation.getCurrentPosition()\n\nDetermines the device's current location and gives back a Position object with the data.\n\nGeolocation.watchPosition()\n\nReturns a long value representing the newly established callback function to be invoked whenever the device location changes.\n\nGeolocation.clearWatch()\n\nRemoves the particular handler previously installed using watchPosition().\n\ngeolocation有三个方法，其中getCurrentPosition中的回调函数。\n\n会回传参数Position其中有两个参数Coordinates和timestamp\n\nPosition.coords Read only : Returns a Coordinates object defining the current location.\n\nPosition.timestamp Read only : Returns a DOMTimeStamp representing the time at which the location was retrieved.\n\n#### history 历史信息\n\nhistory.back():后退  加载 history 列表中的前一个 URL。\n\nhistory.forward() 加载 history 列表中的下一个 URL。\n\nhistory.go(0);//刷新当前页面\n\n//以下是要在浏览器中有历史记录的,否则不会有效果.\nhistory.go(1);//前进一页\n\nhistory.go(-1);//后退一页\n\nhistory.go(-2);//后退两页\n\nhistory.length;//当前窗口包含的历史记录条数\n\n#### Worker\n\n[深入 HTML5 Web Worker 应用实践：多线程编程](http://www.ibm.com/developerworks/cn/web/1112_sunch_webworker/)","slug":"HTML5-API-新特性","published":1,"updated":"2016-08-31T12:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79k006hugv5gtfhrwex","content":"<h1 id=\"HTML5-API新特性\"><a href=\"#HTML5-API新特性\" class=\"headerlink\" title=\"HTML5-API新特性\"></a>HTML5-API新特性</h1><p>主要内容：存储、文件 、图形图像、 媒体（视频、音频）</p>\n<hr>\n<h2 id=\"Storage-存储\"><a href=\"#Storage-存储\" class=\"headerlink\" title=\"Storage 存储\"></a>Storage 存储</h2><h4 id=\"Local-Storage\"><a href=\"#Local-Storage\" class=\"headerlink\" title=\"Local Storage\"></a>Local Storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var local=this.localStorage;</span><br><span class=\"line\">var STORAGE_KEY = &apos;Local&apos;;</span><br><span class=\"line\">var items=&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;password&quot;:&quot;123456&quot;&#125;</span><br><span class=\"line\">var STORAGE_KEY2 = &apos;Local2&apos;;</span><br><span class=\"line\">var items2=&#123;&quot;name&quot;:&quot;wang&quot;,&quot;sto&quot;:&quot;storage&quot;&#125;</span><br><span class=\"line\">local.setItem(STORAGE_KEY, JSON.stringify(items));//把itemJSON话后，添加到LocalStorage，此时在浏览器中可以看到</span><br><span class=\"line\">console.log(local.getItem(STORAGE_KEY));//根据key获取&#123;key:value&#125;</span><br><span class=\"line\">console.log(local);</span><br><span class=\"line\">local.setItem(STORAGE_KEY2, JSON.stringify(items2));</span><br><span class=\"line\">console.log(local);</span><br><span class=\"line\">console.log(local.key(1));</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(local.key(0));获取第一个&#123;key:value&#125;</span><br><span class=\"line\">console.log(local.length);</span><br><span class=\"line\">local.removeItem(STORAGE_KEY);//根据key移除&#123;key:value&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(local.length);//获取内容的长度</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(local);</span><br><span class=\"line\">local.clear();//清除localStorage</span><br><span class=\"line\">console.log(local);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201608201813.PNG\" alt=\"控制台输出\"><br><img src=\"/.io//201608201816.PNG\" alt=\"LocalStorage信息\"></p>\n<ul>\n<li><p>获取添加移除:getItem(),setItem() removeItem()</p>\n</li>\n<li><p>长度 length</p>\n</li>\n<li><p>清除所有{key:value}:LocalStorage.clear()</p>\n</li>\n</ul>\n<p>其中LocalStorage对象中，存储5M左右内容，同时这个对象和Cookies不同，Cookies会和Server进行信息传递，但是LocalStorage不会，根据名字就可以看出，这个对象只存在于本地。</p>\n<h4 id=\"Session-Storage\"><a href=\"#Session-Storage\" class=\"headerlink\" title=\"Session Storage\"></a>Session Storage</h4><p>SessionStorage和LocalStorage类似，方法也一样，只不过存在的生命周期和存储大小、服务器不同。比较：</p>\n<table>\n<thead>\n<tr>\n<th>比较</th>\n<th style=\"text-align:center\">sessionStorage</th>\n<th style=\"text-align:right\">localStorage</th>\n<th style=\"text-align:right\">cookie</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储大小</td>\n<td style=\"text-align:center\">5M</td>\n<td style=\"text-align:right\">5M或者更大</td>\n<td style=\"text-align:right\">cookie数据不能超过4k，cookie只适合保存很小的数据，如会话标识。</td>\n</tr>\n<tr>\n<td>生命周期</td>\n<td style=\"text-align:center\">一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。</td>\n<td style=\"text-align:right\">始终有效</td>\n<td style=\"text-align:right\">取决于expires/max-age</td>\n</tr>\n<tr>\n<td>同源策略</td>\n<td style=\"text-align:center\">不可跨域</td>\n<td style=\"text-align:right\">在所有同源窗口中都是共享的</td>\n<td style=\"text-align:right\">不可以跨域调用。</td>\n</tr>\n<tr>\n<td>是否和服务器交换数据</td>\n<td style=\"text-align:center\">数据和服务器交换</td>\n<td style=\"text-align:right\">只存在于本地</td>\n<td style=\"text-align:right\">每次http请求都会携带cookie，</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"IndexedDB-Web-SQL\"><a href=\"#IndexedDB-Web-SQL\" class=\"headerlink\" title=\"IndexedDB  Web SQL\"></a>IndexedDB  Web SQL</h4><p>这两个存储，一般属于离线应用的数据保存。web网页一般不使用，主要是应用、游戏等使用。</p>\n<p>支持的浏览器：WEB SQL DATABASE SUPPORT</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">IE</th>\n<th style=\"text-align:center\">FIREFOX</th>\n<th style=\"text-align:right\">SAFARI</th>\n<th style=\"text-align:right\">CHROME</th>\n<th style=\"text-align:right\">OPERA</th>\n<th style=\"text-align:right\">IPHONE</th>\n<th>ANDROID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">·    ·</td>\n<td style=\"text-align:center\">4.0+</td>\n<td style=\"text-align:right\">4.0+</td>\n<td style=\"text-align:right\">10.5+</td>\n<td style=\"text-align:right\">3.0+</td>\n<td style=\"text-align:right\">2.0+</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h4><p>document.cookie=”userId=1”;</p>\n<p>document.cookie=”userName=hulk”;</p>\n<p>document.cookie它的赋值并不意味着丢失原来的值，上面两句说明浏览器将维护两个cookie，分别是userId和userName，因此给document.cookie赋值更像执<br>行类似这样的语句：</p>\n<p>document.addCookie(“userId=1”);</p>\n<p>document.addCookie(“userName=hulk”);</p>\n<p>事实上，浏览器就是按照这样的方式来设置cookie的，如果要改变一个cookie的值，只需重新赋值，例如：</p>\n<p>document.cookie=”userId=2”;</p>\n<p>这样就将名为userId的cookie值设置为了2。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date=new Date();</span><br><span class=\"line\">var expireDays=10;</span><br><span class=\"line\">//将date设置为10天以后的时间</span><br><span class=\"line\">date.setTime(date.getTime()+expireDays*24*3600*1000);</span><br><span class=\"line\">document.cookie = &apos;cookiename=cookievalue;expires=+&apos;+date.toGMTString()+&apos;;&apos;;</span><br><span class=\"line\">document.cookie = &apos;cookiez=zhangsad; max-age=&apos;+(60*60*24*365)+&apos;;path=/;&apos;;</span><br><span class=\"line\">function getCookie(c_name)&#123;</span><br><span class=\"line\">\t var i,x,y; </span><br><span class=\"line\">\t var cookieArray = document.cookie.split(&quot;;&quot;); </span><br><span class=\"line\">\t console.log(cookieArray);</span><br><span class=\"line\">\t for (i=0;i&lt;cookieArray.length;i++)&#123;</span><br><span class=\"line\">\t  x = cookieArray[i].substr(0,cookieArray[i].indexOf(&quot;=&quot;)); </span><br><span class=\"line\">\t  y = cookieArray[i].substr(cookieArray[i].indexOf(&quot;=&quot;)+1); </span><br><span class=\"line\">\t  x = x.replace(/^\\s+|\\s+$/g,&quot;&quot;); </span><br><span class=\"line\">\t  console.log(y);</span><br><span class=\"line\">\t  if(x == c_name)&#123; </span><br><span class=\"line\">\t\t  return unescape(y); </span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">console.log(getCookie(&apos;cookiez&apos;));</span><br><span class=\"line\">console.log(document.cookie);</span><br></pre></td></tr></table></figure>\n<p>Chrome浏览器上的显示结果:</p>\n<p><img src=\"/.io//201608230954.PNG\" alt=\"Chrome浏览器Cookies\"><br><img src=\"/.io//201608230958.PNG\" alt=\"Chrome浏览器控制台\"></p>\n<h2 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h2><h4 id=\"Cache-Storage-Application-Cache\"><a href=\"#Cache-Storage-Application-Cache\" class=\"headerlink\" title=\"Cache Storage Application Cache\"></a>Cache Storage Application Cache</h4><p>离线缓存技术主要是应用于在没有网络的情况下，通过创建cache manifest文件，可以轻松的创建离线应用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot; manifest=&quot;static/manifest/manifest.appcache&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;APP CACHE&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=1.4&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script type=&quot;text/javascript&quot; src=&quot;http://developer.baidu.com/map/jsdemo/demo/convertor.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;static/ajaxjs/myzhang.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script src=&quot;static/ajaxjs/geolocation.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;&lt;!-- text/cache-mainfest --&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;img src=&quot;static/img/1.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&quot;static/img/2.jpg&quot;&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    window.addEventListener(&apos;load&apos;, function(e)&#123;</span><br><span class=\"line\">        console.log(window.applicationCache.status);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>在html上使用manifest属性，引用appcache文件，文件下主要内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\">#version 1.3</span><br><span class=\"line\"># 需要缓存的列表</span><br><span class=\"line\">CACHE:</span><br><span class=\"line\">    ../ajaxjs/myzhang.js</span><br><span class=\"line\">    ../ajaxjs/geolocation.js</span><br><span class=\"line\">    ../img/2.jpg</span><br><span class=\"line\">    ../img/2.jpg</span><br><span class=\"line\">NETWORK:</span><br><span class=\"line\"># 不需要缓存的</span><br><span class=\"line\">    *</span><br><span class=\"line\"></span><br><span class=\"line\">FALLBACK:</span><br><span class=\"line\"># 访问缓存失败后，备用访问的资源，第一个是访问源，第二个是替换文件*.html /offline.html</span><br><span class=\"line\">2.jpg/3.jpg</span><br></pre></td></tr></table></figure>\n<p>CACHE上面的内容就是下载的内容，保存在本地，作为缓存。</p>\n<p><img src=\"/.io//201608231046.PNG\" alt=\"Cache\"><br><img src=\"/.io//201608231049.PNG\" alt=\"Cache\"><br><a href=\"http://www.admin10000.com/document/5921.html\" target=\"_blank\" rel=\"noopener\">HTML5应用程序缓存Application Cache详解</a><br><a href=\"https://www.nihaoshijie.com.cn/index.php/archives/425\" target=\"_blank\" rel=\"noopener\">HTML5离线存储之Application Cache</a></p>\n<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><h4 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h4><p>具体应用：<br><a href=\"http://blog.csdn.net/a35038438/article/details/51162291\" target=\"_blank\" rel=\"noopener\">上传图片立即显示</a><br>1.文件即传即显</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;input:file&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">    console.log($(this));</span><br><span class=\"line\">    var img=$($($(this).next(&quot;label&quot;))).find(&quot;img&quot;);</span><br><span class=\"line\">    //*原理是把本地图片路径：&quot;D(盘符):/image/...&quot;转为&quot;http://...&quot;格式路径来进行显示图片*/  </span><br><span class=\"line\">    $(this).change(function() &#123;  </span><br><span class=\"line\">        var $file = $(this);  </span><br><span class=\"line\">        var objUrl = $file[0].files[0];  </span><br><span class=\"line\">        var windowURL = window.URL || window.webkitURL;  </span><br><span class=\"line\">        //createObjectURL创建一个指向该参数对象(图片)的URL  </span><br><span class=\"line\">        var dataURL;  </span><br><span class=\"line\">        dataURL = windowURL.createObjectURL(objUrl);  </span><br><span class=\"line\">        $(img).attr(&quot;src&quot;,dataURL);  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.AJAX上传文件 XMLHttpRequest Level 2中的的FormData</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar data=new FormData();</span><br><span class=\"line\">\tdata.append(&quot;currentPage&quot;, 1);</span><br><span class=\"line\">\tdata.append(&quot;order&quot;, &quot;desc&quot;); </span><br><span class=\"line\">\tajax(&quot;&quot;,&quot;&quot;,data);</span><br><span class=\"line\"></span><br><span class=\"line\">function ajax(method,url,data)&#123;</span><br><span class=\"line\">\tvar xhr ;</span><br><span class=\"line\">    if (window.XMLHttpRequest) &#123; // Mozilla, Safari, ...</span><br><span class=\"line\">        xhr = new XMLHttpRequest();</span><br><span class=\"line\">    &#125; else if (window.ActiveXObject) &#123; // IE</span><br><span class=\"line\">        xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.addEventListener(&quot;progress&quot;, updateProgress, false);</span><br><span class=\"line\">    xhr.addEventListener(&quot;load&quot;, transferComplete, false);</span><br><span class=\"line\">    xhr.addEventListener(&quot;error&quot;, transferFailed, false);</span><br><span class=\"line\">    xhr.addEventListener(&quot;abort&quot;, transferCanceled, false);</span><br><span class=\"line\">    xhr.open(method,url, true);</span><br><span class=\"line\">    xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;multipart/form-data&quot;);</span><br><span class=\"line\">    xhr.send(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// progress on transfers from the server to the client (downloads)</span><br><span class=\"line\">function updateProgress(evt) &#123;</span><br><span class=\"line\">  if (evt.lengthComputable) &#123;</span><br><span class=\"line\">    var percentComplete = evt.loaded / evt.total;</span><br><span class=\"line\">    console.log(&quot;The transfer is updateProgress.&quot;);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // Unable to compute progress information since the total size is unknown</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function transferComplete(evt) &#123;</span><br><span class=\"line\">\tconsole.log(evt);</span><br><span class=\"line\">\tconsole.log(this.response);</span><br><span class=\"line\">\tconsole.log(JSON.parse(this.response));</span><br><span class=\"line\">\tconsole.log(evt.responseText);</span><br><span class=\"line\">\tconsole.log(&quot;The transfer is complete.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function transferFailed(evt) &#123;</span><br><span class=\"line\">\t console.log(&quot;An error occurred while transferring the file.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function transferCanceled(evt) &#123;</span><br><span class=\"line\">\t console.log(&quot;The transfer has been canceled by the user.&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects\" target=\"_blank\" rel=\"noopener\">使用FormData对象</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started\" target=\"_blank\" rel=\"noopener\">什么是 AJAX?</a></p>\n<h4 id=\"FileReader-Blob\"><a href=\"#FileReader-Blob\" class=\"headerlink\" title=\"FileReader Blob\"></a>FileReader Blob</h4><h2 id=\"图形图像、多媒体\"><a href=\"#图形图像、多媒体\" class=\"headerlink\" title=\"图形图像、多媒体\"></a>图形图像、多媒体</h2><h4 id=\"Canvas-SVG\"><a href=\"#Canvas-SVG\" class=\"headerlink\" title=\"Canvas SVG\"></a>Canvas SVG</h4><p>在body中添加Canvas和svg标签，具体的图形图像展示需要在js中书写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; height=&quot;190&quot;&gt;&lt;/svg&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var ctx=document.getElementById(&quot;myCanvas&quot;);</span><br><span class=\"line\">ctx.fillStyle = &quot;green&quot;;</span><br><span class=\"line\">ctx.fillRect(10, 10, 100, 100);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>具体的内容就不展开了。<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"noopener\">Canvas</a></p>\n<h4 id=\"video\"><a href=\"#video\" class=\"headerlink\" title=\"video\"></a>video</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video id=&quot;video&quot; width=&quot;420&quot; style=&quot;margin-top:15px;&quot;&gt;</span><br><span class=\"line\">   &lt;source src=&quot;/example/html5/mov_bbb.mp4&quot; type=&quot;video/mp4&quot; /&gt;</span><br><span class=\"line\">   &lt;source src=&quot;/example/html5/mov_bbb.ogg&quot; type=&quot;video/ogg&quot; /&gt;</span><br><span class=\"line\">   Your browser does not support HTML5 video.</span><br><span class=\"line\"> &lt;/video&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"audio\"><a href=\"#audio\" class=\"headerlink\" title=\"audio\"></a>audio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;audio src=&quot;song.ogg&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他API\"><a href=\"#其他API\" class=\"headerlink\" title=\"其他API\"></a>其他API</h2><h4 id=\"navigator-geolocation-位置信息\"><a href=\"#navigator-geolocation-位置信息\" class=\"headerlink\" title=\"navigator.geolocation 位置信息\"></a>navigator.geolocation 位置信息</h4><p>结合手机和PC,通过百度Map和google convertor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=1.4&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://developer.baidu.com/map/jsdemo/demo/convertor.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取地理信息并Hander</span><br><span class=\"line\"> $(function()&#123;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t if(check())&#123;</span><br><span class=\"line\">\t\t\t pc();</span><br><span class=\"line\">\t\t &#125;else&#123;</span><br><span class=\"line\">\t\t\t phone();</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">//geo</span><br><span class=\"line\"> function Hander(city)&#123;</span><br><span class=\"line\">\t console.log(city);</span><br><span class=\"line\">\t// if(city.charAt(city.length-1)==&quot;市&quot;&amp;&amp;city.substring(city.length-2,city.length-1)!=&quot;市&quot;)&#123;</span><br><span class=\"line\">\t//\t city=city.substring(0,city.length-1); </span><br><span class=\"line\">\t// &#125;</span><br><span class=\"line\"> \t//city=&quot;徐州&quot;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> function check() &#123;</span><br><span class=\"line\">\t  var userAgentInfo=navigator.userAgent;</span><br><span class=\"line\">\t  var Agents =new Array(&quot;Android&quot;,&quot;iPhone&quot;,&quot;SymbianOS&quot;,&quot;Windows Phone&quot;,&quot;iPad&quot;,&quot;iPod&quot;);</span><br><span class=\"line\">\t  var flag=true;</span><br><span class=\"line\">\t  for(var v=0;v&lt;Agents.length;v++) &#123;</span><br><span class=\"line\">\t     if(userAgentInfo.indexOf(Agents[v])&gt;0) &#123;</span><br><span class=\"line\">\t       flag=false;</span><br><span class=\"line\">\t       break;</span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t return flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function pc()&#123;</span><br><span class=\"line\"> $.getScript(&apos;http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&apos;,getCity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getCity(_result)&#123;</span><br><span class=\"line\">\t  if (remote_ip_info.ret == &apos;1&apos;) &#123;</span><br><span class=\"line\">\t         console.log(remote_ip_info.country + &apos; ,&apos; + remote_ip_info.province + &apos;省,&apos; + remote_ip_info.city+ &apos;市&apos;   );</span><br><span class=\"line\">\t         Hander(remote_ip_info.city);</span><br><span class=\"line\">\t     &#125; else &#123;</span><br><span class=\"line\">\t    \t console.log(&apos;没有找到匹配的IP地址信息！&apos;);</span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function phone()&#123;</span><br><span class=\"line\">\t    var options=&#123;</span><br><span class=\"line\">\t            enableHighAccuracy:true,</span><br><span class=\"line\">\t            maximunAge:1000,</span><br><span class=\"line\">\t            timeout:5000</span><br><span class=\"line\">\t    &#125;;</span><br><span class=\"line\">\t    if(window.navigator.geolocation)&#123;</span><br><span class=\"line\">\t        navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);</span><br><span class=\"line\">\t    &#125;else&#123;</span><br><span class=\"line\">\t    \t console.log(&apos;你的浏览器不支持地理位置！&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">function successCallback(position)&#123;</span><br><span class=\"line\">\t\t// 百度地图API功能</span><br><span class=\"line\">\t   var lng = position.coords.longitude;</span><br><span class=\"line\">\t   var lat = position.coords.latitude;</span><br><span class=\"line\">\t   var point = new BMap.Point(lng, lat); // 创建点坐标//116.331398,39.897445</span><br><span class=\"line\">\t   BMap.Convertor.translate(point,0,translateCallback); </span><br><span class=\"line\">\t   console.log(&apos;当前地址的经纬度：经度&apos; + lng + &apos;，纬度&apos; + lat);</span><br><span class=\"line\">\t   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function translateCallback(point)&#123;</span><br><span class=\"line\">\t console.log(point);</span><br><span class=\"line\">\t  var geoc = new BMap.Geocoder();//地址解析类 </span><br><span class=\"line\">\t  geoc.getLocation(point, function(rs)&#123;</span><br><span class=\"line\">\t\t var defCity = &#123;</span><br><span class=\"line\">\t\t\t        id: &apos;000001&apos;,</span><br><span class=\"line\">\t\t\t        name: &apos;北京&apos;,</span><br><span class=\"line\">\t\t\t        date: new Date()//获取当前时间方法</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tvar addComp = rs.addressComponents;</span><br><span class=\"line\">\t\tconsole.log(addComp.province + &quot;, &quot; + addComp.city + &quot;, &quot; + addComp.district + &quot;, &quot; + addComp.street + &quot;, &quot; + addComp.streetNumber);</span><br><span class=\"line\">\t\tHander(addComp.city);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">function errorCallback(error)&#123;</span><br><span class=\"line\">   switch(error.code)&#123;</span><br><span class=\"line\">   case error.PERMISSION_DENIED:</span><br><span class=\"line\">\t   console.log(&quot;you have denied access to your position .&quot;);</span><br><span class=\"line\">       break;</span><br><span class=\"line\">   case error.POSITION_UNAVAILABLE:</span><br><span class=\"line\">\t   console.log(&quot;there was a problem getting yout position .&quot;);</span><br><span class=\"line\">       break;</span><br><span class=\"line\">   case error.TIMEOUT:</span><br><span class=\"line\">       console.log(&quot;The application has timed out attempting to get your location .&quot;);</span><br><span class=\"line\">       break;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);</p>\n<p>Geolocation.getCurrentPosition()</p>\n<p>Determines the device’s current location and gives back a Position object with the data.</p>\n<p>Geolocation.watchPosition()</p>\n<p>Returns a long value representing the newly established callback function to be invoked whenever the device location changes.</p>\n<p>Geolocation.clearWatch()</p>\n<p>Removes the particular handler previously installed using watchPosition().</p>\n<p>geolocation有三个方法，其中getCurrentPosition中的回调函数。</p>\n<p>会回传参数Position其中有两个参数Coordinates和timestamp</p>\n<p>Position.coords Read only : Returns a Coordinates object defining the current location.</p>\n<p>Position.timestamp Read only : Returns a DOMTimeStamp representing the time at which the location was retrieved.</p>\n<h4 id=\"history-历史信息\"><a href=\"#history-历史信息\" class=\"headerlink\" title=\"history 历史信息\"></a>history 历史信息</h4><p>history.back():后退  加载 history 列表中的前一个 URL。</p>\n<p>history.forward() 加载 history 列表中的下一个 URL。</p>\n<p>history.go(0);//刷新当前页面</p>\n<p>//以下是要在浏览器中有历史记录的,否则不会有效果.<br>history.go(1);//前进一页</p>\n<p>history.go(-1);//后退一页</p>\n<p>history.go(-2);//后退两页</p>\n<p>history.length;//当前窗口包含的历史记录条数</p>\n<h4 id=\"Worker\"><a href=\"#Worker\" class=\"headerlink\" title=\"Worker\"></a>Worker</h4><p><a href=\"http://www.ibm.com/developerworks/cn/web/1112_sunch_webworker/\" target=\"_blank\" rel=\"noopener\">深入 HTML5 Web Worker 应用实践：多线程编程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTML5-API新特性\"><a href=\"#HTML5-API新特性\" class=\"headerlink\" title=\"HTML5-API新特性\"></a>HTML5-API新特性</h1><p>主要内容：存储、文件 、图形图像、 媒体（视频、音频）</p>\n<hr>\n<h2 id=\"Storage-存储\"><a href=\"#Storage-存储\" class=\"headerlink\" title=\"Storage 存储\"></a>Storage 存储</h2><h4 id=\"Local-Storage\"><a href=\"#Local-Storage\" class=\"headerlink\" title=\"Local Storage\"></a>Local Storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var local=this.localStorage;</span><br><span class=\"line\">var STORAGE_KEY = &apos;Local&apos;;</span><br><span class=\"line\">var items=&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;password&quot;:&quot;123456&quot;&#125;</span><br><span class=\"line\">var STORAGE_KEY2 = &apos;Local2&apos;;</span><br><span class=\"line\">var items2=&#123;&quot;name&quot;:&quot;wang&quot;,&quot;sto&quot;:&quot;storage&quot;&#125;</span><br><span class=\"line\">local.setItem(STORAGE_KEY, JSON.stringify(items));//把itemJSON话后，添加到LocalStorage，此时在浏览器中可以看到</span><br><span class=\"line\">console.log(local.getItem(STORAGE_KEY));//根据key获取&#123;key:value&#125;</span><br><span class=\"line\">console.log(local);</span><br><span class=\"line\">local.setItem(STORAGE_KEY2, JSON.stringify(items2));</span><br><span class=\"line\">console.log(local);</span><br><span class=\"line\">console.log(local.key(1));</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(local.key(0));获取第一个&#123;key:value&#125;</span><br><span class=\"line\">console.log(local.length);</span><br><span class=\"line\">local.removeItem(STORAGE_KEY);//根据key移除&#123;key:value&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(local.length);//获取内容的长度</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(local);</span><br><span class=\"line\">local.clear();//清除localStorage</span><br><span class=\"line\">console.log(local);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201608201813.PNG\" alt=\"控制台输出\"><br><img src=\"/.io//201608201816.PNG\" alt=\"LocalStorage信息\"></p>\n<ul>\n<li><p>获取添加移除:getItem(),setItem() removeItem()</p>\n</li>\n<li><p>长度 length</p>\n</li>\n<li><p>清除所有{key:value}:LocalStorage.clear()</p>\n</li>\n</ul>\n<p>其中LocalStorage对象中，存储5M左右内容，同时这个对象和Cookies不同，Cookies会和Server进行信息传递，但是LocalStorage不会，根据名字就可以看出，这个对象只存在于本地。</p>\n<h4 id=\"Session-Storage\"><a href=\"#Session-Storage\" class=\"headerlink\" title=\"Session Storage\"></a>Session Storage</h4><p>SessionStorage和LocalStorage类似，方法也一样，只不过存在的生命周期和存储大小、服务器不同。比较：</p>\n<table>\n<thead>\n<tr>\n<th>比较</th>\n<th style=\"text-align:center\">sessionStorage</th>\n<th style=\"text-align:right\">localStorage</th>\n<th style=\"text-align:right\">cookie</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储大小</td>\n<td style=\"text-align:center\">5M</td>\n<td style=\"text-align:right\">5M或者更大</td>\n<td style=\"text-align:right\">cookie数据不能超过4k，cookie只适合保存很小的数据，如会话标识。</td>\n</tr>\n<tr>\n<td>生命周期</td>\n<td style=\"text-align:center\">一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。</td>\n<td style=\"text-align:right\">始终有效</td>\n<td style=\"text-align:right\">取决于expires/max-age</td>\n</tr>\n<tr>\n<td>同源策略</td>\n<td style=\"text-align:center\">不可跨域</td>\n<td style=\"text-align:right\">在所有同源窗口中都是共享的</td>\n<td style=\"text-align:right\">不可以跨域调用。</td>\n</tr>\n<tr>\n<td>是否和服务器交换数据</td>\n<td style=\"text-align:center\">数据和服务器交换</td>\n<td style=\"text-align:right\">只存在于本地</td>\n<td style=\"text-align:right\">每次http请求都会携带cookie，</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"IndexedDB-Web-SQL\"><a href=\"#IndexedDB-Web-SQL\" class=\"headerlink\" title=\"IndexedDB  Web SQL\"></a>IndexedDB  Web SQL</h4><p>这两个存储，一般属于离线应用的数据保存。web网页一般不使用，主要是应用、游戏等使用。</p>\n<p>支持的浏览器：WEB SQL DATABASE SUPPORT</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">IE</th>\n<th style=\"text-align:center\">FIREFOX</th>\n<th style=\"text-align:right\">SAFARI</th>\n<th style=\"text-align:right\">CHROME</th>\n<th style=\"text-align:right\">OPERA</th>\n<th style=\"text-align:right\">IPHONE</th>\n<th>ANDROID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">·    ·</td>\n<td style=\"text-align:center\">4.0+</td>\n<td style=\"text-align:right\">4.0+</td>\n<td style=\"text-align:right\">10.5+</td>\n<td style=\"text-align:right\">3.0+</td>\n<td style=\"text-align:right\">2.0+</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h4><p>document.cookie=”userId=1”;</p>\n<p>document.cookie=”userName=hulk”;</p>\n<p>document.cookie它的赋值并不意味着丢失原来的值，上面两句说明浏览器将维护两个cookie，分别是userId和userName，因此给document.cookie赋值更像执<br>行类似这样的语句：</p>\n<p>document.addCookie(“userId=1”);</p>\n<p>document.addCookie(“userName=hulk”);</p>\n<p>事实上，浏览器就是按照这样的方式来设置cookie的，如果要改变一个cookie的值，只需重新赋值，例如：</p>\n<p>document.cookie=”userId=2”;</p>\n<p>这样就将名为userId的cookie值设置为了2。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var date=new Date();</span><br><span class=\"line\">var expireDays=10;</span><br><span class=\"line\">//将date设置为10天以后的时间</span><br><span class=\"line\">date.setTime(date.getTime()+expireDays*24*3600*1000);</span><br><span class=\"line\">document.cookie = &apos;cookiename=cookievalue;expires=+&apos;+date.toGMTString()+&apos;;&apos;;</span><br><span class=\"line\">document.cookie = &apos;cookiez=zhangsad; max-age=&apos;+(60*60*24*365)+&apos;;path=/;&apos;;</span><br><span class=\"line\">function getCookie(c_name)&#123;</span><br><span class=\"line\">\t var i,x,y; </span><br><span class=\"line\">\t var cookieArray = document.cookie.split(&quot;;&quot;); </span><br><span class=\"line\">\t console.log(cookieArray);</span><br><span class=\"line\">\t for (i=0;i&lt;cookieArray.length;i++)&#123;</span><br><span class=\"line\">\t  x = cookieArray[i].substr(0,cookieArray[i].indexOf(&quot;=&quot;)); </span><br><span class=\"line\">\t  y = cookieArray[i].substr(cookieArray[i].indexOf(&quot;=&quot;)+1); </span><br><span class=\"line\">\t  x = x.replace(/^\\s+|\\s+$/g,&quot;&quot;); </span><br><span class=\"line\">\t  console.log(y);</span><br><span class=\"line\">\t  if(x == c_name)&#123; </span><br><span class=\"line\">\t\t  return unescape(y); </span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">console.log(getCookie(&apos;cookiez&apos;));</span><br><span class=\"line\">console.log(document.cookie);</span><br></pre></td></tr></table></figure>\n<p>Chrome浏览器上的显示结果:</p>\n<p><img src=\"/.io//201608230954.PNG\" alt=\"Chrome浏览器Cookies\"><br><img src=\"/.io//201608230958.PNG\" alt=\"Chrome浏览器控制台\"></p>\n<h2 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h2><h4 id=\"Cache-Storage-Application-Cache\"><a href=\"#Cache-Storage-Application-Cache\" class=\"headerlink\" title=\"Cache Storage Application Cache\"></a>Cache Storage Application Cache</h4><p>离线缓存技术主要是应用于在没有网络的情况下，通过创建cache manifest文件，可以轻松的创建离线应用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot; manifest=&quot;static/manifest/manifest.appcache&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;APP CACHE&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=1.4&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script type=&quot;text/javascript&quot; src=&quot;http://developer.baidu.com/map/jsdemo/demo/convertor.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;static/ajaxjs/myzhang.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script src=&quot;static/ajaxjs/geolocation.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;&lt;!-- text/cache-mainfest --&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;img src=&quot;static/img/1.jpg&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&quot;static/img/2.jpg&quot;&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    window.addEventListener(&apos;load&apos;, function(e)&#123;</span><br><span class=\"line\">        console.log(window.applicationCache.status);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>在html上使用manifest属性，引用appcache文件，文件下主要内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\">#version 1.3</span><br><span class=\"line\"># 需要缓存的列表</span><br><span class=\"line\">CACHE:</span><br><span class=\"line\">    ../ajaxjs/myzhang.js</span><br><span class=\"line\">    ../ajaxjs/geolocation.js</span><br><span class=\"line\">    ../img/2.jpg</span><br><span class=\"line\">    ../img/2.jpg</span><br><span class=\"line\">NETWORK:</span><br><span class=\"line\"># 不需要缓存的</span><br><span class=\"line\">    *</span><br><span class=\"line\"></span><br><span class=\"line\">FALLBACK:</span><br><span class=\"line\"># 访问缓存失败后，备用访问的资源，第一个是访问源，第二个是替换文件*.html /offline.html</span><br><span class=\"line\">2.jpg/3.jpg</span><br></pre></td></tr></table></figure>\n<p>CACHE上面的内容就是下载的内容，保存在本地，作为缓存。</p>\n<p><img src=\"/.io//201608231046.PNG\" alt=\"Cache\"><br><img src=\"/.io//201608231049.PNG\" alt=\"Cache\"><br><a href=\"http://www.admin10000.com/document/5921.html\" target=\"_blank\" rel=\"noopener\">HTML5应用程序缓存Application Cache详解</a><br><a href=\"https://www.nihaoshijie.com.cn/index.php/archives/425\" target=\"_blank\" rel=\"noopener\">HTML5离线存储之Application Cache</a></p>\n<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><h4 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h4><p>具体应用：<br><a href=\"http://blog.csdn.net/a35038438/article/details/51162291\" target=\"_blank\" rel=\"noopener\">上传图片立即显示</a><br>1.文件即传即显</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;input:file&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">    console.log($(this));</span><br><span class=\"line\">    var img=$($($(this).next(&quot;label&quot;))).find(&quot;img&quot;);</span><br><span class=\"line\">    //*原理是把本地图片路径：&quot;D(盘符):/image/...&quot;转为&quot;http://...&quot;格式路径来进行显示图片*/  </span><br><span class=\"line\">    $(this).change(function() &#123;  </span><br><span class=\"line\">        var $file = $(this);  </span><br><span class=\"line\">        var objUrl = $file[0].files[0];  </span><br><span class=\"line\">        var windowURL = window.URL || window.webkitURL;  </span><br><span class=\"line\">        //createObjectURL创建一个指向该参数对象(图片)的URL  </span><br><span class=\"line\">        var dataURL;  </span><br><span class=\"line\">        dataURL = windowURL.createObjectURL(objUrl);  </span><br><span class=\"line\">        $(img).attr(&quot;src&quot;,dataURL);  </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2.AJAX上传文件 XMLHttpRequest Level 2中的的FormData</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar data=new FormData();</span><br><span class=\"line\">\tdata.append(&quot;currentPage&quot;, 1);</span><br><span class=\"line\">\tdata.append(&quot;order&quot;, &quot;desc&quot;); </span><br><span class=\"line\">\tajax(&quot;&quot;,&quot;&quot;,data);</span><br><span class=\"line\"></span><br><span class=\"line\">function ajax(method,url,data)&#123;</span><br><span class=\"line\">\tvar xhr ;</span><br><span class=\"line\">    if (window.XMLHttpRequest) &#123; // Mozilla, Safari, ...</span><br><span class=\"line\">        xhr = new XMLHttpRequest();</span><br><span class=\"line\">    &#125; else if (window.ActiveXObject) &#123; // IE</span><br><span class=\"line\">        xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.addEventListener(&quot;progress&quot;, updateProgress, false);</span><br><span class=\"line\">    xhr.addEventListener(&quot;load&quot;, transferComplete, false);</span><br><span class=\"line\">    xhr.addEventListener(&quot;error&quot;, transferFailed, false);</span><br><span class=\"line\">    xhr.addEventListener(&quot;abort&quot;, transferCanceled, false);</span><br><span class=\"line\">    xhr.open(method,url, true);</span><br><span class=\"line\">    xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;multipart/form-data&quot;);</span><br><span class=\"line\">    xhr.send(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// progress on transfers from the server to the client (downloads)</span><br><span class=\"line\">function updateProgress(evt) &#123;</span><br><span class=\"line\">  if (evt.lengthComputable) &#123;</span><br><span class=\"line\">    var percentComplete = evt.loaded / evt.total;</span><br><span class=\"line\">    console.log(&quot;The transfer is updateProgress.&quot;);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // Unable to compute progress information since the total size is unknown</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function transferComplete(evt) &#123;</span><br><span class=\"line\">\tconsole.log(evt);</span><br><span class=\"line\">\tconsole.log(this.response);</span><br><span class=\"line\">\tconsole.log(JSON.parse(this.response));</span><br><span class=\"line\">\tconsole.log(evt.responseText);</span><br><span class=\"line\">\tconsole.log(&quot;The transfer is complete.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function transferFailed(evt) &#123;</span><br><span class=\"line\">\t console.log(&quot;An error occurred while transferring the file.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function transferCanceled(evt) &#123;</span><br><span class=\"line\">\t console.log(&quot;The transfer has been canceled by the user.&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects\" target=\"_blank\" rel=\"noopener\">使用FormData对象</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started\" target=\"_blank\" rel=\"noopener\">什么是 AJAX?</a></p>\n<h4 id=\"FileReader-Blob\"><a href=\"#FileReader-Blob\" class=\"headerlink\" title=\"FileReader Blob\"></a>FileReader Blob</h4><h2 id=\"图形图像、多媒体\"><a href=\"#图形图像、多媒体\" class=\"headerlink\" title=\"图形图像、多媒体\"></a>图形图像、多媒体</h2><h4 id=\"Canvas-SVG\"><a href=\"#Canvas-SVG\" class=\"headerlink\" title=\"Canvas SVG\"></a>Canvas SVG</h4><p>在body中添加Canvas和svg标签，具体的图形图像展示需要在js中书写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; height=&quot;190&quot;&gt;&lt;/svg&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var ctx=document.getElementById(&quot;myCanvas&quot;);</span><br><span class=\"line\">ctx.fillStyle = &quot;green&quot;;</span><br><span class=\"line\">ctx.fillRect(10, 10, 100, 100);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>具体的内容就不展开了。<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"noopener\">Canvas</a></p>\n<h4 id=\"video\"><a href=\"#video\" class=\"headerlink\" title=\"video\"></a>video</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video id=&quot;video&quot; width=&quot;420&quot; style=&quot;margin-top:15px;&quot;&gt;</span><br><span class=\"line\">   &lt;source src=&quot;/example/html5/mov_bbb.mp4&quot; type=&quot;video/mp4&quot; /&gt;</span><br><span class=\"line\">   &lt;source src=&quot;/example/html5/mov_bbb.ogg&quot; type=&quot;video/ogg&quot; /&gt;</span><br><span class=\"line\">   Your browser does not support HTML5 video.</span><br><span class=\"line\"> &lt;/video&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"audio\"><a href=\"#audio\" class=\"headerlink\" title=\"audio\"></a>audio</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;audio src=&quot;song.ogg&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他API\"><a href=\"#其他API\" class=\"headerlink\" title=\"其他API\"></a>其他API</h2><h4 id=\"navigator-geolocation-位置信息\"><a href=\"#navigator-geolocation-位置信息\" class=\"headerlink\" title=\"navigator.geolocation 位置信息\"></a>navigator.geolocation 位置信息</h4><p>结合手机和PC,通过百度Map和google convertor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=1.4&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://developer.baidu.com/map/jsdemo/demo/convertor.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取地理信息并Hander</span><br><span class=\"line\"> $(function()&#123;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t if(check())&#123;</span><br><span class=\"line\">\t\t\t pc();</span><br><span class=\"line\">\t\t &#125;else&#123;</span><br><span class=\"line\">\t\t\t phone();</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">//geo</span><br><span class=\"line\"> function Hander(city)&#123;</span><br><span class=\"line\">\t console.log(city);</span><br><span class=\"line\">\t// if(city.charAt(city.length-1)==&quot;市&quot;&amp;&amp;city.substring(city.length-2,city.length-1)!=&quot;市&quot;)&#123;</span><br><span class=\"line\">\t//\t city=city.substring(0,city.length-1); </span><br><span class=\"line\">\t// &#125;</span><br><span class=\"line\"> \t//city=&quot;徐州&quot;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> function check() &#123;</span><br><span class=\"line\">\t  var userAgentInfo=navigator.userAgent;</span><br><span class=\"line\">\t  var Agents =new Array(&quot;Android&quot;,&quot;iPhone&quot;,&quot;SymbianOS&quot;,&quot;Windows Phone&quot;,&quot;iPad&quot;,&quot;iPod&quot;);</span><br><span class=\"line\">\t  var flag=true;</span><br><span class=\"line\">\t  for(var v=0;v&lt;Agents.length;v++) &#123;</span><br><span class=\"line\">\t     if(userAgentInfo.indexOf(Agents[v])&gt;0) &#123;</span><br><span class=\"line\">\t       flag=false;</span><br><span class=\"line\">\t       break;</span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t return flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function pc()&#123;</span><br><span class=\"line\"> $.getScript(&apos;http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&apos;,getCity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getCity(_result)&#123;</span><br><span class=\"line\">\t  if (remote_ip_info.ret == &apos;1&apos;) &#123;</span><br><span class=\"line\">\t         console.log(remote_ip_info.country + &apos; ,&apos; + remote_ip_info.province + &apos;省,&apos; + remote_ip_info.city+ &apos;市&apos;   );</span><br><span class=\"line\">\t         Hander(remote_ip_info.city);</span><br><span class=\"line\">\t     &#125; else &#123;</span><br><span class=\"line\">\t    \t console.log(&apos;没有找到匹配的IP地址信息！&apos;);</span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function phone()&#123;</span><br><span class=\"line\">\t    var options=&#123;</span><br><span class=\"line\">\t            enableHighAccuracy:true,</span><br><span class=\"line\">\t            maximunAge:1000,</span><br><span class=\"line\">\t            timeout:5000</span><br><span class=\"line\">\t    &#125;;</span><br><span class=\"line\">\t    if(window.navigator.geolocation)&#123;</span><br><span class=\"line\">\t        navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);</span><br><span class=\"line\">\t    &#125;else&#123;</span><br><span class=\"line\">\t    \t console.log(&apos;你的浏览器不支持地理位置！&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">function successCallback(position)&#123;</span><br><span class=\"line\">\t\t// 百度地图API功能</span><br><span class=\"line\">\t   var lng = position.coords.longitude;</span><br><span class=\"line\">\t   var lat = position.coords.latitude;</span><br><span class=\"line\">\t   var point = new BMap.Point(lng, lat); // 创建点坐标//116.331398,39.897445</span><br><span class=\"line\">\t   BMap.Convertor.translate(point,0,translateCallback); </span><br><span class=\"line\">\t   console.log(&apos;当前地址的经纬度：经度&apos; + lng + &apos;，纬度&apos; + lat);</span><br><span class=\"line\">\t   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function translateCallback(point)&#123;</span><br><span class=\"line\">\t console.log(point);</span><br><span class=\"line\">\t  var geoc = new BMap.Geocoder();//地址解析类 </span><br><span class=\"line\">\t  geoc.getLocation(point, function(rs)&#123;</span><br><span class=\"line\">\t\t var defCity = &#123;</span><br><span class=\"line\">\t\t\t        id: &apos;000001&apos;,</span><br><span class=\"line\">\t\t\t        name: &apos;北京&apos;,</span><br><span class=\"line\">\t\t\t        date: new Date()//获取当前时间方法</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tvar addComp = rs.addressComponents;</span><br><span class=\"line\">\t\tconsole.log(addComp.province + &quot;, &quot; + addComp.city + &quot;, &quot; + addComp.district + &quot;, &quot; + addComp.street + &quot;, &quot; + addComp.streetNumber);</span><br><span class=\"line\">\t\tHander(addComp.city);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">function errorCallback(error)&#123;</span><br><span class=\"line\">   switch(error.code)&#123;</span><br><span class=\"line\">   case error.PERMISSION_DENIED:</span><br><span class=\"line\">\t   console.log(&quot;you have denied access to your position .&quot;);</span><br><span class=\"line\">       break;</span><br><span class=\"line\">   case error.POSITION_UNAVAILABLE:</span><br><span class=\"line\">\t   console.log(&quot;there was a problem getting yout position .&quot;);</span><br><span class=\"line\">       break;</span><br><span class=\"line\">   case error.TIMEOUT:</span><br><span class=\"line\">       console.log(&quot;The application has timed out attempting to get your location .&quot;);</span><br><span class=\"line\">       break;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);</p>\n<p>Geolocation.getCurrentPosition()</p>\n<p>Determines the device’s current location and gives back a Position object with the data.</p>\n<p>Geolocation.watchPosition()</p>\n<p>Returns a long value representing the newly established callback function to be invoked whenever the device location changes.</p>\n<p>Geolocation.clearWatch()</p>\n<p>Removes the particular handler previously installed using watchPosition().</p>\n<p>geolocation有三个方法，其中getCurrentPosition中的回调函数。</p>\n<p>会回传参数Position其中有两个参数Coordinates和timestamp</p>\n<p>Position.coords Read only : Returns a Coordinates object defining the current location.</p>\n<p>Position.timestamp Read only : Returns a DOMTimeStamp representing the time at which the location was retrieved.</p>\n<h4 id=\"history-历史信息\"><a href=\"#history-历史信息\" class=\"headerlink\" title=\"history 历史信息\"></a>history 历史信息</h4><p>history.back():后退  加载 history 列表中的前一个 URL。</p>\n<p>history.forward() 加载 history 列表中的下一个 URL。</p>\n<p>history.go(0);//刷新当前页面</p>\n<p>//以下是要在浏览器中有历史记录的,否则不会有效果.<br>history.go(1);//前进一页</p>\n<p>history.go(-1);//后退一页</p>\n<p>history.go(-2);//后退两页</p>\n<p>history.length;//当前窗口包含的历史记录条数</p>\n<h4 id=\"Worker\"><a href=\"#Worker\" class=\"headerlink\" title=\"Worker\"></a>Worker</h4><p><a href=\"http://www.ibm.com/developerworks/cn/web/1112_sunch_webworker/\" target=\"_blank\" rel=\"noopener\">深入 HTML5 Web Worker 应用实践：多线程编程</a></p>\n"},{"title":"Linux 基础命令总结2","date":"2016-07-07T05:02:34.000Z","description":"用户，网络(端口占用等)、服务(自启动)、系统环境、权限、进程、任务调度、工作","_content":"\n## 打印、输出\n\n#### 打印\n\n`lpr`  `lpq` `lprm`\n\n#### 输出\n\n`echo`  `printf` `yes` `seq` `clear`\n<!--more-->\n## 用户、主机环境 \n\n#### 用户\n\n`logname`: 登录名\n\n`whoami`: 当前有效的用户名\n\n`id`: pid和gid\n\n`who`: 详细列出所有登录用户，看谁正在使用，展示IP\n\n`users`: 简单列出所有登录用户\n\n`finger`: 打印用户信息\n\n`last`: 确定之前谁在什么时候登录这台主机，历史登录用户\n\n#### 主机\n\n`printenv`:打印环境变量\n\n`uname`: 系统内核信息（Unix name）\n\n##### -a 所有 \n\n##### –r内核版本（release） \n\n##### -s内核名称\n\n`hostname`:系统主机名\n\n----\n\n-s, --short           short host name\n\n-a, --alias           alias names\n\n-i, --ip-address      addresses for the hostname  \n\n-I, --all-ip-addresses all addresses for the host\n\n-f, --fqdn, --long    long host name (FQDN)\n\n-A, --all-fqdns        all long host names (FQDNs)\n\n-d, --domain          DNS domain name `dominname` \n\n-y, --yp, --nis       NIS/YP domainname   `dnsdominname` `ypdominname` `nisdominname`\n\n-F, --file            read hostname or NIS domainname from given file   \n\n-----\n\n`history` 历史命令\n\n## 权限(目录和文件)和用户，组\n\n\n#### rwx权限 读写执行\n\n >所有者 所属者 其他人\n\n默认：`umask` \n\n改变权限：`chmod` `chown` `chgrp`\n\n#### 高级权限管理ACL SODO 文件特殊权限\n\n##### ACL权限(解决用户身份不够的情况)(目录和文件)\n \n >首先要看ACL权限是否开启 `dumpe2fs -h /dev/xvdal`\n \n >`setfacl`\n \n >`getfacl` 文件或目录后面有一个[+]号\n \n >mask 用来控制最大权限\n\n##### sudo(超级用户root执行的系统命令)(命令)\n\n >visudo(修改/etc/sudoers.tmp文件)\n > sudo -l 查看被添加的权限\n\n##### SetUID SetGID Sticky BIT(文件特殊权限)(一般不使用)\n\n >SetUID 可执行文件有执行权限的时候才有SUID  USER[s=S+x]S无效\n \n >`chmod 4755[u+s] 文件名`\n \n >`chmod 0755[u-s] 文件名`\n \n >SetGID 可执行文件有执行权限的时候才有SGID,目录的rx权限  GROUP组身份是我\n \n >`chmod 2755[g+s] 文件名`\n \n >`chmod 0755[u-s] 文件名`\n \n >Sticky BIT  SBIT粘着位作用,仅针对目录，其他人有rwx权限 \n \n >`chmod 1755[o+t] 目录`\n \n >`chmod 0755[o-t] 目录`\n \n > i[insert插入]/a[append追加] 不可改变位权限\n \n >`chattr [a/i]`\n\n >`lsattr`\n\n`pam` `selinux`\n\n#### 用户：\n\n`useradd` `userdel` `usermod`\n\n#### 所属组：\n\n`groups` `groupadd` `groupdel` `groupmod`\n\n\nuseradd 用户名 -g 组名–G 组名-d Home 目录名-p 密码\n\nuseradd usenmae –g usenmae  –p ora123 \n\npasswd  username\n\ncat /etc/group  查看所有所属组\n\nchmod -R g+w \n\nchown -R bid:bids /home/newname  把/home/newname的所有者改为bid，所属组改为bids\n\n\n\n\n## 网络和连接登录\n\n`arp`: 硬件地址(IP ----> MAC地址)\n\n`traceroute`: 到某一个地址的路由信息\n\n`route`: 路由表\n\n`ifconfig`: 配置网络信息\n\n`ping`: 检测网络畅通\n\n`host`: 检测分析域名是否正常\n\n`netstat`: 查看网络状态、端口状态 -tulp   -tnaop  ☆\n\n-a 端口\n-t tcp\n-u udp\n-l listener\n-p program name \n      \n      netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n\n解析：\n- CLOSED  //无连接是活动的或正在进行\n- LISTEN  //服务器在等待进入呼叫\n- SYN_RECV  //一个连接请求已经到达，等待确认\n- SYN_SENT  //应用已经开始，打开一个连接\n- ESTABLISHED  //正常数据传输状态/当前并发连接数\n- FIN_WAIT1  //应用说它已经完成\n- FIN_WAIT2  //另一边已同意释放\n- ITMED_WAIT  //等待所有分组死掉\n- CLOSING  //两边同时尝试关闭\n- TIME_WAIT  //另一边已初始化一个释放\n- LAST_ACK  //等待所有分组死掉\n\n`ip`: iproute2中的命令(以上所有命令基本上都可以用这个命令来使用)\n\n`net`: 无\n\n`msg`:禁用\n\n`nbtstat`:  无\n\n`wget`: 下载资源\n\n`curl` : \n\n远程连接：`ssh` `scp` `sftp` `telnet`(一般禁用) `ftp`(不常用)\n\n`sz` file 下载文件到本机\n\n#### 端口占用6中方法\n\nss -tnlp  \nnetstat\nlsof\nfuser \nnmap (NetWork Mapper) 网络监测和安全审计工具，可能无此命令\nsystemctl systemd系统的控制管理器和服务管理器 可能无此命令\n\n\nnetstat -tlnaop\n\n-c 字符串  -u 用户名  -p pid\n\n\nlsof  进程打开或使用、调用的文件信息☆\n\nlsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000\n\n## 进程、系统资源(磁盘)\n\n#### 进程\n\n`ps`: 查看进程\n\n##### aux BSD\n\n##### -el Linux\n-----\nps命令常用用法（方便查看系统进程）\n\n- 1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。\n- 2）ps -A 显示所有进程。\n- 3）ps -c列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。\n- 4）ps -e 此参数的效果和指定\"A\"参数相同。\n- 5）ps e 列出程序时，显示每个程序所使用的环境变量。\n- 6）ps f 用ASCII字符显示树状结构，表达程序间的相互关系。\n- 7）ps -H 显示树状结构，表示程序间的相互关系。\n- 8）ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。\n- 9）ps s 采用程序信号的格式显示程序状况。\n- 10）ps S 列出程序时，包括已中断的子程序资料。\n- 11）ps -t<终端机编号> 　指定终端机编号，并列出属于该终端机的程序的状况。\n- 12）ps u 　以用户为主的格式来显示程序状况。\n- 13）ps x 　显示所有程序，不以终端机来区分。\n\n最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。\n\nps -ef | grep tomcat 查看tomcat进程☆\n\n\n##### 检查tomcat/nginx 并发数，连接数等\n\n内部的应用级别的：\nserver {\n    listen  *:80 default_server;\n    server_name *.jiloc.com jiloc.com;\n    location /ngx_status   {\n        stub_status on;\n        access_log off;\n        #allow 127.0.0.1;\n        #deny all;\n    }\n}\n\ncurl http://127.0.0.1/ngx_status\n\n浏览器 http://127.0.0.1/jStatus\n\n\n\n外部的，命令级别的：\n\n可查看所有建立连接的详细记录: netstat -nat | grep ESTABLISHED|wc  \n\nnetstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n\nps -ef|grep tomcat\n\n查看tomcat的线程数: ps -Lf pid|wc -l\n查看tomcat的并发数: netstat -an|grep pid |awk '{count[$6]++} END{for (i in count) print(i,count[i])}'\n\n\n[Linux 下Web服务器 Nginx 状态监控 查看nginx当前并发 连接 请求状态](https://www.jiloc.com/42193.html)\n[linux进程、线程状态 tomcat线程数 并发数查看](https://blog.csdn.net/wngua/article/details/70904991)\n[inux查看连接数，并发数](http://duanfei.iteye.com/blog/1894387)\n\n---------\n\n##### 输出信息\n\n--------\nUSER 该进程由哪个用户产生的\n\nPID 该进程ID号\n\n%CPU  该进程占用CPU资源的百分比\n\n%MEM  该进程占用物理内存资源的百分比\n\nVSZ 该进程占用虚拟内存大小，单位KB\n\nRSS 该进程占用实际物理内存的大小，单位KB\n\nTTY ？内核调用，该进程在哪一个终端上运行的，tty1-tty7代表本地控制台终端，tty1-tty6本地字符界面，tty7图形界面 pts/0-255虚拟终端（远程登录，远程终端）\n\nSTAT  进程状态  R：运行 S：睡眠 T：停止s：包含子进程+：位于后台\n\nSTART 该进程的启动时间 \n\nTIME   该进程占用CPU的运算时间\n\nCOMMAND　产生该进程的命令名\n\n--------------\n\n`pstree` :树形进程展示 \n\n##### -p 显示进程PID（详情）\n\n##### -u 显示进程所属用户(USER)\n\n`top`: 系统健康状况\n\n默认每三秒更新一次 默认CPU占用率排序\n\n当前时间|运行时间|用户|平均负载load average： 1min 5min 15min\n总数| 状态（运行、睡眠、停止、僵尸：正在停止但是没有完全停止）\nCPU | 用户us| 系统sy|  改变过优先级的用户ni|空闲率id|  等待输入/输出wa|硬中断hi |软中断si| 虚拟时间st（steal time）\n\n|MEM（物理内存KB） |总total |空闲free| 使用used | 缓冲buff/cache  \n|SWAP（交换分区KB）|总total |空闲free| 使用used | \n\n-d  每隔几秒更新一次\n\n?h：交互模式帮助\n\nP：CPU使用率排序（默认）\n\nM：内存使用率排序\n\nN：PID排序\n\nq：退出\n\n`uptime`: 显示启动时间和平均负载(top命令的第一行)(`w`也可以看到此信息,还有用户信息)()\n\n`kill`: 杀死进程(-l参数:查看信号) \n\n##### kill –l进程ID\n\nkill [-1重启] [-9强制] 进程ID\n\n`killall`: 进程名  \n\n`pkill`: 进程名\n\npkill  -t 终端号（TTY） 按终端号剔除用户（w显示用户）\n\n`nice`:优先级\n\n\n`renice`:优先级\n\n#### CPU\n\n总核数 = 物理CPU个数 X 每颗物理CPU的核数 \n\n总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数\n\n查看物理CPU个数\ncat /proc/cpuinfo| grep \"physical id\"| sort| uniq| wc -l\n\n查看每个物理CPU中core的个数(即核数)\n\ncat /proc/cpuinfo| grep \"cpu cores\"| uniq\n\n查看逻辑CPU的个数\n\ncat /proc/cpuinfo| grep \"processor\"| wc -l\n\n查看CPU信息（型号）\ncat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\n\n#### 磁盘\n\n挂载卸载：`mount` `umount` \n\n\n磁盘空间：\n`du` estimates and displays the disk space used by files\n`df`  df -h 查看存储大小\n\n`dmesg`\n\n##### dmesg 开机内核监测信息 | grep CPU\n\n`free`\n\n##### free 查看内存-b –k –m –g\n\n`parted` `sfdisk` `fdisk` \n\n`mkfs` \n\n`floppy` \n\n## 工作\n\n`jobs`: 列出所有正在运行的任务\n\n`fg`: 恢复任务，前台运行该任务(foreground)\n\n`bg`: 将任务放到后台运行(background)\n\n`Ctrl+Z`: 暂停当前任务,和`bg`类似\n\n`命令后加 &`: 将任务放到后台运行\n\n`suspend`: 暂停shell\n\n## 定时任务、任务控制   \n\n`crond`: 定时任务\n\ncrond后台守护d  cron\n\nservice crond restart重启服务\n\nchkconfig crond on检查是否启动\n\n`crontab`: 循环定时任务\n\n-----\n\n##### -e 编辑定时任务\n\n##### -l 查看任务\n\n##### -r 删除当前用户的所有任务\n\n----\n\n\\*  \\*  \\*  \\*  \\*  command\n\n一个小时当中的第几分钟0-59\n\n一天当中的第几个小时0-23\n\n一个月当中的第几天1-31\n\n一年中的的第几个月1-12\n\n一周当中的第几天0-7（0、7代表星期天）\n\n\\* 任意时间\n\n, 一个不连续的时间\n\n\\- 连续的时间范围\n\n*/n 每隔n执行\n\n`sleep`: ()\n\n`watch`: ()\n\n`at`: ()\n\n## 服务\n\n\n正常情况下，使用绝对路径  /etc/init.d  启动脚本位置\n\nRed Hat `service` `ntsysv` \n\n默认启动项：`chkconfig` \n\n\nsystemctl enable xxx-service\nsystemctl list-unit-files |  grep enabled\n\n开机自启动\n新建一个脚本zookeeper\n为新建的脚本zookeeper添加可执行权限，命令是:chmod +x zookeeper\n把zookeeper这个脚本添加到开机启动项里面，命令是： chkconfig --add zookeeper\n如果想看看是否添加成功，命令是：chkconfig --list\n\n\n## 安装软件\n\nRed Hat `rpm` `yum`   rpm -ivh xxxx.rpm ; yum install\n\nDebian `dpkg` `aptitude`\n\n\n[安装软件](http://muxiaobai.github.io/2017/09/17/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%933/)\n\n##附件\n\n`cal`: 日历(Calendar)\n\n`date`: 日期 修改时间并同步到硬件上 date -s \"2018-12-03 16:10:10\" & hwclock --systohc\n\n`dc`:计算器\n\n`expr`:计算器\n\n\n## 登录、注销和关机\n\n`shutdown`: \n\n##### -r 重启\n\n##### -h 关机\n\n`logout`\n\n`exit`\n\n","source":"_posts/Linux-基础命令总结2.md","raw":"---\ntitle: Linux 基础命令总结2\ndate: 2016-07-07 13:02:34\ntags: [基础命令,系统]\ncategories: Linux\ndescription: \"用户，网络(端口占用等)、服务(自启动)、系统环境、权限、进程、任务调度、工作\"\n---\n\n## 打印、输出\n\n#### 打印\n\n`lpr`  `lpq` `lprm`\n\n#### 输出\n\n`echo`  `printf` `yes` `seq` `clear`\n<!--more-->\n## 用户、主机环境 \n\n#### 用户\n\n`logname`: 登录名\n\n`whoami`: 当前有效的用户名\n\n`id`: pid和gid\n\n`who`: 详细列出所有登录用户，看谁正在使用，展示IP\n\n`users`: 简单列出所有登录用户\n\n`finger`: 打印用户信息\n\n`last`: 确定之前谁在什么时候登录这台主机，历史登录用户\n\n#### 主机\n\n`printenv`:打印环境变量\n\n`uname`: 系统内核信息（Unix name）\n\n##### -a 所有 \n\n##### –r内核版本（release） \n\n##### -s内核名称\n\n`hostname`:系统主机名\n\n----\n\n-s, --short           short host name\n\n-a, --alias           alias names\n\n-i, --ip-address      addresses for the hostname  \n\n-I, --all-ip-addresses all addresses for the host\n\n-f, --fqdn, --long    long host name (FQDN)\n\n-A, --all-fqdns        all long host names (FQDNs)\n\n-d, --domain          DNS domain name `dominname` \n\n-y, --yp, --nis       NIS/YP domainname   `dnsdominname` `ypdominname` `nisdominname`\n\n-F, --file            read hostname or NIS domainname from given file   \n\n-----\n\n`history` 历史命令\n\n## 权限(目录和文件)和用户，组\n\n\n#### rwx权限 读写执行\n\n >所有者 所属者 其他人\n\n默认：`umask` \n\n改变权限：`chmod` `chown` `chgrp`\n\n#### 高级权限管理ACL SODO 文件特殊权限\n\n##### ACL权限(解决用户身份不够的情况)(目录和文件)\n \n >首先要看ACL权限是否开启 `dumpe2fs -h /dev/xvdal`\n \n >`setfacl`\n \n >`getfacl` 文件或目录后面有一个[+]号\n \n >mask 用来控制最大权限\n\n##### sudo(超级用户root执行的系统命令)(命令)\n\n >visudo(修改/etc/sudoers.tmp文件)\n > sudo -l 查看被添加的权限\n\n##### SetUID SetGID Sticky BIT(文件特殊权限)(一般不使用)\n\n >SetUID 可执行文件有执行权限的时候才有SUID  USER[s=S+x]S无效\n \n >`chmod 4755[u+s] 文件名`\n \n >`chmod 0755[u-s] 文件名`\n \n >SetGID 可执行文件有执行权限的时候才有SGID,目录的rx权限  GROUP组身份是我\n \n >`chmod 2755[g+s] 文件名`\n \n >`chmod 0755[u-s] 文件名`\n \n >Sticky BIT  SBIT粘着位作用,仅针对目录，其他人有rwx权限 \n \n >`chmod 1755[o+t] 目录`\n \n >`chmod 0755[o-t] 目录`\n \n > i[insert插入]/a[append追加] 不可改变位权限\n \n >`chattr [a/i]`\n\n >`lsattr`\n\n`pam` `selinux`\n\n#### 用户：\n\n`useradd` `userdel` `usermod`\n\n#### 所属组：\n\n`groups` `groupadd` `groupdel` `groupmod`\n\n\nuseradd 用户名 -g 组名–G 组名-d Home 目录名-p 密码\n\nuseradd usenmae –g usenmae  –p ora123 \n\npasswd  username\n\ncat /etc/group  查看所有所属组\n\nchmod -R g+w \n\nchown -R bid:bids /home/newname  把/home/newname的所有者改为bid，所属组改为bids\n\n\n\n\n## 网络和连接登录\n\n`arp`: 硬件地址(IP ----> MAC地址)\n\n`traceroute`: 到某一个地址的路由信息\n\n`route`: 路由表\n\n`ifconfig`: 配置网络信息\n\n`ping`: 检测网络畅通\n\n`host`: 检测分析域名是否正常\n\n`netstat`: 查看网络状态、端口状态 -tulp   -tnaop  ☆\n\n-a 端口\n-t tcp\n-u udp\n-l listener\n-p program name \n      \n      netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n\n解析：\n- CLOSED  //无连接是活动的或正在进行\n- LISTEN  //服务器在等待进入呼叫\n- SYN_RECV  //一个连接请求已经到达，等待确认\n- SYN_SENT  //应用已经开始，打开一个连接\n- ESTABLISHED  //正常数据传输状态/当前并发连接数\n- FIN_WAIT1  //应用说它已经完成\n- FIN_WAIT2  //另一边已同意释放\n- ITMED_WAIT  //等待所有分组死掉\n- CLOSING  //两边同时尝试关闭\n- TIME_WAIT  //另一边已初始化一个释放\n- LAST_ACK  //等待所有分组死掉\n\n`ip`: iproute2中的命令(以上所有命令基本上都可以用这个命令来使用)\n\n`net`: 无\n\n`msg`:禁用\n\n`nbtstat`:  无\n\n`wget`: 下载资源\n\n`curl` : \n\n远程连接：`ssh` `scp` `sftp` `telnet`(一般禁用) `ftp`(不常用)\n\n`sz` file 下载文件到本机\n\n#### 端口占用6中方法\n\nss -tnlp  \nnetstat\nlsof\nfuser \nnmap (NetWork Mapper) 网络监测和安全审计工具，可能无此命令\nsystemctl systemd系统的控制管理器和服务管理器 可能无此命令\n\n\nnetstat -tlnaop\n\n-c 字符串  -u 用户名  -p pid\n\n\nlsof  进程打开或使用、调用的文件信息☆\n\nlsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000\n\n## 进程、系统资源(磁盘)\n\n#### 进程\n\n`ps`: 查看进程\n\n##### aux BSD\n\n##### -el Linux\n-----\nps命令常用用法（方便查看系统进程）\n\n- 1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。\n- 2）ps -A 显示所有进程。\n- 3）ps -c列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。\n- 4）ps -e 此参数的效果和指定\"A\"参数相同。\n- 5）ps e 列出程序时，显示每个程序所使用的环境变量。\n- 6）ps f 用ASCII字符显示树状结构，表达程序间的相互关系。\n- 7）ps -H 显示树状结构，表示程序间的相互关系。\n- 8）ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。\n- 9）ps s 采用程序信号的格式显示程序状况。\n- 10）ps S 列出程序时，包括已中断的子程序资料。\n- 11）ps -t<终端机编号> 　指定终端机编号，并列出属于该终端机的程序的状况。\n- 12）ps u 　以用户为主的格式来显示程序状况。\n- 13）ps x 　显示所有程序，不以终端机来区分。\n\n最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。\n\nps -ef | grep tomcat 查看tomcat进程☆\n\n\n##### 检查tomcat/nginx 并发数，连接数等\n\n内部的应用级别的：\nserver {\n    listen  *:80 default_server;\n    server_name *.jiloc.com jiloc.com;\n    location /ngx_status   {\n        stub_status on;\n        access_log off;\n        #allow 127.0.0.1;\n        #deny all;\n    }\n}\n\ncurl http://127.0.0.1/ngx_status\n\n浏览器 http://127.0.0.1/jStatus\n\n\n\n外部的，命令级别的：\n\n可查看所有建立连接的详细记录: netstat -nat | grep ESTABLISHED|wc  \n\nnetstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n\nps -ef|grep tomcat\n\n查看tomcat的线程数: ps -Lf pid|wc -l\n查看tomcat的并发数: netstat -an|grep pid |awk '{count[$6]++} END{for (i in count) print(i,count[i])}'\n\n\n[Linux 下Web服务器 Nginx 状态监控 查看nginx当前并发 连接 请求状态](https://www.jiloc.com/42193.html)\n[linux进程、线程状态 tomcat线程数 并发数查看](https://blog.csdn.net/wngua/article/details/70904991)\n[inux查看连接数，并发数](http://duanfei.iteye.com/blog/1894387)\n\n---------\n\n##### 输出信息\n\n--------\nUSER 该进程由哪个用户产生的\n\nPID 该进程ID号\n\n%CPU  该进程占用CPU资源的百分比\n\n%MEM  该进程占用物理内存资源的百分比\n\nVSZ 该进程占用虚拟内存大小，单位KB\n\nRSS 该进程占用实际物理内存的大小，单位KB\n\nTTY ？内核调用，该进程在哪一个终端上运行的，tty1-tty7代表本地控制台终端，tty1-tty6本地字符界面，tty7图形界面 pts/0-255虚拟终端（远程登录，远程终端）\n\nSTAT  进程状态  R：运行 S：睡眠 T：停止s：包含子进程+：位于后台\n\nSTART 该进程的启动时间 \n\nTIME   该进程占用CPU的运算时间\n\nCOMMAND　产生该进程的命令名\n\n--------------\n\n`pstree` :树形进程展示 \n\n##### -p 显示进程PID（详情）\n\n##### -u 显示进程所属用户(USER)\n\n`top`: 系统健康状况\n\n默认每三秒更新一次 默认CPU占用率排序\n\n当前时间|运行时间|用户|平均负载load average： 1min 5min 15min\n总数| 状态（运行、睡眠、停止、僵尸：正在停止但是没有完全停止）\nCPU | 用户us| 系统sy|  改变过优先级的用户ni|空闲率id|  等待输入/输出wa|硬中断hi |软中断si| 虚拟时间st（steal time）\n\n|MEM（物理内存KB） |总total |空闲free| 使用used | 缓冲buff/cache  \n|SWAP（交换分区KB）|总total |空闲free| 使用used | \n\n-d  每隔几秒更新一次\n\n?h：交互模式帮助\n\nP：CPU使用率排序（默认）\n\nM：内存使用率排序\n\nN：PID排序\n\nq：退出\n\n`uptime`: 显示启动时间和平均负载(top命令的第一行)(`w`也可以看到此信息,还有用户信息)()\n\n`kill`: 杀死进程(-l参数:查看信号) \n\n##### kill –l进程ID\n\nkill [-1重启] [-9强制] 进程ID\n\n`killall`: 进程名  \n\n`pkill`: 进程名\n\npkill  -t 终端号（TTY） 按终端号剔除用户（w显示用户）\n\n`nice`:优先级\n\n\n`renice`:优先级\n\n#### CPU\n\n总核数 = 物理CPU个数 X 每颗物理CPU的核数 \n\n总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数\n\n查看物理CPU个数\ncat /proc/cpuinfo| grep \"physical id\"| sort| uniq| wc -l\n\n查看每个物理CPU中core的个数(即核数)\n\ncat /proc/cpuinfo| grep \"cpu cores\"| uniq\n\n查看逻辑CPU的个数\n\ncat /proc/cpuinfo| grep \"processor\"| wc -l\n\n查看CPU信息（型号）\ncat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\n\n#### 磁盘\n\n挂载卸载：`mount` `umount` \n\n\n磁盘空间：\n`du` estimates and displays the disk space used by files\n`df`  df -h 查看存储大小\n\n`dmesg`\n\n##### dmesg 开机内核监测信息 | grep CPU\n\n`free`\n\n##### free 查看内存-b –k –m –g\n\n`parted` `sfdisk` `fdisk` \n\n`mkfs` \n\n`floppy` \n\n## 工作\n\n`jobs`: 列出所有正在运行的任务\n\n`fg`: 恢复任务，前台运行该任务(foreground)\n\n`bg`: 将任务放到后台运行(background)\n\n`Ctrl+Z`: 暂停当前任务,和`bg`类似\n\n`命令后加 &`: 将任务放到后台运行\n\n`suspend`: 暂停shell\n\n## 定时任务、任务控制   \n\n`crond`: 定时任务\n\ncrond后台守护d  cron\n\nservice crond restart重启服务\n\nchkconfig crond on检查是否启动\n\n`crontab`: 循环定时任务\n\n-----\n\n##### -e 编辑定时任务\n\n##### -l 查看任务\n\n##### -r 删除当前用户的所有任务\n\n----\n\n\\*  \\*  \\*  \\*  \\*  command\n\n一个小时当中的第几分钟0-59\n\n一天当中的第几个小时0-23\n\n一个月当中的第几天1-31\n\n一年中的的第几个月1-12\n\n一周当中的第几天0-7（0、7代表星期天）\n\n\\* 任意时间\n\n, 一个不连续的时间\n\n\\- 连续的时间范围\n\n*/n 每隔n执行\n\n`sleep`: ()\n\n`watch`: ()\n\n`at`: ()\n\n## 服务\n\n\n正常情况下，使用绝对路径  /etc/init.d  启动脚本位置\n\nRed Hat `service` `ntsysv` \n\n默认启动项：`chkconfig` \n\n\nsystemctl enable xxx-service\nsystemctl list-unit-files |  grep enabled\n\n开机自启动\n新建一个脚本zookeeper\n为新建的脚本zookeeper添加可执行权限，命令是:chmod +x zookeeper\n把zookeeper这个脚本添加到开机启动项里面，命令是： chkconfig --add zookeeper\n如果想看看是否添加成功，命令是：chkconfig --list\n\n\n## 安装软件\n\nRed Hat `rpm` `yum`   rpm -ivh xxxx.rpm ; yum install\n\nDebian `dpkg` `aptitude`\n\n\n[安装软件](http://muxiaobai.github.io/2017/09/17/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%933/)\n\n##附件\n\n`cal`: 日历(Calendar)\n\n`date`: 日期 修改时间并同步到硬件上 date -s \"2018-12-03 16:10:10\" & hwclock --systohc\n\n`dc`:计算器\n\n`expr`:计算器\n\n\n## 登录、注销和关机\n\n`shutdown`: \n\n##### -r 重启\n\n##### -h 关机\n\n`logout`\n\n`exit`\n\n","slug":"Linux-基础命令总结2","published":1,"updated":"2019-04-10T08:29:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79k006iugv5uuwyrvjo","content":"<h2 id=\"打印、输出\"><a href=\"#打印、输出\" class=\"headerlink\" title=\"打印、输出\"></a>打印、输出</h2><h4 id=\"打印\"><a href=\"#打印\" class=\"headerlink\" title=\"打印\"></a>打印</h4><p><code>lpr</code>  <code>lpq</code> <code>lprm</code></p>\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p><code>echo</code>  <code>printf</code> <code>yes</code> <code>seq</code> <code>clear</code><br><a id=\"more\"></a></p>\n<h2 id=\"用户、主机环境\"><a href=\"#用户、主机环境\" class=\"headerlink\" title=\"用户、主机环境\"></a>用户、主机环境</h2><h4 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h4><p><code>logname</code>: 登录名</p>\n<p><code>whoami</code>: 当前有效的用户名</p>\n<p><code>id</code>: pid和gid</p>\n<p><code>who</code>: 详细列出所有登录用户，看谁正在使用，展示IP</p>\n<p><code>users</code>: 简单列出所有登录用户</p>\n<p><code>finger</code>: 打印用户信息</p>\n<p><code>last</code>: 确定之前谁在什么时候登录这台主机，历史登录用户</p>\n<h4 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h4><p><code>printenv</code>:打印环境变量</p>\n<p><code>uname</code>: 系统内核信息（Unix name）</p>\n<h5 id=\"a-所有\"><a href=\"#a-所有\" class=\"headerlink\" title=\"-a 所有\"></a>-a 所有</h5><h5 id=\"–r内核版本（release）\"><a href=\"#–r内核版本（release）\" class=\"headerlink\" title=\"–r内核版本（release）\"></a>–r内核版本（release）</h5><h5 id=\"s内核名称\"><a href=\"#s内核名称\" class=\"headerlink\" title=\"-s内核名称\"></a>-s内核名称</h5><p><code>hostname</code>:系统主机名</p>\n<hr>\n<p>-s, –short           short host name</p>\n<p>-a, –alias           alias names</p>\n<p>-i, –ip-address      addresses for the hostname  </p>\n<p>-I, –all-ip-addresses all addresses for the host</p>\n<p>-f, –fqdn, –long    long host name (FQDN)</p>\n<p>-A, –all-fqdns        all long host names (FQDNs)</p>\n<p>-d, –domain          DNS domain name <code>dominname</code> </p>\n<p>-y, –yp, –nis       NIS/YP domainname   <code>dnsdominname</code> <code>ypdominname</code> <code>nisdominname</code></p>\n<p>-F, –file            read hostname or NIS domainname from given file   </p>\n<hr>\n<p><code>history</code> 历史命令</p>\n<h2 id=\"权限-目录和文件-和用户，组\"><a href=\"#权限-目录和文件-和用户，组\" class=\"headerlink\" title=\"权限(目录和文件)和用户，组\"></a>权限(目录和文件)和用户，组</h2><h4 id=\"rwx权限-读写执行\"><a href=\"#rwx权限-读写执行\" class=\"headerlink\" title=\"rwx权限 读写执行\"></a>rwx权限 读写执行</h4><blockquote>\n<p>所有者 所属者 其他人</p>\n</blockquote>\n<p>默认：<code>umask</code> </p>\n<p>改变权限：<code>chmod</code> <code>chown</code> <code>chgrp</code></p>\n<h4 id=\"高级权限管理ACL-SODO-文件特殊权限\"><a href=\"#高级权限管理ACL-SODO-文件特殊权限\" class=\"headerlink\" title=\"高级权限管理ACL SODO 文件特殊权限\"></a>高级权限管理ACL SODO 文件特殊权限</h4><h5 id=\"ACL权限-解决用户身份不够的情况-目录和文件\"><a href=\"#ACL权限-解决用户身份不够的情况-目录和文件\" class=\"headerlink\" title=\"ACL权限(解决用户身份不够的情况)(目录和文件)\"></a>ACL权限(解决用户身份不够的情况)(目录和文件)</h5><blockquote>\n<p>首先要看ACL权限是否开启 <code>dumpe2fs -h /dev/xvdal</code></p>\n</blockquote>\n<blockquote>\n<p><code>setfacl</code></p>\n</blockquote>\n<blockquote>\n<p><code>getfacl</code> 文件或目录后面有一个[+]号</p>\n</blockquote>\n<blockquote>\n<p>mask 用来控制最大权限</p>\n</blockquote>\n<h5 id=\"sudo-超级用户root执行的系统命令-命令\"><a href=\"#sudo-超级用户root执行的系统命令-命令\" class=\"headerlink\" title=\"sudo(超级用户root执行的系统命令)(命令)\"></a>sudo(超级用户root执行的系统命令)(命令)</h5><blockquote>\n<p>visudo(修改/etc/sudoers.tmp文件)<br>sudo -l 查看被添加的权限</p>\n</blockquote>\n<h5 id=\"SetUID-SetGID-Sticky-BIT-文件特殊权限-一般不使用\"><a href=\"#SetUID-SetGID-Sticky-BIT-文件特殊权限-一般不使用\" class=\"headerlink\" title=\"SetUID SetGID Sticky BIT(文件特殊权限)(一般不使用)\"></a>SetUID SetGID Sticky BIT(文件特殊权限)(一般不使用)</h5><blockquote>\n<p>SetUID 可执行文件有执行权限的时候才有SUID  USER[s=S+x]S无效</p>\n</blockquote>\n<blockquote>\n<p><code>chmod 4755[u+s] 文件名</code></p>\n</blockquote>\n<blockquote>\n<p><code>chmod 0755[u-s] 文件名</code></p>\n</blockquote>\n<blockquote>\n<p>SetGID 可执行文件有执行权限的时候才有SGID,目录的rx权限  GROUP组身份是我</p>\n</blockquote>\n<blockquote>\n<p><code>chmod 2755[g+s] 文件名</code></p>\n</blockquote>\n<blockquote>\n<p><code>chmod 0755[u-s] 文件名</code></p>\n</blockquote>\n<blockquote>\n<p>Sticky BIT  SBIT粘着位作用,仅针对目录，其他人有rwx权限 </p>\n</blockquote>\n<blockquote>\n<p><code>chmod 1755[o+t] 目录</code></p>\n</blockquote>\n<blockquote>\n<p><code>chmod 0755[o-t] 目录</code></p>\n</blockquote>\n<blockquote>\n<p>i[insert插入]/a[append追加] 不可改变位权限</p>\n</blockquote>\n<blockquote>\n<p><code>chattr [a/i]</code></p>\n</blockquote>\n<blockquote>\n<p><code>lsattr</code></p>\n</blockquote>\n<p><code>pam</code> <code>selinux</code></p>\n<h4 id=\"用户：\"><a href=\"#用户：\" class=\"headerlink\" title=\"用户：\"></a>用户：</h4><p><code>useradd</code> <code>userdel</code> <code>usermod</code></p>\n<h4 id=\"所属组：\"><a href=\"#所属组：\" class=\"headerlink\" title=\"所属组：\"></a>所属组：</h4><p><code>groups</code> <code>groupadd</code> <code>groupdel</code> <code>groupmod</code></p>\n<p>useradd 用户名 -g 组名–G 组名-d Home 目录名-p 密码</p>\n<p>useradd usenmae –g usenmae  –p ora123 </p>\n<p>passwd  username</p>\n<p>cat /etc/group  查看所有所属组</p>\n<p>chmod -R g+w </p>\n<p>chown -R bid:bids /home/newname  把/home/newname的所有者改为bid，所属组改为bids</p>\n<h2 id=\"网络和连接登录\"><a href=\"#网络和连接登录\" class=\"headerlink\" title=\"网络和连接登录\"></a>网络和连接登录</h2><p><code>arp</code>: 硬件地址(IP —-&gt; MAC地址)</p>\n<p><code>traceroute</code>: 到某一个地址的路由信息</p>\n<p><code>route</code>: 路由表</p>\n<p><code>ifconfig</code>: 配置网络信息</p>\n<p><code>ping</code>: 检测网络畅通</p>\n<p><code>host</code>: 检测分析域名是否正常</p>\n<p><code>netstat</code>: 查看网络状态、端口状态 -tulp   -tnaop  ☆</p>\n<p>-a 端口<br>-t tcp<br>-u udp<br>-l listener<br>-p program name </p>\n<pre><code>netstat -n | awk &apos;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&apos;\n</code></pre><p>解析：</p>\n<ul>\n<li>CLOSED  //无连接是活动的或正在进行</li>\n<li>LISTEN  //服务器在等待进入呼叫</li>\n<li>SYN_RECV  //一个连接请求已经到达，等待确认</li>\n<li>SYN_SENT  //应用已经开始，打开一个连接</li>\n<li>ESTABLISHED  //正常数据传输状态/当前并发连接数</li>\n<li>FIN_WAIT1  //应用说它已经完成</li>\n<li>FIN_WAIT2  //另一边已同意释放</li>\n<li>ITMED_WAIT  //等待所有分组死掉</li>\n<li>CLOSING  //两边同时尝试关闭</li>\n<li>TIME_WAIT  //另一边已初始化一个释放</li>\n<li>LAST_ACK  //等待所有分组死掉</li>\n</ul>\n<p><code>ip</code>: iproute2中的命令(以上所有命令基本上都可以用这个命令来使用)</p>\n<p><code>net</code>: 无</p>\n<p><code>msg</code>:禁用</p>\n<p><code>nbtstat</code>:  无</p>\n<p><code>wget</code>: 下载资源</p>\n<p><code>curl</code> : </p>\n<p>远程连接：<code>ssh</code> <code>scp</code> <code>sftp</code> <code>telnet</code>(一般禁用) <code>ftp</code>(不常用)</p>\n<p><code>sz</code> file 下载文件到本机</p>\n<h4 id=\"端口占用6中方法\"><a href=\"#端口占用6中方法\" class=\"headerlink\" title=\"端口占用6中方法\"></a>端口占用6中方法</h4><p>ss -tnlp<br>netstat<br>lsof<br>fuser<br>nmap (NetWork Mapper) 网络监测和安全审计工具，可能无此命令<br>systemctl systemd系统的控制管理器和服务管理器 可能无此命令</p>\n<p>netstat -tlnaop</p>\n<p>-c 字符串  -u 用户名  -p pid</p>\n<p>lsof  进程打开或使用、调用的文件信息☆</p>\n<p>lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p>\n<h2 id=\"进程、系统资源-磁盘\"><a href=\"#进程、系统资源-磁盘\" class=\"headerlink\" title=\"进程、系统资源(磁盘)\"></a>进程、系统资源(磁盘)</h2><h4 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h4><p><code>ps</code>: 查看进程</p>\n<h5 id=\"aux-BSD\"><a href=\"#aux-BSD\" class=\"headerlink\" title=\"aux BSD\"></a>aux BSD</h5><h5 id=\"el-Linux\"><a href=\"#el-Linux\" class=\"headerlink\" title=\"-el Linux\"></a>-el Linux</h5><hr>\n<p>ps命令常用用法（方便查看系统进程）</p>\n<ul>\n<li>1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。</li>\n<li>2）ps -A 显示所有进程。</li>\n<li>3）ps -c列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</li>\n<li>4）ps -e 此参数的效果和指定”A”参数相同。</li>\n<li>5）ps e 列出程序时，显示每个程序所使用的环境变量。</li>\n<li>6）ps f 用ASCII字符显示树状结构，表达程序间的相互关系。</li>\n<li>7）ps -H 显示树状结构，表示程序间的相互关系。</li>\n<li>8）ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。</li>\n<li>9）ps s 采用程序信号的格式显示程序状况。</li>\n<li>10）ps S 列出程序时，包括已中断的子程序资料。</li>\n<li>11）ps -t&lt;终端机编号&gt; 　指定终端机编号，并列出属于该终端机的程序的状况。</li>\n<li>12）ps u 　以用户为主的格式来显示程序状况。</li>\n<li>13）ps x 　显示所有程序，不以终端机来区分。</li>\n</ul>\n<p>最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。</p>\n<p>ps -ef | grep tomcat 查看tomcat进程☆</p>\n<h5 id=\"检查tomcat-nginx-并发数，连接数等\"><a href=\"#检查tomcat-nginx-并发数，连接数等\" class=\"headerlink\" title=\"检查tomcat/nginx 并发数，连接数等\"></a>检查tomcat/nginx 并发数，连接数等</h5><p>内部的应用级别的：<br>server {<br>    listen  <em>:80 default_server;<br>    server_name </em>.jiloc.com jiloc.com;<br>    location /ngx_status   {<br>        stub_status on;<br>        access_log off;</p>\n<pre><code>    #allow 127.0.0.1;\n    #deny all;\n}\n</code></pre><p>}</p>\n<p>curl <a href=\"http://127.0.0.1/ngx_status\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/ngx_status</a></p>\n<p>浏览器 <a href=\"http://127.0.0.1/jStatus\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/jStatus</a></p>\n<p>外部的，命令级别的：</p>\n<p>可查看所有建立连接的详细记录: netstat -nat | grep ESTABLISHED|wc  </p>\n<p>netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</p>\n<p>ps -ef|grep tomcat</p>\n<p>查看tomcat的线程数: ps -Lf pid|wc -l<br>查看tomcat的并发数: netstat -an|grep pid |awk ‘{count[$6]++} END{for (i in count) print(i,count[i])}’</p>\n<p><a href=\"https://www.jiloc.com/42193.html\" target=\"_blank\" rel=\"noopener\">Linux 下Web服务器 Nginx 状态监控 查看nginx当前并发 连接 请求状态</a><br><a href=\"https://blog.csdn.net/wngua/article/details/70904991\" target=\"_blank\" rel=\"noopener\">linux进程、线程状态 tomcat线程数 并发数查看</a><br><a href=\"http://duanfei.iteye.com/blog/1894387\" target=\"_blank\" rel=\"noopener\">inux查看连接数，并发数</a></p>\n<hr>\n<h5 id=\"输出信息\"><a href=\"#输出信息\" class=\"headerlink\" title=\"输出信息\"></a>输出信息</h5><hr>\n<p>USER 该进程由哪个用户产生的</p>\n<p>PID 该进程ID号</p>\n<p>%CPU  该进程占用CPU资源的百分比</p>\n<p>%MEM  该进程占用物理内存资源的百分比</p>\n<p>VSZ 该进程占用虚拟内存大小，单位KB</p>\n<p>RSS 该进程占用实际物理内存的大小，单位KB</p>\n<p>TTY ？内核调用，该进程在哪一个终端上运行的，tty1-tty7代表本地控制台终端，tty1-tty6本地字符界面，tty7图形界面 pts/0-255虚拟终端（远程登录，远程终端）</p>\n<p>STAT  进程状态  R：运行 S：睡眠 T：停止s：包含子进程+：位于后台</p>\n<p>START 该进程的启动时间 </p>\n<p>TIME   该进程占用CPU的运算时间</p>\n<p>COMMAND　产生该进程的命令名</p>\n<hr>\n<p><code>pstree</code> :树形进程展示 </p>\n<h5 id=\"p-显示进程PID（详情）\"><a href=\"#p-显示进程PID（详情）\" class=\"headerlink\" title=\"-p 显示进程PID（详情）\"></a>-p 显示进程PID（详情）</h5><h5 id=\"u-显示进程所属用户-USER\"><a href=\"#u-显示进程所属用户-USER\" class=\"headerlink\" title=\"-u 显示进程所属用户(USER)\"></a>-u 显示进程所属用户(USER)</h5><p><code>top</code>: 系统健康状况</p>\n<p>默认每三秒更新一次 默认CPU占用率排序</p>\n<p>当前时间|运行时间|用户|平均负载load average： 1min 5min 15min<br>总数| 状态（运行、睡眠、停止、僵尸：正在停止但是没有完全停止）<br>CPU | 用户us| 系统sy|  改变过优先级的用户ni|空闲率id|  等待输入/输出wa|硬中断hi |软中断si| 虚拟时间st（steal time）</p>\n<p>|MEM（物理内存KB） |总total |空闲free| 使用used | 缓冲buff/cache<br>|SWAP（交换分区KB）|总total |空闲free| 使用used | </p>\n<p>-d  每隔几秒更新一次</p>\n<p>?h：交互模式帮助</p>\n<p>P：CPU使用率排序（默认）</p>\n<p>M：内存使用率排序</p>\n<p>N：PID排序</p>\n<p>q：退出</p>\n<p><code>uptime</code>: 显示启动时间和平均负载(top命令的第一行)(<code>w</code>也可以看到此信息,还有用户信息)()</p>\n<p><code>kill</code>: 杀死进程(-l参数:查看信号) </p>\n<h5 id=\"kill-–l进程ID\"><a href=\"#kill-–l进程ID\" class=\"headerlink\" title=\"kill –l进程ID\"></a>kill –l进程ID</h5><p>kill [-1重启] [-9强制] 进程ID</p>\n<p><code>killall</code>: 进程名  </p>\n<p><code>pkill</code>: 进程名</p>\n<p>pkill  -t 终端号（TTY） 按终端号剔除用户（w显示用户）</p>\n<p><code>nice</code>:优先级</p>\n<p><code>renice</code>:优先级</p>\n<h4 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h4><p>总核数 = 物理CPU个数 X 每颗物理CPU的核数 </p>\n<p>总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</p>\n<p>查看物理CPU个数<br>cat /proc/cpuinfo| grep “physical id”| sort| uniq| wc -l</p>\n<p>查看每个物理CPU中core的个数(即核数)</p>\n<p>cat /proc/cpuinfo| grep “cpu cores”| uniq</p>\n<p>查看逻辑CPU的个数</p>\n<p>cat /proc/cpuinfo| grep “processor”| wc -l</p>\n<p>查看CPU信息（型号）<br>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</p>\n<h4 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h4><p>挂载卸载：<code>mount</code> <code>umount</code> </p>\n<p>磁盘空间：<br><code>du</code> estimates and displays the disk space used by files<br><code>df</code>  df -h 查看存储大小</p>\n<p><code>dmesg</code></p>\n<h5 id=\"dmesg-开机内核监测信息-grep-CPU\"><a href=\"#dmesg-开机内核监测信息-grep-CPU\" class=\"headerlink\" title=\"dmesg 开机内核监测信息 | grep CPU\"></a>dmesg 开机内核监测信息 | grep CPU</h5><p><code>free</code></p>\n<h5 id=\"free-查看内存-b-–k-–m-–g\"><a href=\"#free-查看内存-b-–k-–m-–g\" class=\"headerlink\" title=\"free 查看内存-b –k –m –g\"></a>free 查看内存-b –k –m –g</h5><p><code>parted</code> <code>sfdisk</code> <code>fdisk</code> </p>\n<p><code>mkfs</code> </p>\n<p><code>floppy</code> </p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><code>jobs</code>: 列出所有正在运行的任务</p>\n<p><code>fg</code>: 恢复任务，前台运行该任务(foreground)</p>\n<p><code>bg</code>: 将任务放到后台运行(background)</p>\n<p><code>Ctrl+Z</code>: 暂停当前任务,和<code>bg</code>类似</p>\n<p><code>命令后加 &amp;</code>: 将任务放到后台运行</p>\n<p><code>suspend</code>: 暂停shell</p>\n<h2 id=\"定时任务、任务控制\"><a href=\"#定时任务、任务控制\" class=\"headerlink\" title=\"定时任务、任务控制\"></a>定时任务、任务控制</h2><p><code>crond</code>: 定时任务</p>\n<p>crond后台守护d  cron</p>\n<p>service crond restart重启服务</p>\n<p>chkconfig crond on检查是否启动</p>\n<p><code>crontab</code>: 循环定时任务</p>\n<hr>\n<h5 id=\"e-编辑定时任务\"><a href=\"#e-编辑定时任务\" class=\"headerlink\" title=\"-e 编辑定时任务\"></a>-e 编辑定时任务</h5><h5 id=\"l-查看任务\"><a href=\"#l-查看任务\" class=\"headerlink\" title=\"-l 查看任务\"></a>-l 查看任务</h5><h5 id=\"r-删除当前用户的所有任务\"><a href=\"#r-删除当前用户的所有任务\" class=\"headerlink\" title=\"-r 删除当前用户的所有任务\"></a>-r 删除当前用户的所有任务</h5><hr>\n<p>*  *  *  *  *  command</p>\n<p>一个小时当中的第几分钟0-59</p>\n<p>一天当中的第几个小时0-23</p>\n<p>一个月当中的第几天1-31</p>\n<p>一年中的的第几个月1-12</p>\n<p>一周当中的第几天0-7（0、7代表星期天）</p>\n<p>* 任意时间</p>\n<p>, 一个不连续的时间</p>\n<p>- 连续的时间范围</p>\n<p>*/n 每隔n执行</p>\n<p><code>sleep</code>: ()</p>\n<p><code>watch</code>: ()</p>\n<p><code>at</code>: ()</p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>正常情况下，使用绝对路径  /etc/init.d  启动脚本位置</p>\n<p>Red Hat <code>service</code> <code>ntsysv</code> </p>\n<p>默认启动项：<code>chkconfig</code> </p>\n<p>systemctl enable xxx-service<br>systemctl list-unit-files |  grep enabled</p>\n<p>开机自启动<br>新建一个脚本zookeeper<br>为新建的脚本zookeeper添加可执行权限，命令是:chmod +x zookeeper<br>把zookeeper这个脚本添加到开机启动项里面，命令是： chkconfig –add zookeeper<br>如果想看看是否添加成功，命令是：chkconfig –list</p>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>Red Hat <code>rpm</code> <code>yum</code>   rpm -ivh xxxx.rpm ; yum install</p>\n<p>Debian <code>dpkg</code> <code>aptitude</code></p>\n<p><a href=\"http://muxiaobai.github.io/2017/09/17/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%933/\">安装软件</a></p>\n<p>##附件</p>\n<p><code>cal</code>: 日历(Calendar)</p>\n<p><code>date</code>: 日期 修改时间并同步到硬件上 date -s “2018-12-03 16:10:10” &amp; hwclock –systohc</p>\n<p><code>dc</code>:计算器</p>\n<p><code>expr</code>:计算器</p>\n<h2 id=\"登录、注销和关机\"><a href=\"#登录、注销和关机\" class=\"headerlink\" title=\"登录、注销和关机\"></a>登录、注销和关机</h2><p><code>shutdown</code>: </p>\n<h5 id=\"r-重启\"><a href=\"#r-重启\" class=\"headerlink\" title=\"-r 重启\"></a>-r 重启</h5><h5 id=\"h-关机\"><a href=\"#h-关机\" class=\"headerlink\" title=\"-h 关机\"></a>-h 关机</h5><p><code>logout</code></p>\n<p><code>exit</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"打印、输出\"><a href=\"#打印、输出\" class=\"headerlink\" title=\"打印、输出\"></a>打印、输出</h2><h4 id=\"打印\"><a href=\"#打印\" class=\"headerlink\" title=\"打印\"></a>打印</h4><p><code>lpr</code>  <code>lpq</code> <code>lprm</code></p>\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p><code>echo</code>  <code>printf</code> <code>yes</code> <code>seq</code> <code>clear</code><br></p>","more":"<p></p>\n<h2 id=\"用户、主机环境\"><a href=\"#用户、主机环境\" class=\"headerlink\" title=\"用户、主机环境\"></a>用户、主机环境</h2><h4 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h4><p><code>logname</code>: 登录名</p>\n<p><code>whoami</code>: 当前有效的用户名</p>\n<p><code>id</code>: pid和gid</p>\n<p><code>who</code>: 详细列出所有登录用户，看谁正在使用，展示IP</p>\n<p><code>users</code>: 简单列出所有登录用户</p>\n<p><code>finger</code>: 打印用户信息</p>\n<p><code>last</code>: 确定之前谁在什么时候登录这台主机，历史登录用户</p>\n<h4 id=\"主机\"><a href=\"#主机\" class=\"headerlink\" title=\"主机\"></a>主机</h4><p><code>printenv</code>:打印环境变量</p>\n<p><code>uname</code>: 系统内核信息（Unix name）</p>\n<h5 id=\"a-所有\"><a href=\"#a-所有\" class=\"headerlink\" title=\"-a 所有\"></a>-a 所有</h5><h5 id=\"–r内核版本（release）\"><a href=\"#–r内核版本（release）\" class=\"headerlink\" title=\"–r内核版本（release）\"></a>–r内核版本（release）</h5><h5 id=\"s内核名称\"><a href=\"#s内核名称\" class=\"headerlink\" title=\"-s内核名称\"></a>-s内核名称</h5><p><code>hostname</code>:系统主机名</p>\n<hr>\n<p>-s, –short           short host name</p>\n<p>-a, –alias           alias names</p>\n<p>-i, –ip-address      addresses for the hostname  </p>\n<p>-I, –all-ip-addresses all addresses for the host</p>\n<p>-f, –fqdn, –long    long host name (FQDN)</p>\n<p>-A, –all-fqdns        all long host names (FQDNs)</p>\n<p>-d, –domain          DNS domain name <code>dominname</code> </p>\n<p>-y, –yp, –nis       NIS/YP domainname   <code>dnsdominname</code> <code>ypdominname</code> <code>nisdominname</code></p>\n<p>-F, –file            read hostname or NIS domainname from given file   </p>\n<hr>\n<p><code>history</code> 历史命令</p>\n<h2 id=\"权限-目录和文件-和用户，组\"><a href=\"#权限-目录和文件-和用户，组\" class=\"headerlink\" title=\"权限(目录和文件)和用户，组\"></a>权限(目录和文件)和用户，组</h2><h4 id=\"rwx权限-读写执行\"><a href=\"#rwx权限-读写执行\" class=\"headerlink\" title=\"rwx权限 读写执行\"></a>rwx权限 读写执行</h4><blockquote>\n<p>所有者 所属者 其他人</p>\n</blockquote>\n<p>默认：<code>umask</code> </p>\n<p>改变权限：<code>chmod</code> <code>chown</code> <code>chgrp</code></p>\n<h4 id=\"高级权限管理ACL-SODO-文件特殊权限\"><a href=\"#高级权限管理ACL-SODO-文件特殊权限\" class=\"headerlink\" title=\"高级权限管理ACL SODO 文件特殊权限\"></a>高级权限管理ACL SODO 文件特殊权限</h4><h5 id=\"ACL权限-解决用户身份不够的情况-目录和文件\"><a href=\"#ACL权限-解决用户身份不够的情况-目录和文件\" class=\"headerlink\" title=\"ACL权限(解决用户身份不够的情况)(目录和文件)\"></a>ACL权限(解决用户身份不够的情况)(目录和文件)</h5><blockquote>\n<p>首先要看ACL权限是否开启 <code>dumpe2fs -h /dev/xvdal</code></p>\n</blockquote>\n<blockquote>\n<p><code>setfacl</code></p>\n</blockquote>\n<blockquote>\n<p><code>getfacl</code> 文件或目录后面有一个[+]号</p>\n</blockquote>\n<blockquote>\n<p>mask 用来控制最大权限</p>\n</blockquote>\n<h5 id=\"sudo-超级用户root执行的系统命令-命令\"><a href=\"#sudo-超级用户root执行的系统命令-命令\" class=\"headerlink\" title=\"sudo(超级用户root执行的系统命令)(命令)\"></a>sudo(超级用户root执行的系统命令)(命令)</h5><blockquote>\n<p>visudo(修改/etc/sudoers.tmp文件)<br>sudo -l 查看被添加的权限</p>\n</blockquote>\n<h5 id=\"SetUID-SetGID-Sticky-BIT-文件特殊权限-一般不使用\"><a href=\"#SetUID-SetGID-Sticky-BIT-文件特殊权限-一般不使用\" class=\"headerlink\" title=\"SetUID SetGID Sticky BIT(文件特殊权限)(一般不使用)\"></a>SetUID SetGID Sticky BIT(文件特殊权限)(一般不使用)</h5><blockquote>\n<p>SetUID 可执行文件有执行权限的时候才有SUID  USER[s=S+x]S无效</p>\n</blockquote>\n<blockquote>\n<p><code>chmod 4755[u+s] 文件名</code></p>\n</blockquote>\n<blockquote>\n<p><code>chmod 0755[u-s] 文件名</code></p>\n</blockquote>\n<blockquote>\n<p>SetGID 可执行文件有执行权限的时候才有SGID,目录的rx权限  GROUP组身份是我</p>\n</blockquote>\n<blockquote>\n<p><code>chmod 2755[g+s] 文件名</code></p>\n</blockquote>\n<blockquote>\n<p><code>chmod 0755[u-s] 文件名</code></p>\n</blockquote>\n<blockquote>\n<p>Sticky BIT  SBIT粘着位作用,仅针对目录，其他人有rwx权限 </p>\n</blockquote>\n<blockquote>\n<p><code>chmod 1755[o+t] 目录</code></p>\n</blockquote>\n<blockquote>\n<p><code>chmod 0755[o-t] 目录</code></p>\n</blockquote>\n<blockquote>\n<p>i[insert插入]/a[append追加] 不可改变位权限</p>\n</blockquote>\n<blockquote>\n<p><code>chattr [a/i]</code></p>\n</blockquote>\n<blockquote>\n<p><code>lsattr</code></p>\n</blockquote>\n<p><code>pam</code> <code>selinux</code></p>\n<h4 id=\"用户：\"><a href=\"#用户：\" class=\"headerlink\" title=\"用户：\"></a>用户：</h4><p><code>useradd</code> <code>userdel</code> <code>usermod</code></p>\n<h4 id=\"所属组：\"><a href=\"#所属组：\" class=\"headerlink\" title=\"所属组：\"></a>所属组：</h4><p><code>groups</code> <code>groupadd</code> <code>groupdel</code> <code>groupmod</code></p>\n<p>useradd 用户名 -g 组名–G 组名-d Home 目录名-p 密码</p>\n<p>useradd usenmae –g usenmae  –p ora123 </p>\n<p>passwd  username</p>\n<p>cat /etc/group  查看所有所属组</p>\n<p>chmod -R g+w </p>\n<p>chown -R bid:bids /home/newname  把/home/newname的所有者改为bid，所属组改为bids</p>\n<h2 id=\"网络和连接登录\"><a href=\"#网络和连接登录\" class=\"headerlink\" title=\"网络和连接登录\"></a>网络和连接登录</h2><p><code>arp</code>: 硬件地址(IP —-&gt; MAC地址)</p>\n<p><code>traceroute</code>: 到某一个地址的路由信息</p>\n<p><code>route</code>: 路由表</p>\n<p><code>ifconfig</code>: 配置网络信息</p>\n<p><code>ping</code>: 检测网络畅通</p>\n<p><code>host</code>: 检测分析域名是否正常</p>\n<p><code>netstat</code>: 查看网络状态、端口状态 -tulp   -tnaop  ☆</p>\n<p>-a 端口<br>-t tcp<br>-u udp<br>-l listener<br>-p program name </p>\n<pre><code>netstat -n | awk &apos;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&apos;\n</code></pre><p>解析：</p>\n<ul>\n<li>CLOSED  //无连接是活动的或正在进行</li>\n<li>LISTEN  //服务器在等待进入呼叫</li>\n<li>SYN_RECV  //一个连接请求已经到达，等待确认</li>\n<li>SYN_SENT  //应用已经开始，打开一个连接</li>\n<li>ESTABLISHED  //正常数据传输状态/当前并发连接数</li>\n<li>FIN_WAIT1  //应用说它已经完成</li>\n<li>FIN_WAIT2  //另一边已同意释放</li>\n<li>ITMED_WAIT  //等待所有分组死掉</li>\n<li>CLOSING  //两边同时尝试关闭</li>\n<li>TIME_WAIT  //另一边已初始化一个释放</li>\n<li>LAST_ACK  //等待所有分组死掉</li>\n</ul>\n<p><code>ip</code>: iproute2中的命令(以上所有命令基本上都可以用这个命令来使用)</p>\n<p><code>net</code>: 无</p>\n<p><code>msg</code>:禁用</p>\n<p><code>nbtstat</code>:  无</p>\n<p><code>wget</code>: 下载资源</p>\n<p><code>curl</code> : </p>\n<p>远程连接：<code>ssh</code> <code>scp</code> <code>sftp</code> <code>telnet</code>(一般禁用) <code>ftp</code>(不常用)</p>\n<p><code>sz</code> file 下载文件到本机</p>\n<h4 id=\"端口占用6中方法\"><a href=\"#端口占用6中方法\" class=\"headerlink\" title=\"端口占用6中方法\"></a>端口占用6中方法</h4><p>ss -tnlp<br>netstat<br>lsof<br>fuser<br>nmap (NetWork Mapper) 网络监测和安全审计工具，可能无此命令<br>systemctl systemd系统的控制管理器和服务管理器 可能无此命令</p>\n<p>netstat -tlnaop</p>\n<p>-c 字符串  -u 用户名  -p pid</p>\n<p>lsof  进程打开或使用、调用的文件信息☆</p>\n<p>lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p>\n<h2 id=\"进程、系统资源-磁盘\"><a href=\"#进程、系统资源-磁盘\" class=\"headerlink\" title=\"进程、系统资源(磁盘)\"></a>进程、系统资源(磁盘)</h2><h4 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h4><p><code>ps</code>: 查看进程</p>\n<h5 id=\"aux-BSD\"><a href=\"#aux-BSD\" class=\"headerlink\" title=\"aux BSD\"></a>aux BSD</h5><h5 id=\"el-Linux\"><a href=\"#el-Linux\" class=\"headerlink\" title=\"-el Linux\"></a>-el Linux</h5><hr>\n<p>ps命令常用用法（方便查看系统进程）</p>\n<ul>\n<li>1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。</li>\n<li>2）ps -A 显示所有进程。</li>\n<li>3）ps -c列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</li>\n<li>4）ps -e 此参数的效果和指定”A”参数相同。</li>\n<li>5）ps e 列出程序时，显示每个程序所使用的环境变量。</li>\n<li>6）ps f 用ASCII字符显示树状结构，表达程序间的相互关系。</li>\n<li>7）ps -H 显示树状结构，表示程序间的相互关系。</li>\n<li>8）ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。</li>\n<li>9）ps s 采用程序信号的格式显示程序状况。</li>\n<li>10）ps S 列出程序时，包括已中断的子程序资料。</li>\n<li>11）ps -t&lt;终端机编号&gt; 　指定终端机编号，并列出属于该终端机的程序的状况。</li>\n<li>12）ps u 　以用户为主的格式来显示程序状况。</li>\n<li>13）ps x 　显示所有程序，不以终端机来区分。</li>\n</ul>\n<p>最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。</p>\n<p>ps -ef | grep tomcat 查看tomcat进程☆</p>\n<h5 id=\"检查tomcat-nginx-并发数，连接数等\"><a href=\"#检查tomcat-nginx-并发数，连接数等\" class=\"headerlink\" title=\"检查tomcat/nginx 并发数，连接数等\"></a>检查tomcat/nginx 并发数，连接数等</h5><p>内部的应用级别的：<br>server {<br>    listen  <em>:80 default_server;<br>    server_name </em>.jiloc.com jiloc.com;<br>    location /ngx_status   {<br>        stub_status on;<br>        access_log off;</p>\n<pre><code>    #allow 127.0.0.1;\n    #deny all;\n}\n</code></pre><p>}</p>\n<p>curl <a href=\"http://127.0.0.1/ngx_status\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/ngx_status</a></p>\n<p>浏览器 <a href=\"http://127.0.0.1/jStatus\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/jStatus</a></p>\n<p>外部的，命令级别的：</p>\n<p>可查看所有建立连接的详细记录: netstat -nat | grep ESTABLISHED|wc  </p>\n<p>netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</p>\n<p>ps -ef|grep tomcat</p>\n<p>查看tomcat的线程数: ps -Lf pid|wc -l<br>查看tomcat的并发数: netstat -an|grep pid |awk ‘{count[$6]++} END{for (i in count) print(i,count[i])}’</p>\n<p><a href=\"https://www.jiloc.com/42193.html\" target=\"_blank\" rel=\"noopener\">Linux 下Web服务器 Nginx 状态监控 查看nginx当前并发 连接 请求状态</a><br><a href=\"https://blog.csdn.net/wngua/article/details/70904991\" target=\"_blank\" rel=\"noopener\">linux进程、线程状态 tomcat线程数 并发数查看</a><br><a href=\"http://duanfei.iteye.com/blog/1894387\" target=\"_blank\" rel=\"noopener\">inux查看连接数，并发数</a></p>\n<hr>\n<h5 id=\"输出信息\"><a href=\"#输出信息\" class=\"headerlink\" title=\"输出信息\"></a>输出信息</h5><hr>\n<p>USER 该进程由哪个用户产生的</p>\n<p>PID 该进程ID号</p>\n<p>%CPU  该进程占用CPU资源的百分比</p>\n<p>%MEM  该进程占用物理内存资源的百分比</p>\n<p>VSZ 该进程占用虚拟内存大小，单位KB</p>\n<p>RSS 该进程占用实际物理内存的大小，单位KB</p>\n<p>TTY ？内核调用，该进程在哪一个终端上运行的，tty1-tty7代表本地控制台终端，tty1-tty6本地字符界面，tty7图形界面 pts/0-255虚拟终端（远程登录，远程终端）</p>\n<p>STAT  进程状态  R：运行 S：睡眠 T：停止s：包含子进程+：位于后台</p>\n<p>START 该进程的启动时间 </p>\n<p>TIME   该进程占用CPU的运算时间</p>\n<p>COMMAND　产生该进程的命令名</p>\n<hr>\n<p><code>pstree</code> :树形进程展示 </p>\n<h5 id=\"p-显示进程PID（详情）\"><a href=\"#p-显示进程PID（详情）\" class=\"headerlink\" title=\"-p 显示进程PID（详情）\"></a>-p 显示进程PID（详情）</h5><h5 id=\"u-显示进程所属用户-USER\"><a href=\"#u-显示进程所属用户-USER\" class=\"headerlink\" title=\"-u 显示进程所属用户(USER)\"></a>-u 显示进程所属用户(USER)</h5><p><code>top</code>: 系统健康状况</p>\n<p>默认每三秒更新一次 默认CPU占用率排序</p>\n<p>当前时间|运行时间|用户|平均负载load average： 1min 5min 15min<br>总数| 状态（运行、睡眠、停止、僵尸：正在停止但是没有完全停止）<br>CPU | 用户us| 系统sy|  改变过优先级的用户ni|空闲率id|  等待输入/输出wa|硬中断hi |软中断si| 虚拟时间st（steal time）</p>\n<p>|MEM（物理内存KB） |总total |空闲free| 使用used | 缓冲buff/cache<br>|SWAP（交换分区KB）|总total |空闲free| 使用used | </p>\n<p>-d  每隔几秒更新一次</p>\n<p>?h：交互模式帮助</p>\n<p>P：CPU使用率排序（默认）</p>\n<p>M：内存使用率排序</p>\n<p>N：PID排序</p>\n<p>q：退出</p>\n<p><code>uptime</code>: 显示启动时间和平均负载(top命令的第一行)(<code>w</code>也可以看到此信息,还有用户信息)()</p>\n<p><code>kill</code>: 杀死进程(-l参数:查看信号) </p>\n<h5 id=\"kill-–l进程ID\"><a href=\"#kill-–l进程ID\" class=\"headerlink\" title=\"kill –l进程ID\"></a>kill –l进程ID</h5><p>kill [-1重启] [-9强制] 进程ID</p>\n<p><code>killall</code>: 进程名  </p>\n<p><code>pkill</code>: 进程名</p>\n<p>pkill  -t 终端号（TTY） 按终端号剔除用户（w显示用户）</p>\n<p><code>nice</code>:优先级</p>\n<p><code>renice</code>:优先级</p>\n<h4 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h4><p>总核数 = 物理CPU个数 X 每颗物理CPU的核数 </p>\n<p>总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</p>\n<p>查看物理CPU个数<br>cat /proc/cpuinfo| grep “physical id”| sort| uniq| wc -l</p>\n<p>查看每个物理CPU中core的个数(即核数)</p>\n<p>cat /proc/cpuinfo| grep “cpu cores”| uniq</p>\n<p>查看逻辑CPU的个数</p>\n<p>cat /proc/cpuinfo| grep “processor”| wc -l</p>\n<p>查看CPU信息（型号）<br>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</p>\n<h4 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h4><p>挂载卸载：<code>mount</code> <code>umount</code> </p>\n<p>磁盘空间：<br><code>du</code> estimates and displays the disk space used by files<br><code>df</code>  df -h 查看存储大小</p>\n<p><code>dmesg</code></p>\n<h5 id=\"dmesg-开机内核监测信息-grep-CPU\"><a href=\"#dmesg-开机内核监测信息-grep-CPU\" class=\"headerlink\" title=\"dmesg 开机内核监测信息 | grep CPU\"></a>dmesg 开机内核监测信息 | grep CPU</h5><p><code>free</code></p>\n<h5 id=\"free-查看内存-b-–k-–m-–g\"><a href=\"#free-查看内存-b-–k-–m-–g\" class=\"headerlink\" title=\"free 查看内存-b –k –m –g\"></a>free 查看内存-b –k –m –g</h5><p><code>parted</code> <code>sfdisk</code> <code>fdisk</code> </p>\n<p><code>mkfs</code> </p>\n<p><code>floppy</code> </p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p><code>jobs</code>: 列出所有正在运行的任务</p>\n<p><code>fg</code>: 恢复任务，前台运行该任务(foreground)</p>\n<p><code>bg</code>: 将任务放到后台运行(background)</p>\n<p><code>Ctrl+Z</code>: 暂停当前任务,和<code>bg</code>类似</p>\n<p><code>命令后加 &amp;</code>: 将任务放到后台运行</p>\n<p><code>suspend</code>: 暂停shell</p>\n<h2 id=\"定时任务、任务控制\"><a href=\"#定时任务、任务控制\" class=\"headerlink\" title=\"定时任务、任务控制\"></a>定时任务、任务控制</h2><p><code>crond</code>: 定时任务</p>\n<p>crond后台守护d  cron</p>\n<p>service crond restart重启服务</p>\n<p>chkconfig crond on检查是否启动</p>\n<p><code>crontab</code>: 循环定时任务</p>\n<hr>\n<h5 id=\"e-编辑定时任务\"><a href=\"#e-编辑定时任务\" class=\"headerlink\" title=\"-e 编辑定时任务\"></a>-e 编辑定时任务</h5><h5 id=\"l-查看任务\"><a href=\"#l-查看任务\" class=\"headerlink\" title=\"-l 查看任务\"></a>-l 查看任务</h5><h5 id=\"r-删除当前用户的所有任务\"><a href=\"#r-删除当前用户的所有任务\" class=\"headerlink\" title=\"-r 删除当前用户的所有任务\"></a>-r 删除当前用户的所有任务</h5><hr>\n<p>*  *  *  *  *  command</p>\n<p>一个小时当中的第几分钟0-59</p>\n<p>一天当中的第几个小时0-23</p>\n<p>一个月当中的第几天1-31</p>\n<p>一年中的的第几个月1-12</p>\n<p>一周当中的第几天0-7（0、7代表星期天）</p>\n<p>* 任意时间</p>\n<p>, 一个不连续的时间</p>\n<p>- 连续的时间范围</p>\n<p>*/n 每隔n执行</p>\n<p><code>sleep</code>: ()</p>\n<p><code>watch</code>: ()</p>\n<p><code>at</code>: ()</p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>正常情况下，使用绝对路径  /etc/init.d  启动脚本位置</p>\n<p>Red Hat <code>service</code> <code>ntsysv</code> </p>\n<p>默认启动项：<code>chkconfig</code> </p>\n<p>systemctl enable xxx-service<br>systemctl list-unit-files |  grep enabled</p>\n<p>开机自启动<br>新建一个脚本zookeeper<br>为新建的脚本zookeeper添加可执行权限，命令是:chmod +x zookeeper<br>把zookeeper这个脚本添加到开机启动项里面，命令是： chkconfig –add zookeeper<br>如果想看看是否添加成功，命令是：chkconfig –list</p>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><p>Red Hat <code>rpm</code> <code>yum</code>   rpm -ivh xxxx.rpm ; yum install</p>\n<p>Debian <code>dpkg</code> <code>aptitude</code></p>\n<p><a href=\"http://muxiaobai.github.io/2017/09/17/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%933/\">安装软件</a></p>\n<p>##附件</p>\n<p><code>cal</code>: 日历(Calendar)</p>\n<p><code>date</code>: 日期 修改时间并同步到硬件上 date -s “2018-12-03 16:10:10” &amp; hwclock –systohc</p>\n<p><code>dc</code>:计算器</p>\n<p><code>expr</code>:计算器</p>\n<h2 id=\"登录、注销和关机\"><a href=\"#登录、注销和关机\" class=\"headerlink\" title=\"登录、注销和关机\"></a>登录、注销和关机</h2><p><code>shutdown</code>: </p>\n<h5 id=\"r-重启\"><a href=\"#r-重启\" class=\"headerlink\" title=\"-r 重启\"></a>-r 重启</h5><h5 id=\"h-关机\"><a href=\"#h-关机\" class=\"headerlink\" title=\"-h 关机\"></a>-h 关机</h5><p><code>logout</code></p>\n<p><code>exit</code></p>"},{"title":"Spring中的Session生命周期","description":"Hibernate的Session生命周期，以及Session在Spring中的使用，事务的Session范围","date":"2016-08-03T06:44:24.000Z","_content":"\n\n## Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。\n\t\n## 事务\n\n#### 事务相关的特性就不说了。ACID \n\n#### 事务必须在Session中。\nHibernate事例\n\n```\n\t\t// 实例化Configuration，\n\t\tConfiguration conf = new Configuration()\n\t\t// 不带参数的configure()方法默认加载hibernate.cfg.xml文件，\n\t\t// 如果传入abc.xml作为参数，则不再加载hibernate.cfg.xml，改为加载abc.xml\n\t\t\t.configure();\n\t\tServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()\n\t\t\t.applySettings(conf.getProperties()).build();\n\t\t// 以Configuration实例创建SessionFactory实例\n\t\tSessionFactory sf = conf.buildSessionFactory(serviceRegistry);\n\t\t// 创建Session\n\t\tSession sess = sf.openSession();\n\t\t// 开始事务\n\t\tTransaction tx = sess.beginTransaction();\n\t\tUser n = new User();\n\t\tn.setName(\"muxiaobai\");\n\t\tn.setPassword(\"sosiiillliii\");\n\t\t// 保存消息\n\t\tsess.save(n);\n\t\t// 提交事务\n\t\ttx.commit();\n\t\t// 关闭Session\n\t\tsess.close();\n\t\tsf.close();\n```\n提交Transaction的时候，Session还开启着，save()方法虽然使用的是Session对象。但是在提交事务之前，Session是不能关闭的。\n\napplicationContext.xml文件中(Spring文件)\n\n```\n<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.orm.hibernate5.HibernateTransactionManager\"\n\t\tp:sessionFactory-ref=\"sessionFactory\" />\n\n\t<!-- 配置事务增强处理Bean,指定事务管理器 -->\n\t<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n\t\t<tx:attributes>\n\t\t\t<tx:method name=\"get*\" read-only=\"true\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"find*\" read-only=\"true\"  propagation=\"REQUIRED\"/>\n\t\t\t<tx:method name=\"*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\n\t\t</tx:attributes>\n\t</tx:advice>\n\t<aop:config>\n\t\t<aop:pointcut id=\"Pointcut\" expression=\"execution(* *.*.Service.*.*.*(..))\" />\n\t\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"Pointcut\" />\n\t</aop:config>\n```\n先明白一点：事务是切在Service中的方法，为什么呢？Service中的方法是一个完整业务操作，然后被Action或者Servlet调用。\n事务为了保证一个业务场景的数据一致性，所以要切在Service中。\n\n用化学中的原子分子来解释就是：Dao属于原子性操作，Service属于分子性操作。就像你喝水一样，吸收的是水分子而不是原子？你喝的是氢原子、氧原子。还是喝得水分子。(这个地方原子并不是对应事务的原子性，要正确理解原子性)。\n\n一般情况下运用Spring的AOP来配置事务，但是此时的就牵扯到参数\"hibernate.current_session_context_class\"了，到下面再说。\n\n## Hibernate的Session在Spring中的常见配置\n\n#### Hibernate的Session的关闭与开启问题\n\n如果没有Spring,Hibernate会让我们手动管理Session，\n开启:**Session sess = sf.openSession();** 关闭：**sess.close();**这是比较好的，但是人嘛，总是懒嘛，所以就给Spring管理了，然后呢,我们就不想管它了，Spring就把Session给下面这个参数了\"hibernate.current_session_context_class\",然后使用者就只用**this.sessionFactory.getCurrentSession();**来获取Session，也不用处理关闭了，Spring处理了。\n\n就如没有Hibernate的时候，我们使用JDBC，JDBC会用者/能用好者，实际上比Hibernate的性能好很多，但是，开发效率，开发时间就比较慢了。另一个原因，人嘛，总是懒嘛，就使用框架来工作，实际上在大量数据的添加/更新上，还是使用JDBC更好一点。使用了Hibernate后，就不用管连接**Connection**了，而且还使用了连接池，**C3P0**，所以一般开发者（或者高效开发者）使用框架来工作，这也是工作的需要，时间，效率问题。说多了。\n\n#### hibernate.current_session_context_class\n\n重点来了，Spring到底是怎样控制Hibernate Session的生命周期或者叫范围的？\n\napplicationContext.xml文件中\n\n```\n<prop key=\"hibernate.current_session_context_class\">org.springframework.orm.hibernate5.SpringSessionContext</prop>\n#hibernate.current_session_context_class=thread/jta/managed/org.springframework.orm.hibernate5.SpringSessionContext\n```\nhibernate.current_session_context_class解释：\n![hibernate默认的三种session上下文](Spring中的Session生命周期/201608051337CurrentSessionContext.PNG)\n可以看到Hibernate下，CurrentSessionContext下面有三种上下文的实现， \tJTASessionContext、ThreadLocalSessionContext 、ManagedSessionContext。\n\n- org.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。\n\n- org.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。 \n\n- org.hibernate.context.ManagedSessionContext - 当前session通过当前执行的线程来跟踪和界定，但是需要静态方法来绑定和取消绑定Session。 \n\n因此被Spring管理的Session中也有这三种Context上下文。同时Spring也实现了CurrentSessionContext，见下图：\n\n![Spring对CurrentSessionContext的实现类SpringSessionContext](Spring中的Session生命周期/201608051345SpringSessionContext.PNG)\n要在配置文件里进行如下设置：\n\n如果使用的是本地事务（jdbc事务）\n\n<property name=\"hibernate.current_session_context_class\"\\>thread</property\\>\n\n如果使用的是全局事务（jta事务）\n\n<property name=\"hibernate.current_session_context_class\"\\>jta</property\\> \n\n\nhibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未 配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配 置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实 现类的全名，但那两个内置的实现可以使用简写，即\"jta\"和\"thread\"。\n\n附上两篇很好的解释。\n[hibernate.current_session_context_class属性配置](http://www.blogjava.net/wangxinsh55/archive/2012/10/16/389664.html)\n[hibernate的current_session_context_class配置](http://blog.csdn.net/baple/article/details/39957499)\n\n下面来看看Spring的SessionFactory是怎么获取Session的。\n\n我们在使用session的时候大都是这样得到的吧。\n\napplicationContext.xml\n\n```\n\t<bean id=\"sessionFactory\"\n\t\tclass=\"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"\n\t\tp:dataSource-ref=\"dataSource\">\n\t\t\t<property name=\"hibernateProperties\">\n\t\t\t<props>\n\t\t\t\t<prop key=\"hibernate.current_session_context_class\">${hibernate.current_session_context_class}</prop>\n\t\t\t</props>\n\t\t</property>\n\t</bean>\n```\n先来找\"hibernate.current_session_context_class\",在什么地方被注入，bean是SessionFactory，class是**org.springframework.orm.hibernate5.LocalSessionFactoryBean**我们发现其中并没有但是我们找到了这个**buildSessionFactory(LocalSessionFactoryBuilder sfb)**其中传递的参数LocalSessionFactoryBuilder\n![Spring中SessionFactory的实现类LocalSessionFactoryBean](Spring中的Session生命周期/201608051437LocalSessionFactoryBean.PNG)\n![LocalSessionFactoryBuilder](Spring中的Session生命周期/201608051454LocalSessionFactoryBuilder.PNG)\n然后就开心了，看到熟悉的东西了，**Environment.CURRENT_SESSION_CONTEXT_CLASS**.最终在AvailableSettings中找到CURRENT_SESSION_CONTEXT_CLASS.\n![CURRENT_SESSION_CONTEXT_CLASS](Spring中的Session生命周期/201608051457AvailableSettings.PNG)\n而回过头来看**Environment.CURRENT_SESSION_CONTEXT_CLASS**的值是：SpringSessionContext.class.getName()，如果我们没有写这个属性的话，默认就是SpringSessionContext。\n\napplicationContext.xml文件中\n\n```\n\t<bean id=\"baseDaoImpl\" abstract=\"true\"  lazy-init=\"true\" p:sessionFactory-ref=\"sessionFactory\" />\n\t<bean id=\"userDaoImpl\" class=\"DaoImpl.UserDaoImpl\" parent=\"baseDaoImpl\" />\n```\nBaseDaoImpl中会取得\n\n```\n\t/**\n\t * 依赖注入SessionFactory所需的setter方法\n\t * \n\t * @param sessionFactory\n\t */\n\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n\t\t\tthis.sessionFactory = sessionFactory;\n\t}\n\n\t/**\n\t * 取得Session.\n\t * \n\t * @return CurrentSession\n\t */\n\tpublic Session getSession() {\n\t\t  return this.sessionFactory.getCurrentSession();\n\t}\n\n```\n\n然后就用 **getCurrentSession** 得到Session并对应相应的上下文。\n\n但是**this.sessionFactory.getCurrentSession();**这个方法得到的session，会随着get开启,随着事务的提交而关闭。\n\n因此在SSH中就出现常见的问题，如下：\n#### 常见的几种问题\n##### AOP事务中Session的生命周期\n正常情况下，事务提交，Session关闭。\n##### \"org.hibernate.LazyInitializationException: could not initialize proxy - no Session\"问题\n##### \"org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: Model.User, no session or session was closed\"\n以上两种错误属于同一类，no Session\n\n解释一下：因为Session会随着事务的提交而关闭，但是内存中的对象并没有你要访问的属性，在你要访问的时候，就会出现no Session 或者Session closed等问题。\n但是，我们不可能把事务的范围扩大，因此就想着不让session关闭。在网上找到了这个openSessionInViewFilter。详解在下面。\n\n##### \"save is not valid without active transaction\" 问题\n正常情况下Hibernate没有问题，关键是整合Spring后，配置AOP，切面在Service，测试Dao的时候就出问题了，这个目前为止没有发现好的解决办法，我是在开发的时候Dao也配置事务，生产环境下去掉Dao事务。\n####  OpenSessionInViewFilter\n为了延长Session的生命周期，Spring中引入OpenSessionInviewFilter。\n\n在web.xml文件中添加如下代码\n\n```\n<filter>\n    <filter-name>openSessionInViewFilter</filter-name>\n    <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class>\n    <init-param>\n      <param-name>singleSession</param-name>\n      <param-value>true</param-value>\n    </init-param>\n    <init-param>\n      <param-name>sessionFactoryBean</param-name>\n      <param-value>sessionFactory</param-value>\n    </init-param>\n  </filter>\n  <filter-mapping>\n    <filter-name>openSessionInViewFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n\nOpenSessionInViewFilter是Spring提供的一个针对Hibernate的一个支持类，其主要意思是在发起一个页面请求时打开Hibernate的Session，一直保持这个Session，直到这个请求结束，具体是通过一个Filter来实现的。\n\n由于Hibernate引入了Lazy Load特性，使得脱离Hibernate的Session周期的对象如果再想通过getter方法取到其关联对象的值，Hibernate会抛出一个LazyLoad的Exception。所以为了解决这个问题，Spring引入了这个Filter，使得Hibernate的Session的生命周期变长。这样不论是Servlet、JSP还是Action都可以获取Session。\n\n[解决Hibernate的Session的关闭与开启问题](http://blog.csdn.net/a5489888/article/details/9015375)\n[OpenSessionInViewFilter的作用及原理](http://blog.csdn.net/ggibenben1314/article/details/46289411)\n\n","source":"_posts/Spring中的Session生命周期.md","raw":"---\ntitle: Spring中的Session生命周期\ntags:\n  - Session\n  - Hibernate\n  - Spring\ncategories: java\ndescription: Hibernate的Session生命周期，以及Session在Spring中的使用，事务的Session范围\ndate: 2016-08-03 14:44:24\n---\n\n\n## Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。\n\t\n## 事务\n\n#### 事务相关的特性就不说了。ACID \n\n#### 事务必须在Session中。\nHibernate事例\n\n```\n\t\t// 实例化Configuration，\n\t\tConfiguration conf = new Configuration()\n\t\t// 不带参数的configure()方法默认加载hibernate.cfg.xml文件，\n\t\t// 如果传入abc.xml作为参数，则不再加载hibernate.cfg.xml，改为加载abc.xml\n\t\t\t.configure();\n\t\tServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()\n\t\t\t.applySettings(conf.getProperties()).build();\n\t\t// 以Configuration实例创建SessionFactory实例\n\t\tSessionFactory sf = conf.buildSessionFactory(serviceRegistry);\n\t\t// 创建Session\n\t\tSession sess = sf.openSession();\n\t\t// 开始事务\n\t\tTransaction tx = sess.beginTransaction();\n\t\tUser n = new User();\n\t\tn.setName(\"muxiaobai\");\n\t\tn.setPassword(\"sosiiillliii\");\n\t\t// 保存消息\n\t\tsess.save(n);\n\t\t// 提交事务\n\t\ttx.commit();\n\t\t// 关闭Session\n\t\tsess.close();\n\t\tsf.close();\n```\n提交Transaction的时候，Session还开启着，save()方法虽然使用的是Session对象。但是在提交事务之前，Session是不能关闭的。\n\napplicationContext.xml文件中(Spring文件)\n\n```\n<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.orm.hibernate5.HibernateTransactionManager\"\n\t\tp:sessionFactory-ref=\"sessionFactory\" />\n\n\t<!-- 配置事务增强处理Bean,指定事务管理器 -->\n\t<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n\t\t<tx:attributes>\n\t\t\t<tx:method name=\"get*\" read-only=\"true\" propagation=\"REQUIRED\" />\n\t\t\t<tx:method name=\"find*\" read-only=\"true\"  propagation=\"REQUIRED\"/>\n\t\t\t<tx:method name=\"*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\n\t\t</tx:attributes>\n\t</tx:advice>\n\t<aop:config>\n\t\t<aop:pointcut id=\"Pointcut\" expression=\"execution(* *.*.Service.*.*.*(..))\" />\n\t\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"Pointcut\" />\n\t</aop:config>\n```\n先明白一点：事务是切在Service中的方法，为什么呢？Service中的方法是一个完整业务操作，然后被Action或者Servlet调用。\n事务为了保证一个业务场景的数据一致性，所以要切在Service中。\n\n用化学中的原子分子来解释就是：Dao属于原子性操作，Service属于分子性操作。就像你喝水一样，吸收的是水分子而不是原子？你喝的是氢原子、氧原子。还是喝得水分子。(这个地方原子并不是对应事务的原子性，要正确理解原子性)。\n\n一般情况下运用Spring的AOP来配置事务，但是此时的就牵扯到参数\"hibernate.current_session_context_class\"了，到下面再说。\n\n## Hibernate的Session在Spring中的常见配置\n\n#### Hibernate的Session的关闭与开启问题\n\n如果没有Spring,Hibernate会让我们手动管理Session，\n开启:**Session sess = sf.openSession();** 关闭：**sess.close();**这是比较好的，但是人嘛，总是懒嘛，所以就给Spring管理了，然后呢,我们就不想管它了，Spring就把Session给下面这个参数了\"hibernate.current_session_context_class\",然后使用者就只用**this.sessionFactory.getCurrentSession();**来获取Session，也不用处理关闭了，Spring处理了。\n\n就如没有Hibernate的时候，我们使用JDBC，JDBC会用者/能用好者，实际上比Hibernate的性能好很多，但是，开发效率，开发时间就比较慢了。另一个原因，人嘛，总是懒嘛，就使用框架来工作，实际上在大量数据的添加/更新上，还是使用JDBC更好一点。使用了Hibernate后，就不用管连接**Connection**了，而且还使用了连接池，**C3P0**，所以一般开发者（或者高效开发者）使用框架来工作，这也是工作的需要，时间，效率问题。说多了。\n\n#### hibernate.current_session_context_class\n\n重点来了，Spring到底是怎样控制Hibernate Session的生命周期或者叫范围的？\n\napplicationContext.xml文件中\n\n```\n<prop key=\"hibernate.current_session_context_class\">org.springframework.orm.hibernate5.SpringSessionContext</prop>\n#hibernate.current_session_context_class=thread/jta/managed/org.springframework.orm.hibernate5.SpringSessionContext\n```\nhibernate.current_session_context_class解释：\n![hibernate默认的三种session上下文](Spring中的Session生命周期/201608051337CurrentSessionContext.PNG)\n可以看到Hibernate下，CurrentSessionContext下面有三种上下文的实现， \tJTASessionContext、ThreadLocalSessionContext 、ManagedSessionContext。\n\n- org.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。\n\n- org.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。 \n\n- org.hibernate.context.ManagedSessionContext - 当前session通过当前执行的线程来跟踪和界定，但是需要静态方法来绑定和取消绑定Session。 \n\n因此被Spring管理的Session中也有这三种Context上下文。同时Spring也实现了CurrentSessionContext，见下图：\n\n![Spring对CurrentSessionContext的实现类SpringSessionContext](Spring中的Session生命周期/201608051345SpringSessionContext.PNG)\n要在配置文件里进行如下设置：\n\n如果使用的是本地事务（jdbc事务）\n\n<property name=\"hibernate.current_session_context_class\"\\>thread</property\\>\n\n如果使用的是全局事务（jta事务）\n\n<property name=\"hibernate.current_session_context_class\"\\>jta</property\\> \n\n\nhibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未 配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配 置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实 现类的全名，但那两个内置的实现可以使用简写，即\"jta\"和\"thread\"。\n\n附上两篇很好的解释。\n[hibernate.current_session_context_class属性配置](http://www.blogjava.net/wangxinsh55/archive/2012/10/16/389664.html)\n[hibernate的current_session_context_class配置](http://blog.csdn.net/baple/article/details/39957499)\n\n下面来看看Spring的SessionFactory是怎么获取Session的。\n\n我们在使用session的时候大都是这样得到的吧。\n\napplicationContext.xml\n\n```\n\t<bean id=\"sessionFactory\"\n\t\tclass=\"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"\n\t\tp:dataSource-ref=\"dataSource\">\n\t\t\t<property name=\"hibernateProperties\">\n\t\t\t<props>\n\t\t\t\t<prop key=\"hibernate.current_session_context_class\">${hibernate.current_session_context_class}</prop>\n\t\t\t</props>\n\t\t</property>\n\t</bean>\n```\n先来找\"hibernate.current_session_context_class\",在什么地方被注入，bean是SessionFactory，class是**org.springframework.orm.hibernate5.LocalSessionFactoryBean**我们发现其中并没有但是我们找到了这个**buildSessionFactory(LocalSessionFactoryBuilder sfb)**其中传递的参数LocalSessionFactoryBuilder\n![Spring中SessionFactory的实现类LocalSessionFactoryBean](Spring中的Session生命周期/201608051437LocalSessionFactoryBean.PNG)\n![LocalSessionFactoryBuilder](Spring中的Session生命周期/201608051454LocalSessionFactoryBuilder.PNG)\n然后就开心了，看到熟悉的东西了，**Environment.CURRENT_SESSION_CONTEXT_CLASS**.最终在AvailableSettings中找到CURRENT_SESSION_CONTEXT_CLASS.\n![CURRENT_SESSION_CONTEXT_CLASS](Spring中的Session生命周期/201608051457AvailableSettings.PNG)\n而回过头来看**Environment.CURRENT_SESSION_CONTEXT_CLASS**的值是：SpringSessionContext.class.getName()，如果我们没有写这个属性的话，默认就是SpringSessionContext。\n\napplicationContext.xml文件中\n\n```\n\t<bean id=\"baseDaoImpl\" abstract=\"true\"  lazy-init=\"true\" p:sessionFactory-ref=\"sessionFactory\" />\n\t<bean id=\"userDaoImpl\" class=\"DaoImpl.UserDaoImpl\" parent=\"baseDaoImpl\" />\n```\nBaseDaoImpl中会取得\n\n```\n\t/**\n\t * 依赖注入SessionFactory所需的setter方法\n\t * \n\t * @param sessionFactory\n\t */\n\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n\t\t\tthis.sessionFactory = sessionFactory;\n\t}\n\n\t/**\n\t * 取得Session.\n\t * \n\t * @return CurrentSession\n\t */\n\tpublic Session getSession() {\n\t\t  return this.sessionFactory.getCurrentSession();\n\t}\n\n```\n\n然后就用 **getCurrentSession** 得到Session并对应相应的上下文。\n\n但是**this.sessionFactory.getCurrentSession();**这个方法得到的session，会随着get开启,随着事务的提交而关闭。\n\n因此在SSH中就出现常见的问题，如下：\n#### 常见的几种问题\n##### AOP事务中Session的生命周期\n正常情况下，事务提交，Session关闭。\n##### \"org.hibernate.LazyInitializationException: could not initialize proxy - no Session\"问题\n##### \"org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: Model.User, no session or session was closed\"\n以上两种错误属于同一类，no Session\n\n解释一下：因为Session会随着事务的提交而关闭，但是内存中的对象并没有你要访问的属性，在你要访问的时候，就会出现no Session 或者Session closed等问题。\n但是，我们不可能把事务的范围扩大，因此就想着不让session关闭。在网上找到了这个openSessionInViewFilter。详解在下面。\n\n##### \"save is not valid without active transaction\" 问题\n正常情况下Hibernate没有问题，关键是整合Spring后，配置AOP，切面在Service，测试Dao的时候就出问题了，这个目前为止没有发现好的解决办法，我是在开发的时候Dao也配置事务，生产环境下去掉Dao事务。\n####  OpenSessionInViewFilter\n为了延长Session的生命周期，Spring中引入OpenSessionInviewFilter。\n\n在web.xml文件中添加如下代码\n\n```\n<filter>\n    <filter-name>openSessionInViewFilter</filter-name>\n    <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class>\n    <init-param>\n      <param-name>singleSession</param-name>\n      <param-value>true</param-value>\n    </init-param>\n    <init-param>\n      <param-name>sessionFactoryBean</param-name>\n      <param-value>sessionFactory</param-value>\n    </init-param>\n  </filter>\n  <filter-mapping>\n    <filter-name>openSessionInViewFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n\nOpenSessionInViewFilter是Spring提供的一个针对Hibernate的一个支持类，其主要意思是在发起一个页面请求时打开Hibernate的Session，一直保持这个Session，直到这个请求结束，具体是通过一个Filter来实现的。\n\n由于Hibernate引入了Lazy Load特性，使得脱离Hibernate的Session周期的对象如果再想通过getter方法取到其关联对象的值，Hibernate会抛出一个LazyLoad的Exception。所以为了解决这个问题，Spring引入了这个Filter，使得Hibernate的Session的生命周期变长。这样不论是Servlet、JSP还是Action都可以获取Session。\n\n[解决Hibernate的Session的关闭与开启问题](http://blog.csdn.net/a5489888/article/details/9015375)\n[OpenSessionInViewFilter的作用及原理](http://blog.csdn.net/ggibenben1314/article/details/46289411)\n\n","slug":"Spring中的Session生命周期","published":1,"updated":"2016-08-31T12:24:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79m006mugv53tedv4dv","content":"<h2 id=\"Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。\"><a href=\"#Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。\" class=\"headerlink\" title=\"Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。\"></a>Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。</h2><h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h4 id=\"事务相关的特性就不说了。ACID\"><a href=\"#事务相关的特性就不说了。ACID\" class=\"headerlink\" title=\"事务相关的特性就不说了。ACID\"></a>事务相关的特性就不说了。ACID</h4><h4 id=\"事务必须在Session中。\"><a href=\"#事务必须在Session中。\" class=\"headerlink\" title=\"事务必须在Session中。\"></a>事务必须在Session中。</h4><p>Hibernate事例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 实例化Configuration，</span><br><span class=\"line\">Configuration conf = new Configuration()</span><br><span class=\"line\">// 不带参数的configure()方法默认加载hibernate.cfg.xml文件，</span><br><span class=\"line\">// 如果传入abc.xml作为参数，则不再加载hibernate.cfg.xml，改为加载abc.xml</span><br><span class=\"line\">\t.configure();</span><br><span class=\"line\">ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()</span><br><span class=\"line\">\t.applySettings(conf.getProperties()).build();</span><br><span class=\"line\">// 以Configuration实例创建SessionFactory实例</span><br><span class=\"line\">SessionFactory sf = conf.buildSessionFactory(serviceRegistry);</span><br><span class=\"line\">// 创建Session</span><br><span class=\"line\">Session sess = sf.openSession();</span><br><span class=\"line\">// 开始事务</span><br><span class=\"line\">Transaction tx = sess.beginTransaction();</span><br><span class=\"line\">User n = new User();</span><br><span class=\"line\">n.setName(&quot;muxiaobai&quot;);</span><br><span class=\"line\">n.setPassword(&quot;sosiiillliii&quot;);</span><br><span class=\"line\">// 保存消息</span><br><span class=\"line\">sess.save(n);</span><br><span class=\"line\">// 提交事务</span><br><span class=\"line\">tx.commit();</span><br><span class=\"line\">// 关闭Session</span><br><span class=\"line\">sess.close();</span><br><span class=\"line\">sf.close();</span><br></pre></td></tr></table></figure>\n<p>提交Transaction的时候，Session还开启着，save()方法虽然使用的是Session对象。但是在提交事务之前，Session是不能关闭的。</p>\n<p>applicationContext.xml文件中(Spring文件)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;transactionManager&quot;</span><br><span class=\"line\">\t\tclass=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</span><br><span class=\"line\">\t\tp:sessionFactory-ref=&quot;sessionFactory&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 配置事务增强处理Bean,指定事务管理器 --&gt;</span><br><span class=\"line\">\t&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;tx:attributes&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;  propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;*&quot; isolation=&quot;DEFAULT&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/tx:attributes&gt;</span><br><span class=\"line\">\t&lt;/tx:advice&gt;</span><br><span class=\"line\">\t&lt;aop:config&gt;</span><br><span class=\"line\">\t\t&lt;aop:pointcut id=&quot;Pointcut&quot; expression=&quot;execution(* *.*.Service.*.*.*(..))&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;Pointcut&quot; /&gt;</span><br><span class=\"line\">\t&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>\n<p>先明白一点：事务是切在Service中的方法，为什么呢？Service中的方法是一个完整业务操作，然后被Action或者Servlet调用。<br>事务为了保证一个业务场景的数据一致性，所以要切在Service中。</p>\n<p>用化学中的原子分子来解释就是：Dao属于原子性操作，Service属于分子性操作。就像你喝水一样，吸收的是水分子而不是原子？你喝的是氢原子、氧原子。还是喝得水分子。(这个地方原子并不是对应事务的原子性，要正确理解原子性)。</p>\n<p>一般情况下运用Spring的AOP来配置事务，但是此时的就牵扯到参数”hibernate.current_session_context_class”了，到下面再说。</p>\n<h2 id=\"Hibernate的Session在Spring中的常见配置\"><a href=\"#Hibernate的Session在Spring中的常见配置\" class=\"headerlink\" title=\"Hibernate的Session在Spring中的常见配置\"></a>Hibernate的Session在Spring中的常见配置</h2><h4 id=\"Hibernate的Session的关闭与开启问题\"><a href=\"#Hibernate的Session的关闭与开启问题\" class=\"headerlink\" title=\"Hibernate的Session的关闭与开启问题\"></a>Hibernate的Session的关闭与开启问题</h4><p>如果没有Spring,Hibernate会让我们手动管理Session，<br>开启:<strong>Session sess = sf.openSession();</strong> 关闭：<strong>sess.close();</strong>这是比较好的，但是人嘛，总是懒嘛，所以就给Spring管理了，然后呢,我们就不想管它了，Spring就把Session给下面这个参数了”hibernate.current_session_context_class”,然后使用者就只用<strong>this.sessionFactory.getCurrentSession();</strong>来获取Session，也不用处理关闭了，Spring处理了。</p>\n<p>就如没有Hibernate的时候，我们使用JDBC，JDBC会用者/能用好者，实际上比Hibernate的性能好很多，但是，开发效率，开发时间就比较慢了。另一个原因，人嘛，总是懒嘛，就使用框架来工作，实际上在大量数据的添加/更新上，还是使用JDBC更好一点。使用了Hibernate后，就不用管连接<strong>Connection</strong>了，而且还使用了连接池，<strong>C3P0</strong>，所以一般开发者（或者高效开发者）使用框架来工作，这也是工作的需要，时间，效率问题。说多了。</p>\n<h4 id=\"hibernate-current-session-context-class\"><a href=\"#hibernate-current-session-context-class\" class=\"headerlink\" title=\"hibernate.current_session_context_class\"></a>hibernate.current_session_context_class</h4><p>重点来了，Spring到底是怎样控制Hibernate Session的生命周期或者叫范围的？</p>\n<p>applicationContext.xml文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;prop key=&quot;hibernate.current_session_context_class&quot;&gt;org.springframework.orm.hibernate5.SpringSessionContext&lt;/prop&gt;</span><br><span class=\"line\">#hibernate.current_session_context_class=thread/jta/managed/org.springframework.orm.hibernate5.SpringSessionContext</span><br></pre></td></tr></table></figure>\n<p>hibernate.current_session_context_class解释：<br><img src=\"/.io//201608051337CurrentSessionContext.PNG\" alt=\"hibernate默认的三种session上下文\"><br>可以看到Hibernate下，CurrentSessionContext下面有三种上下文的实现，     JTASessionContext、ThreadLocalSessionContext 、ManagedSessionContext。</p>\n<ul>\n<li><p>org.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。</p>\n</li>\n<li><p>org.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。 </p>\n</li>\n<li><p>org.hibernate.context.ManagedSessionContext - 当前session通过当前执行的线程来跟踪和界定，但是需要静态方法来绑定和取消绑定Session。 </p>\n</li>\n</ul>\n<p>因此被Spring管理的Session中也有这三种Context上下文。同时Spring也实现了CurrentSessionContext，见下图：</p>\n<p><img src=\"/.io//201608051345SpringSessionContext.PNG\" alt=\"Spring对CurrentSessionContext的实现类SpringSessionContext\"><br>要在配置文件里进行如下设置：</p>\n<p>如果使用的是本地事务（jdbc事务）</p>\n<p>&lt;property name=”hibernate.current_session_context_class”>thread&lt;/property></p>\n<p>如果使用的是全局事务（jta事务）</p>\n<p>&lt;property name=”hibernate.current_session_context_class”>jta&lt;/property> </p>\n<p>hibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未 配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配 置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实 现类的全名，但那两个内置的实现可以使用简写，即”jta”和”thread”。</p>\n<p>附上两篇很好的解释。<br><a href=\"http://www.blogjava.net/wangxinsh55/archive/2012/10/16/389664.html\" target=\"_blank\" rel=\"noopener\">hibernate.current_session_context_class属性配置</a><br><a href=\"http://blog.csdn.net/baple/article/details/39957499\" target=\"_blank\" rel=\"noopener\">hibernate的current_session_context_class配置</a></p>\n<p>下面来看看Spring的SessionFactory是怎么获取Session的。</p>\n<p>我们在使用session的时候大都是这样得到的吧。</p>\n<p>applicationContext.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;sessionFactory&quot;</span><br><span class=\"line\">\tclass=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;</span><br><span class=\"line\">\tp:dataSource-ref=&quot;dataSource&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;hibernateProperties&quot;&gt;</span><br><span class=\"line\">\t\t&lt;props&gt;</span><br><span class=\"line\">\t\t\t&lt;prop key=&quot;hibernate.current_session_context_class&quot;&gt;$&#123;hibernate.current_session_context_class&#125;&lt;/prop&gt;</span><br><span class=\"line\">\t\t&lt;/props&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>先来找”hibernate.current_session_context_class”,在什么地方被注入，bean是SessionFactory，class是<strong>org.springframework.orm.hibernate5.LocalSessionFactoryBean</strong>我们发现其中并没有但是我们找到了这个<strong>buildSessionFactory(LocalSessionFactoryBuilder sfb)</strong>其中传递的参数LocalSessionFactoryBuilder<br><img src=\"/.io//201608051437LocalSessionFactoryBean.PNG\" alt=\"Spring中SessionFactory的实现类LocalSessionFactoryBean\"><br><img src=\"/.io//201608051454LocalSessionFactoryBuilder.PNG\" alt=\"LocalSessionFactoryBuilder\"><br>然后就开心了，看到熟悉的东西了，<strong>Environment.CURRENT_SESSION_CONTEXT_CLASS</strong>.最终在AvailableSettings中找到CURRENT_SESSION_CONTEXT_CLASS.<br><img src=\"/.io//201608051457AvailableSettings.PNG\" alt=\"CURRENT_SESSION_CONTEXT_CLASS\"><br>而回过头来看<strong>Environment.CURRENT_SESSION_CONTEXT_CLASS</strong>的值是：SpringSessionContext.class.getName()，如果我们没有写这个属性的话，默认就是SpringSessionContext。</p>\n<p>applicationContext.xml文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;baseDaoImpl&quot; abstract=&quot;true&quot;  lazy-init=&quot;true&quot; p:sessionFactory-ref=&quot;sessionFactory&quot; /&gt;</span><br><span class=\"line\">&lt;bean id=&quot;userDaoImpl&quot; class=&quot;DaoImpl.UserDaoImpl&quot; parent=&quot;baseDaoImpl&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>BaseDaoImpl中会取得</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 依赖注入SessionFactory所需的setter方法</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @param sessionFactory</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void setSessionFactory(SessionFactory sessionFactory) &#123;</span><br><span class=\"line\">\t\tthis.sessionFactory = sessionFactory;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 取得Session.</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @return CurrentSession</span><br><span class=\"line\"> */</span><br><span class=\"line\">public Session getSession() &#123;</span><br><span class=\"line\">\t  return this.sessionFactory.getCurrentSession();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就用 <strong>getCurrentSession</strong> 得到Session并对应相应的上下文。</p>\n<p>但是<strong>this.sessionFactory.getCurrentSession();</strong>这个方法得到的session，会随着get开启,随着事务的提交而关闭。</p>\n<p>因此在SSH中就出现常见的问题，如下：</p>\n<h4 id=\"常见的几种问题\"><a href=\"#常见的几种问题\" class=\"headerlink\" title=\"常见的几种问题\"></a>常见的几种问题</h4><h5 id=\"AOP事务中Session的生命周期\"><a href=\"#AOP事务中Session的生命周期\" class=\"headerlink\" title=\"AOP事务中Session的生命周期\"></a>AOP事务中Session的生命周期</h5><p>正常情况下，事务提交，Session关闭。</p>\n<h5 id=\"“org-hibernate-LazyInitializationException-could-not-initialize-proxy-no-Session”问题\"><a href=\"#“org-hibernate-LazyInitializationException-could-not-initialize-proxy-no-Session”问题\" class=\"headerlink\" title=\"“org.hibernate.LazyInitializationException: could not initialize proxy - no Session”问题\"></a>“org.hibernate.LazyInitializationException: could not initialize proxy - no Session”问题</h5><h5 id=\"“org-hibernate-LazyInitializationException-failed-to-lazily-initialize-a-collection-of-role-Model-User-no-session-or-session-was-closed”\"><a href=\"#“org-hibernate-LazyInitializationException-failed-to-lazily-initialize-a-collection-of-role-Model-User-no-session-or-session-was-closed”\" class=\"headerlink\" title=\"“org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: Model.User, no session or session was closed”\"></a>“org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: Model.User, no session or session was closed”</h5><p>以上两种错误属于同一类，no Session</p>\n<p>解释一下：因为Session会随着事务的提交而关闭，但是内存中的对象并没有你要访问的属性，在你要访问的时候，就会出现no Session 或者Session closed等问题。<br>但是，我们不可能把事务的范围扩大，因此就想着不让session关闭。在网上找到了这个openSessionInViewFilter。详解在下面。</p>\n<h5 id=\"“save-is-not-valid-without-active-transaction”-问题\"><a href=\"#“save-is-not-valid-without-active-transaction”-问题\" class=\"headerlink\" title=\"“save is not valid without active transaction” 问题\"></a>“save is not valid without active transaction” 问题</h5><p>正常情况下Hibernate没有问题，关键是整合Spring后，配置AOP，切面在Service，测试Dao的时候就出问题了，这个目前为止没有发现好的解决办法，我是在开发的时候Dao也配置事务，生产环境下去掉Dao事务。</p>\n<h4 id=\"OpenSessionInViewFilter\"><a href=\"#OpenSessionInViewFilter\" class=\"headerlink\" title=\"OpenSessionInViewFilter\"></a>OpenSessionInViewFilter</h4><p>为了延长Session的生命周期，Spring中引入OpenSessionInviewFilter。</p>\n<p>在web.xml文件中添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;filter-class&gt;org.springframework.orm.hibernate5.support.OpenSessionInViewFilter&lt;/filter-class&gt;</span><br><span class=\"line\">    &lt;init-param&gt;</span><br><span class=\"line\">      &lt;param-name&gt;singleSession&lt;/param-name&gt;</span><br><span class=\"line\">      &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/init-param&gt;</span><br><span class=\"line\">    &lt;init-param&gt;</span><br><span class=\"line\">      &lt;param-name&gt;sessionFactoryBean&lt;/param-name&gt;</span><br><span class=\"line\">      &lt;param-value&gt;sessionFactory&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;/filter&gt;</span><br><span class=\"line\">  &lt;filter-mapping&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">  &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>OpenSessionInViewFilter是Spring提供的一个针对Hibernate的一个支持类，其主要意思是在发起一个页面请求时打开Hibernate的Session，一直保持这个Session，直到这个请求结束，具体是通过一个Filter来实现的。</p>\n<p>由于Hibernate引入了Lazy Load特性，使得脱离Hibernate的Session周期的对象如果再想通过getter方法取到其关联对象的值，Hibernate会抛出一个LazyLoad的Exception。所以为了解决这个问题，Spring引入了这个Filter，使得Hibernate的Session的生命周期变长。这样不论是Servlet、JSP还是Action都可以获取Session。</p>\n<p><a href=\"http://blog.csdn.net/a5489888/article/details/9015375\" target=\"_blank\" rel=\"noopener\">解决Hibernate的Session的关闭与开启问题</a><br><a href=\"http://blog.csdn.net/ggibenben1314/article/details/46289411\" target=\"_blank\" rel=\"noopener\">OpenSessionInViewFilter的作用及原理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。\"><a href=\"#Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。\" class=\"headerlink\" title=\"Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。\"></a>Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。</h2><h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><h4 id=\"事务相关的特性就不说了。ACID\"><a href=\"#事务相关的特性就不说了。ACID\" class=\"headerlink\" title=\"事务相关的特性就不说了。ACID\"></a>事务相关的特性就不说了。ACID</h4><h4 id=\"事务必须在Session中。\"><a href=\"#事务必须在Session中。\" class=\"headerlink\" title=\"事务必须在Session中。\"></a>事务必须在Session中。</h4><p>Hibernate事例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 实例化Configuration，</span><br><span class=\"line\">Configuration conf = new Configuration()</span><br><span class=\"line\">// 不带参数的configure()方法默认加载hibernate.cfg.xml文件，</span><br><span class=\"line\">// 如果传入abc.xml作为参数，则不再加载hibernate.cfg.xml，改为加载abc.xml</span><br><span class=\"line\">\t.configure();</span><br><span class=\"line\">ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()</span><br><span class=\"line\">\t.applySettings(conf.getProperties()).build();</span><br><span class=\"line\">// 以Configuration实例创建SessionFactory实例</span><br><span class=\"line\">SessionFactory sf = conf.buildSessionFactory(serviceRegistry);</span><br><span class=\"line\">// 创建Session</span><br><span class=\"line\">Session sess = sf.openSession();</span><br><span class=\"line\">// 开始事务</span><br><span class=\"line\">Transaction tx = sess.beginTransaction();</span><br><span class=\"line\">User n = new User();</span><br><span class=\"line\">n.setName(&quot;muxiaobai&quot;);</span><br><span class=\"line\">n.setPassword(&quot;sosiiillliii&quot;);</span><br><span class=\"line\">// 保存消息</span><br><span class=\"line\">sess.save(n);</span><br><span class=\"line\">// 提交事务</span><br><span class=\"line\">tx.commit();</span><br><span class=\"line\">// 关闭Session</span><br><span class=\"line\">sess.close();</span><br><span class=\"line\">sf.close();</span><br></pre></td></tr></table></figure>\n<p>提交Transaction的时候，Session还开启着，save()方法虽然使用的是Session对象。但是在提交事务之前，Session是不能关闭的。</p>\n<p>applicationContext.xml文件中(Spring文件)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;transactionManager&quot;</span><br><span class=\"line\">\t\tclass=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</span><br><span class=\"line\">\t\tp:sessionFactory-ref=&quot;sessionFactory&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 配置事务增强处理Bean,指定事务管理器 --&gt;</span><br><span class=\"line\">\t&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;tx:attributes&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;  propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;*&quot; isolation=&quot;DEFAULT&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/tx:attributes&gt;</span><br><span class=\"line\">\t&lt;/tx:advice&gt;</span><br><span class=\"line\">\t&lt;aop:config&gt;</span><br><span class=\"line\">\t\t&lt;aop:pointcut id=&quot;Pointcut&quot; expression=&quot;execution(* *.*.Service.*.*.*(..))&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;Pointcut&quot; /&gt;</span><br><span class=\"line\">\t&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>\n<p>先明白一点：事务是切在Service中的方法，为什么呢？Service中的方法是一个完整业务操作，然后被Action或者Servlet调用。<br>事务为了保证一个业务场景的数据一致性，所以要切在Service中。</p>\n<p>用化学中的原子分子来解释就是：Dao属于原子性操作，Service属于分子性操作。就像你喝水一样，吸收的是水分子而不是原子？你喝的是氢原子、氧原子。还是喝得水分子。(这个地方原子并不是对应事务的原子性，要正确理解原子性)。</p>\n<p>一般情况下运用Spring的AOP来配置事务，但是此时的就牵扯到参数”hibernate.current_session_context_class”了，到下面再说。</p>\n<h2 id=\"Hibernate的Session在Spring中的常见配置\"><a href=\"#Hibernate的Session在Spring中的常见配置\" class=\"headerlink\" title=\"Hibernate的Session在Spring中的常见配置\"></a>Hibernate的Session在Spring中的常见配置</h2><h4 id=\"Hibernate的Session的关闭与开启问题\"><a href=\"#Hibernate的Session的关闭与开启问题\" class=\"headerlink\" title=\"Hibernate的Session的关闭与开启问题\"></a>Hibernate的Session的关闭与开启问题</h4><p>如果没有Spring,Hibernate会让我们手动管理Session，<br>开启:<strong>Session sess = sf.openSession();</strong> 关闭：<strong>sess.close();</strong>这是比较好的，但是人嘛，总是懒嘛，所以就给Spring管理了，然后呢,我们就不想管它了，Spring就把Session给下面这个参数了”hibernate.current_session_context_class”,然后使用者就只用<strong>this.sessionFactory.getCurrentSession();</strong>来获取Session，也不用处理关闭了，Spring处理了。</p>\n<p>就如没有Hibernate的时候，我们使用JDBC，JDBC会用者/能用好者，实际上比Hibernate的性能好很多，但是，开发效率，开发时间就比较慢了。另一个原因，人嘛，总是懒嘛，就使用框架来工作，实际上在大量数据的添加/更新上，还是使用JDBC更好一点。使用了Hibernate后，就不用管连接<strong>Connection</strong>了，而且还使用了连接池，<strong>C3P0</strong>，所以一般开发者（或者高效开发者）使用框架来工作，这也是工作的需要，时间，效率问题。说多了。</p>\n<h4 id=\"hibernate-current-session-context-class\"><a href=\"#hibernate-current-session-context-class\" class=\"headerlink\" title=\"hibernate.current_session_context_class\"></a>hibernate.current_session_context_class</h4><p>重点来了，Spring到底是怎样控制Hibernate Session的生命周期或者叫范围的？</p>\n<p>applicationContext.xml文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;prop key=&quot;hibernate.current_session_context_class&quot;&gt;org.springframework.orm.hibernate5.SpringSessionContext&lt;/prop&gt;</span><br><span class=\"line\">#hibernate.current_session_context_class=thread/jta/managed/org.springframework.orm.hibernate5.SpringSessionContext</span><br></pre></td></tr></table></figure>\n<p>hibernate.current_session_context_class解释：<br><img src=\"/.io//201608051337CurrentSessionContext.PNG\" alt=\"hibernate默认的三种session上下文\"><br>可以看到Hibernate下，CurrentSessionContext下面有三种上下文的实现，     JTASessionContext、ThreadLocalSessionContext 、ManagedSessionContext。</p>\n<ul>\n<li><p>org.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。</p>\n</li>\n<li><p>org.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。 </p>\n</li>\n<li><p>org.hibernate.context.ManagedSessionContext - 当前session通过当前执行的线程来跟踪和界定，但是需要静态方法来绑定和取消绑定Session。 </p>\n</li>\n</ul>\n<p>因此被Spring管理的Session中也有这三种Context上下文。同时Spring也实现了CurrentSessionContext，见下图：</p>\n<p><img src=\"/.io//201608051345SpringSessionContext.PNG\" alt=\"Spring对CurrentSessionContext的实现类SpringSessionContext\"><br>要在配置文件里进行如下设置：</p>\n<p>如果使用的是本地事务（jdbc事务）</p>\n<p>&lt;property name=”hibernate.current_session_context_class”>thread&lt;/property></p>\n<p>如果使用的是全局事务（jta事务）</p>\n<p>&lt;property name=”hibernate.current_session_context_class”>jta&lt;/property> </p>\n<p>hibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未 配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配 置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实 现类的全名，但那两个内置的实现可以使用简写，即”jta”和”thread”。</p>\n<p>附上两篇很好的解释。<br><a href=\"http://www.blogjava.net/wangxinsh55/archive/2012/10/16/389664.html\" target=\"_blank\" rel=\"noopener\">hibernate.current_session_context_class属性配置</a><br><a href=\"http://blog.csdn.net/baple/article/details/39957499\" target=\"_blank\" rel=\"noopener\">hibernate的current_session_context_class配置</a></p>\n<p>下面来看看Spring的SessionFactory是怎么获取Session的。</p>\n<p>我们在使用session的时候大都是这样得到的吧。</p>\n<p>applicationContext.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;sessionFactory&quot;</span><br><span class=\"line\">\tclass=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;</span><br><span class=\"line\">\tp:dataSource-ref=&quot;dataSource&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;hibernateProperties&quot;&gt;</span><br><span class=\"line\">\t\t&lt;props&gt;</span><br><span class=\"line\">\t\t\t&lt;prop key=&quot;hibernate.current_session_context_class&quot;&gt;$&#123;hibernate.current_session_context_class&#125;&lt;/prop&gt;</span><br><span class=\"line\">\t\t&lt;/props&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>先来找”hibernate.current_session_context_class”,在什么地方被注入，bean是SessionFactory，class是<strong>org.springframework.orm.hibernate5.LocalSessionFactoryBean</strong>我们发现其中并没有但是我们找到了这个<strong>buildSessionFactory(LocalSessionFactoryBuilder sfb)</strong>其中传递的参数LocalSessionFactoryBuilder<br><img src=\"/.io//201608051437LocalSessionFactoryBean.PNG\" alt=\"Spring中SessionFactory的实现类LocalSessionFactoryBean\"><br><img src=\"/.io//201608051454LocalSessionFactoryBuilder.PNG\" alt=\"LocalSessionFactoryBuilder\"><br>然后就开心了，看到熟悉的东西了，<strong>Environment.CURRENT_SESSION_CONTEXT_CLASS</strong>.最终在AvailableSettings中找到CURRENT_SESSION_CONTEXT_CLASS.<br><img src=\"/.io//201608051457AvailableSettings.PNG\" alt=\"CURRENT_SESSION_CONTEXT_CLASS\"><br>而回过头来看<strong>Environment.CURRENT_SESSION_CONTEXT_CLASS</strong>的值是：SpringSessionContext.class.getName()，如果我们没有写这个属性的话，默认就是SpringSessionContext。</p>\n<p>applicationContext.xml文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;baseDaoImpl&quot; abstract=&quot;true&quot;  lazy-init=&quot;true&quot; p:sessionFactory-ref=&quot;sessionFactory&quot; /&gt;</span><br><span class=\"line\">&lt;bean id=&quot;userDaoImpl&quot; class=&quot;DaoImpl.UserDaoImpl&quot; parent=&quot;baseDaoImpl&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>BaseDaoImpl中会取得</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 依赖注入SessionFactory所需的setter方法</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @param sessionFactory</span><br><span class=\"line\"> */</span><br><span class=\"line\">public void setSessionFactory(SessionFactory sessionFactory) &#123;</span><br><span class=\"line\">\t\tthis.sessionFactory = sessionFactory;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 取得Session.</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @return CurrentSession</span><br><span class=\"line\"> */</span><br><span class=\"line\">public Session getSession() &#123;</span><br><span class=\"line\">\t  return this.sessionFactory.getCurrentSession();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就用 <strong>getCurrentSession</strong> 得到Session并对应相应的上下文。</p>\n<p>但是<strong>this.sessionFactory.getCurrentSession();</strong>这个方法得到的session，会随着get开启,随着事务的提交而关闭。</p>\n<p>因此在SSH中就出现常见的问题，如下：</p>\n<h4 id=\"常见的几种问题\"><a href=\"#常见的几种问题\" class=\"headerlink\" title=\"常见的几种问题\"></a>常见的几种问题</h4><h5 id=\"AOP事务中Session的生命周期\"><a href=\"#AOP事务中Session的生命周期\" class=\"headerlink\" title=\"AOP事务中Session的生命周期\"></a>AOP事务中Session的生命周期</h5><p>正常情况下，事务提交，Session关闭。</p>\n<h5 id=\"“org-hibernate-LazyInitializationException-could-not-initialize-proxy-no-Session”问题\"><a href=\"#“org-hibernate-LazyInitializationException-could-not-initialize-proxy-no-Session”问题\" class=\"headerlink\" title=\"“org.hibernate.LazyInitializationException: could not initialize proxy - no Session”问题\"></a>“org.hibernate.LazyInitializationException: could not initialize proxy - no Session”问题</h5><h5 id=\"“org-hibernate-LazyInitializationException-failed-to-lazily-initialize-a-collection-of-role-Model-User-no-session-or-session-was-closed”\"><a href=\"#“org-hibernate-LazyInitializationException-failed-to-lazily-initialize-a-collection-of-role-Model-User-no-session-or-session-was-closed”\" class=\"headerlink\" title=\"“org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: Model.User, no session or session was closed”\"></a>“org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: Model.User, no session or session was closed”</h5><p>以上两种错误属于同一类，no Session</p>\n<p>解释一下：因为Session会随着事务的提交而关闭，但是内存中的对象并没有你要访问的属性，在你要访问的时候，就会出现no Session 或者Session closed等问题。<br>但是，我们不可能把事务的范围扩大，因此就想着不让session关闭。在网上找到了这个openSessionInViewFilter。详解在下面。</p>\n<h5 id=\"“save-is-not-valid-without-active-transaction”-问题\"><a href=\"#“save-is-not-valid-without-active-transaction”-问题\" class=\"headerlink\" title=\"“save is not valid without active transaction” 问题\"></a>“save is not valid without active transaction” 问题</h5><p>正常情况下Hibernate没有问题，关键是整合Spring后，配置AOP，切面在Service，测试Dao的时候就出问题了，这个目前为止没有发现好的解决办法，我是在开发的时候Dao也配置事务，生产环境下去掉Dao事务。</p>\n<h4 id=\"OpenSessionInViewFilter\"><a href=\"#OpenSessionInViewFilter\" class=\"headerlink\" title=\"OpenSessionInViewFilter\"></a>OpenSessionInViewFilter</h4><p>为了延长Session的生命周期，Spring中引入OpenSessionInviewFilter。</p>\n<p>在web.xml文件中添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;filter-class&gt;org.springframework.orm.hibernate5.support.OpenSessionInViewFilter&lt;/filter-class&gt;</span><br><span class=\"line\">    &lt;init-param&gt;</span><br><span class=\"line\">      &lt;param-name&gt;singleSession&lt;/param-name&gt;</span><br><span class=\"line\">      &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/init-param&gt;</span><br><span class=\"line\">    &lt;init-param&gt;</span><br><span class=\"line\">      &lt;param-name&gt;sessionFactoryBean&lt;/param-name&gt;</span><br><span class=\"line\">      &lt;param-value&gt;sessionFactory&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;/filter&gt;</span><br><span class=\"line\">  &lt;filter-mapping&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">  &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>OpenSessionInViewFilter是Spring提供的一个针对Hibernate的一个支持类，其主要意思是在发起一个页面请求时打开Hibernate的Session，一直保持这个Session，直到这个请求结束，具体是通过一个Filter来实现的。</p>\n<p>由于Hibernate引入了Lazy Load特性，使得脱离Hibernate的Session周期的对象如果再想通过getter方法取到其关联对象的值，Hibernate会抛出一个LazyLoad的Exception。所以为了解决这个问题，Spring引入了这个Filter，使得Hibernate的Session的生命周期变长。这样不论是Servlet、JSP还是Action都可以获取Session。</p>\n<p><a href=\"http://blog.csdn.net/a5489888/article/details/9015375\" target=\"_blank\" rel=\"noopener\">解决Hibernate的Session的关闭与开启问题</a><br><a href=\"http://blog.csdn.net/ggibenben1314/article/details/46289411\" target=\"_blank\" rel=\"noopener\">OpenSessionInViewFilter的作用及原理</a></p>\n"},{"title":"Thinking in java 基础之I/O","date":"2016-06-25T01:57:56.000Z","description":"主要总结java.io包中的类结构作用！","_content":"## Thinking in java基础之 I/O\n\n#### 首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼\n![I/O类图](Thinking-in-java-基础之I-O/201606250959.jpg)\n<!--more-->\njava所有的IO操作都在java.io包之中进行定义，而且整个java.io包实际上就是五个类和一个接口：\n\n • 五个类：File、InputStream、OutputStream、Reader、Wirter\n\n • 一个接口：Serializable\n\n-------------------------------\n\n### 简介字符流和字节流，输入流和输出流\n\nJDK所提供的所有流类位于java.io包中，都分别继承自以下四种抽象流类。\n * InputStream：继承自InputStream的流都是用于向程序中输入数据的，且数据单位都是字节（8位）。\n\n* OutputStream：继承自OutputStream的流都是程序用于向外输出数据的，且数据单位都是字节（8位）。\n\n* Reader：继承自Reader的流都是用于向程序中输入数据的，且数据单位都是字符（16位）。\n\n* Writer：继承自Writer的流都是程序用于向外输出数据的，且数据单位都是字符（16位）。\n\n【输入和输出】是相对于【程序】而言的。以main()为例，main()就相当于程序，当使用输入(InputStream/Reader输入对应程序就是读取数据，当然是Reader)时，是从外界读取数据到main()中，【举例代码】。而输出则是，程序产生的结果输出(OutputStream/Writer输出就是写出，对应Writer)，可以输出到显示屏，控制台，文件系统等。\n【字节流和字符流】大部分文件（图片，视频，音乐等）都是使用字节存放的数据，因此，字节也是用的十分广泛的，但是字节在处理中文的时候，就没有字符流具有优势，因为中文字对应两个字节，而字符也对应两个字节，刚好能对应上，因此，如果有中文处理的时候，优先考虑使用字符流。\n主要的区别：\n字节流没有使用到缓冲区，而字符流使用了；\n处理各种数据都可以通过字节流完成，而在处理中文的时候使用字符流会更好。\n字节流和字符流的转换：（上代码）\n\n将字节输出流变为字符输出流 OutputStream→ Writer ：用OutputStreamWriter；\n将字节输入流变为字符输入流InputStream → Reader：用 InputStreamReader。\n\n### 文件操作/文件系统（File）（读文件，写文件 上代码）\n\n在整个java.io包之中，File类是唯一的一个与文件本身操作有关的类，所谓的文件本身指的是：文件的创建、删除、重命名、取得文件大小、修改日期。但是不包括文件内容，切记。\n```\npackage IO;\nimport java.io.File;\npublic class FileDemo {\n    public static void main(String[] args) {\n        String dirname = \"E:\"+File.separator+\"Demo\";\n          File f1 = new File(dirname);\n          if (f1.isDirectory()) {\n             System.out.println( \"Directory of \" + dirname);\n             String s[] = f1.list();\n             for (int i=0; i < s.length; i++) {\n                File f = new File(dirname + \"/\" + s[i]);\n                if (f.isDirectory()) {\n                   System.out.println(s[i] + \" is a directory\");\n                } else {\n                   System.out.println(s[i] + \" is a file\");\n                }\n             }\n          } else {\n             System.out.println(dirname + \" is not a directory\");\n        }\n    }\n}\n```\nDirectory of E:\\Demo\n\nAndroidDemo is a directory\n\neclipseDemo is a directory\n\nGitHubDemo is a directory\n\n我的电脑【E：/Demo】下面有三个文件目录，所以显示为directory。下面给出File类的方法File方法\n\n![I/O类图](Thinking-in-java-基础之I-O/20160625095901.png)\n\n#### 文件读取和文件输出\n\n - 文件输出\n```\nFileOutputStream\n\npackage IO;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class FileOutputStreamDemo {\npublic static void main(String[] args) throws IOException {\nFile file = new File(\"E:\" + File.separator + \"hellodemo\"\n\nFile.separator + \"test.txt\"); // 定义文件路径\nif (!file.getParentFile().exists()) { // 父路径不存在\nfile.getParentFile().mkdirs(); // 创建父路径\n}\nOutputStream output = new FileOutputStream(file); // 通过子类实例化父类\nString outputdata = \"Hello World\";// 要输出的数据\noutput.write(outputdata.getBytes()); // 输出数据，要将数据变为字节数组输出\noutput.close(); // 关闭资源\n}\n}\n```\n\n - FileWriter\n```\npackage IO;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\n\npublic class FileWriterDemo {\npublic static void main(String[] args) throws IOException {\nFile file = new File(\"E:\" + File.separator + \"hellodemo\"\n\nFile.separator + \"test.txt\"); // 定义文件路径\nif (!file.getParentFile().exists()) {\nfile.getParentFile().mkdirs();// 创建父目录\n}\nWriter out = new FileWriter(file);\nString data = \"Hello World\";\nout.write(data) ; // 直接输出字符串\nout.close() ;\n\n}\n}\n```\n\n - 文件输入\n\n```\n - FileInputStream\npackage IO;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class FileInputStreamDemo {\npublic static void main(String[] args) throws IOException {\nFile file = new File(\"E:\" + File.separator + \"hellodemo\"\n\nFile.separator + \"test.txt\"); // 定义文件路径\nif (file.exists()) { // 文件存在则可以读取\nInputStream input = new FileInputStream(file) ;\nbyte data[] = new byte[1024]; // 假设要读的长度是1024\nint foot = 0; // 操作data数组的脚标\nint temp = 0;\n// 第一步：temp = input.read()，读取一个单个字节，并且将内容给temp变量\n// 第二步：temp != -1，将接收到的temp的数值判断是否为-1，\n//如果为-1则表示退出循环，如果不是，则保存数据\nwhile ((temp = input.read()) != -1) {\ndata[foot++] = (byte) temp; // 保存读取进来的单个字节\n}\ninput.close();\nSystem.out.println(\"数据:【\" + new String(data, 0, foot) + \"】\");\n}else{\nSystem.out.println(\"文件不存在\");\n}\n\n}\n}\n```\n\n - FileReader\n\n```\npackage IO;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.Reader;\npublic class FileReaderDemo {\npublic static void main(String[] args) throws Exception {\nFile file = new File(\"E:\" + File.separator + \"hellodemo\"\n\nFile.separator + \"test.txt\"); // 定义文件路径\nif (file.exists()) {\nReader in = new FileReader(file); // 字符输入流\nchar data[] = new char[1024]; // 开辟数组\nint len = in.read(data); // 读取数据\nSystem.out.println(\"数据:【\" + new String(data, 0, len) + \"】\");\nin.close() ;\n}else{\nSystem.out.println(\"文件不存在\");\n}\n}\n}\n```\n\n 在工作中,IO的读取和输出是在所难免的。\n\n > 一定要好好掌握。\n\n### 打印流（输出）（PrintWriter字符）（PrintStream字节）\n\nSystem（输出err/out可以使用PrintStream的 print（）等方法  ，输入in可以使用InputStream的read()等方法）\n\n---------System.out →PrintStream \n\n---------System.err →PrintStream  \n\n---------System.in →InputStream （结合Scanner使用）\n\n>out/err/in由系统进行初始化【static】可以直接使用。\n\n### 序列化（Serializable）\n\n作用 ：对象序列化指的是可以将内存中的对象数据（对象属性），进行二进制数据保存，或者传输的一种操作，而如果要想完成这样的二进制操作，那么对象所在的类就必须实java.io.Serializable接口。\n\n需要的两个IO类ObjectInputStream（反序列化）、ObjectOutputStream（序列化）\n\n```\npackage IO;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport sun.print.resources.serviceui;\n\n@SuppressWarnings(\"serial\")\nclass Book implements Serializable{\n    private String title;\n    private Double price;\n    private  transient String content;//瞬时 不会被序列化\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public void setPrice(Double price) {\n        this.price = price;\n    }\n    public Double getPrice() {\n        return price;\n    }\n    public void setContent(String content) {\n        this.content = content;\n    }\n    public String getContent() {\n        return content;\n    }\n    @Override\n    public String toString() {\n        return \"Book [title=\" + title + \", price=\" + price + \", content=\" + content + \"]\";\n    }\n\n}\npublic class SerializableDemo {\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        ser();\n        //dser();\n\n    }\n    /*\n     *  序列化\n     */\n    public static void ser() throws FileNotFoundException, IOException{\n         Book book = new Book();\n         book.setPrice(12.8);\n         book.setTitle(\"admin\");\n        ObjectOutputStream oos = new ObjectOutputStream(\n                new FileOutputStream(new File(\"E:\" + File.separator + \"person.ser\")));\n        oos.writeObject(book); \n        oos.close();\n    }\n    /*\n     * 反序列化\n     */\n    public  static void dser() throws FileNotFoundException, IOException, ClassNotFoundException{\n          ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\n                    new File(\"E:\" + File.separator + \"person.ser\")));\n            Book per = (Book) ois.readObject();  \n            ois.close();\n            System.out.println(per);\n    }\n}\n```\n\n> transient  关键字修饰的属性不会被序列化\n\n###  I/O的设计模式（装饰者模式 Decorator Pattern）\n\n> 用一句话表述：动态地将责任附加到对象上。\n\n是用Decorator去装饰Component、因为实现了同一接口或者抽象类、Decorator同样可以装饰Decorator！通过这种模式我们也可以看出一个设计模式的设计原则：\n\n> Classes should be open for extension, but closed for modification!\n\n\nDecorator Pattern：Attaches additional responsibility to anobject dynamically. Decorators provide a flexible alternative to subclassingfor extending functionality.\n\n可以参考 \n[装饰者设计模式](http://blog.csdn.net/crave_shy/article/details/21223029)\n### 参考文献\n[网易云课堂李兴华java8](http://study.163.com/course/courseMain.htm?courseId=1455026)  [马士兵java](http://study.163.com/course/introduction.htm?courseId=342010#/courseDetail) 《Thinking in Java》《Head First Design Patterns》\n","source":"_posts/Thinking-in-java-基础之I-O.md","raw":"---\ntitle: Thinking in java 基础之I/O\ndate: 2016-06-25 09:57:56\ntags: [I/O,File]\ncategories: java\ndescription: \"主要总结java.io包中的类结构作用！\"\n---\n## Thinking in java基础之 I/O\n\n#### 首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼\n![I/O类图](Thinking-in-java-基础之I-O/201606250959.jpg)\n<!--more-->\njava所有的IO操作都在java.io包之中进行定义，而且整个java.io包实际上就是五个类和一个接口：\n\n • 五个类：File、InputStream、OutputStream、Reader、Wirter\n\n • 一个接口：Serializable\n\n-------------------------------\n\n### 简介字符流和字节流，输入流和输出流\n\nJDK所提供的所有流类位于java.io包中，都分别继承自以下四种抽象流类。\n * InputStream：继承自InputStream的流都是用于向程序中输入数据的，且数据单位都是字节（8位）。\n\n* OutputStream：继承自OutputStream的流都是程序用于向外输出数据的，且数据单位都是字节（8位）。\n\n* Reader：继承自Reader的流都是用于向程序中输入数据的，且数据单位都是字符（16位）。\n\n* Writer：继承自Writer的流都是程序用于向外输出数据的，且数据单位都是字符（16位）。\n\n【输入和输出】是相对于【程序】而言的。以main()为例，main()就相当于程序，当使用输入(InputStream/Reader输入对应程序就是读取数据，当然是Reader)时，是从外界读取数据到main()中，【举例代码】。而输出则是，程序产生的结果输出(OutputStream/Writer输出就是写出，对应Writer)，可以输出到显示屏，控制台，文件系统等。\n【字节流和字符流】大部分文件（图片，视频，音乐等）都是使用字节存放的数据，因此，字节也是用的十分广泛的，但是字节在处理中文的时候，就没有字符流具有优势，因为中文字对应两个字节，而字符也对应两个字节，刚好能对应上，因此，如果有中文处理的时候，优先考虑使用字符流。\n主要的区别：\n字节流没有使用到缓冲区，而字符流使用了；\n处理各种数据都可以通过字节流完成，而在处理中文的时候使用字符流会更好。\n字节流和字符流的转换：（上代码）\n\n将字节输出流变为字符输出流 OutputStream→ Writer ：用OutputStreamWriter；\n将字节输入流变为字符输入流InputStream → Reader：用 InputStreamReader。\n\n### 文件操作/文件系统（File）（读文件，写文件 上代码）\n\n在整个java.io包之中，File类是唯一的一个与文件本身操作有关的类，所谓的文件本身指的是：文件的创建、删除、重命名、取得文件大小、修改日期。但是不包括文件内容，切记。\n```\npackage IO;\nimport java.io.File;\npublic class FileDemo {\n    public static void main(String[] args) {\n        String dirname = \"E:\"+File.separator+\"Demo\";\n          File f1 = new File(dirname);\n          if (f1.isDirectory()) {\n             System.out.println( \"Directory of \" + dirname);\n             String s[] = f1.list();\n             for (int i=0; i < s.length; i++) {\n                File f = new File(dirname + \"/\" + s[i]);\n                if (f.isDirectory()) {\n                   System.out.println(s[i] + \" is a directory\");\n                } else {\n                   System.out.println(s[i] + \" is a file\");\n                }\n             }\n          } else {\n             System.out.println(dirname + \" is not a directory\");\n        }\n    }\n}\n```\nDirectory of E:\\Demo\n\nAndroidDemo is a directory\n\neclipseDemo is a directory\n\nGitHubDemo is a directory\n\n我的电脑【E：/Demo】下面有三个文件目录，所以显示为directory。下面给出File类的方法File方法\n\n![I/O类图](Thinking-in-java-基础之I-O/20160625095901.png)\n\n#### 文件读取和文件输出\n\n - 文件输出\n```\nFileOutputStream\n\npackage IO;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class FileOutputStreamDemo {\npublic static void main(String[] args) throws IOException {\nFile file = new File(\"E:\" + File.separator + \"hellodemo\"\n\nFile.separator + \"test.txt\"); // 定义文件路径\nif (!file.getParentFile().exists()) { // 父路径不存在\nfile.getParentFile().mkdirs(); // 创建父路径\n}\nOutputStream output = new FileOutputStream(file); // 通过子类实例化父类\nString outputdata = \"Hello World\";// 要输出的数据\noutput.write(outputdata.getBytes()); // 输出数据，要将数据变为字节数组输出\noutput.close(); // 关闭资源\n}\n}\n```\n\n - FileWriter\n```\npackage IO;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\n\npublic class FileWriterDemo {\npublic static void main(String[] args) throws IOException {\nFile file = new File(\"E:\" + File.separator + \"hellodemo\"\n\nFile.separator + \"test.txt\"); // 定义文件路径\nif (!file.getParentFile().exists()) {\nfile.getParentFile().mkdirs();// 创建父目录\n}\nWriter out = new FileWriter(file);\nString data = \"Hello World\";\nout.write(data) ; // 直接输出字符串\nout.close() ;\n\n}\n}\n```\n\n - 文件输入\n\n```\n - FileInputStream\npackage IO;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class FileInputStreamDemo {\npublic static void main(String[] args) throws IOException {\nFile file = new File(\"E:\" + File.separator + \"hellodemo\"\n\nFile.separator + \"test.txt\"); // 定义文件路径\nif (file.exists()) { // 文件存在则可以读取\nInputStream input = new FileInputStream(file) ;\nbyte data[] = new byte[1024]; // 假设要读的长度是1024\nint foot = 0; // 操作data数组的脚标\nint temp = 0;\n// 第一步：temp = input.read()，读取一个单个字节，并且将内容给temp变量\n// 第二步：temp != -1，将接收到的temp的数值判断是否为-1，\n//如果为-1则表示退出循环，如果不是，则保存数据\nwhile ((temp = input.read()) != -1) {\ndata[foot++] = (byte) temp; // 保存读取进来的单个字节\n}\ninput.close();\nSystem.out.println(\"数据:【\" + new String(data, 0, foot) + \"】\");\n}else{\nSystem.out.println(\"文件不存在\");\n}\n\n}\n}\n```\n\n - FileReader\n\n```\npackage IO;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.Reader;\npublic class FileReaderDemo {\npublic static void main(String[] args) throws Exception {\nFile file = new File(\"E:\" + File.separator + \"hellodemo\"\n\nFile.separator + \"test.txt\"); // 定义文件路径\nif (file.exists()) {\nReader in = new FileReader(file); // 字符输入流\nchar data[] = new char[1024]; // 开辟数组\nint len = in.read(data); // 读取数据\nSystem.out.println(\"数据:【\" + new String(data, 0, len) + \"】\");\nin.close() ;\n}else{\nSystem.out.println(\"文件不存在\");\n}\n}\n}\n```\n\n 在工作中,IO的读取和输出是在所难免的。\n\n > 一定要好好掌握。\n\n### 打印流（输出）（PrintWriter字符）（PrintStream字节）\n\nSystem（输出err/out可以使用PrintStream的 print（）等方法  ，输入in可以使用InputStream的read()等方法）\n\n---------System.out →PrintStream \n\n---------System.err →PrintStream  \n\n---------System.in →InputStream （结合Scanner使用）\n\n>out/err/in由系统进行初始化【static】可以直接使用。\n\n### 序列化（Serializable）\n\n作用 ：对象序列化指的是可以将内存中的对象数据（对象属性），进行二进制数据保存，或者传输的一种操作，而如果要想完成这样的二进制操作，那么对象所在的类就必须实java.io.Serializable接口。\n\n需要的两个IO类ObjectInputStream（反序列化）、ObjectOutputStream（序列化）\n\n```\npackage IO;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport sun.print.resources.serviceui;\n\n@SuppressWarnings(\"serial\")\nclass Book implements Serializable{\n    private String title;\n    private Double price;\n    private  transient String content;//瞬时 不会被序列化\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public void setPrice(Double price) {\n        this.price = price;\n    }\n    public Double getPrice() {\n        return price;\n    }\n    public void setContent(String content) {\n        this.content = content;\n    }\n    public String getContent() {\n        return content;\n    }\n    @Override\n    public String toString() {\n        return \"Book [title=\" + title + \", price=\" + price + \", content=\" + content + \"]\";\n    }\n\n}\npublic class SerializableDemo {\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        ser();\n        //dser();\n\n    }\n    /*\n     *  序列化\n     */\n    public static void ser() throws FileNotFoundException, IOException{\n         Book book = new Book();\n         book.setPrice(12.8);\n         book.setTitle(\"admin\");\n        ObjectOutputStream oos = new ObjectOutputStream(\n                new FileOutputStream(new File(\"E:\" + File.separator + \"person.ser\")));\n        oos.writeObject(book); \n        oos.close();\n    }\n    /*\n     * 反序列化\n     */\n    public  static void dser() throws FileNotFoundException, IOException, ClassNotFoundException{\n          ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\n                    new File(\"E:\" + File.separator + \"person.ser\")));\n            Book per = (Book) ois.readObject();  \n            ois.close();\n            System.out.println(per);\n    }\n}\n```\n\n> transient  关键字修饰的属性不会被序列化\n\n###  I/O的设计模式（装饰者模式 Decorator Pattern）\n\n> 用一句话表述：动态地将责任附加到对象上。\n\n是用Decorator去装饰Component、因为实现了同一接口或者抽象类、Decorator同样可以装饰Decorator！通过这种模式我们也可以看出一个设计模式的设计原则：\n\n> Classes should be open for extension, but closed for modification!\n\n\nDecorator Pattern：Attaches additional responsibility to anobject dynamically. Decorators provide a flexible alternative to subclassingfor extending functionality.\n\n可以参考 \n[装饰者设计模式](http://blog.csdn.net/crave_shy/article/details/21223029)\n### 参考文献\n[网易云课堂李兴华java8](http://study.163.com/course/courseMain.htm?courseId=1455026)  [马士兵java](http://study.163.com/course/introduction.htm?courseId=342010#/courseDetail) 《Thinking in Java》《Head First Design Patterns》\n","slug":"Thinking-in-java-基础之I-O","published":1,"updated":"2016-08-31T12:24:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79n006nugv5oy8spx2o","content":"<h2 id=\"Thinking-in-java基础之-I-O\"><a href=\"#Thinking-in-java基础之-I-O\" class=\"headerlink\" title=\"Thinking in java基础之 I/O\"></a>Thinking in java基础之 I/O</h2><h4 id=\"首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼\"><a href=\"#首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼\" class=\"headerlink\" title=\"首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼\"></a>首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼</h4><p><img src=\"/.io//201606250959.jpg\" alt=\"I/O类图\"><br><a id=\"more\"></a><br>java所有的IO操作都在java.io包之中进行定义，而且整个java.io包实际上就是五个类和一个接口：</p>\n<p> • 五个类：File、InputStream、OutputStream、Reader、Wirter</p>\n<p> • 一个接口：Serializable</p>\n<hr>\n<h3 id=\"简介字符流和字节流，输入流和输出流\"><a href=\"#简介字符流和字节流，输入流和输出流\" class=\"headerlink\" title=\"简介字符流和字节流，输入流和输出流\"></a>简介字符流和字节流，输入流和输出流</h3><p>JDK所提供的所有流类位于java.io包中，都分别继承自以下四种抽象流类。</p>\n<ul>\n<li>InputStream：继承自InputStream的流都是用于向程序中输入数据的，且数据单位都是字节（8位）。</li>\n</ul>\n<ul>\n<li><p>OutputStream：继承自OutputStream的流都是程序用于向外输出数据的，且数据单位都是字节（8位）。</p>\n</li>\n<li><p>Reader：继承自Reader的流都是用于向程序中输入数据的，且数据单位都是字符（16位）。</p>\n</li>\n<li><p>Writer：继承自Writer的流都是程序用于向外输出数据的，且数据单位都是字符（16位）。</p>\n</li>\n</ul>\n<p>【输入和输出】是相对于【程序】而言的。以main()为例，main()就相当于程序，当使用输入(InputStream/Reader输入对应程序就是读取数据，当然是Reader)时，是从外界读取数据到main()中，【举例代码】。而输出则是，程序产生的结果输出(OutputStream/Writer输出就是写出，对应Writer)，可以输出到显示屏，控制台，文件系统等。<br>【字节流和字符流】大部分文件（图片，视频，音乐等）都是使用字节存放的数据，因此，字节也是用的十分广泛的，但是字节在处理中文的时候，就没有字符流具有优势，因为中文字对应两个字节，而字符也对应两个字节，刚好能对应上，因此，如果有中文处理的时候，优先考虑使用字符流。<br>主要的区别：<br>字节流没有使用到缓冲区，而字符流使用了；<br>处理各种数据都可以通过字节流完成，而在处理中文的时候使用字符流会更好。<br>字节流和字符流的转换：（上代码）</p>\n<p>将字节输出流变为字符输出流 OutputStream→ Writer ：用OutputStreamWriter；<br>将字节输入流变为字符输入流InputStream → Reader：用 InputStreamReader。</p>\n<h3 id=\"文件操作-文件系统（File）（读文件，写文件-上代码）\"><a href=\"#文件操作-文件系统（File）（读文件，写文件-上代码）\" class=\"headerlink\" title=\"文件操作/文件系统（File）（读文件，写文件 上代码）\"></a>文件操作/文件系统（File）（读文件，写文件 上代码）</h3><p>在整个java.io包之中，File类是唯一的一个与文件本身操作有关的类，所谓的文件本身指的是：文件的创建、删除、重命名、取得文件大小、修改日期。但是不包括文件内容，切记。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package IO;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">public class FileDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String dirname = &quot;E:&quot;+File.separator+&quot;Demo&quot;;</span><br><span class=\"line\">          File f1 = new File(dirname);</span><br><span class=\"line\">          if (f1.isDirectory()) &#123;</span><br><span class=\"line\">             System.out.println( &quot;Directory of &quot; + dirname);</span><br><span class=\"line\">             String s[] = f1.list();</span><br><span class=\"line\">             for (int i=0; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">                File f = new File(dirname + &quot;/&quot; + s[i]);</span><br><span class=\"line\">                if (f.isDirectory()) &#123;</span><br><span class=\"line\">                   System.out.println(s[i] + &quot; is a directory&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                   System.out.println(s[i] + &quot; is a file&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">             System.out.println(dirname + &quot; is not a directory&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Directory of E:\\Demo</p>\n<p>AndroidDemo is a directory</p>\n<p>eclipseDemo is a directory</p>\n<p>GitHubDemo is a directory</p>\n<p>我的电脑【E：/Demo】下面有三个文件目录，所以显示为directory。下面给出File类的方法File方法</p>\n<p><img src=\"/.io//20160625095901.png\" alt=\"I/O类图\"></p>\n<h4 id=\"文件读取和文件输出\"><a href=\"#文件读取和文件输出\" class=\"headerlink\" title=\"文件读取和文件输出\"></a>文件读取和文件输出</h4><ul>\n<li><p>文件输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileOutputStream</span><br><span class=\"line\"></span><br><span class=\"line\">package IO;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FileOutputStreamDemo &#123;</span><br><span class=\"line\">public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class=\"line\">if (!file.getParentFile().exists()) &#123; // 父路径不存在</span><br><span class=\"line\">file.getParentFile().mkdirs(); // 创建父路径</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">OutputStream output = new FileOutputStream(file); // 通过子类实例化父类</span><br><span class=\"line\">String outputdata = &quot;Hello World&quot;;// 要输出的数据</span><br><span class=\"line\">output.write(outputdata.getBytes()); // 输出数据，要将数据变为字节数组输出</span><br><span class=\"line\">output.close(); // 关闭资源</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>FileWriter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package IO;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileWriter;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.Writer;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FileWriterDemo &#123;</span><br><span class=\"line\">public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class=\"line\">if (!file.getParentFile().exists()) &#123;</span><br><span class=\"line\">file.getParentFile().mkdirs();// 创建父目录</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Writer out = new FileWriter(file);</span><br><span class=\"line\">String data = &quot;Hello World&quot;;</span><br><span class=\"line\">out.write(data) ; // 直接输出字符串</span><br><span class=\"line\">out.close() ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件输入</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> - FileInputStream</span><br><span class=\"line\">package IO;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FileInputStreamDemo &#123;</span><br><span class=\"line\">public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class=\"line\">if (file.exists()) &#123; // 文件存在则可以读取</span><br><span class=\"line\">InputStream input = new FileInputStream(file) ;</span><br><span class=\"line\">byte data[] = new byte[1024]; // 假设要读的长度是1024</span><br><span class=\"line\">int foot = 0; // 操作data数组的脚标</span><br><span class=\"line\">int temp = 0;</span><br><span class=\"line\">// 第一步：temp = input.read()，读取一个单个字节，并且将内容给temp变量</span><br><span class=\"line\">// 第二步：temp != -1，将接收到的temp的数值判断是否为-1，</span><br><span class=\"line\">//如果为-1则表示退出循环，如果不是，则保存数据</span><br><span class=\"line\">while ((temp = input.read()) != -1) &#123;</span><br><span class=\"line\">data[foot++] = (byte) temp; // 保存读取进来的单个字节</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input.close();</span><br><span class=\"line\">System.out.println(&quot;数据:【&quot; + new String(data, 0, foot) + &quot;】&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">System.out.println(&quot;文件不存在&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FileReader</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package IO;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileReader;</span><br><span class=\"line\">import java.io.Reader;</span><br><span class=\"line\">public class FileReaderDemo &#123;</span><br><span class=\"line\">public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class=\"line\">if (file.exists()) &#123;</span><br><span class=\"line\">Reader in = new FileReader(file); // 字符输入流</span><br><span class=\"line\">char data[] = new char[1024]; // 开辟数组</span><br><span class=\"line\">int len = in.read(data); // 读取数据</span><br><span class=\"line\">System.out.println(&quot;数据:【&quot; + new String(data, 0, len) + &quot;】&quot;);</span><br><span class=\"line\">in.close() ;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">System.out.println(&quot;文件不存在&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 在工作中,IO的读取和输出是在所难免的。</p>\n<blockquote>\n<p>一定要好好掌握。</p>\n</blockquote>\n<h3 id=\"打印流（输出）（PrintWriter字符）（PrintStream字节）\"><a href=\"#打印流（输出）（PrintWriter字符）（PrintStream字节）\" class=\"headerlink\" title=\"打印流（输出）（PrintWriter字符）（PrintStream字节）\"></a>打印流（输出）（PrintWriter字符）（PrintStream字节）</h3><p>System（输出err/out可以使用PrintStream的 print（）等方法  ，输入in可以使用InputStream的read()等方法）</p>\n<p>———System.out →PrintStream </p>\n<p>———System.err →PrintStream  </p>\n<p>———System.in →InputStream （结合Scanner使用）</p>\n<blockquote>\n<p>out/err/in由系统进行初始化【static】可以直接使用。</p>\n</blockquote>\n<h3 id=\"序列化（Serializable）\"><a href=\"#序列化（Serializable）\" class=\"headerlink\" title=\"序列化（Serializable）\"></a>序列化（Serializable）</h3><p>作用 ：对象序列化指的是可以将内存中的对象数据（对象属性），进行二进制数据保存，或者传输的一种操作，而如果要想完成这样的二进制操作，那么对象所在的类就必须实java.io.Serializable接口。</p>\n<p>需要的两个IO类ObjectInputStream（反序列化）、ObjectOutputStream（序列化）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package IO;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.FileNotFoundException;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.ObjectInputStream;</span><br><span class=\"line\">import java.io.ObjectOutputStream;</span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import sun.print.resources.serviceui;</span><br><span class=\"line\"></span><br><span class=\"line\">@SuppressWarnings(&quot;serial&quot;)</span><br><span class=\"line\">class Book implements Serializable&#123;</span><br><span class=\"line\">    private String title;</span><br><span class=\"line\">    private Double price;</span><br><span class=\"line\">    private  transient String content;//瞬时 不会被序列化</span><br><span class=\"line\">    public void setTitle(String title) &#123;</span><br><span class=\"line\">        this.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getTitle() &#123;</span><br><span class=\"line\">        return title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setPrice(Double price) &#123;</span><br><span class=\"line\">        this.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Double getPrice() &#123;</span><br><span class=\"line\">        return price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setContent(String content) &#123;</span><br><span class=\"line\">        this.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getContent() &#123;</span><br><span class=\"line\">        return content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;Book [title=&quot; + title + &quot;, price=&quot; + price + &quot;, content=&quot; + content + &quot;]&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class SerializableDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        ser();</span><br><span class=\"line\">        //dser();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     *  序列化</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void ser() throws FileNotFoundException, IOException&#123;</span><br><span class=\"line\">         Book book = new Book();</span><br><span class=\"line\">         book.setPrice(12.8);</span><br><span class=\"line\">         book.setTitle(&quot;admin&quot;);</span><br><span class=\"line\">        ObjectOutputStream oos = new ObjectOutputStream(</span><br><span class=\"line\">                new FileOutputStream(new File(&quot;E:&quot; + File.separator + &quot;person.ser&quot;)));</span><br><span class=\"line\">        oos.writeObject(book); </span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 反序列化</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public  static void dser() throws FileNotFoundException, IOException, ClassNotFoundException&#123;</span><br><span class=\"line\">          ObjectInputStream ois = new ObjectInputStream(new FileInputStream(</span><br><span class=\"line\">                    new File(&quot;E:&quot; + File.separator + &quot;person.ser&quot;)));</span><br><span class=\"line\">            Book per = (Book) ois.readObject();  </span><br><span class=\"line\">            ois.close();</span><br><span class=\"line\">            System.out.println(per);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>transient  关键字修饰的属性不会被序列化</p>\n</blockquote>\n<h3 id=\"I-O的设计模式（装饰者模式-Decorator-Pattern）\"><a href=\"#I-O的设计模式（装饰者模式-Decorator-Pattern）\" class=\"headerlink\" title=\"I/O的设计模式（装饰者模式 Decorator Pattern）\"></a>I/O的设计模式（装饰者模式 Decorator Pattern）</h3><blockquote>\n<p>用一句话表述：动态地将责任附加到对象上。</p>\n</blockquote>\n<p>是用Decorator去装饰Component、因为实现了同一接口或者抽象类、Decorator同样可以装饰Decorator！通过这种模式我们也可以看出一个设计模式的设计原则：</p>\n<blockquote>\n<p>Classes should be open for extension, but closed for modification!</p>\n</blockquote>\n<p>Decorator Pattern：Attaches additional responsibility to anobject dynamically. Decorators provide a flexible alternative to subclassingfor extending functionality.</p>\n<p>可以参考<br><a href=\"http://blog.csdn.net/crave_shy/article/details/21223029\" target=\"_blank\" rel=\"noopener\">装饰者设计模式</a></p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"http://study.163.com/course/courseMain.htm?courseId=1455026\" target=\"_blank\" rel=\"noopener\">网易云课堂李兴华java8</a>  <a href=\"http://study.163.com/course/introduction.htm?courseId=342010#/courseDetail\" target=\"_blank\" rel=\"noopener\">马士兵java</a> 《Thinking in Java》《Head First Design Patterns》</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Thinking-in-java基础之-I-O\"><a href=\"#Thinking-in-java基础之-I-O\" class=\"headerlink\" title=\"Thinking in java基础之 I/O\"></a>Thinking in java基础之 I/O</h2><h4 id=\"首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼\"><a href=\"#首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼\" class=\"headerlink\" title=\"首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼\"></a>首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼</h4><p><img src=\"/.io//201606250959.jpg\" alt=\"I/O类图\"><br></p>","more":"<br>java所有的IO操作都在java.io包之中进行定义，而且整个java.io包实际上就是五个类和一个接口：<p></p>\n<p> • 五个类：File、InputStream、OutputStream、Reader、Wirter</p>\n<p> • 一个接口：Serializable</p>\n<hr>\n<h3 id=\"简介字符流和字节流，输入流和输出流\"><a href=\"#简介字符流和字节流，输入流和输出流\" class=\"headerlink\" title=\"简介字符流和字节流，输入流和输出流\"></a>简介字符流和字节流，输入流和输出流</h3><p>JDK所提供的所有流类位于java.io包中，都分别继承自以下四种抽象流类。</p>\n<ul>\n<li>InputStream：继承自InputStream的流都是用于向程序中输入数据的，且数据单位都是字节（8位）。</li>\n</ul>\n<ul>\n<li><p>OutputStream：继承自OutputStream的流都是程序用于向外输出数据的，且数据单位都是字节（8位）。</p>\n</li>\n<li><p>Reader：继承自Reader的流都是用于向程序中输入数据的，且数据单位都是字符（16位）。</p>\n</li>\n<li><p>Writer：继承自Writer的流都是程序用于向外输出数据的，且数据单位都是字符（16位）。</p>\n</li>\n</ul>\n<p>【输入和输出】是相对于【程序】而言的。以main()为例，main()就相当于程序，当使用输入(InputStream/Reader输入对应程序就是读取数据，当然是Reader)时，是从外界读取数据到main()中，【举例代码】。而输出则是，程序产生的结果输出(OutputStream/Writer输出就是写出，对应Writer)，可以输出到显示屏，控制台，文件系统等。<br>【字节流和字符流】大部分文件（图片，视频，音乐等）都是使用字节存放的数据，因此，字节也是用的十分广泛的，但是字节在处理中文的时候，就没有字符流具有优势，因为中文字对应两个字节，而字符也对应两个字节，刚好能对应上，因此，如果有中文处理的时候，优先考虑使用字符流。<br>主要的区别：<br>字节流没有使用到缓冲区，而字符流使用了；<br>处理各种数据都可以通过字节流完成，而在处理中文的时候使用字符流会更好。<br>字节流和字符流的转换：（上代码）</p>\n<p>将字节输出流变为字符输出流 OutputStream→ Writer ：用OutputStreamWriter；<br>将字节输入流变为字符输入流InputStream → Reader：用 InputStreamReader。</p>\n<h3 id=\"文件操作-文件系统（File）（读文件，写文件-上代码）\"><a href=\"#文件操作-文件系统（File）（读文件，写文件-上代码）\" class=\"headerlink\" title=\"文件操作/文件系统（File）（读文件，写文件 上代码）\"></a>文件操作/文件系统（File）（读文件，写文件 上代码）</h3><p>在整个java.io包之中，File类是唯一的一个与文件本身操作有关的类，所谓的文件本身指的是：文件的创建、删除、重命名、取得文件大小、修改日期。但是不包括文件内容，切记。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package IO;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">public class FileDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String dirname = &quot;E:&quot;+File.separator+&quot;Demo&quot;;</span><br><span class=\"line\">          File f1 = new File(dirname);</span><br><span class=\"line\">          if (f1.isDirectory()) &#123;</span><br><span class=\"line\">             System.out.println( &quot;Directory of &quot; + dirname);</span><br><span class=\"line\">             String s[] = f1.list();</span><br><span class=\"line\">             for (int i=0; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">                File f = new File(dirname + &quot;/&quot; + s[i]);</span><br><span class=\"line\">                if (f.isDirectory()) &#123;</span><br><span class=\"line\">                   System.out.println(s[i] + &quot; is a directory&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                   System.out.println(s[i] + &quot; is a file&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">             System.out.println(dirname + &quot; is not a directory&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Directory of E:\\Demo</p>\n<p>AndroidDemo is a directory</p>\n<p>eclipseDemo is a directory</p>\n<p>GitHubDemo is a directory</p>\n<p>我的电脑【E：/Demo】下面有三个文件目录，所以显示为directory。下面给出File类的方法File方法</p>\n<p><img src=\"/.io//20160625095901.png\" alt=\"I/O类图\"></p>\n<h4 id=\"文件读取和文件输出\"><a href=\"#文件读取和文件输出\" class=\"headerlink\" title=\"文件读取和文件输出\"></a>文件读取和文件输出</h4><ul>\n<li><p>文件输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileOutputStream</span><br><span class=\"line\"></span><br><span class=\"line\">package IO;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FileOutputStreamDemo &#123;</span><br><span class=\"line\">public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class=\"line\">if (!file.getParentFile().exists()) &#123; // 父路径不存在</span><br><span class=\"line\">file.getParentFile().mkdirs(); // 创建父路径</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">OutputStream output = new FileOutputStream(file); // 通过子类实例化父类</span><br><span class=\"line\">String outputdata = &quot;Hello World&quot;;// 要输出的数据</span><br><span class=\"line\">output.write(outputdata.getBytes()); // 输出数据，要将数据变为字节数组输出</span><br><span class=\"line\">output.close(); // 关闭资源</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>FileWriter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package IO;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileWriter;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.Writer;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FileWriterDemo &#123;</span><br><span class=\"line\">public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class=\"line\">if (!file.getParentFile().exists()) &#123;</span><br><span class=\"line\">file.getParentFile().mkdirs();// 创建父目录</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Writer out = new FileWriter(file);</span><br><span class=\"line\">String data = &quot;Hello World&quot;;</span><br><span class=\"line\">out.write(data) ; // 直接输出字符串</span><br><span class=\"line\">out.close() ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件输入</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> - FileInputStream</span><br><span class=\"line\">package IO;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FileInputStreamDemo &#123;</span><br><span class=\"line\">public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class=\"line\">if (file.exists()) &#123; // 文件存在则可以读取</span><br><span class=\"line\">InputStream input = new FileInputStream(file) ;</span><br><span class=\"line\">byte data[] = new byte[1024]; // 假设要读的长度是1024</span><br><span class=\"line\">int foot = 0; // 操作data数组的脚标</span><br><span class=\"line\">int temp = 0;</span><br><span class=\"line\">// 第一步：temp = input.read()，读取一个单个字节，并且将内容给temp变量</span><br><span class=\"line\">// 第二步：temp != -1，将接收到的temp的数值判断是否为-1，</span><br><span class=\"line\">//如果为-1则表示退出循环，如果不是，则保存数据</span><br><span class=\"line\">while ((temp = input.read()) != -1) &#123;</span><br><span class=\"line\">data[foot++] = (byte) temp; // 保存读取进来的单个字节</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input.close();</span><br><span class=\"line\">System.out.println(&quot;数据:【&quot; + new String(data, 0, foot) + &quot;】&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">System.out.println(&quot;文件不存在&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FileReader</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package IO;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileReader;</span><br><span class=\"line\">import java.io.Reader;</span><br><span class=\"line\">public class FileReaderDemo &#123;</span><br><span class=\"line\">public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class=\"line\">if (file.exists()) &#123;</span><br><span class=\"line\">Reader in = new FileReader(file); // 字符输入流</span><br><span class=\"line\">char data[] = new char[1024]; // 开辟数组</span><br><span class=\"line\">int len = in.read(data); // 读取数据</span><br><span class=\"line\">System.out.println(&quot;数据:【&quot; + new String(data, 0, len) + &quot;】&quot;);</span><br><span class=\"line\">in.close() ;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">System.out.println(&quot;文件不存在&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 在工作中,IO的读取和输出是在所难免的。</p>\n<blockquote>\n<p>一定要好好掌握。</p>\n</blockquote>\n<h3 id=\"打印流（输出）（PrintWriter字符）（PrintStream字节）\"><a href=\"#打印流（输出）（PrintWriter字符）（PrintStream字节）\" class=\"headerlink\" title=\"打印流（输出）（PrintWriter字符）（PrintStream字节）\"></a>打印流（输出）（PrintWriter字符）（PrintStream字节）</h3><p>System（输出err/out可以使用PrintStream的 print（）等方法  ，输入in可以使用InputStream的read()等方法）</p>\n<p>———System.out →PrintStream </p>\n<p>———System.err →PrintStream  </p>\n<p>———System.in →InputStream （结合Scanner使用）</p>\n<blockquote>\n<p>out/err/in由系统进行初始化【static】可以直接使用。</p>\n</blockquote>\n<h3 id=\"序列化（Serializable）\"><a href=\"#序列化（Serializable）\" class=\"headerlink\" title=\"序列化（Serializable）\"></a>序列化（Serializable）</h3><p>作用 ：对象序列化指的是可以将内存中的对象数据（对象属性），进行二进制数据保存，或者传输的一种操作，而如果要想完成这样的二进制操作，那么对象所在的类就必须实java.io.Serializable接口。</p>\n<p>需要的两个IO类ObjectInputStream（反序列化）、ObjectOutputStream（序列化）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package IO;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.FileNotFoundException;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.ObjectInputStream;</span><br><span class=\"line\">import java.io.ObjectOutputStream;</span><br><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import sun.print.resources.serviceui;</span><br><span class=\"line\"></span><br><span class=\"line\">@SuppressWarnings(&quot;serial&quot;)</span><br><span class=\"line\">class Book implements Serializable&#123;</span><br><span class=\"line\">    private String title;</span><br><span class=\"line\">    private Double price;</span><br><span class=\"line\">    private  transient String content;//瞬时 不会被序列化</span><br><span class=\"line\">    public void setTitle(String title) &#123;</span><br><span class=\"line\">        this.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getTitle() &#123;</span><br><span class=\"line\">        return title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setPrice(Double price) &#123;</span><br><span class=\"line\">        this.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Double getPrice() &#123;</span><br><span class=\"line\">        return price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setContent(String content) &#123;</span><br><span class=\"line\">        this.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getContent() &#123;</span><br><span class=\"line\">        return content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;Book [title=&quot; + title + &quot;, price=&quot; + price + &quot;, content=&quot; + content + &quot;]&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class SerializableDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">        ser();</span><br><span class=\"line\">        //dser();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     *  序列化</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void ser() throws FileNotFoundException, IOException&#123;</span><br><span class=\"line\">         Book book = new Book();</span><br><span class=\"line\">         book.setPrice(12.8);</span><br><span class=\"line\">         book.setTitle(&quot;admin&quot;);</span><br><span class=\"line\">        ObjectOutputStream oos = new ObjectOutputStream(</span><br><span class=\"line\">                new FileOutputStream(new File(&quot;E:&quot; + File.separator + &quot;person.ser&quot;)));</span><br><span class=\"line\">        oos.writeObject(book); </span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 反序列化</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public  static void dser() throws FileNotFoundException, IOException, ClassNotFoundException&#123;</span><br><span class=\"line\">          ObjectInputStream ois = new ObjectInputStream(new FileInputStream(</span><br><span class=\"line\">                    new File(&quot;E:&quot; + File.separator + &quot;person.ser&quot;)));</span><br><span class=\"line\">            Book per = (Book) ois.readObject();  </span><br><span class=\"line\">            ois.close();</span><br><span class=\"line\">            System.out.println(per);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>transient  关键字修饰的属性不会被序列化</p>\n</blockquote>\n<h3 id=\"I-O的设计模式（装饰者模式-Decorator-Pattern）\"><a href=\"#I-O的设计模式（装饰者模式-Decorator-Pattern）\" class=\"headerlink\" title=\"I/O的设计模式（装饰者模式 Decorator Pattern）\"></a>I/O的设计模式（装饰者模式 Decorator Pattern）</h3><blockquote>\n<p>用一句话表述：动态地将责任附加到对象上。</p>\n</blockquote>\n<p>是用Decorator去装饰Component、因为实现了同一接口或者抽象类、Decorator同样可以装饰Decorator！通过这种模式我们也可以看出一个设计模式的设计原则：</p>\n<blockquote>\n<p>Classes should be open for extension, but closed for modification!</p>\n</blockquote>\n<p>Decorator Pattern：Attaches additional responsibility to anobject dynamically. Decorators provide a flexible alternative to subclassingfor extending functionality.</p>\n<p>可以参考<br><a href=\"http://blog.csdn.net/crave_shy/article/details/21223029\" target=\"_blank\" rel=\"noopener\">装饰者设计模式</a></p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"http://study.163.com/course/courseMain.htm?courseId=1455026\" target=\"_blank\" rel=\"noopener\">网易云课堂李兴华java8</a>  <a href=\"http://study.163.com/course/introduction.htm?courseId=342010#/courseDetail\" target=\"_blank\" rel=\"noopener\">马士兵java</a> 《Thinking in Java》《Head First Design Patterns》</p>"},{"title":"Thinking in java 基础之异常","description":"总结java中的异常，错误，Java的基础理念是：结构不佳的代码不能运行。发现错误的理想时机是在编译阶段！","date":"2016-08-04T04:45:14.000Z","_content":"\n\n## Thinking in java 基础之异常\n类图如下\n\n![异常类图](Thinking-in-java-基础之异常/201608031722.jpg)\n\n#### 异常概念\n\n\nchecked 异常的一个问题是，有时候不允许抛出这样的异常。特别是，如果要覆盖超类中声明的方法，或者实现接口中声明的方法，而那个方法没有声明任何 checked 异常，那么新的实现也不能声明 checked 异常。因此必须预先处理异常。\nError我们不用处理。\n\nVirtualMachineError在程序中是不能处理的，这个一般属于虚拟机的问题，内存溢出和栈溢出。(OOM) \n\nException中的IOException必须try catch，这种文件资源是必须要捕捉的，文件要在finally中进行关闭。\n\nException中的RuntimeException 可以不必try，还可以继续throws，让使用者处理。\n\n下面来看看源码\n\n![异常Throwable类](Thinking-in-java-基础之异常/201608091509Throwable.PNG)\n\n![异常Error类](Thinking-in-java-基础之异常/201608091504Error.PNG)\n![异常Exception类](Thinking-in-java-基础之异常/201608091505Exception.PNG)\n![异常IOException类](Thinking-in-java-基础之异常/201608091505IOException.PNG)\n![异常RuntimeException类](Thinking-in-java-基础之异常/201608091506RuntimeException.PNG)\n\n我们可以看到除了Throwable之外的类，都是只有构造方法，而且我们从类的名字就能看出具体是什么异常。\n\n\n#### 为什么要用try 或者 throws\n\ntry是为了捕捉异常，而方法中throws是为了把方法抛出去。\n\n下面我们来看例子:\n\n例1\n\n```\npublic class ExceptionTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tExceptionTest exceptionTest=new ExceptionTest();\n\t\tSystem.out.println(\"======================\");\n\t\tSystem.out.println(exceptionTest.va());\n\t\tSystem.out.println(\"抛出异常后，后面代码仍可以执行\");\n\t\t\n\t}\n\tpublic Integer va() throws Exception{\n\t\tInteger ret = 0;\n\t\tret=1/0;\n\t\tSystem.out.println(\"上面有异常，后面......\");\n\t\treturn ret;\n\t}\n}\n\n```\n\n结果：\n\n```\n======================\njava.lang.ArithmeticException: / by zero\n\tat Exception.ExceptionTest.va(ExceptionTest.java:21)\n\tat Exception.ExceptionTest.main(ExceptionTest.java:15)\n\n```\nval()方法中ret=1/0;会抛出异常。\n\n例1中main方法中使用throws把异常抛出去，而main方法结束之后，程序就运行完了，但是Exception怎么办呢？只好在控制台打印出Exception了，同时，程序在产生异常的地方，程序就结束了。因此*System.out.println(\"抛出异常后，后面代码仍可以执行\");*是不会执行的。即使在val(),方法中*System.out.println(\"上面有异常，后面......\");*也是不会执行的，因为*ret=1/0;*已经让程序抛出了异常。 而下面的例子就不一样了。\n\n例2\n\n```\n\npublic class ExceptionTest {\n\tpublic static void main(String[] args) {\n\t\tExceptionTest exceptionTest=new ExceptionTest();\n\t\tSystem.out.println(\"======================\");\n\t\ttry {\n\t\t\tSystem.out.println(exceptionTest.va());\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"抛出异常后，后面代码仍可以执行\");\n\t\t\n\t}\n\tpublic Integer va() throws Exception{\n\t\tInteger ret = 0;\n\t\tret=1/0;\n\t\tSystem.out.println(\"上面有异常，后面......\");\n\t\treturn ret;\n\t}\n\t\n}\n\n```\n\n结果：\n\n```\n======================\njava.lang.ArithmeticException: / by zero\n\tat Exception.ExceptionTest.va(ExceptionTest.java:26)\n\tat Exception.ExceptionTest.main(ExceptionTest.java:16)\n抛出异常后，后面代码仍可以执行\n```\n在这个main中使用try catch 来捕捉异常，而异常捕捉后，后面的代码继续执行，因此*System.out.println(\"抛出异常后，后面代码仍可以执行\");*可以执行，就打印出信息了。但是同样val()方法中的*System.out.println(\"上面有异常，后面......\");*是不会执行的。\n####异常分类\n\n由上图可以看出Error和Exception是Throwable的子类\n\n#### 关键字 try catch finally throw throws 根据关键词来解释异常\n\ntry catch finally 是一组\n\nthrow是可以自己抛出一个异常对象\n\nthrows是声明一个异常可能被抛出，让调用者处理\n\n##### try 捕获异常 catch 处理异常 finally 有没有异常都执行\n\n例3\n\n```\npublic class ExceptionTest {\n\tpublic static void main(String[] args) {\n\t\tExceptionTest exceptionTest=new ExceptionTest();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value(){\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/0;\n\t\t} catch (Exception e) {\n\t\t\tret = 1;\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n```\n\n结果：\n\n```\ncatch:1\nfinally:2\n1\n```\n例4\n\n```\n\npublic class ExceptionTest {\n\tpublic static void main(String[] args) {\n\t\tExceptionTest exceptionTest=new ExceptionTest();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value(){\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/1;\n\t\t} catch (Exception e) {\n\t\t\tret = 3;\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\n```\n\n结果：\n\n```\n\nfinally:2\n2\n\n```\n\n例3例4这两个例子中，就能发现finally是不论在try{}中有没有异常，finally{}是必须要执行的，而catch(){}中呢，在try{}中有异常，catch(){}就会捕捉到。\n\n下面看一下catch的顺序\n\n例5:\n\n```\npublic class ExceptionTest2 {\n\tpublic static void main(String[] args) {\n\t\tExceptionTest2 exceptionTest=new ExceptionTest2();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value(){\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tSystem.out.println(\"try:\"+ret);\n\t\t\tret=1/0;\n\t\t\treturn ret;\n\t\t}catch(ArithmeticException e){\n\t\t\tSystem.out.println(\"ArithmeticException catch:\"+ret);\n\t\t\t//e.printStackTrace();\n\t\t}catch(NullPointerException e){\n\t\t\tSystem.out.println(\"NullPointer catch:\"+ret);\n\t\t\te.printStackTrace();\n\t\t} \n\t\tcatch (Exception e) {\n\t\t\tSystem.out.println(\"Exception catch:\"+ret);\n\t\t\te.printStackTrace();\n\t\t\tret =3;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t\t//return ret;\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n```\n\n结果:\n\n```\ntry:0\nArithmeticException catch:0\nfinally:2\n2\n```\n如果把Exception放在第一个catch的话，就会处错误，编译出错\n\n```\nCompiling ExceptionTest2.java.......\n\t\t}catch(ArithmeticException e){\n\t\t ^\n\t\t}catch(NullPointerException e){\n\t\t ^\n\t\t}catch (Exception e) {\n\t\t ^\n[Finished in 0.5s]\n\n```\n\n##### throw 抛出一个异常对象\n\n例6：\n\n```\npublic class ExceptionCatchTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value() throws Exception{\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/0;\n\t\t\tthrow new Exception();\n\t\t}catch(ArithmeticException e){\n\t\t\tSystem.out.println(\"ArithmeticException catch:\"+ret);\n\t\t\tthrow new Exception();\n\t\t}catch (Exception e) {\n\t\t\tret = 3;\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n```\n结果：\n```\nArithmeticException catch:0\nfinally:2\nException in thread \"main\" java.lang.Exception\n\tat Exception.ExceptionCatchTest.value(ExceptionCatchTest.java:23)\n\tat Exception.ExceptionCatchTest.main(ExceptionCatchTest.java:13)\n```\n\n例6上面在catch内部又抛出(throw)了一个 new Exception()；同时在方法中就会把Exception抛出到调用者处理。从而把Exception抛给main()方法处理，如果main方法中没有 throws Exception的话，就需要对*exceptionTest.value()*进行try catch 否则编译就会出错。\n\n##### throws 声明一个异常可能被抛出\n\n例7：\n\n```\npublic class ExceptionCatchTest {\n\tpublic static void main(String[] args)  {\n\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value() throws Exception{\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/0;\n\t\t\tthrow new Exception();\n\t\t}catch(ArithmeticException e){\n\t\t\tSystem.out.println(\"ArithmeticException catch:\"+ret);\n\t\t}catch (Exception e) {\n\t\t\tret = 3;\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n```\n\n例7上面也说明了throws 关键字的用法，抛出Exception，给调用者处理异常。因此，在main()方法中，如果main方法中没有 throws Exception的话，就需要对*exceptionTest.value()*进行try catch 否则编译就会出错。\n\n```\ntry {\n\t\t\tSystem.out.println(exceptionTest.value());\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n```\n#### 最后要说一下执行异常的顺序\n\n例8\n```\npublic class ExceptionCatchTest {\n\tpublic static void main(String[] args)  {\n\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();\n\t\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value() {\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/0;\n\t\t\treturn ret;\n\t\t}catch (Exception e) {\n\t\t\tret = 3;\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t}\n}\n\n```\n结果：\n```\ncatch:3\nfinally:2\n3\n```\n在try中执行，如果有异常try中的return不会返回，会到catch中，如果在catch中有return的话，当执行到这里的时候，会提前执行finally，然后才会执行catch中的return。\n\n例9：\n```\npublic class ExceptionCatchTest {\n\tpublic static void main(String[] args)  {\n\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();\n\t\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value() {\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\t//ret=1/0;\n\t\t\treturn ret;\n\t\t}catch (Exception e) {\n\t\t\tret = 3;\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t}\n}\n```\n结果:\n```\nfinally:2\n0\n```\n\n如果try中的代码正常，不会产生异常的话，会在try中执行到return的时候，优先执行finally，如果在finally有return的话，直接返回，没有的话，就会返回到try内的return。\n\n#### 到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。","source":"_posts/Thinking-in-java-基础之异常.md","raw":"---\ntitle: Thinking in java 基础之异常\ntags:\n  - Throwable\n  - Error\n  - Exception\ncategories: java\ndescription: 总结java中的异常，错误，Java的基础理念是：结构不佳的代码不能运行。发现错误的理想时机是在编译阶段！\ndate: 2016-08-04 12:45:14\n---\n\n\n## Thinking in java 基础之异常\n类图如下\n\n![异常类图](Thinking-in-java-基础之异常/201608031722.jpg)\n\n#### 异常概念\n\n\nchecked 异常的一个问题是，有时候不允许抛出这样的异常。特别是，如果要覆盖超类中声明的方法，或者实现接口中声明的方法，而那个方法没有声明任何 checked 异常，那么新的实现也不能声明 checked 异常。因此必须预先处理异常。\nError我们不用处理。\n\nVirtualMachineError在程序中是不能处理的，这个一般属于虚拟机的问题，内存溢出和栈溢出。(OOM) \n\nException中的IOException必须try catch，这种文件资源是必须要捕捉的，文件要在finally中进行关闭。\n\nException中的RuntimeException 可以不必try，还可以继续throws，让使用者处理。\n\n下面来看看源码\n\n![异常Throwable类](Thinking-in-java-基础之异常/201608091509Throwable.PNG)\n\n![异常Error类](Thinking-in-java-基础之异常/201608091504Error.PNG)\n![异常Exception类](Thinking-in-java-基础之异常/201608091505Exception.PNG)\n![异常IOException类](Thinking-in-java-基础之异常/201608091505IOException.PNG)\n![异常RuntimeException类](Thinking-in-java-基础之异常/201608091506RuntimeException.PNG)\n\n我们可以看到除了Throwable之外的类，都是只有构造方法，而且我们从类的名字就能看出具体是什么异常。\n\n\n#### 为什么要用try 或者 throws\n\ntry是为了捕捉异常，而方法中throws是为了把方法抛出去。\n\n下面我们来看例子:\n\n例1\n\n```\npublic class ExceptionTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tExceptionTest exceptionTest=new ExceptionTest();\n\t\tSystem.out.println(\"======================\");\n\t\tSystem.out.println(exceptionTest.va());\n\t\tSystem.out.println(\"抛出异常后，后面代码仍可以执行\");\n\t\t\n\t}\n\tpublic Integer va() throws Exception{\n\t\tInteger ret = 0;\n\t\tret=1/0;\n\t\tSystem.out.println(\"上面有异常，后面......\");\n\t\treturn ret;\n\t}\n}\n\n```\n\n结果：\n\n```\n======================\njava.lang.ArithmeticException: / by zero\n\tat Exception.ExceptionTest.va(ExceptionTest.java:21)\n\tat Exception.ExceptionTest.main(ExceptionTest.java:15)\n\n```\nval()方法中ret=1/0;会抛出异常。\n\n例1中main方法中使用throws把异常抛出去，而main方法结束之后，程序就运行完了，但是Exception怎么办呢？只好在控制台打印出Exception了，同时，程序在产生异常的地方，程序就结束了。因此*System.out.println(\"抛出异常后，后面代码仍可以执行\");*是不会执行的。即使在val(),方法中*System.out.println(\"上面有异常，后面......\");*也是不会执行的，因为*ret=1/0;*已经让程序抛出了异常。 而下面的例子就不一样了。\n\n例2\n\n```\n\npublic class ExceptionTest {\n\tpublic static void main(String[] args) {\n\t\tExceptionTest exceptionTest=new ExceptionTest();\n\t\tSystem.out.println(\"======================\");\n\t\ttry {\n\t\t\tSystem.out.println(exceptionTest.va());\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"抛出异常后，后面代码仍可以执行\");\n\t\t\n\t}\n\tpublic Integer va() throws Exception{\n\t\tInteger ret = 0;\n\t\tret=1/0;\n\t\tSystem.out.println(\"上面有异常，后面......\");\n\t\treturn ret;\n\t}\n\t\n}\n\n```\n\n结果：\n\n```\n======================\njava.lang.ArithmeticException: / by zero\n\tat Exception.ExceptionTest.va(ExceptionTest.java:26)\n\tat Exception.ExceptionTest.main(ExceptionTest.java:16)\n抛出异常后，后面代码仍可以执行\n```\n在这个main中使用try catch 来捕捉异常，而异常捕捉后，后面的代码继续执行，因此*System.out.println(\"抛出异常后，后面代码仍可以执行\");*可以执行，就打印出信息了。但是同样val()方法中的*System.out.println(\"上面有异常，后面......\");*是不会执行的。\n####异常分类\n\n由上图可以看出Error和Exception是Throwable的子类\n\n#### 关键字 try catch finally throw throws 根据关键词来解释异常\n\ntry catch finally 是一组\n\nthrow是可以自己抛出一个异常对象\n\nthrows是声明一个异常可能被抛出，让调用者处理\n\n##### try 捕获异常 catch 处理异常 finally 有没有异常都执行\n\n例3\n\n```\npublic class ExceptionTest {\n\tpublic static void main(String[] args) {\n\t\tExceptionTest exceptionTest=new ExceptionTest();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value(){\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/0;\n\t\t} catch (Exception e) {\n\t\t\tret = 1;\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n```\n\n结果：\n\n```\ncatch:1\nfinally:2\n1\n```\n例4\n\n```\n\npublic class ExceptionTest {\n\tpublic static void main(String[] args) {\n\t\tExceptionTest exceptionTest=new ExceptionTest();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value(){\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/1;\n\t\t} catch (Exception e) {\n\t\t\tret = 3;\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\n```\n\n结果：\n\n```\n\nfinally:2\n2\n\n```\n\n例3例4这两个例子中，就能发现finally是不论在try{}中有没有异常，finally{}是必须要执行的，而catch(){}中呢，在try{}中有异常，catch(){}就会捕捉到。\n\n下面看一下catch的顺序\n\n例5:\n\n```\npublic class ExceptionTest2 {\n\tpublic static void main(String[] args) {\n\t\tExceptionTest2 exceptionTest=new ExceptionTest2();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value(){\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tSystem.out.println(\"try:\"+ret);\n\t\t\tret=1/0;\n\t\t\treturn ret;\n\t\t}catch(ArithmeticException e){\n\t\t\tSystem.out.println(\"ArithmeticException catch:\"+ret);\n\t\t\t//e.printStackTrace();\n\t\t}catch(NullPointerException e){\n\t\t\tSystem.out.println(\"NullPointer catch:\"+ret);\n\t\t\te.printStackTrace();\n\t\t} \n\t\tcatch (Exception e) {\n\t\t\tSystem.out.println(\"Exception catch:\"+ret);\n\t\t\te.printStackTrace();\n\t\t\tret =3;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t\t//return ret;\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n```\n\n结果:\n\n```\ntry:0\nArithmeticException catch:0\nfinally:2\n2\n```\n如果把Exception放在第一个catch的话，就会处错误，编译出错\n\n```\nCompiling ExceptionTest2.java.......\n\t\t}catch(ArithmeticException e){\n\t\t ^\n\t\t}catch(NullPointerException e){\n\t\t ^\n\t\t}catch (Exception e) {\n\t\t ^\n[Finished in 0.5s]\n\n```\n\n##### throw 抛出一个异常对象\n\n例6：\n\n```\npublic class ExceptionCatchTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value() throws Exception{\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/0;\n\t\t\tthrow new Exception();\n\t\t}catch(ArithmeticException e){\n\t\t\tSystem.out.println(\"ArithmeticException catch:\"+ret);\n\t\t\tthrow new Exception();\n\t\t}catch (Exception e) {\n\t\t\tret = 3;\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n```\n结果：\n```\nArithmeticException catch:0\nfinally:2\nException in thread \"main\" java.lang.Exception\n\tat Exception.ExceptionCatchTest.value(ExceptionCatchTest.java:23)\n\tat Exception.ExceptionCatchTest.main(ExceptionCatchTest.java:13)\n```\n\n例6上面在catch内部又抛出(throw)了一个 new Exception()；同时在方法中就会把Exception抛出到调用者处理。从而把Exception抛给main()方法处理，如果main方法中没有 throws Exception的话，就需要对*exceptionTest.value()*进行try catch 否则编译就会出错。\n\n##### throws 声明一个异常可能被抛出\n\n例7：\n\n```\npublic class ExceptionCatchTest {\n\tpublic static void main(String[] args)  {\n\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();\n\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value() throws Exception{\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/0;\n\t\t\tthrow new Exception();\n\t\t}catch(ArithmeticException e){\n\t\t\tSystem.out.println(\"ArithmeticException catch:\"+ret);\n\t\t}catch (Exception e) {\n\t\t\tret = 3;\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n```\n\n例7上面也说明了throws 关键字的用法，抛出Exception，给调用者处理异常。因此，在main()方法中，如果main方法中没有 throws Exception的话，就需要对*exceptionTest.value()*进行try catch 否则编译就会出错。\n\n```\ntry {\n\t\t\tSystem.out.println(exceptionTest.value());\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n```\n#### 最后要说一下执行异常的顺序\n\n例8\n```\npublic class ExceptionCatchTest {\n\tpublic static void main(String[] args)  {\n\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();\n\t\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value() {\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\tret=1/0;\n\t\t\treturn ret;\n\t\t}catch (Exception e) {\n\t\t\tret = 3;\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t}\n}\n\n```\n结果：\n```\ncatch:3\nfinally:2\n3\n```\n在try中执行，如果有异常try中的return不会返回，会到catch中，如果在catch中有return的话，当执行到这里的时候，会提前执行finally，然后才会执行catch中的return。\n\n例9：\n```\npublic class ExceptionCatchTest {\n\tpublic static void main(String[] args)  {\n\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();\n\t\t\tSystem.out.println(exceptionTest.value());\n\t}\n\tpublic Integer value() {\n\t\tInteger ret = 0;\n\t\ttry {\n\t\t\t//ret=1/0;\n\t\t\treturn ret;\n\t\t}catch (Exception e) {\n\t\t\tret = 3;\n\t\t\tSystem.out.println(\"catch:\"+ret);\n\t\t\treturn ret;\n\t\t} finally {\n\t\t\tret = 2;\n\t\t\tSystem.out.println(\"finally:\"+ret);\n\t\t}\n\t}\n}\n```\n结果:\n```\nfinally:2\n0\n```\n\n如果try中的代码正常，不会产生异常的话，会在try中执行到return的时候，优先执行finally，如果在finally有return的话，直接返回，没有的话，就会返回到try内的return。\n\n#### 到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。","slug":"Thinking-in-java-基础之异常","published":1,"updated":"2016-08-31T12:24:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79o006rugv53g2kl20e","content":"<h2 id=\"Thinking-in-java-基础之异常\"><a href=\"#Thinking-in-java-基础之异常\" class=\"headerlink\" title=\"Thinking in java 基础之异常\"></a>Thinking in java 基础之异常</h2><p>类图如下</p>\n<p><img src=\"/.io//201608031722.jpg\" alt=\"异常类图\"></p>\n<h4 id=\"异常概念\"><a href=\"#异常概念\" class=\"headerlink\" title=\"异常概念\"></a>异常概念</h4><p>checked 异常的一个问题是，有时候不允许抛出这样的异常。特别是，如果要覆盖超类中声明的方法，或者实现接口中声明的方法，而那个方法没有声明任何 checked 异常，那么新的实现也不能声明 checked 异常。因此必须预先处理异常。<br>Error我们不用处理。</p>\n<p>VirtualMachineError在程序中是不能处理的，这个一般属于虚拟机的问题，内存溢出和栈溢出。(OOM) </p>\n<p>Exception中的IOException必须try catch，这种文件资源是必须要捕捉的，文件要在finally中进行关闭。</p>\n<p>Exception中的RuntimeException 可以不必try，还可以继续throws，让使用者处理。</p>\n<p>下面来看看源码</p>\n<p><img src=\"/.io//201608091509Throwable.PNG\" alt=\"异常Throwable类\"></p>\n<p><img src=\"/.io//201608091504Error.PNG\" alt=\"异常Error类\"><br><img src=\"/.io//201608091505Exception.PNG\" alt=\"异常Exception类\"><br><img src=\"/.io//201608091505IOException.PNG\" alt=\"异常IOException类\"><br><img src=\"/.io//201608091506RuntimeException.PNG\" alt=\"异常RuntimeException类\"></p>\n<p>我们可以看到除了Throwable之外的类，都是只有构造方法，而且我们从类的名字就能看出具体是什么异常。</p>\n<h4 id=\"为什么要用try-或者-throws\"><a href=\"#为什么要用try-或者-throws\" class=\"headerlink\" title=\"为什么要用try 或者 throws\"></a>为什么要用try 或者 throws</h4><p>try是为了捕捉异常，而方法中throws是为了把方法抛出去。</p>\n<p>下面我们来看例子:</p>\n<p>例1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tExceptionTest exceptionTest=new ExceptionTest();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;======================&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.va());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;抛出异常后，后面代码仍可以执行&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer va() throws Exception&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\tret=1/0;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;上面有异常，后面......&quot;);</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================</span><br><span class=\"line\">java.lang.ArithmeticException: / by zero</span><br><span class=\"line\">\tat Exception.ExceptionTest.va(ExceptionTest.java:21)</span><br><span class=\"line\">\tat Exception.ExceptionTest.main(ExceptionTest.java:15)</span><br></pre></td></tr></table></figure>\n<p>val()方法中ret=1/0;会抛出异常。</p>\n<p>例1中main方法中使用throws把异常抛出去，而main方法结束之后，程序就运行完了，但是Exception怎么办呢？只好在控制台打印出Exception了，同时，程序在产生异常的地方，程序就结束了。因此<em>System.out.println(“抛出异常后，后面代码仍可以执行”);</em>是不会执行的。即使在val(),方法中<em>System.out.println(“上面有异常，后面……”);</em>也是不会执行的，因为<em>ret=1/0;</em>已经让程序抛出了异常。 而下面的例子就不一样了。</p>\n<p>例2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class ExceptionTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tExceptionTest exceptionTest=new ExceptionTest();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;======================&quot;);</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(exceptionTest.va());</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;抛出异常后，后面代码仍可以执行&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer va() throws Exception&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\tret=1/0;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;上面有异常，后面......&quot;);</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================</span><br><span class=\"line\">java.lang.ArithmeticException: / by zero</span><br><span class=\"line\">\tat Exception.ExceptionTest.va(ExceptionTest.java:26)</span><br><span class=\"line\">\tat Exception.ExceptionTest.main(ExceptionTest.java:16)</span><br><span class=\"line\">抛出异常后，后面代码仍可以执行</span><br></pre></td></tr></table></figure>\n<p>在这个main中使用try catch 来捕捉异常，而异常捕捉后，后面的代码继续执行，因此<em>System.out.println(“抛出异常后，后面代码仍可以执行”);</em>可以执行，就打印出信息了。但是同样val()方法中的<em>System.out.println(“上面有异常，后面……”);</em>是不会执行的。</p>\n<p>####异常分类</p>\n<p>由上图可以看出Error和Exception是Throwable的子类</p>\n<h4 id=\"关键字-try-catch-finally-throw-throws-根据关键词来解释异常\"><a href=\"#关键字-try-catch-finally-throw-throws-根据关键词来解释异常\" class=\"headerlink\" title=\"关键字 try catch finally throw throws 根据关键词来解释异常\"></a>关键字 try catch finally throw throws 根据关键词来解释异常</h4><p>try catch finally 是一组</p>\n<p>throw是可以自己抛出一个异常对象</p>\n<p>throws是声明一个异常可能被抛出，让调用者处理</p>\n<h5 id=\"try-捕获异常-catch-处理异常-finally-有没有异常都执行\"><a href=\"#try-捕获异常-catch-处理异常-finally-有没有异常都执行\" class=\"headerlink\" title=\"try 捕获异常 catch 处理异常 finally 有没有异常都执行\"></a>try 捕获异常 catch 处理异常 finally 有没有异常都执行</h5><p>例3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tExceptionTest exceptionTest=new ExceptionTest();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value()&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 1;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catch:1</span><br><span class=\"line\">finally:2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>例4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class ExceptionTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tExceptionTest exceptionTest=new ExceptionTest();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value()&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/1;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">finally:2</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>例3例4这两个例子中，就能发现finally是不论在try{}中有没有异常，finally{}是必须要执行的，而catch(){}中呢，在try{}中有异常，catch(){}就会捕捉到。</p>\n<p>下面看一下catch的顺序</p>\n<p>例5:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionTest2 &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tExceptionTest2 exceptionTest=new ExceptionTest2();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value()&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;try:&quot;+ret);</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;catch(ArithmeticException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class=\"line\">\t\t\t//e.printStackTrace();</span><br><span class=\"line\">\t\t&#125;catch(NullPointerException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;NullPointer catch:&quot;+ret);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\tcatch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;Exception catch:&quot;+ret);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tret =3;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t\t//return ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:0</span><br><span class=\"line\">ArithmeticException catch:0</span><br><span class=\"line\">finally:2</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>如果把Exception放在第一个catch的话，就会处错误，编译出错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiling ExceptionTest2.java.......</span><br><span class=\"line\">\t\t&#125;catch(ArithmeticException e)&#123;</span><br><span class=\"line\">\t\t ^</span><br><span class=\"line\">\t\t&#125;catch(NullPointerException e)&#123;</span><br><span class=\"line\">\t\t ^</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t ^</span><br><span class=\"line\">[Finished in 0.5s]</span><br></pre></td></tr></table></figure>\n<h5 id=\"throw-抛出一个异常对象\"><a href=\"#throw-抛出一个异常对象\" class=\"headerlink\" title=\"throw 抛出一个异常对象\"></a>throw 抛出一个异常对象</h5><p>例6：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionCatchTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value() throws Exception&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t\tthrow new Exception();</span><br><span class=\"line\">\t\t&#125;catch(ArithmeticException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class=\"line\">\t\t\tthrow new Exception();</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArithmeticException catch:0</span><br><span class=\"line\">finally:2</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.Exception</span><br><span class=\"line\">\tat Exception.ExceptionCatchTest.value(ExceptionCatchTest.java:23)</span><br><span class=\"line\">\tat Exception.ExceptionCatchTest.main(ExceptionCatchTest.java:13)</span><br></pre></td></tr></table></figure></p>\n<p>例6上面在catch内部又抛出(throw)了一个 new Exception()；同时在方法中就会把Exception抛出到调用者处理。从而把Exception抛给main()方法处理，如果main方法中没有 throws Exception的话，就需要对<em>exceptionTest.value()</em>进行try catch 否则编译就会出错。</p>\n<h5 id=\"throws-声明一个异常可能被抛出\"><a href=\"#throws-声明一个异常可能被抛出\" class=\"headerlink\" title=\"throws 声明一个异常可能被抛出\"></a>throws 声明一个异常可能被抛出</h5><p>例7：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionCatchTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)  &#123;</span><br><span class=\"line\">\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value() throws Exception&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t\tthrow new Exception();</span><br><span class=\"line\">\t\t&#125;catch(ArithmeticException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例7上面也说明了throws 关键字的用法，抛出Exception，给调用者处理异常。因此，在main()方法中，如果main方法中没有 throws Exception的话，就需要对<em>exceptionTest.value()</em>进行try catch 否则编译就会出错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后要说一下执行异常的顺序\"><a href=\"#最后要说一下执行异常的顺序\" class=\"headerlink\" title=\"最后要说一下执行异常的顺序\"></a>最后要说一下执行异常的顺序</h4><p>例8<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionCatchTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)  &#123;</span><br><span class=\"line\">\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class=\"line\">\t\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value() &#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catch:3</span><br><span class=\"line\">finally:2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p>在try中执行，如果有异常try中的return不会返回，会到catch中，如果在catch中有return的话，当执行到这里的时候，会提前执行finally，然后才会执行catch中的return。</p>\n<p>例9：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionCatchTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)  &#123;</span><br><span class=\"line\">\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class=\"line\">\t\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value() &#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t//ret=1/0;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finally:2</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p>如果try中的代码正常，不会产生异常的话，会在try中执行到return的时候，优先执行finally，如果在finally有return的话，直接返回，没有的话，就会返回到try内的return。</p>\n<h4 id=\"到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。\"><a href=\"#到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。\" class=\"headerlink\" title=\"到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。\"></a>到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Thinking-in-java-基础之异常\"><a href=\"#Thinking-in-java-基础之异常\" class=\"headerlink\" title=\"Thinking in java 基础之异常\"></a>Thinking in java 基础之异常</h2><p>类图如下</p>\n<p><img src=\"/.io//201608031722.jpg\" alt=\"异常类图\"></p>\n<h4 id=\"异常概念\"><a href=\"#异常概念\" class=\"headerlink\" title=\"异常概念\"></a>异常概念</h4><p>checked 异常的一个问题是，有时候不允许抛出这样的异常。特别是，如果要覆盖超类中声明的方法，或者实现接口中声明的方法，而那个方法没有声明任何 checked 异常，那么新的实现也不能声明 checked 异常。因此必须预先处理异常。<br>Error我们不用处理。</p>\n<p>VirtualMachineError在程序中是不能处理的，这个一般属于虚拟机的问题，内存溢出和栈溢出。(OOM) </p>\n<p>Exception中的IOException必须try catch，这种文件资源是必须要捕捉的，文件要在finally中进行关闭。</p>\n<p>Exception中的RuntimeException 可以不必try，还可以继续throws，让使用者处理。</p>\n<p>下面来看看源码</p>\n<p><img src=\"/.io//201608091509Throwable.PNG\" alt=\"异常Throwable类\"></p>\n<p><img src=\"/.io//201608091504Error.PNG\" alt=\"异常Error类\"><br><img src=\"/.io//201608091505Exception.PNG\" alt=\"异常Exception类\"><br><img src=\"/.io//201608091505IOException.PNG\" alt=\"异常IOException类\"><br><img src=\"/.io//201608091506RuntimeException.PNG\" alt=\"异常RuntimeException类\"></p>\n<p>我们可以看到除了Throwable之外的类，都是只有构造方法，而且我们从类的名字就能看出具体是什么异常。</p>\n<h4 id=\"为什么要用try-或者-throws\"><a href=\"#为什么要用try-或者-throws\" class=\"headerlink\" title=\"为什么要用try 或者 throws\"></a>为什么要用try 或者 throws</h4><p>try是为了捕捉异常，而方法中throws是为了把方法抛出去。</p>\n<p>下面我们来看例子:</p>\n<p>例1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tExceptionTest exceptionTest=new ExceptionTest();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;======================&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.va());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;抛出异常后，后面代码仍可以执行&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer va() throws Exception&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\tret=1/0;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;上面有异常，后面......&quot;);</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================</span><br><span class=\"line\">java.lang.ArithmeticException: / by zero</span><br><span class=\"line\">\tat Exception.ExceptionTest.va(ExceptionTest.java:21)</span><br><span class=\"line\">\tat Exception.ExceptionTest.main(ExceptionTest.java:15)</span><br></pre></td></tr></table></figure>\n<p>val()方法中ret=1/0;会抛出异常。</p>\n<p>例1中main方法中使用throws把异常抛出去，而main方法结束之后，程序就运行完了，但是Exception怎么办呢？只好在控制台打印出Exception了，同时，程序在产生异常的地方，程序就结束了。因此<em>System.out.println(“抛出异常后，后面代码仍可以执行”);</em>是不会执行的。即使在val(),方法中<em>System.out.println(“上面有异常，后面……”);</em>也是不会执行的，因为<em>ret=1/0;</em>已经让程序抛出了异常。 而下面的例子就不一样了。</p>\n<p>例2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class ExceptionTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tExceptionTest exceptionTest=new ExceptionTest();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;======================&quot;);</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(exceptionTest.va());</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;抛出异常后，后面代码仍可以执行&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer va() throws Exception&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\tret=1/0;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;上面有异常，后面......&quot;);</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">======================</span><br><span class=\"line\">java.lang.ArithmeticException: / by zero</span><br><span class=\"line\">\tat Exception.ExceptionTest.va(ExceptionTest.java:26)</span><br><span class=\"line\">\tat Exception.ExceptionTest.main(ExceptionTest.java:16)</span><br><span class=\"line\">抛出异常后，后面代码仍可以执行</span><br></pre></td></tr></table></figure>\n<p>在这个main中使用try catch 来捕捉异常，而异常捕捉后，后面的代码继续执行，因此<em>System.out.println(“抛出异常后，后面代码仍可以执行”);</em>可以执行，就打印出信息了。但是同样val()方法中的<em>System.out.println(“上面有异常，后面……”);</em>是不会执行的。</p>\n<p>####异常分类</p>\n<p>由上图可以看出Error和Exception是Throwable的子类</p>\n<h4 id=\"关键字-try-catch-finally-throw-throws-根据关键词来解释异常\"><a href=\"#关键字-try-catch-finally-throw-throws-根据关键词来解释异常\" class=\"headerlink\" title=\"关键字 try catch finally throw throws 根据关键词来解释异常\"></a>关键字 try catch finally throw throws 根据关键词来解释异常</h4><p>try catch finally 是一组</p>\n<p>throw是可以自己抛出一个异常对象</p>\n<p>throws是声明一个异常可能被抛出，让调用者处理</p>\n<h5 id=\"try-捕获异常-catch-处理异常-finally-有没有异常都执行\"><a href=\"#try-捕获异常-catch-处理异常-finally-有没有异常都执行\" class=\"headerlink\" title=\"try 捕获异常 catch 处理异常 finally 有没有异常都执行\"></a>try 捕获异常 catch 处理异常 finally 有没有异常都执行</h5><p>例3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tExceptionTest exceptionTest=new ExceptionTest();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value()&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 1;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catch:1</span><br><span class=\"line\">finally:2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>例4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class ExceptionTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tExceptionTest exceptionTest=new ExceptionTest();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value()&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/1;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">finally:2</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>例3例4这两个例子中，就能发现finally是不论在try{}中有没有异常，finally{}是必须要执行的，而catch(){}中呢，在try{}中有异常，catch(){}就会捕捉到。</p>\n<p>下面看一下catch的顺序</p>\n<p>例5:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionTest2 &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tExceptionTest2 exceptionTest=new ExceptionTest2();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value()&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;try:&quot;+ret);</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;catch(ArithmeticException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class=\"line\">\t\t\t//e.printStackTrace();</span><br><span class=\"line\">\t\t&#125;catch(NullPointerException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;NullPointer catch:&quot;+ret);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\tcatch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;Exception catch:&quot;+ret);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tret =3;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t\t//return ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:0</span><br><span class=\"line\">ArithmeticException catch:0</span><br><span class=\"line\">finally:2</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>如果把Exception放在第一个catch的话，就会处错误，编译出错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiling ExceptionTest2.java.......</span><br><span class=\"line\">\t\t&#125;catch(ArithmeticException e)&#123;</span><br><span class=\"line\">\t\t ^</span><br><span class=\"line\">\t\t&#125;catch(NullPointerException e)&#123;</span><br><span class=\"line\">\t\t ^</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t ^</span><br><span class=\"line\">[Finished in 0.5s]</span><br></pre></td></tr></table></figure>\n<h5 id=\"throw-抛出一个异常对象\"><a href=\"#throw-抛出一个异常对象\" class=\"headerlink\" title=\"throw 抛出一个异常对象\"></a>throw 抛出一个异常对象</h5><p>例6：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionCatchTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value() throws Exception&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t\tthrow new Exception();</span><br><span class=\"line\">\t\t&#125;catch(ArithmeticException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class=\"line\">\t\t\tthrow new Exception();</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArithmeticException catch:0</span><br><span class=\"line\">finally:2</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.Exception</span><br><span class=\"line\">\tat Exception.ExceptionCatchTest.value(ExceptionCatchTest.java:23)</span><br><span class=\"line\">\tat Exception.ExceptionCatchTest.main(ExceptionCatchTest.java:13)</span><br></pre></td></tr></table></figure></p>\n<p>例6上面在catch内部又抛出(throw)了一个 new Exception()；同时在方法中就会把Exception抛出到调用者处理。从而把Exception抛给main()方法处理，如果main方法中没有 throws Exception的话，就需要对<em>exceptionTest.value()</em>进行try catch 否则编译就会出错。</p>\n<h5 id=\"throws-声明一个异常可能被抛出\"><a href=\"#throws-声明一个异常可能被抛出\" class=\"headerlink\" title=\"throws 声明一个异常可能被抛出\"></a>throws 声明一个异常可能被抛出</h5><p>例7：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionCatchTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)  &#123;</span><br><span class=\"line\">\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class=\"line\">\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value() throws Exception&#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t\tthrow new Exception();</span><br><span class=\"line\">\t\t&#125;catch(ArithmeticException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例7上面也说明了throws 关键字的用法，抛出Exception，给调用者处理异常。因此，在main()方法中，如果main方法中没有 throws Exception的话，就需要对<em>exceptionTest.value()</em>进行try catch 否则编译就会出错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后要说一下执行异常的顺序\"><a href=\"#最后要说一下执行异常的顺序\" class=\"headerlink\" title=\"最后要说一下执行异常的顺序\"></a>最后要说一下执行异常的顺序</h4><p>例8<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionCatchTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)  &#123;</span><br><span class=\"line\">\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class=\"line\">\t\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value() &#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tret=1/0;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catch:3</span><br><span class=\"line\">finally:2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p>在try中执行，如果有异常try中的return不会返回，会到catch中，如果在catch中有return的话，当执行到这里的时候，会提前执行finally，然后才会执行catch中的return。</p>\n<p>例9：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExceptionCatchTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)  &#123;</span><br><span class=\"line\">\t\tExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class=\"line\">\t\t\tSystem.out.println(exceptionTest.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer value() &#123;</span><br><span class=\"line\">\t\tInteger ret = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t//ret=1/0;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\tret = 3;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;catch:&quot;+ret);</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tret = 2;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;finally:&quot;+ret);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finally:2</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p>如果try中的代码正常，不会产生异常的话，会在try中执行到return的时候，优先执行finally，如果在finally有return的话，直接返回，没有的话，就会返回到try内的return。</p>\n<h4 id=\"到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。\"><a href=\"#到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。\" class=\"headerlink\" title=\"到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。\"></a>到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。</h4>"},{"title":"Tomcat源码阅读之Container责任链","date":"2018-04-19T23:39:00.000Z","description":"研究tomcat系列,Container内部怎么进行请求处理？","_content":"\n上篇讲到Connector到Container的转换，本文主要是Container内部的转换，四个组件Engine、Host、Context、Wrapper。\n顺便提一下Pipeline和Value.\n\n接上文的CoyoteAdapter.service()`connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);`,\n\n如图如图\n![请求流图](/Tomcat源码阅读之Container责任链/665375-20160119184923890-1995839223.png)\n![请求流图](/Tomcat源码阅读之Container责任链/818454-20161025170804984-654825756.png)\n默认的Engine是StandardEngine，这个是在EngineRuleSet中通过digester设置的，\n```\n\n        digester.addObjectCreate(prefix + \"Engine\",\n                                 \"org.apache.catalina.core.StandardEngine\",\n                                 \"className\");\n        digester.addSetProperties(prefix + \"Engine\");\n        digester.addRule(prefix + \"Engine\",\n                         new LifecycleListenerRule\n                         (\"org.apache.catalina.startup.EngineConfig\",\n                          \"engineConfigClass\"));\n        digester.addSetNext(prefix + \"Engine\",\n                            \"setContainer\",\n                            \"org.apache.catalina.Engine\");\n```\n然后这个`org.apache.catalina.core.StandardEngine`就是connector.getService().getContainer()的实际Container，所有的Container实例化的时候，都有pipeline和setBasic()。\n\nStandardEngine构造方法\n```\n    public StandardEngine() {\n\n        super();\n        pipeline.setBasic(new StandardEngineValve());\n        /* Set the jmvRoute using the system property jvmRoute */\n        try {\n            setJvmRoute(System.getProperty(\"jvmRoute\"));\n        } catch(Exception ex) {\n            log.warn(sm.getString(\"standardEngine.jvmRouteFail\"));\n        }\n        // By default, the engine will hold the reloading thread\n        backgroundProcessorDelay = 10;\n\n    }\n\n```\nContainerBase中会有这个\n```\n protected final Pipeline pipeline = new StandardPipeline(this);\n```\n\n这样再Engine这个级别的Container中就有一个流水线了StandardPipeline，然后这个流水线的getFirst(),这里的getFirst是StandardEngine.构造函数setBasic方法给到的一个StandardEngineValve(),如下图，这样就把StandardEngineValve就是`connector.getService().getContainer().getPipeline().getFirst()` (如果没有first的话)的最终效果，这个也是最后一个Valve(阀门)。\n如果有其他的Valve呢，EngineRuleSet中就会读取到对应的Valve调用addValve，添加到base的前面(链表操作),因为每一个继承ValveBase都要实现一个方法`invoke`在这个方法中最后都会执行一个`        getNext().invoke(request, response);`这样就找到了下一个Next，直到最后一个到StandardXXXValve。接着下一步执行。\n下面是StandardPipeline\n```\n @Override\n    public void addValve(Valve valve) {\n\n        // Validate that we can add this Valve\n        if (valve instanceof Contained)\n            ((Contained) valve).setContainer(this.container);\n\n        // Start the new component if necessary\n        if (getState().isAvailable()) {\n            if (valve instanceof Lifecycle) {\n                try {\n                    ((Lifecycle) valve).start();\n                } catch (LifecycleException e) {\n                    log.error(\"StandardPipeline.addValve: start: \", e);\n                }\n            }\n        }\n        //链表操作,如果没有第一个当前的就是第一个，\n        // Add this Valve to the set associated with this Pipeline\n        if (first == null) {\n            first = valve;\n            valve.setNext(basic);\n        } else {\n        //如果有把当前的就设为第一个,\n            Valve current = first;\n            while (current != null) {\n            //直到那个是StandardXXXValve,的时候就把传入的这个valve插入进去，并valve的下一个保证是最后一个StandardXXXValve.\n                if (current.getNext() == basic) {\n                    current.setNext(valve);\n                    valve.setNext(basic);\n                    break;\n                }\n            //然后当前的下一个赋值给当前这个\n                current = current.getNext();\n            }\n        }\n\n        container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);\n    }\n@Override\n    public void setBasic(Valve valve) {\n\n        // Change components if necessary\n        Valve oldBasic = this.basic;\n        if (oldBasic == valve)\n            return;\n\n        // Stop the old component if necessary\n        if (oldBasic != null) {\n            if (getState().isAvailable() && (oldBasic instanceof Lifecycle)) {\n                try {\n                    ((Lifecycle) oldBasic).stop();\n                } catch (LifecycleException e) {\n                    log.error(\"StandardPipeline.setBasic: stop\", e);\n                }\n            }\n            if (oldBasic instanceof Contained) {\n                try {\n                    ((Contained) oldBasic).setContainer(null);\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                }\n            }\n        }\n\n        // Start the new component if necessary\n        if (valve == null)\n            return;\n        if (valve instanceof Contained) {\n            ((Contained) valve).setContainer(this.container);\n        }\n        if (getState().isAvailable() && valve instanceof Lifecycle) {\n            try {\n                ((Lifecycle) valve).start();\n            } catch (LifecycleException e) {\n                log.error(\"StandardPipeline.setBasic: start\", e);\n                return;\n            }\n        }\n\n        // Update the pipeline\n        Valve current = first;\n        while (current != null) {\n            if (current.getNext() == oldBasic) {\n                current.setNext(valve);\n                break;\n            }\n            current = current.getNext();\n        }\n\n        this.basic = valve;//设置base\n\n    }\n    @Override\n    public Valve getFirst() {\n        if (first != null) {\n            return first;\n        }\n\n        return basic;\n    }\n\n```\n这样就把StandardEngineValve就是Engine的最后一个接着调用的时候就找到Host。\n```\n @Override\n    public final void invoke(Request request, Response response)\n        throws IOException, ServletException {\n\n        // Select the Host to be used for this Request\n        Host host = request.getHost();\n        if (host == null) {\n            response.sendError\n                (HttpServletResponse.SC_BAD_REQUEST,\n                 sm.getString(\"standardEngine.noHost\",\n                              request.getServerName()));\n            return;\n        }\n        if (request.isAsyncSupported()) {\n            request.setAsyncSupported(host.getPipeline().isAsyncSupported());\n        }\n\n        // Ask this Host to process this request\n        host.getPipeline().getFirst().invoke(request, response);\n\n    }\n```\n而同样host设置的配置是在HostRuleSet中。其他的步骤和上一面一样哦。Engine---->Host---->Context---->Wrapper\n这样我们直接就找到最后一层的StandardWrapper.找到最后一个StandardWrapperValve阀门的invoke方法\n这个方法中的有个Filter.\n\n```\n\n // Create the filter chain for this request\n        ApplicationFilterChain filterChain =\n                ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);\n        // Call the filter chain for this request\n        // NOTE: This also calls the servlet's service() method\n        filterChain.doFilter(request.getRequest(),\n                response.getResponse());\n                 \n```\n\n这里也有一个注释 Call the filter chain for this request，调用request的过滤器链`calls the servlet's service() method`调用servlet的service()方法。\n\nApplicationFilterChain这个类中。doFilter最后，`servlet.service(request, response);`\n\n\n#### Pipeline Value\n\n管道，阀门，责任链，外界进来的请求，先从Connector到Container,中间经过协议处理，然后在Container中，依次讲请求通过各种管道，每一层管道的最后阀门都是StandardXXXValve,然后交到下一层的第一个阀门再进行处理，最终会流到Servlet.service(),这里就是我们正常写的代码，`doGet();doPost();`\n\nHttpServlet.service();\n```\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n\n        String method = req.getMethod();\n\n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);//Get\n            } else {\n                long ifModifiedSince;\n                try {\n                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                } catch (IllegalArgumentException iae) {\n                    // Invalid date header - proceed as if none was set\n                    ifModifiedSince = -1;\n                }\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n\n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n\n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);//Post\n\n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);\n\n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n\n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n\n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n\n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n\n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n\n```\n\n至此，用户请求的URL就给我们处理了，写doGet，doPost等等，这一个阶段的Tomcat源码就先到这里，告一段落！\n\n             \n系列文章\n\n- [Tomcat源码阅读之从server.xml看组件关系](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/)\n- [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)\n- [Tomcat源码阅读之URL请求解析](http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/)\n- [Tomcat源码阅读之Container责任链](https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/)\n\n参考文献：\n\n- [Tomcat中的设计模式](https://www.cnblogs.com/coldridgeValley/p/6606271.html)\n- 《深入剖析Tomcat》\n","source":"_posts/Tomcat源码阅读之Container责任链.md","raw":"---\ntitle: Tomcat源码阅读之Container责任链\ndate: 2018-04-20 07:39:00\ntags: tomcat\ncategories: java\ndescription: \"研究tomcat系列,Container内部怎么进行请求处理？\"\n---\n\n上篇讲到Connector到Container的转换，本文主要是Container内部的转换，四个组件Engine、Host、Context、Wrapper。\n顺便提一下Pipeline和Value.\n\n接上文的CoyoteAdapter.service()`connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);`,\n\n如图如图\n![请求流图](/Tomcat源码阅读之Container责任链/665375-20160119184923890-1995839223.png)\n![请求流图](/Tomcat源码阅读之Container责任链/818454-20161025170804984-654825756.png)\n默认的Engine是StandardEngine，这个是在EngineRuleSet中通过digester设置的，\n```\n\n        digester.addObjectCreate(prefix + \"Engine\",\n                                 \"org.apache.catalina.core.StandardEngine\",\n                                 \"className\");\n        digester.addSetProperties(prefix + \"Engine\");\n        digester.addRule(prefix + \"Engine\",\n                         new LifecycleListenerRule\n                         (\"org.apache.catalina.startup.EngineConfig\",\n                          \"engineConfigClass\"));\n        digester.addSetNext(prefix + \"Engine\",\n                            \"setContainer\",\n                            \"org.apache.catalina.Engine\");\n```\n然后这个`org.apache.catalina.core.StandardEngine`就是connector.getService().getContainer()的实际Container，所有的Container实例化的时候，都有pipeline和setBasic()。\n\nStandardEngine构造方法\n```\n    public StandardEngine() {\n\n        super();\n        pipeline.setBasic(new StandardEngineValve());\n        /* Set the jmvRoute using the system property jvmRoute */\n        try {\n            setJvmRoute(System.getProperty(\"jvmRoute\"));\n        } catch(Exception ex) {\n            log.warn(sm.getString(\"standardEngine.jvmRouteFail\"));\n        }\n        // By default, the engine will hold the reloading thread\n        backgroundProcessorDelay = 10;\n\n    }\n\n```\nContainerBase中会有这个\n```\n protected final Pipeline pipeline = new StandardPipeline(this);\n```\n\n这样再Engine这个级别的Container中就有一个流水线了StandardPipeline，然后这个流水线的getFirst(),这里的getFirst是StandardEngine.构造函数setBasic方法给到的一个StandardEngineValve(),如下图，这样就把StandardEngineValve就是`connector.getService().getContainer().getPipeline().getFirst()` (如果没有first的话)的最终效果，这个也是最后一个Valve(阀门)。\n如果有其他的Valve呢，EngineRuleSet中就会读取到对应的Valve调用addValve，添加到base的前面(链表操作),因为每一个继承ValveBase都要实现一个方法`invoke`在这个方法中最后都会执行一个`        getNext().invoke(request, response);`这样就找到了下一个Next，直到最后一个到StandardXXXValve。接着下一步执行。\n下面是StandardPipeline\n```\n @Override\n    public void addValve(Valve valve) {\n\n        // Validate that we can add this Valve\n        if (valve instanceof Contained)\n            ((Contained) valve).setContainer(this.container);\n\n        // Start the new component if necessary\n        if (getState().isAvailable()) {\n            if (valve instanceof Lifecycle) {\n                try {\n                    ((Lifecycle) valve).start();\n                } catch (LifecycleException e) {\n                    log.error(\"StandardPipeline.addValve: start: \", e);\n                }\n            }\n        }\n        //链表操作,如果没有第一个当前的就是第一个，\n        // Add this Valve to the set associated with this Pipeline\n        if (first == null) {\n            first = valve;\n            valve.setNext(basic);\n        } else {\n        //如果有把当前的就设为第一个,\n            Valve current = first;\n            while (current != null) {\n            //直到那个是StandardXXXValve,的时候就把传入的这个valve插入进去，并valve的下一个保证是最后一个StandardXXXValve.\n                if (current.getNext() == basic) {\n                    current.setNext(valve);\n                    valve.setNext(basic);\n                    break;\n                }\n            //然后当前的下一个赋值给当前这个\n                current = current.getNext();\n            }\n        }\n\n        container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);\n    }\n@Override\n    public void setBasic(Valve valve) {\n\n        // Change components if necessary\n        Valve oldBasic = this.basic;\n        if (oldBasic == valve)\n            return;\n\n        // Stop the old component if necessary\n        if (oldBasic != null) {\n            if (getState().isAvailable() && (oldBasic instanceof Lifecycle)) {\n                try {\n                    ((Lifecycle) oldBasic).stop();\n                } catch (LifecycleException e) {\n                    log.error(\"StandardPipeline.setBasic: stop\", e);\n                }\n            }\n            if (oldBasic instanceof Contained) {\n                try {\n                    ((Contained) oldBasic).setContainer(null);\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                }\n            }\n        }\n\n        // Start the new component if necessary\n        if (valve == null)\n            return;\n        if (valve instanceof Contained) {\n            ((Contained) valve).setContainer(this.container);\n        }\n        if (getState().isAvailable() && valve instanceof Lifecycle) {\n            try {\n                ((Lifecycle) valve).start();\n            } catch (LifecycleException e) {\n                log.error(\"StandardPipeline.setBasic: start\", e);\n                return;\n            }\n        }\n\n        // Update the pipeline\n        Valve current = first;\n        while (current != null) {\n            if (current.getNext() == oldBasic) {\n                current.setNext(valve);\n                break;\n            }\n            current = current.getNext();\n        }\n\n        this.basic = valve;//设置base\n\n    }\n    @Override\n    public Valve getFirst() {\n        if (first != null) {\n            return first;\n        }\n\n        return basic;\n    }\n\n```\n这样就把StandardEngineValve就是Engine的最后一个接着调用的时候就找到Host。\n```\n @Override\n    public final void invoke(Request request, Response response)\n        throws IOException, ServletException {\n\n        // Select the Host to be used for this Request\n        Host host = request.getHost();\n        if (host == null) {\n            response.sendError\n                (HttpServletResponse.SC_BAD_REQUEST,\n                 sm.getString(\"standardEngine.noHost\",\n                              request.getServerName()));\n            return;\n        }\n        if (request.isAsyncSupported()) {\n            request.setAsyncSupported(host.getPipeline().isAsyncSupported());\n        }\n\n        // Ask this Host to process this request\n        host.getPipeline().getFirst().invoke(request, response);\n\n    }\n```\n而同样host设置的配置是在HostRuleSet中。其他的步骤和上一面一样哦。Engine---->Host---->Context---->Wrapper\n这样我们直接就找到最后一层的StandardWrapper.找到最后一个StandardWrapperValve阀门的invoke方法\n这个方法中的有个Filter.\n\n```\n\n // Create the filter chain for this request\n        ApplicationFilterChain filterChain =\n                ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);\n        // Call the filter chain for this request\n        // NOTE: This also calls the servlet's service() method\n        filterChain.doFilter(request.getRequest(),\n                response.getResponse());\n                 \n```\n\n这里也有一个注释 Call the filter chain for this request，调用request的过滤器链`calls the servlet's service() method`调用servlet的service()方法。\n\nApplicationFilterChain这个类中。doFilter最后，`servlet.service(request, response);`\n\n\n#### Pipeline Value\n\n管道，阀门，责任链，外界进来的请求，先从Connector到Container,中间经过协议处理，然后在Container中，依次讲请求通过各种管道，每一层管道的最后阀门都是StandardXXXValve,然后交到下一层的第一个阀门再进行处理，最终会流到Servlet.service(),这里就是我们正常写的代码，`doGet();doPost();`\n\nHttpServlet.service();\n```\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n\n        String method = req.getMethod();\n\n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);//Get\n            } else {\n                long ifModifiedSince;\n                try {\n                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                } catch (IllegalArgumentException iae) {\n                    // Invalid date header - proceed as if none was set\n                    ifModifiedSince = -1;\n                }\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n\n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n\n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);//Post\n\n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);\n\n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n\n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n\n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n\n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n\n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n\n```\n\n至此，用户请求的URL就给我们处理了，写doGet，doPost等等，这一个阶段的Tomcat源码就先到这里，告一段落！\n\n             \n系列文章\n\n- [Tomcat源码阅读之从server.xml看组件关系](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/)\n- [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)\n- [Tomcat源码阅读之URL请求解析](http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/)\n- [Tomcat源码阅读之Container责任链](https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/)\n\n参考文献：\n\n- [Tomcat中的设计模式](https://www.cnblogs.com/coldridgeValley/p/6606271.html)\n- 《深入剖析Tomcat》\n","slug":"Tomcat源码阅读之Container责任链","published":1,"updated":"2018-05-14T09:12:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79p006uugv5q1kwc39r","content":"<p>上篇讲到Connector到Container的转换，本文主要是Container内部的转换，四个组件Engine、Host、Context、Wrapper。<br>顺便提一下Pipeline和Value.</p>\n<p>接上文的CoyoteAdapter.service()<code>connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</code>,</p>\n<p>如图如图<br><img src=\"/.io//665375-20160119184923890-1995839223.png\" alt=\"请求流图\"><br><img src=\"/.io//818454-20161025170804984-654825756.png\" alt=\"请求流图\"><br>默认的Engine是StandardEngine，这个是在EngineRuleSet中通过digester设置的，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">digester.addObjectCreate(prefix + &quot;Engine&quot;,</span><br><span class=\"line\">                         &quot;org.apache.catalina.core.StandardEngine&quot;,</span><br><span class=\"line\">                         &quot;className&quot;);</span><br><span class=\"line\">digester.addSetProperties(prefix + &quot;Engine&quot;);</span><br><span class=\"line\">digester.addRule(prefix + &quot;Engine&quot;,</span><br><span class=\"line\">                 new LifecycleListenerRule</span><br><span class=\"line\">                 (&quot;org.apache.catalina.startup.EngineConfig&quot;,</span><br><span class=\"line\">                  &quot;engineConfigClass&quot;));</span><br><span class=\"line\">digester.addSetNext(prefix + &quot;Engine&quot;,</span><br><span class=\"line\">                    &quot;setContainer&quot;,</span><br><span class=\"line\">                    &quot;org.apache.catalina.Engine&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>然后这个<code>org.apache.catalina.core.StandardEngine</code>就是connector.getService().getContainer()的实际Container，所有的Container实例化的时候，都有pipeline和setBasic()。</p>\n<p>StandardEngine构造方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public StandardEngine() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    super();</span><br><span class=\"line\">    pipeline.setBasic(new StandardEngineValve());</span><br><span class=\"line\">    /* Set the jmvRoute using the system property jvmRoute */</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        setJvmRoute(System.getProperty(&quot;jvmRoute&quot;));</span><br><span class=\"line\">    &#125; catch(Exception ex) &#123;</span><br><span class=\"line\">        log.warn(sm.getString(&quot;standardEngine.jvmRouteFail&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // By default, the engine will hold the reloading thread</span><br><span class=\"line\">    backgroundProcessorDelay = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ContainerBase中会有这个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected final Pipeline pipeline = new StandardPipeline(this);</span><br></pre></td></tr></table></figure></p>\n<p>这样再Engine这个级别的Container中就有一个流水线了StandardPipeline，然后这个流水线的getFirst(),这里的getFirst是StandardEngine.构造函数setBasic方法给到的一个StandardEngineValve(),如下图，这样就把StandardEngineValve就是<code>connector.getService().getContainer().getPipeline().getFirst()</code> (如果没有first的话)的最终效果，这个也是最后一个Valve(阀门)。<br>如果有其他的Valve呢，EngineRuleSet中就会读取到对应的Valve调用addValve，添加到base的前面(链表操作),因为每一个继承ValveBase都要实现一个方法<code>invoke</code>在这个方法中最后都会执行一个<code>getNext().invoke(request, response);</code>这样就找到了下一个Next，直到最后一个到StandardXXXValve。接着下一步执行。<br>下面是StandardPipeline<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> @Override</span><br><span class=\"line\">    public void addValve(Valve valve) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Validate that we can add this Valve</span><br><span class=\"line\">        if (valve instanceof Contained)</span><br><span class=\"line\">            ((Contained) valve).setContainer(this.container);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Start the new component if necessary</span><br><span class=\"line\">        if (getState().isAvailable()) &#123;</span><br><span class=\"line\">            if (valve instanceof Lifecycle) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    ((Lifecycle) valve).start();</span><br><span class=\"line\">                &#125; catch (LifecycleException e) &#123;</span><br><span class=\"line\">                    log.error(&quot;StandardPipeline.addValve: start: &quot;, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //链表操作,如果没有第一个当前的就是第一个，</span><br><span class=\"line\">        // Add this Valve to the set associated with this Pipeline</span><br><span class=\"line\">        if (first == null) &#123;</span><br><span class=\"line\">            first = valve;</span><br><span class=\"line\">            valve.setNext(basic);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">        //如果有把当前的就设为第一个,</span><br><span class=\"line\">            Valve current = first;</span><br><span class=\"line\">            while (current != null) &#123;</span><br><span class=\"line\">            //直到那个是StandardXXXValve,的时候就把传入的这个valve插入进去，并valve的下一个保证是最后一个StandardXXXValve.</span><br><span class=\"line\">                if (current.getNext() == basic) &#123;</span><br><span class=\"line\">                    current.setNext(valve);</span><br><span class=\"line\">                    valve.setNext(basic);</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            //然后当前的下一个赋值给当前这个</span><br><span class=\"line\">                current = current.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public void setBasic(Valve valve) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Change components if necessary</span><br><span class=\"line\">        Valve oldBasic = this.basic;</span><br><span class=\"line\">        if (oldBasic == valve)</span><br><span class=\"line\">            return;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Stop the old component if necessary</span><br><span class=\"line\">        if (oldBasic != null) &#123;</span><br><span class=\"line\">            if (getState().isAvailable() &amp;&amp; (oldBasic instanceof Lifecycle)) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    ((Lifecycle) oldBasic).stop();</span><br><span class=\"line\">                &#125; catch (LifecycleException e) &#123;</span><br><span class=\"line\">                    log.error(&quot;StandardPipeline.setBasic: stop&quot;, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (oldBasic instanceof Contained) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    ((Contained) oldBasic).setContainer(null);</span><br><span class=\"line\">                &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">                    ExceptionUtils.handleThrowable(t);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Start the new component if necessary</span><br><span class=\"line\">        if (valve == null)</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        if (valve instanceof Contained) &#123;</span><br><span class=\"line\">            ((Contained) valve).setContainer(this.container);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (getState().isAvailable() &amp;&amp; valve instanceof Lifecycle) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                ((Lifecycle) valve).start();</span><br><span class=\"line\">            &#125; catch (LifecycleException e) &#123;</span><br><span class=\"line\">                log.error(&quot;StandardPipeline.setBasic: start&quot;, e);</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Update the pipeline</span><br><span class=\"line\">        Valve current = first;</span><br><span class=\"line\">        while (current != null) &#123;</span><br><span class=\"line\">            if (current.getNext() == oldBasic) &#123;</span><br><span class=\"line\">                current.setNext(valve);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current = current.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.basic = valve;//设置base</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Valve getFirst() &#123;</span><br><span class=\"line\">        if (first != null) &#123;</span><br><span class=\"line\">            return first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return basic;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就把StandardEngineValve就是Engine的最后一个接着调用的时候就找到Host。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public final void invoke(Request request, Response response)</span><br><span class=\"line\">       throws IOException, ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Select the Host to be used for this Request</span><br><span class=\"line\">       Host host = request.getHost();</span><br><span class=\"line\">       if (host == null) &#123;</span><br><span class=\"line\">           response.sendError</span><br><span class=\"line\">               (HttpServletResponse.SC_BAD_REQUEST,</span><br><span class=\"line\">                sm.getString(&quot;standardEngine.noHost&quot;,</span><br><span class=\"line\">                             request.getServerName()));</span><br><span class=\"line\">           return;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if (request.isAsyncSupported()) &#123;</span><br><span class=\"line\">           request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Ask this Host to process this request</span><br><span class=\"line\">       host.getPipeline().getFirst().invoke(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>而同样host设置的配置是在HostRuleSet中。其他的步骤和上一面一样哦。Engine—-&gt;Host—-&gt;Context—-&gt;Wrapper<br>这样我们直接就找到最后一层的StandardWrapper.找到最后一个StandardWrapperValve阀门的invoke方法<br>这个方法中的有个Filter.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// Create the filter chain for this request</span><br><span class=\"line\">       ApplicationFilterChain filterChain =</span><br><span class=\"line\">               ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class=\"line\">       // Call the filter chain for this request</span><br><span class=\"line\">       // NOTE: This also calls the servlet&apos;s service() method</span><br><span class=\"line\">       filterChain.doFilter(request.getRequest(),</span><br><span class=\"line\">               response.getResponse());</span><br></pre></td></tr></table></figure>\n<p>这里也有一个注释 Call the filter chain for this request，调用request的过滤器链<code>calls the servlet&#39;s service() method</code>调用servlet的service()方法。</p>\n<p>ApplicationFilterChain这个类中。doFilter最后，<code>servlet.service(request, response);</code></p>\n<h4 id=\"Pipeline-Value\"><a href=\"#Pipeline-Value\" class=\"headerlink\" title=\"Pipeline Value\"></a>Pipeline Value</h4><p>管道，阀门，责任链，外界进来的请求，先从Connector到Container,中间经过协议处理，然后在Container中，依次讲请求通过各种管道，每一层管道的最后阀门都是StandardXXXValve,然后交到下一层的第一个阀门再进行处理，最终会流到Servlet.service(),这里就是我们正常写的代码，<code>doGet();doPost();</code></p>\n<p>HttpServlet.service();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void service(HttpServletRequest req, HttpServletResponse resp)</span><br><span class=\"line\">    throws ServletException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        long lastModified = getLastModified(req);</span><br><span class=\"line\">        if (lastModified == -1) &#123;</span><br><span class=\"line\">            // servlet doesn&apos;t support if-modified-since, no reason</span><br><span class=\"line\">            // to go through further expensive logic</span><br><span class=\"line\">            doGet(req, resp);//Get</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            long ifModifiedSince;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            &#125; catch (IllegalArgumentException iae) &#123;</span><br><span class=\"line\">                // Invalid date header - proceed as if none was set</span><br><span class=\"line\">                ifModifiedSince = -1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (ifModifiedSince &lt; (lastModified / 1000 * 1000)) &#123;</span><br><span class=\"line\">                // If the servlet mod time is later, call doGet()</span><br><span class=\"line\">                // Round down to the nearest second for a proper compare</span><br><span class=\"line\">                // A ifModifiedSince of -1 will always be less</span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        long lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);//Post</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">        // Note that this means NO servlet supports whatever</span><br><span class=\"line\">        // method was requested, anywhere on this server.</span><br><span class=\"line\">        //</span><br><span class=\"line\"></span><br><span class=\"line\">        String errMsg = lStrings.getString(&quot;http.method_not_implemented&quot;);</span><br><span class=\"line\">        Object[] errArgs = new Object[1];</span><br><span class=\"line\">        errArgs[0] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此，用户请求的URL就给我们处理了，写doGet，doPost等等，这一个阶段的Tomcat源码就先到这里，告一段落！</p>\n<p>系列文章</p>\n<ul>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/\">Tomcat源码阅读之从server.xml看组件关系</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/\">Tomcat源码阅读之URL请求解析</a></li>\n<li><a href=\"https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/\">Tomcat源码阅读之Container责任链</a></li>\n</ul>\n<p>参考文献：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/coldridgeValley/p/6606271.html\" target=\"_blank\" rel=\"noopener\">Tomcat中的设计模式</a></li>\n<li>《深入剖析Tomcat》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>上篇讲到Connector到Container的转换，本文主要是Container内部的转换，四个组件Engine、Host、Context、Wrapper。<br>顺便提一下Pipeline和Value.</p>\n<p>接上文的CoyoteAdapter.service()<code>connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</code>,</p>\n<p>如图如图<br><img src=\"/.io//665375-20160119184923890-1995839223.png\" alt=\"请求流图\"><br><img src=\"/.io//818454-20161025170804984-654825756.png\" alt=\"请求流图\"><br>默认的Engine是StandardEngine，这个是在EngineRuleSet中通过digester设置的，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">digester.addObjectCreate(prefix + &quot;Engine&quot;,</span><br><span class=\"line\">                         &quot;org.apache.catalina.core.StandardEngine&quot;,</span><br><span class=\"line\">                         &quot;className&quot;);</span><br><span class=\"line\">digester.addSetProperties(prefix + &quot;Engine&quot;);</span><br><span class=\"line\">digester.addRule(prefix + &quot;Engine&quot;,</span><br><span class=\"line\">                 new LifecycleListenerRule</span><br><span class=\"line\">                 (&quot;org.apache.catalina.startup.EngineConfig&quot;,</span><br><span class=\"line\">                  &quot;engineConfigClass&quot;));</span><br><span class=\"line\">digester.addSetNext(prefix + &quot;Engine&quot;,</span><br><span class=\"line\">                    &quot;setContainer&quot;,</span><br><span class=\"line\">                    &quot;org.apache.catalina.Engine&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>然后这个<code>org.apache.catalina.core.StandardEngine</code>就是connector.getService().getContainer()的实际Container，所有的Container实例化的时候，都有pipeline和setBasic()。</p>\n<p>StandardEngine构造方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public StandardEngine() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    super();</span><br><span class=\"line\">    pipeline.setBasic(new StandardEngineValve());</span><br><span class=\"line\">    /* Set the jmvRoute using the system property jvmRoute */</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        setJvmRoute(System.getProperty(&quot;jvmRoute&quot;));</span><br><span class=\"line\">    &#125; catch(Exception ex) &#123;</span><br><span class=\"line\">        log.warn(sm.getString(&quot;standardEngine.jvmRouteFail&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // By default, the engine will hold the reloading thread</span><br><span class=\"line\">    backgroundProcessorDelay = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ContainerBase中会有这个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected final Pipeline pipeline = new StandardPipeline(this);</span><br></pre></td></tr></table></figure></p>\n<p>这样再Engine这个级别的Container中就有一个流水线了StandardPipeline，然后这个流水线的getFirst(),这里的getFirst是StandardEngine.构造函数setBasic方法给到的一个StandardEngineValve(),如下图，这样就把StandardEngineValve就是<code>connector.getService().getContainer().getPipeline().getFirst()</code> (如果没有first的话)的最终效果，这个也是最后一个Valve(阀门)。<br>如果有其他的Valve呢，EngineRuleSet中就会读取到对应的Valve调用addValve，添加到base的前面(链表操作),因为每一个继承ValveBase都要实现一个方法<code>invoke</code>在这个方法中最后都会执行一个<code>getNext().invoke(request, response);</code>这样就找到了下一个Next，直到最后一个到StandardXXXValve。接着下一步执行。<br>下面是StandardPipeline<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> @Override</span><br><span class=\"line\">    public void addValve(Valve valve) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Validate that we can add this Valve</span><br><span class=\"line\">        if (valve instanceof Contained)</span><br><span class=\"line\">            ((Contained) valve).setContainer(this.container);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Start the new component if necessary</span><br><span class=\"line\">        if (getState().isAvailable()) &#123;</span><br><span class=\"line\">            if (valve instanceof Lifecycle) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    ((Lifecycle) valve).start();</span><br><span class=\"line\">                &#125; catch (LifecycleException e) &#123;</span><br><span class=\"line\">                    log.error(&quot;StandardPipeline.addValve: start: &quot;, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //链表操作,如果没有第一个当前的就是第一个，</span><br><span class=\"line\">        // Add this Valve to the set associated with this Pipeline</span><br><span class=\"line\">        if (first == null) &#123;</span><br><span class=\"line\">            first = valve;</span><br><span class=\"line\">            valve.setNext(basic);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">        //如果有把当前的就设为第一个,</span><br><span class=\"line\">            Valve current = first;</span><br><span class=\"line\">            while (current != null) &#123;</span><br><span class=\"line\">            //直到那个是StandardXXXValve,的时候就把传入的这个valve插入进去，并valve的下一个保证是最后一个StandardXXXValve.</span><br><span class=\"line\">                if (current.getNext() == basic) &#123;</span><br><span class=\"line\">                    current.setNext(valve);</span><br><span class=\"line\">                    valve.setNext(basic);</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            //然后当前的下一个赋值给当前这个</span><br><span class=\"line\">                current = current.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public void setBasic(Valve valve) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Change components if necessary</span><br><span class=\"line\">        Valve oldBasic = this.basic;</span><br><span class=\"line\">        if (oldBasic == valve)</span><br><span class=\"line\">            return;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Stop the old component if necessary</span><br><span class=\"line\">        if (oldBasic != null) &#123;</span><br><span class=\"line\">            if (getState().isAvailable() &amp;&amp; (oldBasic instanceof Lifecycle)) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    ((Lifecycle) oldBasic).stop();</span><br><span class=\"line\">                &#125; catch (LifecycleException e) &#123;</span><br><span class=\"line\">                    log.error(&quot;StandardPipeline.setBasic: stop&quot;, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (oldBasic instanceof Contained) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    ((Contained) oldBasic).setContainer(null);</span><br><span class=\"line\">                &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">                    ExceptionUtils.handleThrowable(t);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Start the new component if necessary</span><br><span class=\"line\">        if (valve == null)</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        if (valve instanceof Contained) &#123;</span><br><span class=\"line\">            ((Contained) valve).setContainer(this.container);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (getState().isAvailable() &amp;&amp; valve instanceof Lifecycle) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                ((Lifecycle) valve).start();</span><br><span class=\"line\">            &#125; catch (LifecycleException e) &#123;</span><br><span class=\"line\">                log.error(&quot;StandardPipeline.setBasic: start&quot;, e);</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Update the pipeline</span><br><span class=\"line\">        Valve current = first;</span><br><span class=\"line\">        while (current != null) &#123;</span><br><span class=\"line\">            if (current.getNext() == oldBasic) &#123;</span><br><span class=\"line\">                current.setNext(valve);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current = current.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.basic = valve;//设置base</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Valve getFirst() &#123;</span><br><span class=\"line\">        if (first != null) &#123;</span><br><span class=\"line\">            return first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return basic;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就把StandardEngineValve就是Engine的最后一个接着调用的时候就找到Host。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public final void invoke(Request request, Response response)</span><br><span class=\"line\">       throws IOException, ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Select the Host to be used for this Request</span><br><span class=\"line\">       Host host = request.getHost();</span><br><span class=\"line\">       if (host == null) &#123;</span><br><span class=\"line\">           response.sendError</span><br><span class=\"line\">               (HttpServletResponse.SC_BAD_REQUEST,</span><br><span class=\"line\">                sm.getString(&quot;standardEngine.noHost&quot;,</span><br><span class=\"line\">                             request.getServerName()));</span><br><span class=\"line\">           return;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if (request.isAsyncSupported()) &#123;</span><br><span class=\"line\">           request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       // Ask this Host to process this request</span><br><span class=\"line\">       host.getPipeline().getFirst().invoke(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>而同样host设置的配置是在HostRuleSet中。其他的步骤和上一面一样哦。Engine—-&gt;Host—-&gt;Context—-&gt;Wrapper<br>这样我们直接就找到最后一层的StandardWrapper.找到最后一个StandardWrapperValve阀门的invoke方法<br>这个方法中的有个Filter.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// Create the filter chain for this request</span><br><span class=\"line\">       ApplicationFilterChain filterChain =</span><br><span class=\"line\">               ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class=\"line\">       // Call the filter chain for this request</span><br><span class=\"line\">       // NOTE: This also calls the servlet&apos;s service() method</span><br><span class=\"line\">       filterChain.doFilter(request.getRequest(),</span><br><span class=\"line\">               response.getResponse());</span><br></pre></td></tr></table></figure>\n<p>这里也有一个注释 Call the filter chain for this request，调用request的过滤器链<code>calls the servlet&#39;s service() method</code>调用servlet的service()方法。</p>\n<p>ApplicationFilterChain这个类中。doFilter最后，<code>servlet.service(request, response);</code></p>\n<h4 id=\"Pipeline-Value\"><a href=\"#Pipeline-Value\" class=\"headerlink\" title=\"Pipeline Value\"></a>Pipeline Value</h4><p>管道，阀门，责任链，外界进来的请求，先从Connector到Container,中间经过协议处理，然后在Container中，依次讲请求通过各种管道，每一层管道的最后阀门都是StandardXXXValve,然后交到下一层的第一个阀门再进行处理，最终会流到Servlet.service(),这里就是我们正常写的代码，<code>doGet();doPost();</code></p>\n<p>HttpServlet.service();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void service(HttpServletRequest req, HttpServletResponse resp)</span><br><span class=\"line\">    throws ServletException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        long lastModified = getLastModified(req);</span><br><span class=\"line\">        if (lastModified == -1) &#123;</span><br><span class=\"line\">            // servlet doesn&apos;t support if-modified-since, no reason</span><br><span class=\"line\">            // to go through further expensive logic</span><br><span class=\"line\">            doGet(req, resp);//Get</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            long ifModifiedSince;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            &#125; catch (IllegalArgumentException iae) &#123;</span><br><span class=\"line\">                // Invalid date header - proceed as if none was set</span><br><span class=\"line\">                ifModifiedSince = -1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (ifModifiedSince &lt; (lastModified / 1000 * 1000)) &#123;</span><br><span class=\"line\">                // If the servlet mod time is later, call doGet()</span><br><span class=\"line\">                // Round down to the nearest second for a proper compare</span><br><span class=\"line\">                // A ifModifiedSince of -1 will always be less</span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        long lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);//Post</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">        // Note that this means NO servlet supports whatever</span><br><span class=\"line\">        // method was requested, anywhere on this server.</span><br><span class=\"line\">        //</span><br><span class=\"line\"></span><br><span class=\"line\">        String errMsg = lStrings.getString(&quot;http.method_not_implemented&quot;);</span><br><span class=\"line\">        Object[] errArgs = new Object[1];</span><br><span class=\"line\">        errArgs[0] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此，用户请求的URL就给我们处理了，写doGet，doPost等等，这一个阶段的Tomcat源码就先到这里，告一段落！</p>\n<p>系列文章</p>\n<ul>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/\">Tomcat源码阅读之从server.xml看组件关系</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/\">Tomcat源码阅读之URL请求解析</a></li>\n<li><a href=\"https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/\">Tomcat源码阅读之Container责任链</a></li>\n</ul>\n<p>参考文献：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/coldridgeValley/p/6606271.html\" target=\"_blank\" rel=\"noopener\">Tomcat中的设计模式</a></li>\n<li>《深入剖析Tomcat》</li>\n</ul>\n"},{"title":"Thinking in java 基础之集合框架","date":"2016-06-25T02:30:54.000Z","description":"总结java.util包中的类作用！","_content":"## Thinking in java 基础之集合框架\n####大家都知道我的习惯，先上图说话。\n![集合框架](Thinking-in-java-基础之集合框架/201606251033.gif)\n<!--more-->\n## 集合简介(容器)\n\n把具有相同性质的一类东西，汇聚成一个整体，就可以称为集合，例如这里有20个苹果，我们把每一个苹果当成一个东西（一个对象），然后我们借用袋子把这20个苹果装起来，而这个袋子就是集合（也叫容器）。然后呢，我们按照不同的方法装，就是不同的框架。\n\n> 换句话说，集合框架就是数据结构的实现。\n\n## 链表(数据结构)\n\n### LinkedList的结构\n\n```\npublic class chain {\nprivate class Data{\n    private Object obj;\n    private Data next = null;\n    Data(Object obj){\n        this.obj = obj;\n    }\n}\nprivate Data first = null;\npublic void insertFirst(Object obj){\n    Data data = new Data(obj);\n    data.next = first;\n    first = data;\n}\n\npublic Object deleteFirst() throws Exception{  \n    if(first == null)\n        throw new Exception(\"empty!\");  \n    Data temp = first;\n    first = first.next;\n    return temp.obj;\n}  \n\npublic Object find(Object obj) throws Exception{  \n    if(first == null)  \n        throw new Exception(\"LinkedList is empty!\");  \n    Data cur = first;  \n    while(cur != null){  \n        if(cur.obj.equals(obj)){  \n            return cur.obj;  \n        }  \n        cur = cur.next;  \n    }  \n    return null;  \n}  \n\npublic void remove(Object obj) throws Exception{  \n    if(first == null)  \n        throw new Exception(\"LinkedList is empty!\");  \n    if(first.obj.equals(obj)){  \n        first = first.next;  \n    }else{  \n        Data pre = first;  \n        Data cur = first.next;  \n        while(cur != null){  \n            if(cur.obj.equals(obj)){  \n                pre.next = cur.next;  \n            }  \n            pre = cur;  \n            cur = cur.next;  \n        }  \n    }  \n}  \n\npublic boolean isEmpty(){  \n    return (first == null);  \n}\npublic void display(){\n    if(first == null)\n        System.out.println(\"empty\");\n    Data cur = first;\n    while(cur != null){\n        System.out.print(cur.obj.toString() + \" -> \");\n        cur = cur.next;\n    }\n    System.out.print(\"\\n\");\n}\npublic static void main(String[] args) throws Exception {\n    chain ll = new chain();\n    ll.insertFirst(4);\n    ll.insertFirst(3);\n    ll.insertFirst(2);\n    ll.insertFirst(1);\n    ll.display();\n    ll.deleteFirst();\n    ll.display();\n    ll.remove(3);\n    ll.display();\n    System.out.println(ll.find(1));\n    System.out.println(ll.find(4));\n}\n}\n```\n\n## Collection\n\n### List\n保存输入的顺序，而且可以重复的存储相关元素。\n#### ArrayList(随机访问)(数组线性表)\nArrayList数组线性表的特点为:类似数组的形式进行存储，因此它的随机访问速度极快。\nArrayList数组线性表的缺点为:不适合于在线性表中间需要频繁进行插入和删除操作。因为每次插入和删除都需要移动数组中的元素。可以这样理解ArrayList就是基于数组的一个线性表，只不过数组的长度可以动态改变而已。ArrayList线程不安全，\n#### LinkedList(频繁删除添加)(链式线性表)\n您要频繁的从列表的中间位置添加和除去元素，而只要顺序的访问列表元素，那么，LinkedList 实现更好。\n可以这样理解LinkedList就是一种双向循环链表的链式线性表，只不过存储的结构使用的是链式表而已。\n#### Vector(向量)\n如果一定在多线程使用List的，您可以使用Vector，因为Vector和ArrayList基本一致，区别在于Vector中的绝大部分方法都使用了同步关键字修饰，这样在多线程的情况下不会出现并发错误哦，还有就是它们的扩容方案不同，ArrayList是通过原始容量*3/2+1,而Vector是允许设置默认的增长长度，Vector的默认扩容方式为原来的2倍。\n切记Vector是ArrayList的多线程的一个替代品。\n#### Stack(栈)\n在各种List中，最好的做法是以ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList();Vector总是比ArrayList慢，所以要尽量避免使用。使用最多的是ArrayList。\n### Set\nSet子接口: 无序，不允许有重复的元素,最多允许有一个null元素对象。\n#### HashSet(没有顺序)\n您会使用 HashSet 存储重复自由的集合。考虑到效率，添加到 HashSet 的对象需要采用恰当分配哈希码的方式来实现hashCode()方法。虽然大多数系统类覆盖了Object中缺省的hashCode()和equals()实现，但创建您自己的要添加到HashSet的类时，别忘了覆盖 hashCode()和equals()。\n#### LinkedHashSet(添加顺序会被记录)\n如果想跟踪添加给HashSet的元素的顺序，LinkedHashSet实现会有帮助。 按照元素的插入顺序来访问各个元素。它提供了一个可以快速访问各个元素的有序集合。\n#### TreeSet(按照比较器排序)\n当您要从集合中以有序的方式插入和抽取元素时，TreeSet实现会有用处。\n为了能顺利进行。添加到TreeSet的元素必须是可排序的。\n在各种Set中，HashSet通常优于TreeSet（插入、查找）。只有当需要产生一个经过排序的序列，才用TreeSet。\nTreeSet存在的唯一理由：能够维护其内元素的排序状态。\n### Queue(队列)\n### Map\nMap接口用于维护键/值对(key/value pairs)。该接口描述了从不重复的键到值的映射。\n#### HashMap\n在Map 中插入、删除和定位元素，HashMap 是最好的选择。\n#### LinkedHashMap(包含插入顺序)\n以插入顺序将关键字/值对添加进链接哈希映像中\n#### TreeMap(自定义顺序)\n但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。\n#### WeakHashMap\n它使用WeakReference(弱引用)来存放哈希表关键字。使用这种方式时，当映射的键在 WeakHashMap 的外部不再被引用时，垃圾收集器会将它回收，但它将把到达该对象的弱引用纳入一个队列。WeakHashMap的运行将定期检查该队列，以便找出新到达的 弱应用。当一个弱引用到达该队列时，就表示关键字不再被任何人使用，并且已经被收集起来。然后WeakHashMap便删除相关的映射。\n#### HashTable\n\n在各种Map中HashMap用于快速查找，使用的最多。\n### Array\n我们都知道，由于Array(数组)通常意义上讲只是一个单纯的线性序列，又基于Native(本地方法)，凭此它的效率历来便号称Java中最高。所以通常我们也都承认Java中效率最高的存储方式就是使用数组。但是，由于数组初始化后大小固定，索引不能超出下标，缺少灵活的扩展功能等原因，使得很多人放弃了数组的使用， 转而使用Collection,List,Map,Set等接口处理集合操作。\n\n> 当元素个数固定，用Array，因为Array效率是最高的。\n\n比较器(Comparator和Comparable接口)\n在“集合框架”中有两种比较接口：Comparable接口和Comparator接口。像String和Integer\n等Java内建类实现 Comparable接口以提供一定排序方式，但这样只能实现该接口一次。对于那些没有实现Comparable接口的类、或者自定义的类，您可以通过 Comparator接口来定义您自己的比较方式。\n### Comparable接口\n在java.lang包中，Comparable接口适用于一个类有自然顺序的时候。假定对象集合是同一类型，该接口允许您把集合排序成自然顺序。\n\n(1) int compareTo(Object o): 比较当前实例对象与对象o，如果位于对象o之前，返回负\n值，如果两个对象在排序中位置相同，则返回0，如果位于对象o后面，则返回正值\n在 Java 2 SDK版本1.4中有二十四个类实现Comparable接口。下表展示了8种基本类型的自然排序。\n虽然一些类共享同一种自然排序，但只有相互可比的类才能排序。类排序 BigDecimal,BigInteger,Byte, Double, Float,Integer,Long,Short 按数字大小排序\nCharacter 按 Unicode 值的数字大小排序\nString 按字符串中字符 Unicode 值排序\n利用Comparable接口创建您自己的类的排序顺序，只是实现compareTo()方法的问题。通常就是依赖几个数据成员的自然排序。同时类也应该覆盖equals()和hashCode()以确保两个相等的对象返回同一个哈希码。\n### Comparator接口\n若一个类不能用于实现java.lang.Comparable，或者您不喜欢缺省的Comparable行为并想提供自己的排序顺序(可能多种排序方式)，你可以实现Comparator接口，从而定义一个比较器。\n\n(1)int compare(Object o1, Object o2): 对两个对象o1和o2进行比较，如果o1位于o2\n的前面，则返回负值，如果在排序顺序中认为o1和o2是相同的，返回0，如果o1位于o2的\n后面，则返回正值“与Comparable相似，0返回值不表示元素相等。一个0返回值只是表示两个对象排在同一位置。由Comparator用户决定如何处理。如果两个不相等的元素比较的结果为零，您首先应该确信那就是您要的结果，然后记录行为。”\n\n(2)boolean equals(Object obj): 指示对象obj是否和比较器相等。\n“该方法覆写Object的equals()方法，检查的是Comparator实现的等同性，不是处于比较\n状态下的对象。”\n## Iterator(迭代模式)\n\n调用iterator()方法，返回Iterator<T>对象，Iterator<T>对象有hasnext();next();方法提供循环\n\nCollection接口有iterator()方法。Map.entrySet()返回Set<Map.Entry<K,V>>,然后调用Collection对应的iterator();方法。\n```\nIterator iterator = Collection.iterator();\nwhile(iterator.hasNext()) {\nObject iter=iterator.next();\nSystem.out.println(\"object=\" +object);\n}\nIterator iterator = Map.entrySet().iterator();\nwhile (iterator .hasNext()) {\nMap.Entry entry = (Map.Entry) iterator .next();\nObject key = entry.getKey();\nObject value = entry.getValue();\nSystem.out.println(\"key=\" + key + \" value=\" + value);\n}\n```\n\n## 工具类Collections and Arrays(静态方法)\n\n### Collections(常用方法)\n\naddAll添加\n\nshuffle混排\n\nbinarySearch二分查搜索法\n\nreverse反转\n\nfill 替换\n\nmax/min 找出最大/最小(根据默认的自然排序或者自定义排序规则)\n\nsort排序(根据默认的自然排序或者自定义排序规则)\n\n### Arrays\n\nbinarySearch二分搜索法\n\nsort排序\n\ncopyOf复制\n\nequals判断相等\n\nfill指定分配、替换\n\ntoString 返货字符串\n\nhashCode哈希吗\n\n详情参考[中文API](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)  [oracle官网API](https://docs.oracle.com/javase/8/docs/api/)\n## 总结\n在实际工作中，若用到集合框架，最常用的是ArrayList,HashSet,HashMap。这三者也是首先考虑的。而且，因为TreeXXX继承SortedXXX，所以用TreeXXX都是排序的。\n## 参看文献\n[java集合框架的讲解](http://www.cnblogs.com/xiohao/p/4309462.html)  \n[JAVA中关于链表的操作和基本算法](http://blog.csdn.net/kerryfish/article/details/24043099)  \n[java的集合框架最全详解（图）](http://doc.okbase.net/DavidIsOK/archive/94766.html)  \n[集合_java集合框架](http://blog.csdn.net/zsw101259/article/details/7570033)  \n《Thinking in java》  \n《算法与数据结构》-------java语言描述 清华大学出版社\n","source":"_posts/Thinking-in-java-基础之集合框架.md","raw":"---\ntitle: Thinking in java 基础之集合框架\ndate: 2016-06-25 10:30:54\ntags: [List,Set,Map,Collection,Iterator]\ncategories: java\ndescription: \"总结java.util包中的类作用！\"\n---\n## Thinking in java 基础之集合框架\n####大家都知道我的习惯，先上图说话。\n![集合框架](Thinking-in-java-基础之集合框架/201606251033.gif)\n<!--more-->\n## 集合简介(容器)\n\n把具有相同性质的一类东西，汇聚成一个整体，就可以称为集合，例如这里有20个苹果，我们把每一个苹果当成一个东西（一个对象），然后我们借用袋子把这20个苹果装起来，而这个袋子就是集合（也叫容器）。然后呢，我们按照不同的方法装，就是不同的框架。\n\n> 换句话说，集合框架就是数据结构的实现。\n\n## 链表(数据结构)\n\n### LinkedList的结构\n\n```\npublic class chain {\nprivate class Data{\n    private Object obj;\n    private Data next = null;\n    Data(Object obj){\n        this.obj = obj;\n    }\n}\nprivate Data first = null;\npublic void insertFirst(Object obj){\n    Data data = new Data(obj);\n    data.next = first;\n    first = data;\n}\n\npublic Object deleteFirst() throws Exception{  \n    if(first == null)\n        throw new Exception(\"empty!\");  \n    Data temp = first;\n    first = first.next;\n    return temp.obj;\n}  \n\npublic Object find(Object obj) throws Exception{  \n    if(first == null)  \n        throw new Exception(\"LinkedList is empty!\");  \n    Data cur = first;  \n    while(cur != null){  \n        if(cur.obj.equals(obj)){  \n            return cur.obj;  \n        }  \n        cur = cur.next;  \n    }  \n    return null;  \n}  \n\npublic void remove(Object obj) throws Exception{  \n    if(first == null)  \n        throw new Exception(\"LinkedList is empty!\");  \n    if(first.obj.equals(obj)){  \n        first = first.next;  \n    }else{  \n        Data pre = first;  \n        Data cur = first.next;  \n        while(cur != null){  \n            if(cur.obj.equals(obj)){  \n                pre.next = cur.next;  \n            }  \n            pre = cur;  \n            cur = cur.next;  \n        }  \n    }  \n}  \n\npublic boolean isEmpty(){  \n    return (first == null);  \n}\npublic void display(){\n    if(first == null)\n        System.out.println(\"empty\");\n    Data cur = first;\n    while(cur != null){\n        System.out.print(cur.obj.toString() + \" -> \");\n        cur = cur.next;\n    }\n    System.out.print(\"\\n\");\n}\npublic static void main(String[] args) throws Exception {\n    chain ll = new chain();\n    ll.insertFirst(4);\n    ll.insertFirst(3);\n    ll.insertFirst(2);\n    ll.insertFirst(1);\n    ll.display();\n    ll.deleteFirst();\n    ll.display();\n    ll.remove(3);\n    ll.display();\n    System.out.println(ll.find(1));\n    System.out.println(ll.find(4));\n}\n}\n```\n\n## Collection\n\n### List\n保存输入的顺序，而且可以重复的存储相关元素。\n#### ArrayList(随机访问)(数组线性表)\nArrayList数组线性表的特点为:类似数组的形式进行存储，因此它的随机访问速度极快。\nArrayList数组线性表的缺点为:不适合于在线性表中间需要频繁进行插入和删除操作。因为每次插入和删除都需要移动数组中的元素。可以这样理解ArrayList就是基于数组的一个线性表，只不过数组的长度可以动态改变而已。ArrayList线程不安全，\n#### LinkedList(频繁删除添加)(链式线性表)\n您要频繁的从列表的中间位置添加和除去元素，而只要顺序的访问列表元素，那么，LinkedList 实现更好。\n可以这样理解LinkedList就是一种双向循环链表的链式线性表，只不过存储的结构使用的是链式表而已。\n#### Vector(向量)\n如果一定在多线程使用List的，您可以使用Vector，因为Vector和ArrayList基本一致，区别在于Vector中的绝大部分方法都使用了同步关键字修饰，这样在多线程的情况下不会出现并发错误哦，还有就是它们的扩容方案不同，ArrayList是通过原始容量*3/2+1,而Vector是允许设置默认的增长长度，Vector的默认扩容方式为原来的2倍。\n切记Vector是ArrayList的多线程的一个替代品。\n#### Stack(栈)\n在各种List中，最好的做法是以ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList();Vector总是比ArrayList慢，所以要尽量避免使用。使用最多的是ArrayList。\n### Set\nSet子接口: 无序，不允许有重复的元素,最多允许有一个null元素对象。\n#### HashSet(没有顺序)\n您会使用 HashSet 存储重复自由的集合。考虑到效率，添加到 HashSet 的对象需要采用恰当分配哈希码的方式来实现hashCode()方法。虽然大多数系统类覆盖了Object中缺省的hashCode()和equals()实现，但创建您自己的要添加到HashSet的类时，别忘了覆盖 hashCode()和equals()。\n#### LinkedHashSet(添加顺序会被记录)\n如果想跟踪添加给HashSet的元素的顺序，LinkedHashSet实现会有帮助。 按照元素的插入顺序来访问各个元素。它提供了一个可以快速访问各个元素的有序集合。\n#### TreeSet(按照比较器排序)\n当您要从集合中以有序的方式插入和抽取元素时，TreeSet实现会有用处。\n为了能顺利进行。添加到TreeSet的元素必须是可排序的。\n在各种Set中，HashSet通常优于TreeSet（插入、查找）。只有当需要产生一个经过排序的序列，才用TreeSet。\nTreeSet存在的唯一理由：能够维护其内元素的排序状态。\n### Queue(队列)\n### Map\nMap接口用于维护键/值对(key/value pairs)。该接口描述了从不重复的键到值的映射。\n#### HashMap\n在Map 中插入、删除和定位元素，HashMap 是最好的选择。\n#### LinkedHashMap(包含插入顺序)\n以插入顺序将关键字/值对添加进链接哈希映像中\n#### TreeMap(自定义顺序)\n但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。\n#### WeakHashMap\n它使用WeakReference(弱引用)来存放哈希表关键字。使用这种方式时，当映射的键在 WeakHashMap 的外部不再被引用时，垃圾收集器会将它回收，但它将把到达该对象的弱引用纳入一个队列。WeakHashMap的运行将定期检查该队列，以便找出新到达的 弱应用。当一个弱引用到达该队列时，就表示关键字不再被任何人使用，并且已经被收集起来。然后WeakHashMap便删除相关的映射。\n#### HashTable\n\n在各种Map中HashMap用于快速查找，使用的最多。\n### Array\n我们都知道，由于Array(数组)通常意义上讲只是一个单纯的线性序列，又基于Native(本地方法)，凭此它的效率历来便号称Java中最高。所以通常我们也都承认Java中效率最高的存储方式就是使用数组。但是，由于数组初始化后大小固定，索引不能超出下标，缺少灵活的扩展功能等原因，使得很多人放弃了数组的使用， 转而使用Collection,List,Map,Set等接口处理集合操作。\n\n> 当元素个数固定，用Array，因为Array效率是最高的。\n\n比较器(Comparator和Comparable接口)\n在“集合框架”中有两种比较接口：Comparable接口和Comparator接口。像String和Integer\n等Java内建类实现 Comparable接口以提供一定排序方式，但这样只能实现该接口一次。对于那些没有实现Comparable接口的类、或者自定义的类，您可以通过 Comparator接口来定义您自己的比较方式。\n### Comparable接口\n在java.lang包中，Comparable接口适用于一个类有自然顺序的时候。假定对象集合是同一类型，该接口允许您把集合排序成自然顺序。\n\n(1) int compareTo(Object o): 比较当前实例对象与对象o，如果位于对象o之前，返回负\n值，如果两个对象在排序中位置相同，则返回0，如果位于对象o后面，则返回正值\n在 Java 2 SDK版本1.4中有二十四个类实现Comparable接口。下表展示了8种基本类型的自然排序。\n虽然一些类共享同一种自然排序，但只有相互可比的类才能排序。类排序 BigDecimal,BigInteger,Byte, Double, Float,Integer,Long,Short 按数字大小排序\nCharacter 按 Unicode 值的数字大小排序\nString 按字符串中字符 Unicode 值排序\n利用Comparable接口创建您自己的类的排序顺序，只是实现compareTo()方法的问题。通常就是依赖几个数据成员的自然排序。同时类也应该覆盖equals()和hashCode()以确保两个相等的对象返回同一个哈希码。\n### Comparator接口\n若一个类不能用于实现java.lang.Comparable，或者您不喜欢缺省的Comparable行为并想提供自己的排序顺序(可能多种排序方式)，你可以实现Comparator接口，从而定义一个比较器。\n\n(1)int compare(Object o1, Object o2): 对两个对象o1和o2进行比较，如果o1位于o2\n的前面，则返回负值，如果在排序顺序中认为o1和o2是相同的，返回0，如果o1位于o2的\n后面，则返回正值“与Comparable相似，0返回值不表示元素相等。一个0返回值只是表示两个对象排在同一位置。由Comparator用户决定如何处理。如果两个不相等的元素比较的结果为零，您首先应该确信那就是您要的结果，然后记录行为。”\n\n(2)boolean equals(Object obj): 指示对象obj是否和比较器相等。\n“该方法覆写Object的equals()方法，检查的是Comparator实现的等同性，不是处于比较\n状态下的对象。”\n## Iterator(迭代模式)\n\n调用iterator()方法，返回Iterator<T>对象，Iterator<T>对象有hasnext();next();方法提供循环\n\nCollection接口有iterator()方法。Map.entrySet()返回Set<Map.Entry<K,V>>,然后调用Collection对应的iterator();方法。\n```\nIterator iterator = Collection.iterator();\nwhile(iterator.hasNext()) {\nObject iter=iterator.next();\nSystem.out.println(\"object=\" +object);\n}\nIterator iterator = Map.entrySet().iterator();\nwhile (iterator .hasNext()) {\nMap.Entry entry = (Map.Entry) iterator .next();\nObject key = entry.getKey();\nObject value = entry.getValue();\nSystem.out.println(\"key=\" + key + \" value=\" + value);\n}\n```\n\n## 工具类Collections and Arrays(静态方法)\n\n### Collections(常用方法)\n\naddAll添加\n\nshuffle混排\n\nbinarySearch二分查搜索法\n\nreverse反转\n\nfill 替换\n\nmax/min 找出最大/最小(根据默认的自然排序或者自定义排序规则)\n\nsort排序(根据默认的自然排序或者自定义排序规则)\n\n### Arrays\n\nbinarySearch二分搜索法\n\nsort排序\n\ncopyOf复制\n\nequals判断相等\n\nfill指定分配、替换\n\ntoString 返货字符串\n\nhashCode哈希吗\n\n详情参考[中文API](http://tool.oschina.net/apidocs/apidoc?api=jdk-zh)  [oracle官网API](https://docs.oracle.com/javase/8/docs/api/)\n## 总结\n在实际工作中，若用到集合框架，最常用的是ArrayList,HashSet,HashMap。这三者也是首先考虑的。而且，因为TreeXXX继承SortedXXX，所以用TreeXXX都是排序的。\n## 参看文献\n[java集合框架的讲解](http://www.cnblogs.com/xiohao/p/4309462.html)  \n[JAVA中关于链表的操作和基本算法](http://blog.csdn.net/kerryfish/article/details/24043099)  \n[java的集合框架最全详解（图）](http://doc.okbase.net/DavidIsOK/archive/94766.html)  \n[集合_java集合框架](http://blog.csdn.net/zsw101259/article/details/7570033)  \n《Thinking in java》  \n《算法与数据结构》-------java语言描述 清华大学出版社\n","slug":"Thinking-in-java-基础之集合框架","published":1,"updated":"2016-08-31T12:24:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79q006yugv5ccjo1wso","content":"<h2 id=\"Thinking-in-java-基础之集合框架\"><a href=\"#Thinking-in-java-基础之集合框架\" class=\"headerlink\" title=\"Thinking in java 基础之集合框架\"></a>Thinking in java 基础之集合框架</h2><p>####大家都知道我的习惯，先上图说话。<br><img src=\"/.io//201606251033.gif\" alt=\"集合框架\"><br><a id=\"more\"></a></p>\n<h2 id=\"集合简介-容器\"><a href=\"#集合简介-容器\" class=\"headerlink\" title=\"集合简介(容器)\"></a>集合简介(容器)</h2><p>把具有相同性质的一类东西，汇聚成一个整体，就可以称为集合，例如这里有20个苹果，我们把每一个苹果当成一个东西（一个对象），然后我们借用袋子把这20个苹果装起来，而这个袋子就是集合（也叫容器）。然后呢，我们按照不同的方法装，就是不同的框架。</p>\n<blockquote>\n<p>换句话说，集合框架就是数据结构的实现。</p>\n</blockquote>\n<h2 id=\"链表-数据结构\"><a href=\"#链表-数据结构\" class=\"headerlink\" title=\"链表(数据结构)\"></a>链表(数据结构)</h2><h3 id=\"LinkedList的结构\"><a href=\"#LinkedList的结构\" class=\"headerlink\" title=\"LinkedList的结构\"></a>LinkedList的结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class chain &#123;</span><br><span class=\"line\">private class Data&#123;</span><br><span class=\"line\">    private Object obj;</span><br><span class=\"line\">    private Data next = null;</span><br><span class=\"line\">    Data(Object obj)&#123;</span><br><span class=\"line\">        this.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private Data first = null;</span><br><span class=\"line\">public void insertFirst(Object obj)&#123;</span><br><span class=\"line\">    Data data = new Data(obj);</span><br><span class=\"line\">    data.next = first;</span><br><span class=\"line\">    first = data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Object deleteFirst() throws Exception&#123;  </span><br><span class=\"line\">    if(first == null)</span><br><span class=\"line\">        throw new Exception(&quot;empty!&quot;);  </span><br><span class=\"line\">    Data temp = first;</span><br><span class=\"line\">    first = first.next;</span><br><span class=\"line\">    return temp.obj;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">public Object find(Object obj) throws Exception&#123;  </span><br><span class=\"line\">    if(first == null)  </span><br><span class=\"line\">        throw new Exception(&quot;LinkedList is empty!&quot;);  </span><br><span class=\"line\">    Data cur = first;  </span><br><span class=\"line\">    while(cur != null)&#123;  </span><br><span class=\"line\">        if(cur.obj.equals(obj))&#123;  </span><br><span class=\"line\">            return cur.obj;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        cur = cur.next;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return null;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">public void remove(Object obj) throws Exception&#123;  </span><br><span class=\"line\">    if(first == null)  </span><br><span class=\"line\">        throw new Exception(&quot;LinkedList is empty!&quot;);  </span><br><span class=\"line\">    if(first.obj.equals(obj))&#123;  </span><br><span class=\"line\">        first = first.next;  </span><br><span class=\"line\">    &#125;else&#123;  </span><br><span class=\"line\">        Data pre = first;  </span><br><span class=\"line\">        Data cur = first.next;  </span><br><span class=\"line\">        while(cur != null)&#123;  </span><br><span class=\"line\">            if(cur.obj.equals(obj))&#123;  </span><br><span class=\"line\">                pre.next = cur.next;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            pre = cur;  </span><br><span class=\"line\">            cur = cur.next;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">public boolean isEmpty()&#123;  </span><br><span class=\"line\">    return (first == null);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public void display()&#123;</span><br><span class=\"line\">    if(first == null)</span><br><span class=\"line\">        System.out.println(&quot;empty&quot;);</span><br><span class=\"line\">    Data cur = first;</span><br><span class=\"line\">    while(cur != null)&#123;</span><br><span class=\"line\">        System.out.print(cur.obj.toString() + &quot; -&gt; &quot;);</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.print(&quot;\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">    chain ll = new chain();</span><br><span class=\"line\">    ll.insertFirst(4);</span><br><span class=\"line\">    ll.insertFirst(3);</span><br><span class=\"line\">    ll.insertFirst(2);</span><br><span class=\"line\">    ll.insertFirst(1);</span><br><span class=\"line\">    ll.display();</span><br><span class=\"line\">    ll.deleteFirst();</span><br><span class=\"line\">    ll.display();</span><br><span class=\"line\">    ll.remove(3);</span><br><span class=\"line\">    ll.display();</span><br><span class=\"line\">    System.out.println(ll.find(1));</span><br><span class=\"line\">    System.out.println(ll.find(4));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h2><h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>保存输入的顺序，而且可以重复的存储相关元素。</p>\n<h4 id=\"ArrayList-随机访问-数组线性表\"><a href=\"#ArrayList-随机访问-数组线性表\" class=\"headerlink\" title=\"ArrayList(随机访问)(数组线性表)\"></a>ArrayList(随机访问)(数组线性表)</h4><p>ArrayList数组线性表的特点为:类似数组的形式进行存储，因此它的随机访问速度极快。<br>ArrayList数组线性表的缺点为:不适合于在线性表中间需要频繁进行插入和删除操作。因为每次插入和删除都需要移动数组中的元素。可以这样理解ArrayList就是基于数组的一个线性表，只不过数组的长度可以动态改变而已。ArrayList线程不安全，</p>\n<h4 id=\"LinkedList-频繁删除添加-链式线性表\"><a href=\"#LinkedList-频繁删除添加-链式线性表\" class=\"headerlink\" title=\"LinkedList(频繁删除添加)(链式线性表)\"></a>LinkedList(频繁删除添加)(链式线性表)</h4><p>您要频繁的从列表的中间位置添加和除去元素，而只要顺序的访问列表元素，那么，LinkedList 实现更好。<br>可以这样理解LinkedList就是一种双向循环链表的链式线性表，只不过存储的结构使用的是链式表而已。</p>\n<h4 id=\"Vector-向量\"><a href=\"#Vector-向量\" class=\"headerlink\" title=\"Vector(向量)\"></a>Vector(向量)</h4><p>如果一定在多线程使用List的，您可以使用Vector，因为Vector和ArrayList基本一致，区别在于Vector中的绝大部分方法都使用了同步关键字修饰，这样在多线程的情况下不会出现并发错误哦，还有就是它们的扩容方案不同，ArrayList是通过原始容量*3/2+1,而Vector是允许设置默认的增长长度，Vector的默认扩容方式为原来的2倍。<br>切记Vector是ArrayList的多线程的一个替代品。</p>\n<h4 id=\"Stack-栈\"><a href=\"#Stack-栈\" class=\"headerlink\" title=\"Stack(栈)\"></a>Stack(栈)</h4><p>在各种List中，最好的做法是以ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList();Vector总是比ArrayList慢，所以要尽量避免使用。使用最多的是ArrayList。</p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Set子接口: 无序，不允许有重复的元素,最多允许有一个null元素对象。</p>\n<h4 id=\"HashSet-没有顺序\"><a href=\"#HashSet-没有顺序\" class=\"headerlink\" title=\"HashSet(没有顺序)\"></a>HashSet(没有顺序)</h4><p>您会使用 HashSet 存储重复自由的集合。考虑到效率，添加到 HashSet 的对象需要采用恰当分配哈希码的方式来实现hashCode()方法。虽然大多数系统类覆盖了Object中缺省的hashCode()和equals()实现，但创建您自己的要添加到HashSet的类时，别忘了覆盖 hashCode()和equals()。</p>\n<h4 id=\"LinkedHashSet-添加顺序会被记录\"><a href=\"#LinkedHashSet-添加顺序会被记录\" class=\"headerlink\" title=\"LinkedHashSet(添加顺序会被记录)\"></a>LinkedHashSet(添加顺序会被记录)</h4><p>如果想跟踪添加给HashSet的元素的顺序，LinkedHashSet实现会有帮助。 按照元素的插入顺序来访问各个元素。它提供了一个可以快速访问各个元素的有序集合。</p>\n<h4 id=\"TreeSet-按照比较器排序\"><a href=\"#TreeSet-按照比较器排序\" class=\"headerlink\" title=\"TreeSet(按照比较器排序)\"></a>TreeSet(按照比较器排序)</h4><p>当您要从集合中以有序的方式插入和抽取元素时，TreeSet实现会有用处。<br>为了能顺利进行。添加到TreeSet的元素必须是可排序的。<br>在各种Set中，HashSet通常优于TreeSet（插入、查找）。只有当需要产生一个经过排序的序列，才用TreeSet。<br>TreeSet存在的唯一理由：能够维护其内元素的排序状态。</p>\n<h3 id=\"Queue-队列\"><a href=\"#Queue-队列\" class=\"headerlink\" title=\"Queue(队列)\"></a>Queue(队列)</h3><h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>Map接口用于维护键/值对(key/value pairs)。该接口描述了从不重复的键到值的映射。</p>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h4><p>在Map 中插入、删除和定位元素，HashMap 是最好的选择。</p>\n<h4 id=\"LinkedHashMap-包含插入顺序\"><a href=\"#LinkedHashMap-包含插入顺序\" class=\"headerlink\" title=\"LinkedHashMap(包含插入顺序)\"></a>LinkedHashMap(包含插入顺序)</h4><p>以插入顺序将关键字/值对添加进链接哈希映像中</p>\n<h4 id=\"TreeMap-自定义顺序\"><a href=\"#TreeMap-自定义顺序\" class=\"headerlink\" title=\"TreeMap(自定义顺序)\"></a>TreeMap(自定义顺序)</h4><p>但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。</p>\n<h4 id=\"WeakHashMap\"><a href=\"#WeakHashMap\" class=\"headerlink\" title=\"WeakHashMap\"></a>WeakHashMap</h4><p>它使用WeakReference(弱引用)来存放哈希表关键字。使用这种方式时，当映射的键在 WeakHashMap 的外部不再被引用时，垃圾收集器会将它回收，但它将把到达该对象的弱引用纳入一个队列。WeakHashMap的运行将定期检查该队列，以便找出新到达的 弱应用。当一个弱引用到达该队列时，就表示关键字不再被任何人使用，并且已经被收集起来。然后WeakHashMap便删除相关的映射。</p>\n<h4 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h4><p>在各种Map中HashMap用于快速查找，使用的最多。</p>\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p>我们都知道，由于Array(数组)通常意义上讲只是一个单纯的线性序列，又基于Native(本地方法)，凭此它的效率历来便号称Java中最高。所以通常我们也都承认Java中效率最高的存储方式就是使用数组。但是，由于数组初始化后大小固定，索引不能超出下标，缺少灵活的扩展功能等原因，使得很多人放弃了数组的使用， 转而使用Collection,List,Map,Set等接口处理集合操作。</p>\n<blockquote>\n<p>当元素个数固定，用Array，因为Array效率是最高的。</p>\n</blockquote>\n<p>比较器(Comparator和Comparable接口)<br>在“集合框架”中有两种比较接口：Comparable接口和Comparator接口。像String和Integer<br>等Java内建类实现 Comparable接口以提供一定排序方式，但这样只能实现该接口一次。对于那些没有实现Comparable接口的类、或者自定义的类，您可以通过 Comparator接口来定义您自己的比较方式。</p>\n<h3 id=\"Comparable接口\"><a href=\"#Comparable接口\" class=\"headerlink\" title=\"Comparable接口\"></a>Comparable接口</h3><p>在java.lang包中，Comparable接口适用于一个类有自然顺序的时候。假定对象集合是同一类型，该接口允许您把集合排序成自然顺序。</p>\n<p>(1) int compareTo(Object o): 比较当前实例对象与对象o，如果位于对象o之前，返回负<br>值，如果两个对象在排序中位置相同，则返回0，如果位于对象o后面，则返回正值<br>在 Java 2 SDK版本1.4中有二十四个类实现Comparable接口。下表展示了8种基本类型的自然排序。<br>虽然一些类共享同一种自然排序，但只有相互可比的类才能排序。类排序 BigDecimal,BigInteger,Byte, Double, Float,Integer,Long,Short 按数字大小排序<br>Character 按 Unicode 值的数字大小排序<br>String 按字符串中字符 Unicode 值排序<br>利用Comparable接口创建您自己的类的排序顺序，只是实现compareTo()方法的问题。通常就是依赖几个数据成员的自然排序。同时类也应该覆盖equals()和hashCode()以确保两个相等的对象返回同一个哈希码。</p>\n<h3 id=\"Comparator接口\"><a href=\"#Comparator接口\" class=\"headerlink\" title=\"Comparator接口\"></a>Comparator接口</h3><p>若一个类不能用于实现java.lang.Comparable，或者您不喜欢缺省的Comparable行为并想提供自己的排序顺序(可能多种排序方式)，你可以实现Comparator接口，从而定义一个比较器。</p>\n<p>(1)int compare(Object o1, Object o2): 对两个对象o1和o2进行比较，如果o1位于o2<br>的前面，则返回负值，如果在排序顺序中认为o1和o2是相同的，返回0，如果o1位于o2的<br>后面，则返回正值“与Comparable相似，0返回值不表示元素相等。一个0返回值只是表示两个对象排在同一位置。由Comparator用户决定如何处理。如果两个不相等的元素比较的结果为零，您首先应该确信那就是您要的结果，然后记录行为。”</p>\n<p>(2)boolean equals(Object obj): 指示对象obj是否和比较器相等。<br>“该方法覆写Object的equals()方法，检查的是Comparator实现的等同性，不是处于比较<br>状态下的对象。”</p>\n<h2 id=\"Iterator-迭代模式\"><a href=\"#Iterator-迭代模式\" class=\"headerlink\" title=\"Iterator(迭代模式)\"></a>Iterator(迭代模式)</h2><p>调用iterator()方法，返回Iterator<t>对象，Iterator<t>对象有hasnext();next();方法提供循环</t></t></p>\n<p>Collection接口有iterator()方法。Map.entrySet()返回Set&lt;Map.Entry&lt;K,V&gt;&gt;,然后调用Collection对应的iterator();方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator iterator = Collection.iterator();</span><br><span class=\"line\">while(iterator.hasNext()) &#123;</span><br><span class=\"line\">Object iter=iterator.next();</span><br><span class=\"line\">System.out.println(&quot;object=&quot; +object);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Iterator iterator = Map.entrySet().iterator();</span><br><span class=\"line\">while (iterator .hasNext()) &#123;</span><br><span class=\"line\">Map.Entry entry = (Map.Entry) iterator .next();</span><br><span class=\"line\">Object key = entry.getKey();</span><br><span class=\"line\">Object value = entry.getValue();</span><br><span class=\"line\">System.out.println(&quot;key=&quot; + key + &quot; value=&quot; + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"工具类Collections-and-Arrays-静态方法\"><a href=\"#工具类Collections-and-Arrays-静态方法\" class=\"headerlink\" title=\"工具类Collections and Arrays(静态方法)\"></a>工具类Collections and Arrays(静态方法)</h2><h3 id=\"Collections-常用方法\"><a href=\"#Collections-常用方法\" class=\"headerlink\" title=\"Collections(常用方法)\"></a>Collections(常用方法)</h3><p>addAll添加</p>\n<p>shuffle混排</p>\n<p>binarySearch二分查搜索法</p>\n<p>reverse反转</p>\n<p>fill 替换</p>\n<p>max/min 找出最大/最小(根据默认的自然排序或者自定义排序规则)</p>\n<p>sort排序(根据默认的自然排序或者自定义排序规则)</p>\n<h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><p>binarySearch二分搜索法</p>\n<p>sort排序</p>\n<p>copyOf复制</p>\n<p>equals判断相等</p>\n<p>fill指定分配、替换</p>\n<p>toString 返货字符串</p>\n<p>hashCode哈希吗</p>\n<p>详情参考<a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"noopener\">中文API</a>  <a href=\"https://docs.oracle.com/javase/8/docs/api/\" target=\"_blank\" rel=\"noopener\">oracle官网API</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实际工作中，若用到集合框架，最常用的是ArrayList,HashSet,HashMap。这三者也是首先考虑的。而且，因为TreeXXX继承SortedXXX，所以用TreeXXX都是排序的。</p>\n<h2 id=\"参看文献\"><a href=\"#参看文献\" class=\"headerlink\" title=\"参看文献\"></a>参看文献</h2><p><a href=\"http://www.cnblogs.com/xiohao/p/4309462.html\" target=\"_blank\" rel=\"noopener\">java集合框架的讲解</a><br><a href=\"http://blog.csdn.net/kerryfish/article/details/24043099\" target=\"_blank\" rel=\"noopener\">JAVA中关于链表的操作和基本算法</a><br><a href=\"http://doc.okbase.net/DavidIsOK/archive/94766.html\" target=\"_blank\" rel=\"noopener\">java的集合框架最全详解（图）</a><br><a href=\"http://blog.csdn.net/zsw101259/article/details/7570033\" target=\"_blank\" rel=\"noopener\">集合_java集合框架</a><br>《Thinking in java》<br>《算法与数据结构》——-java语言描述 清华大学出版社</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Thinking-in-java-基础之集合框架\"><a href=\"#Thinking-in-java-基础之集合框架\" class=\"headerlink\" title=\"Thinking in java 基础之集合框架\"></a>Thinking in java 基础之集合框架</h2><p>####大家都知道我的习惯，先上图说话。<br><img src=\"/.io//201606251033.gif\" alt=\"集合框架\"><br></p>","more":"<p></p>\n<h2 id=\"集合简介-容器\"><a href=\"#集合简介-容器\" class=\"headerlink\" title=\"集合简介(容器)\"></a>集合简介(容器)</h2><p>把具有相同性质的一类东西，汇聚成一个整体，就可以称为集合，例如这里有20个苹果，我们把每一个苹果当成一个东西（一个对象），然后我们借用袋子把这20个苹果装起来，而这个袋子就是集合（也叫容器）。然后呢，我们按照不同的方法装，就是不同的框架。</p>\n<blockquote>\n<p>换句话说，集合框架就是数据结构的实现。</p>\n</blockquote>\n<h2 id=\"链表-数据结构\"><a href=\"#链表-数据结构\" class=\"headerlink\" title=\"链表(数据结构)\"></a>链表(数据结构)</h2><h3 id=\"LinkedList的结构\"><a href=\"#LinkedList的结构\" class=\"headerlink\" title=\"LinkedList的结构\"></a>LinkedList的结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class chain &#123;</span><br><span class=\"line\">private class Data&#123;</span><br><span class=\"line\">    private Object obj;</span><br><span class=\"line\">    private Data next = null;</span><br><span class=\"line\">    Data(Object obj)&#123;</span><br><span class=\"line\">        this.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private Data first = null;</span><br><span class=\"line\">public void insertFirst(Object obj)&#123;</span><br><span class=\"line\">    Data data = new Data(obj);</span><br><span class=\"line\">    data.next = first;</span><br><span class=\"line\">    first = data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Object deleteFirst() throws Exception&#123;  </span><br><span class=\"line\">    if(first == null)</span><br><span class=\"line\">        throw new Exception(&quot;empty!&quot;);  </span><br><span class=\"line\">    Data temp = first;</span><br><span class=\"line\">    first = first.next;</span><br><span class=\"line\">    return temp.obj;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">public Object find(Object obj) throws Exception&#123;  </span><br><span class=\"line\">    if(first == null)  </span><br><span class=\"line\">        throw new Exception(&quot;LinkedList is empty!&quot;);  </span><br><span class=\"line\">    Data cur = first;  </span><br><span class=\"line\">    while(cur != null)&#123;  </span><br><span class=\"line\">        if(cur.obj.equals(obj))&#123;  </span><br><span class=\"line\">            return cur.obj;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        cur = cur.next;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return null;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">public void remove(Object obj) throws Exception&#123;  </span><br><span class=\"line\">    if(first == null)  </span><br><span class=\"line\">        throw new Exception(&quot;LinkedList is empty!&quot;);  </span><br><span class=\"line\">    if(first.obj.equals(obj))&#123;  </span><br><span class=\"line\">        first = first.next;  </span><br><span class=\"line\">    &#125;else&#123;  </span><br><span class=\"line\">        Data pre = first;  </span><br><span class=\"line\">        Data cur = first.next;  </span><br><span class=\"line\">        while(cur != null)&#123;  </span><br><span class=\"line\">            if(cur.obj.equals(obj))&#123;  </span><br><span class=\"line\">                pre.next = cur.next;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            pre = cur;  </span><br><span class=\"line\">            cur = cur.next;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">public boolean isEmpty()&#123;  </span><br><span class=\"line\">    return (first == null);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public void display()&#123;</span><br><span class=\"line\">    if(first == null)</span><br><span class=\"line\">        System.out.println(&quot;empty&quot;);</span><br><span class=\"line\">    Data cur = first;</span><br><span class=\"line\">    while(cur != null)&#123;</span><br><span class=\"line\">        System.out.print(cur.obj.toString() + &quot; -&gt; &quot;);</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.print(&quot;\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">    chain ll = new chain();</span><br><span class=\"line\">    ll.insertFirst(4);</span><br><span class=\"line\">    ll.insertFirst(3);</span><br><span class=\"line\">    ll.insertFirst(2);</span><br><span class=\"line\">    ll.insertFirst(1);</span><br><span class=\"line\">    ll.display();</span><br><span class=\"line\">    ll.deleteFirst();</span><br><span class=\"line\">    ll.display();</span><br><span class=\"line\">    ll.remove(3);</span><br><span class=\"line\">    ll.display();</span><br><span class=\"line\">    System.out.println(ll.find(1));</span><br><span class=\"line\">    System.out.println(ll.find(4));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h2><h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>保存输入的顺序，而且可以重复的存储相关元素。</p>\n<h4 id=\"ArrayList-随机访问-数组线性表\"><a href=\"#ArrayList-随机访问-数组线性表\" class=\"headerlink\" title=\"ArrayList(随机访问)(数组线性表)\"></a>ArrayList(随机访问)(数组线性表)</h4><p>ArrayList数组线性表的特点为:类似数组的形式进行存储，因此它的随机访问速度极快。<br>ArrayList数组线性表的缺点为:不适合于在线性表中间需要频繁进行插入和删除操作。因为每次插入和删除都需要移动数组中的元素。可以这样理解ArrayList就是基于数组的一个线性表，只不过数组的长度可以动态改变而已。ArrayList线程不安全，</p>\n<h4 id=\"LinkedList-频繁删除添加-链式线性表\"><a href=\"#LinkedList-频繁删除添加-链式线性表\" class=\"headerlink\" title=\"LinkedList(频繁删除添加)(链式线性表)\"></a>LinkedList(频繁删除添加)(链式线性表)</h4><p>您要频繁的从列表的中间位置添加和除去元素，而只要顺序的访问列表元素，那么，LinkedList 实现更好。<br>可以这样理解LinkedList就是一种双向循环链表的链式线性表，只不过存储的结构使用的是链式表而已。</p>\n<h4 id=\"Vector-向量\"><a href=\"#Vector-向量\" class=\"headerlink\" title=\"Vector(向量)\"></a>Vector(向量)</h4><p>如果一定在多线程使用List的，您可以使用Vector，因为Vector和ArrayList基本一致，区别在于Vector中的绝大部分方法都使用了同步关键字修饰，这样在多线程的情况下不会出现并发错误哦，还有就是它们的扩容方案不同，ArrayList是通过原始容量*3/2+1,而Vector是允许设置默认的增长长度，Vector的默认扩容方式为原来的2倍。<br>切记Vector是ArrayList的多线程的一个替代品。</p>\n<h4 id=\"Stack-栈\"><a href=\"#Stack-栈\" class=\"headerlink\" title=\"Stack(栈)\"></a>Stack(栈)</h4><p>在各种List中，最好的做法是以ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList();Vector总是比ArrayList慢，所以要尽量避免使用。使用最多的是ArrayList。</p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Set子接口: 无序，不允许有重复的元素,最多允许有一个null元素对象。</p>\n<h4 id=\"HashSet-没有顺序\"><a href=\"#HashSet-没有顺序\" class=\"headerlink\" title=\"HashSet(没有顺序)\"></a>HashSet(没有顺序)</h4><p>您会使用 HashSet 存储重复自由的集合。考虑到效率，添加到 HashSet 的对象需要采用恰当分配哈希码的方式来实现hashCode()方法。虽然大多数系统类覆盖了Object中缺省的hashCode()和equals()实现，但创建您自己的要添加到HashSet的类时，别忘了覆盖 hashCode()和equals()。</p>\n<h4 id=\"LinkedHashSet-添加顺序会被记录\"><a href=\"#LinkedHashSet-添加顺序会被记录\" class=\"headerlink\" title=\"LinkedHashSet(添加顺序会被记录)\"></a>LinkedHashSet(添加顺序会被记录)</h4><p>如果想跟踪添加给HashSet的元素的顺序，LinkedHashSet实现会有帮助。 按照元素的插入顺序来访问各个元素。它提供了一个可以快速访问各个元素的有序集合。</p>\n<h4 id=\"TreeSet-按照比较器排序\"><a href=\"#TreeSet-按照比较器排序\" class=\"headerlink\" title=\"TreeSet(按照比较器排序)\"></a>TreeSet(按照比较器排序)</h4><p>当您要从集合中以有序的方式插入和抽取元素时，TreeSet实现会有用处。<br>为了能顺利进行。添加到TreeSet的元素必须是可排序的。<br>在各种Set中，HashSet通常优于TreeSet（插入、查找）。只有当需要产生一个经过排序的序列，才用TreeSet。<br>TreeSet存在的唯一理由：能够维护其内元素的排序状态。</p>\n<h3 id=\"Queue-队列\"><a href=\"#Queue-队列\" class=\"headerlink\" title=\"Queue(队列)\"></a>Queue(队列)</h3><h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>Map接口用于维护键/值对(key/value pairs)。该接口描述了从不重复的键到值的映射。</p>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h4><p>在Map 中插入、删除和定位元素，HashMap 是最好的选择。</p>\n<h4 id=\"LinkedHashMap-包含插入顺序\"><a href=\"#LinkedHashMap-包含插入顺序\" class=\"headerlink\" title=\"LinkedHashMap(包含插入顺序)\"></a>LinkedHashMap(包含插入顺序)</h4><p>以插入顺序将关键字/值对添加进链接哈希映像中</p>\n<h4 id=\"TreeMap-自定义顺序\"><a href=\"#TreeMap-自定义顺序\" class=\"headerlink\" title=\"TreeMap(自定义顺序)\"></a>TreeMap(自定义顺序)</h4><p>但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。</p>\n<h4 id=\"WeakHashMap\"><a href=\"#WeakHashMap\" class=\"headerlink\" title=\"WeakHashMap\"></a>WeakHashMap</h4><p>它使用WeakReference(弱引用)来存放哈希表关键字。使用这种方式时，当映射的键在 WeakHashMap 的外部不再被引用时，垃圾收集器会将它回收，但它将把到达该对象的弱引用纳入一个队列。WeakHashMap的运行将定期检查该队列，以便找出新到达的 弱应用。当一个弱引用到达该队列时，就表示关键字不再被任何人使用，并且已经被收集起来。然后WeakHashMap便删除相关的映射。</p>\n<h4 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h4><p>在各种Map中HashMap用于快速查找，使用的最多。</p>\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p>我们都知道，由于Array(数组)通常意义上讲只是一个单纯的线性序列，又基于Native(本地方法)，凭此它的效率历来便号称Java中最高。所以通常我们也都承认Java中效率最高的存储方式就是使用数组。但是，由于数组初始化后大小固定，索引不能超出下标，缺少灵活的扩展功能等原因，使得很多人放弃了数组的使用， 转而使用Collection,List,Map,Set等接口处理集合操作。</p>\n<blockquote>\n<p>当元素个数固定，用Array，因为Array效率是最高的。</p>\n</blockquote>\n<p>比较器(Comparator和Comparable接口)<br>在“集合框架”中有两种比较接口：Comparable接口和Comparator接口。像String和Integer<br>等Java内建类实现 Comparable接口以提供一定排序方式，但这样只能实现该接口一次。对于那些没有实现Comparable接口的类、或者自定义的类，您可以通过 Comparator接口来定义您自己的比较方式。</p>\n<h3 id=\"Comparable接口\"><a href=\"#Comparable接口\" class=\"headerlink\" title=\"Comparable接口\"></a>Comparable接口</h3><p>在java.lang包中，Comparable接口适用于一个类有自然顺序的时候。假定对象集合是同一类型，该接口允许您把集合排序成自然顺序。</p>\n<p>(1) int compareTo(Object o): 比较当前实例对象与对象o，如果位于对象o之前，返回负<br>值，如果两个对象在排序中位置相同，则返回0，如果位于对象o后面，则返回正值<br>在 Java 2 SDK版本1.4中有二十四个类实现Comparable接口。下表展示了8种基本类型的自然排序。<br>虽然一些类共享同一种自然排序，但只有相互可比的类才能排序。类排序 BigDecimal,BigInteger,Byte, Double, Float,Integer,Long,Short 按数字大小排序<br>Character 按 Unicode 值的数字大小排序<br>String 按字符串中字符 Unicode 值排序<br>利用Comparable接口创建您自己的类的排序顺序，只是实现compareTo()方法的问题。通常就是依赖几个数据成员的自然排序。同时类也应该覆盖equals()和hashCode()以确保两个相等的对象返回同一个哈希码。</p>\n<h3 id=\"Comparator接口\"><a href=\"#Comparator接口\" class=\"headerlink\" title=\"Comparator接口\"></a>Comparator接口</h3><p>若一个类不能用于实现java.lang.Comparable，或者您不喜欢缺省的Comparable行为并想提供自己的排序顺序(可能多种排序方式)，你可以实现Comparator接口，从而定义一个比较器。</p>\n<p>(1)int compare(Object o1, Object o2): 对两个对象o1和o2进行比较，如果o1位于o2<br>的前面，则返回负值，如果在排序顺序中认为o1和o2是相同的，返回0，如果o1位于o2的<br>后面，则返回正值“与Comparable相似，0返回值不表示元素相等。一个0返回值只是表示两个对象排在同一位置。由Comparator用户决定如何处理。如果两个不相等的元素比较的结果为零，您首先应该确信那就是您要的结果，然后记录行为。”</p>\n<p>(2)boolean equals(Object obj): 指示对象obj是否和比较器相等。<br>“该方法覆写Object的equals()方法，检查的是Comparator实现的等同性，不是处于比较<br>状态下的对象。”</p>\n<h2 id=\"Iterator-迭代模式\"><a href=\"#Iterator-迭代模式\" class=\"headerlink\" title=\"Iterator(迭代模式)\"></a>Iterator(迭代模式)</h2><p>调用iterator()方法，返回Iterator<t>对象，Iterator<t>对象有hasnext();next();方法提供循环</t></t></p>\n<p>Collection接口有iterator()方法。Map.entrySet()返回Set&lt;Map.Entry&lt;K,V&gt;&gt;,然后调用Collection对应的iterator();方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator iterator = Collection.iterator();</span><br><span class=\"line\">while(iterator.hasNext()) &#123;</span><br><span class=\"line\">Object iter=iterator.next();</span><br><span class=\"line\">System.out.println(&quot;object=&quot; +object);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Iterator iterator = Map.entrySet().iterator();</span><br><span class=\"line\">while (iterator .hasNext()) &#123;</span><br><span class=\"line\">Map.Entry entry = (Map.Entry) iterator .next();</span><br><span class=\"line\">Object key = entry.getKey();</span><br><span class=\"line\">Object value = entry.getValue();</span><br><span class=\"line\">System.out.println(&quot;key=&quot; + key + &quot; value=&quot; + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"工具类Collections-and-Arrays-静态方法\"><a href=\"#工具类Collections-and-Arrays-静态方法\" class=\"headerlink\" title=\"工具类Collections and Arrays(静态方法)\"></a>工具类Collections and Arrays(静态方法)</h2><h3 id=\"Collections-常用方法\"><a href=\"#Collections-常用方法\" class=\"headerlink\" title=\"Collections(常用方法)\"></a>Collections(常用方法)</h3><p>addAll添加</p>\n<p>shuffle混排</p>\n<p>binarySearch二分查搜索法</p>\n<p>reverse反转</p>\n<p>fill 替换</p>\n<p>max/min 找出最大/最小(根据默认的自然排序或者自定义排序规则)</p>\n<p>sort排序(根据默认的自然排序或者自定义排序规则)</p>\n<h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><p>binarySearch二分搜索法</p>\n<p>sort排序</p>\n<p>copyOf复制</p>\n<p>equals判断相等</p>\n<p>fill指定分配、替换</p>\n<p>toString 返货字符串</p>\n<p>hashCode哈希吗</p>\n<p>详情参考<a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"noopener\">中文API</a>  <a href=\"https://docs.oracle.com/javase/8/docs/api/\" target=\"_blank\" rel=\"noopener\">oracle官网API</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实际工作中，若用到集合框架，最常用的是ArrayList,HashSet,HashMap。这三者也是首先考虑的。而且，因为TreeXXX继承SortedXXX，所以用TreeXXX都是排序的。</p>\n<h2 id=\"参看文献\"><a href=\"#参看文献\" class=\"headerlink\" title=\"参看文献\"></a>参看文献</h2><p><a href=\"http://www.cnblogs.com/xiohao/p/4309462.html\" target=\"_blank\" rel=\"noopener\">java集合框架的讲解</a><br><a href=\"http://blog.csdn.net/kerryfish/article/details/24043099\" target=\"_blank\" rel=\"noopener\">JAVA中关于链表的操作和基本算法</a><br><a href=\"http://doc.okbase.net/DavidIsOK/archive/94766.html\" target=\"_blank\" rel=\"noopener\">java的集合框架最全详解（图）</a><br><a href=\"http://blog.csdn.net/zsw101259/article/details/7570033\" target=\"_blank\" rel=\"noopener\">集合_java集合框架</a><br>《Thinking in java》<br>《算法与数据结构》——-java语言描述 清华大学出版社</p>"},{"title":"Tomcat源码阅读之从server.xml看组件关系","date":"2018-04-15T22:59:43.000Z","description":"研究tomcat系列，server.xml,从startup.bat到Bootstrap.class ","_content":"\n## 组件关系图\n\n[百度脑图Server.xml](http://naotu.baidu.com/file/43052d65c99873cc44a09e10a577de38?token=2c2c55090d50e6df)\n\n![组件关系](/Tomcat源码阅读之从server-xml看组件关系/image001.png)\n![用户和HTTP、容器的关系](1174710-20170804092103272-2042915115.png)\n\n## server.xml 文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n    <!-- Define an AJP 1.3 Connector on port 8009 -->\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <!--\n      <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/>\n      -->\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/>\n      </Realm>\n\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <!--\n        <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" />\n        -->\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n        <Context path=\"/\" docBase=\"D:\\Program Files \\app1.war\" reloadable=\"true\"/>\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n\n```\n\n这个大致的组件印象也是之后研究代码的方向。\n\n\n\n## catalina.bat 文件告诉你那个是启动入口\n\n#### 怎么找到启动类?\n\n分析catalina.bat 文件\n`  --setlocal 设置变量等 -- `\n设置 CATALINA_HOME  CATALINA_BASE\n执行setenv.bat  setclasspath.bat\n设置CLASSPATH tomcat-juli.jar JAVA_OPTS LOGGING_CONFIG  LOGGING_MANAGER\n\n`-- Execute The Requested Command 执行用户请求 --`\n\nset _EXECJAVA=%_RUNJAVA%\nset MAINCLASS=org.apache.catalina.startup.Bootstrap\n\necho   debug             Start Catalina in a debugger\necho   debug -security   Debug Catalina with a security manager\necho   jpda start        Start Catalina under JPDA debugger\necho   run               Start Catalina in the current window\necho   run -security     Start in the current window with security manager\necho   start             Start Catalina in a separate window\necho   start -security   Start in a separate window with security manager\necho   stop              Stop Catalina\necho   configtest        Run a basic syntax check on server.xml\necho   version \n\n\n其中的命令\n\n找到了  `set MAINCLASS=org.apache.catalina.startup.Bootstrap` 从Bootstrap找到main函数.\n\n\n#### 从main启动到所有组件启动\n\ntomcat 启动的时候打印的日志可以借助这个来分析一下\n\n```\n\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Server version:        Apache Tomcat/8.0.39\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Server built:          Nov 9 2016 08:48:39 UTC\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Server number:         8.0.39.0\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: OS Name:               Windows 7\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: OS Version:            6.1\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Architecture:          amd64\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Java Home:             C:\\Program Files\\Java\\jdk1.8.0_111\\jre\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: JVM Version:           1.8.0_111-b14\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: JVM Vendor:            Oracle Corporation\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: CATALINA_BASE:         D:\\tomcat\\apache-tomcat-8.0.39-8080\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: CATALINA_HOME:         D:\\tomcat\\apache-tomcat-8.0.39-8080\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Dcatalina.base=D:\\tomcat\\apache-tomcat-8.0.39-8080\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Dcatalina.home=D:\\tomcat\\apache-tomcat-8.0.39-8080\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Dwtp.deploy=D:\\tomcat\\apache-tomcat-8.0.39-8080\\webapps\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Djava.endorsed.dirs=D:\\tomcat\\apache-tomcat-8.0.39-8080\\endorsed\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Djava.library.path=C:\\Program Files\\Java\\jdk1.8.0_111\\bin;D:\\tomcat\\apache-tomcat-8.0.39-8080\\bin\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Dfile.encoding=UTF-8\n```\n以上 都是Log信息打印出来的信息\n\n```\n四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent\n信息: Loaded APR based Apache Tomcat Native library 1.2.10 using APR version 1.5.2.\n四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent\n信息: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\n四月 16, 2018 5:46:38 下午 org.apache.catalina.core.AprLifecycleListener initializeSSL\n信息: OpenSSL successfully initialized (OpenSSL 1.0.2j  26 Sep 2016)\n四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init\n信息: Initializing ProtocolHandler [\"http-apr-8080\"]\n四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init\n信息: Initializing ProtocolHandler [\"ajp-apr-8018\"]\n四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina load\n信息: Initialization processed in 1173 ms\n四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardService startInternal\n信息: Starting service Catalina\n四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardEngine startInternal\n信息: Starting Servlet Engine: Apache Tomcat/8.0.39\n四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start\n信息: Starting ProtocolHandler [\"http-apr-8080\"]\n四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start\n信息: Starting ProtocolHandler [\"ajp-apr-8018\"]\n四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina start\n信息: Server startup in 68 ms\n\n```\n从Bootstrap 到 Catalina 总体流程  main  init load start&stop\n\n![main](/Tomcat源码阅读之从server-xml看组件关系/main.PNG)\n\nmain中一上来就调用 init，init是为了产生Catalina实例,然后是load 和start 等。\n\n![init](/Tomcat源码阅读之从server-xml看组件关系/init.PNG)\n\nmain 调用 init ` Class<?> startupClass = catalinaLoader.loadClass(\"org.apache.catalina.startup.Catalina\");`\n` Object startupInstance = startupClass.getConstructor().newInstance();` 反射获取类的实例，\n之后` catalinaDaemon = startupInstance;`  赋值给catalinaDaemon, laod和start、getServer等方法都是从这个对象中执行的，实际上就是执行的Catalina的方法\n\n![load](/Tomcat源码阅读之从server-xml看组件关系/load.PNG)\n\n这个和 `method.invoke(catalinaDaemon, param);`  相当于catalina.load(param);\n\n中间加一个Catalina的laod方法重点代码\n![start&stop](/Tomcat源码阅读之从server-xml看组件关系/catalinaload.PNG)\n`getServer().init();`\n\n`log.info(\"Initialization processed in \" + ((t2 - t1) / 1000000) + \" ms\");`\n从上面的tomcat启动的时候打印出来的日志中就有这一行`信息: Initialization processed in 1173 ms`\n\n\n这个时候是生命周期的NEW init初始化，如果执行的是启动的命令，就会调用下面Bootstrap中\n\n\n![start&stop](/Tomcat源码阅读之从server-xml看组件关系/start&stop.PNG)\n`Method method = catalinaDaemon.getClass().getMethod(\"start\", (Class [] )null); method.invoke(catalinaDaemon, (Object [])null);` 反射,一样调用Catalina中的start方法和对应的stop方法。\n\n\n最后的启动后`信息: Server startup in 68 ms`日志信息,是在Catalina中的start方法`log.info(\"Server startup in \" + ((t2 - t1) / 1000000) + \" ms\");`\n`getServer().start();`这个方法中同样会执行一个start()方法， 之后会讲解一下这个Server和之后的其他组件之间是怎么加载启动等，这里的组件就是server.xml文件的这些组件，\n\n这个只是简单的初始化和启动的问题，下一个就会说具体的生命周期主要类`Lifecycle`\n\n先放个图吧\n![start&stop](/Tomcat源码阅读之从server-xml看组件关系/Lifecycle.PNG)\n\n参考下一篇 [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)                                                                                        \n系列文章\n\n- [Tomcat源码阅读之从server.xml看组件关系](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/)\n- [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)\n- [Tomcat源码阅读之URL请求解析](http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/)\n- [Tomcat源码阅读之Container责任链](https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/)\n\n\n参看文献：\n\n- 《深入剖析Tomcat》\n- [Tomcat 系统架构与设计模式](https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)\n- [tomcat8.5.30源码](http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip)\n- [手写一个简化版Tomcat](https://my.oschina.net/liughDevelop/blog/1790893#comment-list)","source":"_posts/Tomcat源码阅读之从server-xml看组件关系.md","raw":"---\ntitle: Tomcat源码阅读之从server.xml看组件关系\ndate: 2018-04-16 06:59:43\ntags: tomcat\ncategories: java\ndescription: \"研究tomcat系列，server.xml,从startup.bat到Bootstrap.class \"\n---\n\n## 组件关系图\n\n[百度脑图Server.xml](http://naotu.baidu.com/file/43052d65c99873cc44a09e10a577de38?token=2c2c55090d50e6df)\n\n![组件关系](/Tomcat源码阅读之从server-xml看组件关系/image001.png)\n![用户和HTTP、容器的关系](1174710-20170804092103272-2042915115.png)\n\n## server.xml 文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n    <!-- Define an AJP 1.3 Connector on port 8009 -->\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <!--\n      <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/>\n      -->\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/>\n      </Realm>\n\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <!--\n        <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" />\n        -->\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n        <Context path=\"/\" docBase=\"D:\\Program Files \\app1.war\" reloadable=\"true\"/>\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n\n```\n\n这个大致的组件印象也是之后研究代码的方向。\n\n\n\n## catalina.bat 文件告诉你那个是启动入口\n\n#### 怎么找到启动类?\n\n分析catalina.bat 文件\n`  --setlocal 设置变量等 -- `\n设置 CATALINA_HOME  CATALINA_BASE\n执行setenv.bat  setclasspath.bat\n设置CLASSPATH tomcat-juli.jar JAVA_OPTS LOGGING_CONFIG  LOGGING_MANAGER\n\n`-- Execute The Requested Command 执行用户请求 --`\n\nset _EXECJAVA=%_RUNJAVA%\nset MAINCLASS=org.apache.catalina.startup.Bootstrap\n\necho   debug             Start Catalina in a debugger\necho   debug -security   Debug Catalina with a security manager\necho   jpda start        Start Catalina under JPDA debugger\necho   run               Start Catalina in the current window\necho   run -security     Start in the current window with security manager\necho   start             Start Catalina in a separate window\necho   start -security   Start in a separate window with security manager\necho   stop              Stop Catalina\necho   configtest        Run a basic syntax check on server.xml\necho   version \n\n\n其中的命令\n\n找到了  `set MAINCLASS=org.apache.catalina.startup.Bootstrap` 从Bootstrap找到main函数.\n\n\n#### 从main启动到所有组件启动\n\ntomcat 启动的时候打印的日志可以借助这个来分析一下\n\n```\n\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Server version:        Apache Tomcat/8.0.39\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Server built:          Nov 9 2016 08:48:39 UTC\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Server number:         8.0.39.0\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: OS Name:               Windows 7\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: OS Version:            6.1\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Architecture:          amd64\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Java Home:             C:\\Program Files\\Java\\jdk1.8.0_111\\jre\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: JVM Version:           1.8.0_111-b14\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: JVM Vendor:            Oracle Corporation\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: CATALINA_BASE:         D:\\tomcat\\apache-tomcat-8.0.39-8080\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: CATALINA_HOME:         D:\\tomcat\\apache-tomcat-8.0.39-8080\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Dcatalina.base=D:\\tomcat\\apache-tomcat-8.0.39-8080\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Dcatalina.home=D:\\tomcat\\apache-tomcat-8.0.39-8080\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Dwtp.deploy=D:\\tomcat\\apache-tomcat-8.0.39-8080\\webapps\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Djava.endorsed.dirs=D:\\tomcat\\apache-tomcat-8.0.39-8080\\endorsed\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Djava.library.path=C:\\Program Files\\Java\\jdk1.8.0_111\\bin;D:\\tomcat\\apache-tomcat-8.0.39-8080\\bin\n四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log\n信息: Command line argument: -Dfile.encoding=UTF-8\n```\n以上 都是Log信息打印出来的信息\n\n```\n四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent\n信息: Loaded APR based Apache Tomcat Native library 1.2.10 using APR version 1.5.2.\n四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent\n信息: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\n四月 16, 2018 5:46:38 下午 org.apache.catalina.core.AprLifecycleListener initializeSSL\n信息: OpenSSL successfully initialized (OpenSSL 1.0.2j  26 Sep 2016)\n四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init\n信息: Initializing ProtocolHandler [\"http-apr-8080\"]\n四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init\n信息: Initializing ProtocolHandler [\"ajp-apr-8018\"]\n四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina load\n信息: Initialization processed in 1173 ms\n四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardService startInternal\n信息: Starting service Catalina\n四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardEngine startInternal\n信息: Starting Servlet Engine: Apache Tomcat/8.0.39\n四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start\n信息: Starting ProtocolHandler [\"http-apr-8080\"]\n四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start\n信息: Starting ProtocolHandler [\"ajp-apr-8018\"]\n四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina start\n信息: Server startup in 68 ms\n\n```\n从Bootstrap 到 Catalina 总体流程  main  init load start&stop\n\n![main](/Tomcat源码阅读之从server-xml看组件关系/main.PNG)\n\nmain中一上来就调用 init，init是为了产生Catalina实例,然后是load 和start 等。\n\n![init](/Tomcat源码阅读之从server-xml看组件关系/init.PNG)\n\nmain 调用 init ` Class<?> startupClass = catalinaLoader.loadClass(\"org.apache.catalina.startup.Catalina\");`\n` Object startupInstance = startupClass.getConstructor().newInstance();` 反射获取类的实例，\n之后` catalinaDaemon = startupInstance;`  赋值给catalinaDaemon, laod和start、getServer等方法都是从这个对象中执行的，实际上就是执行的Catalina的方法\n\n![load](/Tomcat源码阅读之从server-xml看组件关系/load.PNG)\n\n这个和 `method.invoke(catalinaDaemon, param);`  相当于catalina.load(param);\n\n中间加一个Catalina的laod方法重点代码\n![start&stop](/Tomcat源码阅读之从server-xml看组件关系/catalinaload.PNG)\n`getServer().init();`\n\n`log.info(\"Initialization processed in \" + ((t2 - t1) / 1000000) + \" ms\");`\n从上面的tomcat启动的时候打印出来的日志中就有这一行`信息: Initialization processed in 1173 ms`\n\n\n这个时候是生命周期的NEW init初始化，如果执行的是启动的命令，就会调用下面Bootstrap中\n\n\n![start&stop](/Tomcat源码阅读之从server-xml看组件关系/start&stop.PNG)\n`Method method = catalinaDaemon.getClass().getMethod(\"start\", (Class [] )null); method.invoke(catalinaDaemon, (Object [])null);` 反射,一样调用Catalina中的start方法和对应的stop方法。\n\n\n最后的启动后`信息: Server startup in 68 ms`日志信息,是在Catalina中的start方法`log.info(\"Server startup in \" + ((t2 - t1) / 1000000) + \" ms\");`\n`getServer().start();`这个方法中同样会执行一个start()方法， 之后会讲解一下这个Server和之后的其他组件之间是怎么加载启动等，这里的组件就是server.xml文件的这些组件，\n\n这个只是简单的初始化和启动的问题，下一个就会说具体的生命周期主要类`Lifecycle`\n\n先放个图吧\n![start&stop](/Tomcat源码阅读之从server-xml看组件关系/Lifecycle.PNG)\n\n参考下一篇 [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)                                                                                        \n系列文章\n\n- [Tomcat源码阅读之从server.xml看组件关系](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/)\n- [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)\n- [Tomcat源码阅读之URL请求解析](http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/)\n- [Tomcat源码阅读之Container责任链](https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/)\n\n\n参看文献：\n\n- 《深入剖析Tomcat》\n- [Tomcat 系统架构与设计模式](https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)\n- [tomcat8.5.30源码](http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip)\n- [手写一个简化版Tomcat](https://my.oschina.net/liughDevelop/blog/1790893#comment-list)","slug":"Tomcat源码阅读之从server-xml看组件关系","published":1,"updated":"2018-04-20T07:48:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79r0071ugv59zk7y4by","content":"<h2 id=\"组件关系图\"><a href=\"#组件关系图\" class=\"headerlink\" title=\"组件关系图\"></a>组件关系图</h2><p><a href=\"http://naotu.baidu.com/file/43052d65c99873cc44a09e10a577de38?token=2c2c55090d50e6df\" target=\"_blank\" rel=\"noopener\">百度脑图Server.xml</a></p>\n<p><img src=\"/.io//image001.png\" alt=\"组件关系\"><br><img src=\"/.io//1174710-20170804092103272-2042915115.png\" alt=\"用户和HTTP、容器的关系\"></p>\n<h2 id=\"server-xml-文件\"><a href=\"#server-xml-文件\" class=\"headerlink\" title=\"server.xml 文件\"></a>server.xml 文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;GlobalNamingResources&gt;</span><br><span class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class=\"line\">              description=&quot;User database that can be updated and saved&quot;</span><br><span class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class=\"line\">  &lt;/GlobalNamingResources&gt;</span><br><span class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class=\"line\">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span><br><span class=\"line\">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class=\"line\">      &lt;!--</span><br><span class=\"line\">      &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;</span><br><span class=\"line\">      --&gt;</span><br><span class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot; resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class=\"line\">      &lt;/Realm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class=\"line\">        &lt;!--</span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class=\"line\">        &lt;Context path=&quot;/&quot; docBase=&quot;D:\\Program Files \\app1.war&quot; reloadable=&quot;true&quot;/&gt;</span><br><span class=\"line\">      &lt;/Host&gt;</span><br><span class=\"line\">    &lt;/Engine&gt;</span><br><span class=\"line\">  &lt;/Service&gt;</span><br><span class=\"line\">&lt;/Server&gt;</span><br></pre></td></tr></table></figure>\n<p>这个大致的组件印象也是之后研究代码的方向。</p>\n<h2 id=\"catalina-bat-文件告诉你那个是启动入口\"><a href=\"#catalina-bat-文件告诉你那个是启动入口\" class=\"headerlink\" title=\"catalina.bat 文件告诉你那个是启动入口\"></a>catalina.bat 文件告诉你那个是启动入口</h2><h4 id=\"怎么找到启动类\"><a href=\"#怎么找到启动类\" class=\"headerlink\" title=\"怎么找到启动类?\"></a>怎么找到启动类?</h4><p>分析catalina.bat 文件<br><code>--setlocal 设置变量等 --</code><br>设置 CATALINA_HOME  CATALINA_BASE<br>执行setenv.bat  setclasspath.bat<br>设置CLASSPATH tomcat-juli.jar JAVA_OPTS LOGGING_CONFIG  LOGGING_MANAGER</p>\n<p><code>-- Execute The Requested Command 执行用户请求 --</code></p>\n<p>set _EXECJAVA=%_RUNJAVA%<br>set MAINCLASS=org.apache.catalina.startup.Bootstrap</p>\n<p>echo   debug             Start Catalina in a debugger<br>echo   debug -security   Debug Catalina with a security manager<br>echo   jpda start        Start Catalina under JPDA debugger<br>echo   run               Start Catalina in the current window<br>echo   run -security     Start in the current window with security manager<br>echo   start             Start Catalina in a separate window<br>echo   start -security   Start in a separate window with security manager<br>echo   stop              Stop Catalina<br>echo   configtest        Run a basic syntax check on server.xml<br>echo   version </p>\n<p>其中的命令</p>\n<p>找到了  <code>set MAINCLASS=org.apache.catalina.startup.Bootstrap</code> 从Bootstrap找到main函数.</p>\n<h4 id=\"从main启动到所有组件启动\"><a href=\"#从main启动到所有组件启动\" class=\"headerlink\" title=\"从main启动到所有组件启动\"></a>从main启动到所有组件启动</h4><p>tomcat 启动的时候打印的日志可以借助这个来分析一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Server version:        Apache Tomcat/8.0.39</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Server built:          Nov 9 2016 08:48:39 UTC</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Server number:         8.0.39.0</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: OS Name:               Windows 7</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: OS Version:            6.1</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Architecture:          amd64</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Java Home:             C:\\Program Files\\Java\\jdk1.8.0_111\\jre</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: JVM Version:           1.8.0_111-b14</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: JVM Vendor:            Oracle Corporation</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: CATALINA_BASE:         D:\\tomcat\\apache-tomcat-8.0.39-8080</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: CATALINA_HOME:         D:\\tomcat\\apache-tomcat-8.0.39-8080</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Dcatalina.base=D:\\tomcat\\apache-tomcat-8.0.39-8080</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Dcatalina.home=D:\\tomcat\\apache-tomcat-8.0.39-8080</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Dwtp.deploy=D:\\tomcat\\apache-tomcat-8.0.39-8080\\webapps</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Djava.endorsed.dirs=D:\\tomcat\\apache-tomcat-8.0.39-8080\\endorsed</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Djava.library.path=C:\\Program Files\\Java\\jdk1.8.0_111\\bin;D:\\tomcat\\apache-tomcat-8.0.39-8080\\bin</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>\n<p>以上 都是Log信息打印出来的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent</span><br><span class=\"line\">信息: Loaded APR based Apache Tomcat Native library 1.2.10 using APR version 1.5.2.</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent</span><br><span class=\"line\">信息: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.AprLifecycleListener initializeSSL</span><br><span class=\"line\">信息: OpenSSL successfully initialized (OpenSSL 1.0.2j  26 Sep 2016)</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init</span><br><span class=\"line\">信息: Initializing ProtocolHandler [&quot;http-apr-8080&quot;]</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init</span><br><span class=\"line\">信息: Initializing ProtocolHandler [&quot;ajp-apr-8018&quot;]</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina load</span><br><span class=\"line\">信息: Initialization processed in 1173 ms</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardService startInternal</span><br><span class=\"line\">信息: Starting service Catalina</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardEngine startInternal</span><br><span class=\"line\">信息: Starting Servlet Engine: Apache Tomcat/8.0.39</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start</span><br><span class=\"line\">信息: Starting ProtocolHandler [&quot;http-apr-8080&quot;]</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start</span><br><span class=\"line\">信息: Starting ProtocolHandler [&quot;ajp-apr-8018&quot;]</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina start</span><br><span class=\"line\">信息: Server startup in 68 ms</span><br></pre></td></tr></table></figure>\n<p>从Bootstrap 到 Catalina 总体流程  main  init load start&amp;stop</p>\n<p><img src=\"/.io//main.PNG\" alt=\"main\"></p>\n<p>main中一上来就调用 init，init是为了产生Catalina实例,然后是load 和start 等。</p>\n<p><img src=\"/.io//init.PNG\" alt=\"init\"></p>\n<p>main 调用 init <code>Class&lt;?&gt; startupClass = catalinaLoader.loadClass(&quot;org.apache.catalina.startup.Catalina&quot;);</code><br><code>Object startupInstance = startupClass.getConstructor().newInstance();</code> 反射获取类的实例，<br>之后<code>catalinaDaemon = startupInstance;</code>  赋值给catalinaDaemon, laod和start、getServer等方法都是从这个对象中执行的，实际上就是执行的Catalina的方法</p>\n<p><img src=\"/.io//load.PNG\" alt=\"load\"></p>\n<p>这个和 <code>method.invoke(catalinaDaemon, param);</code>  相当于catalina.load(param);</p>\n<p>中间加一个Catalina的laod方法重点代码<br><img src=\"/.io//catalinaload.PNG\" alt=\"start&amp;stop\"><br><code>getServer().init();</code></p>\n<p><code>log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</code><br>从上面的tomcat启动的时候打印出来的日志中就有这一行<code>信息: Initialization processed in 1173 ms</code></p>\n<p>这个时候是生命周期的NEW init初始化，如果执行的是启动的命令，就会调用下面Bootstrap中</p>\n<p><img src=\"/.io//start&amp;stop.PNG\" alt=\"start&amp;stop\"><br><code>Method method = catalinaDaemon.getClass().getMethod(&quot;start&quot;, (Class [] )null); method.invoke(catalinaDaemon, (Object [])null);</code> 反射,一样调用Catalina中的start方法和对应的stop方法。</p>\n<p>最后的启动后<code>信息: Server startup in 68 ms</code>日志信息,是在Catalina中的start方法<code>log.info(&quot;Server startup in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</code><br><code>getServer().start();</code>这个方法中同样会执行一个start()方法， 之后会讲解一下这个Server和之后的其他组件之间是怎么加载启动等，这里的组件就是server.xml文件的这些组件，</p>\n<p>这个只是简单的初始化和启动的问题，下一个就会说具体的生命周期主要类<code>Lifecycle</code></p>\n<p>先放个图吧<br><img src=\"/.io//Lifecycle.PNG\" alt=\"start&amp;stop\"></p>\n<p>参考下一篇 <a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a><br>系列文章</p>\n<ul>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/\">Tomcat源码阅读之从server.xml看组件关系</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/\">Tomcat源码阅读之URL请求解析</a></li>\n<li><a href=\"https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/\">Tomcat源码阅读之Container责任链</a></li>\n</ul>\n<p>参看文献：</p>\n<ul>\n<li>《深入剖析Tomcat》</li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">Tomcat 系统架构与设计模式</a></li>\n<li><a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip\" target=\"_blank\" rel=\"noopener\">tomcat8.5.30源码</a></li>\n<li><a href=\"https://my.oschina.net/liughDevelop/blog/1790893#comment-list\" target=\"_blank\" rel=\"noopener\">手写一个简化版Tomcat</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"组件关系图\"><a href=\"#组件关系图\" class=\"headerlink\" title=\"组件关系图\"></a>组件关系图</h2><p><a href=\"http://naotu.baidu.com/file/43052d65c99873cc44a09e10a577de38?token=2c2c55090d50e6df\" target=\"_blank\" rel=\"noopener\">百度脑图Server.xml</a></p>\n<p><img src=\"/.io//image001.png\" alt=\"组件关系\"><br><img src=\"/.io//1174710-20170804092103272-2042915115.png\" alt=\"用户和HTTP、容器的关系\"></p>\n<h2 id=\"server-xml-文件\"><a href=\"#server-xml-文件\" class=\"headerlink\" title=\"server.xml 文件\"></a>server.xml 文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;GlobalNamingResources&gt;</span><br><span class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class=\"line\">              description=&quot;User database that can be updated and saved&quot;</span><br><span class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class=\"line\">  &lt;/GlobalNamingResources&gt;</span><br><span class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class=\"line\">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span><br><span class=\"line\">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class=\"line\">      &lt;!--</span><br><span class=\"line\">      &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;</span><br><span class=\"line\">      --&gt;</span><br><span class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot; resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class=\"line\">      &lt;/Realm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class=\"line\">        &lt;!--</span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class=\"line\">        &lt;Context path=&quot;/&quot; docBase=&quot;D:\\Program Files \\app1.war&quot; reloadable=&quot;true&quot;/&gt;</span><br><span class=\"line\">      &lt;/Host&gt;</span><br><span class=\"line\">    &lt;/Engine&gt;</span><br><span class=\"line\">  &lt;/Service&gt;</span><br><span class=\"line\">&lt;/Server&gt;</span><br></pre></td></tr></table></figure>\n<p>这个大致的组件印象也是之后研究代码的方向。</p>\n<h2 id=\"catalina-bat-文件告诉你那个是启动入口\"><a href=\"#catalina-bat-文件告诉你那个是启动入口\" class=\"headerlink\" title=\"catalina.bat 文件告诉你那个是启动入口\"></a>catalina.bat 文件告诉你那个是启动入口</h2><h4 id=\"怎么找到启动类\"><a href=\"#怎么找到启动类\" class=\"headerlink\" title=\"怎么找到启动类?\"></a>怎么找到启动类?</h4><p>分析catalina.bat 文件<br><code>--setlocal 设置变量等 --</code><br>设置 CATALINA_HOME  CATALINA_BASE<br>执行setenv.bat  setclasspath.bat<br>设置CLASSPATH tomcat-juli.jar JAVA_OPTS LOGGING_CONFIG  LOGGING_MANAGER</p>\n<p><code>-- Execute The Requested Command 执行用户请求 --</code></p>\n<p>set _EXECJAVA=%_RUNJAVA%<br>set MAINCLASS=org.apache.catalina.startup.Bootstrap</p>\n<p>echo   debug             Start Catalina in a debugger<br>echo   debug -security   Debug Catalina with a security manager<br>echo   jpda start        Start Catalina under JPDA debugger<br>echo   run               Start Catalina in the current window<br>echo   run -security     Start in the current window with security manager<br>echo   start             Start Catalina in a separate window<br>echo   start -security   Start in a separate window with security manager<br>echo   stop              Stop Catalina<br>echo   configtest        Run a basic syntax check on server.xml<br>echo   version </p>\n<p>其中的命令</p>\n<p>找到了  <code>set MAINCLASS=org.apache.catalina.startup.Bootstrap</code> 从Bootstrap找到main函数.</p>\n<h4 id=\"从main启动到所有组件启动\"><a href=\"#从main启动到所有组件启动\" class=\"headerlink\" title=\"从main启动到所有组件启动\"></a>从main启动到所有组件启动</h4><p>tomcat 启动的时候打印的日志可以借助这个来分析一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Server version:        Apache Tomcat/8.0.39</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Server built:          Nov 9 2016 08:48:39 UTC</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Server number:         8.0.39.0</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: OS Name:               Windows 7</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: OS Version:            6.1</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Architecture:          amd64</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Java Home:             C:\\Program Files\\Java\\jdk1.8.0_111\\jre</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: JVM Version:           1.8.0_111-b14</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: JVM Vendor:            Oracle Corporation</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: CATALINA_BASE:         D:\\tomcat\\apache-tomcat-8.0.39-8080</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: CATALINA_HOME:         D:\\tomcat\\apache-tomcat-8.0.39-8080</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Dcatalina.base=D:\\tomcat\\apache-tomcat-8.0.39-8080</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Dcatalina.home=D:\\tomcat\\apache-tomcat-8.0.39-8080</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Dwtp.deploy=D:\\tomcat\\apache-tomcat-8.0.39-8080\\webapps</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Djava.endorsed.dirs=D:\\tomcat\\apache-tomcat-8.0.39-8080\\endorsed</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Djava.library.path=C:\\Program Files\\Java\\jdk1.8.0_111\\bin;D:\\tomcat\\apache-tomcat-8.0.39-8080\\bin</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class=\"line\">信息: Command line argument: -Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>\n<p>以上 都是Log信息打印出来的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent</span><br><span class=\"line\">信息: Loaded APR based Apache Tomcat Native library 1.2.10 using APR version 1.5.2.</span><br><span class=\"line\">四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent</span><br><span class=\"line\">信息: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.AprLifecycleListener initializeSSL</span><br><span class=\"line\">信息: OpenSSL successfully initialized (OpenSSL 1.0.2j  26 Sep 2016)</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init</span><br><span class=\"line\">信息: Initializing ProtocolHandler [&quot;http-apr-8080&quot;]</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init</span><br><span class=\"line\">信息: Initializing ProtocolHandler [&quot;ajp-apr-8018&quot;]</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina load</span><br><span class=\"line\">信息: Initialization processed in 1173 ms</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardService startInternal</span><br><span class=\"line\">信息: Starting service Catalina</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardEngine startInternal</span><br><span class=\"line\">信息: Starting Servlet Engine: Apache Tomcat/8.0.39</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start</span><br><span class=\"line\">信息: Starting ProtocolHandler [&quot;http-apr-8080&quot;]</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start</span><br><span class=\"line\">信息: Starting ProtocolHandler [&quot;ajp-apr-8018&quot;]</span><br><span class=\"line\">四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina start</span><br><span class=\"line\">信息: Server startup in 68 ms</span><br></pre></td></tr></table></figure>\n<p>从Bootstrap 到 Catalina 总体流程  main  init load start&amp;stop</p>\n<p><img src=\"/.io//main.PNG\" alt=\"main\"></p>\n<p>main中一上来就调用 init，init是为了产生Catalina实例,然后是load 和start 等。</p>\n<p><img src=\"/.io//init.PNG\" alt=\"init\"></p>\n<p>main 调用 init <code>Class&lt;?&gt; startupClass = catalinaLoader.loadClass(&quot;org.apache.catalina.startup.Catalina&quot;);</code><br><code>Object startupInstance = startupClass.getConstructor().newInstance();</code> 反射获取类的实例，<br>之后<code>catalinaDaemon = startupInstance;</code>  赋值给catalinaDaemon, laod和start、getServer等方法都是从这个对象中执行的，实际上就是执行的Catalina的方法</p>\n<p><img src=\"/.io//load.PNG\" alt=\"load\"></p>\n<p>这个和 <code>method.invoke(catalinaDaemon, param);</code>  相当于catalina.load(param);</p>\n<p>中间加一个Catalina的laod方法重点代码<br><img src=\"/.io//catalinaload.PNG\" alt=\"start&amp;stop\"><br><code>getServer().init();</code></p>\n<p><code>log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</code><br>从上面的tomcat启动的时候打印出来的日志中就有这一行<code>信息: Initialization processed in 1173 ms</code></p>\n<p>这个时候是生命周期的NEW init初始化，如果执行的是启动的命令，就会调用下面Bootstrap中</p>\n<p><img src=\"/.io//start&amp;stop.PNG\" alt=\"start&amp;stop\"><br><code>Method method = catalinaDaemon.getClass().getMethod(&quot;start&quot;, (Class [] )null); method.invoke(catalinaDaemon, (Object [])null);</code> 反射,一样调用Catalina中的start方法和对应的stop方法。</p>\n<p>最后的启动后<code>信息: Server startup in 68 ms</code>日志信息,是在Catalina中的start方法<code>log.info(&quot;Server startup in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</code><br><code>getServer().start();</code>这个方法中同样会执行一个start()方法， 之后会讲解一下这个Server和之后的其他组件之间是怎么加载启动等，这里的组件就是server.xml文件的这些组件，</p>\n<p>这个只是简单的初始化和启动的问题，下一个就会说具体的生命周期主要类<code>Lifecycle</code></p>\n<p>先放个图吧<br><img src=\"/.io//Lifecycle.PNG\" alt=\"start&amp;stop\"></p>\n<p>参考下一篇 <a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a><br>系列文章</p>\n<ul>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/\">Tomcat源码阅读之从server.xml看组件关系</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/\">Tomcat源码阅读之URL请求解析</a></li>\n<li><a href=\"https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/\">Tomcat源码阅读之Container责任链</a></li>\n</ul>\n<p>参看文献：</p>\n<ul>\n<li>《深入剖析Tomcat》</li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">Tomcat 系统架构与设计模式</a></li>\n<li><a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip\" target=\"_blank\" rel=\"noopener\">tomcat8.5.30源码</a></li>\n<li><a href=\"https://my.oschina.net/liughDevelop/blog/1790893#comment-list\" target=\"_blank\" rel=\"noopener\">手写一个简化版Tomcat</a></li>\n</ul>\n"},{"title":"从ES6中学习编码","date":"2016-09-16T03:59:14.000Z","description":"最近学习ECMAscript6，从字符串扩充上，学到了六种表示字符的方法，由此对编码格式又有了深入的了解。","_content":"\n## javascript中的表示方法\n\n\n```\n//二进制：0111 1010 （01 111 010 ）  八进制 172   十六进制： 7A   十进制：7*16+A*1=122\n//对应ASCII编码是122 如果是ASCII中的字符，UTF-8中是一致的，0-127对应0000 0000 -0xxx xxxx\n//而其他的需要两个字节的，高位补0  因此为 0000 0000 0111 1010  ==> 007A\n    console.log('z'); 本意\n    console.log('\\z');//转义字符，因为z不用转义，所以还是z\n    console.log('\\172');//ASCII 八进制  \n    console.log('\\x7A');//ASCII 十六进制\n    console.log('\\u007A');//Unicode 0000-FFFF之间的字符\n    console.log('\\u{7A}');//Unicode 大括号表示法与四字节的UTF-16编码是等价的。\nB（Binary)表示二进制，O（Octal）表示八进制，D（Decimal）或不加表示十进制，H（Hexadecimal）表示十六进制。\n```\n转义字符对应有一个参考\n\n| Escape Sequence |Code Unit Value | Unicode Character Name | Symbol |\n| ------------- |:-------------:|:-------------:| -----:|\n|\\b\t|0x0008\t|BACKSPACE\t            |&lt;BS&gt;  | \n|\\t\t|0x0009\t|CHARACTER TABULATION\t|&lt;HT&gt;  |\n|\\n\t|0x000A\t|LINE FEED (LF)\t        |&lt;LF&gt;  |\n|\\v\t|0x000B\t|LINE TABULATION\t    |&lt;VT&gt;  |\n|\\f\t|0x000C\t|FORM FEED (FF)\t        |&lt;FF&gt;  |\n|\\r\t|0x000D\t|CARRIAGE RETURN (CR)\t|&lt;CR&gt;  |\n|\\\"\t|0x0022\t|QUOTATION MARK\t        |\"      |\n|\\'\t|0x0027\t|APOSTROPHE\t            |'      |\n|\\\\\t|0x005C\t|REVERSE SOLIDUS\t    |\\      |\n\n> 如果转义字符不在此中，直接转义为本身\n\n代码中6-7行是一个意思的两种表达形式 都是ASCII码6是八进制，7是16进制，8=9行代码对应Unicode码，因为\\uxxxx只能表示0000-FFFF之间的字符，所以javascript中又引入了{},来展示字符。\n\n[ECMAscript中具有转义含义的字符](http://www.ecma-international.org/ecma-262/6.0/index.html#table-34)\n\n```\n    console.log('\\uD842\\uDFB7');\n    console.log('\\u{20BB7}');   \n    \n```\n> 但是，这种表示法只限于\\u0000——\\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达。\n\n一般常见中文字符都在这个区间内。特殊的，我们到Unicode这一部分再解释。\n\n结果在控制台上显示出“𠮷”，这是个什么字？不知道。\n\n## ASCII到底是个什么鬼？\n美国内部的统一就是ASCII码 ASCII 0-127（0000 0000 -0FFF FFFF之间）ASC码\n\n键盘上的打印字符、以及换行、退格等都在这个区间内，但是这只是一个美国标准。\n\n当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。不过呢，随着时间的推移，欧洲等其他国家也能用得起电脑了，但是，又不能表示自己的符号，因此这个标准也可以需要被扩展了。\n> 一个字符一个字节\n\n他们决定采用 127号之后的空位来表示这些新的字母、符号，还加入表格符号、计算符号、希腊字母和特殊的拉丁符号。一直把序号编到了最后一个状态255。从128 到255这一页的字符集被称\"扩展字符集\"。可以说ASCII扩展集主要解决的是欧洲拉丁等字符的展示。\n\n> 小秘密:按住ALT+要查询的码值（注意，这里是十进制），松开即可显示出对应字符。例如：按住ALT+97,则会显示出'a'。\n\n![ASCII](从ES6中学习编码/2011050311372042.png)\n![ASCII扩展集](从ES6中学习编码/201105031137219627.png)\n\n## GB2312和GBK又有什么关系？\n\n但是随着时间的推移，电脑也慢慢走进中国，可是电脑上不能显示汉字，这对于中国来说，是一个大问题。因此中国制定了GB2312字符集。\n\n我国专家把那些127号之后的奇异符号（即ASCII扩展集）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的\"全角\"字符，而原来在127号以下的那些就叫\"半角\"字符了。\n\n> 一个汉字两个字节的历史就是在这里产生的。（一个字符两个字节，连同ASCII中的字符也被编码成两个字节）\n\n可是中国语言博大精深，那时这区区7000多个汉字就能展现的？于是就制定了新的字符集GBK，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。这样就大大展示出来中国语言的魅力。\n\n后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了 GB18030。\n\n顺便提一下，因为台湾也使用汉字，不过他们使用的是自己的一套字符集编码规则（BIG5），因此同属一个汉字，可能就出现两种不同的编码序列。\n这时候不仅仅是中国乱成一团，世界上大多数国家都看到电脑真是个好东西，都想用，咋办，各搞各的字符集，各自制定自己的编码规范，于是出现了\"百花齐放百家争鸣\"的状况。\n\n## Unicode是怎么冒出了的？\n\n正在这时，大天使加百列及时出现了一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。\n\nUnicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准,包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\n\nunicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了。\n\n\n## 为什么现在都在使用UTF-8？\n\n当初还有UTF-32，这是一种使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，UTF-32又称UCS-4是一种将Unicode字符编码的协定，对每个字符都使用4字节。就空间而言，是非常没有效率的。这对于存储空间来说是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。\n\n不过人们逐渐意识到，我们一般不会使用如此多的字符，于是就采用了一个折中的办法，使用UTF-16。不过目前推广最好的当之无愧是UTF-8.\n\nUTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，\ns\n实际上UTF-8 与Unicode之间的转换是有一定规律的，\n\n|Unicode编码(十六进制)| 　UTF-8 字节流(二进制)|\n| ------------- |:-----|\n|00000000 - 0000007F |  0xxxxxxx                                                |\n|00000080 - 000007FF |  110xxxxx 10xxxxxx                                       |\n|00000800 - 0000FFFF |  1110xxxx 10xxxxxx 10xxxxxx                              |\n|00010000 - 001FFFFF |  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                     |\n|00200000 - 03FFFFFF |  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx            |\n|04000000 - 7FFFFFFF |  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx   |\n\n\n> UTF-8的特点是对不同范围的字符使用不同长度的编码。\n\nUTF-8使用一至四个字节为每个字符编码：\n\n- 128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。\n-  带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码（Unicode范围由U+0080至U+07FF）。\n- 其他基本多文种平面（BMP）中的字符（这包含了大部分常用字）使用三个字节编码。中文范围 4E00-9FBF：\n- 其他极少使用的Unicode辅助平面的字符使用四字节编码。\n\n> 一个汉字三个字符\n\n实际上UTF-8是ASCII的一个超集。因为一个纯ASCII字符串也是一个合法的UTF-8字符串，所以现存的ASCII文本不需要转换。为传统的扩展ASCII字符集设计的软件通常可以不经修改或很少修改就能与UTF-8一起使用。\n\n> UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。\n\n> UTF-8,UTF-16,UTF-32编码方式都是UNICODE，但只是他们的保存方式不同。\n\n下一步，依据上表举几个例子：\n\n“汉”\nUnicode编码是0x6C49。(0110 1100 0100 1001) 0x6C49在0x0800-0xFFFF之间，\n使用用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。\n用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。\n\n“张”\nUnicode编码：0x5F20 （0101 1111 0010 0000）0x5F20在0x0800-0xFFFF之间\n依据上表，UTF-8需要三个字节 即“1110xxxx 10xxxxxx 10xxxxxx”。\n用Unicode码填补模板得到： 11100101 10111100 10100000 十六进制即 E5 BC A0 \n\nUnicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做\"零宽度非换行空格\"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。\n如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。\n\n需要判断文本开头的标志,下面是所有编码对应的开头标志\n\n|文件头|编码|大小头|\n|------|:-----|----|\n|EF BB BF　　　 |UTF-8         |    没有区别    |\n|FF FE　　　　　|UTF-16/UCS-2, |little endian   |\n|FE FF　　　　　|UTF-16/UCS-2, |big endian      |\n|FF FE 00 00　　|UTF-32/UCS-4, |little endian.  |\n|00 00 FE FF　　|UTF-32/UCS-4, |big-endian      |\n\n详见[Q: When a BOM is used, is it only in 16-bit Unicode text?](http://www.unicode.org/faq/utf_bom.html)\n\n> 第一个字节在前，就是小头方式，第二个字节在前就是大头方式。\n\n- Unicode：编码是四个字节\"FF FE 6C 49\"，其中\"FF FE\"表明是小头方式存储，真正的编码是6C49。\n- Unicode big endian：编码是四个字节\"FE FF 49 6C \"，其中\"FE FF\"表明是大头方式存储。真正的编码是 6C49。\n- UTF-8：编码是六个字节\"EF BB BF E6 B1 89\"，前三个字节\"EF BB BF\"表示这是UTF-8编码，后三个\"E6B189\"就是\"汉\"的具体编码，它的存储顺序与编码顺序是一致的。\n\n[对于字符编码，程序员的话应该了解它的哪些方面？](https://www.zhihu.com/question/20152853/answer/95576659),这位仁兄很有见解。值得一看。\n\n## URL请求编码响应分析\n\n到此，我们再来分析一下请求一个URL怎么就能显示我们对应的字符呢？\n\n随便打开一个网页,F12,打开开发者工具，在请求头信息里面我们会发现如下两行：\n\n```\nAccept-Encoding:gzip, deflate, sdch\nAccept-Language:zh-CN,zh;q=0.8\n```\n我们发送请求的时候已经给服务器说我是中国，说汉语的，而且还支持gzip压缩，于是服务器回应我们，好的,然后就在响应头包含如下信息：\n```\nContent-Encoding:gzip\nContent-Type:text/html;charset=utf-8\n```\ncharset=utf-8，嗯好的，然后浏览器就按照UTF-8编码解析汉语。最后，正常，还好没有乱码。真好！\n\n## 参考文献\n\n\n[Unicode 和 UTF-8 有何区别？](https://www.zhihu.com/question/23374078)\n[对于字符编码，程序员的话应该了解它的哪些方面？](https://www.zhihu.com/question/20152853/answer/95576659)\n[Unicode](http://baike.baidu.com/link?url=ZCZSJNDfFE33N8JU7MqxedQ9HtV1KwGREMeRQAcrBW3HOvgCBxrUOBPecnHatVei9-7G7LrmM3jUouhy8bJKEa)\n[字符串的扩展](https://likebeta.gitbooks.io/es6tutorial/content/docs/string.html)\n[ Unicode，UTF-8,UTF-16,UTF-32](http://blog.csdn.net/mylinx/article/details/6874414)\n[Unicode(UTF-8, UTF-16)令人混淆的概念](http://www.cnblogs.com/kingcat/archive/2012/10/16/2726334.html)\n[java中文乱码解决之道（三）](http://www.cnblogs.com/chenssy/p/4205130.html)","source":"_posts/从ES6中学习编码.md","raw":"---\ntitle: 从ES6中学习编码\ndate: 2016-09-16 11:59:14\ntags: [javascript,编码]\ncategories: 前端\ndescription: \"最近学习ECMAscript6，从字符串扩充上，学到了六种表示字符的方法，由此对编码格式又有了深入的了解。\"\n---\n\n## javascript中的表示方法\n\n\n```\n//二进制：0111 1010 （01 111 010 ）  八进制 172   十六进制： 7A   十进制：7*16+A*1=122\n//对应ASCII编码是122 如果是ASCII中的字符，UTF-8中是一致的，0-127对应0000 0000 -0xxx xxxx\n//而其他的需要两个字节的，高位补0  因此为 0000 0000 0111 1010  ==> 007A\n    console.log('z'); 本意\n    console.log('\\z');//转义字符，因为z不用转义，所以还是z\n    console.log('\\172');//ASCII 八进制  \n    console.log('\\x7A');//ASCII 十六进制\n    console.log('\\u007A');//Unicode 0000-FFFF之间的字符\n    console.log('\\u{7A}');//Unicode 大括号表示法与四字节的UTF-16编码是等价的。\nB（Binary)表示二进制，O（Octal）表示八进制，D（Decimal）或不加表示十进制，H（Hexadecimal）表示十六进制。\n```\n转义字符对应有一个参考\n\n| Escape Sequence |Code Unit Value | Unicode Character Name | Symbol |\n| ------------- |:-------------:|:-------------:| -----:|\n|\\b\t|0x0008\t|BACKSPACE\t            |&lt;BS&gt;  | \n|\\t\t|0x0009\t|CHARACTER TABULATION\t|&lt;HT&gt;  |\n|\\n\t|0x000A\t|LINE FEED (LF)\t        |&lt;LF&gt;  |\n|\\v\t|0x000B\t|LINE TABULATION\t    |&lt;VT&gt;  |\n|\\f\t|0x000C\t|FORM FEED (FF)\t        |&lt;FF&gt;  |\n|\\r\t|0x000D\t|CARRIAGE RETURN (CR)\t|&lt;CR&gt;  |\n|\\\"\t|0x0022\t|QUOTATION MARK\t        |\"      |\n|\\'\t|0x0027\t|APOSTROPHE\t            |'      |\n|\\\\\t|0x005C\t|REVERSE SOLIDUS\t    |\\      |\n\n> 如果转义字符不在此中，直接转义为本身\n\n代码中6-7行是一个意思的两种表达形式 都是ASCII码6是八进制，7是16进制，8=9行代码对应Unicode码，因为\\uxxxx只能表示0000-FFFF之间的字符，所以javascript中又引入了{},来展示字符。\n\n[ECMAscript中具有转义含义的字符](http://www.ecma-international.org/ecma-262/6.0/index.html#table-34)\n\n```\n    console.log('\\uD842\\uDFB7');\n    console.log('\\u{20BB7}');   \n    \n```\n> 但是，这种表示法只限于\\u0000——\\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达。\n\n一般常见中文字符都在这个区间内。特殊的，我们到Unicode这一部分再解释。\n\n结果在控制台上显示出“𠮷”，这是个什么字？不知道。\n\n## ASCII到底是个什么鬼？\n美国内部的统一就是ASCII码 ASCII 0-127（0000 0000 -0FFF FFFF之间）ASC码\n\n键盘上的打印字符、以及换行、退格等都在这个区间内，但是这只是一个美国标准。\n\n当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。不过呢，随着时间的推移，欧洲等其他国家也能用得起电脑了，但是，又不能表示自己的符号，因此这个标准也可以需要被扩展了。\n> 一个字符一个字节\n\n他们决定采用 127号之后的空位来表示这些新的字母、符号，还加入表格符号、计算符号、希腊字母和特殊的拉丁符号。一直把序号编到了最后一个状态255。从128 到255这一页的字符集被称\"扩展字符集\"。可以说ASCII扩展集主要解决的是欧洲拉丁等字符的展示。\n\n> 小秘密:按住ALT+要查询的码值（注意，这里是十进制），松开即可显示出对应字符。例如：按住ALT+97,则会显示出'a'。\n\n![ASCII](从ES6中学习编码/2011050311372042.png)\n![ASCII扩展集](从ES6中学习编码/201105031137219627.png)\n\n## GB2312和GBK又有什么关系？\n\n但是随着时间的推移，电脑也慢慢走进中国，可是电脑上不能显示汉字，这对于中国来说，是一个大问题。因此中国制定了GB2312字符集。\n\n我国专家把那些127号之后的奇异符号（即ASCII扩展集）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的\"全角\"字符，而原来在127号以下的那些就叫\"半角\"字符了。\n\n> 一个汉字两个字节的历史就是在这里产生的。（一个字符两个字节，连同ASCII中的字符也被编码成两个字节）\n\n可是中国语言博大精深，那时这区区7000多个汉字就能展现的？于是就制定了新的字符集GBK，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。这样就大大展示出来中国语言的魅力。\n\n后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了 GB18030。\n\n顺便提一下，因为台湾也使用汉字，不过他们使用的是自己的一套字符集编码规则（BIG5），因此同属一个汉字，可能就出现两种不同的编码序列。\n这时候不仅仅是中国乱成一团，世界上大多数国家都看到电脑真是个好东西，都想用，咋办，各搞各的字符集，各自制定自己的编码规范，于是出现了\"百花齐放百家争鸣\"的状况。\n\n## Unicode是怎么冒出了的？\n\n正在这时，大天使加百列及时出现了一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。\n\nUnicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准,包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\n\nunicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了。\n\n\n## 为什么现在都在使用UTF-8？\n\n当初还有UTF-32，这是一种使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，UTF-32又称UCS-4是一种将Unicode字符编码的协定，对每个字符都使用4字节。就空间而言，是非常没有效率的。这对于存储空间来说是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。\n\n不过人们逐渐意识到，我们一般不会使用如此多的字符，于是就采用了一个折中的办法，使用UTF-16。不过目前推广最好的当之无愧是UTF-8.\n\nUTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，\ns\n实际上UTF-8 与Unicode之间的转换是有一定规律的，\n\n|Unicode编码(十六进制)| 　UTF-8 字节流(二进制)|\n| ------------- |:-----|\n|00000000 - 0000007F |  0xxxxxxx                                                |\n|00000080 - 000007FF |  110xxxxx 10xxxxxx                                       |\n|00000800 - 0000FFFF |  1110xxxx 10xxxxxx 10xxxxxx                              |\n|00010000 - 001FFFFF |  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                     |\n|00200000 - 03FFFFFF |  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx            |\n|04000000 - 7FFFFFFF |  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx   |\n\n\n> UTF-8的特点是对不同范围的字符使用不同长度的编码。\n\nUTF-8使用一至四个字节为每个字符编码：\n\n- 128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。\n-  带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码（Unicode范围由U+0080至U+07FF）。\n- 其他基本多文种平面（BMP）中的字符（这包含了大部分常用字）使用三个字节编码。中文范围 4E00-9FBF：\n- 其他极少使用的Unicode辅助平面的字符使用四字节编码。\n\n> 一个汉字三个字符\n\n实际上UTF-8是ASCII的一个超集。因为一个纯ASCII字符串也是一个合法的UTF-8字符串，所以现存的ASCII文本不需要转换。为传统的扩展ASCII字符集设计的软件通常可以不经修改或很少修改就能与UTF-8一起使用。\n\n> UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。\n\n> UTF-8,UTF-16,UTF-32编码方式都是UNICODE，但只是他们的保存方式不同。\n\n下一步，依据上表举几个例子：\n\n“汉”\nUnicode编码是0x6C49。(0110 1100 0100 1001) 0x6C49在0x0800-0xFFFF之间，\n使用用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。\n用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。\n\n“张”\nUnicode编码：0x5F20 （0101 1111 0010 0000）0x5F20在0x0800-0xFFFF之间\n依据上表，UTF-8需要三个字节 即“1110xxxx 10xxxxxx 10xxxxxx”。\n用Unicode码填补模板得到： 11100101 10111100 10100000 十六进制即 E5 BC A0 \n\nUnicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做\"零宽度非换行空格\"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。\n如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。\n\n需要判断文本开头的标志,下面是所有编码对应的开头标志\n\n|文件头|编码|大小头|\n|------|:-----|----|\n|EF BB BF　　　 |UTF-8         |    没有区别    |\n|FF FE　　　　　|UTF-16/UCS-2, |little endian   |\n|FE FF　　　　　|UTF-16/UCS-2, |big endian      |\n|FF FE 00 00　　|UTF-32/UCS-4, |little endian.  |\n|00 00 FE FF　　|UTF-32/UCS-4, |big-endian      |\n\n详见[Q: When a BOM is used, is it only in 16-bit Unicode text?](http://www.unicode.org/faq/utf_bom.html)\n\n> 第一个字节在前，就是小头方式，第二个字节在前就是大头方式。\n\n- Unicode：编码是四个字节\"FF FE 6C 49\"，其中\"FF FE\"表明是小头方式存储，真正的编码是6C49。\n- Unicode big endian：编码是四个字节\"FE FF 49 6C \"，其中\"FE FF\"表明是大头方式存储。真正的编码是 6C49。\n- UTF-8：编码是六个字节\"EF BB BF E6 B1 89\"，前三个字节\"EF BB BF\"表示这是UTF-8编码，后三个\"E6B189\"就是\"汉\"的具体编码，它的存储顺序与编码顺序是一致的。\n\n[对于字符编码，程序员的话应该了解它的哪些方面？](https://www.zhihu.com/question/20152853/answer/95576659),这位仁兄很有见解。值得一看。\n\n## URL请求编码响应分析\n\n到此，我们再来分析一下请求一个URL怎么就能显示我们对应的字符呢？\n\n随便打开一个网页,F12,打开开发者工具，在请求头信息里面我们会发现如下两行：\n\n```\nAccept-Encoding:gzip, deflate, sdch\nAccept-Language:zh-CN,zh;q=0.8\n```\n我们发送请求的时候已经给服务器说我是中国，说汉语的，而且还支持gzip压缩，于是服务器回应我们，好的,然后就在响应头包含如下信息：\n```\nContent-Encoding:gzip\nContent-Type:text/html;charset=utf-8\n```\ncharset=utf-8，嗯好的，然后浏览器就按照UTF-8编码解析汉语。最后，正常，还好没有乱码。真好！\n\n## 参考文献\n\n\n[Unicode 和 UTF-8 有何区别？](https://www.zhihu.com/question/23374078)\n[对于字符编码，程序员的话应该了解它的哪些方面？](https://www.zhihu.com/question/20152853/answer/95576659)\n[Unicode](http://baike.baidu.com/link?url=ZCZSJNDfFE33N8JU7MqxedQ9HtV1KwGREMeRQAcrBW3HOvgCBxrUOBPecnHatVei9-7G7LrmM3jUouhy8bJKEa)\n[字符串的扩展](https://likebeta.gitbooks.io/es6tutorial/content/docs/string.html)\n[ Unicode，UTF-8,UTF-16,UTF-32](http://blog.csdn.net/mylinx/article/details/6874414)\n[Unicode(UTF-8, UTF-16)令人混淆的概念](http://www.cnblogs.com/kingcat/archive/2012/10/16/2726334.html)\n[java中文乱码解决之道（三）](http://www.cnblogs.com/chenssy/p/4205130.html)","slug":"从ES6中学习编码","published":1,"updated":"2016-09-19T03:49:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79s0075ugv51j1cwe2c","content":"<h2 id=\"javascript中的表示方法\"><a href=\"#javascript中的表示方法\" class=\"headerlink\" title=\"javascript中的表示方法\"></a>javascript中的表示方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//二进制：0111 1010 （01 111 010 ）  八进制 172   十六进制： 7A   十进制：7*16+A*1=122</span><br><span class=\"line\">//对应ASCII编码是122 如果是ASCII中的字符，UTF-8中是一致的，0-127对应0000 0000 -0xxx xxxx</span><br><span class=\"line\">//而其他的需要两个字节的，高位补0  因此为 0000 0000 0111 1010  ==&gt; 007A</span><br><span class=\"line\">    console.log(&apos;z&apos;); 本意</span><br><span class=\"line\">    console.log(&apos;\\z&apos;);//转义字符，因为z不用转义，所以还是z</span><br><span class=\"line\">    console.log(&apos;\\172&apos;);//ASCII 八进制  </span><br><span class=\"line\">    console.log(&apos;\\x7A&apos;);//ASCII 十六进制</span><br><span class=\"line\">    console.log(&apos;\\u007A&apos;);//Unicode 0000-FFFF之间的字符</span><br><span class=\"line\">    console.log(&apos;\\u&#123;7A&#125;&apos;);//Unicode 大括号表示法与四字节的UTF-16编码是等价的。</span><br><span class=\"line\">B（Binary)表示二进制，O（Octal）表示八进制，D（Decimal）或不加表示十进制，H（Hexadecimal）表示十六进制。</span><br></pre></td></tr></table></figure>\n<p>转义字符对应有一个参考</p>\n<table>\n<thead>\n<tr>\n<th>Escape Sequence</th>\n<th style=\"text-align:center\">Code Unit Value</th>\n<th style=\"text-align:center\">Unicode Character Name</th>\n<th style=\"text-align:right\">Symbol</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\b</td>\n<td style=\"text-align:center\">0x0008</td>\n<td style=\"text-align:center\">BACKSPACE</td>\n<td style=\"text-align:right\">&lt;BS&gt;</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td style=\"text-align:center\">0x0009</td>\n<td style=\"text-align:center\">CHARACTER TABULATION</td>\n<td style=\"text-align:right\">&lt;HT&gt;</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td style=\"text-align:center\">0x000A</td>\n<td style=\"text-align:center\">LINE FEED (LF)</td>\n<td style=\"text-align:right\">&lt;LF&gt;</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td style=\"text-align:center\">0x000B</td>\n<td style=\"text-align:center\">LINE TABULATION</td>\n<td style=\"text-align:right\">&lt;VT&gt;</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td style=\"text-align:center\">0x000C</td>\n<td style=\"text-align:center\">FORM FEED (FF)</td>\n<td style=\"text-align:right\">&lt;FF&gt;</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td style=\"text-align:center\">0x000D</td>\n<td style=\"text-align:center\">CARRIAGE RETURN (CR)</td>\n<td style=\"text-align:right\">&lt;CR&gt;</td>\n</tr>\n<tr>\n<td>\\”</td>\n<td style=\"text-align:center\">0x0022</td>\n<td style=\"text-align:center\">QUOTATION MARK</td>\n<td style=\"text-align:right\">“</td>\n</tr>\n<tr>\n<td>\\’</td>\n<td style=\"text-align:center\">0x0027</td>\n<td style=\"text-align:center\">APOSTROPHE</td>\n<td style=\"text-align:right\">‘</td>\n</tr>\n<tr>\n<td>\\</td>\n<td style=\"text-align:center\">0x005C</td>\n<td style=\"text-align:center\">REVERSE SOLIDUS</td>\n<td style=\"text-align:right\">\\</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果转义字符不在此中，直接转义为本身</p>\n</blockquote>\n<p>代码中6-7行是一个意思的两种表达形式 都是ASCII码6是八进制，7是16进制，8=9行代码对应Unicode码，因为\\uxxxx只能表示0000-FFFF之间的字符，所以javascript中又引入了{},来展示字符。</p>\n<p><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#table-34\" target=\"_blank\" rel=\"noopener\">ECMAscript中具有转义含义的字符</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;\\uD842\\uDFB7&apos;);</span><br><span class=\"line\">console.log(&apos;\\u&#123;20BB7&#125;&apos;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>但是，这种表示法只限于\\u0000——\\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达。</p>\n</blockquote>\n<p>一般常见中文字符都在这个区间内。特殊的，我们到Unicode这一部分再解释。</p>\n<p>结果在控制台上显示出“𠮷”，这是个什么字？不知道。</p>\n<h2 id=\"ASCII到底是个什么鬼？\"><a href=\"#ASCII到底是个什么鬼？\" class=\"headerlink\" title=\"ASCII到底是个什么鬼？\"></a>ASCII到底是个什么鬼？</h2><p>美国内部的统一就是ASCII码 ASCII 0-127（0000 0000 -0FFF FFFF之间）ASC码</p>\n<p>键盘上的打印字符、以及换行、退格等都在这个区间内，但是这只是一个美国标准。</p>\n<p>当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。不过呢，随着时间的推移，欧洲等其他国家也能用得起电脑了，但是，又不能表示自己的符号，因此这个标准也可以需要被扩展了。</p>\n<blockquote>\n<p>一个字符一个字节</p>\n</blockquote>\n<p>他们决定采用 127号之后的空位来表示这些新的字母、符号，还加入表格符号、计算符号、希腊字母和特殊的拉丁符号。一直把序号编到了最后一个状态255。从128 到255这一页的字符集被称”扩展字符集”。可以说ASCII扩展集主要解决的是欧洲拉丁等字符的展示。</p>\n<blockquote>\n<p>小秘密:按住ALT+要查询的码值（注意，这里是十进制），松开即可显示出对应字符。例如：按住ALT+97,则会显示出’a’。</p>\n</blockquote>\n<p><img src=\"/.io//2011050311372042.png\" alt=\"ASCII\"><br><img src=\"/.io//201105031137219627.png\" alt=\"ASCII扩展集\"></p>\n<h2 id=\"GB2312和GBK又有什么关系？\"><a href=\"#GB2312和GBK又有什么关系？\" class=\"headerlink\" title=\"GB2312和GBK又有什么关系？\"></a>GB2312和GBK又有什么关系？</h2><p>但是随着时间的推移，电脑也慢慢走进中国，可是电脑上不能显示汉字，这对于中国来说，是一个大问题。因此中国制定了GB2312字符集。</p>\n<p>我国专家把那些127号之后的奇异符号（即ASCII扩展集）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p>\n<blockquote>\n<p>一个汉字两个字节的历史就是在这里产生的。（一个字符两个字节，连同ASCII中的字符也被编码成两个字节）</p>\n</blockquote>\n<p>可是中国语言博大精深，那时这区区7000多个汉字就能展现的？于是就制定了新的字符集GBK，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。这样就大大展示出来中国语言的魅力。</p>\n<p>后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了 GB18030。</p>\n<p>顺便提一下，因为台湾也使用汉字，不过他们使用的是自己的一套字符集编码规则（BIG5），因此同属一个汉字，可能就出现两种不同的编码序列。<br>这时候不仅仅是中国乱成一团，世界上大多数国家都看到电脑真是个好东西，都想用，咋办，各搞各的字符集，各自制定自己的编码规范，于是出现了”百花齐放百家争鸣”的状况。</p>\n<h2 id=\"Unicode是怎么冒出了的？\"><a href=\"#Unicode是怎么冒出了的？\" class=\"headerlink\" title=\"Unicode是怎么冒出了的？\"></a>Unicode是怎么冒出了的？</h2><p>正在这时，大天使加百列及时出现了一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。</p>\n<p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准,包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>\n<p>unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了。</p>\n<h2 id=\"为什么现在都在使用UTF-8？\"><a href=\"#为什么现在都在使用UTF-8？\" class=\"headerlink\" title=\"为什么现在都在使用UTF-8？\"></a>为什么现在都在使用UTF-8？</h2><p>当初还有UTF-32，这是一种使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，UTF-32又称UCS-4是一种将Unicode字符编码的协定，对每个字符都使用4字节。就空间而言，是非常没有效率的。这对于存储空间来说是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。</p>\n<p>不过人们逐渐意识到，我们一般不会使用如此多的字符，于是就采用了一个折中的办法，使用UTF-16。不过目前推广最好的当之无愧是UTF-8.</p>\n<p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，<br>s<br>实际上UTF-8 与Unicode之间的转换是有一定规律的，</p>\n<table>\n<thead>\n<tr>\n<th>Unicode编码(十六进制)</th>\n<th style=\"text-align:left\">　UTF-8 字节流(二进制)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>00000000 - 0000007F</td>\n<td style=\"text-align:left\">0xxxxxxx</td>\n</tr>\n<tr>\n<td>00000080 - 000007FF</td>\n<td style=\"text-align:left\">110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>00000800 - 0000FFFF</td>\n<td style=\"text-align:left\">1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>00010000 - 001FFFFF</td>\n<td style=\"text-align:left\">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>00200000 - 03FFFFFF</td>\n<td style=\"text-align:left\">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>04000000 - 7FFFFFFF</td>\n<td style=\"text-align:left\">1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>UTF-8的特点是对不同范围的字符使用不同长度的编码。</p>\n</blockquote>\n<p>UTF-8使用一至四个字节为每个字符编码：</p>\n<ul>\n<li>128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。</li>\n<li>带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码（Unicode范围由U+0080至U+07FF）。</li>\n<li>其他基本多文种平面（BMP）中的字符（这包含了大部分常用字）使用三个字节编码。中文范围 4E00-9FBF：</li>\n<li>其他极少使用的Unicode辅助平面的字符使用四字节编码。</li>\n</ul>\n<blockquote>\n<p>一个汉字三个字符</p>\n</blockquote>\n<p>实际上UTF-8是ASCII的一个超集。因为一个纯ASCII字符串也是一个合法的UTF-8字符串，所以现存的ASCII文本不需要转换。为传统的扩展ASCII字符集设计的软件通常可以不经修改或很少修改就能与UTF-8一起使用。</p>\n<blockquote>\n<p>UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。</p>\n</blockquote>\n<blockquote>\n<p>UTF-8,UTF-16,UTF-32编码方式都是UNICODE，但只是他们的保存方式不同。</p>\n</blockquote>\n<p>下一步，依据上表举几个例子：</p>\n<p>“汉”<br>Unicode编码是0x6C49。(0110 1100 0100 1001) 0x6C49在0x0800-0xFFFF之间，<br>使用用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。<br>用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</p>\n<p>“张”<br>Unicode编码：0x5F20 （0101 1111 0010 0000）0x5F20在0x0800-0xFFFF之间<br>依据上表，UTF-8需要三个字节 即“1110xxxx 10xxxxxx 10xxxxxx”。<br>用Unicode码填补模板得到： 11100101 10111100 10100000 十六进制即 E5 BC A0 </p>\n<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。<br>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>\n<p>需要判断文本开头的标志,下面是所有编码对应的开头标志</p>\n<table>\n<thead>\n<tr>\n<th>文件头</th>\n<th style=\"text-align:left\">编码</th>\n<th>大小头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EF BB BF　　　</td>\n<td style=\"text-align:left\">UTF-8</td>\n<td>没有区别</td>\n</tr>\n<tr>\n<td>FF FE　　　　　</td>\n<td style=\"text-align:left\">UTF-16/UCS-2,</td>\n<td>little endian</td>\n</tr>\n<tr>\n<td>FE FF　　　　　</td>\n<td style=\"text-align:left\">UTF-16/UCS-2,</td>\n<td>big endian</td>\n</tr>\n<tr>\n<td>FF FE 00 00　　</td>\n<td style=\"text-align:left\">UTF-32/UCS-4,</td>\n<td>little endian.</td>\n</tr>\n<tr>\n<td>00 00 FE FF　　</td>\n<td style=\"text-align:left\">UTF-32/UCS-4,</td>\n<td>big-endian</td>\n</tr>\n</tbody>\n</table>\n<p>详见<a href=\"http://www.unicode.org/faq/utf_bom.html\" target=\"_blank\" rel=\"noopener\">Q: When a BOM is used, is it only in 16-bit Unicode text?</a></p>\n<blockquote>\n<p>第一个字节在前，就是小头方式，第二个字节在前就是大头方式。</p>\n</blockquote>\n<ul>\n<li>Unicode：编码是四个字节”FF FE 6C 49”，其中”FF FE”表明是小头方式存储，真正的编码是6C49。</li>\n<li>Unicode big endian：编码是四个字节”FE FF 49 6C “，其中”FE FF”表明是大头方式存储。真正的编码是 6C49。</li>\n<li>UTF-8：编码是六个字节”EF BB BF E6 B1 89”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E6B189”就是”汉”的具体编码，它的存储顺序与编码顺序是一致的。</li>\n</ul>\n<p><a href=\"https://www.zhihu.com/question/20152853/answer/95576659\" target=\"_blank\" rel=\"noopener\">对于字符编码，程序员的话应该了解它的哪些方面？</a>,这位仁兄很有见解。值得一看。</p>\n<h2 id=\"URL请求编码响应分析\"><a href=\"#URL请求编码响应分析\" class=\"headerlink\" title=\"URL请求编码响应分析\"></a>URL请求编码响应分析</h2><p>到此，我们再来分析一下请求一个URL怎么就能显示我们对应的字符呢？</p>\n<p>随便打开一个网页,F12,打开开发者工具，在请求头信息里面我们会发现如下两行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept-Encoding:gzip, deflate, sdch</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure>\n<p>我们发送请求的时候已经给服务器说我是中国，说汉语的，而且还支持gzip压缩，于是服务器回应我们，好的,然后就在响应头包含如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Encoding:gzip</span><br><span class=\"line\">Content-Type:text/html;charset=utf-8</span><br></pre></td></tr></table></figure></p>\n<p>charset=utf-8，嗯好的，然后浏览器就按照UTF-8编码解析汉语。最后，正常，还好没有乱码。真好！</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://www.zhihu.com/question/23374078\" target=\"_blank\" rel=\"noopener\">Unicode 和 UTF-8 有何区别？</a><br><a href=\"https://www.zhihu.com/question/20152853/answer/95576659\" target=\"_blank\" rel=\"noopener\">对于字符编码，程序员的话应该了解它的哪些方面？</a><br><a href=\"http://baike.baidu.com/link?url=ZCZSJNDfFE33N8JU7MqxedQ9HtV1KwGREMeRQAcrBW3HOvgCBxrUOBPecnHatVei9-7G7LrmM3jUouhy8bJKEa\" target=\"_blank\" rel=\"noopener\">Unicode</a><br><a href=\"https://likebeta.gitbooks.io/es6tutorial/content/docs/string.html\" target=\"_blank\" rel=\"noopener\">字符串的扩展</a><br><a href=\"http://blog.csdn.net/mylinx/article/details/6874414\" target=\"_blank\" rel=\"noopener\"> Unicode，UTF-8,UTF-16,UTF-32</a><br><a href=\"http://www.cnblogs.com/kingcat/archive/2012/10/16/2726334.html\" target=\"_blank\" rel=\"noopener\">Unicode(UTF-8, UTF-16)令人混淆的概念</a><br><a href=\"http://www.cnblogs.com/chenssy/p/4205130.html\" target=\"_blank\" rel=\"noopener\">java中文乱码解决之道（三）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"javascript中的表示方法\"><a href=\"#javascript中的表示方法\" class=\"headerlink\" title=\"javascript中的表示方法\"></a>javascript中的表示方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//二进制：0111 1010 （01 111 010 ）  八进制 172   十六进制： 7A   十进制：7*16+A*1=122</span><br><span class=\"line\">//对应ASCII编码是122 如果是ASCII中的字符，UTF-8中是一致的，0-127对应0000 0000 -0xxx xxxx</span><br><span class=\"line\">//而其他的需要两个字节的，高位补0  因此为 0000 0000 0111 1010  ==&gt; 007A</span><br><span class=\"line\">    console.log(&apos;z&apos;); 本意</span><br><span class=\"line\">    console.log(&apos;\\z&apos;);//转义字符，因为z不用转义，所以还是z</span><br><span class=\"line\">    console.log(&apos;\\172&apos;);//ASCII 八进制  </span><br><span class=\"line\">    console.log(&apos;\\x7A&apos;);//ASCII 十六进制</span><br><span class=\"line\">    console.log(&apos;\\u007A&apos;);//Unicode 0000-FFFF之间的字符</span><br><span class=\"line\">    console.log(&apos;\\u&#123;7A&#125;&apos;);//Unicode 大括号表示法与四字节的UTF-16编码是等价的。</span><br><span class=\"line\">B（Binary)表示二进制，O（Octal）表示八进制，D（Decimal）或不加表示十进制，H（Hexadecimal）表示十六进制。</span><br></pre></td></tr></table></figure>\n<p>转义字符对应有一个参考</p>\n<table>\n<thead>\n<tr>\n<th>Escape Sequence</th>\n<th style=\"text-align:center\">Code Unit Value</th>\n<th style=\"text-align:center\">Unicode Character Name</th>\n<th style=\"text-align:right\">Symbol</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\b</td>\n<td style=\"text-align:center\">0x0008</td>\n<td style=\"text-align:center\">BACKSPACE</td>\n<td style=\"text-align:right\">&lt;BS&gt;</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td style=\"text-align:center\">0x0009</td>\n<td style=\"text-align:center\">CHARACTER TABULATION</td>\n<td style=\"text-align:right\">&lt;HT&gt;</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td style=\"text-align:center\">0x000A</td>\n<td style=\"text-align:center\">LINE FEED (LF)</td>\n<td style=\"text-align:right\">&lt;LF&gt;</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td style=\"text-align:center\">0x000B</td>\n<td style=\"text-align:center\">LINE TABULATION</td>\n<td style=\"text-align:right\">&lt;VT&gt;</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td style=\"text-align:center\">0x000C</td>\n<td style=\"text-align:center\">FORM FEED (FF)</td>\n<td style=\"text-align:right\">&lt;FF&gt;</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td style=\"text-align:center\">0x000D</td>\n<td style=\"text-align:center\">CARRIAGE RETURN (CR)</td>\n<td style=\"text-align:right\">&lt;CR&gt;</td>\n</tr>\n<tr>\n<td>\\”</td>\n<td style=\"text-align:center\">0x0022</td>\n<td style=\"text-align:center\">QUOTATION MARK</td>\n<td style=\"text-align:right\">“</td>\n</tr>\n<tr>\n<td>\\’</td>\n<td style=\"text-align:center\">0x0027</td>\n<td style=\"text-align:center\">APOSTROPHE</td>\n<td style=\"text-align:right\">‘</td>\n</tr>\n<tr>\n<td>\\</td>\n<td style=\"text-align:center\">0x005C</td>\n<td style=\"text-align:center\">REVERSE SOLIDUS</td>\n<td style=\"text-align:right\">\\</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果转义字符不在此中，直接转义为本身</p>\n</blockquote>\n<p>代码中6-7行是一个意思的两种表达形式 都是ASCII码6是八进制，7是16进制，8=9行代码对应Unicode码，因为\\uxxxx只能表示0000-FFFF之间的字符，所以javascript中又引入了{},来展示字符。</p>\n<p><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#table-34\" target=\"_blank\" rel=\"noopener\">ECMAscript中具有转义含义的字符</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;\\uD842\\uDFB7&apos;);</span><br><span class=\"line\">console.log(&apos;\\u&#123;20BB7&#125;&apos;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>但是，这种表示法只限于\\u0000——\\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达。</p>\n</blockquote>\n<p>一般常见中文字符都在这个区间内。特殊的，我们到Unicode这一部分再解释。</p>\n<p>结果在控制台上显示出“𠮷”，这是个什么字？不知道。</p>\n<h2 id=\"ASCII到底是个什么鬼？\"><a href=\"#ASCII到底是个什么鬼？\" class=\"headerlink\" title=\"ASCII到底是个什么鬼？\"></a>ASCII到底是个什么鬼？</h2><p>美国内部的统一就是ASCII码 ASCII 0-127（0000 0000 -0FFF FFFF之间）ASC码</p>\n<p>键盘上的打印字符、以及换行、退格等都在这个区间内，但是这只是一个美国标准。</p>\n<p>当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。不过呢，随着时间的推移，欧洲等其他国家也能用得起电脑了，但是，又不能表示自己的符号，因此这个标准也可以需要被扩展了。</p>\n<blockquote>\n<p>一个字符一个字节</p>\n</blockquote>\n<p>他们决定采用 127号之后的空位来表示这些新的字母、符号，还加入表格符号、计算符号、希腊字母和特殊的拉丁符号。一直把序号编到了最后一个状态255。从128 到255这一页的字符集被称”扩展字符集”。可以说ASCII扩展集主要解决的是欧洲拉丁等字符的展示。</p>\n<blockquote>\n<p>小秘密:按住ALT+要查询的码值（注意，这里是十进制），松开即可显示出对应字符。例如：按住ALT+97,则会显示出’a’。</p>\n</blockquote>\n<p><img src=\"/.io//2011050311372042.png\" alt=\"ASCII\"><br><img src=\"/.io//201105031137219627.png\" alt=\"ASCII扩展集\"></p>\n<h2 id=\"GB2312和GBK又有什么关系？\"><a href=\"#GB2312和GBK又有什么关系？\" class=\"headerlink\" title=\"GB2312和GBK又有什么关系？\"></a>GB2312和GBK又有什么关系？</h2><p>但是随着时间的推移，电脑也慢慢走进中国，可是电脑上不能显示汉字，这对于中国来说，是一个大问题。因此中国制定了GB2312字符集。</p>\n<p>我国专家把那些127号之后的奇异符号（即ASCII扩展集）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p>\n<blockquote>\n<p>一个汉字两个字节的历史就是在这里产生的。（一个字符两个字节，连同ASCII中的字符也被编码成两个字节）</p>\n</blockquote>\n<p>可是中国语言博大精深，那时这区区7000多个汉字就能展现的？于是就制定了新的字符集GBK，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。这样就大大展示出来中国语言的魅力。</p>\n<p>后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了 GB18030。</p>\n<p>顺便提一下，因为台湾也使用汉字，不过他们使用的是自己的一套字符集编码规则（BIG5），因此同属一个汉字，可能就出现两种不同的编码序列。<br>这时候不仅仅是中国乱成一团，世界上大多数国家都看到电脑真是个好东西，都想用，咋办，各搞各的字符集，各自制定自己的编码规范，于是出现了”百花齐放百家争鸣”的状况。</p>\n<h2 id=\"Unicode是怎么冒出了的？\"><a href=\"#Unicode是怎么冒出了的？\" class=\"headerlink\" title=\"Unicode是怎么冒出了的？\"></a>Unicode是怎么冒出了的？</h2><p>正在这时，大天使加百列及时出现了一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。</p>\n<p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准,包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>\n<p>unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了。</p>\n<h2 id=\"为什么现在都在使用UTF-8？\"><a href=\"#为什么现在都在使用UTF-8？\" class=\"headerlink\" title=\"为什么现在都在使用UTF-8？\"></a>为什么现在都在使用UTF-8？</h2><p>当初还有UTF-32，这是一种使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，UTF-32又称UCS-4是一种将Unicode字符编码的协定，对每个字符都使用4字节。就空间而言，是非常没有效率的。这对于存储空间来说是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。</p>\n<p>不过人们逐渐意识到，我们一般不会使用如此多的字符，于是就采用了一个折中的办法，使用UTF-16。不过目前推广最好的当之无愧是UTF-8.</p>\n<p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，<br>s<br>实际上UTF-8 与Unicode之间的转换是有一定规律的，</p>\n<table>\n<thead>\n<tr>\n<th>Unicode编码(十六进制)</th>\n<th style=\"text-align:left\">　UTF-8 字节流(二进制)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>00000000 - 0000007F</td>\n<td style=\"text-align:left\">0xxxxxxx</td>\n</tr>\n<tr>\n<td>00000080 - 000007FF</td>\n<td style=\"text-align:left\">110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>00000800 - 0000FFFF</td>\n<td style=\"text-align:left\">1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>00010000 - 001FFFFF</td>\n<td style=\"text-align:left\">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>00200000 - 03FFFFFF</td>\n<td style=\"text-align:left\">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>04000000 - 7FFFFFFF</td>\n<td style=\"text-align:left\">1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>UTF-8的特点是对不同范围的字符使用不同长度的编码。</p>\n</blockquote>\n<p>UTF-8使用一至四个字节为每个字符编码：</p>\n<ul>\n<li>128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。</li>\n<li>带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码（Unicode范围由U+0080至U+07FF）。</li>\n<li>其他基本多文种平面（BMP）中的字符（这包含了大部分常用字）使用三个字节编码。中文范围 4E00-9FBF：</li>\n<li>其他极少使用的Unicode辅助平面的字符使用四字节编码。</li>\n</ul>\n<blockquote>\n<p>一个汉字三个字符</p>\n</blockquote>\n<p>实际上UTF-8是ASCII的一个超集。因为一个纯ASCII字符串也是一个合法的UTF-8字符串，所以现存的ASCII文本不需要转换。为传统的扩展ASCII字符集设计的软件通常可以不经修改或很少修改就能与UTF-8一起使用。</p>\n<blockquote>\n<p>UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。</p>\n</blockquote>\n<blockquote>\n<p>UTF-8,UTF-16,UTF-32编码方式都是UNICODE，但只是他们的保存方式不同。</p>\n</blockquote>\n<p>下一步，依据上表举几个例子：</p>\n<p>“汉”<br>Unicode编码是0x6C49。(0110 1100 0100 1001) 0x6C49在0x0800-0xFFFF之间，<br>使用用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。<br>用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</p>\n<p>“张”<br>Unicode编码：0x5F20 （0101 1111 0010 0000）0x5F20在0x0800-0xFFFF之间<br>依据上表，UTF-8需要三个字节 即“1110xxxx 10xxxxxx 10xxxxxx”。<br>用Unicode码填补模板得到： 11100101 10111100 10100000 十六进制即 E5 BC A0 </p>\n<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。<br>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>\n<p>需要判断文本开头的标志,下面是所有编码对应的开头标志</p>\n<table>\n<thead>\n<tr>\n<th>文件头</th>\n<th style=\"text-align:left\">编码</th>\n<th>大小头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EF BB BF　　　</td>\n<td style=\"text-align:left\">UTF-8</td>\n<td>没有区别</td>\n</tr>\n<tr>\n<td>FF FE　　　　　</td>\n<td style=\"text-align:left\">UTF-16/UCS-2,</td>\n<td>little endian</td>\n</tr>\n<tr>\n<td>FE FF　　　　　</td>\n<td style=\"text-align:left\">UTF-16/UCS-2,</td>\n<td>big endian</td>\n</tr>\n<tr>\n<td>FF FE 00 00　　</td>\n<td style=\"text-align:left\">UTF-32/UCS-4,</td>\n<td>little endian.</td>\n</tr>\n<tr>\n<td>00 00 FE FF　　</td>\n<td style=\"text-align:left\">UTF-32/UCS-4,</td>\n<td>big-endian</td>\n</tr>\n</tbody>\n</table>\n<p>详见<a href=\"http://www.unicode.org/faq/utf_bom.html\" target=\"_blank\" rel=\"noopener\">Q: When a BOM is used, is it only in 16-bit Unicode text?</a></p>\n<blockquote>\n<p>第一个字节在前，就是小头方式，第二个字节在前就是大头方式。</p>\n</blockquote>\n<ul>\n<li>Unicode：编码是四个字节”FF FE 6C 49”，其中”FF FE”表明是小头方式存储，真正的编码是6C49。</li>\n<li>Unicode big endian：编码是四个字节”FE FF 49 6C “，其中”FE FF”表明是大头方式存储。真正的编码是 6C49。</li>\n<li>UTF-8：编码是六个字节”EF BB BF E6 B1 89”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E6B189”就是”汉”的具体编码，它的存储顺序与编码顺序是一致的。</li>\n</ul>\n<p><a href=\"https://www.zhihu.com/question/20152853/answer/95576659\" target=\"_blank\" rel=\"noopener\">对于字符编码，程序员的话应该了解它的哪些方面？</a>,这位仁兄很有见解。值得一看。</p>\n<h2 id=\"URL请求编码响应分析\"><a href=\"#URL请求编码响应分析\" class=\"headerlink\" title=\"URL请求编码响应分析\"></a>URL请求编码响应分析</h2><p>到此，我们再来分析一下请求一个URL怎么就能显示我们对应的字符呢？</p>\n<p>随便打开一个网页,F12,打开开发者工具，在请求头信息里面我们会发现如下两行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept-Encoding:gzip, deflate, sdch</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure>\n<p>我们发送请求的时候已经给服务器说我是中国，说汉语的，而且还支持gzip压缩，于是服务器回应我们，好的,然后就在响应头包含如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Encoding:gzip</span><br><span class=\"line\">Content-Type:text/html;charset=utf-8</span><br></pre></td></tr></table></figure></p>\n<p>charset=utf-8，嗯好的，然后浏览器就按照UTF-8编码解析汉语。最后，正常，还好没有乱码。真好！</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://www.zhihu.com/question/23374078\" target=\"_blank\" rel=\"noopener\">Unicode 和 UTF-8 有何区别？</a><br><a href=\"https://www.zhihu.com/question/20152853/answer/95576659\" target=\"_blank\" rel=\"noopener\">对于字符编码，程序员的话应该了解它的哪些方面？</a><br><a href=\"http://baike.baidu.com/link?url=ZCZSJNDfFE33N8JU7MqxedQ9HtV1KwGREMeRQAcrBW3HOvgCBxrUOBPecnHatVei9-7G7LrmM3jUouhy8bJKEa\" target=\"_blank\" rel=\"noopener\">Unicode</a><br><a href=\"https://likebeta.gitbooks.io/es6tutorial/content/docs/string.html\" target=\"_blank\" rel=\"noopener\">字符串的扩展</a><br><a href=\"http://blog.csdn.net/mylinx/article/details/6874414\" target=\"_blank\" rel=\"noopener\"> Unicode，UTF-8,UTF-16,UTF-32</a><br><a href=\"http://www.cnblogs.com/kingcat/archive/2012/10/16/2726334.html\" target=\"_blank\" rel=\"noopener\">Unicode(UTF-8, UTF-16)令人混淆的概念</a><br><a href=\"http://www.cnblogs.com/chenssy/p/4205130.html\" target=\"_blank\" rel=\"noopener\">java中文乱码解决之道（三）</a></p>\n"},{"title":"使用ELK分析日志","date":"2019-05-18T15:35:47.000Z","description":"日志分析系统搭建","_content":"\n[elk 官网介绍](https://www.elastic.co/cn/elk-stack)\n要解决的问题：\n对于日志等文件，需要进行分析，例如：访问IP数，什么时候访问最多，用户量最大；\n简单的架构就是直接使用filebeat来获取到数据。\n还有一种实现方式是：拉取文件后，先通过Logstash（tools）把对应的文件分析出来，然后输出到ElasticSearch（data）中然后使用kibaba来进行虚拟化的展示（view）。\n还可以加上output的输出到队列缓存中等。\n\n\n### 主要技术手段\nfilebeat、Logstash、ElasticSearch、Kibaba\n##### filebeat\n通常会有一个客户端和一个服务器，客户端运行在业务应用机上，可以访问到对应的日志文件，\n然后连接服务器，服务器把数据发送到Logstash中，也可以把数据直接output到ElasticSearch内。\n\n![ElasticSearch控制台](/使用ELK分析日志/filebeat.png)\n\n##### Logstash\nLogstash把获取到的数据进行过滤（filter）处理，把找到的文件进行分析，输出到ElasticSearch,\n##### ElasticSearch\n不用多讲，存储索引数据用的，基于Lucene，的分布式架构。在这种elk中充当数据源。\n##### Kibaba\nvisual展示\n\n### 示例 使用nginx日志来操作，简单版，不使用filebeat\n\n定义的所有文件路径在`/c/ProgrmTool/dev/`中\n\n##### 启动nginx \n\n参考[应用部署之nginx负载](https://muxiaobai.github.io/2017/09/02/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E8%B4%9F%E8%BD%BD/)\n\n`/c/ProgrmTool/dev/ >start nginx`\n\nnginx 中的log_format格式\n\n```\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n```\n\n日志文件在../logs/access.log\n\n```\n127.0.0.1 - - [19/May/2019:11:10:18 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n127.0.0.1 - - [19/May/2019:11:10:19 +0800] \"GET /favicon.ico HTTP/1.1\" 404 571 \"http://localhost/\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n127.0.0.1 - - [19/May/2019:11:10:19 +0800] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n127.0.0.1 - - [19/May/2019:11:36:05 +0800] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n127.0.0.1 - - [19/May/2019:11:36:05 +0800] \"GET /favicon.ico HTTP/1.1\" 404 571 \"http://localhost/\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n\n```\n\n##### 配置 Logstash\n\n把这个地址配置到Logstash中\n\n测试：`./logstash -e 'input {stdin 0} output {studout 0}'`\n从控制台输入，控制台输出，\n\n验证grok是否正确：[https://grokdebug.herokuapp.com/](https://grokdebug.herokuapp.com/)\n\n\n配置文件：\n\n```\n# Sample Logstash configuration for creating a simple\n# Beats -> Logstash -> Elasticsearch pipeline.\n\ninput {\n        file {\n                path => \"C:/ProgramTool/dev/nginx/logs/access.log\"\n                type => \"nginx-access\"\n                start_position => \"beginning\"\n                #sincedb_path => \"/usr/local/logstash/sincedb\"\n        }\n}\n\nfilter {\n        if [type] == \"nginx-access\" {\n                grok {\n                    patterns_dir => \"C:/ProgramTool/dev/logstash-6.7.0/patterns\"        #设置自定义正则路径\n                    match => {\n                        \"message\" => \"%{NGINXACCESS}\"\n                        #使用patterns路径下文件内部的解析名字\n                    }\n                }\n                date {\n                    match => [ \"log_timestamp\" , \"dd/MMM/YYYY:HH:mm:ss Z\" ]\n                }\n                urldecode {\n                    all_fields => true\n                }\n            #把所有字段进行urldecode（显示中文）\n        }\n}\n\noutput {\n        if [type] == \"nginx-access\" {\n            stdout {\n                codec    => rubydebug\n            }\n            # 输出到控制台\n            elasticsearch {\n                    hosts => [\"127.0.0.1:9200\"]\n                    manage_template => true\n                    index => \"logstash-nginx-access-%{+YYYY-MM-dd}\"\n                    # 索引名称\n            }\n        }\n\n}\n\n```\ngrok参数设置`C:/ProgramTool/dev/logstash-6.7.0/patterns`路径下设置nginx的匹配\n\n```\nNGINXACCESS %{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{QS:x_forwarded_for}\n\n```\n\n参考[grok参数设置](https://www.cnblogs.com/Orgliny/p/5592186.html)\n更多\n```\nURIPARM1 [A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\\-\\[\\]]*\nURIPATH1 (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%&_\\- ]*)+\nURI1 (%{URIPROTO}://)?(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})?\nNGINXACCESS %{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{QS:x_forwarded_for}\nDEMOACCESS %{IPORHOST:remote_addr} - (%{USERNAME:user}|-) \\[%{HTTPDATE:log_timestamp}\\] %{HOSTNAME:http_host} %{WORD:request_method} \\\"%{URIPATH1:uri}\\\" \\\"%{URIPARM1:param}\\\" %{BASE10NUM:http_status} (?:%{BASE10NUM:body_bytes_sent}|-) \\\"(?:%{URI1:http_referrer}|-)\\\" (%{BASE10NUM:upstream_status}|-) (?:%{HOSTPORT:upstream_addr}|-) (%{BASE16FLOAT:upstream_response_time}|-) (%{BASE16FLOAT:request_time}|-) (?:%{QUOTEDSTRING:user_agent}|-) \\\"(%{IPV4:client_ip}|-)\\\" \\\"(%{WORD:x_forword_for}|-)\\\"\n```\n\n上面用到正则切割日志等功能\n\n启动：`./logstash -f ../config/logstash.conf & `\n`./logstash -f ../config/logstash.conf --path.data=C:/ProgramTool/dev/logstash-6.7.0/data `\n如果有一个实例的话，启动时，需要指定path.data\n\n##### 简单的es主从\n\nmaster 默认9200端口\n```\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n\ncluster.name: muxiaobai-test\nnode.name: master\nnode.master: true\n\nnetwork.host: 127.0.0.1\n\n```\nslave-1\n```\ncluster.name: muxiaobai-test\nnode.name: slave-1\n#node.master: true\n\nnetwork.host: 127.0.0.1\nhttp.port: 9500\n\ndiscovery.zen.ping.unicast.hosts: [\"127.0.0.1\"]\n```\nslave-2\n```\ncluster.name: muxiaobai-test\nnode.name: slave-1\n#node.master: true\n\nnetwork.host: 127.0.0.1\nhttp.port: 9400\n\ndiscovery.zen.ping.unicast.hosts: [\"127.0.0.1\"]\n```\n\n##### 使用elastic-head 图形化工具查看运行情况\n[elastic-head github](https://github.com/mobz/elasticsearch-head)\n需要node环境\n`npm install` ` npm run start`默认9100端口 访问http://127.0.0.1:9100\n\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/elasticsearch-init.png)\n\n\n\n##### 使用kibaba\n\n默认端口5601，[http://localhost:5601](http://localhost:5601),把对应的索引加进去。\n\n\n\n#### 操作如下\n\n首先访问 nginx ，地址：http://localhost\n\n然后可以看到Logstash窗口输出的日志\n\n![ElasticSearch控制台](/使用ELK分析日志/logstash-nginx.png)\n\nhttp://localhost:9100,中，可以看到访问日志的内容\n效果如下：\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/elasticsearch-header.png)\n具体切分的数据\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/data1.png)\n\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/data2.png)\n\n创建了索引后，\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/kibaba2.png)\n在kibaba中有默认的时间线，访问次数，即可展示\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/kibaba4.png)\n\n### 使用filebeat\n\n[nginx filebeat 配置](https://www.elastic.co/guide/en/beats/filebeat/7.0/filebeat-module-nginx.html#nginx-settings)\n\n\n\n已经有模板，使用的时候先开启，然后安装，最后启动即可\n\n- `filebeat  modules enable nginx`\n- `filebeat setup -e`\n- `filebeat`\n- \n\nnginx.yml配置文件，需要指定日志文件路径\n```\n- module: nginx\n  access:\n    enabled: true\n    var.paths: [\"C:/ProgramTool/dev/nginx/logs/access.log*\"]\n  error:\n    enabled: true\n    var.paths: [\"C:/ProgramTool/dev/nginx/logs/error.log*\"]\n```\n默认直接输出到ElasticSearch\n\n\n\n然后在Logstash的配置文件中使用beat作为input，输入源。\n主要是input\n```\ninput {\n  beats {\n    port => 5044\n    host => \"0.0.0.0\"\n  }\n}\n\n```\nlogstash.conf 默认配置就是从beat中获取数据的\n\n\n\n参考：\n- [ELK系统框架图](https://www.cnblogs.com/aresxin/p/8035137.html)\n- [filebeat和Logstash配合使用](https://www.colabug.com/2936270.html)\n- [官网 Logstash中的beat nginx 配置](https://github.com/elastic/logstash/blob/88563c86435926a8e5353bd970f92ab61efe58ec/docs/static/filebeat_modules/nginx/pipeline.conf)\n","source":"_posts/使用ELK分析日志.md","raw":"---\ntitle: 使用ELK分析日志\ndate: 2019-05-18 23:35:47\ntags: [分析,日志]\ncategories: 工具\ndescription: \"日志分析系统搭建\"\n---\n\n[elk 官网介绍](https://www.elastic.co/cn/elk-stack)\n要解决的问题：\n对于日志等文件，需要进行分析，例如：访问IP数，什么时候访问最多，用户量最大；\n简单的架构就是直接使用filebeat来获取到数据。\n还有一种实现方式是：拉取文件后，先通过Logstash（tools）把对应的文件分析出来，然后输出到ElasticSearch（data）中然后使用kibaba来进行虚拟化的展示（view）。\n还可以加上output的输出到队列缓存中等。\n\n\n### 主要技术手段\nfilebeat、Logstash、ElasticSearch、Kibaba\n##### filebeat\n通常会有一个客户端和一个服务器，客户端运行在业务应用机上，可以访问到对应的日志文件，\n然后连接服务器，服务器把数据发送到Logstash中，也可以把数据直接output到ElasticSearch内。\n\n![ElasticSearch控制台](/使用ELK分析日志/filebeat.png)\n\n##### Logstash\nLogstash把获取到的数据进行过滤（filter）处理，把找到的文件进行分析，输出到ElasticSearch,\n##### ElasticSearch\n不用多讲，存储索引数据用的，基于Lucene，的分布式架构。在这种elk中充当数据源。\n##### Kibaba\nvisual展示\n\n### 示例 使用nginx日志来操作，简单版，不使用filebeat\n\n定义的所有文件路径在`/c/ProgrmTool/dev/`中\n\n##### 启动nginx \n\n参考[应用部署之nginx负载](https://muxiaobai.github.io/2017/09/02/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E8%B4%9F%E8%BD%BD/)\n\n`/c/ProgrmTool/dev/ >start nginx`\n\nnginx 中的log_format格式\n\n```\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n```\n\n日志文件在../logs/access.log\n\n```\n127.0.0.1 - - [19/May/2019:11:10:18 +0800] \"GET / HTTP/1.1\" 200 612 \"-\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n127.0.0.1 - - [19/May/2019:11:10:19 +0800] \"GET /favicon.ico HTTP/1.1\" 404 571 \"http://localhost/\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n127.0.0.1 - - [19/May/2019:11:10:19 +0800] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n127.0.0.1 - - [19/May/2019:11:36:05 +0800] \"GET / HTTP/1.1\" 304 0 \"-\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n127.0.0.1 - - [19/May/2019:11:36:05 +0800] \"GET /favicon.ico HTTP/1.1\" 404 571 \"http://localhost/\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" \"-\"\n\n```\n\n##### 配置 Logstash\n\n把这个地址配置到Logstash中\n\n测试：`./logstash -e 'input {stdin 0} output {studout 0}'`\n从控制台输入，控制台输出，\n\n验证grok是否正确：[https://grokdebug.herokuapp.com/](https://grokdebug.herokuapp.com/)\n\n\n配置文件：\n\n```\n# Sample Logstash configuration for creating a simple\n# Beats -> Logstash -> Elasticsearch pipeline.\n\ninput {\n        file {\n                path => \"C:/ProgramTool/dev/nginx/logs/access.log\"\n                type => \"nginx-access\"\n                start_position => \"beginning\"\n                #sincedb_path => \"/usr/local/logstash/sincedb\"\n        }\n}\n\nfilter {\n        if [type] == \"nginx-access\" {\n                grok {\n                    patterns_dir => \"C:/ProgramTool/dev/logstash-6.7.0/patterns\"        #设置自定义正则路径\n                    match => {\n                        \"message\" => \"%{NGINXACCESS}\"\n                        #使用patterns路径下文件内部的解析名字\n                    }\n                }\n                date {\n                    match => [ \"log_timestamp\" , \"dd/MMM/YYYY:HH:mm:ss Z\" ]\n                }\n                urldecode {\n                    all_fields => true\n                }\n            #把所有字段进行urldecode（显示中文）\n        }\n}\n\noutput {\n        if [type] == \"nginx-access\" {\n            stdout {\n                codec    => rubydebug\n            }\n            # 输出到控制台\n            elasticsearch {\n                    hosts => [\"127.0.0.1:9200\"]\n                    manage_template => true\n                    index => \"logstash-nginx-access-%{+YYYY-MM-dd}\"\n                    # 索引名称\n            }\n        }\n\n}\n\n```\ngrok参数设置`C:/ProgramTool/dev/logstash-6.7.0/patterns`路径下设置nginx的匹配\n\n```\nNGINXACCESS %{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{QS:x_forwarded_for}\n\n```\n\n参考[grok参数设置](https://www.cnblogs.com/Orgliny/p/5592186.html)\n更多\n```\nURIPARM1 [A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\\-\\[\\]]*\nURIPATH1 (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%&_\\- ]*)+\nURI1 (%{URIPROTO}://)?(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})?\nNGINXACCESS %{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{QS:x_forwarded_for}\nDEMOACCESS %{IPORHOST:remote_addr} - (%{USERNAME:user}|-) \\[%{HTTPDATE:log_timestamp}\\] %{HOSTNAME:http_host} %{WORD:request_method} \\\"%{URIPATH1:uri}\\\" \\\"%{URIPARM1:param}\\\" %{BASE10NUM:http_status} (?:%{BASE10NUM:body_bytes_sent}|-) \\\"(?:%{URI1:http_referrer}|-)\\\" (%{BASE10NUM:upstream_status}|-) (?:%{HOSTPORT:upstream_addr}|-) (%{BASE16FLOAT:upstream_response_time}|-) (%{BASE16FLOAT:request_time}|-) (?:%{QUOTEDSTRING:user_agent}|-) \\\"(%{IPV4:client_ip}|-)\\\" \\\"(%{WORD:x_forword_for}|-)\\\"\n```\n\n上面用到正则切割日志等功能\n\n启动：`./logstash -f ../config/logstash.conf & `\n`./logstash -f ../config/logstash.conf --path.data=C:/ProgramTool/dev/logstash-6.7.0/data `\n如果有一个实例的话，启动时，需要指定path.data\n\n##### 简单的es主从\n\nmaster 默认9200端口\n```\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n\ncluster.name: muxiaobai-test\nnode.name: master\nnode.master: true\n\nnetwork.host: 127.0.0.1\n\n```\nslave-1\n```\ncluster.name: muxiaobai-test\nnode.name: slave-1\n#node.master: true\n\nnetwork.host: 127.0.0.1\nhttp.port: 9500\n\ndiscovery.zen.ping.unicast.hosts: [\"127.0.0.1\"]\n```\nslave-2\n```\ncluster.name: muxiaobai-test\nnode.name: slave-1\n#node.master: true\n\nnetwork.host: 127.0.0.1\nhttp.port: 9400\n\ndiscovery.zen.ping.unicast.hosts: [\"127.0.0.1\"]\n```\n\n##### 使用elastic-head 图形化工具查看运行情况\n[elastic-head github](https://github.com/mobz/elasticsearch-head)\n需要node环境\n`npm install` ` npm run start`默认9100端口 访问http://127.0.0.1:9100\n\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/elasticsearch-init.png)\n\n\n\n##### 使用kibaba\n\n默认端口5601，[http://localhost:5601](http://localhost:5601),把对应的索引加进去。\n\n\n\n#### 操作如下\n\n首先访问 nginx ，地址：http://localhost\n\n然后可以看到Logstash窗口输出的日志\n\n![ElasticSearch控制台](/使用ELK分析日志/logstash-nginx.png)\n\nhttp://localhost:9100,中，可以看到访问日志的内容\n效果如下：\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/elasticsearch-header.png)\n具体切分的数据\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/data1.png)\n\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/data2.png)\n\n创建了索引后，\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/kibaba2.png)\n在kibaba中有默认的时间线，访问次数，即可展示\n![Logstash日志进入ElasticSearch](/使用ELK分析日志/kibaba4.png)\n\n### 使用filebeat\n\n[nginx filebeat 配置](https://www.elastic.co/guide/en/beats/filebeat/7.0/filebeat-module-nginx.html#nginx-settings)\n\n\n\n已经有模板，使用的时候先开启，然后安装，最后启动即可\n\n- `filebeat  modules enable nginx`\n- `filebeat setup -e`\n- `filebeat`\n- \n\nnginx.yml配置文件，需要指定日志文件路径\n```\n- module: nginx\n  access:\n    enabled: true\n    var.paths: [\"C:/ProgramTool/dev/nginx/logs/access.log*\"]\n  error:\n    enabled: true\n    var.paths: [\"C:/ProgramTool/dev/nginx/logs/error.log*\"]\n```\n默认直接输出到ElasticSearch\n\n\n\n然后在Logstash的配置文件中使用beat作为input，输入源。\n主要是input\n```\ninput {\n  beats {\n    port => 5044\n    host => \"0.0.0.0\"\n  }\n}\n\n```\nlogstash.conf 默认配置就是从beat中获取数据的\n\n\n\n参考：\n- [ELK系统框架图](https://www.cnblogs.com/aresxin/p/8035137.html)\n- [filebeat和Logstash配合使用](https://www.colabug.com/2936270.html)\n- [官网 Logstash中的beat nginx 配置](https://github.com/elastic/logstash/blob/88563c86435926a8e5353bd970f92ab61efe58ec/docs/static/filebeat_modules/nginx/pipeline.conf)\n","slug":"使用ELK分析日志","published":1,"updated":"2019-05-19T04:29:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79t0078ugv5n43p93as","content":"<p><a href=\"https://www.elastic.co/cn/elk-stack\" target=\"_blank\" rel=\"noopener\">elk 官网介绍</a><br>要解决的问题：<br>对于日志等文件，需要进行分析，例如：访问IP数，什么时候访问最多，用户量最大；<br>简单的架构就是直接使用filebeat来获取到数据。<br>还有一种实现方式是：拉取文件后，先通过Logstash（tools）把对应的文件分析出来，然后输出到ElasticSearch（data）中然后使用kibaba来进行虚拟化的展示（view）。<br>还可以加上output的输出到队列缓存中等。</p>\n<h3 id=\"主要技术手段\"><a href=\"#主要技术手段\" class=\"headerlink\" title=\"主要技术手段\"></a>主要技术手段</h3><p>filebeat、Logstash、ElasticSearch、Kibaba</p>\n<h5 id=\"filebeat\"><a href=\"#filebeat\" class=\"headerlink\" title=\"filebeat\"></a>filebeat</h5><p>通常会有一个客户端和一个服务器，客户端运行在业务应用机上，可以访问到对应的日志文件，<br>然后连接服务器，服务器把数据发送到Logstash中，也可以把数据直接output到ElasticSearch内。</p>\n<p><img src=\"/.io//filebeat.png\" alt=\"ElasticSearch控制台\"></p>\n<h5 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h5><p>Logstash把获取到的数据进行过滤（filter）处理，把找到的文件进行分析，输出到ElasticSearch,</p>\n<h5 id=\"ElasticSearch\"><a href=\"#ElasticSearch\" class=\"headerlink\" title=\"ElasticSearch\"></a>ElasticSearch</h5><p>不用多讲，存储索引数据用的，基于Lucene，的分布式架构。在这种elk中充当数据源。</p>\n<h5 id=\"Kibaba\"><a href=\"#Kibaba\" class=\"headerlink\" title=\"Kibaba\"></a>Kibaba</h5><p>visual展示</p>\n<h3 id=\"示例-使用nginx日志来操作，简单版，不使用filebeat\"><a href=\"#示例-使用nginx日志来操作，简单版，不使用filebeat\" class=\"headerlink\" title=\"示例 使用nginx日志来操作，简单版，不使用filebeat\"></a>示例 使用nginx日志来操作，简单版，不使用filebeat</h3><p>定义的所有文件路径在<code>/c/ProgrmTool/dev/</code>中</p>\n<h5 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h5><p>参考<a href=\"https://muxiaobai.github.io/2017/09/02/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E8%B4%9F%E8%BD%BD/\">应用部署之nginx负载</a></p>\n<p><code>/c/ProgrmTool/dev/ &gt;start nginx</code></p>\n<p>nginx 中的log_format格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br></pre></td></tr></table></figure>\n<p>日志文件在../logs/access.log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 - - [19/May/2019:11:10:18 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">127.0.0.1 - - [19/May/2019:11:10:19 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://localhost/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">127.0.0.1 - - [19/May/2019:11:10:19 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">127.0.0.1 - - [19/May/2019:11:36:05 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">127.0.0.1 - - [19/May/2019:11:36:05 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://localhost/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置-Logstash\"><a href=\"#配置-Logstash\" class=\"headerlink\" title=\"配置 Logstash\"></a>配置 Logstash</h5><p>把这个地址配置到Logstash中</p>\n<p>测试：<code>./logstash -e &#39;input {stdin 0} output {studout 0}&#39;</code><br>从控制台输入，控制台输出，</p>\n<p>验证grok是否正确：<a href=\"https://grokdebug.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://grokdebug.herokuapp.com/</a></p>\n<p>配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sample Logstash configuration for creating a simple</span><br><span class=\"line\"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class=\"line\"></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">        file &#123;</span><br><span class=\"line\">                path =&gt; &quot;C:/ProgramTool/dev/nginx/logs/access.log&quot;</span><br><span class=\"line\">                type =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">                start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">                #sincedb_path =&gt; &quot;/usr/local/logstash/sincedb&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">        if [type] == &quot;nginx-access&quot; &#123;</span><br><span class=\"line\">                grok &#123;</span><br><span class=\"line\">                    patterns_dir =&gt; &quot;C:/ProgramTool/dev/logstash-6.7.0/patterns&quot;        #设置自定义正则路径</span><br><span class=\"line\">                    match =&gt; &#123;</span><br><span class=\"line\">                        &quot;message&quot; =&gt; &quot;%&#123;NGINXACCESS&#125;&quot;</span><br><span class=\"line\">                        #使用patterns路径下文件内部的解析名字</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                date &#123;</span><br><span class=\"line\">                    match =&gt; [ &quot;log_timestamp&quot; , &quot;dd/MMM/YYYY:HH:mm:ss Z&quot; ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                urldecode &#123;</span><br><span class=\"line\">                    all_fields =&gt; true</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            #把所有字段进行urldecode（显示中文）</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">        if [type] == &quot;nginx-access&quot; &#123;</span><br><span class=\"line\">            stdout &#123;</span><br><span class=\"line\">                codec    =&gt; rubydebug</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            # 输出到控制台</span><br><span class=\"line\">            elasticsearch &#123;</span><br><span class=\"line\">                    hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class=\"line\">                    manage_template =&gt; true</span><br><span class=\"line\">                    index =&gt; &quot;logstash-nginx-access-%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class=\"line\">                    # 索引名称</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>grok参数设置<code>C:/ProgramTool/dev/logstash-6.7.0/patterns</code>路径下设置nginx的匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \\[%&#123;HTTPDATE:timestamp&#125;\\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:x_forwarded_for&#125;</span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"https://www.cnblogs.com/Orgliny/p/5592186.html\" target=\"_blank\" rel=\"noopener\">grok参数设置</a><br>更多<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URIPARM1 [A-Za-z0-9$.+!*&apos;|()&#123;&#125;,~@#%&amp;/=:;_?\\-\\[\\]]*</span><br><span class=\"line\">URIPATH1 (?:/[A-Za-z0-9$.+!*&apos;()&#123;&#125;,~:;=@#%&amp;_\\- ]*)+</span><br><span class=\"line\">URI1 (%&#123;URIPROTO&#125;://)?(?:%&#123;USER&#125;(?::[^@]*)?@)?(?:%&#123;URIHOST&#125;)?(?:%&#123;URIPATHPARAM&#125;)?</span><br><span class=\"line\">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \\[%&#123;HTTPDATE:timestamp&#125;\\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:x_forwarded_for&#125;</span><br><span class=\"line\">DEMOACCESS %&#123;IPORHOST:remote_addr&#125; - (%&#123;USERNAME:user&#125;|-) \\[%&#123;HTTPDATE:log_timestamp&#125;\\] %&#123;HOSTNAME:http_host&#125; %&#123;WORD:request_method&#125; \\&quot;%&#123;URIPATH1:uri&#125;\\&quot; \\&quot;%&#123;URIPARM1:param&#125;\\&quot; %&#123;BASE10NUM:http_status&#125; (?:%&#123;BASE10NUM:body_bytes_sent&#125;|-) \\&quot;(?:%&#123;URI1:http_referrer&#125;|-)\\&quot; (%&#123;BASE10NUM:upstream_status&#125;|-) (?:%&#123;HOSTPORT:upstream_addr&#125;|-) (%&#123;BASE16FLOAT:upstream_response_time&#125;|-) (%&#123;BASE16FLOAT:request_time&#125;|-) (?:%&#123;QUOTEDSTRING:user_agent&#125;|-) \\&quot;(%&#123;IPV4:client_ip&#125;|-)\\&quot; \\&quot;(%&#123;WORD:x_forword_for&#125;|-)\\&quot;</span><br></pre></td></tr></table></figure></p>\n<p>上面用到正则切割日志等功能</p>\n<p>启动：<code>./logstash -f ../config/logstash.conf &amp;</code><br><code>./logstash -f ../config/logstash.conf --path.data=C:/ProgramTool/dev/logstash-6.7.0/data</code><br>如果有一个实例的话，启动时，需要指定path.data</p>\n<h5 id=\"简单的es主从\"><a href=\"#简单的es主从\" class=\"headerlink\" title=\"简单的es主从\"></a>简单的es主从</h5><p>master 默认9200端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: true</span><br><span class=\"line\">http.cors.allow-origin: &quot;*&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cluster.name: muxiaobai-test</span><br><span class=\"line\">node.name: master</span><br><span class=\"line\">node.master: true</span><br><span class=\"line\"></span><br><span class=\"line\">network.host: 127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>slave-1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster.name: muxiaobai-test</span><br><span class=\"line\">node.name: slave-1</span><br><span class=\"line\">#node.master: true</span><br><span class=\"line\"></span><br><span class=\"line\">network.host: 127.0.0.1</span><br><span class=\"line\">http.port: 9500</span><br><span class=\"line\"></span><br><span class=\"line\">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>slave-2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster.name: muxiaobai-test</span><br><span class=\"line\">node.name: slave-1</span><br><span class=\"line\">#node.master: true</span><br><span class=\"line\"></span><br><span class=\"line\">network.host: 127.0.0.1</span><br><span class=\"line\">http.port: 9400</span><br><span class=\"line\"></span><br><span class=\"line\">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"使用elastic-head-图形化工具查看运行情况\"><a href=\"#使用elastic-head-图形化工具查看运行情况\" class=\"headerlink\" title=\"使用elastic-head 图形化工具查看运行情况\"></a>使用elastic-head 图形化工具查看运行情况</h5><p><a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"noopener\">elastic-head github</a><br>需要node环境<br><code>npm install</code> <code>npm run start</code>默认9100端口 访问<a href=\"http://127.0.0.1:9100\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9100</a></p>\n<p><img src=\"/.io//elasticsearch-init.png\" alt=\"Logstash日志进入ElasticSearch\"></p>\n<h5 id=\"使用kibaba\"><a href=\"#使用kibaba\" class=\"headerlink\" title=\"使用kibaba\"></a>使用kibaba</h5><p>默认端口5601，<a href=\"http://localhost:5601\" target=\"_blank\" rel=\"noopener\">http://localhost:5601</a>,把对应的索引加进去。</p>\n<h4 id=\"操作如下\"><a href=\"#操作如下\" class=\"headerlink\" title=\"操作如下\"></a>操作如下</h4><p>首先访问 nginx ，地址：<a href=\"http://localhost\" target=\"_blank\" rel=\"noopener\">http://localhost</a></p>\n<p>然后可以看到Logstash窗口输出的日志</p>\n<p><img src=\"/.io//logstash-nginx.png\" alt=\"ElasticSearch控制台\"></p>\n<p><a href=\"http://localhost:9100,中，可以看到访问日志的内容\" target=\"_blank\" rel=\"noopener\">http://localhost:9100,中，可以看到访问日志的内容</a><br>效果如下：<br><img src=\"/.io//elasticsearch-header.png\" alt=\"Logstash日志进入ElasticSearch\"><br>具体切分的数据<br><img src=\"/.io//data1.png\" alt=\"Logstash日志进入ElasticSearch\"></p>\n<p><img src=\"/.io//data2.png\" alt=\"Logstash日志进入ElasticSearch\"></p>\n<p>创建了索引后，<br><img src=\"/.io//kibaba2.png\" alt=\"Logstash日志进入ElasticSearch\"><br>在kibaba中有默认的时间线，访问次数，即可展示<br><img src=\"/.io//kibaba4.png\" alt=\"Logstash日志进入ElasticSearch\"></p>\n<h3 id=\"使用filebeat\"><a href=\"#使用filebeat\" class=\"headerlink\" title=\"使用filebeat\"></a>使用filebeat</h3><p><a href=\"https://www.elastic.co/guide/en/beats/filebeat/7.0/filebeat-module-nginx.html#nginx-settings\" target=\"_blank\" rel=\"noopener\">nginx filebeat 配置</a></p>\n<p>已经有模板，使用的时候先开启，然后安装，最后启动即可</p>\n<ul>\n<li><code>filebeat  modules enable nginx</code></li>\n<li><code>filebeat setup -e</code></li>\n<li><code>filebeat</code></li>\n<li></li>\n</ul>\n<p>nginx.yml配置文件，需要指定日志文件路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- module: nginx</span><br><span class=\"line\">  access:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    var.paths: [&quot;C:/ProgramTool/dev/nginx/logs/access.log*&quot;]</span><br><span class=\"line\">  error:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    var.paths: [&quot;C:/ProgramTool/dev/nginx/logs/error.log*&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>默认直接输出到ElasticSearch</p>\n<p>然后在Logstash的配置文件中使用beat作为input，输入源。<br>主要是input<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>logstash.conf 默认配置就是从beat中获取数据的</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/aresxin/p/8035137.html\" target=\"_blank\" rel=\"noopener\">ELK系统框架图</a></li>\n<li><a href=\"https://www.colabug.com/2936270.html\" target=\"_blank\" rel=\"noopener\">filebeat和Logstash配合使用</a></li>\n<li><a href=\"https://github.com/elastic/logstash/blob/88563c86435926a8e5353bd970f92ab61efe58ec/docs/static/filebeat_modules/nginx/pipeline.conf\" target=\"_blank\" rel=\"noopener\">官网 Logstash中的beat nginx 配置</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.elastic.co/cn/elk-stack\" target=\"_blank\" rel=\"noopener\">elk 官网介绍</a><br>要解决的问题：<br>对于日志等文件，需要进行分析，例如：访问IP数，什么时候访问最多，用户量最大；<br>简单的架构就是直接使用filebeat来获取到数据。<br>还有一种实现方式是：拉取文件后，先通过Logstash（tools）把对应的文件分析出来，然后输出到ElasticSearch（data）中然后使用kibaba来进行虚拟化的展示（view）。<br>还可以加上output的输出到队列缓存中等。</p>\n<h3 id=\"主要技术手段\"><a href=\"#主要技术手段\" class=\"headerlink\" title=\"主要技术手段\"></a>主要技术手段</h3><p>filebeat、Logstash、ElasticSearch、Kibaba</p>\n<h5 id=\"filebeat\"><a href=\"#filebeat\" class=\"headerlink\" title=\"filebeat\"></a>filebeat</h5><p>通常会有一个客户端和一个服务器，客户端运行在业务应用机上，可以访问到对应的日志文件，<br>然后连接服务器，服务器把数据发送到Logstash中，也可以把数据直接output到ElasticSearch内。</p>\n<p><img src=\"/.io//filebeat.png\" alt=\"ElasticSearch控制台\"></p>\n<h5 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h5><p>Logstash把获取到的数据进行过滤（filter）处理，把找到的文件进行分析，输出到ElasticSearch,</p>\n<h5 id=\"ElasticSearch\"><a href=\"#ElasticSearch\" class=\"headerlink\" title=\"ElasticSearch\"></a>ElasticSearch</h5><p>不用多讲，存储索引数据用的，基于Lucene，的分布式架构。在这种elk中充当数据源。</p>\n<h5 id=\"Kibaba\"><a href=\"#Kibaba\" class=\"headerlink\" title=\"Kibaba\"></a>Kibaba</h5><p>visual展示</p>\n<h3 id=\"示例-使用nginx日志来操作，简单版，不使用filebeat\"><a href=\"#示例-使用nginx日志来操作，简单版，不使用filebeat\" class=\"headerlink\" title=\"示例 使用nginx日志来操作，简单版，不使用filebeat\"></a>示例 使用nginx日志来操作，简单版，不使用filebeat</h3><p>定义的所有文件路径在<code>/c/ProgrmTool/dev/</code>中</p>\n<h5 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h5><p>参考<a href=\"https://muxiaobai.github.io/2017/09/02/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E8%B4%9F%E8%BD%BD/\">应用部署之nginx负载</a></p>\n<p><code>/c/ProgrmTool/dev/ &gt;start nginx</code></p>\n<p>nginx 中的log_format格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br></pre></td></tr></table></figure>\n<p>日志文件在../logs/access.log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 - - [19/May/2019:11:10:18 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">127.0.0.1 - - [19/May/2019:11:10:19 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://localhost/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">127.0.0.1 - - [19/May/2019:11:10:19 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">127.0.0.1 - - [19/May/2019:11:36:05 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class=\"line\">127.0.0.1 - - [19/May/2019:11:36:05 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://localhost/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置-Logstash\"><a href=\"#配置-Logstash\" class=\"headerlink\" title=\"配置 Logstash\"></a>配置 Logstash</h5><p>把这个地址配置到Logstash中</p>\n<p>测试：<code>./logstash -e &#39;input {stdin 0} output {studout 0}&#39;</code><br>从控制台输入，控制台输出，</p>\n<p>验证grok是否正确：<a href=\"https://grokdebug.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">https://grokdebug.herokuapp.com/</a></p>\n<p>配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sample Logstash configuration for creating a simple</span><br><span class=\"line\"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class=\"line\"></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">        file &#123;</span><br><span class=\"line\">                path =&gt; &quot;C:/ProgramTool/dev/nginx/logs/access.log&quot;</span><br><span class=\"line\">                type =&gt; &quot;nginx-access&quot;</span><br><span class=\"line\">                start_position =&gt; &quot;beginning&quot;</span><br><span class=\"line\">                #sincedb_path =&gt; &quot;/usr/local/logstash/sincedb&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">        if [type] == &quot;nginx-access&quot; &#123;</span><br><span class=\"line\">                grok &#123;</span><br><span class=\"line\">                    patterns_dir =&gt; &quot;C:/ProgramTool/dev/logstash-6.7.0/patterns&quot;        #设置自定义正则路径</span><br><span class=\"line\">                    match =&gt; &#123;</span><br><span class=\"line\">                        &quot;message&quot; =&gt; &quot;%&#123;NGINXACCESS&#125;&quot;</span><br><span class=\"line\">                        #使用patterns路径下文件内部的解析名字</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                date &#123;</span><br><span class=\"line\">                    match =&gt; [ &quot;log_timestamp&quot; , &quot;dd/MMM/YYYY:HH:mm:ss Z&quot; ]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                urldecode &#123;</span><br><span class=\"line\">                    all_fields =&gt; true</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            #把所有字段进行urldecode（显示中文）</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">        if [type] == &quot;nginx-access&quot; &#123;</span><br><span class=\"line\">            stdout &#123;</span><br><span class=\"line\">                codec    =&gt; rubydebug</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            # 输出到控制台</span><br><span class=\"line\">            elasticsearch &#123;</span><br><span class=\"line\">                    hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class=\"line\">                    manage_template =&gt; true</span><br><span class=\"line\">                    index =&gt; &quot;logstash-nginx-access-%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class=\"line\">                    # 索引名称</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>grok参数设置<code>C:/ProgramTool/dev/logstash-6.7.0/patterns</code>路径下设置nginx的匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \\[%&#123;HTTPDATE:timestamp&#125;\\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:x_forwarded_for&#125;</span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"https://www.cnblogs.com/Orgliny/p/5592186.html\" target=\"_blank\" rel=\"noopener\">grok参数设置</a><br>更多<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URIPARM1 [A-Za-z0-9$.+!*&apos;|()&#123;&#125;,~@#%&amp;/=:;_?\\-\\[\\]]*</span><br><span class=\"line\">URIPATH1 (?:/[A-Za-z0-9$.+!*&apos;()&#123;&#125;,~:;=@#%&amp;_\\- ]*)+</span><br><span class=\"line\">URI1 (%&#123;URIPROTO&#125;://)?(?:%&#123;USER&#125;(?::[^@]*)?@)?(?:%&#123;URIHOST&#125;)?(?:%&#123;URIPATHPARAM&#125;)?</span><br><span class=\"line\">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \\[%&#123;HTTPDATE:timestamp&#125;\\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:x_forwarded_for&#125;</span><br><span class=\"line\">DEMOACCESS %&#123;IPORHOST:remote_addr&#125; - (%&#123;USERNAME:user&#125;|-) \\[%&#123;HTTPDATE:log_timestamp&#125;\\] %&#123;HOSTNAME:http_host&#125; %&#123;WORD:request_method&#125; \\&quot;%&#123;URIPATH1:uri&#125;\\&quot; \\&quot;%&#123;URIPARM1:param&#125;\\&quot; %&#123;BASE10NUM:http_status&#125; (?:%&#123;BASE10NUM:body_bytes_sent&#125;|-) \\&quot;(?:%&#123;URI1:http_referrer&#125;|-)\\&quot; (%&#123;BASE10NUM:upstream_status&#125;|-) (?:%&#123;HOSTPORT:upstream_addr&#125;|-) (%&#123;BASE16FLOAT:upstream_response_time&#125;|-) (%&#123;BASE16FLOAT:request_time&#125;|-) (?:%&#123;QUOTEDSTRING:user_agent&#125;|-) \\&quot;(%&#123;IPV4:client_ip&#125;|-)\\&quot; \\&quot;(%&#123;WORD:x_forword_for&#125;|-)\\&quot;</span><br></pre></td></tr></table></figure></p>\n<p>上面用到正则切割日志等功能</p>\n<p>启动：<code>./logstash -f ../config/logstash.conf &amp;</code><br><code>./logstash -f ../config/logstash.conf --path.data=C:/ProgramTool/dev/logstash-6.7.0/data</code><br>如果有一个实例的话，启动时，需要指定path.data</p>\n<h5 id=\"简单的es主从\"><a href=\"#简单的es主从\" class=\"headerlink\" title=\"简单的es主从\"></a>简单的es主从</h5><p>master 默认9200端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: true</span><br><span class=\"line\">http.cors.allow-origin: &quot;*&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">cluster.name: muxiaobai-test</span><br><span class=\"line\">node.name: master</span><br><span class=\"line\">node.master: true</span><br><span class=\"line\"></span><br><span class=\"line\">network.host: 127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>slave-1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster.name: muxiaobai-test</span><br><span class=\"line\">node.name: slave-1</span><br><span class=\"line\">#node.master: true</span><br><span class=\"line\"></span><br><span class=\"line\">network.host: 127.0.0.1</span><br><span class=\"line\">http.port: 9500</span><br><span class=\"line\"></span><br><span class=\"line\">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>slave-2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster.name: muxiaobai-test</span><br><span class=\"line\">node.name: slave-1</span><br><span class=\"line\">#node.master: true</span><br><span class=\"line\"></span><br><span class=\"line\">network.host: 127.0.0.1</span><br><span class=\"line\">http.port: 9400</span><br><span class=\"line\"></span><br><span class=\"line\">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"使用elastic-head-图形化工具查看运行情况\"><a href=\"#使用elastic-head-图形化工具查看运行情况\" class=\"headerlink\" title=\"使用elastic-head 图形化工具查看运行情况\"></a>使用elastic-head 图形化工具查看运行情况</h5><p><a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"noopener\">elastic-head github</a><br>需要node环境<br><code>npm install</code> <code>npm run start</code>默认9100端口 访问<a href=\"http://127.0.0.1:9100\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9100</a></p>\n<p><img src=\"/.io//elasticsearch-init.png\" alt=\"Logstash日志进入ElasticSearch\"></p>\n<h5 id=\"使用kibaba\"><a href=\"#使用kibaba\" class=\"headerlink\" title=\"使用kibaba\"></a>使用kibaba</h5><p>默认端口5601，<a href=\"http://localhost:5601\" target=\"_blank\" rel=\"noopener\">http://localhost:5601</a>,把对应的索引加进去。</p>\n<h4 id=\"操作如下\"><a href=\"#操作如下\" class=\"headerlink\" title=\"操作如下\"></a>操作如下</h4><p>首先访问 nginx ，地址：<a href=\"http://localhost\" target=\"_blank\" rel=\"noopener\">http://localhost</a></p>\n<p>然后可以看到Logstash窗口输出的日志</p>\n<p><img src=\"/.io//logstash-nginx.png\" alt=\"ElasticSearch控制台\"></p>\n<p><a href=\"http://localhost:9100,中，可以看到访问日志的内容\" target=\"_blank\" rel=\"noopener\">http://localhost:9100,中，可以看到访问日志的内容</a><br>效果如下：<br><img src=\"/.io//elasticsearch-header.png\" alt=\"Logstash日志进入ElasticSearch\"><br>具体切分的数据<br><img src=\"/.io//data1.png\" alt=\"Logstash日志进入ElasticSearch\"></p>\n<p><img src=\"/.io//data2.png\" alt=\"Logstash日志进入ElasticSearch\"></p>\n<p>创建了索引后，<br><img src=\"/.io//kibaba2.png\" alt=\"Logstash日志进入ElasticSearch\"><br>在kibaba中有默认的时间线，访问次数，即可展示<br><img src=\"/.io//kibaba4.png\" alt=\"Logstash日志进入ElasticSearch\"></p>\n<h3 id=\"使用filebeat\"><a href=\"#使用filebeat\" class=\"headerlink\" title=\"使用filebeat\"></a>使用filebeat</h3><p><a href=\"https://www.elastic.co/guide/en/beats/filebeat/7.0/filebeat-module-nginx.html#nginx-settings\" target=\"_blank\" rel=\"noopener\">nginx filebeat 配置</a></p>\n<p>已经有模板，使用的时候先开启，然后安装，最后启动即可</p>\n<ul>\n<li><code>filebeat  modules enable nginx</code></li>\n<li><code>filebeat setup -e</code></li>\n<li><code>filebeat</code></li>\n<li></li>\n</ul>\n<p>nginx.yml配置文件，需要指定日志文件路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- module: nginx</span><br><span class=\"line\">  access:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    var.paths: [&quot;C:/ProgramTool/dev/nginx/logs/access.log*&quot;]</span><br><span class=\"line\">  error:</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    var.paths: [&quot;C:/ProgramTool/dev/nginx/logs/error.log*&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>默认直接输出到ElasticSearch</p>\n<p>然后在Logstash的配置文件中使用beat作为input，输入源。<br>主要是input<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>logstash.conf 默认配置就是从beat中获取数据的</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/aresxin/p/8035137.html\" target=\"_blank\" rel=\"noopener\">ELK系统框架图</a></li>\n<li><a href=\"https://www.colabug.com/2936270.html\" target=\"_blank\" rel=\"noopener\">filebeat和Logstash配合使用</a></li>\n<li><a href=\"https://github.com/elastic/logstash/blob/88563c86435926a8e5353bd970f92ab61efe58ec/docs/static/filebeat_modules/nginx/pipeline.conf\" target=\"_blank\" rel=\"noopener\">官网 Logstash中的beat nginx 配置</a></li>\n</ul>\n"},{"title":"应用部署之nginx参数配置","date":"2018-11-14T19:45:12.000Z","description":"nginx参数调优问题","_content":"\n## 应用\n参考[nginx配置文件](https://github.com/muxiaobai/CourseExercises/blob/master/shell/linux/nginx.conf)\n\n### 应用请求数配置\n\n### 日志\n\n\n#### 日志参数\n\n```\n$args                    #请求中的参数值\n$query_string            #同 $args\n$arg_NAME                #GET请求中NAME的值\n$is_args                 #如果请求中有参数，值为\"?\"，否则为空字符串\n$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如\"/foo/bar.html\"。\n$document_uri            #同 $uri\n$document_root           #当前请求的文档根目录或别名\n$host                    #优先级：HTTP请求行的主机名>\"HOST\"请求头字段>符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称\n$hostname                #主机名\n$https                   #如果开启了SSL安全模式，值为\"on\"，否则为空字符串。\n$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节\n$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的\"%B\"参数保持兼容\n$bytes_sent              #传输给客户端的字节数\n$connection              #TCP连接的序列号\n$connection_requests     #TCP连接当前的请求数量\n$content_length          #\"Content-Length\" 请求头字段\n$content_type            #\"Content-Type\" 请求头字段\n$cookie_name             #cookie名称\n$limit_rate              #用于设置响应的速度限制\n$msec                    #当前的Unix时间戳\n$nginx_version           #nginx版本\n$pid                     #工作进程的PID\n$pipe                    #如果请求来自管道通信，值为\"p\"，否则为\".\"\n$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串\n$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径\n$remote_addr             #客户端地址\n$remote_port             #客户端端口\n$remote_user             #用于HTTP基础认证服务的用户名\n$request                 #代表客户端的请求地址\n$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器\n$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off\n$request_completion      #如果请求成功，值为\"OK\"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空\n$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成\n$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)\n$request_method          #HTTP请求方法，通常为\"GET\"或\"POST\"\n$request_time            #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\n$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：\"/cnphp/test.php?arg=freemouse\"\n$scheme                  #请求使用的Web协议，\"http\" 或 \"https\"\n$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中\n$server_name             #服务器名\n$server_port             #服务器端口\n$server_protocol         #服务器的HTTP版本，通常为 \"HTTP/1.0\" 或 \"HTTP/1.1\"\n$status                  #HTTP响应代码\n$time_iso8601            #服务器时间的ISO 8610格式\n$time_local              #服务器时间（LOG Format 格式）\n$cookie_NAME             #客户端请求Header头中的cookie变量，前缀\"$cookie_\"加上cookie名称的变量，该变量的值即为cookie名称的值\n$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：\"Accept-Language\"，$http_accept_language即可\n$http_cookie\n$http_host               #请求地址，即浏览器中你输入的地址（IP或域名）\n$http_referer            #url跳转来源,用来记录从那个页面链接访问过来的\n$http_user_agent         #用户终端浏览器等信息\n$http_x_forwarded_for    \n$proxy_add_x_forwarded_for;#来自http请求的：x-forword-for字段，如果没有\"X-Forwarded-For\" 请求头，则$proxy_add_x_forwarded_for等于$remote_addr。x-forwarded-for不光可以自己设置值，而且可以设置任意格式值。\n$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可\n$sent_http_cache_control\n$sent_http_connection\n$sent_http_content_type\n$sent_http_keep_alive\n$sent_http_last_modified\n$sent_http_location\n$sent_http_transfer_encoding\n\n```\n#### 日志配置\n\nerror_log\n\naccess_log \n\nlog_format access '$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_body \"$http_referer\" \"$http_user_agent\" $http_x_forwarded_for';\n\n\n\n#### 日志分析\n\n1）总请求数\n\nwc -l  access.log |awk '{print $1}'\n\n\n\n2）独立IP数\n\nawk '{print $1}' access.log|sort |uniq |wc -l\n\n\n\n3）每秒客户端请求数 TOP5\n\nawk '{print $6}' access.log|sort|uniq -c|sort -rn|head -5\n\n\n\n4）访问最频繁IP Top5\n\nawk '{print $1}' access.log|sort |uniq -c |sort -nr |head -5\n\n\n\n5）访问最频繁的URL TOP5\n\nawk '{print $7}' access.log|sort |uniq -c |sort -nr |head -5\n\n\n\n6)响应大于5秒的URL TOP5\n\nawk '{if ($7 > 5){print $6}}' access.log|sort|uniq -c|sort -rn |head -5\n\n\n\n7)HTTP状态码(非200)统计 Top5\n\nawk '{if ($11 != 200){print $11}}' access.log|sort|uniq -c|sort -rn|head -5\n\n\n\n8)分析请求数大于50000的源IP\n\ncat access.log|awk '{print $NF}'|sort |uniq -c |sort -nr|awk '{if ($1 >50000){print $2}}'\n\n\n#### 日志分析2\n\nIP相关统计\n统计IP访问量（独立ip访问数量）\n\nawk '{print $1}' access.log | sort -n | uniq | wc -l\n\n查看某一时间段的IP访问量(4-5点)\n\ngrep \"07/Apr/2017:0[4-5]\" access.log | awk '{print $1}' | sort | uniq -c| sort -nr | wc -l  \n\n查看访问最频繁的前100个IP\n\nawk '{print $1}' access.log | sort -n |uniq -c | sort -rn | head -n 100\n\n查看访问100次以上的IP\n\nawk '{print $1}' access.log | sort -n |uniq -c |awk '{if($1 >100) print $0}'|sort -rn\n\n查询某个IP的详细访问情况,按访问频率排序\n\ngrep '127.0.01' access.log |awk '{print $7}'|sort |uniq -c |sort -rn |head -n 100\n\n页面访问统计\n\n查看访问最频的页面(TOP100)\n\nawk '{print $7}' access.log | sort |uniq -c | sort -rn | head -n 100\n\n查看访问最频的页面([排除php页面】(TOP100)\n\ngrep -v \".php\"  access.log | awk '{print $7}' | sort |uniq -c | sort -rn | head -n 100 \n\n查看页面访问次数超过100次的页面\n\ncat access.log | cut -d ' ' -f 7 | sort |uniq -c | awk '{if ($1 > 100) print $0}' | less\n\n查看最近1000条记录，访问量最高的页面\n\ntail -1000 access.log |awk '{print $7}'|sort|uniq -c|sort -nr|less\n\n每秒请求量统计\n\n统计每秒的请求数,top100的时间点(精确到秒)\n\nawk '{print $4}' access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100\n\n每分钟请求量统计\n\n统计每分钟的请求数,top100的时间点(精确到分钟)\n\nawk '{print $4}' access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100\n\n每小时请求量统计\n\n统计每小时的请求数,top100的时间点(精确到小时)\n\nawk '{print $4}' access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100\n\n性能分析\n\n在nginx log中最后一个字段加入$request_time\n\n列出传输时间超过 3 秒的页面，显示前20条\n\ncat access.log|awk '($NF > 3){print $7}'|sort -n|uniq -c|sort -nr|head -20\n\n列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条\n\ncat access.log|awk '($NF > 1 &&  $7~/\\.php/){print $7}'|sort -n|uniq -c|sort -nr|head -100\n\n蜘蛛抓取统计\n\n统计蜘蛛抓取次数\n\ngrep 'Baiduspider' access.log |wc -l\n统计蜘蛛抓取404的次数\n\ngrep 'Baiduspider' access.log |grep '404' | wc -l\n\nTCP连接统计\n\n查看当前TCP连接数\n\nnetstat -tan | grep \"ESTABLISHED\" | grep \":80\" | wc -l\n\n用tcpdump嗅探80端口的访问看看谁最高\n\ntcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F\".\" '{print $1\".\"$2\".\"$3\".\"$4}' | sort | uniq -c | sort -nr\n\n[nginx 常用命令](https://www.cnblogs.com/gouge/p/7089939.html)","source":"_posts/应用部署之nginx参数配置.md","raw":"---\ntitle: 应用部署之nginx参数配置\ndate: 2018-11-15 03:45:12\ntags: [nginx]\ncategories: deploy\ndescription: \"nginx参数调优问题\"\n---\n\n## 应用\n参考[nginx配置文件](https://github.com/muxiaobai/CourseExercises/blob/master/shell/linux/nginx.conf)\n\n### 应用请求数配置\n\n### 日志\n\n\n#### 日志参数\n\n```\n$args                    #请求中的参数值\n$query_string            #同 $args\n$arg_NAME                #GET请求中NAME的值\n$is_args                 #如果请求中有参数，值为\"?\"，否则为空字符串\n$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如\"/foo/bar.html\"。\n$document_uri            #同 $uri\n$document_root           #当前请求的文档根目录或别名\n$host                    #优先级：HTTP请求行的主机名>\"HOST\"请求头字段>符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称\n$hostname                #主机名\n$https                   #如果开启了SSL安全模式，值为\"on\"，否则为空字符串。\n$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节\n$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的\"%B\"参数保持兼容\n$bytes_sent              #传输给客户端的字节数\n$connection              #TCP连接的序列号\n$connection_requests     #TCP连接当前的请求数量\n$content_length          #\"Content-Length\" 请求头字段\n$content_type            #\"Content-Type\" 请求头字段\n$cookie_name             #cookie名称\n$limit_rate              #用于设置响应的速度限制\n$msec                    #当前的Unix时间戳\n$nginx_version           #nginx版本\n$pid                     #工作进程的PID\n$pipe                    #如果请求来自管道通信，值为\"p\"，否则为\".\"\n$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串\n$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径\n$remote_addr             #客户端地址\n$remote_port             #客户端端口\n$remote_user             #用于HTTP基础认证服务的用户名\n$request                 #代表客户端的请求地址\n$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器\n$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off\n$request_completion      #如果请求成功，值为\"OK\"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空\n$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成\n$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)\n$request_method          #HTTP请求方法，通常为\"GET\"或\"POST\"\n$request_time            #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\n$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：\"/cnphp/test.php?arg=freemouse\"\n$scheme                  #请求使用的Web协议，\"http\" 或 \"https\"\n$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中\n$server_name             #服务器名\n$server_port             #服务器端口\n$server_protocol         #服务器的HTTP版本，通常为 \"HTTP/1.0\" 或 \"HTTP/1.1\"\n$status                  #HTTP响应代码\n$time_iso8601            #服务器时间的ISO 8610格式\n$time_local              #服务器时间（LOG Format 格式）\n$cookie_NAME             #客户端请求Header头中的cookie变量，前缀\"$cookie_\"加上cookie名称的变量，该变量的值即为cookie名称的值\n$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：\"Accept-Language\"，$http_accept_language即可\n$http_cookie\n$http_host               #请求地址，即浏览器中你输入的地址（IP或域名）\n$http_referer            #url跳转来源,用来记录从那个页面链接访问过来的\n$http_user_agent         #用户终端浏览器等信息\n$http_x_forwarded_for    \n$proxy_add_x_forwarded_for;#来自http请求的：x-forword-for字段，如果没有\"X-Forwarded-For\" 请求头，则$proxy_add_x_forwarded_for等于$remote_addr。x-forwarded-for不光可以自己设置值，而且可以设置任意格式值。\n$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可\n$sent_http_cache_control\n$sent_http_connection\n$sent_http_content_type\n$sent_http_keep_alive\n$sent_http_last_modified\n$sent_http_location\n$sent_http_transfer_encoding\n\n```\n#### 日志配置\n\nerror_log\n\naccess_log \n\nlog_format access '$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent $request_body \"$http_referer\" \"$http_user_agent\" $http_x_forwarded_for';\n\n\n\n#### 日志分析\n\n1）总请求数\n\nwc -l  access.log |awk '{print $1}'\n\n\n\n2）独立IP数\n\nawk '{print $1}' access.log|sort |uniq |wc -l\n\n\n\n3）每秒客户端请求数 TOP5\n\nawk '{print $6}' access.log|sort|uniq -c|sort -rn|head -5\n\n\n\n4）访问最频繁IP Top5\n\nawk '{print $1}' access.log|sort |uniq -c |sort -nr |head -5\n\n\n\n5）访问最频繁的URL TOP5\n\nawk '{print $7}' access.log|sort |uniq -c |sort -nr |head -5\n\n\n\n6)响应大于5秒的URL TOP5\n\nawk '{if ($7 > 5){print $6}}' access.log|sort|uniq -c|sort -rn |head -5\n\n\n\n7)HTTP状态码(非200)统计 Top5\n\nawk '{if ($11 != 200){print $11}}' access.log|sort|uniq -c|sort -rn|head -5\n\n\n\n8)分析请求数大于50000的源IP\n\ncat access.log|awk '{print $NF}'|sort |uniq -c |sort -nr|awk '{if ($1 >50000){print $2}}'\n\n\n#### 日志分析2\n\nIP相关统计\n统计IP访问量（独立ip访问数量）\n\nawk '{print $1}' access.log | sort -n | uniq | wc -l\n\n查看某一时间段的IP访问量(4-5点)\n\ngrep \"07/Apr/2017:0[4-5]\" access.log | awk '{print $1}' | sort | uniq -c| sort -nr | wc -l  \n\n查看访问最频繁的前100个IP\n\nawk '{print $1}' access.log | sort -n |uniq -c | sort -rn | head -n 100\n\n查看访问100次以上的IP\n\nawk '{print $1}' access.log | sort -n |uniq -c |awk '{if($1 >100) print $0}'|sort -rn\n\n查询某个IP的详细访问情况,按访问频率排序\n\ngrep '127.0.01' access.log |awk '{print $7}'|sort |uniq -c |sort -rn |head -n 100\n\n页面访问统计\n\n查看访问最频的页面(TOP100)\n\nawk '{print $7}' access.log | sort |uniq -c | sort -rn | head -n 100\n\n查看访问最频的页面([排除php页面】(TOP100)\n\ngrep -v \".php\"  access.log | awk '{print $7}' | sort |uniq -c | sort -rn | head -n 100 \n\n查看页面访问次数超过100次的页面\n\ncat access.log | cut -d ' ' -f 7 | sort |uniq -c | awk '{if ($1 > 100) print $0}' | less\n\n查看最近1000条记录，访问量最高的页面\n\ntail -1000 access.log |awk '{print $7}'|sort|uniq -c|sort -nr|less\n\n每秒请求量统计\n\n统计每秒的请求数,top100的时间点(精确到秒)\n\nawk '{print $4}' access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100\n\n每分钟请求量统计\n\n统计每分钟的请求数,top100的时间点(精确到分钟)\n\nawk '{print $4}' access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100\n\n每小时请求量统计\n\n统计每小时的请求数,top100的时间点(精确到小时)\n\nawk '{print $4}' access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100\n\n性能分析\n\n在nginx log中最后一个字段加入$request_time\n\n列出传输时间超过 3 秒的页面，显示前20条\n\ncat access.log|awk '($NF > 3){print $7}'|sort -n|uniq -c|sort -nr|head -20\n\n列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条\n\ncat access.log|awk '($NF > 1 &&  $7~/\\.php/){print $7}'|sort -n|uniq -c|sort -nr|head -100\n\n蜘蛛抓取统计\n\n统计蜘蛛抓取次数\n\ngrep 'Baiduspider' access.log |wc -l\n统计蜘蛛抓取404的次数\n\ngrep 'Baiduspider' access.log |grep '404' | wc -l\n\nTCP连接统计\n\n查看当前TCP连接数\n\nnetstat -tan | grep \"ESTABLISHED\" | grep \":80\" | wc -l\n\n用tcpdump嗅探80端口的访问看看谁最高\n\ntcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F\".\" '{print $1\".\"$2\".\"$3\".\"$4}' | sort | uniq -c | sort -nr\n\n[nginx 常用命令](https://www.cnblogs.com/gouge/p/7089939.html)","slug":"应用部署之nginx参数配置","published":1,"updated":"2018-11-23T03:43:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79u007augv5rslhah9z","content":"<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>参考<a href=\"https://github.com/muxiaobai/CourseExercises/blob/master/shell/linux/nginx.conf\" target=\"_blank\" rel=\"noopener\">nginx配置文件</a></p>\n<h3 id=\"应用请求数配置\"><a href=\"#应用请求数配置\" class=\"headerlink\" title=\"应用请求数配置\"></a>应用请求数配置</h3><h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><h4 id=\"日志参数\"><a href=\"#日志参数\" class=\"headerlink\" title=\"日志参数\"></a>日志参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$args                    #请求中的参数值</span><br><span class=\"line\">$query_string            #同 $args</span><br><span class=\"line\">$arg_NAME                #GET请求中NAME的值</span><br><span class=\"line\">$is_args                 #如果请求中有参数，值为&quot;?&quot;，否则为空字符串</span><br><span class=\"line\">$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如&quot;/foo/bar.html&quot;。</span><br><span class=\"line\">$document_uri            #同 $uri</span><br><span class=\"line\">$document_root           #当前请求的文档根目录或别名</span><br><span class=\"line\">$host                    #优先级：HTTP请求行的主机名&gt;&quot;HOST&quot;请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</span><br><span class=\"line\">$hostname                #主机名</span><br><span class=\"line\">$https                   #如果开启了SSL安全模式，值为&quot;on&quot;，否则为空字符串。</span><br><span class=\"line\">$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节</span><br><span class=\"line\">$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的&quot;%B&quot;参数保持兼容</span><br><span class=\"line\">$bytes_sent              #传输给客户端的字节数</span><br><span class=\"line\">$connection              #TCP连接的序列号</span><br><span class=\"line\">$connection_requests     #TCP连接当前的请求数量</span><br><span class=\"line\">$content_length          #&quot;Content-Length&quot; 请求头字段</span><br><span class=\"line\">$content_type            #&quot;Content-Type&quot; 请求头字段</span><br><span class=\"line\">$cookie_name             #cookie名称</span><br><span class=\"line\">$limit_rate              #用于设置响应的速度限制</span><br><span class=\"line\">$msec                    #当前的Unix时间戳</span><br><span class=\"line\">$nginx_version           #nginx版本</span><br><span class=\"line\">$pid                     #工作进程的PID</span><br><span class=\"line\">$pipe                    #如果请求来自管道通信，值为&quot;p&quot;，否则为&quot;.&quot;</span><br><span class=\"line\">$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</span><br><span class=\"line\">$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</span><br><span class=\"line\">$remote_addr             #客户端地址</span><br><span class=\"line\">$remote_port             #客户端端口</span><br><span class=\"line\">$remote_user             #用于HTTP基础认证服务的用户名</span><br><span class=\"line\">$request                 #代表客户端的请求地址</span><br><span class=\"line\">$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</span><br><span class=\"line\">$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</span><br><span class=\"line\">$request_completion      #如果请求成功，值为&quot;OK&quot;，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</span><br><span class=\"line\">$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成</span><br><span class=\"line\">$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)</span><br><span class=\"line\">$request_method          #HTTP请求方法，通常为&quot;GET&quot;或&quot;POST&quot;</span><br><span class=\"line\">$request_time            #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</span><br><span class=\"line\">$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：&quot;/cnphp/test.php?arg=freemouse&quot;</span><br><span class=\"line\">$scheme                  #请求使用的Web协议，&quot;http&quot; 或 &quot;https&quot;</span><br><span class=\"line\">$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</span><br><span class=\"line\">$server_name             #服务器名</span><br><span class=\"line\">$server_port             #服务器端口</span><br><span class=\"line\">$server_protocol         #服务器的HTTP版本，通常为 &quot;HTTP/1.0&quot; 或 &quot;HTTP/1.1&quot;</span><br><span class=\"line\">$status                  #HTTP响应代码</span><br><span class=\"line\">$time_iso8601            #服务器时间的ISO 8610格式</span><br><span class=\"line\">$time_local              #服务器时间（LOG Format 格式）</span><br><span class=\"line\">$cookie_NAME             #客户端请求Header头中的cookie变量，前缀&quot;$cookie_&quot;加上cookie名称的变量，该变量的值即为cookie名称的值</span><br><span class=\"line\">$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：&quot;Accept-Language&quot;，$http_accept_language即可</span><br><span class=\"line\">$http_cookie</span><br><span class=\"line\">$http_host               #请求地址，即浏览器中你输入的地址（IP或域名）</span><br><span class=\"line\">$http_referer            #url跳转来源,用来记录从那个页面链接访问过来的</span><br><span class=\"line\">$http_user_agent         #用户终端浏览器等信息</span><br><span class=\"line\">$http_x_forwarded_for    </span><br><span class=\"line\">$proxy_add_x_forwarded_for;#来自http请求的：x-forword-for字段，如果没有&quot;X-Forwarded-For&quot; 请求头，则$proxy_add_x_forwarded_for等于$remote_addr。x-forwarded-for不光可以自己设置值，而且可以设置任意格式值。</span><br><span class=\"line\">$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</span><br><span class=\"line\">$sent_http_cache_control</span><br><span class=\"line\">$sent_http_connection</span><br><span class=\"line\">$sent_http_content_type</span><br><span class=\"line\">$sent_http_keep_alive</span><br><span class=\"line\">$sent_http_last_modified</span><br><span class=\"line\">$sent_http_location</span><br><span class=\"line\">$sent_http_transfer_encoding</span><br></pre></td></tr></table></figure>\n<h4 id=\"日志配置\"><a href=\"#日志配置\" class=\"headerlink\" title=\"日志配置\"></a>日志配置</h4><p>error_log</p>\n<p>access_log </p>\n<p>log_format access ‘$remote_addr - $remote_user [$time_local] “$request” $status $body_bytes_sent $request_body “$http_referer” “$http_user_agent” $http_x_forwarded_for’;</p>\n<h4 id=\"日志分析\"><a href=\"#日志分析\" class=\"headerlink\" title=\"日志分析\"></a>日志分析</h4><p>1）总请求数</p>\n<p>wc -l  access.log |awk ‘{print $1}’</p>\n<p>2）独立IP数</p>\n<p>awk ‘{print $1}’ access.log|sort |uniq |wc -l</p>\n<p>3）每秒客户端请求数 TOP5</p>\n<p>awk ‘{print $6}’ access.log|sort|uniq -c|sort -rn|head -5</p>\n<p>4）访问最频繁IP Top5</p>\n<p>awk ‘{print $1}’ access.log|sort |uniq -c |sort -nr |head -5</p>\n<p>5）访问最频繁的URL TOP5</p>\n<p>awk ‘{print $7}’ access.log|sort |uniq -c |sort -nr |head -5</p>\n<p>6)响应大于5秒的URL TOP5</p>\n<p>awk ‘{if ($7 &gt; 5){print $6}}’ access.log|sort|uniq -c|sort -rn |head -5</p>\n<p>7)HTTP状态码(非200)统计 Top5</p>\n<p>awk ‘{if ($11 != 200){print $11}}’ access.log|sort|uniq -c|sort -rn|head -5</p>\n<p>8)分析请求数大于50000的源IP</p>\n<p>cat access.log|awk ‘{print $NF}’|sort |uniq -c |sort -nr|awk ‘{if ($1 &gt;50000){print $2}}’</p>\n<h4 id=\"日志分析2\"><a href=\"#日志分析2\" class=\"headerlink\" title=\"日志分析2\"></a>日志分析2</h4><p>IP相关统计<br>统计IP访问量（独立ip访问数量）</p>\n<p>awk ‘{print $1}’ access.log | sort -n | uniq | wc -l</p>\n<p>查看某一时间段的IP访问量(4-5点)</p>\n<p>grep “07/Apr/2017:0[4-5]” access.log | awk ‘{print $1}’ | sort | uniq -c| sort -nr | wc -l  </p>\n<p>查看访问最频繁的前100个IP</p>\n<p>awk ‘{print $1}’ access.log | sort -n |uniq -c | sort -rn | head -n 100</p>\n<p>查看访问100次以上的IP</p>\n<p>awk ‘{print $1}’ access.log | sort -n |uniq -c |awk ‘{if($1 &gt;100) print $0}’|sort -rn</p>\n<p>查询某个IP的详细访问情况,按访问频率排序</p>\n<p>grep ‘127.0.01’ access.log |awk ‘{print $7}’|sort |uniq -c |sort -rn |head -n 100</p>\n<p>页面访问统计</p>\n<p>查看访问最频的页面(TOP100)</p>\n<p>awk ‘{print $7}’ access.log | sort |uniq -c | sort -rn | head -n 100</p>\n<p>查看访问最频的页面([排除php页面】(TOP100)</p>\n<p>grep -v “.php”  access.log | awk ‘{print $7}’ | sort |uniq -c | sort -rn | head -n 100 </p>\n<p>查看页面访问次数超过100次的页面</p>\n<p>cat access.log | cut -d ‘ ‘ -f 7 | sort |uniq -c | awk ‘{if ($1 &gt; 100) print $0}’ | less</p>\n<p>查看最近1000条记录，访问量最高的页面</p>\n<p>tail -1000 access.log |awk ‘{print $7}’|sort|uniq -c|sort -nr|less</p>\n<p>每秒请求量统计</p>\n<p>统计每秒的请求数,top100的时间点(精确到秒)</p>\n<p>awk ‘{print $4}’ access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100</p>\n<p>每分钟请求量统计</p>\n<p>统计每分钟的请求数,top100的时间点(精确到分钟)</p>\n<p>awk ‘{print $4}’ access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100</p>\n<p>每小时请求量统计</p>\n<p>统计每小时的请求数,top100的时间点(精确到小时)</p>\n<p>awk ‘{print $4}’ access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100</p>\n<p>性能分析</p>\n<p>在nginx log中最后一个字段加入$request_time</p>\n<p>列出传输时间超过 3 秒的页面，显示前20条</p>\n<p>cat access.log|awk ‘($NF &gt; 3){print $7}’|sort -n|uniq -c|sort -nr|head -20</p>\n<p>列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条</p>\n<p>cat access.log|awk ‘($NF &gt; 1 &amp;&amp;  $7~/.php/){print $7}’|sort -n|uniq -c|sort -nr|head -100</p>\n<p>蜘蛛抓取统计</p>\n<p>统计蜘蛛抓取次数</p>\n<p>grep ‘Baiduspider’ access.log |wc -l<br>统计蜘蛛抓取404的次数</p>\n<p>grep ‘Baiduspider’ access.log |grep ‘404’ | wc -l</p>\n<p>TCP连接统计</p>\n<p>查看当前TCP连接数</p>\n<p>netstat -tan | grep “ESTABLISHED” | grep “:80” | wc -l</p>\n<p>用tcpdump嗅探80端口的访问看看谁最高</p>\n<p>tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F”.” ‘{print $1”.”$2”.”$3”.”$4}’ | sort | uniq -c | sort -nr</p>\n<p><a href=\"https://www.cnblogs.com/gouge/p/7089939.html\" target=\"_blank\" rel=\"noopener\">nginx 常用命令</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>参考<a href=\"https://github.com/muxiaobai/CourseExercises/blob/master/shell/linux/nginx.conf\" target=\"_blank\" rel=\"noopener\">nginx配置文件</a></p>\n<h3 id=\"应用请求数配置\"><a href=\"#应用请求数配置\" class=\"headerlink\" title=\"应用请求数配置\"></a>应用请求数配置</h3><h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><h4 id=\"日志参数\"><a href=\"#日志参数\" class=\"headerlink\" title=\"日志参数\"></a>日志参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$args                    #请求中的参数值</span><br><span class=\"line\">$query_string            #同 $args</span><br><span class=\"line\">$arg_NAME                #GET请求中NAME的值</span><br><span class=\"line\">$is_args                 #如果请求中有参数，值为&quot;?&quot;，否则为空字符串</span><br><span class=\"line\">$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如&quot;/foo/bar.html&quot;。</span><br><span class=\"line\">$document_uri            #同 $uri</span><br><span class=\"line\">$document_root           #当前请求的文档根目录或别名</span><br><span class=\"line\">$host                    #优先级：HTTP请求行的主机名&gt;&quot;HOST&quot;请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</span><br><span class=\"line\">$hostname                #主机名</span><br><span class=\"line\">$https                   #如果开启了SSL安全模式，值为&quot;on&quot;，否则为空字符串。</span><br><span class=\"line\">$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节</span><br><span class=\"line\">$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的&quot;%B&quot;参数保持兼容</span><br><span class=\"line\">$bytes_sent              #传输给客户端的字节数</span><br><span class=\"line\">$connection              #TCP连接的序列号</span><br><span class=\"line\">$connection_requests     #TCP连接当前的请求数量</span><br><span class=\"line\">$content_length          #&quot;Content-Length&quot; 请求头字段</span><br><span class=\"line\">$content_type            #&quot;Content-Type&quot; 请求头字段</span><br><span class=\"line\">$cookie_name             #cookie名称</span><br><span class=\"line\">$limit_rate              #用于设置响应的速度限制</span><br><span class=\"line\">$msec                    #当前的Unix时间戳</span><br><span class=\"line\">$nginx_version           #nginx版本</span><br><span class=\"line\">$pid                     #工作进程的PID</span><br><span class=\"line\">$pipe                    #如果请求来自管道通信，值为&quot;p&quot;，否则为&quot;.&quot;</span><br><span class=\"line\">$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</span><br><span class=\"line\">$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</span><br><span class=\"line\">$remote_addr             #客户端地址</span><br><span class=\"line\">$remote_port             #客户端端口</span><br><span class=\"line\">$remote_user             #用于HTTP基础认证服务的用户名</span><br><span class=\"line\">$request                 #代表客户端的请求地址</span><br><span class=\"line\">$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</span><br><span class=\"line\">$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</span><br><span class=\"line\">$request_completion      #如果请求成功，值为&quot;OK&quot;，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</span><br><span class=\"line\">$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成</span><br><span class=\"line\">$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)</span><br><span class=\"line\">$request_method          #HTTP请求方法，通常为&quot;GET&quot;或&quot;POST&quot;</span><br><span class=\"line\">$request_time            #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</span><br><span class=\"line\">$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：&quot;/cnphp/test.php?arg=freemouse&quot;</span><br><span class=\"line\">$scheme                  #请求使用的Web协议，&quot;http&quot; 或 &quot;https&quot;</span><br><span class=\"line\">$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</span><br><span class=\"line\">$server_name             #服务器名</span><br><span class=\"line\">$server_port             #服务器端口</span><br><span class=\"line\">$server_protocol         #服务器的HTTP版本，通常为 &quot;HTTP/1.0&quot; 或 &quot;HTTP/1.1&quot;</span><br><span class=\"line\">$status                  #HTTP响应代码</span><br><span class=\"line\">$time_iso8601            #服务器时间的ISO 8610格式</span><br><span class=\"line\">$time_local              #服务器时间（LOG Format 格式）</span><br><span class=\"line\">$cookie_NAME             #客户端请求Header头中的cookie变量，前缀&quot;$cookie_&quot;加上cookie名称的变量，该变量的值即为cookie名称的值</span><br><span class=\"line\">$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：&quot;Accept-Language&quot;，$http_accept_language即可</span><br><span class=\"line\">$http_cookie</span><br><span class=\"line\">$http_host               #请求地址，即浏览器中你输入的地址（IP或域名）</span><br><span class=\"line\">$http_referer            #url跳转来源,用来记录从那个页面链接访问过来的</span><br><span class=\"line\">$http_user_agent         #用户终端浏览器等信息</span><br><span class=\"line\">$http_x_forwarded_for    </span><br><span class=\"line\">$proxy_add_x_forwarded_for;#来自http请求的：x-forword-for字段，如果没有&quot;X-Forwarded-For&quot; 请求头，则$proxy_add_x_forwarded_for等于$remote_addr。x-forwarded-for不光可以自己设置值，而且可以设置任意格式值。</span><br><span class=\"line\">$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</span><br><span class=\"line\">$sent_http_cache_control</span><br><span class=\"line\">$sent_http_connection</span><br><span class=\"line\">$sent_http_content_type</span><br><span class=\"line\">$sent_http_keep_alive</span><br><span class=\"line\">$sent_http_last_modified</span><br><span class=\"line\">$sent_http_location</span><br><span class=\"line\">$sent_http_transfer_encoding</span><br></pre></td></tr></table></figure>\n<h4 id=\"日志配置\"><a href=\"#日志配置\" class=\"headerlink\" title=\"日志配置\"></a>日志配置</h4><p>error_log</p>\n<p>access_log </p>\n<p>log_format access ‘$remote_addr - $remote_user [$time_local] “$request” $status $body_bytes_sent $request_body “$http_referer” “$http_user_agent” $http_x_forwarded_for’;</p>\n<h4 id=\"日志分析\"><a href=\"#日志分析\" class=\"headerlink\" title=\"日志分析\"></a>日志分析</h4><p>1）总请求数</p>\n<p>wc -l  access.log |awk ‘{print $1}’</p>\n<p>2）独立IP数</p>\n<p>awk ‘{print $1}’ access.log|sort |uniq |wc -l</p>\n<p>3）每秒客户端请求数 TOP5</p>\n<p>awk ‘{print $6}’ access.log|sort|uniq -c|sort -rn|head -5</p>\n<p>4）访问最频繁IP Top5</p>\n<p>awk ‘{print $1}’ access.log|sort |uniq -c |sort -nr |head -5</p>\n<p>5）访问最频繁的URL TOP5</p>\n<p>awk ‘{print $7}’ access.log|sort |uniq -c |sort -nr |head -5</p>\n<p>6)响应大于5秒的URL TOP5</p>\n<p>awk ‘{if ($7 &gt; 5){print $6}}’ access.log|sort|uniq -c|sort -rn |head -5</p>\n<p>7)HTTP状态码(非200)统计 Top5</p>\n<p>awk ‘{if ($11 != 200){print $11}}’ access.log|sort|uniq -c|sort -rn|head -5</p>\n<p>8)分析请求数大于50000的源IP</p>\n<p>cat access.log|awk ‘{print $NF}’|sort |uniq -c |sort -nr|awk ‘{if ($1 &gt;50000){print $2}}’</p>\n<h4 id=\"日志分析2\"><a href=\"#日志分析2\" class=\"headerlink\" title=\"日志分析2\"></a>日志分析2</h4><p>IP相关统计<br>统计IP访问量（独立ip访问数量）</p>\n<p>awk ‘{print $1}’ access.log | sort -n | uniq | wc -l</p>\n<p>查看某一时间段的IP访问量(4-5点)</p>\n<p>grep “07/Apr/2017:0[4-5]” access.log | awk ‘{print $1}’ | sort | uniq -c| sort -nr | wc -l  </p>\n<p>查看访问最频繁的前100个IP</p>\n<p>awk ‘{print $1}’ access.log | sort -n |uniq -c | sort -rn | head -n 100</p>\n<p>查看访问100次以上的IP</p>\n<p>awk ‘{print $1}’ access.log | sort -n |uniq -c |awk ‘{if($1 &gt;100) print $0}’|sort -rn</p>\n<p>查询某个IP的详细访问情况,按访问频率排序</p>\n<p>grep ‘127.0.01’ access.log |awk ‘{print $7}’|sort |uniq -c |sort -rn |head -n 100</p>\n<p>页面访问统计</p>\n<p>查看访问最频的页面(TOP100)</p>\n<p>awk ‘{print $7}’ access.log | sort |uniq -c | sort -rn | head -n 100</p>\n<p>查看访问最频的页面([排除php页面】(TOP100)</p>\n<p>grep -v “.php”  access.log | awk ‘{print $7}’ | sort |uniq -c | sort -rn | head -n 100 </p>\n<p>查看页面访问次数超过100次的页面</p>\n<p>cat access.log | cut -d ‘ ‘ -f 7 | sort |uniq -c | awk ‘{if ($1 &gt; 100) print $0}’ | less</p>\n<p>查看最近1000条记录，访问量最高的页面</p>\n<p>tail -1000 access.log |awk ‘{print $7}’|sort|uniq -c|sort -nr|less</p>\n<p>每秒请求量统计</p>\n<p>统计每秒的请求数,top100的时间点(精确到秒)</p>\n<p>awk ‘{print $4}’ access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100</p>\n<p>每分钟请求量统计</p>\n<p>统计每分钟的请求数,top100的时间点(精确到分钟)</p>\n<p>awk ‘{print $4}’ access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100</p>\n<p>每小时请求量统计</p>\n<p>统计每小时的请求数,top100的时间点(精确到小时)</p>\n<p>awk ‘{print $4}’ access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100</p>\n<p>性能分析</p>\n<p>在nginx log中最后一个字段加入$request_time</p>\n<p>列出传输时间超过 3 秒的页面，显示前20条</p>\n<p>cat access.log|awk ‘($NF &gt; 3){print $7}’|sort -n|uniq -c|sort -nr|head -20</p>\n<p>列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条</p>\n<p>cat access.log|awk ‘($NF &gt; 1 &amp;&amp;  $7~/.php/){print $7}’|sort -n|uniq -c|sort -nr|head -100</p>\n<p>蜘蛛抓取统计</p>\n<p>统计蜘蛛抓取次数</p>\n<p>grep ‘Baiduspider’ access.log |wc -l<br>统计蜘蛛抓取404的次数</p>\n<p>grep ‘Baiduspider’ access.log |grep ‘404’ | wc -l</p>\n<p>TCP连接统计</p>\n<p>查看当前TCP连接数</p>\n<p>netstat -tan | grep “ESTABLISHED” | grep “:80” | wc -l</p>\n<p>用tcpdump嗅探80端口的访问看看谁最高</p>\n<p>tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F”.” ‘{print $1”.”$2”.”$3”.”$4}’ | sort | uniq -c | sort -nr</p>\n<p><a href=\"https://www.cnblogs.com/gouge/p/7089939.html\" target=\"_blank\" rel=\"noopener\">nginx 常用命令</a></p>\n"},{"title":"数据库操作语句2","date":"2018-09-04T02:13:53.000Z","description":"写一些常用的SQL语句，高级操作,备份，查外键，Session 锁等，Oracle非常规操作","_content":"\n\n常用的SQL语句，汇总，以便之后查阅。\n<!--more-->\n## 备份\n\n#### MongoDB 备份\n\n\n备份生产数据：\t\n> /db/mongodb-3.4.7/bin/mongodump -h 127.0.0.1:9430 -d daochufilename -o  /db/mongodb-3.4.7/data/mongo_bak/180414  \n\n删除老数据:\n\n> 进入测试mongdb:       ./mongo 127.0.0.1:9430\t\n查看所有的库:           show dbs  \t\t\t\t\n选择待删除的库:         use  databaseName \t\n删除当前库:             db.dropDatabase()\t\t\n退出:                   exit\t\t\t\t\t\n         \n导入数据\n\n> /db/mongodb-3.4.7/bin/mongorestore --host=127.0.0.1 --port 9430 --db databasename\t /db/mongodb-3.4.7/data/mongo_bak/180414/daochufilename\n\n#### Oracle 备份\n\n\n11G 导出， 没有数据的表无法导出\n\n##### 共有多少张表:\n- select count(1) from  user_tables ;\n- select 'drop table '||table_name||' cascade constraints;' from user_tables;  \n- select 'drop trigger ' || trigger_name || ';'  from user_triggers;  \n- select 'drop sequence ' || sequence_name || ';'  from user_sequences;  \n\n1、先查询一下当前用户下的所有空表\n\nselect table_name from user_tables where NUM_ROWS=0;\n\n2、用以下这句查找空表 \n```\nselect 'alter table '||table_name||' allocate extent;' \nfrom user_tables where num_rows = 0 ;\n```\n或者\n```\nselect ‘alter table ‘||table_name||’ allocate extent;’ \nfrom user_tables where num_rows=0;\n```\nalter table table_name allocate extent;\n\n原因:\n\nOracle 11G 出现EXP-00003: 未找到段 (0,0) 的存储定义\noracle 11g数据库表中没有数据在导出数据的时候会遇到的问题，alter system set deferred_segment_creation=false; 该参数意思是当创建对象（如表），初始没有数据，是否立即创建segment。默认是true。这会导致在exp时，没有segment的对象不会导出。\n但此命令只对以后的表有效，之前的表没有Segment的还是没有。可以创建表的时候声明立即创建Segment ，create table XXX (XXX  XXX) SEGMENT CREATION IMMEDIATE;\n对于已经创建但是还没有Segment的表来说，可以执行alter table TabelName allocate extent来使其创建出Segment,当然也可以插入一条数据，使其创建Segment .\n解决方法：\n1、先查询一下当前用户下的所有空表\nselect table_name from user_tables where NUM_ROWS=0;\n2、用以下这句查找空表\nselect 'alter table '||table_name||' allocate extent;' from user_tables where num_rows=0 ;\n3、把查询结果导出，执行导出的语句 如：\nalter table table_name allocate extent;\n\n\nexp username/password@192.168.5.214/ORCL file=d:\\daochu.dmp FULL=y\n\nexp XNJD20171225/12345678@192.168.2.240/ORCL file=d:\\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容\n\nexp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据\n\n导入数据库\n\nimp username/password@192.168.5.214/ORCL tablespaces=xxx fromuser=cccccc touser=zzzzz file=D:\\daoru.dmp FULL=y\n\n导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分\n\nexp_dir=/fo\n\n#### 管理员\n\nsqlplus / as sysdba\n\nsqlplus /nolog\nconn  username/password as sysdba \n\n#### 设置directory\n\n--查路径\nselect * from dba_directories;\n```\nSYS                EXP_IMP_DATA\n/opt/oracle/oradata/forp/db_bakup\n```\n\ncreate or replace  directory dmp_dir as '/data/testdata/';\n\ngrant read,write on directory dmp_dir to username;\n\n\n[设置directory文件路径](https://blog.csdn.net/eason_oracle/article/details/77101563)\n- 0. su - oracle\n- 1.导出生产库 oracle数据\n\t>进入127.0.0.1服务器   \n\t导出：\texpdp TEST1/PITAYA_7Na1 file=/20180922.dmp directory=exp_dir schemas=TEST1;\n\n- 2.导入Oracle数据到测试库\n\t>\timpdp TEST/PITAYA_7Na1_TEST file=/20180922.dmp directory=exp_dir REMAP_SCHEMA=TEST1:TEST; \n\t\n\n## 设置plsql的快捷方式\n\n\nsqlplus TEST/PITAYA_7Na1_TEST@orcl\n\n打开PL/SQL，在Tools->Perferences->Editor中Autoreplaces选择配置的short.txt文件 ,然后重启一下\n\n```\ns = select * from \nw = where \nsf = select t.*, t.rowid from  \nsc = select count(1) from \nd = delete from \n\n```\n\n## 查询外键\n\n```\nselect a.constraint_name, a.table_name, b.constraint_name  from user_constraints a, user_constraints b\nwhere a.constraint_type = 'R' and b.constraint_type = 'P'  and a.r_constraint_name = b.constraint_name\nand a.constraint_name = 'FK_CRM_7'\n```\n\n## 锁表\n\n查询锁表的对象\n\n这个两个sql都是要在具有dba权限的用户下执行的。\n\n```\nselect t2.username,\n       t2.sid,\n       t2.serial#,\n       t3.object_name,\n       t2.OSUSER,\n       t2.MACHINE,\n       t2.PROGRAM,\n       t2.LOGON_TIME,\n       t2.COMMAND,\n       t2.LOCKWAIT,\n       t2.SADDR,\n       t2.PADDR,\n       t2.TADDR,\n       t2.SQL_ADDRESS,\n       t1.LOCKED_MODE\n  from v$locked_object t1, v$session t2, dba_objects t3\n where t1.session_id = t2.sid\n   and t1.object_id = t3.object_id\n order by t2.logon_time;\n\n```\nkill 锁表操作   \n\n```\nALTER system KILL session 'SID,serial#'; \n```\n\n锁的级别\n\nv$locked_object中的LOCKED_MODE字段表示锁的模式，oracle中锁的模式有如下几种: \n0：none \n1：null 空 \n2：Row-S 行共享(RS)：共享表锁，sub share \n3：Row-X 行独占(RX)：用于行的修改，sub exclusive \n4：Share 共享锁(S)：阻止其他DML操作，share \n5：S/Row-X 共享行独占(SRX)：阻止其他事务操作，share/sub exclusive \n6：exclusive 独占(X)：独立访问使用，exclusive\n\n数字越大锁级别越高, 影响的操作越多。\n\n1级锁有：Select，有时会在v$locked_object出现。 \n2级锁有：Select for update,Lock For Update,Lock Row Share \nselect for update当对话使用for update子串打开一个游标时，所有返回集中的数据行都将处于行级(Row-X)独占式锁定，其他对象只能查询这些数据行，不能进行update、delete或select for update操作。 \n3级锁有：Insert, Update, Delete, Lock Row Exclusive \n没有commit之前插入同样的一条记录会没有反应, 因为后一个3的锁会一直等待上一个3的锁, 我们必须释放掉上一个才能继续工作。 \n4级锁有：Create Index, Lock Share \nlocked_mode为2,3,4不影响DML(insert,delete,update,select)操作, 但DDL(alter,drop等)操作会提示ora-00054错误。 \n00054, 00000, “resource busy and acquire with NOWAIT specified” \n// *Cause: Resource interested is busy. \n// *Action: Retry if necessary. \n5级锁有：Lock Share Row Exclusive \n具体来讲有主外键约束时update / delete … ; 可能会产生4,5的锁。 \n6级锁有：Alter table, Drop table, Drop Index, Truncate table, Lock Exclusive\n\n---------------------\n\n\n查某session 正在执行的sql语句，从而可以快速定位到哪些操作或者代码导致事务一直进行没有结束等.\n\n```\nSELECT /*+ ORDERED */ \n sql_text\n  FROM v$sqltext a\n WHERE (a.hash_value, a.address) IN\n       (SELECT DECODE(sql_hash_value, 0, prev_hash_value, sql_hash_value),\n               DECODE(sql_hash_value, 0, prev_sql_addr, sql_address)\n          FROM v$session b\n         WHERE b.sid = '67')  /* 此处67 为SID*/\n ORDER BY piece ASC;\n```\n---------------------\n\n\nplsql 工具   Tools ----->Sessions---------> 查看\n\n#### 数据库比对工具\n\nplsql Tools ---------->Compare User Objects 选择另外一个库\n#### Oracle 数据库表、字段级别，\n\nselect * from  user_tables  t;--所有表\nselect * from all_tab_columns  t;--系统\nselect * from ALL_TAB_COLS t;--系统表\nselect * from cols t;--字段\nselect * from USER_TAB_COLS t;--用户字段\nselect * from user_tab_comments  t--所有表字段\nselect * from user_col_comments t;--所有表注释\n\nSELECT INSTANCE_NAME FROM V$INSTANCE; --查询sid s_name\n\n#### Oracle 方法等\n\n- t.createdate < to_date('2018-09-01','yyyy-mm-dd hh24:mi:ss') 创建时间小于2018-09-01 \n- to_char( t.CreateDate,'yyyyMMdd')=to_char(sysdate,'yyyyMMdd')  当天，类似当月yyyyMM当年yyyy\n- case f.state when 0 then '第壹' when 2 then '第贰' when 3 then '第叁' else null end as 状态,\n- 逗号存ID，查询\t\"\tINSTR((SELECT ','||(deptId)||',' FROM Pop_Dept_DutyPeo WHERE userId=? AND grade=1 GROUP BY userId), ','||prj.FK_DeptID||',') > 0 \"\n- 列传行 select listagg(to_char(b.id),',') within group(order by b.orderId)\n","source":"_posts/数据库操作语句2.md","raw":"---\ntitle: 数据库操作语句2\ndate: 2018-09-04 10:13:53\ntags: [常用代码]\ncategories: [SQL,数据库]\ndescription: \"写一些常用的SQL语句，高级操作,备份，查外键，Session 锁等，Oracle非常规操作\"\n---\n\n\n常用的SQL语句，汇总，以便之后查阅。\n<!--more-->\n## 备份\n\n#### MongoDB 备份\n\n\n备份生产数据：\t\n> /db/mongodb-3.4.7/bin/mongodump -h 127.0.0.1:9430 -d daochufilename -o  /db/mongodb-3.4.7/data/mongo_bak/180414  \n\n删除老数据:\n\n> 进入测试mongdb:       ./mongo 127.0.0.1:9430\t\n查看所有的库:           show dbs  \t\t\t\t\n选择待删除的库:         use  databaseName \t\n删除当前库:             db.dropDatabase()\t\t\n退出:                   exit\t\t\t\t\t\n         \n导入数据\n\n> /db/mongodb-3.4.7/bin/mongorestore --host=127.0.0.1 --port 9430 --db databasename\t /db/mongodb-3.4.7/data/mongo_bak/180414/daochufilename\n\n#### Oracle 备份\n\n\n11G 导出， 没有数据的表无法导出\n\n##### 共有多少张表:\n- select count(1) from  user_tables ;\n- select 'drop table '||table_name||' cascade constraints;' from user_tables;  \n- select 'drop trigger ' || trigger_name || ';'  from user_triggers;  \n- select 'drop sequence ' || sequence_name || ';'  from user_sequences;  \n\n1、先查询一下当前用户下的所有空表\n\nselect table_name from user_tables where NUM_ROWS=0;\n\n2、用以下这句查找空表 \n```\nselect 'alter table '||table_name||' allocate extent;' \nfrom user_tables where num_rows = 0 ;\n```\n或者\n```\nselect ‘alter table ‘||table_name||’ allocate extent;’ \nfrom user_tables where num_rows=0;\n```\nalter table table_name allocate extent;\n\n原因:\n\nOracle 11G 出现EXP-00003: 未找到段 (0,0) 的存储定义\noracle 11g数据库表中没有数据在导出数据的时候会遇到的问题，alter system set deferred_segment_creation=false; 该参数意思是当创建对象（如表），初始没有数据，是否立即创建segment。默认是true。这会导致在exp时，没有segment的对象不会导出。\n但此命令只对以后的表有效，之前的表没有Segment的还是没有。可以创建表的时候声明立即创建Segment ，create table XXX (XXX  XXX) SEGMENT CREATION IMMEDIATE;\n对于已经创建但是还没有Segment的表来说，可以执行alter table TabelName allocate extent来使其创建出Segment,当然也可以插入一条数据，使其创建Segment .\n解决方法：\n1、先查询一下当前用户下的所有空表\nselect table_name from user_tables where NUM_ROWS=0;\n2、用以下这句查找空表\nselect 'alter table '||table_name||' allocate extent;' from user_tables where num_rows=0 ;\n3、把查询结果导出，执行导出的语句 如：\nalter table table_name allocate extent;\n\n\nexp username/password@192.168.5.214/ORCL file=d:\\daochu.dmp FULL=y\n\nexp XNJD20171225/12345678@192.168.2.240/ORCL file=d:\\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容\n\nexp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据\n\n导入数据库\n\nimp username/password@192.168.5.214/ORCL tablespaces=xxx fromuser=cccccc touser=zzzzz file=D:\\daoru.dmp FULL=y\n\n导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分\n\nexp_dir=/fo\n\n#### 管理员\n\nsqlplus / as sysdba\n\nsqlplus /nolog\nconn  username/password as sysdba \n\n#### 设置directory\n\n--查路径\nselect * from dba_directories;\n```\nSYS                EXP_IMP_DATA\n/opt/oracle/oradata/forp/db_bakup\n```\n\ncreate or replace  directory dmp_dir as '/data/testdata/';\n\ngrant read,write on directory dmp_dir to username;\n\n\n[设置directory文件路径](https://blog.csdn.net/eason_oracle/article/details/77101563)\n- 0. su - oracle\n- 1.导出生产库 oracle数据\n\t>进入127.0.0.1服务器   \n\t导出：\texpdp TEST1/PITAYA_7Na1 file=/20180922.dmp directory=exp_dir schemas=TEST1;\n\n- 2.导入Oracle数据到测试库\n\t>\timpdp TEST/PITAYA_7Na1_TEST file=/20180922.dmp directory=exp_dir REMAP_SCHEMA=TEST1:TEST; \n\t\n\n## 设置plsql的快捷方式\n\n\nsqlplus TEST/PITAYA_7Na1_TEST@orcl\n\n打开PL/SQL，在Tools->Perferences->Editor中Autoreplaces选择配置的short.txt文件 ,然后重启一下\n\n```\ns = select * from \nw = where \nsf = select t.*, t.rowid from  \nsc = select count(1) from \nd = delete from \n\n```\n\n## 查询外键\n\n```\nselect a.constraint_name, a.table_name, b.constraint_name  from user_constraints a, user_constraints b\nwhere a.constraint_type = 'R' and b.constraint_type = 'P'  and a.r_constraint_name = b.constraint_name\nand a.constraint_name = 'FK_CRM_7'\n```\n\n## 锁表\n\n查询锁表的对象\n\n这个两个sql都是要在具有dba权限的用户下执行的。\n\n```\nselect t2.username,\n       t2.sid,\n       t2.serial#,\n       t3.object_name,\n       t2.OSUSER,\n       t2.MACHINE,\n       t2.PROGRAM,\n       t2.LOGON_TIME,\n       t2.COMMAND,\n       t2.LOCKWAIT,\n       t2.SADDR,\n       t2.PADDR,\n       t2.TADDR,\n       t2.SQL_ADDRESS,\n       t1.LOCKED_MODE\n  from v$locked_object t1, v$session t2, dba_objects t3\n where t1.session_id = t2.sid\n   and t1.object_id = t3.object_id\n order by t2.logon_time;\n\n```\nkill 锁表操作   \n\n```\nALTER system KILL session 'SID,serial#'; \n```\n\n锁的级别\n\nv$locked_object中的LOCKED_MODE字段表示锁的模式，oracle中锁的模式有如下几种: \n0：none \n1：null 空 \n2：Row-S 行共享(RS)：共享表锁，sub share \n3：Row-X 行独占(RX)：用于行的修改，sub exclusive \n4：Share 共享锁(S)：阻止其他DML操作，share \n5：S/Row-X 共享行独占(SRX)：阻止其他事务操作，share/sub exclusive \n6：exclusive 独占(X)：独立访问使用，exclusive\n\n数字越大锁级别越高, 影响的操作越多。\n\n1级锁有：Select，有时会在v$locked_object出现。 \n2级锁有：Select for update,Lock For Update,Lock Row Share \nselect for update当对话使用for update子串打开一个游标时，所有返回集中的数据行都将处于行级(Row-X)独占式锁定，其他对象只能查询这些数据行，不能进行update、delete或select for update操作。 \n3级锁有：Insert, Update, Delete, Lock Row Exclusive \n没有commit之前插入同样的一条记录会没有反应, 因为后一个3的锁会一直等待上一个3的锁, 我们必须释放掉上一个才能继续工作。 \n4级锁有：Create Index, Lock Share \nlocked_mode为2,3,4不影响DML(insert,delete,update,select)操作, 但DDL(alter,drop等)操作会提示ora-00054错误。 \n00054, 00000, “resource busy and acquire with NOWAIT specified” \n// *Cause: Resource interested is busy. \n// *Action: Retry if necessary. \n5级锁有：Lock Share Row Exclusive \n具体来讲有主外键约束时update / delete … ; 可能会产生4,5的锁。 \n6级锁有：Alter table, Drop table, Drop Index, Truncate table, Lock Exclusive\n\n---------------------\n\n\n查某session 正在执行的sql语句，从而可以快速定位到哪些操作或者代码导致事务一直进行没有结束等.\n\n```\nSELECT /*+ ORDERED */ \n sql_text\n  FROM v$sqltext a\n WHERE (a.hash_value, a.address) IN\n       (SELECT DECODE(sql_hash_value, 0, prev_hash_value, sql_hash_value),\n               DECODE(sql_hash_value, 0, prev_sql_addr, sql_address)\n          FROM v$session b\n         WHERE b.sid = '67')  /* 此处67 为SID*/\n ORDER BY piece ASC;\n```\n---------------------\n\n\nplsql 工具   Tools ----->Sessions---------> 查看\n\n#### 数据库比对工具\n\nplsql Tools ---------->Compare User Objects 选择另外一个库\n#### Oracle 数据库表、字段级别，\n\nselect * from  user_tables  t;--所有表\nselect * from all_tab_columns  t;--系统\nselect * from ALL_TAB_COLS t;--系统表\nselect * from cols t;--字段\nselect * from USER_TAB_COLS t;--用户字段\nselect * from user_tab_comments  t--所有表字段\nselect * from user_col_comments t;--所有表注释\n\nSELECT INSTANCE_NAME FROM V$INSTANCE; --查询sid s_name\n\n#### Oracle 方法等\n\n- t.createdate < to_date('2018-09-01','yyyy-mm-dd hh24:mi:ss') 创建时间小于2018-09-01 \n- to_char( t.CreateDate,'yyyyMMdd')=to_char(sysdate,'yyyyMMdd')  当天，类似当月yyyyMM当年yyyy\n- case f.state when 0 then '第壹' when 2 then '第贰' when 3 then '第叁' else null end as 状态,\n- 逗号存ID，查询\t\"\tINSTR((SELECT ','||(deptId)||',' FROM Pop_Dept_DutyPeo WHERE userId=? AND grade=1 GROUP BY userId), ','||prj.FK_DeptID||',') > 0 \"\n- 列传行 select listagg(to_char(b.id),',') within group(order by b.orderId)\n","slug":"数据库操作语句2","published":1,"updated":"2019-04-10T08:24:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79v007eugv5ovem7ta8","content":"<p>常用的SQL语句，汇总，以便之后查阅。<br><a id=\"more\"></a></p>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><h4 id=\"MongoDB-备份\"><a href=\"#MongoDB-备份\" class=\"headerlink\" title=\"MongoDB 备份\"></a>MongoDB 备份</h4><p>备份生产数据：    </p>\n<blockquote>\n<p>/db/mongodb-3.4.7/bin/mongodump -h 127.0.0.1:9430 -d daochufilename -o  /db/mongodb-3.4.7/data/mongo_bak/180414  </p>\n</blockquote>\n<p>删除老数据:</p>\n<blockquote>\n<p>进入测试mongdb:       ./mongo 127.0.0.1:9430<br>查看所有的库:           show dbs<br>选择待删除的库:         use  databaseName<br>删除当前库:             db.dropDatabase()<br>退出:                   exit                    </p>\n</blockquote>\n<p>导入数据</p>\n<blockquote>\n<p>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 –port 9430 –db databasename     /db/mongodb-3.4.7/data/mongo_bak/180414/daochufilename</p>\n</blockquote>\n<h4 id=\"Oracle-备份\"><a href=\"#Oracle-备份\" class=\"headerlink\" title=\"Oracle 备份\"></a>Oracle 备份</h4><p>11G 导出， 没有数据的表无法导出</p>\n<h5 id=\"共有多少张表\"><a href=\"#共有多少张表\" class=\"headerlink\" title=\"共有多少张表:\"></a>共有多少张表:</h5><ul>\n<li>select count(1) from  user_tables ;</li>\n<li>select ‘drop table ‘||table_name||’ cascade constraints;’ from user_tables;  </li>\n<li>select ‘drop trigger ‘ || trigger_name || ‘;’  from user_triggers;  </li>\n<li>select ‘drop sequence ‘ || sequence_name || ‘;’  from user_sequences;  </li>\n</ul>\n<p>1、先查询一下当前用户下的所有空表</p>\n<p>select table_name from user_tables where NUM_ROWS=0;</p>\n<p>2、用以下这句查找空表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &apos;alter table &apos;||table_name||&apos; allocate extent;&apos; </span><br><span class=\"line\">from user_tables where num_rows = 0 ;</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ‘alter table ‘||table_name||’ allocate extent;’ </span><br><span class=\"line\">from user_tables where num_rows=0;</span><br></pre></td></tr></table></figure></p>\n<p>alter table table_name allocate extent;</p>\n<p>原因:</p>\n<p>Oracle 11G 出现EXP-00003: 未找到段 (0,0) 的存储定义<br>oracle 11g数据库表中没有数据在导出数据的时候会遇到的问题，alter system set deferred_segment_creation=false; 该参数意思是当创建对象（如表），初始没有数据，是否立即创建segment。默认是true。这会导致在exp时，没有segment的对象不会导出。<br>但此命令只对以后的表有效，之前的表没有Segment的还是没有。可以创建表的时候声明立即创建Segment ，create table XXX (XXX  XXX) SEGMENT CREATION IMMEDIATE;<br>对于已经创建但是还没有Segment的表来说，可以执行alter table TabelName allocate extent来使其创建出Segment,当然也可以插入一条数据，使其创建Segment .<br>解决方法：<br>1、先查询一下当前用户下的所有空表<br>select table_name from user_tables where NUM_ROWS=0;<br>2、用以下这句查找空表<br>select ‘alter table ‘||table_name||’ allocate extent;’ from user_tables where num_rows=0 ;<br>3、把查询结果导出，执行导出的语句 如：<br>alter table table_name allocate extent;</p>\n<p>exp <a href=\"mailto:username/password@192.168.5.214\" target=\"_blank\" rel=\"noopener\">username/password@192.168.5.214</a>/ORCL file=d:\\daochu.dmp FULL=y</p>\n<p>exp <a href=\"mailto:XNJD20171225/12345678@192.168.2.240\" target=\"_blank\" rel=\"noopener\">XNJD20171225/12345678@192.168.2.240</a>/ORCL file=d:\\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容</p>\n<p>exp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据</p>\n<p>导入数据库</p>\n<p>imp <a href=\"mailto:username/password@192.168.5.214\" target=\"_blank\" rel=\"noopener\">username/password@192.168.5.214</a>/ORCL tablespaces=xxx fromuser=cccccc touser=zzzzz file=D:\\daoru.dmp FULL=y</p>\n<p>导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分</p>\n<p>exp_dir=/fo</p>\n<h4 id=\"管理员\"><a href=\"#管理员\" class=\"headerlink\" title=\"管理员\"></a>管理员</h4><p>sqlplus / as sysdba</p>\n<p>sqlplus /nolog<br>conn  username/password as sysdba </p>\n<h4 id=\"设置directory\"><a href=\"#设置directory\" class=\"headerlink\" title=\"设置directory\"></a>设置directory</h4><p>–查路径<br>select * from dba_directories;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYS                EXP_IMP_DATA</span><br><span class=\"line\">/opt/oracle/oradata/forp/db_bakup</span><br></pre></td></tr></table></figure></p>\n<p>create or replace  directory dmp_dir as ‘/data/testdata/‘;</p>\n<p>grant read,write on directory dmp_dir to username;</p>\n<p><a href=\"https://blog.csdn.net/eason_oracle/article/details/77101563\" target=\"_blank\" rel=\"noopener\">设置directory文件路径</a></p>\n<ul>\n<li><ol start=\"0\">\n<li>su - oracle</li>\n</ol>\n</li>\n<li><p>1.导出生产库 oracle数据</p>\n<blockquote>\n<p>进入127.0.0.1服务器<br>  导出：    expdp TEST1/PITAYA_7Na1 file=/20180922.dmp directory=exp_dir schemas=TEST1;</p>\n</blockquote>\n</li>\n<li><p>2.导入Oracle数据到测试库</p>\n<blockquote>\n<p>   impdp TEST/PITAYA_7Na1_TEST file=/20180922.dmp directory=exp_dir REMAP_SCHEMA=TEST1:TEST; </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"设置plsql的快捷方式\"><a href=\"#设置plsql的快捷方式\" class=\"headerlink\" title=\"设置plsql的快捷方式\"></a>设置plsql的快捷方式</h2><p>sqlplus TEST/PITAYA_7Na1_TEST@orcl</p>\n<p>打开PL/SQL，在Tools-&gt;Perferences-&gt;Editor中Autoreplaces选择配置的short.txt文件 ,然后重启一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = select * from </span><br><span class=\"line\">w = where </span><br><span class=\"line\">sf = select t.*, t.rowid from  </span><br><span class=\"line\">sc = select count(1) from </span><br><span class=\"line\">d = delete from</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询外键\"><a href=\"#查询外键\" class=\"headerlink\" title=\"查询外键\"></a>查询外键</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select a.constraint_name, a.table_name, b.constraint_name  from user_constraints a, user_constraints b</span><br><span class=\"line\">where a.constraint_type = &apos;R&apos; and b.constraint_type = &apos;P&apos;  and a.r_constraint_name = b.constraint_name</span><br><span class=\"line\">and a.constraint_name = &apos;FK_CRM_7&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h2><p>查询锁表的对象</p>\n<p>这个两个sql都是要在具有dba权限的用户下执行的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select t2.username,</span><br><span class=\"line\">       t2.sid,</span><br><span class=\"line\">       t2.serial#,</span><br><span class=\"line\">       t3.object_name,</span><br><span class=\"line\">       t2.OSUSER,</span><br><span class=\"line\">       t2.MACHINE,</span><br><span class=\"line\">       t2.PROGRAM,</span><br><span class=\"line\">       t2.LOGON_TIME,</span><br><span class=\"line\">       t2.COMMAND,</span><br><span class=\"line\">       t2.LOCKWAIT,</span><br><span class=\"line\">       t2.SADDR,</span><br><span class=\"line\">       t2.PADDR,</span><br><span class=\"line\">       t2.TADDR,</span><br><span class=\"line\">       t2.SQL_ADDRESS,</span><br><span class=\"line\">       t1.LOCKED_MODE</span><br><span class=\"line\">  from v$locked_object t1, v$session t2, dba_objects t3</span><br><span class=\"line\"> where t1.session_id = t2.sid</span><br><span class=\"line\">   and t1.object_id = t3.object_id</span><br><span class=\"line\"> order by t2.logon_time;</span><br></pre></td></tr></table></figure>\n<p>kill 锁表操作   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER system KILL session &apos;SID,serial#&apos;;</span><br></pre></td></tr></table></figure>\n<p>锁的级别</p>\n<p>v$locked_object中的LOCKED_MODE字段表示锁的模式，oracle中锁的模式有如下几种:<br>0：none<br>1：null 空<br>2：Row-S 行共享(RS)：共享表锁，sub share<br>3：Row-X 行独占(RX)：用于行的修改，sub exclusive<br>4：Share 共享锁(S)：阻止其他DML操作，share<br>5：S/Row-X 共享行独占(SRX)：阻止其他事务操作，share/sub exclusive<br>6：exclusive 独占(X)：独立访问使用，exclusive</p>\n<p>数字越大锁级别越高, 影响的操作越多。</p>\n<p>1级锁有：Select，有时会在v$locked_object出现。<br>2级锁有：Select for update,Lock For Update,Lock Row Share<br>select for update当对话使用for update子串打开一个游标时，所有返回集中的数据行都将处于行级(Row-X)独占式锁定，其他对象只能查询这些数据行，不能进行update、delete或select for update操作。<br>3级锁有：Insert, Update, Delete, Lock Row Exclusive<br>没有commit之前插入同样的一条记录会没有反应, 因为后一个3的锁会一直等待上一个3的锁, 我们必须释放掉上一个才能继续工作。<br>4级锁有：Create Index, Lock Share<br>locked_mode为2,3,4不影响DML(insert,delete,update,select)操作, 但DDL(alter,drop等)操作会提示ora-00054错误。<br>00054, 00000, “resource busy and acquire with NOWAIT specified”<br>// <em>Cause: Resource interested is busy.<br>// </em>Action: Retry if necessary.<br>5级锁有：Lock Share Row Exclusive<br>具体来讲有主外键约束时update / delete … ; 可能会产生4,5的锁。<br>6级锁有：Alter table, Drop table, Drop Index, Truncate table, Lock Exclusive</p>\n<hr>\n<p>查某session 正在执行的sql语句，从而可以快速定位到哪些操作或者代码导致事务一直进行没有结束等.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT /*+ ORDERED */ </span><br><span class=\"line\"> sql_text</span><br><span class=\"line\">  FROM v$sqltext a</span><br><span class=\"line\"> WHERE (a.hash_value, a.address) IN</span><br><span class=\"line\">       (SELECT DECODE(sql_hash_value, 0, prev_hash_value, sql_hash_value),</span><br><span class=\"line\">               DECODE(sql_hash_value, 0, prev_sql_addr, sql_address)</span><br><span class=\"line\">          FROM v$session b</span><br><span class=\"line\">         WHERE b.sid = &apos;67&apos;)  /* 此处67 为SID*/</span><br><span class=\"line\"> ORDER BY piece ASC;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>plsql 工具   Tools —–&gt;Sessions———&gt; 查看</p>\n<h4 id=\"数据库比对工具\"><a href=\"#数据库比对工具\" class=\"headerlink\" title=\"数据库比对工具\"></a>数据库比对工具</h4><p>plsql Tools ———-&gt;Compare User Objects 选择另外一个库</p>\n<h4 id=\"Oracle-数据库表、字段级别，\"><a href=\"#Oracle-数据库表、字段级别，\" class=\"headerlink\" title=\"Oracle 数据库表、字段级别，\"></a>Oracle 数据库表、字段级别，</h4><p>select <em> from  user_tables  t;–所有表<br>select </em> from all_tab_columns  t;–系统<br>select <em> from ALL_TAB_COLS t;–系统表<br>select </em> from cols t;–字段<br>select <em> from USER_TAB_COLS t;–用户字段<br>select </em> from user_tab_comments  t–所有表字段<br>select * from user_col_comments t;–所有表注释</p>\n<p>SELECT INSTANCE_NAME FROM V$INSTANCE; –查询sid s_name</p>\n<h4 id=\"Oracle-方法等\"><a href=\"#Oracle-方法等\" class=\"headerlink\" title=\"Oracle 方法等\"></a>Oracle 方法等</h4><ul>\n<li>t.createdate &lt; to_date(‘2018-09-01’,’yyyy-mm-dd hh24:mi:ss’) 创建时间小于2018-09-01 </li>\n<li>to_char( t.CreateDate,’yyyyMMdd’)=to_char(sysdate,’yyyyMMdd’)  当天，类似当月yyyyMM当年yyyy</li>\n<li>case f.state when 0 then ‘第壹’ when 2 then ‘第贰’ when 3 then ‘第叁’ else null end as 状态,</li>\n<li>逗号存ID，查询    “    INSTR((SELECT ‘,’||(deptId)||’,’ FROM Pop_Dept_DutyPeo WHERE userId=? AND grade=1 GROUP BY userId), ‘,’||prj.FK_DeptID||’,’) &gt; 0 “</li>\n<li>列传行 select listagg(to_char(b.id),’,’) within group(order by b.orderId)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>常用的SQL语句，汇总，以便之后查阅。<br></p>","more":"<p></p>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><h4 id=\"MongoDB-备份\"><a href=\"#MongoDB-备份\" class=\"headerlink\" title=\"MongoDB 备份\"></a>MongoDB 备份</h4><p>备份生产数据：    </p>\n<blockquote>\n<p>/db/mongodb-3.4.7/bin/mongodump -h 127.0.0.1:9430 -d daochufilename -o  /db/mongodb-3.4.7/data/mongo_bak/180414  </p>\n</blockquote>\n<p>删除老数据:</p>\n<blockquote>\n<p>进入测试mongdb:       ./mongo 127.0.0.1:9430<br>查看所有的库:           show dbs<br>选择待删除的库:         use  databaseName<br>删除当前库:             db.dropDatabase()<br>退出:                   exit                    </p>\n</blockquote>\n<p>导入数据</p>\n<blockquote>\n<p>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 –port 9430 –db databasename     /db/mongodb-3.4.7/data/mongo_bak/180414/daochufilename</p>\n</blockquote>\n<h4 id=\"Oracle-备份\"><a href=\"#Oracle-备份\" class=\"headerlink\" title=\"Oracle 备份\"></a>Oracle 备份</h4><p>11G 导出， 没有数据的表无法导出</p>\n<h5 id=\"共有多少张表\"><a href=\"#共有多少张表\" class=\"headerlink\" title=\"共有多少张表:\"></a>共有多少张表:</h5><ul>\n<li>select count(1) from  user_tables ;</li>\n<li>select ‘drop table ‘||table_name||’ cascade constraints;’ from user_tables;  </li>\n<li>select ‘drop trigger ‘ || trigger_name || ‘;’  from user_triggers;  </li>\n<li>select ‘drop sequence ‘ || sequence_name || ‘;’  from user_sequences;  </li>\n</ul>\n<p>1、先查询一下当前用户下的所有空表</p>\n<p>select table_name from user_tables where NUM_ROWS=0;</p>\n<p>2、用以下这句查找空表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &apos;alter table &apos;||table_name||&apos; allocate extent;&apos; </span><br><span class=\"line\">from user_tables where num_rows = 0 ;</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ‘alter table ‘||table_name||’ allocate extent;’ </span><br><span class=\"line\">from user_tables where num_rows=0;</span><br></pre></td></tr></table></figure></p>\n<p>alter table table_name allocate extent;</p>\n<p>原因:</p>\n<p>Oracle 11G 出现EXP-00003: 未找到段 (0,0) 的存储定义<br>oracle 11g数据库表中没有数据在导出数据的时候会遇到的问题，alter system set deferred_segment_creation=false; 该参数意思是当创建对象（如表），初始没有数据，是否立即创建segment。默认是true。这会导致在exp时，没有segment的对象不会导出。<br>但此命令只对以后的表有效，之前的表没有Segment的还是没有。可以创建表的时候声明立即创建Segment ，create table XXX (XXX  XXX) SEGMENT CREATION IMMEDIATE;<br>对于已经创建但是还没有Segment的表来说，可以执行alter table TabelName allocate extent来使其创建出Segment,当然也可以插入一条数据，使其创建Segment .<br>解决方法：<br>1、先查询一下当前用户下的所有空表<br>select table_name from user_tables where NUM_ROWS=0;<br>2、用以下这句查找空表<br>select ‘alter table ‘||table_name||’ allocate extent;’ from user_tables where num_rows=0 ;<br>3、把查询结果导出，执行导出的语句 如：<br>alter table table_name allocate extent;</p>\n<p>exp <a href=\"mailto:username/password@192.168.5.214\" target=\"_blank\" rel=\"noopener\">username/password@192.168.5.214</a>/ORCL file=d:\\daochu.dmp FULL=y</p>\n<p>exp <a href=\"mailto:XNJD20171225/12345678@192.168.2.240\" target=\"_blank\" rel=\"noopener\">XNJD20171225/12345678@192.168.2.240</a>/ORCL file=d:\\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容</p>\n<p>exp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据</p>\n<p>导入数据库</p>\n<p>imp <a href=\"mailto:username/password@192.168.5.214\" target=\"_blank\" rel=\"noopener\">username/password@192.168.5.214</a>/ORCL tablespaces=xxx fromuser=cccccc touser=zzzzz file=D:\\daoru.dmp FULL=y</p>\n<p>导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分</p>\n<p>exp_dir=/fo</p>\n<h4 id=\"管理员\"><a href=\"#管理员\" class=\"headerlink\" title=\"管理员\"></a>管理员</h4><p>sqlplus / as sysdba</p>\n<p>sqlplus /nolog<br>conn  username/password as sysdba </p>\n<h4 id=\"设置directory\"><a href=\"#设置directory\" class=\"headerlink\" title=\"设置directory\"></a>设置directory</h4><p>–查路径<br>select * from dba_directories;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYS                EXP_IMP_DATA</span><br><span class=\"line\">/opt/oracle/oradata/forp/db_bakup</span><br></pre></td></tr></table></figure></p>\n<p>create or replace  directory dmp_dir as ‘/data/testdata/‘;</p>\n<p>grant read,write on directory dmp_dir to username;</p>\n<p><a href=\"https://blog.csdn.net/eason_oracle/article/details/77101563\" target=\"_blank\" rel=\"noopener\">设置directory文件路径</a></p>\n<ul>\n<li><ol start=\"0\">\n<li>su - oracle</li>\n</ol>\n</li>\n<li><p>1.导出生产库 oracle数据</p>\n<blockquote>\n<p>进入127.0.0.1服务器<br>  导出：    expdp TEST1/PITAYA_7Na1 file=/20180922.dmp directory=exp_dir schemas=TEST1;</p>\n</blockquote>\n</li>\n<li><p>2.导入Oracle数据到测试库</p>\n<blockquote>\n<p>   impdp TEST/PITAYA_7Na1_TEST file=/20180922.dmp directory=exp_dir REMAP_SCHEMA=TEST1:TEST; </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"设置plsql的快捷方式\"><a href=\"#设置plsql的快捷方式\" class=\"headerlink\" title=\"设置plsql的快捷方式\"></a>设置plsql的快捷方式</h2><p>sqlplus TEST/PITAYA_7Na1_TEST@orcl</p>\n<p>打开PL/SQL，在Tools-&gt;Perferences-&gt;Editor中Autoreplaces选择配置的short.txt文件 ,然后重启一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = select * from </span><br><span class=\"line\">w = where </span><br><span class=\"line\">sf = select t.*, t.rowid from  </span><br><span class=\"line\">sc = select count(1) from </span><br><span class=\"line\">d = delete from</span><br></pre></td></tr></table></figure>\n<h2 id=\"查询外键\"><a href=\"#查询外键\" class=\"headerlink\" title=\"查询外键\"></a>查询外键</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select a.constraint_name, a.table_name, b.constraint_name  from user_constraints a, user_constraints b</span><br><span class=\"line\">where a.constraint_type = &apos;R&apos; and b.constraint_type = &apos;P&apos;  and a.r_constraint_name = b.constraint_name</span><br><span class=\"line\">and a.constraint_name = &apos;FK_CRM_7&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h2><p>查询锁表的对象</p>\n<p>这个两个sql都是要在具有dba权限的用户下执行的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select t2.username,</span><br><span class=\"line\">       t2.sid,</span><br><span class=\"line\">       t2.serial#,</span><br><span class=\"line\">       t3.object_name,</span><br><span class=\"line\">       t2.OSUSER,</span><br><span class=\"line\">       t2.MACHINE,</span><br><span class=\"line\">       t2.PROGRAM,</span><br><span class=\"line\">       t2.LOGON_TIME,</span><br><span class=\"line\">       t2.COMMAND,</span><br><span class=\"line\">       t2.LOCKWAIT,</span><br><span class=\"line\">       t2.SADDR,</span><br><span class=\"line\">       t2.PADDR,</span><br><span class=\"line\">       t2.TADDR,</span><br><span class=\"line\">       t2.SQL_ADDRESS,</span><br><span class=\"line\">       t1.LOCKED_MODE</span><br><span class=\"line\">  from v$locked_object t1, v$session t2, dba_objects t3</span><br><span class=\"line\"> where t1.session_id = t2.sid</span><br><span class=\"line\">   and t1.object_id = t3.object_id</span><br><span class=\"line\"> order by t2.logon_time;</span><br></pre></td></tr></table></figure>\n<p>kill 锁表操作   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER system KILL session &apos;SID,serial#&apos;;</span><br></pre></td></tr></table></figure>\n<p>锁的级别</p>\n<p>v$locked_object中的LOCKED_MODE字段表示锁的模式，oracle中锁的模式有如下几种:<br>0：none<br>1：null 空<br>2：Row-S 行共享(RS)：共享表锁，sub share<br>3：Row-X 行独占(RX)：用于行的修改，sub exclusive<br>4：Share 共享锁(S)：阻止其他DML操作，share<br>5：S/Row-X 共享行独占(SRX)：阻止其他事务操作，share/sub exclusive<br>6：exclusive 独占(X)：独立访问使用，exclusive</p>\n<p>数字越大锁级别越高, 影响的操作越多。</p>\n<p>1级锁有：Select，有时会在v$locked_object出现。<br>2级锁有：Select for update,Lock For Update,Lock Row Share<br>select for update当对话使用for update子串打开一个游标时，所有返回集中的数据行都将处于行级(Row-X)独占式锁定，其他对象只能查询这些数据行，不能进行update、delete或select for update操作。<br>3级锁有：Insert, Update, Delete, Lock Row Exclusive<br>没有commit之前插入同样的一条记录会没有反应, 因为后一个3的锁会一直等待上一个3的锁, 我们必须释放掉上一个才能继续工作。<br>4级锁有：Create Index, Lock Share<br>locked_mode为2,3,4不影响DML(insert,delete,update,select)操作, 但DDL(alter,drop等)操作会提示ora-00054错误。<br>00054, 00000, “resource busy and acquire with NOWAIT specified”<br>// <em>Cause: Resource interested is busy.<br>// </em>Action: Retry if necessary.<br>5级锁有：Lock Share Row Exclusive<br>具体来讲有主外键约束时update / delete … ; 可能会产生4,5的锁。<br>6级锁有：Alter table, Drop table, Drop Index, Truncate table, Lock Exclusive</p>\n<hr>\n<p>查某session 正在执行的sql语句，从而可以快速定位到哪些操作或者代码导致事务一直进行没有结束等.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT /*+ ORDERED */ </span><br><span class=\"line\"> sql_text</span><br><span class=\"line\">  FROM v$sqltext a</span><br><span class=\"line\"> WHERE (a.hash_value, a.address) IN</span><br><span class=\"line\">       (SELECT DECODE(sql_hash_value, 0, prev_hash_value, sql_hash_value),</span><br><span class=\"line\">               DECODE(sql_hash_value, 0, prev_sql_addr, sql_address)</span><br><span class=\"line\">          FROM v$session b</span><br><span class=\"line\">         WHERE b.sid = &apos;67&apos;)  /* 此处67 为SID*/</span><br><span class=\"line\"> ORDER BY piece ASC;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>plsql 工具   Tools —–&gt;Sessions———&gt; 查看</p>\n<h4 id=\"数据库比对工具\"><a href=\"#数据库比对工具\" class=\"headerlink\" title=\"数据库比对工具\"></a>数据库比对工具</h4><p>plsql Tools ———-&gt;Compare User Objects 选择另外一个库</p>\n<h4 id=\"Oracle-数据库表、字段级别，\"><a href=\"#Oracle-数据库表、字段级别，\" class=\"headerlink\" title=\"Oracle 数据库表、字段级别，\"></a>Oracle 数据库表、字段级别，</h4><p>select <em> from  user_tables  t;–所有表<br>select </em> from all_tab_columns  t;–系统<br>select <em> from ALL_TAB_COLS t;–系统表<br>select </em> from cols t;–字段<br>select <em> from USER_TAB_COLS t;–用户字段<br>select </em> from user_tab_comments  t–所有表字段<br>select * from user_col_comments t;–所有表注释</p>\n<p>SELECT INSTANCE_NAME FROM V$INSTANCE; –查询sid s_name</p>\n<h4 id=\"Oracle-方法等\"><a href=\"#Oracle-方法等\" class=\"headerlink\" title=\"Oracle 方法等\"></a>Oracle 方法等</h4><ul>\n<li>t.createdate &lt; to_date(‘2018-09-01’,’yyyy-mm-dd hh24:mi:ss’) 创建时间小于2018-09-01 </li>\n<li>to_char( t.CreateDate,’yyyyMMdd’)=to_char(sysdate,’yyyyMMdd’)  当天，类似当月yyyyMM当年yyyy</li>\n<li>case f.state when 0 then ‘第壹’ when 2 then ‘第贰’ when 3 then ‘第叁’ else null end as 状态,</li>\n<li>逗号存ID，查询    “    INSTR((SELECT ‘,’||(deptId)||’,’ FROM Pop_Dept_DutyPeo WHERE userId=? AND grade=1 GROUP BY userId), ‘,’||prj.FK_DeptID||’,’) &gt; 0 “</li>\n<li>列传行 select listagg(to_char(b.id),’,’) within group(order by b.orderId)</li>\n</ul>"},{"title":"数据库操作语句","date":"2017-08-13T19:22:28.000Z","description":"dblink,权限，表空间，触发器，查重，Oracle tree","_content":"\n常用的SQL语句，汇总，以便之后查阅。\n<!--more-->\n\n\n针对具体的数据行级别 增删改查\nData Manipulation Language (DML)数据操作语言(DML) (for database)  insert delete update select\n\n定义是针对表、视图、索引、用户、触发器、存储过程等级别\nData Definition Language (DDL) 数据定义语言(DDL) (for database) create drop alter table/view/index\n\n权限\nData Control Language (DCL) 数据控制语言(DCL) (for database) grant revoke\n\n#### mysql 创建用户 和授权\n\nCREATE USER 'username'@'%' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;\n查询用户\n\nSELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;\n\n#### mysql 索引\n\nBTREE  HASH\n\n[MySQL的索引是什么？怎么优化？](https://my.oschina.net/liughDevelop/blog/1788148)\n\nexplan或者describe, possible_key key key_len 执行的索引,已经扫描的行数row,如果是范围值的话，索引无效。\n\n[mysql索引的使用及优化方法](https://blog.csdn.net/qq_37307063/article/details/70141679)内有my.ini的配置参数解释\n\n#### Oracle的dblink \n\n//00933问题一定要检查自己的SQL语句的语法 \n\nselect * from user_sys_privs;//查找当前用户的权限是否具有dblink的create权限 \ngrant create public database link,create database link to \"account\"; //分配权限\n\nselect name,value from v$parameter where name='service_names' //查询服务名 \nselect * from global_name;\nselect owner,object_name from dba_objects where object_type='DATABASE LINK';//查询已有的dblink \nselect * from dba_db_links;\n\n//两个创建 注意引号问题 \ncreate database link dblinktest connect to sstzjs_zjk identified by \"12345678\" using '19.131.106.252:1521/oracle'; \ncreate public database link sstzjs_zjk.us.oracle.com connect to sstzjs_zjk IDENTIFIED BY \"12345678\" using '(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 19.131.106.252)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ORCL)))';\n\ncreate public database link zrhs_link using '19.131.106.252:1521/oracle'; \n在不指定用户名和口令的情况下，ORACLE使用当前的用户名和口令登录到远程数据库。 \nSELECT * FROM INS_BUSINESS_INFO@ZRHS_LINK\n\nDROP PUBLIC DATABASE LINK SSTZJS_ZJK.US.ORACLE.COM; //删除dblink\n\n\n#### Oracle\n\n拼接：wm_concat (FDSXMC || '&&') \n\n\n替换：update Prj_Project set projectname = replace(projectname,'华为','2');\n\n导入数据库\n\nimp username/password@192.168.5.214/ORCL file=D:\\daoru.dmp FULL=y\n\n导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分\n\nexp username/password@192.168.5.214/ORCL file=d:\\daochu.dmp FULL=y\n\nexp XNJD20171225/12345678@192.168.2.240/ORCL file=d:\\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容\n\nexp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据\n\n创建表空间\ncreate tablespace WEBSITE\ndatafile 'D:\\app\\zhang\\product\\11.1.0\\db_1\\SPACE_TBSPACE.dbf'\nsize 1500M autoextend on next 5M maxsize 3000M;\n\ncreate tablespace WEBSITE logging datafile D:\\app\\Myadmin.fs\\product\\11.2.0\\test1.dbf’ size 1024m;\n\n自动扩展：\n\nselect tablespace_name,file_name,autoextensible  from dba_data_files;\n \nalter database datafile 'D:\\APP\\MYADMIN.FS\\PRODUCT\\11.2.0\\SWBXN1.DBF' autoextend on;\n\n开启自动扩展功能语法：\nalter database datafile '对应的数据文件路径信息' autoextend on;\n关闭自动扩展功能语法：\nalter database datafile '对应的数据文件路径信息' autoextend off;\n\n\n\n创建用户，给权限\n-- Create the user \ncreate user XNJD20180102\n  identified by \"12345678\"\n  default tablespace WEBSITE\n  temporary tablespace TEMP\n  profile DEFAULT;\n-- Grant/Revoke role privileges \ngrant connect to XNJD20180102 with admin option;\ngrant dba to XNJD20180102 with admin option;\n-- Grant/Revoke system privileges \ngrant unlimited tablespace to XNJD20180102;\n\nor\n\ncreate user XNJD20180102 identified by 12345678 default tablespace WEBSITE temporary tablespace temp; \n\ngrant dba,connect,resource to XNJD20180102; \n\n#### 性能问题\n\n##### 表空间\n\nSELECT a.tablespace_name \"表空间名\",\na.bytes / 1024 / 1024 \"表空间大小(M)\",\n(a.bytes - b.bytes) / 1024 / 1024 \"已使用空间(M)\",\nb.bytes / 1024 / 1024 \"空闲空间(M)\",\nround(((a.bytes - b.bytes) / a.bytes) * 100, 2) \"使用比\"\nFROM (SELECT tablespace_name, sum(bytes) bytes\nFROM dba_data_files\nGROUP BY tablespace_name) a,\n(SELECT tablespace_name, sum(bytes) bytes, max(bytes) largest\nFROM dba_free_space\nGROUP BY tablespace_name) b\nWHERE a.tablespace_name = b.tablespace_name\nORDER BY ((a.bytes - b.bytes) / a.bytes) DESC;\n\n\nselect dbf.tablespace_name,\ndbf.totalspace \"总量(M)\",\ndbf.totalblocks as 总块数,\ndfs.freespace \"剩余总量(M)\",\ndfs.freeblocks \"剩余块数\",\n(dfs.freespace / dbf.totalspace) * 100 \"空闲比例\"\nfrom (select t.tablespace_name,\nsum(t.bytes) / 1024 / 1024 totalspace,\nsum(t.blocks) totalblocks\nfrom dba_data_files t\ngroup by t.tablespace_name) dbf,\n(select tt.tablespace_name,\nsum(tt.bytes) / 1024 / 1024 freespace,\nsum(tt.blocks) freeblocks\nfrom dba_free_space tt\ngroup by tt.tablespace_name) dfs\nwhere trim(dbf.tablespace_name) = trim(dfs.tablespace_name);\n\n\nSELECT T.TABLESPACE_NAME,\nD.FILE_NAME,\nD.AUTOEXTENSIBLE,\nD.BYTES,\nD.MAXBYTES,\nD.STATUS\nFROM DBA_TABLESPACES T, DBA_DATA_FILES D\nWHERE T.TABLESPACE_NAME = D.TABLESPACE_NAME\nORDER BY TABLESPACE_NAME, FILE_NAME;\n\n\nSELECT *  FROM dba_data_files  WHERE tablespace_name = 'WEBSITE';\n\nselect blocks, maxblocks,file_name,tablespace_name from dba_data_files;\n\nalter tablespace WEBSITE add datafile 'E:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\ORCL\\WEBSITE1.dbf' size 5120M\n\n\n##### 排查问题\n\n查询正在运行的SQL:\n\nselect a.program, b.spid, c.sql_text,c.SQL_ID from v$session a, v$process b, v$sqlarea c\nwhere a.paddr = b.addr and a.sql_hash_value = c.hash_value and a.username is not null;\n\n上面的SQL_ID 完整的SQL: select a.* from v$sql a where a.SQL_ID='43c5ykm1mcp2a'\n\n约束表:\nORACLE有关ORA-02292：违反完整约束条件（XXX.FKXXX）- 找到子记录的删除方法\n\nselect a.constraint_name, a.table_name, b.constraint_name from user_constraints a, user_constraints b\nwhere a.constraint_type = 'R' and b.constraint_type = 'P'  and a.r_constraint_name = b.constraint_name\nand a.constraint_name = 'FKXXX'\n\n\n数据被锁，查看session, for update 导致的锁表问题等。\n\n##### 执行计划F5\n\n\n[看懂Oracle执行计划](https://www.cnblogs.com/Dreamer-1/p/6076440.html)\n\n\n#### 触发器\n\n测试环境Oracle 10g\n\n```\nCREATE OR REPLACE TRIGGER  T_INS_BUSINESSINFO_UPDATE    --T_INS_BUSINESSINFO_UPDATE 表示触发器的名字\nAFTER update OF  CASEEXCHANGE       --CASEEXCHANGE  更新哪个字段\nON T_INS_BUSINESSINFO  -- T_INS_BUSINESSINFO触发的表\nFOR EACH ROW -- 代表行级触发器\nBEGIN\n UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS='5' \n WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE ='3' AND h.EXCHANGESTATUS = '2';--收到材料回退\n UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS='8' \n WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE ='4' AND h.EXCHANGESTATUS = '7';--已经领证调整\n\n --DBMS_OUTPUT.PUT_LINE('旧的flongnumber值是'||:old.FLONGNUMBER ||'、新的flongnumber值是'||:new.FLONGNUMBER); --  输出值\n\nEND;\n\n```\n\n中间用到了dblink @ 多用用就可以啦还是挺简单的，就是不知道效率怎么样\n\n```\n--DROP TRIGGER TR_ORG_UPDATE;\nselect * from all_triggers  where table_name='T_INS_BUSINESSINFO';   \n--UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS='2' WHERE h.bsnumcopy ='1708111553000610N'  -- :new.bsnum and :new.CASEEXCHANGE ='3';\n```\n\n定义赋值\n\n```\ncreate or replace trigger yearPaoId_trigger\nbefore insert\non YEARPATENT\nfor each row\ndeclare\nv_yearPaoId number(9);//定义变量\nv_yearPaoIdOld number(9);\nbegin\n    select :new.yearPaoId into v_yearPaoId from YEARPATENT;//选择什么into到变量中\n    select :new.yearPaoIdOld into v_yearPaoIdOld from YEARPATENT;\n    update mapping@dbLinkName set newId = v_yearPaoId where oldId = v_yearPaoIdOld;\nend;\n\n```\n\n下面这个是一个标准写法：\n\n```\nCREATE OR REPLACE TRIGGER TG_NAME\n　　BEFORE | AFTER\n　　INSERT OR DELETE OR UPDATE [OF COL1,COL2,...]\n　　ON 表名\n　　[FOR EACH ROW]\n　　[WHEN 条件]\n　　DECLARE\n　　...\n　　BEGIN\n　　....\n　　EXCEPTION\n　　...\n　　END;\n注: A) FOR EACH ROW 代表行级触发器.\n　　B) WHEN: 只有符合该条件的时候才进行触发.\n　　C) 可以通过INSERTING,DELETING,UPDATING来识别INSERT,DELETE,UPDATE操作.\n　　D) 用:new 和:old(称为伪记录)来访问数据变更前后的值。\n　　:NEW :INSERT,UPDATE之后的数据.\n　　:OLD :DELETE,UDPATE之前的数据.\n　　:old.字段名或:new.字段名\n　　E) 触发器中的操作与触发事件(INSERT,UPDATE,DELETE)一起进行COMMIT和ROLLBACK;\n　　REM 创建包含插入、删除、修改多种触发事件的触发器DML_LOG，对EMP表的操作进行记录。\n```\n\n#### 查重和去重、其他\n\n\nselect t.*,t.rowid from table t \n有个很好用的rownum  和 count(1)\n\n查重：select bsnum ,count(1) from table group by bsnum having count(1)>1;\n\n去重：select distinct(bsnum) from table;\n\n复制表结构： create table newtable as select * from oldtable where 1=2\n\n复制表结构和数据： create table newtable as select * from oldtable \n\n删除数据：\n\n批量插入：从一个表中查出来的数据\ninsert into table2 (SELECT B.ID,B.NAME,B.ID,'5','5','5','5','5','5' FROM table1 B WHERE B.STATUS != 0)\n  \n#### 数据库编码\n\n\nselect * from nls_database_parameters;  --服务器\nselect * from nls_instance_parameters;  --客户端\nselect * from nls_session_parameters; --session 连接\n\nselect userenv('language') from dual;\n\nSELECT sys_context('userenv', 'language') FROM dual;--查询服务端语言\n[Oracle字符集的查看查询和Oracle字符集的设置修改](https://www.cnblogs.com/perilla/p/3873653.html)\n\ngroup by 组合 listagg方法\n\nselect pr.rolekey, pr.rolename as roleName, \nlistagg(fu.id,',')within group(order by rolename) as userIds, \nlistagg(to_char(fu.username),',')within group(order by rolename) as userNames\nfrom t_roleuser t \nleft join t_user fu on fu.id = t.fk_userid \nleft join t_role pr on pr.id =t.fk_roleid \nwhere  t.fk_projectid =? group by pr.rolename,pr.rolekey ;\n\n\n#### oracle tree\n\nORACLE 数据库递归查询当前数据的所有孩子数据（不包含自己）\n```\nSELECT id   AS id,\n  parent_id AS parentId,\n  parent_id AS parent,\n  name      AS text\nFROM mdm_center\n  START WITH parent_id = #{parentId}\n  CONNECT BY prior id  = parent_id\n```\nORACLE数据库查询当前数据的所有父数据（包含自己）\n```\nSELECT id   AS id,\n  parent_id AS parentId,\n  parent_id AS parent,\n  name      AS text\nFROM mdm_center\n  START WITH id              = #{centerId}\n  CONNECT BY prior parent_id = id\n```\n\noracle tree 结构级联删除数据\n\nSELECT  t.*,t.rowid  FROM   t_sys_nodetree_count  t \nCONNECT BY PRIOR id = pid start WITH ID = '20160406195638000013'\n\ndelete from t_sys_nodetree_count where ID in \n(SELECT ID  FROM  t_sys_nodetree_count  \nCONNECT BY PRIOR FENXID = FUJID start WITH ID = '20160406195638000013')\n\n","source":"_posts/数据库操作语句.md","raw":"---\ntitle: 数据库操作语句\ndate: 2017-08-14 03:22:28\ntags: [常用代码]\ncategories: [SQL,数据库]\ndescription: \"dblink,权限，表空间，触发器，查重，Oracle tree\"\n---\n\n常用的SQL语句，汇总，以便之后查阅。\n<!--more-->\n\n\n针对具体的数据行级别 增删改查\nData Manipulation Language (DML)数据操作语言(DML) (for database)  insert delete update select\n\n定义是针对表、视图、索引、用户、触发器、存储过程等级别\nData Definition Language (DDL) 数据定义语言(DDL) (for database) create drop alter table/view/index\n\n权限\nData Control Language (DCL) 数据控制语言(DCL) (for database) grant revoke\n\n#### mysql 创建用户 和授权\n\nCREATE USER 'username'@'%' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON *.* TO 'username'@'%' WITH GRANT OPTION;\n查询用户\n\nSELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;\n\n#### mysql 索引\n\nBTREE  HASH\n\n[MySQL的索引是什么？怎么优化？](https://my.oschina.net/liughDevelop/blog/1788148)\n\nexplan或者describe, possible_key key key_len 执行的索引,已经扫描的行数row,如果是范围值的话，索引无效。\n\n[mysql索引的使用及优化方法](https://blog.csdn.net/qq_37307063/article/details/70141679)内有my.ini的配置参数解释\n\n#### Oracle的dblink \n\n//00933问题一定要检查自己的SQL语句的语法 \n\nselect * from user_sys_privs;//查找当前用户的权限是否具有dblink的create权限 \ngrant create public database link,create database link to \"account\"; //分配权限\n\nselect name,value from v$parameter where name='service_names' //查询服务名 \nselect * from global_name;\nselect owner,object_name from dba_objects where object_type='DATABASE LINK';//查询已有的dblink \nselect * from dba_db_links;\n\n//两个创建 注意引号问题 \ncreate database link dblinktest connect to sstzjs_zjk identified by \"12345678\" using '19.131.106.252:1521/oracle'; \ncreate public database link sstzjs_zjk.us.oracle.com connect to sstzjs_zjk IDENTIFIED BY \"12345678\" using '(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 19.131.106.252)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ORCL)))';\n\ncreate public database link zrhs_link using '19.131.106.252:1521/oracle'; \n在不指定用户名和口令的情况下，ORACLE使用当前的用户名和口令登录到远程数据库。 \nSELECT * FROM INS_BUSINESS_INFO@ZRHS_LINK\n\nDROP PUBLIC DATABASE LINK SSTZJS_ZJK.US.ORACLE.COM; //删除dblink\n\n\n#### Oracle\n\n拼接：wm_concat (FDSXMC || '&&') \n\n\n替换：update Prj_Project set projectname = replace(projectname,'华为','2');\n\n导入数据库\n\nimp username/password@192.168.5.214/ORCL file=D:\\daoru.dmp FULL=y\n\n导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分\n\nexp username/password@192.168.5.214/ORCL file=d:\\daochu.dmp FULL=y\n\nexp XNJD20171225/12345678@192.168.2.240/ORCL file=d:\\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容\n\nexp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据\n\n创建表空间\ncreate tablespace WEBSITE\ndatafile 'D:\\app\\zhang\\product\\11.1.0\\db_1\\SPACE_TBSPACE.dbf'\nsize 1500M autoextend on next 5M maxsize 3000M;\n\ncreate tablespace WEBSITE logging datafile D:\\app\\Myadmin.fs\\product\\11.2.0\\test1.dbf’ size 1024m;\n\n自动扩展：\n\nselect tablespace_name,file_name,autoextensible  from dba_data_files;\n \nalter database datafile 'D:\\APP\\MYADMIN.FS\\PRODUCT\\11.2.0\\SWBXN1.DBF' autoextend on;\n\n开启自动扩展功能语法：\nalter database datafile '对应的数据文件路径信息' autoextend on;\n关闭自动扩展功能语法：\nalter database datafile '对应的数据文件路径信息' autoextend off;\n\n\n\n创建用户，给权限\n-- Create the user \ncreate user XNJD20180102\n  identified by \"12345678\"\n  default tablespace WEBSITE\n  temporary tablespace TEMP\n  profile DEFAULT;\n-- Grant/Revoke role privileges \ngrant connect to XNJD20180102 with admin option;\ngrant dba to XNJD20180102 with admin option;\n-- Grant/Revoke system privileges \ngrant unlimited tablespace to XNJD20180102;\n\nor\n\ncreate user XNJD20180102 identified by 12345678 default tablespace WEBSITE temporary tablespace temp; \n\ngrant dba,connect,resource to XNJD20180102; \n\n#### 性能问题\n\n##### 表空间\n\nSELECT a.tablespace_name \"表空间名\",\na.bytes / 1024 / 1024 \"表空间大小(M)\",\n(a.bytes - b.bytes) / 1024 / 1024 \"已使用空间(M)\",\nb.bytes / 1024 / 1024 \"空闲空间(M)\",\nround(((a.bytes - b.bytes) / a.bytes) * 100, 2) \"使用比\"\nFROM (SELECT tablespace_name, sum(bytes) bytes\nFROM dba_data_files\nGROUP BY tablespace_name) a,\n(SELECT tablespace_name, sum(bytes) bytes, max(bytes) largest\nFROM dba_free_space\nGROUP BY tablespace_name) b\nWHERE a.tablespace_name = b.tablespace_name\nORDER BY ((a.bytes - b.bytes) / a.bytes) DESC;\n\n\nselect dbf.tablespace_name,\ndbf.totalspace \"总量(M)\",\ndbf.totalblocks as 总块数,\ndfs.freespace \"剩余总量(M)\",\ndfs.freeblocks \"剩余块数\",\n(dfs.freespace / dbf.totalspace) * 100 \"空闲比例\"\nfrom (select t.tablespace_name,\nsum(t.bytes) / 1024 / 1024 totalspace,\nsum(t.blocks) totalblocks\nfrom dba_data_files t\ngroup by t.tablespace_name) dbf,\n(select tt.tablespace_name,\nsum(tt.bytes) / 1024 / 1024 freespace,\nsum(tt.blocks) freeblocks\nfrom dba_free_space tt\ngroup by tt.tablespace_name) dfs\nwhere trim(dbf.tablespace_name) = trim(dfs.tablespace_name);\n\n\nSELECT T.TABLESPACE_NAME,\nD.FILE_NAME,\nD.AUTOEXTENSIBLE,\nD.BYTES,\nD.MAXBYTES,\nD.STATUS\nFROM DBA_TABLESPACES T, DBA_DATA_FILES D\nWHERE T.TABLESPACE_NAME = D.TABLESPACE_NAME\nORDER BY TABLESPACE_NAME, FILE_NAME;\n\n\nSELECT *  FROM dba_data_files  WHERE tablespace_name = 'WEBSITE';\n\nselect blocks, maxblocks,file_name,tablespace_name from dba_data_files;\n\nalter tablespace WEBSITE add datafile 'E:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\ORCL\\WEBSITE1.dbf' size 5120M\n\n\n##### 排查问题\n\n查询正在运行的SQL:\n\nselect a.program, b.spid, c.sql_text,c.SQL_ID from v$session a, v$process b, v$sqlarea c\nwhere a.paddr = b.addr and a.sql_hash_value = c.hash_value and a.username is not null;\n\n上面的SQL_ID 完整的SQL: select a.* from v$sql a where a.SQL_ID='43c5ykm1mcp2a'\n\n约束表:\nORACLE有关ORA-02292：违反完整约束条件（XXX.FKXXX）- 找到子记录的删除方法\n\nselect a.constraint_name, a.table_name, b.constraint_name from user_constraints a, user_constraints b\nwhere a.constraint_type = 'R' and b.constraint_type = 'P'  and a.r_constraint_name = b.constraint_name\nand a.constraint_name = 'FKXXX'\n\n\n数据被锁，查看session, for update 导致的锁表问题等。\n\n##### 执行计划F5\n\n\n[看懂Oracle执行计划](https://www.cnblogs.com/Dreamer-1/p/6076440.html)\n\n\n#### 触发器\n\n测试环境Oracle 10g\n\n```\nCREATE OR REPLACE TRIGGER  T_INS_BUSINESSINFO_UPDATE    --T_INS_BUSINESSINFO_UPDATE 表示触发器的名字\nAFTER update OF  CASEEXCHANGE       --CASEEXCHANGE  更新哪个字段\nON T_INS_BUSINESSINFO  -- T_INS_BUSINESSINFO触发的表\nFOR EACH ROW -- 代表行级触发器\nBEGIN\n UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS='5' \n WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE ='3' AND h.EXCHANGESTATUS = '2';--收到材料回退\n UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS='8' \n WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE ='4' AND h.EXCHANGESTATUS = '7';--已经领证调整\n\n --DBMS_OUTPUT.PUT_LINE('旧的flongnumber值是'||:old.FLONGNUMBER ||'、新的flongnumber值是'||:new.FLONGNUMBER); --  输出值\n\nEND;\n\n```\n\n中间用到了dblink @ 多用用就可以啦还是挺简单的，就是不知道效率怎么样\n\n```\n--DROP TRIGGER TR_ORG_UPDATE;\nselect * from all_triggers  where table_name='T_INS_BUSINESSINFO';   \n--UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS='2' WHERE h.bsnumcopy ='1708111553000610N'  -- :new.bsnum and :new.CASEEXCHANGE ='3';\n```\n\n定义赋值\n\n```\ncreate or replace trigger yearPaoId_trigger\nbefore insert\non YEARPATENT\nfor each row\ndeclare\nv_yearPaoId number(9);//定义变量\nv_yearPaoIdOld number(9);\nbegin\n    select :new.yearPaoId into v_yearPaoId from YEARPATENT;//选择什么into到变量中\n    select :new.yearPaoIdOld into v_yearPaoIdOld from YEARPATENT;\n    update mapping@dbLinkName set newId = v_yearPaoId where oldId = v_yearPaoIdOld;\nend;\n\n```\n\n下面这个是一个标准写法：\n\n```\nCREATE OR REPLACE TRIGGER TG_NAME\n　　BEFORE | AFTER\n　　INSERT OR DELETE OR UPDATE [OF COL1,COL2,...]\n　　ON 表名\n　　[FOR EACH ROW]\n　　[WHEN 条件]\n　　DECLARE\n　　...\n　　BEGIN\n　　....\n　　EXCEPTION\n　　...\n　　END;\n注: A) FOR EACH ROW 代表行级触发器.\n　　B) WHEN: 只有符合该条件的时候才进行触发.\n　　C) 可以通过INSERTING,DELETING,UPDATING来识别INSERT,DELETE,UPDATE操作.\n　　D) 用:new 和:old(称为伪记录)来访问数据变更前后的值。\n　　:NEW :INSERT,UPDATE之后的数据.\n　　:OLD :DELETE,UDPATE之前的数据.\n　　:old.字段名或:new.字段名\n　　E) 触发器中的操作与触发事件(INSERT,UPDATE,DELETE)一起进行COMMIT和ROLLBACK;\n　　REM 创建包含插入、删除、修改多种触发事件的触发器DML_LOG，对EMP表的操作进行记录。\n```\n\n#### 查重和去重、其他\n\n\nselect t.*,t.rowid from table t \n有个很好用的rownum  和 count(1)\n\n查重：select bsnum ,count(1) from table group by bsnum having count(1)>1;\n\n去重：select distinct(bsnum) from table;\n\n复制表结构： create table newtable as select * from oldtable where 1=2\n\n复制表结构和数据： create table newtable as select * from oldtable \n\n删除数据：\n\n批量插入：从一个表中查出来的数据\ninsert into table2 (SELECT B.ID,B.NAME,B.ID,'5','5','5','5','5','5' FROM table1 B WHERE B.STATUS != 0)\n  \n#### 数据库编码\n\n\nselect * from nls_database_parameters;  --服务器\nselect * from nls_instance_parameters;  --客户端\nselect * from nls_session_parameters; --session 连接\n\nselect userenv('language') from dual;\n\nSELECT sys_context('userenv', 'language') FROM dual;--查询服务端语言\n[Oracle字符集的查看查询和Oracle字符集的设置修改](https://www.cnblogs.com/perilla/p/3873653.html)\n\ngroup by 组合 listagg方法\n\nselect pr.rolekey, pr.rolename as roleName, \nlistagg(fu.id,',')within group(order by rolename) as userIds, \nlistagg(to_char(fu.username),',')within group(order by rolename) as userNames\nfrom t_roleuser t \nleft join t_user fu on fu.id = t.fk_userid \nleft join t_role pr on pr.id =t.fk_roleid \nwhere  t.fk_projectid =? group by pr.rolename,pr.rolekey ;\n\n\n#### oracle tree\n\nORACLE 数据库递归查询当前数据的所有孩子数据（不包含自己）\n```\nSELECT id   AS id,\n  parent_id AS parentId,\n  parent_id AS parent,\n  name      AS text\nFROM mdm_center\n  START WITH parent_id = #{parentId}\n  CONNECT BY prior id  = parent_id\n```\nORACLE数据库查询当前数据的所有父数据（包含自己）\n```\nSELECT id   AS id,\n  parent_id AS parentId,\n  parent_id AS parent,\n  name      AS text\nFROM mdm_center\n  START WITH id              = #{centerId}\n  CONNECT BY prior parent_id = id\n```\n\noracle tree 结构级联删除数据\n\nSELECT  t.*,t.rowid  FROM   t_sys_nodetree_count  t \nCONNECT BY PRIOR id = pid start WITH ID = '20160406195638000013'\n\ndelete from t_sys_nodetree_count where ID in \n(SELECT ID  FROM  t_sys_nodetree_count  \nCONNECT BY PRIOR FENXID = FUJID start WITH ID = '20160406195638000013')\n\n","slug":"数据库操作语句","published":1,"updated":"2019-04-24T06:43:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79y007hugv5tvg0xovm","content":"<p>常用的SQL语句，汇总，以便之后查阅。<br><a id=\"more\"></a></p>\n<p>针对具体的数据行级别 增删改查<br>Data Manipulation Language (DML)数据操作语言(DML) (for database)  insert delete update select</p>\n<p>定义是针对表、视图、索引、用户、触发器、存储过程等级别<br>Data Definition Language (DDL) 数据定义语言(DDL) (for database) create drop alter table/view/index</p>\n<p>权限<br>Data Control Language (DCL) 数据控制语言(DCL) (for database) grant revoke</p>\n<h4 id=\"mysql-创建用户-和授权\"><a href=\"#mysql-创建用户-和授权\" class=\"headerlink\" title=\"mysql 创建用户 和授权\"></a>mysql 创建用户 和授权</h4><p>CREATE USER ‘username‘@’%’ IDENTIFIED BY ‘password’;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘username‘@’%’ WITH GRANT OPTION;<br>查询用户</p>\n<p>SELECT DISTINCT CONCAT(‘User: ‘’’,user,‘‘‘@’’’,host,’’’;’) AS query FROM mysql.user;</p>\n<h4 id=\"mysql-索引\"><a href=\"#mysql-索引\" class=\"headerlink\" title=\"mysql 索引\"></a>mysql 索引</h4><p>BTREE  HASH</p>\n<p><a href=\"https://my.oschina.net/liughDevelop/blog/1788148\" target=\"_blank\" rel=\"noopener\">MySQL的索引是什么？怎么优化？</a></p>\n<p>explan或者describe, possible_key key key_len 执行的索引,已经扫描的行数row,如果是范围值的话，索引无效。</p>\n<p><a href=\"https://blog.csdn.net/qq_37307063/article/details/70141679\" target=\"_blank\" rel=\"noopener\">mysql索引的使用及优化方法</a>内有my.ini的配置参数解释</p>\n<h4 id=\"Oracle的dblink\"><a href=\"#Oracle的dblink\" class=\"headerlink\" title=\"Oracle的dblink\"></a>Oracle的dblink</h4><p>//00933问题一定要检查自己的SQL语句的语法 </p>\n<p>select * from user_sys_privs;//查找当前用户的权限是否具有dblink的create权限<br>grant create public database link,create database link to “account”; //分配权限</p>\n<p>select name,value from v$parameter where name=’service_names’ //查询服务名<br>select <em> from global_name;<br>select owner,object_name from dba_objects where object_type=’DATABASE LINK’;//查询已有的dblink<br>select </em> from dba_db_links;</p>\n<p>//两个创建 注意引号问题<br>create database link dblinktest connect to sstzjs_zjk identified by “12345678” using ‘19.131.106.252:1521/oracle’;<br>create public database link sstzjs_zjk.us.oracle.com connect to sstzjs_zjk IDENTIFIED BY “12345678” using ‘(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 19.131.106.252)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ORCL)))’;</p>\n<p>create public database link zrhs_link using ‘19.131.106.252:1521/oracle’;<br>在不指定用户名和口令的情况下，ORACLE使用当前的用户名和口令登录到远程数据库。<br>SELECT * FROM INS_BUSINESS_INFO@ZRHS_LINK</p>\n<p>DROP PUBLIC DATABASE LINK SSTZJS_ZJK.US.ORACLE.COM; //删除dblink</p>\n<h4 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h4><p>拼接：wm_concat (FDSXMC || ‘&amp;&amp;’) </p>\n<p>替换：update Prj_Project set projectname = replace(projectname,’华为’,’2’);</p>\n<p>导入数据库</p>\n<p>imp <a href=\"mailto:username/password@192.168.5.214\" target=\"_blank\" rel=\"noopener\">username/password@192.168.5.214</a>/ORCL file=D:\\daoru.dmp FULL=y</p>\n<p>导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分</p>\n<p>exp <a href=\"mailto:username/password@192.168.5.214\" target=\"_blank\" rel=\"noopener\">username/password@192.168.5.214</a>/ORCL file=d:\\daochu.dmp FULL=y</p>\n<p>exp <a href=\"mailto:XNJD20171225/12345678@192.168.2.240\" target=\"_blank\" rel=\"noopener\">XNJD20171225/12345678@192.168.2.240</a>/ORCL file=d:\\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容</p>\n<p>exp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据</p>\n<p>创建表空间<br>create tablespace WEBSITE<br>datafile ‘D:\\app\\zhang\\product\\11.1.0\\db_1\\SPACE_TBSPACE.dbf’<br>size 1500M autoextend on next 5M maxsize 3000M;</p>\n<p>create tablespace WEBSITE logging datafile D:\\app\\Myadmin.fs\\product\\11.2.0\\test1.dbf’ size 1024m;</p>\n<p>自动扩展：</p>\n<p>select tablespace_name,file_name,autoextensible  from dba_data_files;</p>\n<p>alter database datafile ‘D:\\APP\\MYADMIN.FS\\PRODUCT\\11.2.0\\SWBXN1.DBF’ autoextend on;</p>\n<p>开启自动扩展功能语法：<br>alter database datafile ‘对应的数据文件路径信息’ autoextend on;<br>关闭自动扩展功能语法：<br>alter database datafile ‘对应的数据文件路径信息’ autoextend off;</p>\n<p>创建用户，给权限<br>– Create the user<br>create user XNJD20180102<br>  identified by “12345678”<br>  default tablespace WEBSITE<br>  temporary tablespace TEMP<br>  profile DEFAULT;<br>– Grant/Revoke role privileges<br>grant connect to XNJD20180102 with admin option;<br>grant dba to XNJD20180102 with admin option;<br>– Grant/Revoke system privileges<br>grant unlimited tablespace to XNJD20180102;</p>\n<p>or</p>\n<p>create user XNJD20180102 identified by 12345678 default tablespace WEBSITE temporary tablespace temp; </p>\n<p>grant dba,connect,resource to XNJD20180102; </p>\n<h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><h5 id=\"表空间\"><a href=\"#表空间\" class=\"headerlink\" title=\"表空间\"></a>表空间</h5><p>SELECT a.tablespace_name “表空间名”,<br>a.bytes / 1024 / 1024 “表空间大小(M)”,<br>(a.bytes - b.bytes) / 1024 / 1024 “已使用空间(M)”,<br>b.bytes / 1024 / 1024 “空闲空间(M)”,<br>round(((a.bytes - b.bytes) / a.bytes) * 100, 2) “使用比”<br>FROM (SELECT tablespace_name, sum(bytes) bytes<br>FROM dba_data_files<br>GROUP BY tablespace_name) a,<br>(SELECT tablespace_name, sum(bytes) bytes, max(bytes) largest<br>FROM dba_free_space<br>GROUP BY tablespace_name) b<br>WHERE a.tablespace_name = b.tablespace_name<br>ORDER BY ((a.bytes - b.bytes) / a.bytes) DESC;</p>\n<p>select dbf.tablespace_name,<br>dbf.totalspace “总量(M)”,<br>dbf.totalblocks as 总块数,<br>dfs.freespace “剩余总量(M)”,<br>dfs.freeblocks “剩余块数”,<br>(dfs.freespace / dbf.totalspace) * 100 “空闲比例”<br>from (select t.tablespace_name,<br>sum(t.bytes) / 1024 / 1024 totalspace,<br>sum(t.blocks) totalblocks<br>from dba_data_files t<br>group by t.tablespace_name) dbf,<br>(select tt.tablespace_name,<br>sum(tt.bytes) / 1024 / 1024 freespace,<br>sum(tt.blocks) freeblocks<br>from dba_free_space tt<br>group by tt.tablespace_name) dfs<br>where trim(dbf.tablespace_name) = trim(dfs.tablespace_name);</p>\n<p>SELECT T.TABLESPACE_NAME,<br>D.FILE_NAME,<br>D.AUTOEXTENSIBLE,<br>D.BYTES,<br>D.MAXBYTES,<br>D.STATUS<br>FROM DBA_TABLESPACES T, DBA_DATA_FILES D<br>WHERE T.TABLESPACE_NAME = D.TABLESPACE_NAME<br>ORDER BY TABLESPACE_NAME, FILE_NAME;</p>\n<p>SELECT *  FROM dba_data_files  WHERE tablespace_name = ‘WEBSITE’;</p>\n<p>select blocks, maxblocks,file_name,tablespace_name from dba_data_files;</p>\n<p>alter tablespace WEBSITE add datafile ‘E:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\ORCL\\WEBSITE1.dbf’ size 5120M</p>\n<h5 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h5><p>查询正在运行的SQL:</p>\n<p>select a.program, b.spid, c.sql_text,c.SQL_ID from v$session a, v$process b, v$sqlarea c<br>where a.paddr = b.addr and a.sql_hash_value = c.hash_value and a.username is not null;</p>\n<p>上面的SQL_ID 完整的SQL: select a.* from v$sql a where a.SQL_ID=’43c5ykm1mcp2a’</p>\n<p>约束表:<br>ORACLE有关ORA-02292：违反完整约束条件（XXX.FKXXX）- 找到子记录的删除方法</p>\n<p>select a.constraint_name, a.table_name, b.constraint_name from user_constraints a, user_constraints b<br>where a.constraint_type = ‘R’ and b.constraint_type = ‘P’  and a.r_constraint_name = b.constraint_name<br>and a.constraint_name = ‘FKXXX’</p>\n<p>数据被锁，查看session, for update 导致的锁表问题等。</p>\n<h5 id=\"执行计划F5\"><a href=\"#执行计划F5\" class=\"headerlink\" title=\"执行计划F5\"></a>执行计划F5</h5><p><a href=\"https://www.cnblogs.com/Dreamer-1/p/6076440.html\" target=\"_blank\" rel=\"noopener\">看懂Oracle执行计划</a></p>\n<h4 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h4><p>测试环境Oracle 10g</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE OR REPLACE TRIGGER  T_INS_BUSINESSINFO_UPDATE    --T_INS_BUSINESSINFO_UPDATE 表示触发器的名字</span><br><span class=\"line\">AFTER update OF  CASEEXCHANGE       --CASEEXCHANGE  更新哪个字段</span><br><span class=\"line\">ON T_INS_BUSINESSINFO  -- T_INS_BUSINESSINFO触发的表</span><br><span class=\"line\">FOR EACH ROW -- 代表行级触发器</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"> UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;5&apos; </span><br><span class=\"line\"> WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE =&apos;3&apos; AND h.EXCHANGESTATUS = &apos;2&apos;;--收到材料回退</span><br><span class=\"line\"> UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;8&apos; </span><br><span class=\"line\"> WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE =&apos;4&apos; AND h.EXCHANGESTATUS = &apos;7&apos;;--已经领证调整</span><br><span class=\"line\"></span><br><span class=\"line\"> --DBMS_OUTPUT.PUT_LINE(&apos;旧的flongnumber值是&apos;||:old.FLONGNUMBER ||&apos;、新的flongnumber值是&apos;||:new.FLONGNUMBER); --  输出值</span><br><span class=\"line\"></span><br><span class=\"line\">END;</span><br></pre></td></tr></table></figure>\n<p>中间用到了dblink @ 多用用就可以啦还是挺简单的，就是不知道效率怎么样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--DROP TRIGGER TR_ORG_UPDATE;</span><br><span class=\"line\">select * from all_triggers  where table_name=&apos;T_INS_BUSINESSINFO&apos;;   </span><br><span class=\"line\">--UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;2&apos; WHERE h.bsnumcopy =&apos;1708111553000610N&apos;  -- :new.bsnum and :new.CASEEXCHANGE =&apos;3&apos;;</span><br></pre></td></tr></table></figure>\n<p>定义赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace trigger yearPaoId_trigger</span><br><span class=\"line\">before insert</span><br><span class=\"line\">on YEARPATENT</span><br><span class=\"line\">for each row</span><br><span class=\"line\">declare</span><br><span class=\"line\">v_yearPaoId number(9);//定义变量</span><br><span class=\"line\">v_yearPaoIdOld number(9);</span><br><span class=\"line\">begin</span><br><span class=\"line\">    select :new.yearPaoId into v_yearPaoId from YEARPATENT;//选择什么into到变量中</span><br><span class=\"line\">    select :new.yearPaoIdOld into v_yearPaoIdOld from YEARPATENT;</span><br><span class=\"line\">    update mapping@dbLinkName set newId = v_yearPaoId where oldId = v_yearPaoIdOld;</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n<p>下面这个是一个标准写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE OR REPLACE TRIGGER TG_NAME</span><br><span class=\"line\">　　BEFORE | AFTER</span><br><span class=\"line\">　　INSERT OR DELETE OR UPDATE [OF COL1,COL2,...]</span><br><span class=\"line\">　　ON 表名</span><br><span class=\"line\">　　[FOR EACH ROW]</span><br><span class=\"line\">　　[WHEN 条件]</span><br><span class=\"line\">　　DECLARE</span><br><span class=\"line\">　　...</span><br><span class=\"line\">　　BEGIN</span><br><span class=\"line\">　　....</span><br><span class=\"line\">　　EXCEPTION</span><br><span class=\"line\">　　...</span><br><span class=\"line\">　　END;</span><br><span class=\"line\">注: A) FOR EACH ROW 代表行级触发器.</span><br><span class=\"line\">　　B) WHEN: 只有符合该条件的时候才进行触发.</span><br><span class=\"line\">　　C) 可以通过INSERTING,DELETING,UPDATING来识别INSERT,DELETE,UPDATE操作.</span><br><span class=\"line\">　　D) 用:new 和:old(称为伪记录)来访问数据变更前后的值。</span><br><span class=\"line\">　　:NEW :INSERT,UPDATE之后的数据.</span><br><span class=\"line\">　　:OLD :DELETE,UDPATE之前的数据.</span><br><span class=\"line\">　　:old.字段名或:new.字段名</span><br><span class=\"line\">　　E) 触发器中的操作与触发事件(INSERT,UPDATE,DELETE)一起进行COMMIT和ROLLBACK;</span><br><span class=\"line\">　　REM 创建包含插入、删除、修改多种触发事件的触发器DML_LOG，对EMP表的操作进行记录。</span><br></pre></td></tr></table></figure>\n<h4 id=\"查重和去重、其他\"><a href=\"#查重和去重、其他\" class=\"headerlink\" title=\"查重和去重、其他\"></a>查重和去重、其他</h4><p>select t.*,t.rowid from table t<br>有个很好用的rownum  和 count(1)</p>\n<p>查重：select bsnum ,count(1) from table group by bsnum having count(1)&gt;1;</p>\n<p>去重：select distinct(bsnum) from table;</p>\n<p>复制表结构： create table newtable as select * from oldtable where 1=2</p>\n<p>复制表结构和数据： create table newtable as select * from oldtable </p>\n<p>删除数据：</p>\n<p>批量插入：从一个表中查出来的数据<br>insert into table2 (SELECT B.ID,B.NAME,B.ID,’5’,’5’,’5’,’5’,’5’,’5’ FROM table1 B WHERE B.STATUS != 0)</p>\n<h4 id=\"数据库编码\"><a href=\"#数据库编码\" class=\"headerlink\" title=\"数据库编码\"></a>数据库编码</h4><p>select <em> from nls_database_parameters;  –服务器<br>select </em> from nls_instance_parameters;  –客户端<br>select * from nls_session_parameters; –session 连接</p>\n<p>select userenv(‘language’) from dual;</p>\n<p>SELECT sys_context(‘userenv’, ‘language’) FROM dual;–查询服务端语言<br><a href=\"https://www.cnblogs.com/perilla/p/3873653.html\" target=\"_blank\" rel=\"noopener\">Oracle字符集的查看查询和Oracle字符集的设置修改</a></p>\n<p>group by 组合 listagg方法</p>\n<p>select pr.rolekey, pr.rolename as roleName,<br>listagg(fu.id,’,’)within group(order by rolename) as userIds,<br>listagg(to_char(fu.username),’,’)within group(order by rolename) as userNames<br>from t_roleuser t<br>left join t_user fu on fu.id = t.fk_userid<br>left join t_role pr on pr.id =t.fk_roleid<br>where  t.fk_projectid =? group by pr.rolename,pr.rolekey ;</p>\n<h4 id=\"oracle-tree\"><a href=\"#oracle-tree\" class=\"headerlink\" title=\"oracle tree\"></a>oracle tree</h4><p>ORACLE 数据库递归查询当前数据的所有孩子数据（不包含自己）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id   AS id,</span><br><span class=\"line\">  parent_id AS parentId,</span><br><span class=\"line\">  parent_id AS parent,</span><br><span class=\"line\">  name      AS text</span><br><span class=\"line\">FROM mdm_center</span><br><span class=\"line\">  START WITH parent_id = #&#123;parentId&#125;</span><br><span class=\"line\">  CONNECT BY prior id  = parent_id</span><br></pre></td></tr></table></figure></p>\n<p>ORACLE数据库查询当前数据的所有父数据（包含自己）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id   AS id,</span><br><span class=\"line\">  parent_id AS parentId,</span><br><span class=\"line\">  parent_id AS parent,</span><br><span class=\"line\">  name      AS text</span><br><span class=\"line\">FROM mdm_center</span><br><span class=\"line\">  START WITH id              = #&#123;centerId&#125;</span><br><span class=\"line\">  CONNECT BY prior parent_id = id</span><br></pre></td></tr></table></figure></p>\n<p>oracle tree 结构级联删除数据</p>\n<p>SELECT  t.*,t.rowid  FROM   t_sys_nodetree_count  t<br>CONNECT BY PRIOR id = pid start WITH ID = ‘20160406195638000013’</p>\n<p>delete from t_sys_nodetree_count where ID in<br>(SELECT ID  FROM  t_sys_nodetree_count<br>CONNECT BY PRIOR FENXID = FUJID start WITH ID = ‘20160406195638000013’)</p>\n","site":{"data":{}},"excerpt":"<p>常用的SQL语句，汇总，以便之后查阅。<br></p>","more":"<p></p>\n<p>针对具体的数据行级别 增删改查<br>Data Manipulation Language (DML)数据操作语言(DML) (for database)  insert delete update select</p>\n<p>定义是针对表、视图、索引、用户、触发器、存储过程等级别<br>Data Definition Language (DDL) 数据定义语言(DDL) (for database) create drop alter table/view/index</p>\n<p>权限<br>Data Control Language (DCL) 数据控制语言(DCL) (for database) grant revoke</p>\n<h4 id=\"mysql-创建用户-和授权\"><a href=\"#mysql-创建用户-和授权\" class=\"headerlink\" title=\"mysql 创建用户 和授权\"></a>mysql 创建用户 和授权</h4><p>CREATE USER ‘username‘@’%’ IDENTIFIED BY ‘password’;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘username‘@’%’ WITH GRANT OPTION;<br>查询用户</p>\n<p>SELECT DISTINCT CONCAT(‘User: ‘’’,user,‘‘‘@’’’,host,’’’;’) AS query FROM mysql.user;</p>\n<h4 id=\"mysql-索引\"><a href=\"#mysql-索引\" class=\"headerlink\" title=\"mysql 索引\"></a>mysql 索引</h4><p>BTREE  HASH</p>\n<p><a href=\"https://my.oschina.net/liughDevelop/blog/1788148\" target=\"_blank\" rel=\"noopener\">MySQL的索引是什么？怎么优化？</a></p>\n<p>explan或者describe, possible_key key key_len 执行的索引,已经扫描的行数row,如果是范围值的话，索引无效。</p>\n<p><a href=\"https://blog.csdn.net/qq_37307063/article/details/70141679\" target=\"_blank\" rel=\"noopener\">mysql索引的使用及优化方法</a>内有my.ini的配置参数解释</p>\n<h4 id=\"Oracle的dblink\"><a href=\"#Oracle的dblink\" class=\"headerlink\" title=\"Oracle的dblink\"></a>Oracle的dblink</h4><p>//00933问题一定要检查自己的SQL语句的语法 </p>\n<p>select * from user_sys_privs;//查找当前用户的权限是否具有dblink的create权限<br>grant create public database link,create database link to “account”; //分配权限</p>\n<p>select name,value from v$parameter where name=’service_names’ //查询服务名<br>select <em> from global_name;<br>select owner,object_name from dba_objects where object_type=’DATABASE LINK’;//查询已有的dblink<br>select </em> from dba_db_links;</p>\n<p>//两个创建 注意引号问题<br>create database link dblinktest connect to sstzjs_zjk identified by “12345678” using ‘19.131.106.252:1521/oracle’;<br>create public database link sstzjs_zjk.us.oracle.com connect to sstzjs_zjk IDENTIFIED BY “12345678” using ‘(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 19.131.106.252)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ORCL)))’;</p>\n<p>create public database link zrhs_link using ‘19.131.106.252:1521/oracle’;<br>在不指定用户名和口令的情况下，ORACLE使用当前的用户名和口令登录到远程数据库。<br>SELECT * FROM INS_BUSINESS_INFO@ZRHS_LINK</p>\n<p>DROP PUBLIC DATABASE LINK SSTZJS_ZJK.US.ORACLE.COM; //删除dblink</p>\n<h4 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h4><p>拼接：wm_concat (FDSXMC || ‘&amp;&amp;’) </p>\n<p>替换：update Prj_Project set projectname = replace(projectname,’华为’,’2’);</p>\n<p>导入数据库</p>\n<p>imp <a href=\"mailto:username/password@192.168.5.214\" target=\"_blank\" rel=\"noopener\">username/password@192.168.5.214</a>/ORCL file=D:\\daoru.dmp FULL=y</p>\n<p>导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分</p>\n<p>exp <a href=\"mailto:username/password@192.168.5.214\" target=\"_blank\" rel=\"noopener\">username/password@192.168.5.214</a>/ORCL file=d:\\daochu.dmp FULL=y</p>\n<p>exp <a href=\"mailto:XNJD20171225/12345678@192.168.2.240\" target=\"_blank\" rel=\"noopener\">XNJD20171225/12345678@192.168.2.240</a>/ORCL file=d:\\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容</p>\n<p>exp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据</p>\n<p>创建表空间<br>create tablespace WEBSITE<br>datafile ‘D:\\app\\zhang\\product\\11.1.0\\db_1\\SPACE_TBSPACE.dbf’<br>size 1500M autoextend on next 5M maxsize 3000M;</p>\n<p>create tablespace WEBSITE logging datafile D:\\app\\Myadmin.fs\\product\\11.2.0\\test1.dbf’ size 1024m;</p>\n<p>自动扩展：</p>\n<p>select tablespace_name,file_name,autoextensible  from dba_data_files;</p>\n<p>alter database datafile ‘D:\\APP\\MYADMIN.FS\\PRODUCT\\11.2.0\\SWBXN1.DBF’ autoextend on;</p>\n<p>开启自动扩展功能语法：<br>alter database datafile ‘对应的数据文件路径信息’ autoextend on;<br>关闭自动扩展功能语法：<br>alter database datafile ‘对应的数据文件路径信息’ autoextend off;</p>\n<p>创建用户，给权限<br>– Create the user<br>create user XNJD20180102<br>  identified by “12345678”<br>  default tablespace WEBSITE<br>  temporary tablespace TEMP<br>  profile DEFAULT;<br>– Grant/Revoke role privileges<br>grant connect to XNJD20180102 with admin option;<br>grant dba to XNJD20180102 with admin option;<br>– Grant/Revoke system privileges<br>grant unlimited tablespace to XNJD20180102;</p>\n<p>or</p>\n<p>create user XNJD20180102 identified by 12345678 default tablespace WEBSITE temporary tablespace temp; </p>\n<p>grant dba,connect,resource to XNJD20180102; </p>\n<h4 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h4><h5 id=\"表空间\"><a href=\"#表空间\" class=\"headerlink\" title=\"表空间\"></a>表空间</h5><p>SELECT a.tablespace_name “表空间名”,<br>a.bytes / 1024 / 1024 “表空间大小(M)”,<br>(a.bytes - b.bytes) / 1024 / 1024 “已使用空间(M)”,<br>b.bytes / 1024 / 1024 “空闲空间(M)”,<br>round(((a.bytes - b.bytes) / a.bytes) * 100, 2) “使用比”<br>FROM (SELECT tablespace_name, sum(bytes) bytes<br>FROM dba_data_files<br>GROUP BY tablespace_name) a,<br>(SELECT tablespace_name, sum(bytes) bytes, max(bytes) largest<br>FROM dba_free_space<br>GROUP BY tablespace_name) b<br>WHERE a.tablespace_name = b.tablespace_name<br>ORDER BY ((a.bytes - b.bytes) / a.bytes) DESC;</p>\n<p>select dbf.tablespace_name,<br>dbf.totalspace “总量(M)”,<br>dbf.totalblocks as 总块数,<br>dfs.freespace “剩余总量(M)”,<br>dfs.freeblocks “剩余块数”,<br>(dfs.freespace / dbf.totalspace) * 100 “空闲比例”<br>from (select t.tablespace_name,<br>sum(t.bytes) / 1024 / 1024 totalspace,<br>sum(t.blocks) totalblocks<br>from dba_data_files t<br>group by t.tablespace_name) dbf,<br>(select tt.tablespace_name,<br>sum(tt.bytes) / 1024 / 1024 freespace,<br>sum(tt.blocks) freeblocks<br>from dba_free_space tt<br>group by tt.tablespace_name) dfs<br>where trim(dbf.tablespace_name) = trim(dfs.tablespace_name);</p>\n<p>SELECT T.TABLESPACE_NAME,<br>D.FILE_NAME,<br>D.AUTOEXTENSIBLE,<br>D.BYTES,<br>D.MAXBYTES,<br>D.STATUS<br>FROM DBA_TABLESPACES T, DBA_DATA_FILES D<br>WHERE T.TABLESPACE_NAME = D.TABLESPACE_NAME<br>ORDER BY TABLESPACE_NAME, FILE_NAME;</p>\n<p>SELECT *  FROM dba_data_files  WHERE tablespace_name = ‘WEBSITE’;</p>\n<p>select blocks, maxblocks,file_name,tablespace_name from dba_data_files;</p>\n<p>alter tablespace WEBSITE add datafile ‘E:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\ORCL\\WEBSITE1.dbf’ size 5120M</p>\n<h5 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h5><p>查询正在运行的SQL:</p>\n<p>select a.program, b.spid, c.sql_text,c.SQL_ID from v$session a, v$process b, v$sqlarea c<br>where a.paddr = b.addr and a.sql_hash_value = c.hash_value and a.username is not null;</p>\n<p>上面的SQL_ID 完整的SQL: select a.* from v$sql a where a.SQL_ID=’43c5ykm1mcp2a’</p>\n<p>约束表:<br>ORACLE有关ORA-02292：违反完整约束条件（XXX.FKXXX）- 找到子记录的删除方法</p>\n<p>select a.constraint_name, a.table_name, b.constraint_name from user_constraints a, user_constraints b<br>where a.constraint_type = ‘R’ and b.constraint_type = ‘P’  and a.r_constraint_name = b.constraint_name<br>and a.constraint_name = ‘FKXXX’</p>\n<p>数据被锁，查看session, for update 导致的锁表问题等。</p>\n<h5 id=\"执行计划F5\"><a href=\"#执行计划F5\" class=\"headerlink\" title=\"执行计划F5\"></a>执行计划F5</h5><p><a href=\"https://www.cnblogs.com/Dreamer-1/p/6076440.html\" target=\"_blank\" rel=\"noopener\">看懂Oracle执行计划</a></p>\n<h4 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h4><p>测试环境Oracle 10g</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE OR REPLACE TRIGGER  T_INS_BUSINESSINFO_UPDATE    --T_INS_BUSINESSINFO_UPDATE 表示触发器的名字</span><br><span class=\"line\">AFTER update OF  CASEEXCHANGE       --CASEEXCHANGE  更新哪个字段</span><br><span class=\"line\">ON T_INS_BUSINESSINFO  -- T_INS_BUSINESSINFO触发的表</span><br><span class=\"line\">FOR EACH ROW -- 代表行级触发器</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"> UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;5&apos; </span><br><span class=\"line\"> WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE =&apos;3&apos; AND h.EXCHANGESTATUS = &apos;2&apos;;--收到材料回退</span><br><span class=\"line\"> UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;8&apos; </span><br><span class=\"line\"> WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE =&apos;4&apos; AND h.EXCHANGESTATUS = &apos;7&apos;;--已经领证调整</span><br><span class=\"line\"></span><br><span class=\"line\"> --DBMS_OUTPUT.PUT_LINE(&apos;旧的flongnumber值是&apos;||:old.FLONGNUMBER ||&apos;、新的flongnumber值是&apos;||:new.FLONGNUMBER); --  输出值</span><br><span class=\"line\"></span><br><span class=\"line\">END;</span><br></pre></td></tr></table></figure>\n<p>中间用到了dblink @ 多用用就可以啦还是挺简单的，就是不知道效率怎么样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--DROP TRIGGER TR_ORG_UPDATE;</span><br><span class=\"line\">select * from all_triggers  where table_name=&apos;T_INS_BUSINESSINFO&apos;;   </span><br><span class=\"line\">--UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;2&apos; WHERE h.bsnumcopy =&apos;1708111553000610N&apos;  -- :new.bsnum and :new.CASEEXCHANGE =&apos;3&apos;;</span><br></pre></td></tr></table></figure>\n<p>定义赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace trigger yearPaoId_trigger</span><br><span class=\"line\">before insert</span><br><span class=\"line\">on YEARPATENT</span><br><span class=\"line\">for each row</span><br><span class=\"line\">declare</span><br><span class=\"line\">v_yearPaoId number(9);//定义变量</span><br><span class=\"line\">v_yearPaoIdOld number(9);</span><br><span class=\"line\">begin</span><br><span class=\"line\">    select :new.yearPaoId into v_yearPaoId from YEARPATENT;//选择什么into到变量中</span><br><span class=\"line\">    select :new.yearPaoIdOld into v_yearPaoIdOld from YEARPATENT;</span><br><span class=\"line\">    update mapping@dbLinkName set newId = v_yearPaoId where oldId = v_yearPaoIdOld;</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n<p>下面这个是一个标准写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE OR REPLACE TRIGGER TG_NAME</span><br><span class=\"line\">　　BEFORE | AFTER</span><br><span class=\"line\">　　INSERT OR DELETE OR UPDATE [OF COL1,COL2,...]</span><br><span class=\"line\">　　ON 表名</span><br><span class=\"line\">　　[FOR EACH ROW]</span><br><span class=\"line\">　　[WHEN 条件]</span><br><span class=\"line\">　　DECLARE</span><br><span class=\"line\">　　...</span><br><span class=\"line\">　　BEGIN</span><br><span class=\"line\">　　....</span><br><span class=\"line\">　　EXCEPTION</span><br><span class=\"line\">　　...</span><br><span class=\"line\">　　END;</span><br><span class=\"line\">注: A) FOR EACH ROW 代表行级触发器.</span><br><span class=\"line\">　　B) WHEN: 只有符合该条件的时候才进行触发.</span><br><span class=\"line\">　　C) 可以通过INSERTING,DELETING,UPDATING来识别INSERT,DELETE,UPDATE操作.</span><br><span class=\"line\">　　D) 用:new 和:old(称为伪记录)来访问数据变更前后的值。</span><br><span class=\"line\">　　:NEW :INSERT,UPDATE之后的数据.</span><br><span class=\"line\">　　:OLD :DELETE,UDPATE之前的数据.</span><br><span class=\"line\">　　:old.字段名或:new.字段名</span><br><span class=\"line\">　　E) 触发器中的操作与触发事件(INSERT,UPDATE,DELETE)一起进行COMMIT和ROLLBACK;</span><br><span class=\"line\">　　REM 创建包含插入、删除、修改多种触发事件的触发器DML_LOG，对EMP表的操作进行记录。</span><br></pre></td></tr></table></figure>\n<h4 id=\"查重和去重、其他\"><a href=\"#查重和去重、其他\" class=\"headerlink\" title=\"查重和去重、其他\"></a>查重和去重、其他</h4><p>select t.*,t.rowid from table t<br>有个很好用的rownum  和 count(1)</p>\n<p>查重：select bsnum ,count(1) from table group by bsnum having count(1)&gt;1;</p>\n<p>去重：select distinct(bsnum) from table;</p>\n<p>复制表结构： create table newtable as select * from oldtable where 1=2</p>\n<p>复制表结构和数据： create table newtable as select * from oldtable </p>\n<p>删除数据：</p>\n<p>批量插入：从一个表中查出来的数据<br>insert into table2 (SELECT B.ID,B.NAME,B.ID,’5’,’5’,’5’,’5’,’5’,’5’ FROM table1 B WHERE B.STATUS != 0)</p>\n<h4 id=\"数据库编码\"><a href=\"#数据库编码\" class=\"headerlink\" title=\"数据库编码\"></a>数据库编码</h4><p>select <em> from nls_database_parameters;  –服务器<br>select </em> from nls_instance_parameters;  –客户端<br>select * from nls_session_parameters; –session 连接</p>\n<p>select userenv(‘language’) from dual;</p>\n<p>SELECT sys_context(‘userenv’, ‘language’) FROM dual;–查询服务端语言<br><a href=\"https://www.cnblogs.com/perilla/p/3873653.html\" target=\"_blank\" rel=\"noopener\">Oracle字符集的查看查询和Oracle字符集的设置修改</a></p>\n<p>group by 组合 listagg方法</p>\n<p>select pr.rolekey, pr.rolename as roleName,<br>listagg(fu.id,’,’)within group(order by rolename) as userIds,<br>listagg(to_char(fu.username),’,’)within group(order by rolename) as userNames<br>from t_roleuser t<br>left join t_user fu on fu.id = t.fk_userid<br>left join t_role pr on pr.id =t.fk_roleid<br>where  t.fk_projectid =? group by pr.rolename,pr.rolekey ;</p>\n<h4 id=\"oracle-tree\"><a href=\"#oracle-tree\" class=\"headerlink\" title=\"oracle tree\"></a>oracle tree</h4><p>ORACLE 数据库递归查询当前数据的所有孩子数据（不包含自己）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id   AS id,</span><br><span class=\"line\">  parent_id AS parentId,</span><br><span class=\"line\">  parent_id AS parent,</span><br><span class=\"line\">  name      AS text</span><br><span class=\"line\">FROM mdm_center</span><br><span class=\"line\">  START WITH parent_id = #&#123;parentId&#125;</span><br><span class=\"line\">  CONNECT BY prior id  = parent_id</span><br></pre></td></tr></table></figure></p>\n<p>ORACLE数据库查询当前数据的所有父数据（包含自己）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id   AS id,</span><br><span class=\"line\">  parent_id AS parentId,</span><br><span class=\"line\">  parent_id AS parent,</span><br><span class=\"line\">  name      AS text</span><br><span class=\"line\">FROM mdm_center</span><br><span class=\"line\">  START WITH id              = #&#123;centerId&#125;</span><br><span class=\"line\">  CONNECT BY prior parent_id = id</span><br></pre></td></tr></table></figure></p>\n<p>oracle tree 结构级联删除数据</p>\n<p>SELECT  t.*,t.rowid  FROM   t_sys_nodetree_count  t<br>CONNECT BY PRIOR id = pid start WITH ID = ‘20160406195638000013’</p>\n<p>delete from t_sys_nodetree_count where ID in<br>(SELECT ID  FROM  t_sys_nodetree_count<br>CONNECT BY PRIOR FENXID = FUJID start WITH ID = ‘20160406195638000013’)</p>"},{"title":"数据库监控-Druid监控配置","date":"2018-11-21T18:22:41.000Z","description":"监控Druid连接池运行情况，配合其他的Web URL Spring 等监控","_content":"\nDruid连接池监控问题，主要包括，配置，记录慢SQL等。\n<!--more-->\n\n[Github repo](https://github.com/alibaba/druid)\n[Github Druid Wiki](https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)\n\n\n## 添加监控页面\n\n\n\n##  WEB应用 URI监控 Spring监控 \n\nweb.xml,放在前面的，URI监控filter，\n\n```\n\n <!-- druid监控 http://host:port/druid/sql.html -->\n<filter>\n\t\t<filter-name>DruidWebStatFilter</filter-name>\n\t\t<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>\n\t\t<init-param>\n\t\t\t<!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中 -->\n\t\t\t<param-name>exclusions</param-name>\n\t\t\t<param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>\n\t\t</init-param>\n\t\t<!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 -->\n\t\t<init-param>\n\t\t\t<param-name>sessionStatMaxCount</param-name>\n\t\t\t<param-value>1000</param-value>\n\t\t</init-param>\n\t\t<!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表 -->\n\t\t<init-param>\n\t\t\t<param-name>profileEnable</param-name>\n\t\t\t<param-value>true</param-value>\n\t\t</init-param>\n\t\t<init-param>\n\t  \t\t<param-name>principalCookieName</param-name>\n  \t\t\t<param-value>userName</param-value>\n  \t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>principalSessionName</param-name>\n\t\t\t<param-value>session_user</param-value>\n\t\t</init-param>\n\t\t<!-- 你可以关闭session统计功能 \n\t\t<init-param> \n\t\t\t<param-name>sessionStatEnable</param-name> \n\t\t\t<param-value>true</param-value>\n\t\t</init-param> -->\n\t</filter>\n\t<filter-mapping>\n  \t\t<filter-name>DruidWebStatFilter</filter-name>\n  \t\t<url-pattern>/*</url-pattern>\n  \t</filter-mapping> \n  \t\n\t<servlet>\n\t\t<servlet-name>DruidStatView</servlet-name>\n\t\t<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>\n\t\t<!-- \n\t\t\tdeny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。\n\t\t\t如果allow没有配置或者为空，则允许所有访问\n\t\t -->\n\t\t<init-param>\n\t\t\t<param-name>allow</param-name>\n\t\t\t<param-value>10.38.94.201,127.0.0.1</param-value>\n\t\t</init-param>\n<!-- \t\t<init-param> -->\n<!-- \t\t\t<param-name>deny</param-name> -->\n<!-- \t\t\t<param-value>10.38.94.201</param-value> -->\n<!-- \t\t</init-param> -->\n\t\t<!-- 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数 -->\n\t   <span style=\"white-space:pre\">\t</span><init-param>\n\t        <span style=\"white-space:pre\">\t</span><param-name>resetEnable</param-name>\n\t        <span style=\"white-space:pre\">\t</span><param-value>false</param-value>\n\t    <span style=\"white-space:pre\">\t</span></init-param>\n\t    <span style=\"white-space:pre\">\t</span><!--  用户名和密码 -->\n\t    <span style=\"white-space:pre\">\t</span><init-param>\n\t\t\t<param-name>loginUsername</param-name>\n\t\t\t<param-value>druid</param-value>\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>loginPassword</param-name>\n\t\t\t<param-value>druid</param-value>\n\t\t</init-param>\n\t</servlet>\n\t<servlet-mapping>\n\t\t<servlet-name>DruidStatView</servlet-name>\n\t\t<url-pattern>/druid/*</url-pattern>\n\t</servlet-mapping>\n\n```\n\nspring.xml 监控Spring\n\n```\n\t<!-- spring 监控 -->\n    <bean id=\"druid-stat-interceptor\"\n          class=\"com.alibaba.druid.support.spring.stat.DruidStatInterceptor\">\n    </bean>\n \n    <bean id=\"druid-stat-pointcut\" class=\"org.springframework.aop.support.JdkRegexpMethodPointcut\"\n          scope=\"prototype\">\n        <property name=\"patterns\">\n            <list>\n                <value>cn.forp.*.service.*.*(..)</value>\n                <value>cn.forp.*.controller.*.*(..)</value>\n            </list>\n        </property>\n    </bean>\n \n    <aop:config>\n        <aop:advisor advice-ref=\"druid-stat-interceptor\" pointcut-ref=\"druid-stat-pointcut\"/>\n    </aop:config>\n\n\n```\n## 慢SQL日志记录\n\n\nspring.xml的 dataSource bean\n\n```\n\n\t<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\"> \n\n\t\t<property name=\"url\" value=\"jdbc:oracle:thin:@host:port/orcl\"/>\n\t\t<property name=\"username\" value=\"\"/>\n\t\t<property name=\"password\" value=\"\"/>\n\n\t\t<property name=\"validationQuery\" value=\"select 'x' from dual\"/>\n\n\t\t<!-- 配置初始化大小、最小、最大 -->\n\t\t<property name=\"initialSize\" value=\"2\"/>\n\t\t<property name=\"minIdle\" value=\"1\"/> \n\t\t<property name=\"maxActive\" value=\"5\"/>\n\t\t<!-- 配置获取连接等待超时的时间，单位是毫秒 -->\n\t\t<property name=\"maxWait\" value=\"60000\"/>\n\t\t<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n\t\t<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n\t\t<property name=\"testWhileIdle\" value=\"true\"/>\n\t\t<property name=\"testOnBorrow\" value=\"false\"/>\n\t\t<property name=\"testOnReturn\" value=\"false\"/>\n\t\t<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n\t\t<property name=\"poolPreparedStatements\" value=\"true\"/>\n\t\t<property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n\t\t<!-- 启用拦截的filters：sql注入，监控统计 -->\n \t\t<property name=\"filters\" value=\"wall,stat\"/>\n\n\t\t<property name=\"removeAbandoned\" value=\"true\" /> <!-- 打开removeAbandoned功能 -->\n\t  \t<property name=\"removeAbandonedTimeout\" value=\"1800\" /> <!-- 1800秒，也就是30分钟 -->\n  \t\t<property name=\"logAbandoned\" value=\"true\" /> <!-- 关闭abanded连接时输出错误日志 -->\n\n\t\t<property name=\"proxyFilters\">\n            <list>\n                <ref bean=\"stat-filter\"/>\n                <ref bean=\"log-filter\"/>\n            </list>\n        </property>\n\t</bean>\n\t    <!-- 慢SQL记录 -->\n    <bean id=\"stat-filter\" class=\"com.alibaba.druid.filter.stat.StatFilter\">\n        <!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql -->\n        <property name=\"slowSqlMillis\" value=\"200\"/>\n        <property name=\"logSlowSql\" value=\"true\"/>\n    </bean>\n \n    <bean id=\"log-filter\" class=\"com.alibaba.druid.filter.logging.Log4jFilter\">\n        <property name=\"dataSourceLogEnabled\" value=\"true\" />\n        <property name=\"statementExecutableSqlLogEnable\" value=\"true\" />\n    </bean>\n\n\n```\n\nlog4j.properties\n\n```\n# ROOT Logger\nlog4j.rootLogger = INFO, console, druid\n\n# log4j.category.org.springframework = DEBUG\nlog4j.category.cn.forp = DEBUG\n\n# Console\nlog4j.appender.console = org.apache.log4j.ConsoleAppender\nlog4j.appender.console.layout = org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1} %m%n\n\n# File\nlog4j.appender.file = org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.file.file = ${catalina.home}/logs/forp-pitaya.log\nlog4j.appender.file.DatePattern = '.'yyyy-MM-dd\nlog4j.appender.file.layout = org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.conversionPattern = [%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1} %m%n\nlog4j.appender.file.append =false\n\n# Druid\nlog4j.logger.druid.sql=WARN,druid\nlog4j.logger.druid.sql.DataSource=WARN,druid\nlog4j.logger.druid.sql.Connection=WARN,druid\nlog4j.logger.druid.sql.Statement=WARN,druid\n\nlog4j.appender.druid=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.druid.layout=org.apache.log4j.PatternLayout\nlog4j.appender.druid.layout.ConversionPattern= [%d{yyyy-MM-dd HH\\:mm\\:ss}] %c{1} - %m%n\nlog4j.appender.druid.datePattern='.'yyyy-MM-dd\nlog4j.appender.druid.Threshold = WARN\nlog4j.appender.druid.append=true\nlog4j.appender.druid.File=${catalina.home}/logs/druid-slow-sql.log\n\n\n```\n\n\n参考：\n\n- [使用Druid监控SQL执行状态](https://my.oschina.net/wangmengjun/blog/788386)\n- [druid监控及慢sql记录](https://blog.csdn.net/haiyang4988/article/details/73740700)\n- [Druid Monitor监控JavaSE和JavaWeb](https://blog.csdn.net/binglovezi/article/details/50610269#)\n- [JavaSE 监控](https://github.com/alibaba/druid/blob/master/src/main/scripts/druidStat.sh)","source":"_posts/数据库监控-Druid监控配置.md","raw":"---\ntitle: 数据库监控-Druid监控配置\ndate: 2018-11-22 02:22:41\ntags: [连接池]\ncategories: [SQL, 系统监控优化,数据库]\ndescription: \"监控Druid连接池运行情况，配合其他的Web URL Spring 等监控\"\n---\n\nDruid连接池监控问题，主要包括，配置，记录慢SQL等。\n<!--more-->\n\n[Github repo](https://github.com/alibaba/druid)\n[Github Druid Wiki](https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)\n\n\n## 添加监控页面\n\n\n\n##  WEB应用 URI监控 Spring监控 \n\nweb.xml,放在前面的，URI监控filter，\n\n```\n\n <!-- druid监控 http://host:port/druid/sql.html -->\n<filter>\n\t\t<filter-name>DruidWebStatFilter</filter-name>\n\t\t<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>\n\t\t<init-param>\n\t\t\t<!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中 -->\n\t\t\t<param-name>exclusions</param-name>\n\t\t\t<param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>\n\t\t</init-param>\n\t\t<!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 -->\n\t\t<init-param>\n\t\t\t<param-name>sessionStatMaxCount</param-name>\n\t\t\t<param-value>1000</param-value>\n\t\t</init-param>\n\t\t<!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表 -->\n\t\t<init-param>\n\t\t\t<param-name>profileEnable</param-name>\n\t\t\t<param-value>true</param-value>\n\t\t</init-param>\n\t\t<init-param>\n\t  \t\t<param-name>principalCookieName</param-name>\n  \t\t\t<param-value>userName</param-value>\n  \t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>principalSessionName</param-name>\n\t\t\t<param-value>session_user</param-value>\n\t\t</init-param>\n\t\t<!-- 你可以关闭session统计功能 \n\t\t<init-param> \n\t\t\t<param-name>sessionStatEnable</param-name> \n\t\t\t<param-value>true</param-value>\n\t\t</init-param> -->\n\t</filter>\n\t<filter-mapping>\n  \t\t<filter-name>DruidWebStatFilter</filter-name>\n  \t\t<url-pattern>/*</url-pattern>\n  \t</filter-mapping> \n  \t\n\t<servlet>\n\t\t<servlet-name>DruidStatView</servlet-name>\n\t\t<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>\n\t\t<!-- \n\t\t\tdeny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。\n\t\t\t如果allow没有配置或者为空，则允许所有访问\n\t\t -->\n\t\t<init-param>\n\t\t\t<param-name>allow</param-name>\n\t\t\t<param-value>10.38.94.201,127.0.0.1</param-value>\n\t\t</init-param>\n<!-- \t\t<init-param> -->\n<!-- \t\t\t<param-name>deny</param-name> -->\n<!-- \t\t\t<param-value>10.38.94.201</param-value> -->\n<!-- \t\t</init-param> -->\n\t\t<!-- 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数 -->\n\t   <span style=\"white-space:pre\">\t</span><init-param>\n\t        <span style=\"white-space:pre\">\t</span><param-name>resetEnable</param-name>\n\t        <span style=\"white-space:pre\">\t</span><param-value>false</param-value>\n\t    <span style=\"white-space:pre\">\t</span></init-param>\n\t    <span style=\"white-space:pre\">\t</span><!--  用户名和密码 -->\n\t    <span style=\"white-space:pre\">\t</span><init-param>\n\t\t\t<param-name>loginUsername</param-name>\n\t\t\t<param-value>druid</param-value>\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>loginPassword</param-name>\n\t\t\t<param-value>druid</param-value>\n\t\t</init-param>\n\t</servlet>\n\t<servlet-mapping>\n\t\t<servlet-name>DruidStatView</servlet-name>\n\t\t<url-pattern>/druid/*</url-pattern>\n\t</servlet-mapping>\n\n```\n\nspring.xml 监控Spring\n\n```\n\t<!-- spring 监控 -->\n    <bean id=\"druid-stat-interceptor\"\n          class=\"com.alibaba.druid.support.spring.stat.DruidStatInterceptor\">\n    </bean>\n \n    <bean id=\"druid-stat-pointcut\" class=\"org.springframework.aop.support.JdkRegexpMethodPointcut\"\n          scope=\"prototype\">\n        <property name=\"patterns\">\n            <list>\n                <value>cn.forp.*.service.*.*(..)</value>\n                <value>cn.forp.*.controller.*.*(..)</value>\n            </list>\n        </property>\n    </bean>\n \n    <aop:config>\n        <aop:advisor advice-ref=\"druid-stat-interceptor\" pointcut-ref=\"druid-stat-pointcut\"/>\n    </aop:config>\n\n\n```\n## 慢SQL日志记录\n\n\nspring.xml的 dataSource bean\n\n```\n\n\t<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\"> \n\n\t\t<property name=\"url\" value=\"jdbc:oracle:thin:@host:port/orcl\"/>\n\t\t<property name=\"username\" value=\"\"/>\n\t\t<property name=\"password\" value=\"\"/>\n\n\t\t<property name=\"validationQuery\" value=\"select 'x' from dual\"/>\n\n\t\t<!-- 配置初始化大小、最小、最大 -->\n\t\t<property name=\"initialSize\" value=\"2\"/>\n\t\t<property name=\"minIdle\" value=\"1\"/> \n\t\t<property name=\"maxActive\" value=\"5\"/>\n\t\t<!-- 配置获取连接等待超时的时间，单位是毫秒 -->\n\t\t<property name=\"maxWait\" value=\"60000\"/>\n\t\t<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n\t\t<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n\t\t<property name=\"testWhileIdle\" value=\"true\"/>\n\t\t<property name=\"testOnBorrow\" value=\"false\"/>\n\t\t<property name=\"testOnReturn\" value=\"false\"/>\n\t\t<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n\t\t<property name=\"poolPreparedStatements\" value=\"true\"/>\n\t\t<property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n\t\t<!-- 启用拦截的filters：sql注入，监控统计 -->\n \t\t<property name=\"filters\" value=\"wall,stat\"/>\n\n\t\t<property name=\"removeAbandoned\" value=\"true\" /> <!-- 打开removeAbandoned功能 -->\n\t  \t<property name=\"removeAbandonedTimeout\" value=\"1800\" /> <!-- 1800秒，也就是30分钟 -->\n  \t\t<property name=\"logAbandoned\" value=\"true\" /> <!-- 关闭abanded连接时输出错误日志 -->\n\n\t\t<property name=\"proxyFilters\">\n            <list>\n                <ref bean=\"stat-filter\"/>\n                <ref bean=\"log-filter\"/>\n            </list>\n        </property>\n\t</bean>\n\t    <!-- 慢SQL记录 -->\n    <bean id=\"stat-filter\" class=\"com.alibaba.druid.filter.stat.StatFilter\">\n        <!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql -->\n        <property name=\"slowSqlMillis\" value=\"200\"/>\n        <property name=\"logSlowSql\" value=\"true\"/>\n    </bean>\n \n    <bean id=\"log-filter\" class=\"com.alibaba.druid.filter.logging.Log4jFilter\">\n        <property name=\"dataSourceLogEnabled\" value=\"true\" />\n        <property name=\"statementExecutableSqlLogEnable\" value=\"true\" />\n    </bean>\n\n\n```\n\nlog4j.properties\n\n```\n# ROOT Logger\nlog4j.rootLogger = INFO, console, druid\n\n# log4j.category.org.springframework = DEBUG\nlog4j.category.cn.forp = DEBUG\n\n# Console\nlog4j.appender.console = org.apache.log4j.ConsoleAppender\nlog4j.appender.console.layout = org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1} %m%n\n\n# File\nlog4j.appender.file = org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.file.file = ${catalina.home}/logs/forp-pitaya.log\nlog4j.appender.file.DatePattern = '.'yyyy-MM-dd\nlog4j.appender.file.layout = org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.conversionPattern = [%d{yyyy-MM-dd HH:mm:ss}] %5p %c{1} %m%n\nlog4j.appender.file.append =false\n\n# Druid\nlog4j.logger.druid.sql=WARN,druid\nlog4j.logger.druid.sql.DataSource=WARN,druid\nlog4j.logger.druid.sql.Connection=WARN,druid\nlog4j.logger.druid.sql.Statement=WARN,druid\n\nlog4j.appender.druid=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.druid.layout=org.apache.log4j.PatternLayout\nlog4j.appender.druid.layout.ConversionPattern= [%d{yyyy-MM-dd HH\\:mm\\:ss}] %c{1} - %m%n\nlog4j.appender.druid.datePattern='.'yyyy-MM-dd\nlog4j.appender.druid.Threshold = WARN\nlog4j.appender.druid.append=true\nlog4j.appender.druid.File=${catalina.home}/logs/druid-slow-sql.log\n\n\n```\n\n\n参考：\n\n- [使用Druid监控SQL执行状态](https://my.oschina.net/wangmengjun/blog/788386)\n- [druid监控及慢sql记录](https://blog.csdn.net/haiyang4988/article/details/73740700)\n- [Druid Monitor监控JavaSE和JavaWeb](https://blog.csdn.net/binglovezi/article/details/50610269#)\n- [JavaSE 监控](https://github.com/alibaba/druid/blob/master/src/main/scripts/druidStat.sh)","slug":"数据库监控-Druid监控配置","published":1,"updated":"2019-01-11T02:51:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz79z007lugv57yc321tp","content":"<p>Druid连接池监控问题，主要包括，配置，记录慢SQL等。<br><a id=\"more\"></a></p>\n<p><a href=\"https://github.com/alibaba/druid\" target=\"_blank\" rel=\"noopener\">Github repo</a><br><a href=\"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">Github Druid Wiki</a></p>\n<h2 id=\"添加监控页面\"><a href=\"#添加监控页面\" class=\"headerlink\" title=\"添加监控页面\"></a>添加监控页面</h2><h2 id=\"WEB应用-URI监控-Spring监控\"><a href=\"#WEB应用-URI监控-Spring监控\" class=\"headerlink\" title=\"WEB应用 URI监控 Spring监控\"></a>WEB应用 URI监控 Spring监控</h2><p>web.xml,放在前面的，URI监控filter，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> &lt;!-- druid监控 http://host:port/druid/sql.html --&gt;</span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">\t\t&lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;</span><br><span class=\"line\">\t\t&lt;filter-class&gt;com.alibaba.druid.support.http.WebStatFilter&lt;/filter-class&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中 --&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;exclusions&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 --&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;sessionStatMaxCount&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;1000&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表 --&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;profileEnable&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t  \t\t&lt;param-name&gt;principalCookieName&lt;/param-name&gt;</span><br><span class=\"line\">  \t\t\t&lt;param-value&gt;userName&lt;/param-value&gt;</span><br><span class=\"line\">  \t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;principalSessionName&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;session_user&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;!-- 你可以关闭session统计功能 </span><br><span class=\"line\">\t\t&lt;init-param&gt; </span><br><span class=\"line\">\t\t\t&lt;param-name&gt;sessionStatEnable&lt;/param-name&gt; </span><br><span class=\"line\">\t\t\t&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt; --&gt;</span><br><span class=\"line\">\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;filter-mapping&gt;</span><br><span class=\"line\">  \t\t&lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;</span><br><span class=\"line\">  \t\t&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">  \t&lt;/filter-mapping&gt; </span><br><span class=\"line\">  \t</span><br><span class=\"line\">\t&lt;servlet&gt;</span><br><span class=\"line\">\t\t&lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class=\"line\">\t\t&lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">\t\t&lt;!-- </span><br><span class=\"line\">\t\t\tdeny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。</span><br><span class=\"line\">\t\t\t如果allow没有配置或者为空，则允许所有访问</span><br><span class=\"line\">\t\t --&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;allow&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;10.38.94.201,127.0.0.1&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">&lt;!-- \t\t&lt;init-param&gt; --&gt;</span><br><span class=\"line\">&lt;!-- \t\t\t&lt;param-name&gt;deny&lt;/param-name&gt; --&gt;</span><br><span class=\"line\">&lt;!-- \t\t\t&lt;param-value&gt;10.38.94.201&lt;/param-value&gt; --&gt;</span><br><span class=\"line\">&lt;!-- \t\t&lt;/init-param&gt; --&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数 --&gt;</span><br><span class=\"line\">\t   &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;init-param&gt;</span><br><span class=\"line\">\t        &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;param-name&gt;resetEnable&lt;/param-name&gt;</span><br><span class=\"line\">\t        &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class=\"line\">\t    &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;/init-param&gt;</span><br><span class=\"line\">\t    &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;!--  用户名和密码 --&gt;</span><br><span class=\"line\">\t    &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;loginUsername&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;druid&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;loginPassword&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;druid&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t&lt;/servlet&gt;</span><br><span class=\"line\">\t&lt;servlet-mapping&gt;</span><br><span class=\"line\">\t\t&lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class=\"line\">\t\t&lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt;</span><br><span class=\"line\">\t&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>spring.xml 监控Spring</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- spring 监控 --&gt;</span><br><span class=\"line\">   &lt;bean id=&quot;druid-stat-interceptor&quot;</span><br><span class=\"line\">         class=&quot;com.alibaba.druid.support.spring.stat.DruidStatInterceptor&quot;&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;bean id=&quot;druid-stat-pointcut&quot; class=&quot;org.springframework.aop.support.JdkRegexpMethodPointcut&quot;</span><br><span class=\"line\">         scope=&quot;prototype&quot;&gt;</span><br><span class=\"line\">       &lt;property name=&quot;patterns&quot;&gt;</span><br><span class=\"line\">           &lt;list&gt;</span><br><span class=\"line\">               &lt;value&gt;cn.forp.*.service.*.*(..)&lt;/value&gt;</span><br><span class=\"line\">               &lt;value&gt;cn.forp.*.controller.*.*(..)&lt;/value&gt;</span><br><span class=\"line\">           &lt;/list&gt;</span><br><span class=\"line\">       &lt;/property&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;aop:config&gt;</span><br><span class=\"line\">       &lt;aop:advisor advice-ref=&quot;druid-stat-interceptor&quot; pointcut-ref=&quot;druid-stat-pointcut&quot;/&gt;</span><br><span class=\"line\">   &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"慢SQL日志记录\"><a href=\"#慢SQL日志记录\" class=\"headerlink\" title=\"慢SQL日志记录\"></a>慢SQL日志记录</h2><p>spring.xml的 dataSource bean</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@host:port/orcl&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;username&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;property name=&quot;validationQuery&quot; value=&quot;select &apos;x&apos; from dual&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;initialSize&quot; value=&quot;2&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;minIdle&quot; value=&quot;1&quot;/&gt; </span><br><span class=\"line\">\t&lt;property name=&quot;maxActive&quot; value=&quot;5&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 配置获取连接等待超时的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 启用拦截的filters：sql注入，监控统计 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;filters&quot; value=&quot;wall,stat&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class=\"line\">  \t&lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1800&quot; /&gt; &lt;!-- 1800秒，也就是30分钟 --&gt;</span><br><span class=\"line\"> \t\t&lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;property name=&quot;proxyFilters&quot;&gt;</span><br><span class=\"line\">           &lt;list&gt;</span><br><span class=\"line\">               &lt;ref bean=&quot;stat-filter&quot;/&gt;</span><br><span class=\"line\">               &lt;ref bean=&quot;log-filter&quot;/&gt;</span><br><span class=\"line\">           &lt;/list&gt;</span><br><span class=\"line\">       &lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\">    &lt;!-- 慢SQL记录 --&gt;</span><br><span class=\"line\">   &lt;bean id=&quot;stat-filter&quot; class=&quot;com.alibaba.druid.filter.stat.StatFilter&quot;&gt;</span><br><span class=\"line\">       &lt;!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql --&gt;</span><br><span class=\"line\">       &lt;property name=&quot;slowSqlMillis&quot; value=&quot;200&quot;/&gt;</span><br><span class=\"line\">       &lt;property name=&quot;logSlowSql&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;bean id=&quot;log-filter&quot; class=&quot;com.alibaba.druid.filter.logging.Log4jFilter&quot;&gt;</span><br><span class=\"line\">       &lt;property name=&quot;dataSourceLogEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">       &lt;property name=&quot;statementExecutableSqlLogEnable&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>log4j.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ROOT Logger</span><br><span class=\"line\">log4j.rootLogger = INFO, console, druid</span><br><span class=\"line\"></span><br><span class=\"line\"># log4j.category.org.springframework = DEBUG</span><br><span class=\"line\">log4j.category.cn.forp = DEBUG</span><br><span class=\"line\"></span><br><span class=\"line\"># Console</span><br><span class=\"line\">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.console.layout.ConversionPattern = [%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %5p %c&#123;1&#125; %m%n</span><br><span class=\"line\"></span><br><span class=\"line\"># File</span><br><span class=\"line\">log4j.appender.file = org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.file.file = $&#123;catalina.home&#125;/logs/forp-pitaya.log</span><br><span class=\"line\">log4j.appender.file.DatePattern = &apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">log4j.appender.file.layout = org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.file.layout.conversionPattern = [%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %5p %c&#123;1&#125; %m%n</span><br><span class=\"line\">log4j.appender.file.append =false</span><br><span class=\"line\"></span><br><span class=\"line\"># Druid</span><br><span class=\"line\">log4j.logger.druid.sql=WARN,druid</span><br><span class=\"line\">log4j.logger.druid.sql.DataSource=WARN,druid</span><br><span class=\"line\">log4j.logger.druid.sql.Connection=WARN,druid</span><br><span class=\"line\">log4j.logger.druid.sql.Statement=WARN,druid</span><br><span class=\"line\"></span><br><span class=\"line\">log4j.appender.druid=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.druid.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.druid.layout.ConversionPattern= [%d&#123;yyyy-MM-dd HH\\:mm\\:ss&#125;] %c&#123;1&#125; - %m%n</span><br><span class=\"line\">log4j.appender.druid.datePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">log4j.appender.druid.Threshold = WARN</span><br><span class=\"line\">log4j.appender.druid.append=true</span><br><span class=\"line\">log4j.appender.druid.File=$&#123;catalina.home&#125;/logs/druid-slow-sql.log</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://my.oschina.net/wangmengjun/blog/788386\" target=\"_blank\" rel=\"noopener\">使用Druid监控SQL执行状态</a></li>\n<li><a href=\"https://blog.csdn.net/haiyang4988/article/details/73740700\" target=\"_blank\" rel=\"noopener\">druid监控及慢sql记录</a></li>\n<li><a href=\"https://blog.csdn.net/binglovezi/article/details/50610269#\" target=\"_blank\" rel=\"noopener\">Druid Monitor监控JavaSE和JavaWeb</a></li>\n<li><a href=\"https://github.com/alibaba/druid/blob/master/src/main/scripts/druidStat.sh\" target=\"_blank\" rel=\"noopener\">JavaSE 监控</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Druid连接池监控问题，主要包括，配置，记录慢SQL等。<br></p>","more":"<p></p>\n<p><a href=\"https://github.com/alibaba/druid\" target=\"_blank\" rel=\"noopener\">Github repo</a><br><a href=\"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" target=\"_blank\" rel=\"noopener\">Github Druid Wiki</a></p>\n<h2 id=\"添加监控页面\"><a href=\"#添加监控页面\" class=\"headerlink\" title=\"添加监控页面\"></a>添加监控页面</h2><h2 id=\"WEB应用-URI监控-Spring监控\"><a href=\"#WEB应用-URI监控-Spring监控\" class=\"headerlink\" title=\"WEB应用 URI监控 Spring监控\"></a>WEB应用 URI监控 Spring监控</h2><p>web.xml,放在前面的，URI监控filter，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> &lt;!-- druid监控 http://host:port/druid/sql.html --&gt;</span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">\t\t&lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;</span><br><span class=\"line\">\t\t&lt;filter-class&gt;com.alibaba.druid.support.http.WebStatFilter&lt;/filter-class&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中 --&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;exclusions&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 --&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;sessionStatMaxCount&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;1000&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表 --&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;profileEnable&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t  \t\t&lt;param-name&gt;principalCookieName&lt;/param-name&gt;</span><br><span class=\"line\">  \t\t\t&lt;param-value&gt;userName&lt;/param-value&gt;</span><br><span class=\"line\">  \t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;principalSessionName&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;session_user&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;!-- 你可以关闭session统计功能 </span><br><span class=\"line\">\t\t&lt;init-param&gt; </span><br><span class=\"line\">\t\t\t&lt;param-name&gt;sessionStatEnable&lt;/param-name&gt; </span><br><span class=\"line\">\t\t\t&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt; --&gt;</span><br><span class=\"line\">\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;filter-mapping&gt;</span><br><span class=\"line\">  \t\t&lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;</span><br><span class=\"line\">  \t\t&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">  \t&lt;/filter-mapping&gt; </span><br><span class=\"line\">  \t</span><br><span class=\"line\">\t&lt;servlet&gt;</span><br><span class=\"line\">\t\t&lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class=\"line\">\t\t&lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">\t\t&lt;!-- </span><br><span class=\"line\">\t\t\tdeny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。</span><br><span class=\"line\">\t\t\t如果allow没有配置或者为空，则允许所有访问</span><br><span class=\"line\">\t\t --&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;allow&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;10.38.94.201,127.0.0.1&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">&lt;!-- \t\t&lt;init-param&gt; --&gt;</span><br><span class=\"line\">&lt;!-- \t\t\t&lt;param-name&gt;deny&lt;/param-name&gt; --&gt;</span><br><span class=\"line\">&lt;!-- \t\t\t&lt;param-value&gt;10.38.94.201&lt;/param-value&gt; --&gt;</span><br><span class=\"line\">&lt;!-- \t\t&lt;/init-param&gt; --&gt;</span><br><span class=\"line\">\t\t&lt;!-- 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数 --&gt;</span><br><span class=\"line\">\t   &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;init-param&gt;</span><br><span class=\"line\">\t        &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;param-name&gt;resetEnable&lt;/param-name&gt;</span><br><span class=\"line\">\t        &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class=\"line\">\t    &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;/init-param&gt;</span><br><span class=\"line\">\t    &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;!--  用户名和密码 --&gt;</span><br><span class=\"line\">\t    &lt;span style=&quot;white-space:pre&quot;&gt;\t&lt;/span&gt;&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;loginUsername&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;druid&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;loginPassword&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;druid&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t&lt;/servlet&gt;</span><br><span class=\"line\">\t&lt;servlet-mapping&gt;</span><br><span class=\"line\">\t\t&lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class=\"line\">\t\t&lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt;</span><br><span class=\"line\">\t&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>spring.xml 监控Spring</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- spring 监控 --&gt;</span><br><span class=\"line\">   &lt;bean id=&quot;druid-stat-interceptor&quot;</span><br><span class=\"line\">         class=&quot;com.alibaba.druid.support.spring.stat.DruidStatInterceptor&quot;&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;bean id=&quot;druid-stat-pointcut&quot; class=&quot;org.springframework.aop.support.JdkRegexpMethodPointcut&quot;</span><br><span class=\"line\">         scope=&quot;prototype&quot;&gt;</span><br><span class=\"line\">       &lt;property name=&quot;patterns&quot;&gt;</span><br><span class=\"line\">           &lt;list&gt;</span><br><span class=\"line\">               &lt;value&gt;cn.forp.*.service.*.*(..)&lt;/value&gt;</span><br><span class=\"line\">               &lt;value&gt;cn.forp.*.controller.*.*(..)&lt;/value&gt;</span><br><span class=\"line\">           &lt;/list&gt;</span><br><span class=\"line\">       &lt;/property&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;aop:config&gt;</span><br><span class=\"line\">       &lt;aop:advisor advice-ref=&quot;druid-stat-interceptor&quot; pointcut-ref=&quot;druid-stat-pointcut&quot;/&gt;</span><br><span class=\"line\">   &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"慢SQL日志记录\"><a href=\"#慢SQL日志记录\" class=\"headerlink\" title=\"慢SQL日志记录\"></a>慢SQL日志记录</h2><p>spring.xml的 dataSource bean</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@host:port/orcl&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;username&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;property name=&quot;validationQuery&quot; value=&quot;select &apos;x&apos; from dual&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;initialSize&quot; value=&quot;2&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;minIdle&quot; value=&quot;1&quot;/&gt; </span><br><span class=\"line\">\t&lt;property name=&quot;maxActive&quot; value=&quot;5&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 配置获取连接等待超时的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">\t&lt;!-- 启用拦截的filters：sql注入，监控统计 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;filters&quot; value=&quot;wall,stat&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class=\"line\">  \t&lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1800&quot; /&gt; &lt;!-- 1800秒，也就是30分钟 --&gt;</span><br><span class=\"line\"> \t\t&lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;property name=&quot;proxyFilters&quot;&gt;</span><br><span class=\"line\">           &lt;list&gt;</span><br><span class=\"line\">               &lt;ref bean=&quot;stat-filter&quot;/&gt;</span><br><span class=\"line\">               &lt;ref bean=&quot;log-filter&quot;/&gt;</span><br><span class=\"line\">           &lt;/list&gt;</span><br><span class=\"line\">       &lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\">    &lt;!-- 慢SQL记录 --&gt;</span><br><span class=\"line\">   &lt;bean id=&quot;stat-filter&quot; class=&quot;com.alibaba.druid.filter.stat.StatFilter&quot;&gt;</span><br><span class=\"line\">       &lt;!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql --&gt;</span><br><span class=\"line\">       &lt;property name=&quot;slowSqlMillis&quot; value=&quot;200&quot;/&gt;</span><br><span class=\"line\">       &lt;property name=&quot;logSlowSql&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;bean id=&quot;log-filter&quot; class=&quot;com.alibaba.druid.filter.logging.Log4jFilter&quot;&gt;</span><br><span class=\"line\">       &lt;property name=&quot;dataSourceLogEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">       &lt;property name=&quot;statementExecutableSqlLogEnable&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>log4j.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ROOT Logger</span><br><span class=\"line\">log4j.rootLogger = INFO, console, druid</span><br><span class=\"line\"></span><br><span class=\"line\"># log4j.category.org.springframework = DEBUG</span><br><span class=\"line\">log4j.category.cn.forp = DEBUG</span><br><span class=\"line\"></span><br><span class=\"line\"># Console</span><br><span class=\"line\">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.console.layout.ConversionPattern = [%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %5p %c&#123;1&#125; %m%n</span><br><span class=\"line\"></span><br><span class=\"line\"># File</span><br><span class=\"line\">log4j.appender.file = org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.file.file = $&#123;catalina.home&#125;/logs/forp-pitaya.log</span><br><span class=\"line\">log4j.appender.file.DatePattern = &apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">log4j.appender.file.layout = org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.file.layout.conversionPattern = [%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %5p %c&#123;1&#125; %m%n</span><br><span class=\"line\">log4j.appender.file.append =false</span><br><span class=\"line\"></span><br><span class=\"line\"># Druid</span><br><span class=\"line\">log4j.logger.druid.sql=WARN,druid</span><br><span class=\"line\">log4j.logger.druid.sql.DataSource=WARN,druid</span><br><span class=\"line\">log4j.logger.druid.sql.Connection=WARN,druid</span><br><span class=\"line\">log4j.logger.druid.sql.Statement=WARN,druid</span><br><span class=\"line\"></span><br><span class=\"line\">log4j.appender.druid=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.druid.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.druid.layout.ConversionPattern= [%d&#123;yyyy-MM-dd HH\\:mm\\:ss&#125;] %c&#123;1&#125; - %m%n</span><br><span class=\"line\">log4j.appender.druid.datePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">log4j.appender.druid.Threshold = WARN</span><br><span class=\"line\">log4j.appender.druid.append=true</span><br><span class=\"line\">log4j.appender.druid.File=$&#123;catalina.home&#125;/logs/druid-slow-sql.log</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://my.oschina.net/wangmengjun/blog/788386\" target=\"_blank\" rel=\"noopener\">使用Druid监控SQL执行状态</a></li>\n<li><a href=\"https://blog.csdn.net/haiyang4988/article/details/73740700\" target=\"_blank\" rel=\"noopener\">druid监控及慢sql记录</a></li>\n<li><a href=\"https://blog.csdn.net/binglovezi/article/details/50610269#\" target=\"_blank\" rel=\"noopener\">Druid Monitor监控JavaSE和JavaWeb</a></li>\n<li><a href=\"https://github.com/alibaba/druid/blob/master/src/main/scripts/druidStat.sh\" target=\"_blank\" rel=\"noopener\">JavaSE 监控</a></li>\n</ul>"},{"title":"模仿jQuery创建自己的js工具","date":"2016-09-12T21:02:46.000Z","description":"大致描述jQuery的框架原理，包括init,extend,noConflict等方法","_content":"\n\n# jQuery分析实践\n\n#### 匿名函数自执行\n```\n;(function(){})(window);\n\n```\n\n首先所有的代码都包含在这个匿名函数中，并且自执行，这样保证代码不会污染其他的合作者，那么jQuery对象又是怎么被我们使用的呢？我们来看第二段代码。\n```\n\twindow.jQuery = window.$ = jQuery;\n```\n一般情况下，jQuery直接在window下挂在jQuery和$命名空间，这样使用（jQuery/$）直接调用即可。但是许多框架下都会使用$来作为自己的命名空间，这样的话就会产生冲突，因此jQury添加了noConflict()方法，\n\n```\nvar\n\t_jQuery = window.jQuery,\n\t_$ = window.$;\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\treturn jQuery;\n};\n\n```\n这里首先，如果在window下有jQuery或者$的话，就把他们暂存到_jQuery/_$命名空间下，然后\n调用noConflict()的作用是让出控制权，如果没有参数只让出$控制权,但是如果传入true，jQuery命名空间也让出了，同时方法返回自身的jQuery对象，我们可以用变量接受这个对象。\n```\nvar zhang=jQuery.noConflict(true);\nzhang(\"#id\");\n\n```\n\n这个时候$和jQuery都没有jQuery对象了，反而zhang这个命名空间是jQuery对象。最后我们看看jQuery究竟是怎么产生的。见下面的代码：\n\n```\n    jQuery = function( selector, context ) {\n\t    return new jQuery.fn.init( selector, context );\n\t},\n```\n从上面的代码中可以看到当我们调用jQuery()的时候，返回的是一个init()后的对象，那么就需要看看init()，内部究竟干了些什么。不过我们也说会使用\"$.isFunction()\"这样的形式来使用jQury，首先看init();\n\n#### init\n在看init的时候先，先看一下这句话，这里写的是jQuery的原型对象，\n\n```\njQuery.fn = jQuery.prototype = {\n\n\tjquery: version,\n\tconstructor: jQuery,\n\tlength: 0,\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t}\n};\n```\n主要是jQuery.fn=jQuery.prototype这一句之后，后面的init和extend都有了说法了，因为jQuery.fn.init和jQuery.fn.extend方法都是从这里来的。这样我们通过$()/jQuery(),调用方法的时候返回的new jQuery.fn.init()实例中就包含调用extend的添加的方法，这个后面还会说明。在此就先贴个图，就是jQuery的实例方法。\n```\nconsole.log($());\n```\n![jQuery实例方法](模仿jQuery创建自己的js工具/201609131126.PNG)\n\n```\ninit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\t\t// Handle HTML strings 只使用了id选择器，其他的选择请参考源码，这里为了节省篇幅，省略。\n\t\t if (typeof selector === \"string\")\n          this[0] = document.getElementById(selector);\n          return this;\n          }\n\t};\n```\ninit就干一件事获取元素，创建元素的jQuery对象，只是这里面有许多种情况，里面的一些就省略了，如果有兴趣，可以自己看一下源码。这里return的就是调用者即上面的new的对象。下面就来看看为什么jQuery下面是怎么添加这么多方法。\n\n#### extend方法\n\n首先来看一下extend方法，这个方法是扩展方法的根，后面的许多方法，都是通过这个extend添加到jQuery对象上的。延续上面的图说话，为什么jQuery实例上有这么多的方法？他们都是怎么添加到jQuery的实例上的呢？\n\n这里jQuery.extend不就是方法上的扩展吗？先举一个简单的例子说明一下这个。\n\n```\nvar   fun=function(){\n    console.log(\"这是一个方法\");\n    return fun.prototype.init();\n}\n//下面是挂在在fun上的属性和方法\nfun.VERSION=\"0.0.1\";\nfun.name=\"zhang\";\nfun.prototype.init=function(){\n    console.log(\"init\");\n    console.log(this);\n    return this;\n}\nfun.prototype.name=\"prototype\";\nfun.prototype.getName=function(){\n    console.log(this);    \n    console.log(this.name);//因为这里的this是实例，而不是原型，因此挂载在原型上的\n    return this.name;\n}\nfun.getVersion=function(){\n    console.log(this.VERSION);\n    return this.VERSION;\n}\nfun().getName();首先调用fun(),打印出“这是一个方法”，同时实例化一个init();在实例化init()的时候打印“init”，this就是init()的实例，然后就到了getName(),这里的getName()，输出“prototype”，是因为“zhang”是挂载在fun上。\nfun.getVersion();\n```\n![jQuery实例方法](模仿jQuery创建自己的js工具/201609131200.PNG)\n\nfun.getVersion就是对应jQuery的直接调用方法。\n\n到这里就能体会到jQuery的设计巧妙，她在调用jQuery的时候，实际调用jQuery.prototype.init,而init返回的由恰巧是一个jQuery对象，这样所有挂在在jQuery.prototype上的方法就可以使用了。下面调用的实例。\n\n上面的例子说明简单的方法中是可以添加属性和方法（也是属性）的，这样直接[方法.属性]可以直接调用这就是jQuery的方法，类级别扩展，用Java中的说法就是静态方法（后面用静态方法代替这种情况），调用的时候就是jQuery.isFunction(\"\");/$.isFunction(\"\");返回false；\n```\nconsole.log($.isFunction(\"\"));\n\n```\n![jQuery实例方法](模仿jQuery创建自己的js工具/201609131136.PNG)\n\n##### 下面来说extend的实现\n\n这里原型和自身上都添加了extend方法，这样在之后的调用上都可以调用extend添加其他方法了。\n\n在看下面这段代码的解释之前,建议请先看下一节[extend是怎么调用]，这样能更好的理解实现。\n\n```\n// extend方法为jQuery对象和init对象的prototype扩展方法\n// 同时具有独立的扩展普通对象的功能\njQuery.extend = jQuery.fn.extend = function() {\n    //这几个参数的含义比较重要\n    //由返回值target可知，\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},//第一个参数，如果没有返回{}\n\t\ti = 1,\n\t\tlength = arguments.length,//参数长度\n\t\tdeep = false;//是否是深复制\n    //处理深复制\n    // target为第一个参数，如果第一个参数是Boolean类型的值，则把target赋值给deep\n　　// deep表示是否进行深层面的复制，当为true时，进行深度复制，否则只进行第一层扩展\n　　// 然后把第二个参数赋值给target\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n        \n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};//现在i=1，如果arguments[1]没有，返回{}\n\t\ti++;//i=2// 将i赋值为2，跳过前两个参数\n\t}\n    // target既不是对象也不是函数则把target 设置为空对象。\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n    // 如果只有一个参数，则把jQuery对象赋值给target，即扩展到jQuery对象上\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {//length=2 i=2第一个参数是boolean或者i=1 length=1\n\t\ttarget = this;//this值jQuery，因为调用者是jQuery.extend({}),所以this是jQuery\n\t\ti--;//i=1 \n\t}\n    // 开始遍历需要被扩展到target上的参数\n\tfor ( ; i < length; i++ ) {\n        // 处理第i个被扩展的对象，即除去deep和target之外的对象,如果是null直接下一个循环\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n　          // 遍历第i个对象的所有可遍历的属性for in循环\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];// 根据被扩展对象的键获得目标对象相应值，并赋值给src，原值\n\t\t\t\tcopy = options[ name ];　// 得到被扩展对象的值\n                    \n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n                // 当用户想要深度操作时，递归合并 deep=true copy不空 copy是纯对象或者是数组\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n                   //copyIsArray是数组jQuery.isArray(copy);\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false; // 将copyIsArray重新设置为false，为下次遍历做准备\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n                    　// 递归调用extend方法，继续进行深度遍历\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n　              // 如果不需要深度复制，则直接把copy（第i个被扩展对象中被遍历的那个键的值）\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n    　// 原对象被改变，因此如果不想改变原对象，target可传入{}\n\t// Return the modified object\n\treturn target;\n};\n```\nextend()方法 首先是三个if判断，最后一个是for循环，最后返回target，重要的是返回值。\n[JQuery中的extend方法实现原理](http://www.jb51.net/article/61478.htm)\n#### 调用extend()\n\n首先我们先看一下extend的具体用法，那样就能更深的理解，\n```\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n```\n\n实例添加上的prop，removeProp方法，只用直接调用jQuery.fn.extend({}),jQuery的扩展插件的也是如此，把方法放入对象中，调用extend即可。是不是非常简单啊？下面的静态方法也是如此，这个静态方法一般不会使用。\n\n```\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\t//class和for不能直接操作,class for 关键字\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\t\t//set 有hooks调hooks没有直接属性操作\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\t\t//get hooks，同get\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\treturn tabindex ?\n\t\t\t\t\tparseInt( tabindex, 10 ) :\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href ?\n\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n```\n#### 最后是自己的js工具\n\n[我的JS练习库](https://github.com/muxiaobai/CourseExercises/blob/master/js/baseJS/base.js)\n影响比较大的视频 [逐行分析jQuery源码的奥秘](http://study.163.com/course/courseMain.htm?courseId=465001) 希望有后续","source":"_posts/模仿jQuery创建自己的js工具.md","raw":"---\ntitle: 模仿jQuery创建自己的js工具\ndate: 2016-09-13 05:02:46\ntags: jQuery实践\ncategories: jQuery\ndescription: \"大致描述jQuery的框架原理，包括init,extend,noConflict等方法\"\n---\n\n\n# jQuery分析实践\n\n#### 匿名函数自执行\n```\n;(function(){})(window);\n\n```\n\n首先所有的代码都包含在这个匿名函数中，并且自执行，这样保证代码不会污染其他的合作者，那么jQuery对象又是怎么被我们使用的呢？我们来看第二段代码。\n```\n\twindow.jQuery = window.$ = jQuery;\n```\n一般情况下，jQuery直接在window下挂在jQuery和$命名空间，这样使用（jQuery/$）直接调用即可。但是许多框架下都会使用$来作为自己的命名空间，这样的话就会产生冲突，因此jQury添加了noConflict()方法，\n\n```\nvar\n\t_jQuery = window.jQuery,\n\t_$ = window.$;\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\treturn jQuery;\n};\n\n```\n这里首先，如果在window下有jQuery或者$的话，就把他们暂存到_jQuery/_$命名空间下，然后\n调用noConflict()的作用是让出控制权，如果没有参数只让出$控制权,但是如果传入true，jQuery命名空间也让出了，同时方法返回自身的jQuery对象，我们可以用变量接受这个对象。\n```\nvar zhang=jQuery.noConflict(true);\nzhang(\"#id\");\n\n```\n\n这个时候$和jQuery都没有jQuery对象了，反而zhang这个命名空间是jQuery对象。最后我们看看jQuery究竟是怎么产生的。见下面的代码：\n\n```\n    jQuery = function( selector, context ) {\n\t    return new jQuery.fn.init( selector, context );\n\t},\n```\n从上面的代码中可以看到当我们调用jQuery()的时候，返回的是一个init()后的对象，那么就需要看看init()，内部究竟干了些什么。不过我们也说会使用\"$.isFunction()\"这样的形式来使用jQury，首先看init();\n\n#### init\n在看init的时候先，先看一下这句话，这里写的是jQuery的原型对象，\n\n```\njQuery.fn = jQuery.prototype = {\n\n\tjquery: version,\n\tconstructor: jQuery,\n\tlength: 0,\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t}\n};\n```\n主要是jQuery.fn=jQuery.prototype这一句之后，后面的init和extend都有了说法了，因为jQuery.fn.init和jQuery.fn.extend方法都是从这里来的。这样我们通过$()/jQuery(),调用方法的时候返回的new jQuery.fn.init()实例中就包含调用extend的添加的方法，这个后面还会说明。在此就先贴个图，就是jQuery的实例方法。\n```\nconsole.log($());\n```\n![jQuery实例方法](模仿jQuery创建自己的js工具/201609131126.PNG)\n\n```\ninit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\t\t// Handle HTML strings 只使用了id选择器，其他的选择请参考源码，这里为了节省篇幅，省略。\n\t\t if (typeof selector === \"string\")\n          this[0] = document.getElementById(selector);\n          return this;\n          }\n\t};\n```\ninit就干一件事获取元素，创建元素的jQuery对象，只是这里面有许多种情况，里面的一些就省略了，如果有兴趣，可以自己看一下源码。这里return的就是调用者即上面的new的对象。下面就来看看为什么jQuery下面是怎么添加这么多方法。\n\n#### extend方法\n\n首先来看一下extend方法，这个方法是扩展方法的根，后面的许多方法，都是通过这个extend添加到jQuery对象上的。延续上面的图说话，为什么jQuery实例上有这么多的方法？他们都是怎么添加到jQuery的实例上的呢？\n\n这里jQuery.extend不就是方法上的扩展吗？先举一个简单的例子说明一下这个。\n\n```\nvar   fun=function(){\n    console.log(\"这是一个方法\");\n    return fun.prototype.init();\n}\n//下面是挂在在fun上的属性和方法\nfun.VERSION=\"0.0.1\";\nfun.name=\"zhang\";\nfun.prototype.init=function(){\n    console.log(\"init\");\n    console.log(this);\n    return this;\n}\nfun.prototype.name=\"prototype\";\nfun.prototype.getName=function(){\n    console.log(this);    \n    console.log(this.name);//因为这里的this是实例，而不是原型，因此挂载在原型上的\n    return this.name;\n}\nfun.getVersion=function(){\n    console.log(this.VERSION);\n    return this.VERSION;\n}\nfun().getName();首先调用fun(),打印出“这是一个方法”，同时实例化一个init();在实例化init()的时候打印“init”，this就是init()的实例，然后就到了getName(),这里的getName()，输出“prototype”，是因为“zhang”是挂载在fun上。\nfun.getVersion();\n```\n![jQuery实例方法](模仿jQuery创建自己的js工具/201609131200.PNG)\n\nfun.getVersion就是对应jQuery的直接调用方法。\n\n到这里就能体会到jQuery的设计巧妙，她在调用jQuery的时候，实际调用jQuery.prototype.init,而init返回的由恰巧是一个jQuery对象，这样所有挂在在jQuery.prototype上的方法就可以使用了。下面调用的实例。\n\n上面的例子说明简单的方法中是可以添加属性和方法（也是属性）的，这样直接[方法.属性]可以直接调用这就是jQuery的方法，类级别扩展，用Java中的说法就是静态方法（后面用静态方法代替这种情况），调用的时候就是jQuery.isFunction(\"\");/$.isFunction(\"\");返回false；\n```\nconsole.log($.isFunction(\"\"));\n\n```\n![jQuery实例方法](模仿jQuery创建自己的js工具/201609131136.PNG)\n\n##### 下面来说extend的实现\n\n这里原型和自身上都添加了extend方法，这样在之后的调用上都可以调用extend添加其他方法了。\n\n在看下面这段代码的解释之前,建议请先看下一节[extend是怎么调用]，这样能更好的理解实现。\n\n```\n// extend方法为jQuery对象和init对象的prototype扩展方法\n// 同时具有独立的扩展普通对象的功能\njQuery.extend = jQuery.fn.extend = function() {\n    //这几个参数的含义比较重要\n    //由返回值target可知，\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},//第一个参数，如果没有返回{}\n\t\ti = 1,\n\t\tlength = arguments.length,//参数长度\n\t\tdeep = false;//是否是深复制\n    //处理深复制\n    // target为第一个参数，如果第一个参数是Boolean类型的值，则把target赋值给deep\n　　// deep表示是否进行深层面的复制，当为true时，进行深度复制，否则只进行第一层扩展\n　　// 然后把第二个参数赋值给target\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n        \n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};//现在i=1，如果arguments[1]没有，返回{}\n\t\ti++;//i=2// 将i赋值为2，跳过前两个参数\n\t}\n    // target既不是对象也不是函数则把target 设置为空对象。\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n    // 如果只有一个参数，则把jQuery对象赋值给target，即扩展到jQuery对象上\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {//length=2 i=2第一个参数是boolean或者i=1 length=1\n\t\ttarget = this;//this值jQuery，因为调用者是jQuery.extend({}),所以this是jQuery\n\t\ti--;//i=1 \n\t}\n    // 开始遍历需要被扩展到target上的参数\n\tfor ( ; i < length; i++ ) {\n        // 处理第i个被扩展的对象，即除去deep和target之外的对象,如果是null直接下一个循环\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n　          // 遍历第i个对象的所有可遍历的属性for in循环\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];// 根据被扩展对象的键获得目标对象相应值，并赋值给src，原值\n\t\t\t\tcopy = options[ name ];　// 得到被扩展对象的值\n                    \n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n                // 当用户想要深度操作时，递归合并 deep=true copy不空 copy是纯对象或者是数组\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n                   //copyIsArray是数组jQuery.isArray(copy);\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false; // 将copyIsArray重新设置为false，为下次遍历做准备\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n                    　// 递归调用extend方法，继续进行深度遍历\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n　              // 如果不需要深度复制，则直接把copy（第i个被扩展对象中被遍历的那个键的值）\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n    　// 原对象被改变，因此如果不想改变原对象，target可传入{}\n\t// Return the modified object\n\treturn target;\n};\n```\nextend()方法 首先是三个if判断，最后一个是for循环，最后返回target，重要的是返回值。\n[JQuery中的extend方法实现原理](http://www.jb51.net/article/61478.htm)\n#### 调用extend()\n\n首先我们先看一下extend的具体用法，那样就能更深的理解，\n```\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n```\n\n实例添加上的prop，removeProp方法，只用直接调用jQuery.fn.extend({}),jQuery的扩展插件的也是如此，把方法放入对象中，调用extend即可。是不是非常简单啊？下面的静态方法也是如此，这个静态方法一般不会使用。\n\n```\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\t//class和for不能直接操作,class for 关键字\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\t\t//set 有hooks调hooks没有直接属性操作\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\t\t//get hooks，同get\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\treturn tabindex ?\n\t\t\t\t\tparseInt( tabindex, 10 ) :\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href ?\n\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n```\n#### 最后是自己的js工具\n\n[我的JS练习库](https://github.com/muxiaobai/CourseExercises/blob/master/js/baseJS/base.js)\n影响比较大的视频 [逐行分析jQuery源码的奥秘](http://study.163.com/course/courseMain.htm?courseId=465001) 希望有后续","slug":"模仿jQuery创建自己的js工具","published":1,"updated":"2016-09-13T05:25:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7a0007ougv5fboelxfx","content":"<h1 id=\"jQuery分析实践\"><a href=\"#jQuery分析实践\" class=\"headerlink\" title=\"jQuery分析实践\"></a>jQuery分析实践</h1><h4 id=\"匿名函数自执行\"><a href=\"#匿名函数自执行\" class=\"headerlink\" title=\"匿名函数自执行\"></a>匿名函数自执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(function()&#123;&#125;)(window);</span><br></pre></td></tr></table></figure>\n<p>首先所有的代码都包含在这个匿名函数中，并且自执行，这样保证代码不会污染其他的合作者，那么jQuery对象又是怎么被我们使用的呢？我们来看第二段代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = window.$ = jQuery;</span><br></pre></td></tr></table></figure></p>\n<p>一般情况下，jQuery直接在window下挂在jQuery和$命名空间，这样使用（jQuery/$）直接调用即可。但是许多框架下都会使用$来作为自己的命名空间，这样的话就会产生冲突，因此jQury添加了noConflict()方法，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var</span><br><span class=\"line\">\t_jQuery = window.jQuery,</span><br><span class=\"line\">\t_$ = window.$;</span><br><span class=\"line\">jQuery.noConflict = function( deep ) &#123;</span><br><span class=\"line\">\tif ( window.$ === jQuery ) &#123;</span><br><span class=\"line\">\t\twindow.$ = _$;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif ( deep &amp;&amp; window.jQuery === jQuery ) &#123;</span><br><span class=\"line\">\t\twindow.jQuery = _jQuery;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn jQuery;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里首先，如果在window下有jQuery或者$的话，就把他们暂存到<em>jQuery/</em>$命名空间下，然后<br>调用noConflict()的作用是让出控制权，如果没有参数只让出$控制权,但是如果传入true，jQuery命名空间也让出了，同时方法返回自身的jQuery对象，我们可以用变量接受这个对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var zhang=jQuery.noConflict(true);</span><br><span class=\"line\">zhang(&quot;#id&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>这个时候$和jQuery都没有jQuery对象了，反而zhang这个命名空间是jQuery对象。最后我们看看jQuery究竟是怎么产生的。见下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   jQuery = function( selector, context ) &#123;</span><br><span class=\"line\">    return new jQuery.fn.init( selector, context );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>从上面的代码中可以看到当我们调用jQuery()的时候，返回的是一个init()后的对象，那么就需要看看init()，内部究竟干了些什么。不过我们也说会使用”$.isFunction()”这样的形式来使用jQury，首先看init();</p>\n<h4 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h4><p>在看init的时候先，先看一下这句话，这里写的是jQuery的原型对象，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fn = jQuery.prototype = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tjquery: version,</span><br><span class=\"line\">\tconstructor: jQuery,</span><br><span class=\"line\">\tlength: 0,</span><br><span class=\"line\">\ttoArray: function() &#123;</span><br><span class=\"line\">\t\treturn slice.call( this );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>主要是jQuery.fn=jQuery.prototype这一句之后，后面的init和extend都有了说法了，因为jQuery.fn.init和jQuery.fn.extend方法都是从这里来的。这样我们通过$()/jQuery(),调用方法的时候返回的new jQuery.fn.init()实例中就包含调用extend的添加的方法，这个后面还会说明。在此就先贴个图，就是jQuery的实例方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log($());</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/.io//201609131126.PNG\" alt=\"jQuery实例方法\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init = jQuery.fn.init = function( selector, context, root ) &#123;</span><br><span class=\"line\">\t\tvar match, elem;</span><br><span class=\"line\">\t\t// HANDLE: $(&quot;&quot;), $(null), $(undefined), $(false)</span><br><span class=\"line\">\t\tif ( !selector ) &#123;</span><br><span class=\"line\">\t\t\treturn this;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// Handle HTML strings 只使用了id选择器，其他的选择请参考源码，这里为了节省篇幅，省略。</span><br><span class=\"line\">\t\t if (typeof selector === &quot;string&quot;)</span><br><span class=\"line\">          this[0] = document.getElementById(selector);</span><br><span class=\"line\">          return this;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>init就干一件事获取元素，创建元素的jQuery对象，只是这里面有许多种情况，里面的一些就省略了，如果有兴趣，可以自己看一下源码。这里return的就是调用者即上面的new的对象。下面就来看看为什么jQuery下面是怎么添加这么多方法。</p>\n<h4 id=\"extend方法\"><a href=\"#extend方法\" class=\"headerlink\" title=\"extend方法\"></a>extend方法</h4><p>首先来看一下extend方法，这个方法是扩展方法的根，后面的许多方法，都是通过这个extend添加到jQuery对象上的。延续上面的图说话，为什么jQuery实例上有这么多的方法？他们都是怎么添加到jQuery的实例上的呢？</p>\n<p>这里jQuery.extend不就是方法上的扩展吗？先举一个简单的例子说明一下这个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var   fun=function()&#123;</span><br><span class=\"line\">    console.log(&quot;这是一个方法&quot;);</span><br><span class=\"line\">    return fun.prototype.init();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//下面是挂在在fun上的属性和方法</span><br><span class=\"line\">fun.VERSION=&quot;0.0.1&quot;;</span><br><span class=\"line\">fun.name=&quot;zhang&quot;;</span><br><span class=\"line\">fun.prototype.init=function()&#123;</span><br><span class=\"line\">    console.log(&quot;init&quot;);</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.prototype.name=&quot;prototype&quot;;</span><br><span class=\"line\">fun.prototype.getName=function()&#123;</span><br><span class=\"line\">    console.log(this);    </span><br><span class=\"line\">    console.log(this.name);//因为这里的this是实例，而不是原型，因此挂载在原型上的</span><br><span class=\"line\">    return this.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.getVersion=function()&#123;</span><br><span class=\"line\">    console.log(this.VERSION);</span><br><span class=\"line\">    return this.VERSION;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun().getName();首先调用fun(),打印出“这是一个方法”，同时实例化一个init();在实例化init()的时候打印“init”，this就是init()的实例，然后就到了getName(),这里的getName()，输出“prototype”，是因为“zhang”是挂载在fun上。</span><br><span class=\"line\">fun.getVersion();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609131200.PNG\" alt=\"jQuery实例方法\"></p>\n<p>fun.getVersion就是对应jQuery的直接调用方法。</p>\n<p>到这里就能体会到jQuery的设计巧妙，她在调用jQuery的时候，实际调用jQuery.prototype.init,而init返回的由恰巧是一个jQuery对象，这样所有挂在在jQuery.prototype上的方法就可以使用了。下面调用的实例。</p>\n<p>上面的例子说明简单的方法中是可以添加属性和方法（也是属性）的，这样直接[方法.属性]可以直接调用这就是jQuery的方法，类级别扩展，用Java中的说法就是静态方法（后面用静态方法代替这种情况），调用的时候就是jQuery.isFunction(“”);/$.isFunction(“”);返回false；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log($.isFunction(&quot;&quot;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/.io//201609131136.PNG\" alt=\"jQuery实例方法\"></p>\n<h5 id=\"下面来说extend的实现\"><a href=\"#下面来说extend的实现\" class=\"headerlink\" title=\"下面来说extend的实现\"></a>下面来说extend的实现</h5><p>这里原型和自身上都添加了extend方法，这样在之后的调用上都可以调用extend添加其他方法了。</p>\n<p>在看下面这段代码的解释之前,建议请先看下一节[extend是怎么调用]，这样能更好的理解实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// extend方法为jQuery对象和init对象的prototype扩展方法</span><br><span class=\"line\">// 同时具有独立的扩展普通对象的功能</span><br><span class=\"line\">jQuery.extend = jQuery.fn.extend = function() &#123;</span><br><span class=\"line\">    //这几个参数的含义比较重要</span><br><span class=\"line\">    //由返回值target可知，</span><br><span class=\"line\">\tvar options, name, src, copy, copyIsArray, clone,</span><br><span class=\"line\">\t\ttarget = arguments[ 0 ] || &#123;&#125;,//第一个参数，如果没有返回&#123;&#125;</span><br><span class=\"line\">\t\ti = 1,</span><br><span class=\"line\">\t\tlength = arguments.length,//参数长度</span><br><span class=\"line\">\t\tdeep = false;//是否是深复制</span><br><span class=\"line\">    //处理深复制</span><br><span class=\"line\">    // target为第一个参数，如果第一个参数是Boolean类型的值，则把target赋值给deep</span><br><span class=\"line\">　　// deep表示是否进行深层面的复制，当为true时，进行深度复制，否则只进行第一层扩展</span><br><span class=\"line\">　　// 然后把第二个参数赋值给target</span><br><span class=\"line\">\t// Handle a deep copy situation</span><br><span class=\"line\">\tif ( typeof target === &quot;boolean&quot; ) &#123;</span><br><span class=\"line\">\t\tdeep = target;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t// Skip the boolean and the target</span><br><span class=\"line\">\t\ttarget = arguments[ i ] || &#123;&#125;;//现在i=1，如果arguments[1]没有，返回&#123;&#125;</span><br><span class=\"line\">\t\ti++;//i=2// 将i赋值为2，跳过前两个参数</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    // target既不是对象也不是函数则把target 设置为空对象。</span><br><span class=\"line\">\t// Handle case when target is a string or something (possible in deep copy)</span><br><span class=\"line\">\tif ( typeof target !== &quot;object&quot; &amp;&amp; !jQuery.isFunction( target ) ) &#123;</span><br><span class=\"line\">\t\ttarget = &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    // 如果只有一个参数，则把jQuery对象赋值给target，即扩展到jQuery对象上</span><br><span class=\"line\">\t// Extend jQuery itself if only one argument is passed</span><br><span class=\"line\">\tif ( i === length ) &#123;//length=2 i=2第一个参数是boolean或者i=1 length=1</span><br><span class=\"line\">\t\ttarget = this;//this值jQuery，因为调用者是jQuery.extend(&#123;&#125;),所以this是jQuery</span><br><span class=\"line\">\t\ti--;//i=1 </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    // 开始遍历需要被扩展到target上的参数</span><br><span class=\"line\">\tfor ( ; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">        // 处理第i个被扩展的对象，即除去deep和target之外的对象,如果是null直接下一个循环</span><br><span class=\"line\">\t\t// Only deal with non-null/undefined values</span><br><span class=\"line\">\t\tif ( ( options = arguments[ i ] ) != null ) &#123;</span><br><span class=\"line\">　          // 遍历第i个对象的所有可遍历的属性for in循环</span><br><span class=\"line\">\t\t\t// Extend the base object</span><br><span class=\"line\">\t\t\tfor ( name in options ) &#123;</span><br><span class=\"line\">\t\t\t\tsrc = target[ name ];// 根据被扩展对象的键获得目标对象相应值，并赋值给src，原值</span><br><span class=\"line\">\t\t\t\tcopy = options[ name ];　// 得到被扩展对象的值</span><br><span class=\"line\">                    </span><br><span class=\"line\">\t\t\t\t// Prevent never-ending loop</span><br><span class=\"line\">\t\t\t\tif ( target === copy ) &#123;</span><br><span class=\"line\">\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">                // 当用户想要深度操作时，递归合并 deep=true copy不空 copy是纯对象或者是数组</span><br><span class=\"line\">\t\t\t\t// Recurse if we&apos;re merging plain objects or arrays</span><br><span class=\"line\">\t\t\t\tif ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject( copy ) ||</span><br><span class=\"line\">\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) &#123;</span><br><span class=\"line\">                   //copyIsArray是数组jQuery.isArray(copy);</span><br><span class=\"line\">\t\t\t\t\tif ( copyIsArray ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcopyIsArray = false; // 将copyIsArray重新设置为false，为下次遍历做准备</span><br><span class=\"line\">\t\t\t\t\t\tclone = src &amp;&amp; jQuery.isArray( src ) ? src : [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tclone = src &amp;&amp; jQuery.isPlainObject( src ) ? src : &#123;&#125;;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">                    　// 递归调用extend方法，继续进行深度遍历</span><br><span class=\"line\">\t\t\t\t\t// Never move original objects, clone them</span><br><span class=\"line\">\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );</span><br><span class=\"line\">　              // 如果不需要深度复制，则直接把copy（第i个被扩展对象中被遍历的那个键的值）</span><br><span class=\"line\">\t\t\t\t// Don&apos;t bring in undefined values</span><br><span class=\"line\">\t\t\t\t&#125; else if ( copy !== undefined ) &#123;</span><br><span class=\"line\">\t\t\t\t\ttarget[ name ] = copy;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    　// 原对象被改变，因此如果不想改变原对象，target可传入&#123;&#125;</span><br><span class=\"line\">\t// Return the modified object</span><br><span class=\"line\">\treturn target;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>extend()方法 首先是三个if判断，最后一个是for循环，最后返回target，重要的是返回值。<br><a href=\"http://www.jb51.net/article/61478.htm\" target=\"_blank\" rel=\"noopener\">JQuery中的extend方法实现原理</a></p>\n<h4 id=\"调用extend\"><a href=\"#调用extend\" class=\"headerlink\" title=\"调用extend()\"></a>调用extend()</h4><p>首先我们先看一下extend的具体用法，那样就能更深的理解，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fn.extend( &#123;</span><br><span class=\"line\">\tprop: function( name, value ) &#123;</span><br><span class=\"line\">\t\treturn access( this, jQuery.prop, name, value, arguments.length &gt; 1 );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\tremoveProp: function( name ) &#123;</span><br><span class=\"line\">\t\treturn this.each( function() &#123;</span><br><span class=\"line\">\t\t\tdelete this[ jQuery.propFix[ name ] || name ];</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure></p>\n<p>实例添加上的prop，removeProp方法，只用直接调用jQuery.fn.extend({}),jQuery的扩展插件的也是如此，把方法放入对象中，调用extend即可。是不是非常简单啊？下面的静态方法也是如此，这个静态方法一般不会使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.extend( &#123;</span><br><span class=\"line\">\tprop: function( elem, name, value ) &#123;</span><br><span class=\"line\">\t\tvar ret, hooks,</span><br><span class=\"line\">\t\t\tnType = elem.nodeType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Don&apos;t get/set properties on text, comment and attribute nodes</span><br><span class=\"line\">\t\tif ( nType === 3 || nType === 8 || nType === 2 ) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) &#123;</span><br><span class=\"line\">\t\t\t//class和for不能直接操作,class for 关键字</span><br><span class=\"line\">\t\t\t// Fix name and attach hooks</span><br><span class=\"line\">\t\t\tname = jQuery.propFix[ name ] || name;</span><br><span class=\"line\">\t\t\thooks = jQuery.propHooks[ name ];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//set 有hooks调hooks没有直接属性操作</span><br><span class=\"line\">\t\tif ( value !== undefined ) &#123;</span><br><span class=\"line\">\t\t\tif ( hooks &amp;&amp; &quot;set&quot; in hooks &amp;&amp;</span><br><span class=\"line\">\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) &#123;</span><br><span class=\"line\">\t\t\t\treturn ret;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn ( elem[ name ] = value );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//get hooks，同get</span><br><span class=\"line\">\t\tif ( hooks &amp;&amp; &quot;get&quot; in hooks &amp;&amp; ( ret = hooks.get( elem, name ) ) !== null ) &#123;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn elem[ name ];</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\tpropHooks: &#123;</span><br><span class=\"line\">\t\ttabIndex: &#123;</span><br><span class=\"line\">\t\t\tget: function( elem ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Support: IE &lt;=9 - 11 only</span><br><span class=\"line\">\t\t\t\t// elem.tabIndex doesn&apos;t always return the</span><br><span class=\"line\">\t\t\t\t// correct value when it hasn&apos;t been explicitly set</span><br><span class=\"line\">\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/</span><br><span class=\"line\">\t\t\t\t// Use proper attribute retrieval(#12072)</span><br><span class=\"line\">\t\t\t\tvar tabindex = jQuery.find.attr( elem, &quot;tabindex&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\treturn tabindex ?</span><br><span class=\"line\">\t\t\t\t\tparseInt( tabindex, 10 ) :</span><br><span class=\"line\">\t\t\t\t\trfocusable.test( elem.nodeName ) ||</span><br><span class=\"line\">\t\t\t\t\t\trclickable.test( elem.nodeName ) &amp;&amp; elem.href ?</span><br><span class=\"line\">\t\t\t\t\t\t\t0 :</span><br><span class=\"line\">\t\t\t\t\t\t\t-1;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\tpropFix: &#123;</span><br><span class=\"line\">\t\t&quot;for&quot;: &quot;htmlFor&quot;,</span><br><span class=\"line\">\t\t&quot;class&quot;: &quot;className&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后是自己的js工具\"><a href=\"#最后是自己的js工具\" class=\"headerlink\" title=\"最后是自己的js工具\"></a>最后是自己的js工具</h4><p><a href=\"https://github.com/muxiaobai/CourseExercises/blob/master/js/baseJS/base.js\" target=\"_blank\" rel=\"noopener\">我的JS练习库</a><br>影响比较大的视频 <a href=\"http://study.163.com/course/courseMain.htm?courseId=465001\" target=\"_blank\" rel=\"noopener\">逐行分析jQuery源码的奥秘</a> 希望有后续</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"jQuery分析实践\"><a href=\"#jQuery分析实践\" class=\"headerlink\" title=\"jQuery分析实践\"></a>jQuery分析实践</h1><h4 id=\"匿名函数自执行\"><a href=\"#匿名函数自执行\" class=\"headerlink\" title=\"匿名函数自执行\"></a>匿名函数自执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(function()&#123;&#125;)(window);</span><br></pre></td></tr></table></figure>\n<p>首先所有的代码都包含在这个匿名函数中，并且自执行，这样保证代码不会污染其他的合作者，那么jQuery对象又是怎么被我们使用的呢？我们来看第二段代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = window.$ = jQuery;</span><br></pre></td></tr></table></figure></p>\n<p>一般情况下，jQuery直接在window下挂在jQuery和$命名空间，这样使用（jQuery/$）直接调用即可。但是许多框架下都会使用$来作为自己的命名空间，这样的话就会产生冲突，因此jQury添加了noConflict()方法，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var</span><br><span class=\"line\">\t_jQuery = window.jQuery,</span><br><span class=\"line\">\t_$ = window.$;</span><br><span class=\"line\">jQuery.noConflict = function( deep ) &#123;</span><br><span class=\"line\">\tif ( window.$ === jQuery ) &#123;</span><br><span class=\"line\">\t\twindow.$ = _$;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif ( deep &amp;&amp; window.jQuery === jQuery ) &#123;</span><br><span class=\"line\">\t\twindow.jQuery = _jQuery;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn jQuery;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里首先，如果在window下有jQuery或者$的话，就把他们暂存到<em>jQuery/</em>$命名空间下，然后<br>调用noConflict()的作用是让出控制权，如果没有参数只让出$控制权,但是如果传入true，jQuery命名空间也让出了，同时方法返回自身的jQuery对象，我们可以用变量接受这个对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var zhang=jQuery.noConflict(true);</span><br><span class=\"line\">zhang(&quot;#id&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>这个时候$和jQuery都没有jQuery对象了，反而zhang这个命名空间是jQuery对象。最后我们看看jQuery究竟是怎么产生的。见下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   jQuery = function( selector, context ) &#123;</span><br><span class=\"line\">    return new jQuery.fn.init( selector, context );</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>从上面的代码中可以看到当我们调用jQuery()的时候，返回的是一个init()后的对象，那么就需要看看init()，内部究竟干了些什么。不过我们也说会使用”$.isFunction()”这样的形式来使用jQury，首先看init();</p>\n<h4 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h4><p>在看init的时候先，先看一下这句话，这里写的是jQuery的原型对象，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fn = jQuery.prototype = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tjquery: version,</span><br><span class=\"line\">\tconstructor: jQuery,</span><br><span class=\"line\">\tlength: 0,</span><br><span class=\"line\">\ttoArray: function() &#123;</span><br><span class=\"line\">\t\treturn slice.call( this );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>主要是jQuery.fn=jQuery.prototype这一句之后，后面的init和extend都有了说法了，因为jQuery.fn.init和jQuery.fn.extend方法都是从这里来的。这样我们通过$()/jQuery(),调用方法的时候返回的new jQuery.fn.init()实例中就包含调用extend的添加的方法，这个后面还会说明。在此就先贴个图，就是jQuery的实例方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log($());</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/.io//201609131126.PNG\" alt=\"jQuery实例方法\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init = jQuery.fn.init = function( selector, context, root ) &#123;</span><br><span class=\"line\">\t\tvar match, elem;</span><br><span class=\"line\">\t\t// HANDLE: $(&quot;&quot;), $(null), $(undefined), $(false)</span><br><span class=\"line\">\t\tif ( !selector ) &#123;</span><br><span class=\"line\">\t\t\treturn this;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// Handle HTML strings 只使用了id选择器，其他的选择请参考源码，这里为了节省篇幅，省略。</span><br><span class=\"line\">\t\t if (typeof selector === &quot;string&quot;)</span><br><span class=\"line\">          this[0] = document.getElementById(selector);</span><br><span class=\"line\">          return this;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>init就干一件事获取元素，创建元素的jQuery对象，只是这里面有许多种情况，里面的一些就省略了，如果有兴趣，可以自己看一下源码。这里return的就是调用者即上面的new的对象。下面就来看看为什么jQuery下面是怎么添加这么多方法。</p>\n<h4 id=\"extend方法\"><a href=\"#extend方法\" class=\"headerlink\" title=\"extend方法\"></a>extend方法</h4><p>首先来看一下extend方法，这个方法是扩展方法的根，后面的许多方法，都是通过这个extend添加到jQuery对象上的。延续上面的图说话，为什么jQuery实例上有这么多的方法？他们都是怎么添加到jQuery的实例上的呢？</p>\n<p>这里jQuery.extend不就是方法上的扩展吗？先举一个简单的例子说明一下这个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var   fun=function()&#123;</span><br><span class=\"line\">    console.log(&quot;这是一个方法&quot;);</span><br><span class=\"line\">    return fun.prototype.init();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//下面是挂在在fun上的属性和方法</span><br><span class=\"line\">fun.VERSION=&quot;0.0.1&quot;;</span><br><span class=\"line\">fun.name=&quot;zhang&quot;;</span><br><span class=\"line\">fun.prototype.init=function()&#123;</span><br><span class=\"line\">    console.log(&quot;init&quot;);</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.prototype.name=&quot;prototype&quot;;</span><br><span class=\"line\">fun.prototype.getName=function()&#123;</span><br><span class=\"line\">    console.log(this);    </span><br><span class=\"line\">    console.log(this.name);//因为这里的this是实例，而不是原型，因此挂载在原型上的</span><br><span class=\"line\">    return this.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.getVersion=function()&#123;</span><br><span class=\"line\">    console.log(this.VERSION);</span><br><span class=\"line\">    return this.VERSION;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun().getName();首先调用fun(),打印出“这是一个方法”，同时实例化一个init();在实例化init()的时候打印“init”，this就是init()的实例，然后就到了getName(),这里的getName()，输出“prototype”，是因为“zhang”是挂载在fun上。</span><br><span class=\"line\">fun.getVersion();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609131200.PNG\" alt=\"jQuery实例方法\"></p>\n<p>fun.getVersion就是对应jQuery的直接调用方法。</p>\n<p>到这里就能体会到jQuery的设计巧妙，她在调用jQuery的时候，实际调用jQuery.prototype.init,而init返回的由恰巧是一个jQuery对象，这样所有挂在在jQuery.prototype上的方法就可以使用了。下面调用的实例。</p>\n<p>上面的例子说明简单的方法中是可以添加属性和方法（也是属性）的，这样直接[方法.属性]可以直接调用这就是jQuery的方法，类级别扩展，用Java中的说法就是静态方法（后面用静态方法代替这种情况），调用的时候就是jQuery.isFunction(“”);/$.isFunction(“”);返回false；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log($.isFunction(&quot;&quot;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/.io//201609131136.PNG\" alt=\"jQuery实例方法\"></p>\n<h5 id=\"下面来说extend的实现\"><a href=\"#下面来说extend的实现\" class=\"headerlink\" title=\"下面来说extend的实现\"></a>下面来说extend的实现</h5><p>这里原型和自身上都添加了extend方法，这样在之后的调用上都可以调用extend添加其他方法了。</p>\n<p>在看下面这段代码的解释之前,建议请先看下一节[extend是怎么调用]，这样能更好的理解实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// extend方法为jQuery对象和init对象的prototype扩展方法</span><br><span class=\"line\">// 同时具有独立的扩展普通对象的功能</span><br><span class=\"line\">jQuery.extend = jQuery.fn.extend = function() &#123;</span><br><span class=\"line\">    //这几个参数的含义比较重要</span><br><span class=\"line\">    //由返回值target可知，</span><br><span class=\"line\">\tvar options, name, src, copy, copyIsArray, clone,</span><br><span class=\"line\">\t\ttarget = arguments[ 0 ] || &#123;&#125;,//第一个参数，如果没有返回&#123;&#125;</span><br><span class=\"line\">\t\ti = 1,</span><br><span class=\"line\">\t\tlength = arguments.length,//参数长度</span><br><span class=\"line\">\t\tdeep = false;//是否是深复制</span><br><span class=\"line\">    //处理深复制</span><br><span class=\"line\">    // target为第一个参数，如果第一个参数是Boolean类型的值，则把target赋值给deep</span><br><span class=\"line\">　　// deep表示是否进行深层面的复制，当为true时，进行深度复制，否则只进行第一层扩展</span><br><span class=\"line\">　　// 然后把第二个参数赋值给target</span><br><span class=\"line\">\t// Handle a deep copy situation</span><br><span class=\"line\">\tif ( typeof target === &quot;boolean&quot; ) &#123;</span><br><span class=\"line\">\t\tdeep = target;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t// Skip the boolean and the target</span><br><span class=\"line\">\t\ttarget = arguments[ i ] || &#123;&#125;;//现在i=1，如果arguments[1]没有，返回&#123;&#125;</span><br><span class=\"line\">\t\ti++;//i=2// 将i赋值为2，跳过前两个参数</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    // target既不是对象也不是函数则把target 设置为空对象。</span><br><span class=\"line\">\t// Handle case when target is a string or something (possible in deep copy)</span><br><span class=\"line\">\tif ( typeof target !== &quot;object&quot; &amp;&amp; !jQuery.isFunction( target ) ) &#123;</span><br><span class=\"line\">\t\ttarget = &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    // 如果只有一个参数，则把jQuery对象赋值给target，即扩展到jQuery对象上</span><br><span class=\"line\">\t// Extend jQuery itself if only one argument is passed</span><br><span class=\"line\">\tif ( i === length ) &#123;//length=2 i=2第一个参数是boolean或者i=1 length=1</span><br><span class=\"line\">\t\ttarget = this;//this值jQuery，因为调用者是jQuery.extend(&#123;&#125;),所以this是jQuery</span><br><span class=\"line\">\t\ti--;//i=1 </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    // 开始遍历需要被扩展到target上的参数</span><br><span class=\"line\">\tfor ( ; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">        // 处理第i个被扩展的对象，即除去deep和target之外的对象,如果是null直接下一个循环</span><br><span class=\"line\">\t\t// Only deal with non-null/undefined values</span><br><span class=\"line\">\t\tif ( ( options = arguments[ i ] ) != null ) &#123;</span><br><span class=\"line\">　          // 遍历第i个对象的所有可遍历的属性for in循环</span><br><span class=\"line\">\t\t\t// Extend the base object</span><br><span class=\"line\">\t\t\tfor ( name in options ) &#123;</span><br><span class=\"line\">\t\t\t\tsrc = target[ name ];// 根据被扩展对象的键获得目标对象相应值，并赋值给src，原值</span><br><span class=\"line\">\t\t\t\tcopy = options[ name ];　// 得到被扩展对象的值</span><br><span class=\"line\">                    </span><br><span class=\"line\">\t\t\t\t// Prevent never-ending loop</span><br><span class=\"line\">\t\t\t\tif ( target === copy ) &#123;</span><br><span class=\"line\">\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">                // 当用户想要深度操作时，递归合并 deep=true copy不空 copy是纯对象或者是数组</span><br><span class=\"line\">\t\t\t\t// Recurse if we&apos;re merging plain objects or arrays</span><br><span class=\"line\">\t\t\t\tif ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject( copy ) ||</span><br><span class=\"line\">\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) &#123;</span><br><span class=\"line\">                   //copyIsArray是数组jQuery.isArray(copy);</span><br><span class=\"line\">\t\t\t\t\tif ( copyIsArray ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcopyIsArray = false; // 将copyIsArray重新设置为false，为下次遍历做准备</span><br><span class=\"line\">\t\t\t\t\t\tclone = src &amp;&amp; jQuery.isArray( src ) ? src : [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\tclone = src &amp;&amp; jQuery.isPlainObject( src ) ? src : &#123;&#125;;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">                    　// 递归调用extend方法，继续进行深度遍历</span><br><span class=\"line\">\t\t\t\t\t// Never move original objects, clone them</span><br><span class=\"line\">\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );</span><br><span class=\"line\">　              // 如果不需要深度复制，则直接把copy（第i个被扩展对象中被遍历的那个键的值）</span><br><span class=\"line\">\t\t\t\t// Don&apos;t bring in undefined values</span><br><span class=\"line\">\t\t\t\t&#125; else if ( copy !== undefined ) &#123;</span><br><span class=\"line\">\t\t\t\t\ttarget[ name ] = copy;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    　// 原对象被改变，因此如果不想改变原对象，target可传入&#123;&#125;</span><br><span class=\"line\">\t// Return the modified object</span><br><span class=\"line\">\treturn target;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>extend()方法 首先是三个if判断，最后一个是for循环，最后返回target，重要的是返回值。<br><a href=\"http://www.jb51.net/article/61478.htm\" target=\"_blank\" rel=\"noopener\">JQuery中的extend方法实现原理</a></p>\n<h4 id=\"调用extend\"><a href=\"#调用extend\" class=\"headerlink\" title=\"调用extend()\"></a>调用extend()</h4><p>首先我们先看一下extend的具体用法，那样就能更深的理解，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fn.extend( &#123;</span><br><span class=\"line\">\tprop: function( name, value ) &#123;</span><br><span class=\"line\">\t\treturn access( this, jQuery.prop, name, value, arguments.length &gt; 1 );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\tremoveProp: function( name ) &#123;</span><br><span class=\"line\">\t\treturn this.each( function() &#123;</span><br><span class=\"line\">\t\t\tdelete this[ jQuery.propFix[ name ] || name ];</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure></p>\n<p>实例添加上的prop，removeProp方法，只用直接调用jQuery.fn.extend({}),jQuery的扩展插件的也是如此，把方法放入对象中，调用extend即可。是不是非常简单啊？下面的静态方法也是如此，这个静态方法一般不会使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.extend( &#123;</span><br><span class=\"line\">\tprop: function( elem, name, value ) &#123;</span><br><span class=\"line\">\t\tvar ret, hooks,</span><br><span class=\"line\">\t\t\tnType = elem.nodeType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Don&apos;t get/set properties on text, comment and attribute nodes</span><br><span class=\"line\">\t\tif ( nType === 3 || nType === 8 || nType === 2 ) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) &#123;</span><br><span class=\"line\">\t\t\t//class和for不能直接操作,class for 关键字</span><br><span class=\"line\">\t\t\t// Fix name and attach hooks</span><br><span class=\"line\">\t\t\tname = jQuery.propFix[ name ] || name;</span><br><span class=\"line\">\t\t\thooks = jQuery.propHooks[ name ];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//set 有hooks调hooks没有直接属性操作</span><br><span class=\"line\">\t\tif ( value !== undefined ) &#123;</span><br><span class=\"line\">\t\t\tif ( hooks &amp;&amp; &quot;set&quot; in hooks &amp;&amp;</span><br><span class=\"line\">\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) &#123;</span><br><span class=\"line\">\t\t\t\treturn ret;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn ( elem[ name ] = value );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//get hooks，同get</span><br><span class=\"line\">\t\tif ( hooks &amp;&amp; &quot;get&quot; in hooks &amp;&amp; ( ret = hooks.get( elem, name ) ) !== null ) &#123;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn elem[ name ];</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\tpropHooks: &#123;</span><br><span class=\"line\">\t\ttabIndex: &#123;</span><br><span class=\"line\">\t\t\tget: function( elem ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Support: IE &lt;=9 - 11 only</span><br><span class=\"line\">\t\t\t\t// elem.tabIndex doesn&apos;t always return the</span><br><span class=\"line\">\t\t\t\t// correct value when it hasn&apos;t been explicitly set</span><br><span class=\"line\">\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/</span><br><span class=\"line\">\t\t\t\t// Use proper attribute retrieval(#12072)</span><br><span class=\"line\">\t\t\t\tvar tabindex = jQuery.find.attr( elem, &quot;tabindex&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\treturn tabindex ?</span><br><span class=\"line\">\t\t\t\t\tparseInt( tabindex, 10 ) :</span><br><span class=\"line\">\t\t\t\t\trfocusable.test( elem.nodeName ) ||</span><br><span class=\"line\">\t\t\t\t\t\trclickable.test( elem.nodeName ) &amp;&amp; elem.href ?</span><br><span class=\"line\">\t\t\t\t\t\t\t0 :</span><br><span class=\"line\">\t\t\t\t\t\t\t-1;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\tpropFix: &#123;</span><br><span class=\"line\">\t\t&quot;for&quot;: &quot;htmlFor&quot;,</span><br><span class=\"line\">\t\t&quot;class&quot;: &quot;className&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后是自己的js工具\"><a href=\"#最后是自己的js工具\" class=\"headerlink\" title=\"最后是自己的js工具\"></a>最后是自己的js工具</h4><p><a href=\"https://github.com/muxiaobai/CourseExercises/blob/master/js/baseJS/base.js\" target=\"_blank\" rel=\"noopener\">我的JS练习库</a><br>影响比较大的视频 <a href=\"http://study.163.com/course/courseMain.htm?courseId=465001\" target=\"_blank\" rel=\"noopener\">逐行分析jQuery源码的奥秘</a> 希望有后续</p>\n"},{"title":"浏览器的请求与响应过程","date":"2018-06-06T19:45:26.000Z","description":"从浏览器的请求响应，重新认识chrome","_content":"\n从一个简单的工具说起:[hiper](https://github.com/pod4g/hiper)\n\n![百度](浏览器的请求与响应过程/baidu.png)\n![另一个加载大量图片的网站](浏览器的请求与响应过程/load.png)\n\n- DNS look time: DNS 寻址\n- TCP connect time: TCP握手\n- TTFB : 最初的发送request到response接受到第一个字节(对于浏览器来说，就是等待Waiting) Time To First Byte\n- Download time of the page: 下载页面\n- After DOM Ready download time: 下载其他资源\n- White screen time: 白屏时间（从浏览器发送到DOM解析之前）\n- DOM Ready time: DOM准备时间\n- Load time: Load所有时间\n\n以上这些时间是判断一个页面对于使用者的友好程度，要清楚到底是哪一个环节耗时，才是解决问题的重中之重。\n\n- 1.totalDNSTime += this.getDNSTime(domainLookupStart, domainLookupEnd)\n- 2.totalTCPTime += this.getTCPTime(connectStart, connectEnd)\n- 3.totalTTFBTime += this.getTTFB(requestStart, responseStart)\n- 4.totalDownloadTime += this.getDownloadTime(responseStart, responseEnd)\n- 5.totalAfterDOMReadyTheDownloadTimeOfTheRes += this.getAfterDOMReadyTheDownloadTimeOfTheRes(domInteractive, domComplete)\n- 6.totalWhiteScreenTime += this.getWhiteScreenTime(navigationStart, domInteractive)\n- 7.totalDOMReadyTime += this.getDOMReadyTime(navigationStart, domContentLoadedEventEnd)\n- 8.totalLoadTime += this.getLoadTime(navigationStart, loadEventEnd)\n\n这个工具中的时间计算\n\n![timing-overview](浏览器的请求与响应过程/timing-overview.png)\n\nchrome 中的performance.timing对象记录了所有的时间 [浏览器从输入网址发生的事(前端优化)](https://www.cnblogs.com/btgyoyo/p/6341077.html)\n\nnavigationStart,如果没有前一个网页，则等于fetchStart属性。\nfetchstart,\n\nDNS: domainLookupStart,domainLookupEnd,\n\nTCP: connectStart,secureConnectionStart,connectEnd,\n\nTTFB和Download: requestStart,responseStart,responseEnd,\n\n渲染DOM:\ndomLoading,开始解析渲染DOM树的时间\ndomInteractive,完成解析DOM树的时间\n\n加载资源:\ndomContentLoadedEventStart,在DOM树解析完成后，网页内资源加载开始的时间\ndomContentLoadedEventEnd,DOM树解析完成后，网页内资源加载完成时间（如JS脚本加载执行完成） 这个阶段会可能会触发 domcontentLoaded 事件\ndomComplete,DOM已经结束，而且资源也加载完了。\n\nDOM的onload回调方法时间: loadEventStart,loadEventEnd load回调函数执行完成的时间\n![详细放大图](浏览器的请求与响应过程/dom-navtiming.png)\n[各个时间](https://blog.csdn.net/redtopic/article/details/70677690)\n[介绍performance中的time](https://www.cnblogs.com/btgyoyo/p/6341077.html)\n\n\n### DOMContentLoaded Load 两个事件\n\n[DOMContentLoaded和Load两个时间，蓝线和红线](https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html)\n这两种情况的差别，DOMContentLoaded完成的时候，是页面已经出来，结束白屏状态，当Load的时候，图片，等其他资源也加载完毕。\n\n[DOMContentLoaded 与 load事件](https://www.cnblogs.com/Bonnie3449/p/8419609.html)\n\n### DOM中的document.readystate属性值：\n\n- uninitialized (未初始化) ：对象尚未初始化\n- loading (正在加载) ：对象正在加载\n- loaded (加载完毕) ：对象加载数据完成\n- interactive (交互)：可以操作对象，但还没完全加载\n- complete (完成)：对象已经加载完毕\n\n### DOMContentLoaded/ jquery ready事件\n\n$(function(){})$(document).ready(function(){})jQuery中是怎么处理这两种加载情况的\n\n```\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error\n\t} )\n}\n这里使用了Deferred对象，最终会执行这个fn，而且会给参数 readyList.resolveWith( document, [ jQuery ] ) 把当前的document 和jQUery给fn内部可以使用\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred()\njQuery.fn.ready = function( fn ) {\n--------3-----------\n\treadyList.then( fn )\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error )\n\t\t} )\n\treturn this\n}\njQuery.extend( {\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\t//ready等会\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++\n\t\t} else {\n\t\t\tjQuery.ready( true )\n\t\t}\n\t},\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\t\t// Abort if there are pending holds or we&aposre already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn\n\t\t}\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn\n\t\t}\n        //这里会被调用，jQuery.ready()--------2-----------\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] )\n\t}\n} )\njQuery.ready.then = readyList.then\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed )\n\twindow.removeEventListener( \"load\", completed )\n\tjQuery.ready()\n}\n--------1-----------\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n    \n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready )\n} else {\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed )\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed )\n}\n```\n\n按照1,2,3的代码顺序执行，首先1后面，判断，如果当前的document状态已经完整，就可以直接立即执行2，|| 不是在加载状态，兼容IE， 否则的话，在document中添加两个事件的监听，发生这种事件之后，执行completed，这个方法内部会调用jQuery.ready()—-2\n2最后还是调用3，\n\n[浅谈DOMContentLoaded事件及其封装方法](https://segmentfault.com/a/1190000005869515)\n\n#### load/onload 事件\n\n上面事件顺序理解之后，再结合上面一个事件，这个事件只是事件更靠后一点。\n\nbody标签中加onload事件，可以做出来等待的情况，[转圈效果](https://muxiaobai.github.io/2016/12/17/%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85/)\n\n## 各大浏览器内核介绍\n\n常见的浏览器内核:\n\n- IE : Trident\n- firefox: Gecko(Mozilla)\n- Safari: Webkit\n- Chrome Blink\n- Opera: Presto,现使用Chrome的Blink\n\n注：Blink是Chromium的核心,它的前身是Webkit.国内的大部分浏览器,其中一个内核是Trident，然后再增加一个其他内核。国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以来回切换。\n\n## chrome F12开发者工具\n\n常用面板: Console Elements Sources\n\n网络问题: Network Audits\n\n性能其他: Application Performance Momery\n\n- Elements: 最终浏览器展示的结果，可以查看到元素的样式Style，计算出来的元素位置Computed，事件的监听Event；\n- Network: 解决常用数据问题，比如前后端数据传输呀。查看请求头，响应头，请求参数，响应结果等。以及每一个资源的Timing（Waterfall）（请求- 响应时间）Network\n- Console: 控制台，查看一些参数呀，输入命令等。\n- Application: 参考[HTML5-API新特性](https://muxiaobai.github.io/2016/08/20/HTML5-API-%E6%96%B0%E7%89%B9%E6%80%A7/),主要是Cookie,Session,Storage,还有两个新特性，Manifest,Service Workers,一般网站开发，上面已经够用了，如果遇到其他页面响应慢等性能问题，就需要下面两个面板:\n- Performance: 性能\n- Momery: 内存\n\n下面这两个系列文章很全的。\n\n- [Chrome开发者工具不完全指南](http://www.cnblogs.com/constantince/category/712675.html)\n- [Chrome开发者工具详解](http://www.cnblogs.com/charliechu/p/5948448.html)\n\n缺少浏览器的渲染和优化方向\n\n参考文献:\n\n- [chrome官方开发者工具文档](https://developers.google.com/web/tools/chrome-devtools/)\n- [memory测试](https://developer.chrome.com/devtools/docs/demos/memory)\n- [google文档 评估关键渲染路径](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp)☆☆\n- [google文档 分析关键渲染路径性能](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp)☆☆☆☆\n\n","source":"_posts/浏览器的请求与响应过程.md","raw":"---\ntitle: 浏览器的请求与响应过程\ndate: 2018-06-07 03:45:26\ntags: [前端,工具]\ncategories: 前端\ndescription: \"从浏览器的请求响应，重新认识chrome\"\n---\n\n从一个简单的工具说起:[hiper](https://github.com/pod4g/hiper)\n\n![百度](浏览器的请求与响应过程/baidu.png)\n![另一个加载大量图片的网站](浏览器的请求与响应过程/load.png)\n\n- DNS look time: DNS 寻址\n- TCP connect time: TCP握手\n- TTFB : 最初的发送request到response接受到第一个字节(对于浏览器来说，就是等待Waiting) Time To First Byte\n- Download time of the page: 下载页面\n- After DOM Ready download time: 下载其他资源\n- White screen time: 白屏时间（从浏览器发送到DOM解析之前）\n- DOM Ready time: DOM准备时间\n- Load time: Load所有时间\n\n以上这些时间是判断一个页面对于使用者的友好程度，要清楚到底是哪一个环节耗时，才是解决问题的重中之重。\n\n- 1.totalDNSTime += this.getDNSTime(domainLookupStart, domainLookupEnd)\n- 2.totalTCPTime += this.getTCPTime(connectStart, connectEnd)\n- 3.totalTTFBTime += this.getTTFB(requestStart, responseStart)\n- 4.totalDownloadTime += this.getDownloadTime(responseStart, responseEnd)\n- 5.totalAfterDOMReadyTheDownloadTimeOfTheRes += this.getAfterDOMReadyTheDownloadTimeOfTheRes(domInteractive, domComplete)\n- 6.totalWhiteScreenTime += this.getWhiteScreenTime(navigationStart, domInteractive)\n- 7.totalDOMReadyTime += this.getDOMReadyTime(navigationStart, domContentLoadedEventEnd)\n- 8.totalLoadTime += this.getLoadTime(navigationStart, loadEventEnd)\n\n这个工具中的时间计算\n\n![timing-overview](浏览器的请求与响应过程/timing-overview.png)\n\nchrome 中的performance.timing对象记录了所有的时间 [浏览器从输入网址发生的事(前端优化)](https://www.cnblogs.com/btgyoyo/p/6341077.html)\n\nnavigationStart,如果没有前一个网页，则等于fetchStart属性。\nfetchstart,\n\nDNS: domainLookupStart,domainLookupEnd,\n\nTCP: connectStart,secureConnectionStart,connectEnd,\n\nTTFB和Download: requestStart,responseStart,responseEnd,\n\n渲染DOM:\ndomLoading,开始解析渲染DOM树的时间\ndomInteractive,完成解析DOM树的时间\n\n加载资源:\ndomContentLoadedEventStart,在DOM树解析完成后，网页内资源加载开始的时间\ndomContentLoadedEventEnd,DOM树解析完成后，网页内资源加载完成时间（如JS脚本加载执行完成） 这个阶段会可能会触发 domcontentLoaded 事件\ndomComplete,DOM已经结束，而且资源也加载完了。\n\nDOM的onload回调方法时间: loadEventStart,loadEventEnd load回调函数执行完成的时间\n![详细放大图](浏览器的请求与响应过程/dom-navtiming.png)\n[各个时间](https://blog.csdn.net/redtopic/article/details/70677690)\n[介绍performance中的time](https://www.cnblogs.com/btgyoyo/p/6341077.html)\n\n\n### DOMContentLoaded Load 两个事件\n\n[DOMContentLoaded和Load两个时间，蓝线和红线](https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html)\n这两种情况的差别，DOMContentLoaded完成的时候，是页面已经出来，结束白屏状态，当Load的时候，图片，等其他资源也加载完毕。\n\n[DOMContentLoaded 与 load事件](https://www.cnblogs.com/Bonnie3449/p/8419609.html)\n\n### DOM中的document.readystate属性值：\n\n- uninitialized (未初始化) ：对象尚未初始化\n- loading (正在加载) ：对象正在加载\n- loaded (加载完毕) ：对象加载数据完成\n- interactive (交互)：可以操作对象，但还没完全加载\n- complete (完成)：对象已经加载完毕\n\n### DOMContentLoaded/ jquery ready事件\n\n$(function(){})$(document).ready(function(){})jQuery中是怎么处理这两种加载情况的\n\n```\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error\n\t} )\n}\n这里使用了Deferred对象，最终会执行这个fn，而且会给参数 readyList.resolveWith( document, [ jQuery ] ) 把当前的document 和jQUery给fn内部可以使用\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred()\njQuery.fn.ready = function( fn ) {\n--------3-----------\n\treadyList.then( fn )\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error )\n\t\t} )\n\treturn this\n}\njQuery.extend( {\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\t//ready等会\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++\n\t\t} else {\n\t\t\tjQuery.ready( true )\n\t\t}\n\t},\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\t\t// Abort if there are pending holds or we&aposre already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn\n\t\t}\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn\n\t\t}\n        //这里会被调用，jQuery.ready()--------2-----------\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] )\n\t}\n} )\njQuery.ready.then = readyList.then\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed )\n\twindow.removeEventListener( \"load\", completed )\n\tjQuery.ready()\n}\n--------1-----------\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n    \n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready )\n} else {\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed )\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed )\n}\n```\n\n按照1,2,3的代码顺序执行，首先1后面，判断，如果当前的document状态已经完整，就可以直接立即执行2，|| 不是在加载状态，兼容IE， 否则的话，在document中添加两个事件的监听，发生这种事件之后，执行completed，这个方法内部会调用jQuery.ready()—-2\n2最后还是调用3，\n\n[浅谈DOMContentLoaded事件及其封装方法](https://segmentfault.com/a/1190000005869515)\n\n#### load/onload 事件\n\n上面事件顺序理解之后，再结合上面一个事件，这个事件只是事件更靠后一点。\n\nbody标签中加onload事件，可以做出来等待的情况，[转圈效果](https://muxiaobai.github.io/2016/12/17/%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85/)\n\n## 各大浏览器内核介绍\n\n常见的浏览器内核:\n\n- IE : Trident\n- firefox: Gecko(Mozilla)\n- Safari: Webkit\n- Chrome Blink\n- Opera: Presto,现使用Chrome的Blink\n\n注：Blink是Chromium的核心,它的前身是Webkit.国内的大部分浏览器,其中一个内核是Trident，然后再增加一个其他内核。国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以来回切换。\n\n## chrome F12开发者工具\n\n常用面板: Console Elements Sources\n\n网络问题: Network Audits\n\n性能其他: Application Performance Momery\n\n- Elements: 最终浏览器展示的结果，可以查看到元素的样式Style，计算出来的元素位置Computed，事件的监听Event；\n- Network: 解决常用数据问题，比如前后端数据传输呀。查看请求头，响应头，请求参数，响应结果等。以及每一个资源的Timing（Waterfall）（请求- 响应时间）Network\n- Console: 控制台，查看一些参数呀，输入命令等。\n- Application: 参考[HTML5-API新特性](https://muxiaobai.github.io/2016/08/20/HTML5-API-%E6%96%B0%E7%89%B9%E6%80%A7/),主要是Cookie,Session,Storage,还有两个新特性，Manifest,Service Workers,一般网站开发，上面已经够用了，如果遇到其他页面响应慢等性能问题，就需要下面两个面板:\n- Performance: 性能\n- Momery: 内存\n\n下面这两个系列文章很全的。\n\n- [Chrome开发者工具不完全指南](http://www.cnblogs.com/constantince/category/712675.html)\n- [Chrome开发者工具详解](http://www.cnblogs.com/charliechu/p/5948448.html)\n\n缺少浏览器的渲染和优化方向\n\n参考文献:\n\n- [chrome官方开发者工具文档](https://developers.google.com/web/tools/chrome-devtools/)\n- [memory测试](https://developer.chrome.com/devtools/docs/demos/memory)\n- [google文档 评估关键渲染路径](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp)☆☆\n- [google文档 分析关键渲染路径性能](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp)☆☆☆☆\n\n","slug":"浏览器的请求与响应过程","published":1,"updated":"2018-06-11T09:47:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7a2007rugv59w5cze9a","content":"<p>从一个简单的工具说起:<a href=\"https://github.com/pod4g/hiper\" target=\"_blank\" rel=\"noopener\">hiper</a></p>\n<p><img src=\"/.io//baidu.png\" alt=\"百度\"><br><img src=\"/.io//load.png\" alt=\"另一个加载大量图片的网站\"></p>\n<ul>\n<li>DNS look time: DNS 寻址</li>\n<li>TCP connect time: TCP握手</li>\n<li>TTFB : 最初的发送request到response接受到第一个字节(对于浏览器来说，就是等待Waiting) Time To First Byte</li>\n<li>Download time of the page: 下载页面</li>\n<li>After DOM Ready download time: 下载其他资源</li>\n<li>White screen time: 白屏时间（从浏览器发送到DOM解析之前）</li>\n<li>DOM Ready time: DOM准备时间</li>\n<li>Load time: Load所有时间</li>\n</ul>\n<p>以上这些时间是判断一个页面对于使用者的友好程度，要清楚到底是哪一个环节耗时，才是解决问题的重中之重。</p>\n<ul>\n<li>1.totalDNSTime += this.getDNSTime(domainLookupStart, domainLookupEnd)</li>\n<li>2.totalTCPTime += this.getTCPTime(connectStart, connectEnd)</li>\n<li>3.totalTTFBTime += this.getTTFB(requestStart, responseStart)</li>\n<li>4.totalDownloadTime += this.getDownloadTime(responseStart, responseEnd)</li>\n<li>5.totalAfterDOMReadyTheDownloadTimeOfTheRes += this.getAfterDOMReadyTheDownloadTimeOfTheRes(domInteractive, domComplete)</li>\n<li>6.totalWhiteScreenTime += this.getWhiteScreenTime(navigationStart, domInteractive)</li>\n<li>7.totalDOMReadyTime += this.getDOMReadyTime(navigationStart, domContentLoadedEventEnd)</li>\n<li>8.totalLoadTime += this.getLoadTime(navigationStart, loadEventEnd)</li>\n</ul>\n<p>这个工具中的时间计算</p>\n<p><img src=\"/.io//timing-overview.png\" alt=\"timing-overview\"></p>\n<p>chrome 中的performance.timing对象记录了所有的时间 <a href=\"https://www.cnblogs.com/btgyoyo/p/6341077.html\" target=\"_blank\" rel=\"noopener\">浏览器从输入网址发生的事(前端优化)</a></p>\n<p>navigationStart,如果没有前一个网页，则等于fetchStart属性。<br>fetchstart,</p>\n<p>DNS: domainLookupStart,domainLookupEnd,</p>\n<p>TCP: connectStart,secureConnectionStart,connectEnd,</p>\n<p>TTFB和Download: requestStart,responseStart,responseEnd,</p>\n<p>渲染DOM:<br>domLoading,开始解析渲染DOM树的时间<br>domInteractive,完成解析DOM树的时间</p>\n<p>加载资源:<br>domContentLoadedEventStart,在DOM树解析完成后，网页内资源加载开始的时间<br>domContentLoadedEventEnd,DOM树解析完成后，网页内资源加载完成时间（如JS脚本加载执行完成） 这个阶段会可能会触发 domcontentLoaded 事件<br>domComplete,DOM已经结束，而且资源也加载完了。</p>\n<p>DOM的onload回调方法时间: loadEventStart,loadEventEnd load回调函数执行完成的时间<br><img src=\"/.io//dom-navtiming.png\" alt=\"详细放大图\"><br><a href=\"https://blog.csdn.net/redtopic/article/details/70677690\" target=\"_blank\" rel=\"noopener\">各个时间</a><br><a href=\"https://www.cnblogs.com/btgyoyo/p/6341077.html\" target=\"_blank\" rel=\"noopener\">介绍performance中的time</a></p>\n<h3 id=\"DOMContentLoaded-Load-两个事件\"><a href=\"#DOMContentLoaded-Load-两个事件\" class=\"headerlink\" title=\"DOMContentLoaded Load 两个事件\"></a>DOMContentLoaded Load 两个事件</h3><p><a href=\"https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded和Load两个时间，蓝线和红线</a><br>这两种情况的差别，DOMContentLoaded完成的时候，是页面已经出来，结束白屏状态，当Load的时候，图片，等其他资源也加载完毕。</p>\n<p><a href=\"https://www.cnblogs.com/Bonnie3449/p/8419609.html\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded 与 load事件</a></p>\n<h3 id=\"DOM中的document-readystate属性值：\"><a href=\"#DOM中的document-readystate属性值：\" class=\"headerlink\" title=\"DOM中的document.readystate属性值：\"></a>DOM中的document.readystate属性值：</h3><ul>\n<li>uninitialized (未初始化) ：对象尚未初始化</li>\n<li>loading (正在加载) ：对象正在加载</li>\n<li>loaded (加载完毕) ：对象加载数据完成</li>\n<li>interactive (交互)：可以操作对象，但还没完全加载</li>\n<li>complete (完成)：对象已经加载完毕</li>\n</ul>\n<h3 id=\"DOMContentLoaded-jquery-ready事件\"><a href=\"#DOMContentLoaded-jquery-ready事件\" class=\"headerlink\" title=\"DOMContentLoaded/ jquery ready事件\"></a>DOMContentLoaded/ jquery ready事件</h3><p>$(function(){})$(document).ready(function(){})jQuery中是怎么处理这两种加载情况的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.readyException = function( error ) &#123;</span><br><span class=\"line\">\twindow.setTimeout( function() &#123;</span><br><span class=\"line\">\t\tthrow error</span><br><span class=\"line\">\t&#125; )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这里使用了Deferred对象，最终会执行这个fn，而且会给参数 readyList.resolveWith( document, [ jQuery ] ) 把当前的document 和jQUery给fn内部可以使用</span><br><span class=\"line\">// The deferred used on DOM ready</span><br><span class=\"line\">var readyList = jQuery.Deferred()</span><br><span class=\"line\">jQuery.fn.ready = function( fn ) &#123;</span><br><span class=\"line\">--------3-----------</span><br><span class=\"line\">\treadyList.then( fn )</span><br><span class=\"line\">\t\t// Wrap jQuery.readyException in a function so that the lookup</span><br><span class=\"line\">\t\t// happens at the time of error handling instead of callback</span><br><span class=\"line\">\t\t// registration.</span><br><span class=\"line\">\t\t.catch( function( error ) &#123;</span><br><span class=\"line\">\t\t\tjQuery.readyException( error )</span><br><span class=\"line\">\t\t&#125; )</span><br><span class=\"line\">\treturn this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jQuery.extend( &#123;</span><br><span class=\"line\">\t// Is the DOM ready to be used? Set to true once it occurs.</span><br><span class=\"line\">\tisReady: false,</span><br><span class=\"line\">\t// A counter to track how many items to wait for before</span><br><span class=\"line\">\t// the ready event fires. See #6781</span><br><span class=\"line\">\treadyWait: 1,</span><br><span class=\"line\">\t//ready等会</span><br><span class=\"line\">\t// Hold (or release) the ready event</span><br><span class=\"line\">\tholdReady: function( hold ) &#123;</span><br><span class=\"line\">\t\tif ( hold ) &#123;</span><br><span class=\"line\">\t\t\tjQuery.readyWait++</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tjQuery.ready( true )</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t// Handle when the DOM is ready</span><br><span class=\"line\">\tready: function( wait ) &#123;</span><br><span class=\"line\">\t\t// Abort if there are pending holds or we&amp;aposre already ready</span><br><span class=\"line\">\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) &#123;</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// Remember that the DOM is ready</span><br><span class=\"line\">\t\tjQuery.isReady = true</span><br><span class=\"line\">\t\t// If a normal DOM Ready event fired, decrement, and wait if need be</span><br><span class=\"line\">\t\tif ( wait !== true &amp;&amp; --jQuery.readyWait &gt; 0 ) &#123;</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        //这里会被调用，jQuery.ready()--------2-----------</span><br><span class=\"line\">\t\t// If there are functions bound, to execute</span><br><span class=\"line\">\t\treadyList.resolveWith( document, [ jQuery ] )</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; )</span><br><span class=\"line\">jQuery.ready.then = readyList.then</span><br><span class=\"line\">// The ready event handler and self cleanup method</span><br><span class=\"line\">function completed() &#123;</span><br><span class=\"line\">\tdocument.removeEventListener( &quot;DOMContentLoaded&quot;, completed )</span><br><span class=\"line\">\twindow.removeEventListener( &quot;load&quot;, completed )</span><br><span class=\"line\">\tjQuery.ready()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------1-----------</span><br><span class=\"line\">// Catch cases where $(document).ready() is called</span><br><span class=\"line\">// after the browser event has already occurred.</span><br><span class=\"line\">// Support: IE &lt;=9 - 10 only</span><br><span class=\"line\">// Older IE sometimes signals &quot;interactive&quot; too soon</span><br><span class=\"line\">if ( document.readyState === &quot;complete&quot; ||</span><br><span class=\"line\">\t( document.readyState !== &quot;loading&quot; &amp;&amp; !document.documentElement.doScroll ) ) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t// Handle it asynchronously to allow scripts the opportunity to delay ready</span><br><span class=\"line\">\twindow.setTimeout( jQuery.ready )</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t// Use the handy event callback</span><br><span class=\"line\">\tdocument.addEventListener( &quot;DOMContentLoaded&quot;, completed )</span><br><span class=\"line\">\t// A fallback to window.onload, that will always work</span><br><span class=\"line\">\twindow.addEventListener( &quot;load&quot;, completed )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照1,2,3的代码顺序执行，首先1后面，判断，如果当前的document状态已经完整，就可以直接立即执行2，|| 不是在加载状态，兼容IE， 否则的话，在document中添加两个事件的监听，发生这种事件之后，执行completed，这个方法内部会调用jQuery.ready()—-2<br>2最后还是调用3，</p>\n<p><a href=\"https://segmentfault.com/a/1190000005869515\" target=\"_blank\" rel=\"noopener\">浅谈DOMContentLoaded事件及其封装方法</a></p>\n<h4 id=\"load-onload-事件\"><a href=\"#load-onload-事件\" class=\"headerlink\" title=\"load/onload 事件\"></a>load/onload 事件</h4><p>上面事件顺序理解之后，再结合上面一个事件，这个事件只是事件更靠后一点。</p>\n<p>body标签中加onload事件，可以做出来等待的情况，<a href=\"https://muxiaobai.github.io/2016/12/17/%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85/\">转圈效果</a></p>\n<h2 id=\"各大浏览器内核介绍\"><a href=\"#各大浏览器内核介绍\" class=\"headerlink\" title=\"各大浏览器内核介绍\"></a>各大浏览器内核介绍</h2><p>常见的浏览器内核:</p>\n<ul>\n<li>IE : Trident</li>\n<li>firefox: Gecko(Mozilla)</li>\n<li>Safari: Webkit</li>\n<li>Chrome Blink</li>\n<li>Opera: Presto,现使用Chrome的Blink</li>\n</ul>\n<p>注：Blink是Chromium的核心,它的前身是Webkit.国内的大部分浏览器,其中一个内核是Trident，然后再增加一个其他内核。国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以来回切换。</p>\n<h2 id=\"chrome-F12开发者工具\"><a href=\"#chrome-F12开发者工具\" class=\"headerlink\" title=\"chrome F12开发者工具\"></a>chrome F12开发者工具</h2><p>常用面板: Console Elements Sources</p>\n<p>网络问题: Network Audits</p>\n<p>性能其他: Application Performance Momery</p>\n<ul>\n<li>Elements: 最终浏览器展示的结果，可以查看到元素的样式Style，计算出来的元素位置Computed，事件的监听Event；</li>\n<li>Network: 解决常用数据问题，比如前后端数据传输呀。查看请求头，响应头，请求参数，响应结果等。以及每一个资源的Timing（Waterfall）（请求- 响应时间）Network</li>\n<li>Console: 控制台，查看一些参数呀，输入命令等。</li>\n<li>Application: 参考<a href=\"https://muxiaobai.github.io/2016/08/20/HTML5-API-%E6%96%B0%E7%89%B9%E6%80%A7/\">HTML5-API新特性</a>,主要是Cookie,Session,Storage,还有两个新特性，Manifest,Service Workers,一般网站开发，上面已经够用了，如果遇到其他页面响应慢等性能问题，就需要下面两个面板:</li>\n<li>Performance: 性能</li>\n<li>Momery: 内存</li>\n</ul>\n<p>下面这两个系列文章很全的。</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/constantince/category/712675.html\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具不完全指南</a></li>\n<li><a href=\"http://www.cnblogs.com/charliechu/p/5948448.html\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具详解</a></li>\n</ul>\n<p>缺少浏览器的渲染和优化方向</p>\n<p>参考文献:</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">chrome官方开发者工具文档</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/demos/memory\" target=\"_blank\" rel=\"noopener\">memory测试</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp\" target=\"_blank\" rel=\"noopener\">google文档 评估关键渲染路径</a>☆☆</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp\" target=\"_blank\" rel=\"noopener\">google文档 分析关键渲染路径性能</a>☆☆☆☆</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>从一个简单的工具说起:<a href=\"https://github.com/pod4g/hiper\" target=\"_blank\" rel=\"noopener\">hiper</a></p>\n<p><img src=\"/.io//baidu.png\" alt=\"百度\"><br><img src=\"/.io//load.png\" alt=\"另一个加载大量图片的网站\"></p>\n<ul>\n<li>DNS look time: DNS 寻址</li>\n<li>TCP connect time: TCP握手</li>\n<li>TTFB : 最初的发送request到response接受到第一个字节(对于浏览器来说，就是等待Waiting) Time To First Byte</li>\n<li>Download time of the page: 下载页面</li>\n<li>After DOM Ready download time: 下载其他资源</li>\n<li>White screen time: 白屏时间（从浏览器发送到DOM解析之前）</li>\n<li>DOM Ready time: DOM准备时间</li>\n<li>Load time: Load所有时间</li>\n</ul>\n<p>以上这些时间是判断一个页面对于使用者的友好程度，要清楚到底是哪一个环节耗时，才是解决问题的重中之重。</p>\n<ul>\n<li>1.totalDNSTime += this.getDNSTime(domainLookupStart, domainLookupEnd)</li>\n<li>2.totalTCPTime += this.getTCPTime(connectStart, connectEnd)</li>\n<li>3.totalTTFBTime += this.getTTFB(requestStart, responseStart)</li>\n<li>4.totalDownloadTime += this.getDownloadTime(responseStart, responseEnd)</li>\n<li>5.totalAfterDOMReadyTheDownloadTimeOfTheRes += this.getAfterDOMReadyTheDownloadTimeOfTheRes(domInteractive, domComplete)</li>\n<li>6.totalWhiteScreenTime += this.getWhiteScreenTime(navigationStart, domInteractive)</li>\n<li>7.totalDOMReadyTime += this.getDOMReadyTime(navigationStart, domContentLoadedEventEnd)</li>\n<li>8.totalLoadTime += this.getLoadTime(navigationStart, loadEventEnd)</li>\n</ul>\n<p>这个工具中的时间计算</p>\n<p><img src=\"/.io//timing-overview.png\" alt=\"timing-overview\"></p>\n<p>chrome 中的performance.timing对象记录了所有的时间 <a href=\"https://www.cnblogs.com/btgyoyo/p/6341077.html\" target=\"_blank\" rel=\"noopener\">浏览器从输入网址发生的事(前端优化)</a></p>\n<p>navigationStart,如果没有前一个网页，则等于fetchStart属性。<br>fetchstart,</p>\n<p>DNS: domainLookupStart,domainLookupEnd,</p>\n<p>TCP: connectStart,secureConnectionStart,connectEnd,</p>\n<p>TTFB和Download: requestStart,responseStart,responseEnd,</p>\n<p>渲染DOM:<br>domLoading,开始解析渲染DOM树的时间<br>domInteractive,完成解析DOM树的时间</p>\n<p>加载资源:<br>domContentLoadedEventStart,在DOM树解析完成后，网页内资源加载开始的时间<br>domContentLoadedEventEnd,DOM树解析完成后，网页内资源加载完成时间（如JS脚本加载执行完成） 这个阶段会可能会触发 domcontentLoaded 事件<br>domComplete,DOM已经结束，而且资源也加载完了。</p>\n<p>DOM的onload回调方法时间: loadEventStart,loadEventEnd load回调函数执行完成的时间<br><img src=\"/.io//dom-navtiming.png\" alt=\"详细放大图\"><br><a href=\"https://blog.csdn.net/redtopic/article/details/70677690\" target=\"_blank\" rel=\"noopener\">各个时间</a><br><a href=\"https://www.cnblogs.com/btgyoyo/p/6341077.html\" target=\"_blank\" rel=\"noopener\">介绍performance中的time</a></p>\n<h3 id=\"DOMContentLoaded-Load-两个事件\"><a href=\"#DOMContentLoaded-Load-两个事件\" class=\"headerlink\" title=\"DOMContentLoaded Load 两个事件\"></a>DOMContentLoaded Load 两个事件</h3><p><a href=\"https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded和Load两个时间，蓝线和红线</a><br>这两种情况的差别，DOMContentLoaded完成的时候，是页面已经出来，结束白屏状态，当Load的时候，图片，等其他资源也加载完毕。</p>\n<p><a href=\"https://www.cnblogs.com/Bonnie3449/p/8419609.html\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded 与 load事件</a></p>\n<h3 id=\"DOM中的document-readystate属性值：\"><a href=\"#DOM中的document-readystate属性值：\" class=\"headerlink\" title=\"DOM中的document.readystate属性值：\"></a>DOM中的document.readystate属性值：</h3><ul>\n<li>uninitialized (未初始化) ：对象尚未初始化</li>\n<li>loading (正在加载) ：对象正在加载</li>\n<li>loaded (加载完毕) ：对象加载数据完成</li>\n<li>interactive (交互)：可以操作对象，但还没完全加载</li>\n<li>complete (完成)：对象已经加载完毕</li>\n</ul>\n<h3 id=\"DOMContentLoaded-jquery-ready事件\"><a href=\"#DOMContentLoaded-jquery-ready事件\" class=\"headerlink\" title=\"DOMContentLoaded/ jquery ready事件\"></a>DOMContentLoaded/ jquery ready事件</h3><p>$(function(){})$(document).ready(function(){})jQuery中是怎么处理这两种加载情况的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.readyException = function( error ) &#123;</span><br><span class=\"line\">\twindow.setTimeout( function() &#123;</span><br><span class=\"line\">\t\tthrow error</span><br><span class=\"line\">\t&#125; )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这里使用了Deferred对象，最终会执行这个fn，而且会给参数 readyList.resolveWith( document, [ jQuery ] ) 把当前的document 和jQUery给fn内部可以使用</span><br><span class=\"line\">// The deferred used on DOM ready</span><br><span class=\"line\">var readyList = jQuery.Deferred()</span><br><span class=\"line\">jQuery.fn.ready = function( fn ) &#123;</span><br><span class=\"line\">--------3-----------</span><br><span class=\"line\">\treadyList.then( fn )</span><br><span class=\"line\">\t\t// Wrap jQuery.readyException in a function so that the lookup</span><br><span class=\"line\">\t\t// happens at the time of error handling instead of callback</span><br><span class=\"line\">\t\t// registration.</span><br><span class=\"line\">\t\t.catch( function( error ) &#123;</span><br><span class=\"line\">\t\t\tjQuery.readyException( error )</span><br><span class=\"line\">\t\t&#125; )</span><br><span class=\"line\">\treturn this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jQuery.extend( &#123;</span><br><span class=\"line\">\t// Is the DOM ready to be used? Set to true once it occurs.</span><br><span class=\"line\">\tisReady: false,</span><br><span class=\"line\">\t// A counter to track how many items to wait for before</span><br><span class=\"line\">\t// the ready event fires. See #6781</span><br><span class=\"line\">\treadyWait: 1,</span><br><span class=\"line\">\t//ready等会</span><br><span class=\"line\">\t// Hold (or release) the ready event</span><br><span class=\"line\">\tholdReady: function( hold ) &#123;</span><br><span class=\"line\">\t\tif ( hold ) &#123;</span><br><span class=\"line\">\t\t\tjQuery.readyWait++</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tjQuery.ready( true )</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t// Handle when the DOM is ready</span><br><span class=\"line\">\tready: function( wait ) &#123;</span><br><span class=\"line\">\t\t// Abort if there are pending holds or we&amp;aposre already ready</span><br><span class=\"line\">\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) &#123;</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// Remember that the DOM is ready</span><br><span class=\"line\">\t\tjQuery.isReady = true</span><br><span class=\"line\">\t\t// If a normal DOM Ready event fired, decrement, and wait if need be</span><br><span class=\"line\">\t\tif ( wait !== true &amp;&amp; --jQuery.readyWait &gt; 0 ) &#123;</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        //这里会被调用，jQuery.ready()--------2-----------</span><br><span class=\"line\">\t\t// If there are functions bound, to execute</span><br><span class=\"line\">\t\treadyList.resolveWith( document, [ jQuery ] )</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; )</span><br><span class=\"line\">jQuery.ready.then = readyList.then</span><br><span class=\"line\">// The ready event handler and self cleanup method</span><br><span class=\"line\">function completed() &#123;</span><br><span class=\"line\">\tdocument.removeEventListener( &quot;DOMContentLoaded&quot;, completed )</span><br><span class=\"line\">\twindow.removeEventListener( &quot;load&quot;, completed )</span><br><span class=\"line\">\tjQuery.ready()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------1-----------</span><br><span class=\"line\">// Catch cases where $(document).ready() is called</span><br><span class=\"line\">// after the browser event has already occurred.</span><br><span class=\"line\">// Support: IE &lt;=9 - 10 only</span><br><span class=\"line\">// Older IE sometimes signals &quot;interactive&quot; too soon</span><br><span class=\"line\">if ( document.readyState === &quot;complete&quot; ||</span><br><span class=\"line\">\t( document.readyState !== &quot;loading&quot; &amp;&amp; !document.documentElement.doScroll ) ) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t// Handle it asynchronously to allow scripts the opportunity to delay ready</span><br><span class=\"line\">\twindow.setTimeout( jQuery.ready )</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\t// Use the handy event callback</span><br><span class=\"line\">\tdocument.addEventListener( &quot;DOMContentLoaded&quot;, completed )</span><br><span class=\"line\">\t// A fallback to window.onload, that will always work</span><br><span class=\"line\">\twindow.addEventListener( &quot;load&quot;, completed )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照1,2,3的代码顺序执行，首先1后面，判断，如果当前的document状态已经完整，就可以直接立即执行2，|| 不是在加载状态，兼容IE， 否则的话，在document中添加两个事件的监听，发生这种事件之后，执行completed，这个方法内部会调用jQuery.ready()—-2<br>2最后还是调用3，</p>\n<p><a href=\"https://segmentfault.com/a/1190000005869515\" target=\"_blank\" rel=\"noopener\">浅谈DOMContentLoaded事件及其封装方法</a></p>\n<h4 id=\"load-onload-事件\"><a href=\"#load-onload-事件\" class=\"headerlink\" title=\"load/onload 事件\"></a>load/onload 事件</h4><p>上面事件顺序理解之后，再结合上面一个事件，这个事件只是事件更靠后一点。</p>\n<p>body标签中加onload事件，可以做出来等待的情况，<a href=\"https://muxiaobai.github.io/2016/12/17/%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85/\">转圈效果</a></p>\n<h2 id=\"各大浏览器内核介绍\"><a href=\"#各大浏览器内核介绍\" class=\"headerlink\" title=\"各大浏览器内核介绍\"></a>各大浏览器内核介绍</h2><p>常见的浏览器内核:</p>\n<ul>\n<li>IE : Trident</li>\n<li>firefox: Gecko(Mozilla)</li>\n<li>Safari: Webkit</li>\n<li>Chrome Blink</li>\n<li>Opera: Presto,现使用Chrome的Blink</li>\n</ul>\n<p>注：Blink是Chromium的核心,它的前身是Webkit.国内的大部分浏览器,其中一个内核是Trident，然后再增加一个其他内核。国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以来回切换。</p>\n<h2 id=\"chrome-F12开发者工具\"><a href=\"#chrome-F12开发者工具\" class=\"headerlink\" title=\"chrome F12开发者工具\"></a>chrome F12开发者工具</h2><p>常用面板: Console Elements Sources</p>\n<p>网络问题: Network Audits</p>\n<p>性能其他: Application Performance Momery</p>\n<ul>\n<li>Elements: 最终浏览器展示的结果，可以查看到元素的样式Style，计算出来的元素位置Computed，事件的监听Event；</li>\n<li>Network: 解决常用数据问题，比如前后端数据传输呀。查看请求头，响应头，请求参数，响应结果等。以及每一个资源的Timing（Waterfall）（请求- 响应时间）Network</li>\n<li>Console: 控制台，查看一些参数呀，输入命令等。</li>\n<li>Application: 参考<a href=\"https://muxiaobai.github.io/2016/08/20/HTML5-API-%E6%96%B0%E7%89%B9%E6%80%A7/\">HTML5-API新特性</a>,主要是Cookie,Session,Storage,还有两个新特性，Manifest,Service Workers,一般网站开发，上面已经够用了，如果遇到其他页面响应慢等性能问题，就需要下面两个面板:</li>\n<li>Performance: 性能</li>\n<li>Momery: 内存</li>\n</ul>\n<p>下面这两个系列文章很全的。</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/constantince/category/712675.html\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具不完全指南</a></li>\n<li><a href=\"http://www.cnblogs.com/charliechu/p/5948448.html\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具详解</a></li>\n</ul>\n<p>缺少浏览器的渲染和优化方向</p>\n<p>参考文献:</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">chrome官方开发者工具文档</a></li>\n<li><a href=\"https://developer.chrome.com/devtools/docs/demos/memory\" target=\"_blank\" rel=\"noopener\">memory测试</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp\" target=\"_blank\" rel=\"noopener\">google文档 评估关键渲染路径</a>☆☆</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp\" target=\"_blank\" rel=\"noopener\">google文档 分析关键渲染路径性能</a>☆☆☆☆</li>\n</ul>\n"},{"title":"毕业设计心得","date":"2017-06-28T22:20:02.000Z","description":"毕业了，总要有点东西，那就毕业设计感悟一下吧","_content":"\n\n\n\n自我刷新：`<meta http-equiv=\"refresh\" content=\"0.1\">`更持久，更健壮\n持续两个多月的毕业设计生活已经结束了，也经历了最黑暗的答辩，最后完整的通过了学业，还是比较欣慰的，下面说一些，我写毕业设计的一些收获。\n \n想要跟随潮流，我自己也用了一下github作为我的代码仓库，感觉还不错。设计的系统主要分为两部分，前端和后端，分别采用spring-boot和vue来做的，中间采用jersey作为服务。（实际上，现实开发中生产中很少使用这种方式的，毕竟这只是一个尝试。因为jersey接口，服务之类的东西都是在系统对接上使用，首先这个场景就不太合适，但是为了熟悉新技术，尝试一下，也不为过）我的毕业设计全部代码提交在github上面，地址：[graduation-project](https://github.com/muxiaobai/graduation-project)。\n\n#### （1）代码管理\n代码版本控制采用git，主要的代码一直托管在Github上，实际上系统大体上可以分为两个小模块，数据方面的接口，和页面方面的展示。所以此就直接利用Github代码托管平台，其中主分支为master分支，项目还包含两个分支spring-boot和vue分支，各自提交到各自的分支上，当一个功能完成后，直接合并到master分支上来。确保master分支永远是最新的，并且是可以部署运行的分支。\n#### （2）后端部分\n整个数据接口采用spring-boot框架，spring技术，几乎是现在的Jave Web项目都会用到的框架，但是传统的spring需要配置大量的xml配置文件，值得庆幸的是：spring-boot的出现解决了这一问题。spring-boot项目甚至到服务器上直接就可以运行，只需要有java环境就OK了。真像spring-boot开发者所说：“just run”。而且spring-boot默认编码是utf-8。Spring-boot框架的使用可以让项目的构建变得更加的方便。Spring-boot提供大量的第三方库（libraries），这样可以让我们快速的创建一个spring工程，下面的数据库访问就是一个例子。这是使用spring-boot的优势。\n```\n@ComponentScan(basePackages = { \"dao\",\"service\",\"domain\",\"config\"})//扫描组件\n@EnableJpaRepositories(\"dao\") // JPA扫描该包路径下的Repositories\n@EntityScan(basePackages = { \"java.lang.Object\",\"domain\"}) // 扫描实体类\n@EnableAutoConfiguration\n@SpringBootApplication//项目启动类\n@EnableConfigurationProperties({RedisProperties.class,DatabaseProperties.class}) \npublic class Application {\n    //注册jersey\n    @Bean\n    public ServletRegistrationBean jerseyServlet() {\n        ServletRegistrationBean registration = new ServletRegistrationBean(  new ServletContainer(),\"/rest/*\");\n        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());\n        return registration;\n    }\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n```\n\n这就是spring-boot的启动类，很简单，很原始。`gradle bootRun` \n\n```\n@Repository\npublic interface UserDao  extends JpaRepository<User, Long>{\n    public User getUserById(Long id);\n    public User findByUsername(String username);\n}\n```\n数据库采用MySQL来做，保存数据使用spring-boot-starter-data-jpa这个库，这个是Spring-boot提供的library，和传统访问相比，新的结合模式直接继承spring-boot-starter-data-jpa中的JpaRepository即可实现数据的操作，这可以减少CRUD等操作代码的编写，不过对于传统的DAO，Service来说，这种都是一些换汤不换药的东西，很好转换。还有一点不同的是调用Service的方式。这里采用Jersey提供接口服务。\n```\n\t@POST\n    @Path(\"add\")\n    @Consumes(\"application/json;charset=UTF-8\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Map<String, Object> post(@RequestBody User user){\n        returnValue.clear();\n        userService.save(user);\n        returnValue.put(\"code\", 200);\n        returnValue.put(\"msg\", \"success\");\n        returnValue.put(\"action\", \"add \");\n        returnValue.put(\"data\", user);\n        return returnValue;\n    }\n```\n\n采用Jersey来实现RESTful，提供数据的接口，Jersey采用了Annotation机制，上面的代码就是。所有的HTTP相关的参数设置和方法都采用标注实现。Jersey是一个平台，我们可以扩大自己的需要，如消息格式，虽然Jersey已经提供了java的基本数据类型，JSON，XML和其他类型，我们可以很容易地扩展他们的格式。测试的时候我们采用soapUI工具来检测接口的正确性。\n\n#### （3）前端部分\n采取node+webpack+vue+vuex+vue-router+axios设计网站的前台和后台，其中node是基于V8实现的一个运行环境，打包工具和创建项目采用的是webpack，剩下的都是vue的周边生态系统，提供的框架，其中vuex是管状态，vue-router管路由跳转， axios解决跨域。另外前端还采用了饿了么的element-UI和Mint-UI这两个组件，这种组件可以更方便的实现页面。另外Chrome中已经有了vue-DevTools工具了，这是VUE组件的一个调试工具，非常好用。\n我们平时大多用js去操作dom，最常用的还是jQuery这个js工具。这里使用vue也是一种新的尝试，vue.js则是使用了数据绑定驱动来操作dom的，也就是说创建了view和model之间的绑定后，当model数据层发生变化时，view的dom就会发生相应变化。mvvm即是model-view-viewmodel，model和view之间的衔接交互都是通过viewmodel来实现的。viewmodel就是创建一个vue实例，vue实例是作用于某一个dom元素上的。因此，从View层看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；从Model层看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。\n```\n<template>\n  <div class=\"index\">\n  <input type=\"text\" name=\"\" v-model=\"parMsg\"/>\n  <p>{{parMsg}}</p>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'index',\n  data: function() {\n    return {\n      parMsg:''//输入input的内容会随时更新到p元素内\n    }\n  },\n}\n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n//省略\n</style>\n```\n\nVUE的周边生态系统异常丰富，包括vue-router的路由机制，用Vue.js +vue-router创建单页应用，是非常简单的。使用Vue.js，我们已经可以通过组合组件来组成应用程序，当你要把vue-router添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉vue-router在哪里渲染它们；Vuex 也集成到Vue的官方调试工具devtools extension，提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。\n\n#### （4）前后结合\n利用git工具进行模块之间的组合，开发阶段采用ngrok访问，后台提供的服务通过ngrok反代理工具发布到外网来进行访问，通过 C9在线服务器访问的时候就可以了。部署阶段，在服务器上安装java后，采用java –jar运行开发的后台jar包，另一个前端界面采用nginx应用服务器部署。\n实际上这里还有一个跨域的问题需要解决。因为后台服务在一个域名下，前台运行在另一个域名下，即使端口不通，也是这样，因此前台调用的时候相当于是在跨域，这个地方主要就是后台的跨域接收。这里通过一个过滤器把返回的头部添加如下四个头信息，如下图，其中“Access-Control-Allow-Origin”参数是可以接收的允许通过的域名，在实际的应用阶段，就会替换成正式的可接受的域名，这样就能够防止其他域名的攻击。“Access-Control-Allow-Methods”参数是可以接受的方法。这也是系统的安全性的一个考虑。\n```\npublic void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)  \n        throws IOException, ServletException {  \n\tHttpServletRequest request = (HttpServletRequest) req;\n\tSystem.out.println(request.getParameterMap());\n    HttpServletResponse response = (HttpServletResponse) res;\n    request.setCharacterEncoding(\"UTF-8\");\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setHeader(\"Access-Control-Allow-Origin\", \"*\");  \n    response.setHeader(\"Access-Control-Allow-Methods\", \n    \t\t\"POST, GET, PUT, OPTIONS, DELETE\");  \n    response.setHeader(\"Access-Control-Max-Age\", \"3600\");  \n    response.setHeader(\"Access-Control-Allow-Headers\",\n    \t\t\"Origin, X-Requested-With, Content-Type, Accept\");  \n    chain.doFilter(request, response);  \n}\n```\n![前端请求效果](毕业设计心得/20170629.png)\n前台在调用的时候，我们通过截图就可以看出，响应的头信息中已经包含了“response”添加的头信息。允许通过的域名、方法、支持的头信息和最大时间。下图只是一个简单的示范，从图中可以看出上面介绍的四个参数全在响应头中，实际上跨域资源共享CORS（Cross-origin resource sharing）问题看起来比较难，不过一旦理解了，自己动手做过一次之后，那就很简单了。  \n\n\n以上就是关于毕业设计技术方面的总结，业务方面，如果自己有一个好的IDEA，特别是生活中遇到的问题，或者自己需要的东西，恰恰又没有人提供这种服务，你就可以尝试一下，说不定，就能做大了呢？\n\n鸣谢：孟老（xian）师（fei），李老（kai）师（feng），叶老（xin）师（feng），王老（he）师（chao），系（wang）老师，学院老师，校老师（著名的思修，毛概，马哲）。","source":"_posts/毕业设计心得.md","raw":"---\ntitle: 毕业设计心得\ndate: 2017-06-29 06:20:02\ntags: [前端,后端,系统]\ncategories: 总结\ndescription: \"毕业了，总要有点东西，那就毕业设计感悟一下吧\"\n---\n\n\n\n\n自我刷新：`<meta http-equiv=\"refresh\" content=\"0.1\">`更持久，更健壮\n持续两个多月的毕业设计生活已经结束了，也经历了最黑暗的答辩，最后完整的通过了学业，还是比较欣慰的，下面说一些，我写毕业设计的一些收获。\n \n想要跟随潮流，我自己也用了一下github作为我的代码仓库，感觉还不错。设计的系统主要分为两部分，前端和后端，分别采用spring-boot和vue来做的，中间采用jersey作为服务。（实际上，现实开发中生产中很少使用这种方式的，毕竟这只是一个尝试。因为jersey接口，服务之类的东西都是在系统对接上使用，首先这个场景就不太合适，但是为了熟悉新技术，尝试一下，也不为过）我的毕业设计全部代码提交在github上面，地址：[graduation-project](https://github.com/muxiaobai/graduation-project)。\n\n#### （1）代码管理\n代码版本控制采用git，主要的代码一直托管在Github上，实际上系统大体上可以分为两个小模块，数据方面的接口，和页面方面的展示。所以此就直接利用Github代码托管平台，其中主分支为master分支，项目还包含两个分支spring-boot和vue分支，各自提交到各自的分支上，当一个功能完成后，直接合并到master分支上来。确保master分支永远是最新的，并且是可以部署运行的分支。\n#### （2）后端部分\n整个数据接口采用spring-boot框架，spring技术，几乎是现在的Jave Web项目都会用到的框架，但是传统的spring需要配置大量的xml配置文件，值得庆幸的是：spring-boot的出现解决了这一问题。spring-boot项目甚至到服务器上直接就可以运行，只需要有java环境就OK了。真像spring-boot开发者所说：“just run”。而且spring-boot默认编码是utf-8。Spring-boot框架的使用可以让项目的构建变得更加的方便。Spring-boot提供大量的第三方库（libraries），这样可以让我们快速的创建一个spring工程，下面的数据库访问就是一个例子。这是使用spring-boot的优势。\n```\n@ComponentScan(basePackages = { \"dao\",\"service\",\"domain\",\"config\"})//扫描组件\n@EnableJpaRepositories(\"dao\") // JPA扫描该包路径下的Repositories\n@EntityScan(basePackages = { \"java.lang.Object\",\"domain\"}) // 扫描实体类\n@EnableAutoConfiguration\n@SpringBootApplication//项目启动类\n@EnableConfigurationProperties({RedisProperties.class,DatabaseProperties.class}) \npublic class Application {\n    //注册jersey\n    @Bean\n    public ServletRegistrationBean jerseyServlet() {\n        ServletRegistrationBean registration = new ServletRegistrationBean(  new ServletContainer(),\"/rest/*\");\n        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());\n        return registration;\n    }\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n```\n\n这就是spring-boot的启动类，很简单，很原始。`gradle bootRun` \n\n```\n@Repository\npublic interface UserDao  extends JpaRepository<User, Long>{\n    public User getUserById(Long id);\n    public User findByUsername(String username);\n}\n```\n数据库采用MySQL来做，保存数据使用spring-boot-starter-data-jpa这个库，这个是Spring-boot提供的library，和传统访问相比，新的结合模式直接继承spring-boot-starter-data-jpa中的JpaRepository即可实现数据的操作，这可以减少CRUD等操作代码的编写，不过对于传统的DAO，Service来说，这种都是一些换汤不换药的东西，很好转换。还有一点不同的是调用Service的方式。这里采用Jersey提供接口服务。\n```\n\t@POST\n    @Path(\"add\")\n    @Consumes(\"application/json;charset=UTF-8\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Map<String, Object> post(@RequestBody User user){\n        returnValue.clear();\n        userService.save(user);\n        returnValue.put(\"code\", 200);\n        returnValue.put(\"msg\", \"success\");\n        returnValue.put(\"action\", \"add \");\n        returnValue.put(\"data\", user);\n        return returnValue;\n    }\n```\n\n采用Jersey来实现RESTful，提供数据的接口，Jersey采用了Annotation机制，上面的代码就是。所有的HTTP相关的参数设置和方法都采用标注实现。Jersey是一个平台，我们可以扩大自己的需要，如消息格式，虽然Jersey已经提供了java的基本数据类型，JSON，XML和其他类型，我们可以很容易地扩展他们的格式。测试的时候我们采用soapUI工具来检测接口的正确性。\n\n#### （3）前端部分\n采取node+webpack+vue+vuex+vue-router+axios设计网站的前台和后台，其中node是基于V8实现的一个运行环境，打包工具和创建项目采用的是webpack，剩下的都是vue的周边生态系统，提供的框架，其中vuex是管状态，vue-router管路由跳转， axios解决跨域。另外前端还采用了饿了么的element-UI和Mint-UI这两个组件，这种组件可以更方便的实现页面。另外Chrome中已经有了vue-DevTools工具了，这是VUE组件的一个调试工具，非常好用。\n我们平时大多用js去操作dom，最常用的还是jQuery这个js工具。这里使用vue也是一种新的尝试，vue.js则是使用了数据绑定驱动来操作dom的，也就是说创建了view和model之间的绑定后，当model数据层发生变化时，view的dom就会发生相应变化。mvvm即是model-view-viewmodel，model和view之间的衔接交互都是通过viewmodel来实现的。viewmodel就是创建一个vue实例，vue实例是作用于某一个dom元素上的。因此，从View层看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；从Model层看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。\n```\n<template>\n  <div class=\"index\">\n  <input type=\"text\" name=\"\" v-model=\"parMsg\"/>\n  <p>{{parMsg}}</p>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'index',\n  data: function() {\n    return {\n      parMsg:''//输入input的内容会随时更新到p元素内\n    }\n  },\n}\n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n//省略\n</style>\n```\n\nVUE的周边生态系统异常丰富，包括vue-router的路由机制，用Vue.js +vue-router创建单页应用，是非常简单的。使用Vue.js，我们已经可以通过组合组件来组成应用程序，当你要把vue-router添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉vue-router在哪里渲染它们；Vuex 也集成到Vue的官方调试工具devtools extension，提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。\n\n#### （4）前后结合\n利用git工具进行模块之间的组合，开发阶段采用ngrok访问，后台提供的服务通过ngrok反代理工具发布到外网来进行访问，通过 C9在线服务器访问的时候就可以了。部署阶段，在服务器上安装java后，采用java –jar运行开发的后台jar包，另一个前端界面采用nginx应用服务器部署。\n实际上这里还有一个跨域的问题需要解决。因为后台服务在一个域名下，前台运行在另一个域名下，即使端口不通，也是这样，因此前台调用的时候相当于是在跨域，这个地方主要就是后台的跨域接收。这里通过一个过滤器把返回的头部添加如下四个头信息，如下图，其中“Access-Control-Allow-Origin”参数是可以接收的允许通过的域名，在实际的应用阶段，就会替换成正式的可接受的域名，这样就能够防止其他域名的攻击。“Access-Control-Allow-Methods”参数是可以接受的方法。这也是系统的安全性的一个考虑。\n```\npublic void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)  \n        throws IOException, ServletException {  \n\tHttpServletRequest request = (HttpServletRequest) req;\n\tSystem.out.println(request.getParameterMap());\n    HttpServletResponse response = (HttpServletResponse) res;\n    request.setCharacterEncoding(\"UTF-8\");\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setHeader(\"Access-Control-Allow-Origin\", \"*\");  \n    response.setHeader(\"Access-Control-Allow-Methods\", \n    \t\t\"POST, GET, PUT, OPTIONS, DELETE\");  \n    response.setHeader(\"Access-Control-Max-Age\", \"3600\");  \n    response.setHeader(\"Access-Control-Allow-Headers\",\n    \t\t\"Origin, X-Requested-With, Content-Type, Accept\");  \n    chain.doFilter(request, response);  \n}\n```\n![前端请求效果](毕业设计心得/20170629.png)\n前台在调用的时候，我们通过截图就可以看出，响应的头信息中已经包含了“response”添加的头信息。允许通过的域名、方法、支持的头信息和最大时间。下图只是一个简单的示范，从图中可以看出上面介绍的四个参数全在响应头中，实际上跨域资源共享CORS（Cross-origin resource sharing）问题看起来比较难，不过一旦理解了，自己动手做过一次之后，那就很简单了。  \n\n\n以上就是关于毕业设计技术方面的总结，业务方面，如果自己有一个好的IDEA，特别是生活中遇到的问题，或者自己需要的东西，恰恰又没有人提供这种服务，你就可以尝试一下，说不定，就能做大了呢？\n\n鸣谢：孟老（xian）师（fei），李老（kai）师（feng），叶老（xin）师（feng），王老（he）师（chao），系（wang）老师，学院老师，校老师（著名的思修，毛概，马哲）。","slug":"毕业设计心得","published":1,"updated":"2017-06-29T07:46:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7a3007vugv5z7udmpi3","content":"<p>自我刷新：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.1&quot;&gt;</code>更持久，更健壮<br>持续两个多月的毕业设计生活已经结束了，也经历了最黑暗的答辩，最后完整的通过了学业，还是比较欣慰的，下面说一些，我写毕业设计的一些收获。</p>\n<p>想要跟随潮流，我自己也用了一下github作为我的代码仓库，感觉还不错。设计的系统主要分为两部分，前端和后端，分别采用spring-boot和vue来做的，中间采用jersey作为服务。（实际上，现实开发中生产中很少使用这种方式的，毕竟这只是一个尝试。因为jersey接口，服务之类的东西都是在系统对接上使用，首先这个场景就不太合适，但是为了熟悉新技术，尝试一下，也不为过）我的毕业设计全部代码提交在github上面，地址：<a href=\"https://github.com/muxiaobai/graduation-project\" target=\"_blank\" rel=\"noopener\">graduation-project</a>。</p>\n<h4 id=\"（1）代码管理\"><a href=\"#（1）代码管理\" class=\"headerlink\" title=\"（1）代码管理\"></a>（1）代码管理</h4><p>代码版本控制采用git，主要的代码一直托管在Github上，实际上系统大体上可以分为两个小模块，数据方面的接口，和页面方面的展示。所以此就直接利用Github代码托管平台，其中主分支为master分支，项目还包含两个分支spring-boot和vue分支，各自提交到各自的分支上，当一个功能完成后，直接合并到master分支上来。确保master分支永远是最新的，并且是可以部署运行的分支。</p>\n<h4 id=\"（2）后端部分\"><a href=\"#（2）后端部分\" class=\"headerlink\" title=\"（2）后端部分\"></a>（2）后端部分</h4><p>整个数据接口采用spring-boot框架，spring技术，几乎是现在的Jave Web项目都会用到的框架，但是传统的spring需要配置大量的xml配置文件，值得庆幸的是：spring-boot的出现解决了这一问题。spring-boot项目甚至到服务器上直接就可以运行，只需要有java环境就OK了。真像spring-boot开发者所说：“just run”。而且spring-boot默认编码是utf-8。Spring-boot框架的使用可以让项目的构建变得更加的方便。Spring-boot提供大量的第三方库（libraries），这样可以让我们快速的创建一个spring工程，下面的数据库访问就是一个例子。这是使用spring-boot的优势。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ComponentScan(basePackages = &#123; &quot;dao&quot;,&quot;service&quot;,&quot;domain&quot;,&quot;config&quot;&#125;)//扫描组件</span><br><span class=\"line\">@EnableJpaRepositories(&quot;dao&quot;) // JPA扫描该包路径下的Repositories</span><br><span class=\"line\">@EntityScan(basePackages = &#123; &quot;java.lang.Object&quot;,&quot;domain&quot;&#125;) // 扫描实体类</span><br><span class=\"line\">@EnableAutoConfiguration</span><br><span class=\"line\">@SpringBootApplication//项目启动类</span><br><span class=\"line\">@EnableConfigurationProperties(&#123;RedisProperties.class,DatabaseProperties.class&#125;) </span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    //注册jersey</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ServletRegistrationBean jerseyServlet() &#123;</span><br><span class=\"line\">        ServletRegistrationBean registration = new ServletRegistrationBean(  new ServletContainer(),&quot;/rest/*&quot;);</span><br><span class=\"line\">        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());</span><br><span class=\"line\">        return registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这就是spring-boot的启动类，很简单，很原始。<code>gradle bootRun</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public interface UserDao  extends JpaRepository&lt;User, Long&gt;&#123;</span><br><span class=\"line\">    public User getUserById(Long id);</span><br><span class=\"line\">    public User findByUsername(String username);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库采用MySQL来做，保存数据使用spring-boot-starter-data-jpa这个库，这个是Spring-boot提供的library，和传统访问相比，新的结合模式直接继承spring-boot-starter-data-jpa中的JpaRepository即可实现数据的操作，这可以减少CRUD等操作代码的编写，不过对于传统的DAO，Service来说，这种都是一些换汤不换药的东西，很好转换。还有一点不同的是调用Service的方式。这里采用Jersey提供接口服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@POST</span><br><span class=\"line\">   @Path(&quot;add&quot;)</span><br><span class=\"line\">   @Consumes(&quot;application/json;charset=UTF-8&quot;)</span><br><span class=\"line\">   @Produces(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">   public Map&lt;String, Object&gt; post(@RequestBody User user)&#123;</span><br><span class=\"line\">       returnValue.clear();</span><br><span class=\"line\">       userService.save(user);</span><br><span class=\"line\">       returnValue.put(&quot;code&quot;, 200);</span><br><span class=\"line\">       returnValue.put(&quot;msg&quot;, &quot;success&quot;);</span><br><span class=\"line\">       returnValue.put(&quot;action&quot;, &quot;add &quot;);</span><br><span class=\"line\">       returnValue.put(&quot;data&quot;, user);</span><br><span class=\"line\">       return returnValue;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>采用Jersey来实现RESTful，提供数据的接口，Jersey采用了Annotation机制，上面的代码就是。所有的HTTP相关的参数设置和方法都采用标注实现。Jersey是一个平台，我们可以扩大自己的需要，如消息格式，虽然Jersey已经提供了java的基本数据类型，JSON，XML和其他类型，我们可以很容易地扩展他们的格式。测试的时候我们采用soapUI工具来检测接口的正确性。</p>\n<h4 id=\"（3）前端部分\"><a href=\"#（3）前端部分\" class=\"headerlink\" title=\"（3）前端部分\"></a>（3）前端部分</h4><p>采取node+webpack+vue+vuex+vue-router+axios设计网站的前台和后台，其中node是基于V8实现的一个运行环境，打包工具和创建项目采用的是webpack，剩下的都是vue的周边生态系统，提供的框架，其中vuex是管状态，vue-router管路由跳转， axios解决跨域。另外前端还采用了饿了么的element-UI和Mint-UI这两个组件，这种组件可以更方便的实现页面。另外Chrome中已经有了vue-DevTools工具了，这是VUE组件的一个调试工具，非常好用。<br>我们平时大多用js去操作dom，最常用的还是jQuery这个js工具。这里使用vue也是一种新的尝试，vue.js则是使用了数据绑定驱动来操作dom的，也就是说创建了view和model之间的绑定后，当model数据层发生变化时，view的dom就会发生相应变化。mvvm即是model-view-viewmodel，model和view之间的衔接交互都是通过viewmodel来实现的。viewmodel就是创建一个vue实例，vue实例是作用于某一个dom元素上的。因此，从View层看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；从Model层看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;index&quot;&gt;</span><br><span class=\"line\">  &lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;parMsg&quot;/&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;parMsg&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;index&apos;,</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      parMsg:&apos;&apos;//输入input的内容会随时更新到p元素内</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">//省略</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>VUE的周边生态系统异常丰富，包括vue-router的路由机制，用Vue.js +vue-router创建单页应用，是非常简单的。使用Vue.js，我们已经可以通过组合组件来组成应用程序，当你要把vue-router添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉vue-router在哪里渲染它们；Vuex 也集成到Vue的官方调试工具devtools extension，提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。</p>\n<h4 id=\"（4）前后结合\"><a href=\"#（4）前后结合\" class=\"headerlink\" title=\"（4）前后结合\"></a>（4）前后结合</h4><p>利用git工具进行模块之间的组合，开发阶段采用ngrok访问，后台提供的服务通过ngrok反代理工具发布到外网来进行访问，通过 C9在线服务器访问的时候就可以了。部署阶段，在服务器上安装java后，采用java –jar运行开发的后台jar包，另一个前端界面采用nginx应用服务器部署。<br>实际上这里还有一个跨域的问题需要解决。因为后台服务在一个域名下，前台运行在另一个域名下，即使端口不通，也是这样，因此前台调用的时候相当于是在跨域，这个地方主要就是后台的跨域接收。这里通过一个过滤器把返回的头部添加如下四个头信息，如下图，其中“Access-Control-Allow-Origin”参数是可以接收的允许通过的域名，在实际的应用阶段，就会替换成正式的可接受的域名，这样就能够防止其他域名的攻击。“Access-Control-Allow-Methods”参数是可以接受的方法。这也是系统的安全性的一个考虑。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)  </span><br><span class=\"line\">        throws IOException, ServletException &#123;  </span><br><span class=\"line\">\tHttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">\tSystem.out.println(request.getParameterMap());</span><br><span class=\"line\">    HttpServletResponse response = (HttpServletResponse) res;</span><br><span class=\"line\">    request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">    response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);  </span><br><span class=\"line\">    response.setHeader(&quot;Access-Control-Allow-Methods&quot;, </span><br><span class=\"line\">    \t\t&quot;POST, GET, PUT, OPTIONS, DELETE&quot;);  </span><br><span class=\"line\">    response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);  </span><br><span class=\"line\">    response.setHeader(&quot;Access-Control-Allow-Headers&quot;,</span><br><span class=\"line\">    \t\t&quot;Origin, X-Requested-With, Content-Type, Accept&quot;);  </span><br><span class=\"line\">    chain.doFilter(request, response);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/.io//20170629.png\" alt=\"前端请求效果\"><br>前台在调用的时候，我们通过截图就可以看出，响应的头信息中已经包含了“response”添加的头信息。允许通过的域名、方法、支持的头信息和最大时间。下图只是一个简单的示范，从图中可以看出上面介绍的四个参数全在响应头中，实际上跨域资源共享CORS（Cross-origin resource sharing）问题看起来比较难，不过一旦理解了，自己动手做过一次之后，那就很简单了。  </p>\n<p>以上就是关于毕业设计技术方面的总结，业务方面，如果自己有一个好的IDEA，特别是生活中遇到的问题，或者自己需要的东西，恰恰又没有人提供这种服务，你就可以尝试一下，说不定，就能做大了呢？</p>\n<p>鸣谢：孟老（xian）师（fei），李老（kai）师（feng），叶老（xin）师（feng），王老（he）师（chao），系（wang）老师，学院老师，校老师（著名的思修，毛概，马哲）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自我刷新：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.1&quot;&gt;</code>更持久，更健壮<br>持续两个多月的毕业设计生活已经结束了，也经历了最黑暗的答辩，最后完整的通过了学业，还是比较欣慰的，下面说一些，我写毕业设计的一些收获。</p>\n<p>想要跟随潮流，我自己也用了一下github作为我的代码仓库，感觉还不错。设计的系统主要分为两部分，前端和后端，分别采用spring-boot和vue来做的，中间采用jersey作为服务。（实际上，现实开发中生产中很少使用这种方式的，毕竟这只是一个尝试。因为jersey接口，服务之类的东西都是在系统对接上使用，首先这个场景就不太合适，但是为了熟悉新技术，尝试一下，也不为过）我的毕业设计全部代码提交在github上面，地址：<a href=\"https://github.com/muxiaobai/graduation-project\" target=\"_blank\" rel=\"noopener\">graduation-project</a>。</p>\n<h4 id=\"（1）代码管理\"><a href=\"#（1）代码管理\" class=\"headerlink\" title=\"（1）代码管理\"></a>（1）代码管理</h4><p>代码版本控制采用git，主要的代码一直托管在Github上，实际上系统大体上可以分为两个小模块，数据方面的接口，和页面方面的展示。所以此就直接利用Github代码托管平台，其中主分支为master分支，项目还包含两个分支spring-boot和vue分支，各自提交到各自的分支上，当一个功能完成后，直接合并到master分支上来。确保master分支永远是最新的，并且是可以部署运行的分支。</p>\n<h4 id=\"（2）后端部分\"><a href=\"#（2）后端部分\" class=\"headerlink\" title=\"（2）后端部分\"></a>（2）后端部分</h4><p>整个数据接口采用spring-boot框架，spring技术，几乎是现在的Jave Web项目都会用到的框架，但是传统的spring需要配置大量的xml配置文件，值得庆幸的是：spring-boot的出现解决了这一问题。spring-boot项目甚至到服务器上直接就可以运行，只需要有java环境就OK了。真像spring-boot开发者所说：“just run”。而且spring-boot默认编码是utf-8。Spring-boot框架的使用可以让项目的构建变得更加的方便。Spring-boot提供大量的第三方库（libraries），这样可以让我们快速的创建一个spring工程，下面的数据库访问就是一个例子。这是使用spring-boot的优势。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ComponentScan(basePackages = &#123; &quot;dao&quot;,&quot;service&quot;,&quot;domain&quot;,&quot;config&quot;&#125;)//扫描组件</span><br><span class=\"line\">@EnableJpaRepositories(&quot;dao&quot;) // JPA扫描该包路径下的Repositories</span><br><span class=\"line\">@EntityScan(basePackages = &#123; &quot;java.lang.Object&quot;,&quot;domain&quot;&#125;) // 扫描实体类</span><br><span class=\"line\">@EnableAutoConfiguration</span><br><span class=\"line\">@SpringBootApplication//项目启动类</span><br><span class=\"line\">@EnableConfigurationProperties(&#123;RedisProperties.class,DatabaseProperties.class&#125;) </span><br><span class=\"line\">public class Application &#123;</span><br><span class=\"line\">    //注册jersey</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public ServletRegistrationBean jerseyServlet() &#123;</span><br><span class=\"line\">        ServletRegistrationBean registration = new ServletRegistrationBean(  new ServletContainer(),&quot;/rest/*&quot;);</span><br><span class=\"line\">        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());</span><br><span class=\"line\">        return registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这就是spring-boot的启动类，很简单，很原始。<code>gradle bootRun</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public interface UserDao  extends JpaRepository&lt;User, Long&gt;&#123;</span><br><span class=\"line\">    public User getUserById(Long id);</span><br><span class=\"line\">    public User findByUsername(String username);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库采用MySQL来做，保存数据使用spring-boot-starter-data-jpa这个库，这个是Spring-boot提供的library，和传统访问相比，新的结合模式直接继承spring-boot-starter-data-jpa中的JpaRepository即可实现数据的操作，这可以减少CRUD等操作代码的编写，不过对于传统的DAO，Service来说，这种都是一些换汤不换药的东西，很好转换。还有一点不同的是调用Service的方式。这里采用Jersey提供接口服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@POST</span><br><span class=\"line\">   @Path(&quot;add&quot;)</span><br><span class=\"line\">   @Consumes(&quot;application/json;charset=UTF-8&quot;)</span><br><span class=\"line\">   @Produces(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">   public Map&lt;String, Object&gt; post(@RequestBody User user)&#123;</span><br><span class=\"line\">       returnValue.clear();</span><br><span class=\"line\">       userService.save(user);</span><br><span class=\"line\">       returnValue.put(&quot;code&quot;, 200);</span><br><span class=\"line\">       returnValue.put(&quot;msg&quot;, &quot;success&quot;);</span><br><span class=\"line\">       returnValue.put(&quot;action&quot;, &quot;add &quot;);</span><br><span class=\"line\">       returnValue.put(&quot;data&quot;, user);</span><br><span class=\"line\">       return returnValue;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>采用Jersey来实现RESTful，提供数据的接口，Jersey采用了Annotation机制，上面的代码就是。所有的HTTP相关的参数设置和方法都采用标注实现。Jersey是一个平台，我们可以扩大自己的需要，如消息格式，虽然Jersey已经提供了java的基本数据类型，JSON，XML和其他类型，我们可以很容易地扩展他们的格式。测试的时候我们采用soapUI工具来检测接口的正确性。</p>\n<h4 id=\"（3）前端部分\"><a href=\"#（3）前端部分\" class=\"headerlink\" title=\"（3）前端部分\"></a>（3）前端部分</h4><p>采取node+webpack+vue+vuex+vue-router+axios设计网站的前台和后台，其中node是基于V8实现的一个运行环境，打包工具和创建项目采用的是webpack，剩下的都是vue的周边生态系统，提供的框架，其中vuex是管状态，vue-router管路由跳转， axios解决跨域。另外前端还采用了饿了么的element-UI和Mint-UI这两个组件，这种组件可以更方便的实现页面。另外Chrome中已经有了vue-DevTools工具了，这是VUE组件的一个调试工具，非常好用。<br>我们平时大多用js去操作dom，最常用的还是jQuery这个js工具。这里使用vue也是一种新的尝试，vue.js则是使用了数据绑定驱动来操作dom的，也就是说创建了view和model之间的绑定后，当model数据层发生变化时，view的dom就会发生相应变化。mvvm即是model-view-viewmodel，model和view之间的衔接交互都是通过viewmodel来实现的。viewmodel就是创建一个vue实例，vue实例是作用于某一个dom元素上的。因此，从View层看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；从Model层看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;index&quot;&gt;</span><br><span class=\"line\">  &lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;parMsg&quot;/&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;parMsg&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;index&apos;,</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      parMsg:&apos;&apos;//输入input的内容会随时更新到p元素内</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">//省略</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>VUE的周边生态系统异常丰富，包括vue-router的路由机制，用Vue.js +vue-router创建单页应用，是非常简单的。使用Vue.js，我们已经可以通过组合组件来组成应用程序，当你要把vue-router添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉vue-router在哪里渲染它们；Vuex 也集成到Vue的官方调试工具devtools extension，提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。</p>\n<h4 id=\"（4）前后结合\"><a href=\"#（4）前后结合\" class=\"headerlink\" title=\"（4）前后结合\"></a>（4）前后结合</h4><p>利用git工具进行模块之间的组合，开发阶段采用ngrok访问，后台提供的服务通过ngrok反代理工具发布到外网来进行访问，通过 C9在线服务器访问的时候就可以了。部署阶段，在服务器上安装java后，采用java –jar运行开发的后台jar包，另一个前端界面采用nginx应用服务器部署。<br>实际上这里还有一个跨域的问题需要解决。因为后台服务在一个域名下，前台运行在另一个域名下，即使端口不通，也是这样，因此前台调用的时候相当于是在跨域，这个地方主要就是后台的跨域接收。这里通过一个过滤器把返回的头部添加如下四个头信息，如下图，其中“Access-Control-Allow-Origin”参数是可以接收的允许通过的域名，在实际的应用阶段，就会替换成正式的可接受的域名，这样就能够防止其他域名的攻击。“Access-Control-Allow-Methods”参数是可以接受的方法。这也是系统的安全性的一个考虑。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)  </span><br><span class=\"line\">        throws IOException, ServletException &#123;  </span><br><span class=\"line\">\tHttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">\tSystem.out.println(request.getParameterMap());</span><br><span class=\"line\">    HttpServletResponse response = (HttpServletResponse) res;</span><br><span class=\"line\">    request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">    response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);  </span><br><span class=\"line\">    response.setHeader(&quot;Access-Control-Allow-Methods&quot;, </span><br><span class=\"line\">    \t\t&quot;POST, GET, PUT, OPTIONS, DELETE&quot;);  </span><br><span class=\"line\">    response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);  </span><br><span class=\"line\">    response.setHeader(&quot;Access-Control-Allow-Headers&quot;,</span><br><span class=\"line\">    \t\t&quot;Origin, X-Requested-With, Content-Type, Accept&quot;);  </span><br><span class=\"line\">    chain.doFilter(request, response);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/.io//20170629.png\" alt=\"前端请求效果\"><br>前台在调用的时候，我们通过截图就可以看出，响应的头信息中已经包含了“response”添加的头信息。允许通过的域名、方法、支持的头信息和最大时间。下图只是一个简单的示范，从图中可以看出上面介绍的四个参数全在响应头中，实际上跨域资源共享CORS（Cross-origin resource sharing）问题看起来比较难，不过一旦理解了，自己动手做过一次之后，那就很简单了。  </p>\n<p>以上就是关于毕业设计技术方面的总结，业务方面，如果自己有一个好的IDEA，特别是生活中遇到的问题，或者自己需要的东西，恰恰又没有人提供这种服务，你就可以尝试一下，说不定，就能做大了呢？</p>\n<p>鸣谢：孟老（xian）师（fei），李老（kai）师（feng），叶老（xin）师（feng），王老（he）师（chao），系（wang）老师，学院老师，校老师（著名的思修，毛概，马哲）。</p>\n"},{"title":"高并发之缓存、限流、降级","date":"2019-05-21T03:54:24.000Z","description":"高并发下保证可用性的三大神器，缓存，限流，降级","_content":"\n首先必须要从代码层面上提升性能，利用缓存等，如果在访问量大，确实无法处理的情况下就要考虑限流，或者防刷也是要考虑限流，然后如果服务确实不可用的话就把服务进行降级，比如当无法获取评论信息的时候，但是写的朋友圈是要正常返回的。不能因为评论服务无法提供，连朋友圈也不能看了。\n\n\n## 缓存\n\n\n可以通过注解把技术相关的，读缓存，写日志，写缓存的功能，使用注解加反射来进行操作。\n\n伪代码：\n```\nCache cache =getCache();\n\nif(cache!=null){\n    return cache;\n}\n\nData result= getDatabase();\nlg.info(\"获取数据\");\nif(result!=null){\n    setCacheData(result)\n}\n\nreturn result;\n\n```\n\n业务上，实际只有getDatabase才有用。\n\n伪代码：\n```\n@getCache()\n@setCache()\n@log()\npublic getData(){\n    Data result= getDatabase();\n    return result;\n}\n\n```\n\n通过注解反射如果有getCache的话直接使用缓存中的数据，如果有直接返回，如果有log写日志，如果有set则把获取到的数据写到cache中。\n\n```\n\n```\n\n## 限流\n\n#### 限流瞬时流量\n\n双11，秒杀，之类的属于瞬时流量很大，平时相对稳定。\n#### 限流总并发量\n\n\n#### 限流平均流量\n\n- 滑动窗口\n\n- 令牌桶，每秒生成n个，限制平均流量\n\n- 漏桶，这个是应对瞬时流量过大的一种方法，一定的速率进行消费，MQ，削峰，解耦，异步。但是能解决的瞬时流量也是有一个最大值。\n\n- 计数器，限制总的并发数，比如说每秒钟只能请求100次，是限制总并发量。通常可用redis缓存，请求增加incr来实现。\n\n采用：Google开源工具包Guava提供了限流工具类RateLimiter，该类基于令牌桶算法来完成限流，非常易于使用。\n\n\n## 降级\n\n\n当服务调用者使用同步调用的时候，会产生大量的等待线程占用系统资源，一旦线程资源被耗尽，\n服务调用者提供的服务也将处于不可用状态，于是服务雪崩效应产生了！\n这时候就需要比如说：当失败了多少次之后，\n\n1，超时机制\n2，服务限流\n3，服务熔断\n4，服务降级\n\n超时机制\n如果我们加入超时机制，例如2s，那么超过2s就会直接返回了，那么这样就在一定程度上可以抑制消费者资源耗尽的问题\n\n服务限流\n通过线程池+队列的方式，通过信号量的方式。比如商品评论比较慢，最大能同时处理10个线程，队列待处理5个，那么如果同时20个线程到达的话，其中就有5个线程被限流了，其中10个先被执行，另外5个在队列中\n\n服务熔断\n这个熔断可以理解为我们自己家里的电闸。\n当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源，比如我们设置了超时时间为1s，如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个服务了，这个时候就应该使用熔断器避免资源浪费\n\n服务降级\n有服务熔断，必然要有服务降级。\n所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据)，这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景\n\n","source":"_posts/高并发之缓存、限流、降级.md","raw":"---\ntitle: 高并发之缓存、限流、降级\ndate: 2019-05-21 11:54:24\ntags: 基础\ncategories: 高并发\ndescription: \"高并发下保证可用性的三大神器，缓存，限流，降级\"\n---\n\n首先必须要从代码层面上提升性能，利用缓存等，如果在访问量大，确实无法处理的情况下就要考虑限流，或者防刷也是要考虑限流，然后如果服务确实不可用的话就把服务进行降级，比如当无法获取评论信息的时候，但是写的朋友圈是要正常返回的。不能因为评论服务无法提供，连朋友圈也不能看了。\n\n\n## 缓存\n\n\n可以通过注解把技术相关的，读缓存，写日志，写缓存的功能，使用注解加反射来进行操作。\n\n伪代码：\n```\nCache cache =getCache();\n\nif(cache!=null){\n    return cache;\n}\n\nData result= getDatabase();\nlg.info(\"获取数据\");\nif(result!=null){\n    setCacheData(result)\n}\n\nreturn result;\n\n```\n\n业务上，实际只有getDatabase才有用。\n\n伪代码：\n```\n@getCache()\n@setCache()\n@log()\npublic getData(){\n    Data result= getDatabase();\n    return result;\n}\n\n```\n\n通过注解反射如果有getCache的话直接使用缓存中的数据，如果有直接返回，如果有log写日志，如果有set则把获取到的数据写到cache中。\n\n```\n\n```\n\n## 限流\n\n#### 限流瞬时流量\n\n双11，秒杀，之类的属于瞬时流量很大，平时相对稳定。\n#### 限流总并发量\n\n\n#### 限流平均流量\n\n- 滑动窗口\n\n- 令牌桶，每秒生成n个，限制平均流量\n\n- 漏桶，这个是应对瞬时流量过大的一种方法，一定的速率进行消费，MQ，削峰，解耦，异步。但是能解决的瞬时流量也是有一个最大值。\n\n- 计数器，限制总的并发数，比如说每秒钟只能请求100次，是限制总并发量。通常可用redis缓存，请求增加incr来实现。\n\n采用：Google开源工具包Guava提供了限流工具类RateLimiter，该类基于令牌桶算法来完成限流，非常易于使用。\n\n\n## 降级\n\n\n当服务调用者使用同步调用的时候，会产生大量的等待线程占用系统资源，一旦线程资源被耗尽，\n服务调用者提供的服务也将处于不可用状态，于是服务雪崩效应产生了！\n这时候就需要比如说：当失败了多少次之后，\n\n1，超时机制\n2，服务限流\n3，服务熔断\n4，服务降级\n\n超时机制\n如果我们加入超时机制，例如2s，那么超过2s就会直接返回了，那么这样就在一定程度上可以抑制消费者资源耗尽的问题\n\n服务限流\n通过线程池+队列的方式，通过信号量的方式。比如商品评论比较慢，最大能同时处理10个线程，队列待处理5个，那么如果同时20个线程到达的话，其中就有5个线程被限流了，其中10个先被执行，另外5个在队列中\n\n服务熔断\n这个熔断可以理解为我们自己家里的电闸。\n当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源，比如我们设置了超时时间为1s，如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个服务了，这个时候就应该使用熔断器避免资源浪费\n\n服务降级\n有服务熔断，必然要有服务降级。\n所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据)，这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景\n\n","slug":"高并发之缓存、限流、降级","published":1,"updated":"2019-05-21T12:52:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7a4007zugv5ug2kqgat","content":"<p>首先必须要从代码层面上提升性能，利用缓存等，如果在访问量大，确实无法处理的情况下就要考虑限流，或者防刷也是要考虑限流，然后如果服务确实不可用的话就把服务进行降级，比如当无法获取评论信息的时候，但是写的朋友圈是要正常返回的。不能因为评论服务无法提供，连朋友圈也不能看了。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>可以通过注解把技术相关的，读缓存，写日志，写缓存的功能，使用注解加反射来进行操作。</p>\n<p>伪代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache cache =getCache();</span><br><span class=\"line\"></span><br><span class=\"line\">if(cache!=null)&#123;</span><br><span class=\"line\">    return cache;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Data result= getDatabase();</span><br><span class=\"line\">lg.info(&quot;获取数据&quot;);</span><br><span class=\"line\">if(result!=null)&#123;</span><br><span class=\"line\">    setCacheData(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return result;</span><br></pre></td></tr></table></figure></p>\n<p>业务上，实际只有getDatabase才有用。</p>\n<p>伪代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@getCache()</span><br><span class=\"line\">@setCache()</span><br><span class=\"line\">@log()</span><br><span class=\"line\">public getData()&#123;</span><br><span class=\"line\">    Data result= getDatabase();</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过注解反射如果有getCache的话直接使用缓存中的数据，如果有直接返回，如果有log写日志，如果有set则把获取到的数据写到cache中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h2><h4 id=\"限流瞬时流量\"><a href=\"#限流瞬时流量\" class=\"headerlink\" title=\"限流瞬时流量\"></a>限流瞬时流量</h4><p>双11，秒杀，之类的属于瞬时流量很大，平时相对稳定。</p>\n<h4 id=\"限流总并发量\"><a href=\"#限流总并发量\" class=\"headerlink\" title=\"限流总并发量\"></a>限流总并发量</h4><h4 id=\"限流平均流量\"><a href=\"#限流平均流量\" class=\"headerlink\" title=\"限流平均流量\"></a>限流平均流量</h4><ul>\n<li><p>滑动窗口</p>\n</li>\n<li><p>令牌桶，每秒生成n个，限制平均流量</p>\n</li>\n<li><p>漏桶，这个是应对瞬时流量过大的一种方法，一定的速率进行消费，MQ，削峰，解耦，异步。但是能解决的瞬时流量也是有一个最大值。</p>\n</li>\n<li><p>计数器，限制总的并发数，比如说每秒钟只能请求100次，是限制总并发量。通常可用redis缓存，请求增加incr来实现。</p>\n</li>\n</ul>\n<p>采用：Google开源工具包Guava提供了限流工具类RateLimiter，该类基于令牌桶算法来完成限流，非常易于使用。</p>\n<h2 id=\"降级\"><a href=\"#降级\" class=\"headerlink\" title=\"降级\"></a>降级</h2><p>当服务调用者使用同步调用的时候，会产生大量的等待线程占用系统资源，一旦线程资源被耗尽，<br>服务调用者提供的服务也将处于不可用状态，于是服务雪崩效应产生了！<br>这时候就需要比如说：当失败了多少次之后，</p>\n<p>1，超时机制<br>2，服务限流<br>3，服务熔断<br>4，服务降级</p>\n<p>超时机制<br>如果我们加入超时机制，例如2s，那么超过2s就会直接返回了，那么这样就在一定程度上可以抑制消费者资源耗尽的问题</p>\n<p>服务限流<br>通过线程池+队列的方式，通过信号量的方式。比如商品评论比较慢，最大能同时处理10个线程，队列待处理5个，那么如果同时20个线程到达的话，其中就有5个线程被限流了，其中10个先被执行，另外5个在队列中</p>\n<p>服务熔断<br>这个熔断可以理解为我们自己家里的电闸。<br>当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源，比如我们设置了超时时间为1s，如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个服务了，这个时候就应该使用熔断器避免资源浪费</p>\n<p>服务降级<br>有服务熔断，必然要有服务降级。<br>所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据)，这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先必须要从代码层面上提升性能，利用缓存等，如果在访问量大，确实无法处理的情况下就要考虑限流，或者防刷也是要考虑限流，然后如果服务确实不可用的话就把服务进行降级，比如当无法获取评论信息的时候，但是写的朋友圈是要正常返回的。不能因为评论服务无法提供，连朋友圈也不能看了。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>可以通过注解把技术相关的，读缓存，写日志，写缓存的功能，使用注解加反射来进行操作。</p>\n<p>伪代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache cache =getCache();</span><br><span class=\"line\"></span><br><span class=\"line\">if(cache!=null)&#123;</span><br><span class=\"line\">    return cache;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Data result= getDatabase();</span><br><span class=\"line\">lg.info(&quot;获取数据&quot;);</span><br><span class=\"line\">if(result!=null)&#123;</span><br><span class=\"line\">    setCacheData(result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return result;</span><br></pre></td></tr></table></figure></p>\n<p>业务上，实际只有getDatabase才有用。</p>\n<p>伪代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@getCache()</span><br><span class=\"line\">@setCache()</span><br><span class=\"line\">@log()</span><br><span class=\"line\">public getData()&#123;</span><br><span class=\"line\">    Data result= getDatabase();</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过注解反射如果有getCache的话直接使用缓存中的数据，如果有直接返回，如果有log写日志，如果有set则把获取到的数据写到cache中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h2><h4 id=\"限流瞬时流量\"><a href=\"#限流瞬时流量\" class=\"headerlink\" title=\"限流瞬时流量\"></a>限流瞬时流量</h4><p>双11，秒杀，之类的属于瞬时流量很大，平时相对稳定。</p>\n<h4 id=\"限流总并发量\"><a href=\"#限流总并发量\" class=\"headerlink\" title=\"限流总并发量\"></a>限流总并发量</h4><h4 id=\"限流平均流量\"><a href=\"#限流平均流量\" class=\"headerlink\" title=\"限流平均流量\"></a>限流平均流量</h4><ul>\n<li><p>滑动窗口</p>\n</li>\n<li><p>令牌桶，每秒生成n个，限制平均流量</p>\n</li>\n<li><p>漏桶，这个是应对瞬时流量过大的一种方法，一定的速率进行消费，MQ，削峰，解耦，异步。但是能解决的瞬时流量也是有一个最大值。</p>\n</li>\n<li><p>计数器，限制总的并发数，比如说每秒钟只能请求100次，是限制总并发量。通常可用redis缓存，请求增加incr来实现。</p>\n</li>\n</ul>\n<p>采用：Google开源工具包Guava提供了限流工具类RateLimiter，该类基于令牌桶算法来完成限流，非常易于使用。</p>\n<h2 id=\"降级\"><a href=\"#降级\" class=\"headerlink\" title=\"降级\"></a>降级</h2><p>当服务调用者使用同步调用的时候，会产生大量的等待线程占用系统资源，一旦线程资源被耗尽，<br>服务调用者提供的服务也将处于不可用状态，于是服务雪崩效应产生了！<br>这时候就需要比如说：当失败了多少次之后，</p>\n<p>1，超时机制<br>2，服务限流<br>3，服务熔断<br>4，服务降级</p>\n<p>超时机制<br>如果我们加入超时机制，例如2s，那么超过2s就会直接返回了，那么这样就在一定程度上可以抑制消费者资源耗尽的问题</p>\n<p>服务限流<br>通过线程池+队列的方式，通过信号量的方式。比如商品评论比较慢，最大能同时处理10个线程，队列待处理5个，那么如果同时20个线程到达的话，其中就有5个线程被限流了，其中10个先被执行，另外5个在队列中</p>\n<p>服务熔断<br>这个熔断可以理解为我们自己家里的电闸。<br>当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源，比如我们设置了超时时间为1s，如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个服务了，这个时候就应该使用熔断器避免资源浪费</p>\n<p>服务降级<br>有服务熔断，必然要有服务降级。<br>所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据)，这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景</p>\n"},{"title":"JavaEE 资源路径问题","date":"2016-07-19T08:04:46.000Z","description":"JavaEE上传下载文件路径","_content":"\n## JavaEE下的路径（Struts，Servlet）\n<!--more-->\n##### strtus.xml\n![struts.xml](JavaEE-资源路径问题/201607191615.PNG)\n\n```\n\t\t<action name=\"order_balance\" class=\"orderAction\" method=\"balance\">\n\t\t\t<!-- 指定被下载资源的位置 -->\n\t\t\t<param name=\"inputPath\">/WEB-INF/download</param>\n\t\t\t\t<!-- 配置结果类型为stream的结果 -->\n\t\t\t<result type=\"stream\" name=\"balance\">\n\t\t\t\t<!-- 指定下载文件的文件类型 动态获取getMimeType()-->\n\t\t\t\t<param name=\"contentType\">${mimeType}</param>\n\t\t\t\t<!-- 指定由getBalance()方法返回被下载文件的InputStream -->\n\t\t\t\t<param name=\"inputName\">balance</param>\n\t\t\t\t<param name=\"contentDisposition\">attachment;filename=\"${fileName}\"</param>\n\t\t\t</result>\n\t\t</action>\n\n```\n##### Action\n![OrderAction](JavaEE-资源路径问题/201607191616.PNG)\n```\npackage Action;\nimport java.io.File;\nimport java.io.InputStream;\nimport org.apache.struts2.ServletActionContext;\nimport Model.Order;\nimport SQLModel.Pager;\nimport Service.OrderService;\nimport Util.POIWriteUtil;\n\npublic class OrderAction extends  SuperAction<Order>{\n\tprivate static final long serialVersionUID = 1L;\n\tprivate OrderService orderService;\n\tprivate String fileName;\n\tprivate String inputPath;\n\tprivate String mimeType;\n\tprivate InputStream balance;\n\tpublic void setFileName(String fileName) {\n\t\tthis.fileName = fileName;\n\t}\n\tpublic String getFileName() {\n\t\treturn fileName;\n\t}\n\tpublic void setInputPath(String inputPath) {\n\t\tthis.inputPath = inputPath;\n\t}\n\tpublic String getMimeType() {\n\t\treturn mimeType;\n\t}\n\tpublic void setOrderService(OrderService orderService) {\n\t\tthis.orderService = orderService;\n\t}\n\tpublic String balance(){\n\t\t//System.out.println(\"=========balance===========\");\n\t\t//System.out.println(application.getRealPath(\"/\")+ \"WEB-INF\"+File.separator+\"download\"+File.separator);\n\t\tString realPath=application.getRealPath(\"/\")+ \"WEB-INF\"+File.separator+\"download\";\n\t\tPOIWriteUtil.makeBalance(orderService.findByNumberBalance(fileName.substring(0, 6)),realPath,fileName);\n\t\t//System.out.println(\"====================\");\n\t\treturn \"balance\";\n\t}\n\tpublic InputStream getBalance() {  \n       //获取资源类型\n\t\t//System.out.println(application.getRealPath(\"/\")+ \"WEB-INF\"+File.separator+\"download\"+File.separator);\n\t\t//String apString=application.getRealPath(\"/\")+ \"WEB-INF\"+File.separator+\"download\";\n\t\t//System.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));\n\t\tmimeType = application.getMimeType(inputPath+File.separator+fileName);\n\t\t return application.getResourceAsStream(inputPath+File.separator+fileName);\n    }  \n\n}\n\n\n\n```\n##### SuperAction\n```\npackage Action;\n\nimport java.lang.reflect.ParameterizedType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts2.interceptor.ServletRequestAware;\nimport org.apache.struts2.interceptor.ServletResponseAware;\nimport org.apache.struts2.util.ServletContextAware;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport com.opensymphony.xwork2.ActionSupport;\nimport com.opensymphony.xwork2.ModelDriven;\n\n//所有Action的父类\npublic class SuperAction<T> extends ActionSupport\n\t\timplements ApplicationContextAware,ServletRequestAware, ServletResponseAware, ServletContextAware,ModelDriven<T> {\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\tprotected HttpServletRequest request;// 请求对象\n\tprotected HttpServletResponse response;// 响应对象\n\tprotected HttpSession session;// 会话对象\n\tprotected ServletContext application;// 全局对象\n\tprotected ApplicationContext ctx;\n\tprotected T model = null;\n\t\n\t\n\tpublic void setServletContext(ServletContext application) {\n\t\tthis.application = application;\n\t}\n\n\tpublic void setServletResponse(HttpServletResponse response) {\n\t\tthis.response = response;\n\t}\n\n\tpublic void setServletRequest(HttpServletRequest request) {\n\t\tthis.request = request;\n\t\tthis.session = this.request.getSession();\n\t}\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext ctx) throws BeansException {\n\t\tthis.ctx=ctx;\n\t}\n\t// 在拦截器执行此方法的时候Action的构造方法已经创建,所以Model中有值\n\tpublic T getModel() {\n\t\treturn model;\n\t}\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tpublic SuperAction() {\n\t\tParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();\n\t\tClass clazz = (Class) type.getActualTypeArguments()[0];\n\t\ttry {\n\t\t\tmodel = (T) clazz.newInstance();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\n}\n\n```\nPOIWriteUtil作用：通过POI生成excel文件\n##### 前台\n```\n<a href=\"order_balance?fileName=201607.xls\">下载账单</a>\n```\n\n#### 上传，新增\napplication对象是我的应用全局变量\n\n```\napplication.getRealPath(\"/\");\n```\n\n```\n\tSystem.out.println(application.getRealPath(\"/\"));\n\tD:\\WorkSpace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\SSH\\\n```\n##### 找到的是eclipse的工作路径，生成的文件也在\n#### 下载通过<struts.xml\\><param name=\"inputPath\"\\>/WEB-INF/download</param\\>配置inputPath\n通过Struts拦截器调用setFileName()获取前台的fileName\n```\napplication.getResourceAsStream(inputPath+File.separator+fileName);\n\n```\n\n#### 常见错误分析\n\n##### Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the <param name=\"inputName\"> tag specified for this action.\n实际上我已经定义了balance，但是报错说的balance找不到实际上是因为获取不到文件导致的\n\nSystem.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));等于null\n```\nStacktraces\njava.lang.IllegalArgumentException: Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the <param name=\"inputName\"> tag specified for this action.\n    org.apache.struts2.dispatcher.StreamResult.doExecute(StreamResult.java:237)\n    org.apache.struts2.dispatcher.StrutsResultSupport.execute(StrutsResultSupport.java:191)\n    com.opensymphony.xwork2.DefaultActionInvocation.executeResult(DefaultActionInvocation.java:372)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:276)\n    org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)\n    org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)\n    org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)\n    org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)\n    org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)\n    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)\n    org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)\n    org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n    org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)\n    org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)\n    org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n    org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)\n    org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)\n    org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)\n    org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)\n    org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)\n    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)\n    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    java.lang.Thread.run(Thread.java:745)\n```\n\n#####  java.io.IOException: 系统找不到指定的路径。\n在上传文件的时候, 把realPath写错了，找不到路径，无法保存文件\n\n```\napplication.getRealPath(\"/\")\n```\n\n\n```\n2016-07-19 16:55:04,917 -HHH000397: Using ASTQueryTranslatorFactory -INFO  -org.hibernate.hql.internal.QueryTranslatorFactoryInitiator:47 -[http-nio-8080-exec-42:8591ms]\n java.io.IOException: 系统找不到指定的路径。\n\tat java.io.WinNTFileSystem.createFileExclusively(Native Method)\n\tat java.io.File.createNewFile(File.java:1012)\n\tat Util.POIWriteUtil.makeHSSF(POIWriteUtil.java:38)\n\tat Util.POIWriteUtil.makeBalance(POIWriteUtil.java:29)\n\tat Action.OrderAction.balance(OrderAction.java:65)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)\n\tat ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)\n\tat ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)\n\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)\n\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)\n\tat ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)\n\tat ognl.ASTMethod.getValueBody(ASTMethod.java:90)\n\tat ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\n\tat ognl.SimpleNode.getValue(SimpleNode.java:258)\n\tat ognl.Ognl.getValue(Ognl.java:494)\n\tat ognl.Ognl.getValue(Ognl.java:458)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil$2.execute(OgnlUtil.java:315)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecute(OgnlUtil.java:346)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil.getValue(OgnlUtil.java:313)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)\n\tat org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)\n\tat org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)\n\tat org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)\n\tat org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)\n\tat org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\n\n```","source":"_posts/JavaEE-资源路径问题.md","raw":"---\ntitle: JavaEE 资源路径问题\ndate: 2016-07-19 16:04:46\ntags: Struts\ncategories: java\ndescription:  \"JavaEE上传下载文件路径\"\n---\n\n## JavaEE下的路径（Struts，Servlet）\n<!--more-->\n##### strtus.xml\n![struts.xml](JavaEE-资源路径问题/201607191615.PNG)\n\n```\n\t\t<action name=\"order_balance\" class=\"orderAction\" method=\"balance\">\n\t\t\t<!-- 指定被下载资源的位置 -->\n\t\t\t<param name=\"inputPath\">/WEB-INF/download</param>\n\t\t\t\t<!-- 配置结果类型为stream的结果 -->\n\t\t\t<result type=\"stream\" name=\"balance\">\n\t\t\t\t<!-- 指定下载文件的文件类型 动态获取getMimeType()-->\n\t\t\t\t<param name=\"contentType\">${mimeType}</param>\n\t\t\t\t<!-- 指定由getBalance()方法返回被下载文件的InputStream -->\n\t\t\t\t<param name=\"inputName\">balance</param>\n\t\t\t\t<param name=\"contentDisposition\">attachment;filename=\"${fileName}\"</param>\n\t\t\t</result>\n\t\t</action>\n\n```\n##### Action\n![OrderAction](JavaEE-资源路径问题/201607191616.PNG)\n```\npackage Action;\nimport java.io.File;\nimport java.io.InputStream;\nimport org.apache.struts2.ServletActionContext;\nimport Model.Order;\nimport SQLModel.Pager;\nimport Service.OrderService;\nimport Util.POIWriteUtil;\n\npublic class OrderAction extends  SuperAction<Order>{\n\tprivate static final long serialVersionUID = 1L;\n\tprivate OrderService orderService;\n\tprivate String fileName;\n\tprivate String inputPath;\n\tprivate String mimeType;\n\tprivate InputStream balance;\n\tpublic void setFileName(String fileName) {\n\t\tthis.fileName = fileName;\n\t}\n\tpublic String getFileName() {\n\t\treturn fileName;\n\t}\n\tpublic void setInputPath(String inputPath) {\n\t\tthis.inputPath = inputPath;\n\t}\n\tpublic String getMimeType() {\n\t\treturn mimeType;\n\t}\n\tpublic void setOrderService(OrderService orderService) {\n\t\tthis.orderService = orderService;\n\t}\n\tpublic String balance(){\n\t\t//System.out.println(\"=========balance===========\");\n\t\t//System.out.println(application.getRealPath(\"/\")+ \"WEB-INF\"+File.separator+\"download\"+File.separator);\n\t\tString realPath=application.getRealPath(\"/\")+ \"WEB-INF\"+File.separator+\"download\";\n\t\tPOIWriteUtil.makeBalance(orderService.findByNumberBalance(fileName.substring(0, 6)),realPath,fileName);\n\t\t//System.out.println(\"====================\");\n\t\treturn \"balance\";\n\t}\n\tpublic InputStream getBalance() {  \n       //获取资源类型\n\t\t//System.out.println(application.getRealPath(\"/\")+ \"WEB-INF\"+File.separator+\"download\"+File.separator);\n\t\t//String apString=application.getRealPath(\"/\")+ \"WEB-INF\"+File.separator+\"download\";\n\t\t//System.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));\n\t\tmimeType = application.getMimeType(inputPath+File.separator+fileName);\n\t\t return application.getResourceAsStream(inputPath+File.separator+fileName);\n    }  \n\n}\n\n\n\n```\n##### SuperAction\n```\npackage Action;\n\nimport java.lang.reflect.ParameterizedType;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts2.interceptor.ServletRequestAware;\nimport org.apache.struts2.interceptor.ServletResponseAware;\nimport org.apache.struts2.util.ServletContextAware;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport com.opensymphony.xwork2.ActionSupport;\nimport com.opensymphony.xwork2.ModelDriven;\n\n//所有Action的父类\npublic class SuperAction<T> extends ActionSupport\n\t\timplements ApplicationContextAware,ServletRequestAware, ServletResponseAware, ServletContextAware,ModelDriven<T> {\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 1L;\n\tprotected HttpServletRequest request;// 请求对象\n\tprotected HttpServletResponse response;// 响应对象\n\tprotected HttpSession session;// 会话对象\n\tprotected ServletContext application;// 全局对象\n\tprotected ApplicationContext ctx;\n\tprotected T model = null;\n\t\n\t\n\tpublic void setServletContext(ServletContext application) {\n\t\tthis.application = application;\n\t}\n\n\tpublic void setServletResponse(HttpServletResponse response) {\n\t\tthis.response = response;\n\t}\n\n\tpublic void setServletRequest(HttpServletRequest request) {\n\t\tthis.request = request;\n\t\tthis.session = this.request.getSession();\n\t}\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext ctx) throws BeansException {\n\t\tthis.ctx=ctx;\n\t}\n\t// 在拦截器执行此方法的时候Action的构造方法已经创建,所以Model中有值\n\tpublic T getModel() {\n\t\treturn model;\n\t}\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tpublic SuperAction() {\n\t\tParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();\n\t\tClass clazz = (Class) type.getActualTypeArguments()[0];\n\t\ttry {\n\t\t\tmodel = (T) clazz.newInstance();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\n}\n\n```\nPOIWriteUtil作用：通过POI生成excel文件\n##### 前台\n```\n<a href=\"order_balance?fileName=201607.xls\">下载账单</a>\n```\n\n#### 上传，新增\napplication对象是我的应用全局变量\n\n```\napplication.getRealPath(\"/\");\n```\n\n```\n\tSystem.out.println(application.getRealPath(\"/\"));\n\tD:\\WorkSpace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\SSH\\\n```\n##### 找到的是eclipse的工作路径，生成的文件也在\n#### 下载通过<struts.xml\\><param name=\"inputPath\"\\>/WEB-INF/download</param\\>配置inputPath\n通过Struts拦截器调用setFileName()获取前台的fileName\n```\napplication.getResourceAsStream(inputPath+File.separator+fileName);\n\n```\n\n#### 常见错误分析\n\n##### Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the <param name=\"inputName\"> tag specified for this action.\n实际上我已经定义了balance，但是报错说的balance找不到实际上是因为获取不到文件导致的\n\nSystem.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));等于null\n```\nStacktraces\njava.lang.IllegalArgumentException: Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the <param name=\"inputName\"> tag specified for this action.\n    org.apache.struts2.dispatcher.StreamResult.doExecute(StreamResult.java:237)\n    org.apache.struts2.dispatcher.StrutsResultSupport.execute(StrutsResultSupport.java:191)\n    com.opensymphony.xwork2.DefaultActionInvocation.executeResult(DefaultActionInvocation.java:372)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:276)\n    org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)\n    org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)\n    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)\n    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n    org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)\n    org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)\n    org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)\n    org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)\n    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)\n    org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n    org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)\n    org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n    org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)\n    org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)\n    org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n    org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)\n    org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)\n    org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)\n    org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)\n    org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)\n    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)\n    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    java.lang.Thread.run(Thread.java:745)\n```\n\n#####  java.io.IOException: 系统找不到指定的路径。\n在上传文件的时候, 把realPath写错了，找不到路径，无法保存文件\n\n```\napplication.getRealPath(\"/\")\n```\n\n\n```\n2016-07-19 16:55:04,917 -HHH000397: Using ASTQueryTranslatorFactory -INFO  -org.hibernate.hql.internal.QueryTranslatorFactoryInitiator:47 -[http-nio-8080-exec-42:8591ms]\n java.io.IOException: 系统找不到指定的路径。\n\tat java.io.WinNTFileSystem.createFileExclusively(Native Method)\n\tat java.io.File.createNewFile(File.java:1012)\n\tat Util.POIWriteUtil.makeHSSF(POIWriteUtil.java:38)\n\tat Util.POIWriteUtil.makeBalance(POIWriteUtil.java:29)\n\tat Action.OrderAction.balance(OrderAction.java:65)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)\n\tat ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)\n\tat ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)\n\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)\n\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)\n\tat ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)\n\tat ognl.ASTMethod.getValueBody(ASTMethod.java:90)\n\tat ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)\n\tat ognl.SimpleNode.getValue(SimpleNode.java:258)\n\tat ognl.Ognl.getValue(Ognl.java:494)\n\tat ognl.Ognl.getValue(Ognl.java:458)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil$2.execute(OgnlUtil.java:315)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecute(OgnlUtil.java:346)\n\tat com.opensymphony.xwork2.ognl.OgnlUtil.getValue(OgnlUtil.java:313)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)\n\tat org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)\n\tat org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)\n\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)\n\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)\n\tat org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)\n\tat org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)\n\tat org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)\n\tat org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)\n\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\n\n```","slug":"JavaEE-资源路径问题","published":1,"updated":"2016-08-31T12:24:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7be009mugv5zn2ejmtd","content":"<h2 id=\"JavaEE下的路径（Struts，Servlet）\"><a href=\"#JavaEE下的路径（Struts，Servlet）\" class=\"headerlink\" title=\"JavaEE下的路径（Struts，Servlet）\"></a>JavaEE下的路径（Struts，Servlet）</h2><a id=\"more\"></a>\n<h5 id=\"strtus-xml\"><a href=\"#strtus-xml\" class=\"headerlink\" title=\"strtus.xml\"></a>strtus.xml</h5><p><img src=\"/.io//201607191615.PNG\" alt=\"struts.xml\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;action name=&quot;order_balance&quot; class=&quot;orderAction&quot; method=&quot;balance&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 指定被下载资源的位置 --&gt;</span><br><span class=\"line\">\t&lt;param name=&quot;inputPath&quot;&gt;/WEB-INF/download&lt;/param&gt;</span><br><span class=\"line\">\t\t&lt;!-- 配置结果类型为stream的结果 --&gt;</span><br><span class=\"line\">\t&lt;result type=&quot;stream&quot; name=&quot;balance&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 指定下载文件的文件类型 动态获取getMimeType()--&gt;</span><br><span class=\"line\">\t\t&lt;param name=&quot;contentType&quot;&gt;$&#123;mimeType&#125;&lt;/param&gt;</span><br><span class=\"line\">\t\t&lt;!-- 指定由getBalance()方法返回被下载文件的InputStream --&gt;</span><br><span class=\"line\">\t\t&lt;param name=&quot;inputName&quot;&gt;balance&lt;/param&gt;</span><br><span class=\"line\">\t\t&lt;param name=&quot;contentDisposition&quot;&gt;attachment;filename=&quot;$&#123;fileName&#125;&quot;&lt;/param&gt;</span><br><span class=\"line\">\t&lt;/result&gt;</span><br><span class=\"line\">&lt;/action&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h5><p><img src=\"/.io//201607191616.PNG\" alt=\"OrderAction\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Action;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import org.apache.struts2.ServletActionContext;</span><br><span class=\"line\">import Model.Order;</span><br><span class=\"line\">import SQLModel.Pager;</span><br><span class=\"line\">import Service.OrderService;</span><br><span class=\"line\">import Util.POIWriteUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">public class OrderAction extends  SuperAction&lt;Order&gt;&#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\">\tprivate OrderService orderService;</span><br><span class=\"line\">\tprivate String fileName;</span><br><span class=\"line\">\tprivate String inputPath;</span><br><span class=\"line\">\tprivate String mimeType;</span><br><span class=\"line\">\tprivate InputStream balance;</span><br><span class=\"line\">\tpublic void setFileName(String fileName) &#123;</span><br><span class=\"line\">\t\tthis.fileName = fileName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getFileName() &#123;</span><br><span class=\"line\">\t\treturn fileName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setInputPath(String inputPath) &#123;</span><br><span class=\"line\">\t\tthis.inputPath = inputPath;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getMimeType() &#123;</span><br><span class=\"line\">\t\treturn mimeType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setOrderService(OrderService orderService) &#123;</span><br><span class=\"line\">\t\tthis.orderService = orderService;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String balance()&#123;</span><br><span class=\"line\">\t\t//System.out.println(&quot;=========balance===========&quot;);</span><br><span class=\"line\">\t\t//System.out.println(application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;+File.separator);</span><br><span class=\"line\">\t\tString realPath=application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;;</span><br><span class=\"line\">\t\tPOIWriteUtil.makeBalance(orderService.findByNumberBalance(fileName.substring(0, 6)),realPath,fileName);</span><br><span class=\"line\">\t\t//System.out.println(&quot;====================&quot;);</span><br><span class=\"line\">\t\treturn &quot;balance&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic InputStream getBalance() &#123;  </span><br><span class=\"line\">       //获取资源类型</span><br><span class=\"line\">\t\t//System.out.println(application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;+File.separator);</span><br><span class=\"line\">\t\t//String apString=application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;;</span><br><span class=\"line\">\t\t//System.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));</span><br><span class=\"line\">\t\tmimeType = application.getMimeType(inputPath+File.separator+fileName);</span><br><span class=\"line\">\t\t return application.getResourceAsStream(inputPath+File.separator+fileName);</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"SuperAction\"><a href=\"#SuperAction\" class=\"headerlink\" title=\"SuperAction\"></a>SuperAction</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Action;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.ParameterizedType;</span><br><span class=\"line\">import javax.servlet.ServletContext;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import javax.servlet.http.HttpSession;</span><br><span class=\"line\">import org.apache.struts2.interceptor.ServletRequestAware;</span><br><span class=\"line\">import org.apache.struts2.interceptor.ServletResponseAware;</span><br><span class=\"line\">import org.apache.struts2.util.ServletContextAware;</span><br><span class=\"line\">import org.springframework.beans.BeansException;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import com.opensymphony.xwork2.ActionSupport;</span><br><span class=\"line\">import com.opensymphony.xwork2.ModelDriven;</span><br><span class=\"line\"></span><br><span class=\"line\">//所有Action的父类</span><br><span class=\"line\">public class SuperAction&lt;T&gt; extends ActionSupport</span><br><span class=\"line\">\t\timplements ApplicationContextAware,ServletRequestAware, ServletResponseAware, ServletContextAware,ModelDriven&lt;T&gt; &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\">\tprotected HttpServletRequest request;// 请求对象</span><br><span class=\"line\">\tprotected HttpServletResponse response;// 响应对象</span><br><span class=\"line\">\tprotected HttpSession session;// 会话对象</span><br><span class=\"line\">\tprotected ServletContext application;// 全局对象</span><br><span class=\"line\">\tprotected ApplicationContext ctx;</span><br><span class=\"line\">\tprotected T model = null;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setServletContext(ServletContext application) &#123;</span><br><span class=\"line\">\t\tthis.application = application;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setServletResponse(HttpServletResponse response) &#123;</span><br><span class=\"line\">\t\tthis.response = response;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setServletRequest(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\tthis.request = request;</span><br><span class=\"line\">\t\tthis.session = this.request.getSession();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext ctx) throws BeansException &#123;</span><br><span class=\"line\">\t\tthis.ctx=ctx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 在拦截器执行此方法的时候Action的构造方法已经创建,所以Model中有值</span><br><span class=\"line\">\tpublic T getModel() &#123;</span><br><span class=\"line\">\t\treturn model;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class=\"line\">\tpublic SuperAction() &#123;</span><br><span class=\"line\">\t\tParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();</span><br><span class=\"line\">\t\tClass clazz = (Class) type.getActualTypeArguments()[0];</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tmodel = (T) clazz.newInstance();</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>POIWriteUtil作用：通过POI生成excel文件</p>\n<h5 id=\"前台\"><a href=\"#前台\" class=\"headerlink\" title=\"前台\"></a>前台</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;order_balance?fileName=201607.xls&quot;&gt;下载账单&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"上传，新增\"><a href=\"#上传，新增\" class=\"headerlink\" title=\"上传，新增\"></a>上传，新增</h4><p>application对象是我的应用全局变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application.getRealPath(&quot;/&quot;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(application.getRealPath(&quot;/&quot;));</span><br><span class=\"line\">D:\\WorkSpace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\SSH\\</span><br></pre></td></tr></table></figure>\n<h5 id=\"找到的是eclipse的工作路径，生成的文件也在\"><a href=\"#找到的是eclipse的工作路径，生成的文件也在\" class=\"headerlink\" title=\"找到的是eclipse的工作路径，生成的文件也在\"></a>找到的是eclipse的工作路径，生成的文件也在</h5><h4 id=\"下载通过-lt-struts-xml-lt-param-name-”inputPath”-WEB-INF-download-lt-param-配置inputPath\"><a href=\"#下载通过-lt-struts-xml-lt-param-name-”inputPath”-WEB-INF-download-lt-param-配置inputPath\" class=\"headerlink\" title=\"下载通过&lt;struts.xml>&lt;param name=”inputPath”>/WEB-INF/download&lt;/param>配置inputPath\"></a>下载通过&lt;struts.xml>&lt;param name=”inputPath”>/WEB-INF/download&lt;/param>配置inputPath</h4><p>通过Struts拦截器调用setFileName()获取前台的fileName<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application.getResourceAsStream(inputPath+File.separator+fileName);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"常见错误分析\"><a href=\"#常见错误分析\" class=\"headerlink\" title=\"常见错误分析\"></a>常见错误分析</h4><h5 id=\"Can-not-find-a-java-io-InputStream-with-the-name-balance-in-the-invocation-stack-Check-the-tag-specified-for-this-action\"><a href=\"#Can-not-find-a-java-io-InputStream-with-the-name-balance-in-the-invocation-stack-Check-the-tag-specified-for-this-action\" class=\"headerlink\" title=\"Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the  tag specified for this action.\"></a>Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the <param name=\"inputName\"> tag specified for this action.</h5><p>实际上我已经定义了balance，但是报错说的balance找不到实际上是因为获取不到文件导致的</p>\n<p>System.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));等于null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stacktraces</span><br><span class=\"line\">java.lang.IllegalArgumentException: Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the &lt;param name=&quot;inputName&quot;&gt; tag specified for this action.</span><br><span class=\"line\">    org.apache.struts2.dispatcher.StreamResult.doExecute(StreamResult.java:237)</span><br><span class=\"line\">    org.apache.struts2.dispatcher.StrutsResultSupport.execute(StrutsResultSupport.java:191)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.executeResult(DefaultActionInvocation.java:372)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:276)</span><br><span class=\"line\">    org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)</span><br><span class=\"line\">    org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)</span><br><span class=\"line\">    org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)</span><br><span class=\"line\">    org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</span><br><span class=\"line\">    org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</span><br><span class=\"line\">    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class=\"line\">    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class=\"line\">    org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)</span><br><span class=\"line\">    org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class=\"line\">    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class=\"line\">    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class=\"line\">    org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)</span><br><span class=\"line\">    org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)</span><br><span class=\"line\">    org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)</span><br><span class=\"line\">    org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)</span><br><span class=\"line\">    org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)</span><br><span class=\"line\">    org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)</span><br><span class=\"line\">    org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)</span><br><span class=\"line\">    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)</span><br><span class=\"line\">    org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)</span><br><span class=\"line\">    org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)</span><br><span class=\"line\">    org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)</span><br><span class=\"line\">    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)</span><br><span class=\"line\">    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)</span><br><span class=\"line\">    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">    org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">    java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"java-io-IOException-系统找不到指定的路径。\"><a href=\"#java-io-IOException-系统找不到指定的路径。\" class=\"headerlink\" title=\"java.io.IOException: 系统找不到指定的路径。\"></a>java.io.IOException: 系统找不到指定的路径。</h5><p>在上传文件的时候, 把realPath写错了，找不到路径，无法保存文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application.getRealPath(&quot;/&quot;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-07-19 16:55:04,917 -HHH000397: Using ASTQueryTranslatorFactory -INFO  -org.hibernate.hql.internal.QueryTranslatorFactoryInitiator:47 -[http-nio-8080-exec-42:8591ms]</span><br><span class=\"line\"> java.io.IOException: 系统找不到指定的路径。</span><br><span class=\"line\">\tat java.io.WinNTFileSystem.createFileExclusively(Native Method)</span><br><span class=\"line\">\tat java.io.File.createNewFile(File.java:1012)</span><br><span class=\"line\">\tat Util.POIWriteUtil.makeHSSF(POIWriteUtil.java:38)</span><br><span class=\"line\">\tat Util.POIWriteUtil.makeBalance(POIWriteUtil.java:29)</span><br><span class=\"line\">\tat Action.OrderAction.balance(OrderAction.java:65)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:483)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)</span><br><span class=\"line\">\tat ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)</span><br><span class=\"line\">\tat ognl.ASTMethod.getValueBody(ASTMethod.java:90)</span><br><span class=\"line\">\tat ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)</span><br><span class=\"line\">\tat ognl.SimpleNode.getValue(SimpleNode.java:258)</span><br><span class=\"line\">\tat ognl.Ognl.getValue(Ognl.java:494)</span><br><span class=\"line\">\tat ognl.Ognl.getValue(Ognl.java:458)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil$2.execute(OgnlUtil.java:315)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecute(OgnlUtil.java:346)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil.getValue(OgnlUtil.java:313)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class=\"line\">\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)</span><br><span class=\"line\">\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)</span><br><span class=\"line\">\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)</span><br><span class=\"line\">\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)</span><br><span class=\"line\">\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)</span><br><span class=\"line\">\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)</span><br><span class=\"line\">\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"JavaEE下的路径（Struts，Servlet）\"><a href=\"#JavaEE下的路径（Struts，Servlet）\" class=\"headerlink\" title=\"JavaEE下的路径（Struts，Servlet）\"></a>JavaEE下的路径（Struts，Servlet）</h2>","more":"<h5 id=\"strtus-xml\"><a href=\"#strtus-xml\" class=\"headerlink\" title=\"strtus.xml\"></a>strtus.xml</h5><p><img src=\"/.io//201607191615.PNG\" alt=\"struts.xml\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;action name=&quot;order_balance&quot; class=&quot;orderAction&quot; method=&quot;balance&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 指定被下载资源的位置 --&gt;</span><br><span class=\"line\">\t&lt;param name=&quot;inputPath&quot;&gt;/WEB-INF/download&lt;/param&gt;</span><br><span class=\"line\">\t\t&lt;!-- 配置结果类型为stream的结果 --&gt;</span><br><span class=\"line\">\t&lt;result type=&quot;stream&quot; name=&quot;balance&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 指定下载文件的文件类型 动态获取getMimeType()--&gt;</span><br><span class=\"line\">\t\t&lt;param name=&quot;contentType&quot;&gt;$&#123;mimeType&#125;&lt;/param&gt;</span><br><span class=\"line\">\t\t&lt;!-- 指定由getBalance()方法返回被下载文件的InputStream --&gt;</span><br><span class=\"line\">\t\t&lt;param name=&quot;inputName&quot;&gt;balance&lt;/param&gt;</span><br><span class=\"line\">\t\t&lt;param name=&quot;contentDisposition&quot;&gt;attachment;filename=&quot;$&#123;fileName&#125;&quot;&lt;/param&gt;</span><br><span class=\"line\">\t&lt;/result&gt;</span><br><span class=\"line\">&lt;/action&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h5><p><img src=\"/.io//201607191616.PNG\" alt=\"OrderAction\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Action;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import org.apache.struts2.ServletActionContext;</span><br><span class=\"line\">import Model.Order;</span><br><span class=\"line\">import SQLModel.Pager;</span><br><span class=\"line\">import Service.OrderService;</span><br><span class=\"line\">import Util.POIWriteUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">public class OrderAction extends  SuperAction&lt;Order&gt;&#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\">\tprivate OrderService orderService;</span><br><span class=\"line\">\tprivate String fileName;</span><br><span class=\"line\">\tprivate String inputPath;</span><br><span class=\"line\">\tprivate String mimeType;</span><br><span class=\"line\">\tprivate InputStream balance;</span><br><span class=\"line\">\tpublic void setFileName(String fileName) &#123;</span><br><span class=\"line\">\t\tthis.fileName = fileName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getFileName() &#123;</span><br><span class=\"line\">\t\treturn fileName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setInputPath(String inputPath) &#123;</span><br><span class=\"line\">\t\tthis.inputPath = inputPath;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getMimeType() &#123;</span><br><span class=\"line\">\t\treturn mimeType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setOrderService(OrderService orderService) &#123;</span><br><span class=\"line\">\t\tthis.orderService = orderService;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String balance()&#123;</span><br><span class=\"line\">\t\t//System.out.println(&quot;=========balance===========&quot;);</span><br><span class=\"line\">\t\t//System.out.println(application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;+File.separator);</span><br><span class=\"line\">\t\tString realPath=application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;;</span><br><span class=\"line\">\t\tPOIWriteUtil.makeBalance(orderService.findByNumberBalance(fileName.substring(0, 6)),realPath,fileName);</span><br><span class=\"line\">\t\t//System.out.println(&quot;====================&quot;);</span><br><span class=\"line\">\t\treturn &quot;balance&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic InputStream getBalance() &#123;  </span><br><span class=\"line\">       //获取资源类型</span><br><span class=\"line\">\t\t//System.out.println(application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;+File.separator);</span><br><span class=\"line\">\t\t//String apString=application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;;</span><br><span class=\"line\">\t\t//System.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));</span><br><span class=\"line\">\t\tmimeType = application.getMimeType(inputPath+File.separator+fileName);</span><br><span class=\"line\">\t\t return application.getResourceAsStream(inputPath+File.separator+fileName);</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"SuperAction\"><a href=\"#SuperAction\" class=\"headerlink\" title=\"SuperAction\"></a>SuperAction</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package Action;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.ParameterizedType;</span><br><span class=\"line\">import javax.servlet.ServletContext;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import javax.servlet.http.HttpSession;</span><br><span class=\"line\">import org.apache.struts2.interceptor.ServletRequestAware;</span><br><span class=\"line\">import org.apache.struts2.interceptor.ServletResponseAware;</span><br><span class=\"line\">import org.apache.struts2.util.ServletContextAware;</span><br><span class=\"line\">import org.springframework.beans.BeansException;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import com.opensymphony.xwork2.ActionSupport;</span><br><span class=\"line\">import com.opensymphony.xwork2.ModelDriven;</span><br><span class=\"line\"></span><br><span class=\"line\">//所有Action的父类</span><br><span class=\"line\">public class SuperAction&lt;T&gt; extends ActionSupport</span><br><span class=\"line\">\t\timplements ApplicationContextAware,ServletRequestAware, ServletResponseAware, ServletContextAware,ModelDriven&lt;T&gt; &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\">\tprotected HttpServletRequest request;// 请求对象</span><br><span class=\"line\">\tprotected HttpServletResponse response;// 响应对象</span><br><span class=\"line\">\tprotected HttpSession session;// 会话对象</span><br><span class=\"line\">\tprotected ServletContext application;// 全局对象</span><br><span class=\"line\">\tprotected ApplicationContext ctx;</span><br><span class=\"line\">\tprotected T model = null;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setServletContext(ServletContext application) &#123;</span><br><span class=\"line\">\t\tthis.application = application;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setServletResponse(HttpServletResponse response) &#123;</span><br><span class=\"line\">\t\tthis.response = response;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setServletRequest(HttpServletRequest request) &#123;</span><br><span class=\"line\">\t\tthis.request = request;</span><br><span class=\"line\">\t\tthis.session = this.request.getSession();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext ctx) throws BeansException &#123;</span><br><span class=\"line\">\t\tthis.ctx=ctx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 在拦截器执行此方法的时候Action的构造方法已经创建,所以Model中有值</span><br><span class=\"line\">\tpublic T getModel() &#123;</span><br><span class=\"line\">\t\treturn model;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class=\"line\">\tpublic SuperAction() &#123;</span><br><span class=\"line\">\t\tParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();</span><br><span class=\"line\">\t\tClass clazz = (Class) type.getActualTypeArguments()[0];</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tmodel = (T) clazz.newInstance();</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>POIWriteUtil作用：通过POI生成excel文件</p>\n<h5 id=\"前台\"><a href=\"#前台\" class=\"headerlink\" title=\"前台\"></a>前台</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;order_balance?fileName=201607.xls&quot;&gt;下载账单&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"上传，新增\"><a href=\"#上传，新增\" class=\"headerlink\" title=\"上传，新增\"></a>上传，新增</h4><p>application对象是我的应用全局变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application.getRealPath(&quot;/&quot;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(application.getRealPath(&quot;/&quot;));</span><br><span class=\"line\">D:\\WorkSpace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\SSH\\</span><br></pre></td></tr></table></figure>\n<h5 id=\"找到的是eclipse的工作路径，生成的文件也在\"><a href=\"#找到的是eclipse的工作路径，生成的文件也在\" class=\"headerlink\" title=\"找到的是eclipse的工作路径，生成的文件也在\"></a>找到的是eclipse的工作路径，生成的文件也在</h5><h4 id=\"下载通过-lt-struts-xml-lt-param-name-”inputPath”-WEB-INF-download-lt-param-配置inputPath\"><a href=\"#下载通过-lt-struts-xml-lt-param-name-”inputPath”-WEB-INF-download-lt-param-配置inputPath\" class=\"headerlink\" title=\"下载通过&lt;struts.xml>&lt;param name=”inputPath”>/WEB-INF/download&lt;/param>配置inputPath\"></a>下载通过&lt;struts.xml>&lt;param name=”inputPath”>/WEB-INF/download&lt;/param>配置inputPath</h4><p>通过Struts拦截器调用setFileName()获取前台的fileName<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application.getResourceAsStream(inputPath+File.separator+fileName);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"常见错误分析\"><a href=\"#常见错误分析\" class=\"headerlink\" title=\"常见错误分析\"></a>常见错误分析</h4><h5 id=\"Can-not-find-a-java-io-InputStream-with-the-name-balance-in-the-invocation-stack-Check-the-tag-specified-for-this-action\"><a href=\"#Can-not-find-a-java-io-InputStream-with-the-name-balance-in-the-invocation-stack-Check-the-tag-specified-for-this-action\" class=\"headerlink\" title=\"Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the  tag specified for this action.\"></a>Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the <param name=\"inputName\"> tag specified for this action.</h5><p>实际上我已经定义了balance，但是报错说的balance找不到实际上是因为获取不到文件导致的</p>\n<p>System.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));等于null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stacktraces</span><br><span class=\"line\">java.lang.IllegalArgumentException: Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the &lt;param name=&quot;inputName&quot;&gt; tag specified for this action.</span><br><span class=\"line\">    org.apache.struts2.dispatcher.StreamResult.doExecute(StreamResult.java:237)</span><br><span class=\"line\">    org.apache.struts2.dispatcher.StrutsResultSupport.execute(StrutsResultSupport.java:191)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.executeResult(DefaultActionInvocation.java:372)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:276)</span><br><span class=\"line\">    org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)</span><br><span class=\"line\">    org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)</span><br><span class=\"line\">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">    org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)</span><br><span class=\"line\">    org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)</span><br><span class=\"line\">    org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</span><br><span class=\"line\">    org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</span><br><span class=\"line\">    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class=\"line\">    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class=\"line\">    org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)</span><br><span class=\"line\">    org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class=\"line\">    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class=\"line\">    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class=\"line\">    org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)</span><br><span class=\"line\">    org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)</span><br><span class=\"line\">    org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)</span><br><span class=\"line\">    org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)</span><br><span class=\"line\">    org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)</span><br><span class=\"line\">    org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)</span><br><span class=\"line\">    org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)</span><br><span class=\"line\">    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)</span><br><span class=\"line\">    org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)</span><br><span class=\"line\">    org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)</span><br><span class=\"line\">    org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)</span><br><span class=\"line\">    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)</span><br><span class=\"line\">    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)</span><br><span class=\"line\">    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">    org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">    java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"java-io-IOException-系统找不到指定的路径。\"><a href=\"#java-io-IOException-系统找不到指定的路径。\" class=\"headerlink\" title=\"java.io.IOException: 系统找不到指定的路径。\"></a>java.io.IOException: 系统找不到指定的路径。</h5><p>在上传文件的时候, 把realPath写错了，找不到路径，无法保存文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application.getRealPath(&quot;/&quot;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-07-19 16:55:04,917 -HHH000397: Using ASTQueryTranslatorFactory -INFO  -org.hibernate.hql.internal.QueryTranslatorFactoryInitiator:47 -[http-nio-8080-exec-42:8591ms]</span><br><span class=\"line\"> java.io.IOException: 系统找不到指定的路径。</span><br><span class=\"line\">\tat java.io.WinNTFileSystem.createFileExclusively(Native Method)</span><br><span class=\"line\">\tat java.io.File.createNewFile(File.java:1012)</span><br><span class=\"line\">\tat Util.POIWriteUtil.makeHSSF(POIWriteUtil.java:38)</span><br><span class=\"line\">\tat Util.POIWriteUtil.makeBalance(POIWriteUtil.java:29)</span><br><span class=\"line\">\tat Action.OrderAction.balance(OrderAction.java:65)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:483)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)</span><br><span class=\"line\">\tat ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)</span><br><span class=\"line\">\tat ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)</span><br><span class=\"line\">\tat ognl.ASTMethod.getValueBody(ASTMethod.java:90)</span><br><span class=\"line\">\tat ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)</span><br><span class=\"line\">\tat ognl.SimpleNode.getValue(SimpleNode.java:258)</span><br><span class=\"line\">\tat ognl.Ognl.getValue(Ognl.java:494)</span><br><span class=\"line\">\tat ognl.Ognl.getValue(Ognl.java:458)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil$2.execute(OgnlUtil.java:315)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecute(OgnlUtil.java:346)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.ognl.OgnlUtil.getValue(OgnlUtil.java:313)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)</span><br><span class=\"line\">\tat com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class=\"line\">\tat org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</span><br><span class=\"line\">\tat org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class=\"line\">\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)</span><br><span class=\"line\">\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)</span><br><span class=\"line\">\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)</span><br><span class=\"line\">\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)</span><br><span class=\"line\">\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)</span><br><span class=\"line\">\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)</span><br><span class=\"line\">\tat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>"},{"title":"Thinking in java 基础之线程和并发","description":"Thread Runnable线程并发基础,锁和资源以及生产者消费者","date":"2016-08-09T08:23:38.000Z","_content":"\n\n## Java中的线程和并发\n\n#### 新线程\n\n进程：一次程序的完整运行。同一个时间段内，会有多进程抢占资源，但是在某一个时间点上，只有一个进程正在运行。\n  \n例如:我们可以一边开着浏览器一边上着QQ，但是在当时，(now),这个时间点上，运行的是某一个进程。\n  \n线程：比如说，我们在聊QQ的时候，又可以在QQ中查找用户，可以这么理解，线程就是一个进程中的若干个功能。多线程的资源是本进程中的资源，同样，线程也是要抢占自己的资源。\n\n那么，我们开发的java应用，main是属于一个进程，不过呢，java中可以给我们提供多线程，因此就引入了多线程编程。\n\n##### 线程的实现\n\n> 继承Thread类，实现Runnable接口，jdk1.5之后，实现Callable接口\n\n下面是一个实例:继承Thread类\n\n```\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tDemoThread myThread1=new DemoThread(\"线程1\");\n\t\tDemoThread myThread2=new DemoThread(\"线程2\");\n\t\tDemoThread myThread3=new DemoThread(\"线程3\");\n\t\tmyThread1.start();\n\t\tmyThread2.start();\n\t\tmyThread3.start();\n\t}\n\t\n}\n\nclass DemoThread extends Thread{\n\tprivate String name;\n\tpublic DemoThread(String name) {\n\t\tthis.name=name;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tSystem.out.println(this.name+\":\"+i);\n\t\t}\n\t}\n}\n```\n![结果](Thinking-in-java-基础之线程和并发/20160924.PNG)\n\n下面是一个实例:实现Runnable接口\n\n```\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tThread myThread1=new Thread( new DemoRunnable(\" implements Runnable线程1\"));\n\t\tThread myThread2=new Thread( new DemoRunnable(\" implements Runnable线程2\"));\n\t\tThread myThread3=new Thread( new DemoRunnable(\" implements Runnable线程3\"));\n\t\tmyThread1.start();\n\t\tmyThread2.start();\n\t\tmyThread3.start();\n\t}\n\t\n}\nclass DemoRunnable implements Runnable{\n\tprivate String name;\n\tpublic DemoRunnable(String name) {\n\t\tthis.name=name;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tSystem.out.println(this.name+\":\"+i);\n\t\t}\n\t}\n}\n```\n![结果](Thinking-in-java-基础之线程和并发/201609241035.PNG)\n\n多线程的启动需要Thread.start()，而且一个新线程只能运行一次start();而不是run();当我们调用run的时候，实际上是对象的方法调用，而不是启动线程。因此启动线程唯一方法start();下面来看Thread中的start();\n\n```\n  /**\n     * Causes this thread to begin execution; the Java Virtual Machine\n     * calls the <code>run</code> method of this thread.\n     * <p>当这个方法被调用后，JVM会调用这个线程的run方法；\n     * The result is that two threads are running concurrently: the\n     * current thread (which returns from the call to the\n     * <code>start</code> method) and the other thread (which executes its\n     * <code>run</code> method).\n     * <p>结果是:两个线程都是正在运行状态，concurrently（同时，同时发生地）\n     * 调用start的这个线程和另一个运行run的线程\n     * It is never legal to start a thread more than once.\n     * In particular, a thread may not be restarted once it has completed\n     * execution.\n     *但是超过一次以上的调用、启动start是不合法的。\n     * @exception  IllegalThreadStateException  if the thread was already\n     *               started.如果线程正在运行，再次调用会抛出异常\n     *  //private ThreadGroup group;\n     *   //  private volatile int threadStatus = 0;\n     * @see        #run()\n     * @see        #stop()\n     */\n    public synchronized void start() {\n        /**\n         * This method is not invoked for the main method thread or \"system\"\n         * group threads created/set up by the VM. Any new functionality added\n         * to this method in the future may have to also be added to the VM.\n         *\n         * A zero status value corresponds to state \"NEW\".\n         */\n        if (threadStatus != 0)\n            throw new IllegalThreadStateException();\n\n        /* Notify the group that this thread is about to be started\n         * so that it can be added to the group's list of threads\n         * and the group's unstarted count can be decremented. */\n        group.add(this);//第一次调用的话把当前线程添加到ThreadGroup\n\n        boolean started = false;\n        try {\n            start0();\n            started = true;\n        } finally {\n            try {\n                if (!started) {\n                    group.threadStartFailed(this);\n                }\n            } catch (Throwable ignore) {\n                /* do nothing. If start0 threw a Throwable then\n                  it will be passed up the call stack */\n            }\n        }\n    }\n\n    private native void start0();//这里使用了一个JNI native方法。其中与操作系统有关系的方法调用，JVM已经实现好了，\n\n```\nJNI(Java Native Interface)新线程的资源需要通过native来进行抢占。同样这样会变得与操作系统有关了。\n\n优劣势：继承之后不能再继承其他类,推荐使用implements Runnable接口。\n\n```\npublic class Thread implements Runnable {\n    /* Make sure registerNatives is the first thing <clinit> does. */\n}\n```\n\n就算继承Thread在背后也是实现了Runnable。重写了run(),方法实际上也是重写了Runnable的run()方法，原因就在这里。\nThread只是和线程的启动销毁有关，和业务无关。因此Thread实际上像一个代理。\n\n#### 与线程有关的方法\n\n和方法密切相关的是线程的生命周期。把生命周期搞清楚后，这些主要的方法也就了解了。\n\n![生命周期](Thinking-in-java-基础之线程和并发/20150309140927553.jpg)\n\n首先new Thread(),新建一个线程,然后一个主要的方法start();这个时候的状态属于:我准备好了，等待运行，当时间片转到我的时候，我就执行就好了，至于另外几种状态的话，可以更具下面的方法的一个具体解释来理解一下。\n\nThread方法\n\n|方法名|作用|\n|:------|:------|\n|start();|将本线程变为可运行状态|\n|yield();|该方法与sleep()类似，只是不能由用户指定暂停多长时间，并且yield（）方法只能让同优先级的线程有执行的机会|\n|sleep(long 毫秒);|线程休眠，就是我现在累了，想休息一下,|\n|join();|等待所有线程运行结束|\n\nObject方法\n\n|方法名|作用|\n|:------|:------|\n|wait();|本线程等待，这里的等待是别人不叫，不会醒的等待。|\n|notifyAll();|叫醒所有线程线程|\n|notify();|叫醒某一个线程，不确定|\n\n#### 锁与共享资源\n\nimplements Runnable对于共享资源的作用\n\n```\npublic class Demo {\n\tpublic static void main(String[] args) {\n\tDemoRunnable demoRunnable=new DemoRunnable();//只有一个Runnable对象\n\tThread myThread1=new Thread(demoRunnable,\" implements Runnable线程1\");\n\tThread myThread2=new Thread(demoRunnable,\" implements Runnable线程2\");\n\tThread myThread3=new Thread(demoRunnable,\" implements Runnable线程3\");\n\t//下面的每一个线程都使用同一个demoRunnable实例对象，\n\t//那么对于demoRunnable内部的integer a就在每一个线程中都可以修改，访问\n\tmyThread1.start();\n\tmyThread2.start();\n\tmyThread3.start();\n\t}\n}\n\nclass DemoRunnable implements Runnable{\n\tpublic String name;\n\tpublic Integer a=0;\n\tpublic DemoRunnable(){\n\t\t\n\t}\n\tpublic DemoRunnable(String name) {\n\t\tthis.name=name;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\ttry {\n\t\t\t\t\tThread.sleep(10);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\" a:\"+(a++));\n\t\t}\n\t}\n}\n\n```\n\n![资源共享](Thinking-in-java-基础之线程和并发/201609241131.PNG)\n\n\n虽然在这里，可以实现资源的共享，但是呢，我们仔细看一下，就会发现，如果按照单线程的话，每一个数字应该只出现一次才对，而且最终a=3*100=300，但是我们在看一下并不是。\n首先0出现了2次，最后我们看一下结果，218，这是怎么回事？？？计算机坏了？一般情况下啊，千万不要怀疑计算机，前人如次多的尝试，都没问题，你出问题了？不可能，对吧？\n\n![资源共享](Thinking-in-java-基础之线程和并发/201609241132.PNG)\n\n其实在这里出现了一个问题，是丢失更新。\n\n因此，在实际运行过程中，我们会需要这样的一种情况，举例:银行转账：在转账的同时又在取款，如果这个钱只扣了一次,那我们岂不是赚大了，天天去取钱。\n这个时候就需要一个东西“锁”，保障在更新的时候别人不能更新我正在更新的数据，如果访问的话，就随便吧，无所谓，你看看，只要不动手就行。\n\n下面就来说说怎么来实现。来解决丢失更新呢？\n\n```\n\npublic class LockDemo {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Thread.currentThread().getPriority());\n\t\tLockDemoRunnable demoRunnable=new LockDemoRunnable();\n\t\tThread myThread1=new Thread(demoRunnable,\" implements Runnable线程1\");\n\t\tThread myThread2=new Thread(demoRunnable,\" implements Runnable线程2\");\n\t\tThread myThread3=new Thread(demoRunnable,\" implements Runnable线程3\");\n\t\tmyThread1.start();\n\t\tmyThread2.start();\n\t\tmyThread3.start();\n\t}\n}\nclass LockDemoRunnable implements Runnable{\n\tpublic String name;\n\tpublic Integer a=0;\n\tpublic LockDemoRunnable(){\n\t}\n\tpublic LockDemoRunnable(String name) {\n\t\tthis.name=name;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tsynchronized (a) {\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(10);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\" a:\"+(a++));\n\t\t\t}\n\t\t}\n\t}\n}\n```\n这段代码和上面的代码中间只相差了一个地方，在循环的地方添加了一个\tsynchronized (a) {}，这个的作用呢，很简单，在要执行里面的代码的时候首先看一下a的锁是否被放开了，如果放开了，就可以执行里面的代脉代码，如果没有，在这等着，等锁，当其他的线程（实际这里的表述应该是对象，因为程序的运行实际上是对象的调用）把这段代码执行完，或者抛出异常，反正就是执行点不在里面的时候，这是，在这等待的线程才能继续执行。\n\n这其实也是synchronized关键字语句块的作用。到这里后呢，我们就需要知道另一个问题了，我究竟应该锁定哪一个对象呢？是this，还是a，是代码块，还是方法？这就引入了下一个问题，粒度和锁级别。\n\n##### 锁级别 粒度\n\n \n> 同步加锁的是对象，而不是代码。\n\n这里推荐一篇文章[Java synchronized详解](http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html)\n\n特别是第三部分，把锁的粒度解释的非常清楚。\n\n##### 自旋锁\n\n说白了，就是，光看，不干活。网上的答案:\n\n```\npublic class SpinLock {\n    private AtomicReference<Thread> owner = new AtomicReference<>();\n\n    public void lock(){\n        Thread currentThread = Thread.currentThread();\n        //循环cas来判断锁是否被占用，第一个为期望值，如果为null说明锁未被占用，设置当前线程占用\n        while(owner.compareAndSet(null,currentThread)){\n            //这里一般会调用java.util.concurrent.locks.AbstractOwnableSynchronizer的setExclusiveOwnerThread(Thread t)方法来设置独占锁\n        }\n    }\n\n    public void unlock(){\n        Thread currentThread = Thread.currentThread();\n\n        owner.compareAndSet(currentThread,null);\n    }\n}\n```\n这里是使用`import java.util.concurrent.atomic.AtomicReference;`来实现的。\n\n##### 死锁\n\n死锁一般不会出现，但是如果出现的话，大都是业务问题，而不是代码问题。举例：\n\n两个线程A、B  两个资源obj1、obj2\n\nA拥有obj1，但是需要obj2，才能成功运行\n\nB拥有obj2，但是需要obj1，才能成功运行\n\n这时，A不想放弃obj1，B不想放弃obj2，两个线程又都想运行，这是就会出现死锁，\n\n死锁代码的例子:\n\n```\npublic class DeadLock {\n    public static void main(String[] args){\n    \tRunnable runnable1=new testDeadLock(true);\n    \tRunnable runnable2=new testDeadLock(false);\n    \tThread thread1=new Thread(runnable1);\n    \tThread thread2=new Thread(runnable2);\n    \tthread1.start();\n    \tthread2.start();\n    }\n}\n\nclass testDeadLock implements Runnable{\n\t\n\tpublic  boolean flag;\n\tstatic Object o1=new Object();\n\tstatic Object o2=new Object();\n\tpublic testDeadLock(boolean flag) {\n\t\tthis.flag=flag;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"=====================:\"+flag);\n\t\tif(flag){\n\t\t\tsynchronized (o1) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tsynchronized (o2) {\n\t\t\t\t\tSystem.out.println(\"00000000000000\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tif(!flag){\n\t\t\tsynchronized (o2) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tsynchronized (o1) {\n\t\t\t\t\tSystem.out.println(\"11111111111111\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}\n\n```\n这个应该都可以看得出来结果，只输出\n```\n\"====================：false\"\n\"=====================：true\"\n```\n而00000000000000和1111111111111111都不会输出。\n\n#### 生产者消费者模型\n\n> 重要\n\n下面只进行代码分析\n\n\n生产者（蒸馒头的厨师）:\n\n```\nclass Producer extends Thread{\n\tSyncStack syncStack=null;\n\tpublic Producer(SyncStack syncStack) {\n\t\tthis.syncStack=syncStack;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tMantou mantou=new Mantou(i);\n\t\t\tSystem.out.println(this.currentThread().getName()+\" Producer mantou:\"+mantou);\n\t\t\tsyncStack.push(mantou);\n//\t\t\tThread.sleep((int));\n\t\t}\n\t}\n}\n```\n\n消费者（吃馒头的工人）：\n\n```\nclass Consumer extends Thread{\n\tSyncStack syncStack =null;\n\tpublic Consumer(SyncStack syncStack) {\n\t\tthis.syncStack=syncStack;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 20; i++) {\n\t\tMantou mantou=\tsyncStack.pop();\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\" Consumer mantou:\"+mantou);\n\t\t}\n\t}\n}\n\n```\n\nmain：\n\n```\npublic class ProducerConsumer {\n    public static void main(String[] args){\n    \tSyncStack syncStack=new SyncStack();//只有一个筐，生产者在这个筐里面工作，实际上是模拟共用资源\n    \tfor (int i = 0; i < 3; i++) {\n    \t\tProducer producer=new Producer(syncStack);\n    \t\tThread producerthread=new Thread(producer);\n    \t\tproducerthread.setName(\"Producer:\"+i);\n    \t\tproducerthread.start();\n\t\t}\n    \tfor (int i = 0; i < 3; i++) {\n    \t\tConsumer consumer=new Consumer(syncStack);\n        \tThread consumerthread=new Thread(consumer);\n        \tconsumerthread.setName(\"Consumer:\"+i);\n        \tconsumerthread.start();\n\t\t}\n    \t\n    }\n}\n```\n馒头：\n```\nclass Mantou{\n\tint id;\n\tpublic Mantou(int id) {\n\t\tthis.id=id;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"id:\"+id;\n\t}\n}\n```\n筐或者是篮子（盛馒头用的）:\n```\nclass SyncStack{\n\tint index=0;\n\tMantou[] arr=new Mantou[6];\n\t//生产者往arr中添加馒头\n\tpublic synchronized void push(Mantou mt) {\n\t\twhile(index==arr.length) {//当index==6的时候，说明arr已经满了，这是生产者应该等待，因此如果下一个还是生产者的话一直等待，然后这里就是一个wait();\n\t\t\ttry {\n\t\t\t\tthis.wait();//等待，一直等，等下去，直到有人叫我。\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tthis.notifyAll();//唤醒所有线程\n\t\tarr[index]=mt;\n\t\tindex++;\n\t}\n\t//消费者在arr中拿馒头吃\n\tpublic synchronized Mantou pop() {\n\t\twhile (index==0) {\n\t\t\ttry {\n\t\t\t\tthis.wait();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tthis.notifyAll();//唤醒所又，如果我现在拿出来一个后\n\t\tindex--;\n\t\treturn arr[index];\n\t}\n}\n\n```\n\n#### 状态\n\n#### 信号量\n\n 上面的一个例子中，notifyAll(),是叫醒所有线程，这时候如果，有一个空位，我就叫醒一个线程，还有空位，我就再叫醒一个线程，这里的有多少个线程正在睡觉，就是信号量的概念。这里就不再演示了。\n\n\n\n参考文献\n\n- [Java线程多线程编程【尚学堂科技马士兵Java基础教程】](http://www.56.com/u74/v_MTA4MTI4MTI3.html) \n- [Java synchronized详解](http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html) \n- [java synchronized详解](http://www.cnblogs.com/GnagWang/archive/2011/02/27/1966606.html)\n- [Java 8 并发教程：同步和锁](https://segmentfault.com/a/1190000006049612)\n- [Java 多线程 并发编程](http://blog.csdn.net/escaflone/article/details/10418651)\n- [JDK并发四篇文章](https://my.oschina.net/liughDevelop/blog/1505500)\n- [技术面试基础知识CyC2018](https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md)","source":"_posts/Thinking-in-java-基础之线程和并发.md","raw":"---\ntitle: Thinking in java 基础之线程和并发\ntags:\n  - Thread\n  - Concurrent\ncategories: java\ndescription: 'Thread Runnable线程并发基础,锁和资源以及生产者消费者'\ndate: 2016-08-09 16:23:38\n---\n\n\n## Java中的线程和并发\n\n#### 新线程\n\n进程：一次程序的完整运行。同一个时间段内，会有多进程抢占资源，但是在某一个时间点上，只有一个进程正在运行。\n  \n例如:我们可以一边开着浏览器一边上着QQ，但是在当时，(now),这个时间点上，运行的是某一个进程。\n  \n线程：比如说，我们在聊QQ的时候，又可以在QQ中查找用户，可以这么理解，线程就是一个进程中的若干个功能。多线程的资源是本进程中的资源，同样，线程也是要抢占自己的资源。\n\n那么，我们开发的java应用，main是属于一个进程，不过呢，java中可以给我们提供多线程，因此就引入了多线程编程。\n\n##### 线程的实现\n\n> 继承Thread类，实现Runnable接口，jdk1.5之后，实现Callable接口\n\n下面是一个实例:继承Thread类\n\n```\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tDemoThread myThread1=new DemoThread(\"线程1\");\n\t\tDemoThread myThread2=new DemoThread(\"线程2\");\n\t\tDemoThread myThread3=new DemoThread(\"线程3\");\n\t\tmyThread1.start();\n\t\tmyThread2.start();\n\t\tmyThread3.start();\n\t}\n\t\n}\n\nclass DemoThread extends Thread{\n\tprivate String name;\n\tpublic DemoThread(String name) {\n\t\tthis.name=name;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tSystem.out.println(this.name+\":\"+i);\n\t\t}\n\t}\n}\n```\n![结果](Thinking-in-java-基础之线程和并发/20160924.PNG)\n\n下面是一个实例:实现Runnable接口\n\n```\npublic class Demo {\n\tpublic static void main(String[] args) {\n\t\tThread myThread1=new Thread( new DemoRunnable(\" implements Runnable线程1\"));\n\t\tThread myThread2=new Thread( new DemoRunnable(\" implements Runnable线程2\"));\n\t\tThread myThread3=new Thread( new DemoRunnable(\" implements Runnable线程3\"));\n\t\tmyThread1.start();\n\t\tmyThread2.start();\n\t\tmyThread3.start();\n\t}\n\t\n}\nclass DemoRunnable implements Runnable{\n\tprivate String name;\n\tpublic DemoRunnable(String name) {\n\t\tthis.name=name;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tSystem.out.println(this.name+\":\"+i);\n\t\t}\n\t}\n}\n```\n![结果](Thinking-in-java-基础之线程和并发/201609241035.PNG)\n\n多线程的启动需要Thread.start()，而且一个新线程只能运行一次start();而不是run();当我们调用run的时候，实际上是对象的方法调用，而不是启动线程。因此启动线程唯一方法start();下面来看Thread中的start();\n\n```\n  /**\n     * Causes this thread to begin execution; the Java Virtual Machine\n     * calls the <code>run</code> method of this thread.\n     * <p>当这个方法被调用后，JVM会调用这个线程的run方法；\n     * The result is that two threads are running concurrently: the\n     * current thread (which returns from the call to the\n     * <code>start</code> method) and the other thread (which executes its\n     * <code>run</code> method).\n     * <p>结果是:两个线程都是正在运行状态，concurrently（同时，同时发生地）\n     * 调用start的这个线程和另一个运行run的线程\n     * It is never legal to start a thread more than once.\n     * In particular, a thread may not be restarted once it has completed\n     * execution.\n     *但是超过一次以上的调用、启动start是不合法的。\n     * @exception  IllegalThreadStateException  if the thread was already\n     *               started.如果线程正在运行，再次调用会抛出异常\n     *  //private ThreadGroup group;\n     *   //  private volatile int threadStatus = 0;\n     * @see        #run()\n     * @see        #stop()\n     */\n    public synchronized void start() {\n        /**\n         * This method is not invoked for the main method thread or \"system\"\n         * group threads created/set up by the VM. Any new functionality added\n         * to this method in the future may have to also be added to the VM.\n         *\n         * A zero status value corresponds to state \"NEW\".\n         */\n        if (threadStatus != 0)\n            throw new IllegalThreadStateException();\n\n        /* Notify the group that this thread is about to be started\n         * so that it can be added to the group's list of threads\n         * and the group's unstarted count can be decremented. */\n        group.add(this);//第一次调用的话把当前线程添加到ThreadGroup\n\n        boolean started = false;\n        try {\n            start0();\n            started = true;\n        } finally {\n            try {\n                if (!started) {\n                    group.threadStartFailed(this);\n                }\n            } catch (Throwable ignore) {\n                /* do nothing. If start0 threw a Throwable then\n                  it will be passed up the call stack */\n            }\n        }\n    }\n\n    private native void start0();//这里使用了一个JNI native方法。其中与操作系统有关系的方法调用，JVM已经实现好了，\n\n```\nJNI(Java Native Interface)新线程的资源需要通过native来进行抢占。同样这样会变得与操作系统有关了。\n\n优劣势：继承之后不能再继承其他类,推荐使用implements Runnable接口。\n\n```\npublic class Thread implements Runnable {\n    /* Make sure registerNatives is the first thing <clinit> does. */\n}\n```\n\n就算继承Thread在背后也是实现了Runnable。重写了run(),方法实际上也是重写了Runnable的run()方法，原因就在这里。\nThread只是和线程的启动销毁有关，和业务无关。因此Thread实际上像一个代理。\n\n#### 与线程有关的方法\n\n和方法密切相关的是线程的生命周期。把生命周期搞清楚后，这些主要的方法也就了解了。\n\n![生命周期](Thinking-in-java-基础之线程和并发/20150309140927553.jpg)\n\n首先new Thread(),新建一个线程,然后一个主要的方法start();这个时候的状态属于:我准备好了，等待运行，当时间片转到我的时候，我就执行就好了，至于另外几种状态的话，可以更具下面的方法的一个具体解释来理解一下。\n\nThread方法\n\n|方法名|作用|\n|:------|:------|\n|start();|将本线程变为可运行状态|\n|yield();|该方法与sleep()类似，只是不能由用户指定暂停多长时间，并且yield（）方法只能让同优先级的线程有执行的机会|\n|sleep(long 毫秒);|线程休眠，就是我现在累了，想休息一下,|\n|join();|等待所有线程运行结束|\n\nObject方法\n\n|方法名|作用|\n|:------|:------|\n|wait();|本线程等待，这里的等待是别人不叫，不会醒的等待。|\n|notifyAll();|叫醒所有线程线程|\n|notify();|叫醒某一个线程，不确定|\n\n#### 锁与共享资源\n\nimplements Runnable对于共享资源的作用\n\n```\npublic class Demo {\n\tpublic static void main(String[] args) {\n\tDemoRunnable demoRunnable=new DemoRunnable();//只有一个Runnable对象\n\tThread myThread1=new Thread(demoRunnable,\" implements Runnable线程1\");\n\tThread myThread2=new Thread(demoRunnable,\" implements Runnable线程2\");\n\tThread myThread3=new Thread(demoRunnable,\" implements Runnable线程3\");\n\t//下面的每一个线程都使用同一个demoRunnable实例对象，\n\t//那么对于demoRunnable内部的integer a就在每一个线程中都可以修改，访问\n\tmyThread1.start();\n\tmyThread2.start();\n\tmyThread3.start();\n\t}\n}\n\nclass DemoRunnable implements Runnable{\n\tpublic String name;\n\tpublic Integer a=0;\n\tpublic DemoRunnable(){\n\t\t\n\t}\n\tpublic DemoRunnable(String name) {\n\t\tthis.name=name;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\ttry {\n\t\t\t\t\tThread.sleep(10);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\" a:\"+(a++));\n\t\t}\n\t}\n}\n\n```\n\n![资源共享](Thinking-in-java-基础之线程和并发/201609241131.PNG)\n\n\n虽然在这里，可以实现资源的共享，但是呢，我们仔细看一下，就会发现，如果按照单线程的话，每一个数字应该只出现一次才对，而且最终a=3*100=300，但是我们在看一下并不是。\n首先0出现了2次，最后我们看一下结果，218，这是怎么回事？？？计算机坏了？一般情况下啊，千万不要怀疑计算机，前人如次多的尝试，都没问题，你出问题了？不可能，对吧？\n\n![资源共享](Thinking-in-java-基础之线程和并发/201609241132.PNG)\n\n其实在这里出现了一个问题，是丢失更新。\n\n因此，在实际运行过程中，我们会需要这样的一种情况，举例:银行转账：在转账的同时又在取款，如果这个钱只扣了一次,那我们岂不是赚大了，天天去取钱。\n这个时候就需要一个东西“锁”，保障在更新的时候别人不能更新我正在更新的数据，如果访问的话，就随便吧，无所谓，你看看，只要不动手就行。\n\n下面就来说说怎么来实现。来解决丢失更新呢？\n\n```\n\npublic class LockDemo {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Thread.currentThread().getPriority());\n\t\tLockDemoRunnable demoRunnable=new LockDemoRunnable();\n\t\tThread myThread1=new Thread(demoRunnable,\" implements Runnable线程1\");\n\t\tThread myThread2=new Thread(demoRunnable,\" implements Runnable线程2\");\n\t\tThread myThread3=new Thread(demoRunnable,\" implements Runnable线程3\");\n\t\tmyThread1.start();\n\t\tmyThread2.start();\n\t\tmyThread3.start();\n\t}\n}\nclass LockDemoRunnable implements Runnable{\n\tpublic String name;\n\tpublic Integer a=0;\n\tpublic LockDemoRunnable(){\n\t}\n\tpublic LockDemoRunnable(String name) {\n\t\tthis.name=name;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tsynchronized (a) {\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(10);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(Thread.currentThread().getName()+\" a:\"+(a++));\n\t\t\t}\n\t\t}\n\t}\n}\n```\n这段代码和上面的代码中间只相差了一个地方，在循环的地方添加了一个\tsynchronized (a) {}，这个的作用呢，很简单，在要执行里面的代码的时候首先看一下a的锁是否被放开了，如果放开了，就可以执行里面的代脉代码，如果没有，在这等着，等锁，当其他的线程（实际这里的表述应该是对象，因为程序的运行实际上是对象的调用）把这段代码执行完，或者抛出异常，反正就是执行点不在里面的时候，这是，在这等待的线程才能继续执行。\n\n这其实也是synchronized关键字语句块的作用。到这里后呢，我们就需要知道另一个问题了，我究竟应该锁定哪一个对象呢？是this，还是a，是代码块，还是方法？这就引入了下一个问题，粒度和锁级别。\n\n##### 锁级别 粒度\n\n \n> 同步加锁的是对象，而不是代码。\n\n这里推荐一篇文章[Java synchronized详解](http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html)\n\n特别是第三部分，把锁的粒度解释的非常清楚。\n\n##### 自旋锁\n\n说白了，就是，光看，不干活。网上的答案:\n\n```\npublic class SpinLock {\n    private AtomicReference<Thread> owner = new AtomicReference<>();\n\n    public void lock(){\n        Thread currentThread = Thread.currentThread();\n        //循环cas来判断锁是否被占用，第一个为期望值，如果为null说明锁未被占用，设置当前线程占用\n        while(owner.compareAndSet(null,currentThread)){\n            //这里一般会调用java.util.concurrent.locks.AbstractOwnableSynchronizer的setExclusiveOwnerThread(Thread t)方法来设置独占锁\n        }\n    }\n\n    public void unlock(){\n        Thread currentThread = Thread.currentThread();\n\n        owner.compareAndSet(currentThread,null);\n    }\n}\n```\n这里是使用`import java.util.concurrent.atomic.AtomicReference;`来实现的。\n\n##### 死锁\n\n死锁一般不会出现，但是如果出现的话，大都是业务问题，而不是代码问题。举例：\n\n两个线程A、B  两个资源obj1、obj2\n\nA拥有obj1，但是需要obj2，才能成功运行\n\nB拥有obj2，但是需要obj1，才能成功运行\n\n这时，A不想放弃obj1，B不想放弃obj2，两个线程又都想运行，这是就会出现死锁，\n\n死锁代码的例子:\n\n```\npublic class DeadLock {\n    public static void main(String[] args){\n    \tRunnable runnable1=new testDeadLock(true);\n    \tRunnable runnable2=new testDeadLock(false);\n    \tThread thread1=new Thread(runnable1);\n    \tThread thread2=new Thread(runnable2);\n    \tthread1.start();\n    \tthread2.start();\n    }\n}\n\nclass testDeadLock implements Runnable{\n\t\n\tpublic  boolean flag;\n\tstatic Object o1=new Object();\n\tstatic Object o2=new Object();\n\tpublic testDeadLock(boolean flag) {\n\t\tthis.flag=flag;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"=====================:\"+flag);\n\t\tif(flag){\n\t\t\tsynchronized (o1) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tsynchronized (o2) {\n\t\t\t\t\tSystem.out.println(\"00000000000000\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tif(!flag){\n\t\t\tsynchronized (o2) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tsynchronized (o1) {\n\t\t\t\t\tSystem.out.println(\"11111111111111\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}\n\n```\n这个应该都可以看得出来结果，只输出\n```\n\"====================：false\"\n\"=====================：true\"\n```\n而00000000000000和1111111111111111都不会输出。\n\n#### 生产者消费者模型\n\n> 重要\n\n下面只进行代码分析\n\n\n生产者（蒸馒头的厨师）:\n\n```\nclass Producer extends Thread{\n\tSyncStack syncStack=null;\n\tpublic Producer(SyncStack syncStack) {\n\t\tthis.syncStack=syncStack;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tMantou mantou=new Mantou(i);\n\t\t\tSystem.out.println(this.currentThread().getName()+\" Producer mantou:\"+mantou);\n\t\t\tsyncStack.push(mantou);\n//\t\t\tThread.sleep((int));\n\t\t}\n\t}\n}\n```\n\n消费者（吃馒头的工人）：\n\n```\nclass Consumer extends Thread{\n\tSyncStack syncStack =null;\n\tpublic Consumer(SyncStack syncStack) {\n\t\tthis.syncStack=syncStack;\n\t}\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i < 20; i++) {\n\t\tMantou mantou=\tsyncStack.pop();\n\t\t\tSystem.out.println(Thread.currentThread().getName()+\" Consumer mantou:\"+mantou);\n\t\t}\n\t}\n}\n\n```\n\nmain：\n\n```\npublic class ProducerConsumer {\n    public static void main(String[] args){\n    \tSyncStack syncStack=new SyncStack();//只有一个筐，生产者在这个筐里面工作，实际上是模拟共用资源\n    \tfor (int i = 0; i < 3; i++) {\n    \t\tProducer producer=new Producer(syncStack);\n    \t\tThread producerthread=new Thread(producer);\n    \t\tproducerthread.setName(\"Producer:\"+i);\n    \t\tproducerthread.start();\n\t\t}\n    \tfor (int i = 0; i < 3; i++) {\n    \t\tConsumer consumer=new Consumer(syncStack);\n        \tThread consumerthread=new Thread(consumer);\n        \tconsumerthread.setName(\"Consumer:\"+i);\n        \tconsumerthread.start();\n\t\t}\n    \t\n    }\n}\n```\n馒头：\n```\nclass Mantou{\n\tint id;\n\tpublic Mantou(int id) {\n\t\tthis.id=id;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"id:\"+id;\n\t}\n}\n```\n筐或者是篮子（盛馒头用的）:\n```\nclass SyncStack{\n\tint index=0;\n\tMantou[] arr=new Mantou[6];\n\t//生产者往arr中添加馒头\n\tpublic synchronized void push(Mantou mt) {\n\t\twhile(index==arr.length) {//当index==6的时候，说明arr已经满了，这是生产者应该等待，因此如果下一个还是生产者的话一直等待，然后这里就是一个wait();\n\t\t\ttry {\n\t\t\t\tthis.wait();//等待，一直等，等下去，直到有人叫我。\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tthis.notifyAll();//唤醒所有线程\n\t\tarr[index]=mt;\n\t\tindex++;\n\t}\n\t//消费者在arr中拿馒头吃\n\tpublic synchronized Mantou pop() {\n\t\twhile (index==0) {\n\t\t\ttry {\n\t\t\t\tthis.wait();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tthis.notifyAll();//唤醒所又，如果我现在拿出来一个后\n\t\tindex--;\n\t\treturn arr[index];\n\t}\n}\n\n```\n\n#### 状态\n\n#### 信号量\n\n 上面的一个例子中，notifyAll(),是叫醒所有线程，这时候如果，有一个空位，我就叫醒一个线程，还有空位，我就再叫醒一个线程，这里的有多少个线程正在睡觉，就是信号量的概念。这里就不再演示了。\n\n\n\n参考文献\n\n- [Java线程多线程编程【尚学堂科技马士兵Java基础教程】](http://www.56.com/u74/v_MTA4MTI4MTI3.html) \n- [Java synchronized详解](http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html) \n- [java synchronized详解](http://www.cnblogs.com/GnagWang/archive/2011/02/27/1966606.html)\n- [Java 8 并发教程：同步和锁](https://segmentfault.com/a/1190000006049612)\n- [Java 多线程 并发编程](http://blog.csdn.net/escaflone/article/details/10418651)\n- [JDK并发四篇文章](https://my.oschina.net/liughDevelop/blog/1505500)\n- [技术面试基础知识CyC2018](https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md)","slug":"Thinking-in-java-基础之线程和并发","published":1,"updated":"2018-06-11T09:53:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7be009nugv59wafm1rn","content":"<h2 id=\"Java中的线程和并发\"><a href=\"#Java中的线程和并发\" class=\"headerlink\" title=\"Java中的线程和并发\"></a>Java中的线程和并发</h2><h4 id=\"新线程\"><a href=\"#新线程\" class=\"headerlink\" title=\"新线程\"></a>新线程</h4><p>进程：一次程序的完整运行。同一个时间段内，会有多进程抢占资源，但是在某一个时间点上，只有一个进程正在运行。</p>\n<p>例如:我们可以一边开着浏览器一边上着QQ，但是在当时，(now),这个时间点上，运行的是某一个进程。</p>\n<p>线程：比如说，我们在聊QQ的时候，又可以在QQ中查找用户，可以这么理解，线程就是一个进程中的若干个功能。多线程的资源是本进程中的资源，同样，线程也是要抢占自己的资源。</p>\n<p>那么，我们开发的java应用，main是属于一个进程，不过呢，java中可以给我们提供多线程，因此就引入了多线程编程。</p>\n<h5 id=\"线程的实现\"><a href=\"#线程的实现\" class=\"headerlink\" title=\"线程的实现\"></a>线程的实现</h5><blockquote>\n<p>继承Thread类，实现Runnable接口，jdk1.5之后，实现Callable接口</p>\n</blockquote>\n<p>下面是一个实例:继承Thread类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tDemoThread myThread1=new DemoThread(&quot;线程1&quot;);</span><br><span class=\"line\">\t\tDemoThread myThread2=new DemoThread(&quot;线程2&quot;);</span><br><span class=\"line\">\t\tDemoThread myThread3=new DemoThread(&quot;线程3&quot;);</span><br><span class=\"line\">\t\tmyThread1.start();</span><br><span class=\"line\">\t\tmyThread2.start();</span><br><span class=\"line\">\t\tmyThread3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class DemoThread extends Thread&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic DemoThread(String name) &#123;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(this.name+&quot;:&quot;+i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//20160924.PNG\" alt=\"结果\"></p>\n<p>下面是一个实例:实现Runnable接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tThread myThread1=new Thread( new DemoRunnable(&quot; implements Runnable线程1&quot;));</span><br><span class=\"line\">\t\tThread myThread2=new Thread( new DemoRunnable(&quot; implements Runnable线程2&quot;));</span><br><span class=\"line\">\t\tThread myThread3=new Thread( new DemoRunnable(&quot; implements Runnable线程3&quot;));</span><br><span class=\"line\">\t\tmyThread1.start();</span><br><span class=\"line\">\t\tmyThread2.start();</span><br><span class=\"line\">\t\tmyThread3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class DemoRunnable implements Runnable&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic DemoRunnable(String name) &#123;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(this.name+&quot;:&quot;+i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609241035.PNG\" alt=\"结果\"></p>\n<p>多线程的启动需要Thread.start()，而且一个新线程只能运行一次start();而不是run();当我们调用run的时候，实际上是对象的方法调用，而不是启动线程。因此启动线程唯一方法start();下面来看Thread中的start();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * Causes this thread to begin execution; the Java Virtual Machine</span><br><span class=\"line\">   * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span><br><span class=\"line\">   * &lt;p&gt;当这个方法被调用后，JVM会调用这个线程的run方法；</span><br><span class=\"line\">   * The result is that two threads are running concurrently: the</span><br><span class=\"line\">   * current thread (which returns from the call to the</span><br><span class=\"line\">   * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span><br><span class=\"line\">   * &lt;code&gt;run&lt;/code&gt; method).</span><br><span class=\"line\">   * &lt;p&gt;结果是:两个线程都是正在运行状态，concurrently（同时，同时发生地）</span><br><span class=\"line\">   * 调用start的这个线程和另一个运行run的线程</span><br><span class=\"line\">   * It is never legal to start a thread more than once.</span><br><span class=\"line\">   * In particular, a thread may not be restarted once it has completed</span><br><span class=\"line\">   * execution.</span><br><span class=\"line\">   *但是超过一次以上的调用、启动start是不合法的。</span><br><span class=\"line\">   * @exception  IllegalThreadStateException  if the thread was already</span><br><span class=\"line\">   *               started.如果线程正在运行，再次调用会抛出异常</span><br><span class=\"line\">   *  //private ThreadGroup group;</span><br><span class=\"line\">   *   //  private volatile int threadStatus = 0;</span><br><span class=\"line\">   * @see        #run()</span><br><span class=\"line\">   * @see        #stop()</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public synchronized void start() &#123;</span><br><span class=\"line\">      /**</span><br><span class=\"line\">       * This method is not invoked for the main method thread or &quot;system&quot;</span><br><span class=\"line\">       * group threads created/set up by the VM. Any new functionality added</span><br><span class=\"line\">       * to this method in the future may have to also be added to the VM.</span><br><span class=\"line\">       *</span><br><span class=\"line\">       * A zero status value corresponds to state &quot;NEW&quot;.</span><br><span class=\"line\">       */</span><br><span class=\"line\">      if (threadStatus != 0)</span><br><span class=\"line\">          throw new IllegalThreadStateException();</span><br><span class=\"line\"></span><br><span class=\"line\">      /* Notify the group that this thread is about to be started</span><br><span class=\"line\">       * so that it can be added to the group&apos;s list of threads</span><br><span class=\"line\">       * and the group&apos;s unstarted count can be decremented. */</span><br><span class=\"line\">      group.add(this);//第一次调用的话把当前线程添加到ThreadGroup</span><br><span class=\"line\"></span><br><span class=\"line\">      boolean started = false;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">          start0();</span><br><span class=\"line\">          started = true;</span><br><span class=\"line\">      &#125; finally &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">              if (!started) &#123;</span><br><span class=\"line\">                  group.threadStartFailed(this);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125; catch (Throwable ignore) &#123;</span><br><span class=\"line\">              /* do nothing. If start0 threw a Throwable then</span><br><span class=\"line\">                it will be passed up the call stack */</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private native void start0();//这里使用了一个JNI native方法。其中与操作系统有关系的方法调用，JVM已经实现好了，</span><br></pre></td></tr></table></figure>\n<p>JNI(Java Native Interface)新线程的资源需要通过native来进行抢占。同样这样会变得与操作系统有关了。</p>\n<p>优劣势：继承之后不能再继承其他类,推荐使用implements Runnable接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Thread implements Runnable &#123;</span><br><span class=\"line\">    /* Make sure registerNatives is the first thing &lt;clinit&gt; does. */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就算继承Thread在背后也是实现了Runnable。重写了run(),方法实际上也是重写了Runnable的run()方法，原因就在这里。<br>Thread只是和线程的启动销毁有关，和业务无关。因此Thread实际上像一个代理。</p>\n<h4 id=\"与线程有关的方法\"><a href=\"#与线程有关的方法\" class=\"headerlink\" title=\"与线程有关的方法\"></a>与线程有关的方法</h4><p>和方法密切相关的是线程的生命周期。把生命周期搞清楚后，这些主要的方法也就了解了。</p>\n<p><img src=\"/.io//20150309140927553.jpg\" alt=\"生命周期\"></p>\n<p>首先new Thread(),新建一个线程,然后一个主要的方法start();这个时候的状态属于:我准备好了，等待运行，当时间片转到我的时候，我就执行就好了，至于另外几种状态的话，可以更具下面的方法的一个具体解释来理解一下。</p>\n<p>Thread方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">start();</td>\n<td style=\"text-align:left\">将本线程变为可运行状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">yield();</td>\n<td style=\"text-align:left\">该方法与sleep()类似，只是不能由用户指定暂停多长时间，并且yield（）方法只能让同优先级的线程有执行的机会</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sleep(long 毫秒);</td>\n<td style=\"text-align:left\">线程休眠，就是我现在累了，想休息一下,</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">join();</td>\n<td style=\"text-align:left\">等待所有线程运行结束</td>\n</tr>\n</tbody>\n</table>\n<p>Object方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">wait();</td>\n<td style=\"text-align:left\">本线程等待，这里的等待是别人不叫，不会醒的等待。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">notifyAll();</td>\n<td style=\"text-align:left\">叫醒所有线程线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">notify();</td>\n<td style=\"text-align:left\">叫醒某一个线程，不确定</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"锁与共享资源\"><a href=\"#锁与共享资源\" class=\"headerlink\" title=\"锁与共享资源\"></a>锁与共享资源</h4><p>implements Runnable对于共享资源的作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\tDemoRunnable demoRunnable=new DemoRunnable();//只有一个Runnable对象</span><br><span class=\"line\">\tThread myThread1=new Thread(demoRunnable,&quot; implements Runnable线程1&quot;);</span><br><span class=\"line\">\tThread myThread2=new Thread(demoRunnable,&quot; implements Runnable线程2&quot;);</span><br><span class=\"line\">\tThread myThread3=new Thread(demoRunnable,&quot; implements Runnable线程3&quot;);</span><br><span class=\"line\">\t//下面的每一个线程都使用同一个demoRunnable实例对象，</span><br><span class=\"line\">\t//那么对于demoRunnable内部的integer a就在每一个线程中都可以修改，访问</span><br><span class=\"line\">\tmyThread1.start();</span><br><span class=\"line\">\tmyThread2.start();</span><br><span class=\"line\">\tmyThread3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class DemoRunnable implements Runnable&#123;</span><br><span class=\"line\">\tpublic String name;</span><br><span class=\"line\">\tpublic Integer a=0;</span><br><span class=\"line\">\tpublic DemoRunnable()&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic DemoRunnable(String name) &#123;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(10);</span><br><span class=\"line\">\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+&quot; a:&quot;+(a++));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609241131.PNG\" alt=\"资源共享\"></p>\n<p>虽然在这里，可以实现资源的共享，但是呢，我们仔细看一下，就会发现，如果按照单线程的话，每一个数字应该只出现一次才对，而且最终a=3*100=300，但是我们在看一下并不是。<br>首先0出现了2次，最后我们看一下结果，218，这是怎么回事？？？计算机坏了？一般情况下啊，千万不要怀疑计算机，前人如次多的尝试，都没问题，你出问题了？不可能，对吧？</p>\n<p><img src=\"/.io//201609241132.PNG\" alt=\"资源共享\"></p>\n<p>其实在这里出现了一个问题，是丢失更新。</p>\n<p>因此，在实际运行过程中，我们会需要这样的一种情况，举例:银行转账：在转账的同时又在取款，如果这个钱只扣了一次,那我们岂不是赚大了，天天去取钱。<br>这个时候就需要一个东西“锁”，保障在更新的时候别人不能更新我正在更新的数据，如果访问的话，就随便吧，无所谓，你看看，只要不动手就行。</p>\n<p>下面就来说说怎么来实现。来解决丢失更新呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class LockDemo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getPriority());</span><br><span class=\"line\">\t\tLockDemoRunnable demoRunnable=new LockDemoRunnable();</span><br><span class=\"line\">\t\tThread myThread1=new Thread(demoRunnable,&quot; implements Runnable线程1&quot;);</span><br><span class=\"line\">\t\tThread myThread2=new Thread(demoRunnable,&quot; implements Runnable线程2&quot;);</span><br><span class=\"line\">\t\tThread myThread3=new Thread(demoRunnable,&quot; implements Runnable线程3&quot;);</span><br><span class=\"line\">\t\tmyThread1.start();</span><br><span class=\"line\">\t\tmyThread2.start();</span><br><span class=\"line\">\t\tmyThread3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class LockDemoRunnable implements Runnable&#123;</span><br><span class=\"line\">\tpublic String name;</span><br><span class=\"line\">\tpublic Integer a=0;</span><br><span class=\"line\">\tpublic LockDemoRunnable()&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic LockDemoRunnable(String name) &#123;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tsynchronized (a) &#123;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(10);</span><br><span class=\"line\">\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName()+&quot; a:&quot;+(a++));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码和上面的代码中间只相差了一个地方，在循环的地方添加了一个    synchronized (a) {}，这个的作用呢，很简单，在要执行里面的代码的时候首先看一下a的锁是否被放开了，如果放开了，就可以执行里面的代脉代码，如果没有，在这等着，等锁，当其他的线程（实际这里的表述应该是对象，因为程序的运行实际上是对象的调用）把这段代码执行完，或者抛出异常，反正就是执行点不在里面的时候，这是，在这等待的线程才能继续执行。</p>\n<p>这其实也是synchronized关键字语句块的作用。到这里后呢，我们就需要知道另一个问题了，我究竟应该锁定哪一个对象呢？是this，还是a，是代码块，还是方法？这就引入了下一个问题，粒度和锁级别。</p>\n<h5 id=\"锁级别-粒度\"><a href=\"#锁级别-粒度\" class=\"headerlink\" title=\"锁级别 粒度\"></a>锁级别 粒度</h5><blockquote>\n<p>同步加锁的是对象，而不是代码。</p>\n</blockquote>\n<p>这里推荐一篇文章<a href=\"http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html\" target=\"_blank\" rel=\"noopener\">Java synchronized详解</a></p>\n<p>特别是第三部分，把锁的粒度解释的非常清楚。</p>\n<h5 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h5><p>说白了，就是，光看，不干活。网上的答案:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SpinLock &#123;</span><br><span class=\"line\">    private AtomicReference&lt;Thread&gt; owner = new AtomicReference&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void lock()&#123;</span><br><span class=\"line\">        Thread currentThread = Thread.currentThread();</span><br><span class=\"line\">        //循环cas来判断锁是否被占用，第一个为期望值，如果为null说明锁未被占用，设置当前线程占用</span><br><span class=\"line\">        while(owner.compareAndSet(null,currentThread))&#123;</span><br><span class=\"line\">            //这里一般会调用java.util.concurrent.locks.AbstractOwnableSynchronizer的setExclusiveOwnerThread(Thread t)方法来设置独占锁</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void unlock()&#123;</span><br><span class=\"line\">        Thread currentThread = Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">        owner.compareAndSet(currentThread,null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是使用<code>import java.util.concurrent.atomic.AtomicReference;</code>来实现的。</p>\n<h5 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h5><p>死锁一般不会出现，但是如果出现的话，大都是业务问题，而不是代码问题。举例：</p>\n<p>两个线程A、B  两个资源obj1、obj2</p>\n<p>A拥有obj1，但是需要obj2，才能成功运行</p>\n<p>B拥有obj2，但是需要obj1，才能成功运行</p>\n<p>这时，A不想放弃obj1，B不想放弃obj2，两个线程又都想运行，这是就会出现死锁，</p>\n<p>死锁代码的例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DeadLock &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">    \tRunnable runnable1=new testDeadLock(true);</span><br><span class=\"line\">    \tRunnable runnable2=new testDeadLock(false);</span><br><span class=\"line\">    \tThread thread1=new Thread(runnable1);</span><br><span class=\"line\">    \tThread thread2=new Thread(runnable2);</span><br><span class=\"line\">    \tthread1.start();</span><br><span class=\"line\">    \tthread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class testDeadLock implements Runnable&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic  boolean flag;</span><br><span class=\"line\">\tstatic Object o1=new Object();</span><br><span class=\"line\">\tstatic Object o2=new Object();</span><br><span class=\"line\">\tpublic testDeadLock(boolean flag) &#123;</span><br><span class=\"line\">\t\tthis.flag=flag;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====================:&quot;+flag);</span><br><span class=\"line\">\t\tif(flag)&#123;</span><br><span class=\"line\">\t\t\tsynchronized (o1) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(1000);</span><br><span class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tsynchronized (o2) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;00000000000000&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(!flag)&#123;</span><br><span class=\"line\">\t\t\tsynchronized (o2) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(1000);</span><br><span class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tsynchronized (o1) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;11111111111111&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个应该都可以看得出来结果，只输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;====================：false&quot;</span><br><span class=\"line\">&quot;=====================：true&quot;</span><br></pre></td></tr></table></figure></p>\n<p>而00000000000000和1111111111111111都不会输出。</p>\n<h4 id=\"生产者消费者模型\"><a href=\"#生产者消费者模型\" class=\"headerlink\" title=\"生产者消费者模型\"></a>生产者消费者模型</h4><blockquote>\n<p>重要</p>\n</blockquote>\n<p>下面只进行代码分析</p>\n<p>生产者（蒸馒头的厨师）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Producer extends Thread&#123;</span><br><span class=\"line\">\tSyncStack syncStack=null;</span><br><span class=\"line\">\tpublic Producer(SyncStack syncStack) &#123;</span><br><span class=\"line\">\t\tthis.syncStack=syncStack;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 20; i++) &#123;</span><br><span class=\"line\">\t\t\tMantou mantou=new Mantou(i);</span><br><span class=\"line\">\t\t\tSystem.out.println(this.currentThread().getName()+&quot; Producer mantou:&quot;+mantou);</span><br><span class=\"line\">\t\t\tsyncStack.push(mantou);</span><br><span class=\"line\">//\t\t\tThread.sleep((int));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>消费者（吃馒头的工人）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Consumer extends Thread&#123;</span><br><span class=\"line\">\tSyncStack syncStack =null;</span><br><span class=\"line\">\tpublic Consumer(SyncStack syncStack) &#123;</span><br><span class=\"line\">\t\tthis.syncStack=syncStack;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 20; i++) &#123;</span><br><span class=\"line\">\t\tMantou mantou=\tsyncStack.pop();</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+&quot; Consumer mantou:&quot;+mantou);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ProducerConsumer &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">    \tSyncStack syncStack=new SyncStack();//只有一个筐，生产者在这个筐里面工作，实际上是模拟共用资源</span><br><span class=\"line\">    \tfor (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">    \t\tProducer producer=new Producer(syncStack);</span><br><span class=\"line\">    \t\tThread producerthread=new Thread(producer);</span><br><span class=\"line\">    \t\tproducerthread.setName(&quot;Producer:&quot;+i);</span><br><span class=\"line\">    \t\tproducerthread.start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    \tfor (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">    \t\tConsumer consumer=new Consumer(syncStack);</span><br><span class=\"line\">        \tThread consumerthread=new Thread(consumer);</span><br><span class=\"line\">        \tconsumerthread.setName(&quot;Consumer:&quot;+i);</span><br><span class=\"line\">        \tconsumerthread.start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>馒头：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Mantou&#123;</span><br><span class=\"line\">\tint id;</span><br><span class=\"line\">\tpublic Mantou(int id) &#123;</span><br><span class=\"line\">\t\tthis.id=id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;id:&quot;+id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>筐或者是篮子（盛馒头用的）:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncStack&#123;</span><br><span class=\"line\">\tint index=0;</span><br><span class=\"line\">\tMantou[] arr=new Mantou[6];</span><br><span class=\"line\">\t//生产者往arr中添加馒头</span><br><span class=\"line\">\tpublic synchronized void push(Mantou mt) &#123;</span><br><span class=\"line\">\t\twhile(index==arr.length) &#123;//当index==6的时候，说明arr已经满了，这是生产者应该等待，因此如果下一个还是生产者的话一直等待，然后这里就是一个wait();</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tthis.wait();//等待，一直等，等下去，直到有人叫我。</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tthis.notifyAll();//唤醒所有线程</span><br><span class=\"line\">\t\tarr[index]=mt;</span><br><span class=\"line\">\t\tindex++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//消费者在arr中拿馒头吃</span><br><span class=\"line\">\tpublic synchronized Mantou pop() &#123;</span><br><span class=\"line\">\t\twhile (index==0) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tthis.wait();</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tthis.notifyAll();//唤醒所又，如果我现在拿出来一个后</span><br><span class=\"line\">\t\tindex--;</span><br><span class=\"line\">\t\treturn arr[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><p> 上面的一个例子中，notifyAll(),是叫醒所有线程，这时候如果，有一个空位，我就叫醒一个线程，还有空位，我就再叫醒一个线程，这里的有多少个线程正在睡觉，就是信号量的概念。这里就不再演示了。</p>\n<p>参考文献</p>\n<ul>\n<li><a href=\"http://www.56.com/u74/v_MTA4MTI4MTI3.html\" target=\"_blank\" rel=\"noopener\">Java线程多线程编程【尚学堂科技马士兵Java基础教程】</a> </li>\n<li><a href=\"http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html\" target=\"_blank\" rel=\"noopener\">Java synchronized详解</a> </li>\n<li><a href=\"http://www.cnblogs.com/GnagWang/archive/2011/02/27/1966606.html\" target=\"_blank\" rel=\"noopener\">java synchronized详解</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006049612\" target=\"_blank\" rel=\"noopener\">Java 8 并发教程：同步和锁</a></li>\n<li><a href=\"http://blog.csdn.net/escaflone/article/details/10418651\" target=\"_blank\" rel=\"noopener\">Java 多线程 并发编程</a></li>\n<li><a href=\"https://my.oschina.net/liughDevelop/blog/1505500\" target=\"_blank\" rel=\"noopener\">JDK并发四篇文章</a></li>\n<li><a href=\"https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md\" target=\"_blank\" rel=\"noopener\">技术面试基础知识CyC2018</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java中的线程和并发\"><a href=\"#Java中的线程和并发\" class=\"headerlink\" title=\"Java中的线程和并发\"></a>Java中的线程和并发</h2><h4 id=\"新线程\"><a href=\"#新线程\" class=\"headerlink\" title=\"新线程\"></a>新线程</h4><p>进程：一次程序的完整运行。同一个时间段内，会有多进程抢占资源，但是在某一个时间点上，只有一个进程正在运行。</p>\n<p>例如:我们可以一边开着浏览器一边上着QQ，但是在当时，(now),这个时间点上，运行的是某一个进程。</p>\n<p>线程：比如说，我们在聊QQ的时候，又可以在QQ中查找用户，可以这么理解，线程就是一个进程中的若干个功能。多线程的资源是本进程中的资源，同样，线程也是要抢占自己的资源。</p>\n<p>那么，我们开发的java应用，main是属于一个进程，不过呢，java中可以给我们提供多线程，因此就引入了多线程编程。</p>\n<h5 id=\"线程的实现\"><a href=\"#线程的实现\" class=\"headerlink\" title=\"线程的实现\"></a>线程的实现</h5><blockquote>\n<p>继承Thread类，实现Runnable接口，jdk1.5之后，实现Callable接口</p>\n</blockquote>\n<p>下面是一个实例:继承Thread类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tDemoThread myThread1=new DemoThread(&quot;线程1&quot;);</span><br><span class=\"line\">\t\tDemoThread myThread2=new DemoThread(&quot;线程2&quot;);</span><br><span class=\"line\">\t\tDemoThread myThread3=new DemoThread(&quot;线程3&quot;);</span><br><span class=\"line\">\t\tmyThread1.start();</span><br><span class=\"line\">\t\tmyThread2.start();</span><br><span class=\"line\">\t\tmyThread3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class DemoThread extends Thread&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic DemoThread(String name) &#123;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(this.name+&quot;:&quot;+i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//20160924.PNG\" alt=\"结果\"></p>\n<p>下面是一个实例:实现Runnable接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tThread myThread1=new Thread( new DemoRunnable(&quot; implements Runnable线程1&quot;));</span><br><span class=\"line\">\t\tThread myThread2=new Thread( new DemoRunnable(&quot; implements Runnable线程2&quot;));</span><br><span class=\"line\">\t\tThread myThread3=new Thread( new DemoRunnable(&quot; implements Runnable线程3&quot;));</span><br><span class=\"line\">\t\tmyThread1.start();</span><br><span class=\"line\">\t\tmyThread2.start();</span><br><span class=\"line\">\t\tmyThread3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class DemoRunnable implements Runnable&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic DemoRunnable(String name) &#123;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(this.name+&quot;:&quot;+i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609241035.PNG\" alt=\"结果\"></p>\n<p>多线程的启动需要Thread.start()，而且一个新线程只能运行一次start();而不是run();当我们调用run的时候，实际上是对象的方法调用，而不是启动线程。因此启动线程唯一方法start();下面来看Thread中的start();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * Causes this thread to begin execution; the Java Virtual Machine</span><br><span class=\"line\">   * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span><br><span class=\"line\">   * &lt;p&gt;当这个方法被调用后，JVM会调用这个线程的run方法；</span><br><span class=\"line\">   * The result is that two threads are running concurrently: the</span><br><span class=\"line\">   * current thread (which returns from the call to the</span><br><span class=\"line\">   * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span><br><span class=\"line\">   * &lt;code&gt;run&lt;/code&gt; method).</span><br><span class=\"line\">   * &lt;p&gt;结果是:两个线程都是正在运行状态，concurrently（同时，同时发生地）</span><br><span class=\"line\">   * 调用start的这个线程和另一个运行run的线程</span><br><span class=\"line\">   * It is never legal to start a thread more than once.</span><br><span class=\"line\">   * In particular, a thread may not be restarted once it has completed</span><br><span class=\"line\">   * execution.</span><br><span class=\"line\">   *但是超过一次以上的调用、启动start是不合法的。</span><br><span class=\"line\">   * @exception  IllegalThreadStateException  if the thread was already</span><br><span class=\"line\">   *               started.如果线程正在运行，再次调用会抛出异常</span><br><span class=\"line\">   *  //private ThreadGroup group;</span><br><span class=\"line\">   *   //  private volatile int threadStatus = 0;</span><br><span class=\"line\">   * @see        #run()</span><br><span class=\"line\">   * @see        #stop()</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public synchronized void start() &#123;</span><br><span class=\"line\">      /**</span><br><span class=\"line\">       * This method is not invoked for the main method thread or &quot;system&quot;</span><br><span class=\"line\">       * group threads created/set up by the VM. Any new functionality added</span><br><span class=\"line\">       * to this method in the future may have to also be added to the VM.</span><br><span class=\"line\">       *</span><br><span class=\"line\">       * A zero status value corresponds to state &quot;NEW&quot;.</span><br><span class=\"line\">       */</span><br><span class=\"line\">      if (threadStatus != 0)</span><br><span class=\"line\">          throw new IllegalThreadStateException();</span><br><span class=\"line\"></span><br><span class=\"line\">      /* Notify the group that this thread is about to be started</span><br><span class=\"line\">       * so that it can be added to the group&apos;s list of threads</span><br><span class=\"line\">       * and the group&apos;s unstarted count can be decremented. */</span><br><span class=\"line\">      group.add(this);//第一次调用的话把当前线程添加到ThreadGroup</span><br><span class=\"line\"></span><br><span class=\"line\">      boolean started = false;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">          start0();</span><br><span class=\"line\">          started = true;</span><br><span class=\"line\">      &#125; finally &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">              if (!started) &#123;</span><br><span class=\"line\">                  group.threadStartFailed(this);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125; catch (Throwable ignore) &#123;</span><br><span class=\"line\">              /* do nothing. If start0 threw a Throwable then</span><br><span class=\"line\">                it will be passed up the call stack */</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private native void start0();//这里使用了一个JNI native方法。其中与操作系统有关系的方法调用，JVM已经实现好了，</span><br></pre></td></tr></table></figure>\n<p>JNI(Java Native Interface)新线程的资源需要通过native来进行抢占。同样这样会变得与操作系统有关了。</p>\n<p>优劣势：继承之后不能再继承其他类,推荐使用implements Runnable接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Thread implements Runnable &#123;</span><br><span class=\"line\">    /* Make sure registerNatives is the first thing &lt;clinit&gt; does. */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就算继承Thread在背后也是实现了Runnable。重写了run(),方法实际上也是重写了Runnable的run()方法，原因就在这里。<br>Thread只是和线程的启动销毁有关，和业务无关。因此Thread实际上像一个代理。</p>\n<h4 id=\"与线程有关的方法\"><a href=\"#与线程有关的方法\" class=\"headerlink\" title=\"与线程有关的方法\"></a>与线程有关的方法</h4><p>和方法密切相关的是线程的生命周期。把生命周期搞清楚后，这些主要的方法也就了解了。</p>\n<p><img src=\"/.io//20150309140927553.jpg\" alt=\"生命周期\"></p>\n<p>首先new Thread(),新建一个线程,然后一个主要的方法start();这个时候的状态属于:我准备好了，等待运行，当时间片转到我的时候，我就执行就好了，至于另外几种状态的话，可以更具下面的方法的一个具体解释来理解一下。</p>\n<p>Thread方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">start();</td>\n<td style=\"text-align:left\">将本线程变为可运行状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">yield();</td>\n<td style=\"text-align:left\">该方法与sleep()类似，只是不能由用户指定暂停多长时间，并且yield（）方法只能让同优先级的线程有执行的机会</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sleep(long 毫秒);</td>\n<td style=\"text-align:left\">线程休眠，就是我现在累了，想休息一下,</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">join();</td>\n<td style=\"text-align:left\">等待所有线程运行结束</td>\n</tr>\n</tbody>\n</table>\n<p>Object方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">wait();</td>\n<td style=\"text-align:left\">本线程等待，这里的等待是别人不叫，不会醒的等待。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">notifyAll();</td>\n<td style=\"text-align:left\">叫醒所有线程线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">notify();</td>\n<td style=\"text-align:left\">叫醒某一个线程，不确定</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"锁与共享资源\"><a href=\"#锁与共享资源\" class=\"headerlink\" title=\"锁与共享资源\"></a>锁与共享资源</h4><p>implements Runnable对于共享资源的作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\tDemoRunnable demoRunnable=new DemoRunnable();//只有一个Runnable对象</span><br><span class=\"line\">\tThread myThread1=new Thread(demoRunnable,&quot; implements Runnable线程1&quot;);</span><br><span class=\"line\">\tThread myThread2=new Thread(demoRunnable,&quot; implements Runnable线程2&quot;);</span><br><span class=\"line\">\tThread myThread3=new Thread(demoRunnable,&quot; implements Runnable线程3&quot;);</span><br><span class=\"line\">\t//下面的每一个线程都使用同一个demoRunnable实例对象，</span><br><span class=\"line\">\t//那么对于demoRunnable内部的integer a就在每一个线程中都可以修改，访问</span><br><span class=\"line\">\tmyThread1.start();</span><br><span class=\"line\">\tmyThread2.start();</span><br><span class=\"line\">\tmyThread3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class DemoRunnable implements Runnable&#123;</span><br><span class=\"line\">\tpublic String name;</span><br><span class=\"line\">\tpublic Integer a=0;</span><br><span class=\"line\">\tpublic DemoRunnable()&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic DemoRunnable(String name) &#123;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(10);</span><br><span class=\"line\">\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+&quot; a:&quot;+(a++));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//201609241131.PNG\" alt=\"资源共享\"></p>\n<p>虽然在这里，可以实现资源的共享，但是呢，我们仔细看一下，就会发现，如果按照单线程的话，每一个数字应该只出现一次才对，而且最终a=3*100=300，但是我们在看一下并不是。<br>首先0出现了2次，最后我们看一下结果，218，这是怎么回事？？？计算机坏了？一般情况下啊，千万不要怀疑计算机，前人如次多的尝试，都没问题，你出问题了？不可能，对吧？</p>\n<p><img src=\"/.io//201609241132.PNG\" alt=\"资源共享\"></p>\n<p>其实在这里出现了一个问题，是丢失更新。</p>\n<p>因此，在实际运行过程中，我们会需要这样的一种情况，举例:银行转账：在转账的同时又在取款，如果这个钱只扣了一次,那我们岂不是赚大了，天天去取钱。<br>这个时候就需要一个东西“锁”，保障在更新的时候别人不能更新我正在更新的数据，如果访问的话，就随便吧，无所谓，你看看，只要不动手就行。</p>\n<p>下面就来说说怎么来实现。来解决丢失更新呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class LockDemo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getPriority());</span><br><span class=\"line\">\t\tLockDemoRunnable demoRunnable=new LockDemoRunnable();</span><br><span class=\"line\">\t\tThread myThread1=new Thread(demoRunnable,&quot; implements Runnable线程1&quot;);</span><br><span class=\"line\">\t\tThread myThread2=new Thread(demoRunnable,&quot; implements Runnable线程2&quot;);</span><br><span class=\"line\">\t\tThread myThread3=new Thread(demoRunnable,&quot; implements Runnable线程3&quot;);</span><br><span class=\"line\">\t\tmyThread1.start();</span><br><span class=\"line\">\t\tmyThread2.start();</span><br><span class=\"line\">\t\tmyThread3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class LockDemoRunnable implements Runnable&#123;</span><br><span class=\"line\">\tpublic String name;</span><br><span class=\"line\">\tpublic Integer a=0;</span><br><span class=\"line\">\tpublic LockDemoRunnable()&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic LockDemoRunnable(String name) &#123;</span><br><span class=\"line\">\t\tthis.name=name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tsynchronized (a) &#123;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(10);</span><br><span class=\"line\">\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName()+&quot; a:&quot;+(a++));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码和上面的代码中间只相差了一个地方，在循环的地方添加了一个    synchronized (a) {}，这个的作用呢，很简单，在要执行里面的代码的时候首先看一下a的锁是否被放开了，如果放开了，就可以执行里面的代脉代码，如果没有，在这等着，等锁，当其他的线程（实际这里的表述应该是对象，因为程序的运行实际上是对象的调用）把这段代码执行完，或者抛出异常，反正就是执行点不在里面的时候，这是，在这等待的线程才能继续执行。</p>\n<p>这其实也是synchronized关键字语句块的作用。到这里后呢，我们就需要知道另一个问题了，我究竟应该锁定哪一个对象呢？是this，还是a，是代码块，还是方法？这就引入了下一个问题，粒度和锁级别。</p>\n<h5 id=\"锁级别-粒度\"><a href=\"#锁级别-粒度\" class=\"headerlink\" title=\"锁级别 粒度\"></a>锁级别 粒度</h5><blockquote>\n<p>同步加锁的是对象，而不是代码。</p>\n</blockquote>\n<p>这里推荐一篇文章<a href=\"http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html\" target=\"_blank\" rel=\"noopener\">Java synchronized详解</a></p>\n<p>特别是第三部分，把锁的粒度解释的非常清楚。</p>\n<h5 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h5><p>说白了，就是，光看，不干活。网上的答案:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SpinLock &#123;</span><br><span class=\"line\">    private AtomicReference&lt;Thread&gt; owner = new AtomicReference&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void lock()&#123;</span><br><span class=\"line\">        Thread currentThread = Thread.currentThread();</span><br><span class=\"line\">        //循环cas来判断锁是否被占用，第一个为期望值，如果为null说明锁未被占用，设置当前线程占用</span><br><span class=\"line\">        while(owner.compareAndSet(null,currentThread))&#123;</span><br><span class=\"line\">            //这里一般会调用java.util.concurrent.locks.AbstractOwnableSynchronizer的setExclusiveOwnerThread(Thread t)方法来设置独占锁</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void unlock()&#123;</span><br><span class=\"line\">        Thread currentThread = Thread.currentThread();</span><br><span class=\"line\"></span><br><span class=\"line\">        owner.compareAndSet(currentThread,null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是使用<code>import java.util.concurrent.atomic.AtomicReference;</code>来实现的。</p>\n<h5 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h5><p>死锁一般不会出现，但是如果出现的话，大都是业务问题，而不是代码问题。举例：</p>\n<p>两个线程A、B  两个资源obj1、obj2</p>\n<p>A拥有obj1，但是需要obj2，才能成功运行</p>\n<p>B拥有obj2，但是需要obj1，才能成功运行</p>\n<p>这时，A不想放弃obj1，B不想放弃obj2，两个线程又都想运行，这是就会出现死锁，</p>\n<p>死锁代码的例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DeadLock &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">    \tRunnable runnable1=new testDeadLock(true);</span><br><span class=\"line\">    \tRunnable runnable2=new testDeadLock(false);</span><br><span class=\"line\">    \tThread thread1=new Thread(runnable1);</span><br><span class=\"line\">    \tThread thread2=new Thread(runnable2);</span><br><span class=\"line\">    \tthread1.start();</span><br><span class=\"line\">    \tthread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class testDeadLock implements Runnable&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic  boolean flag;</span><br><span class=\"line\">\tstatic Object o1=new Object();</span><br><span class=\"line\">\tstatic Object o2=new Object();</span><br><span class=\"line\">\tpublic testDeadLock(boolean flag) &#123;</span><br><span class=\"line\">\t\tthis.flag=flag;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====================:&quot;+flag);</span><br><span class=\"line\">\t\tif(flag)&#123;</span><br><span class=\"line\">\t\t\tsynchronized (o1) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(1000);</span><br><span class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tsynchronized (o2) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;00000000000000&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(!flag)&#123;</span><br><span class=\"line\">\t\t\tsynchronized (o2) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(1000);</span><br><span class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tsynchronized (o1) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;11111111111111&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个应该都可以看得出来结果，只输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;====================：false&quot;</span><br><span class=\"line\">&quot;=====================：true&quot;</span><br></pre></td></tr></table></figure></p>\n<p>而00000000000000和1111111111111111都不会输出。</p>\n<h4 id=\"生产者消费者模型\"><a href=\"#生产者消费者模型\" class=\"headerlink\" title=\"生产者消费者模型\"></a>生产者消费者模型</h4><blockquote>\n<p>重要</p>\n</blockquote>\n<p>下面只进行代码分析</p>\n<p>生产者（蒸馒头的厨师）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Producer extends Thread&#123;</span><br><span class=\"line\">\tSyncStack syncStack=null;</span><br><span class=\"line\">\tpublic Producer(SyncStack syncStack) &#123;</span><br><span class=\"line\">\t\tthis.syncStack=syncStack;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 20; i++) &#123;</span><br><span class=\"line\">\t\t\tMantou mantou=new Mantou(i);</span><br><span class=\"line\">\t\t\tSystem.out.println(this.currentThread().getName()+&quot; Producer mantou:&quot;+mantou);</span><br><span class=\"line\">\t\t\tsyncStack.push(mantou);</span><br><span class=\"line\">//\t\t\tThread.sleep((int));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>消费者（吃馒头的工人）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Consumer extends Thread&#123;</span><br><span class=\"line\">\tSyncStack syncStack =null;</span><br><span class=\"line\">\tpublic Consumer(SyncStack syncStack) &#123;</span><br><span class=\"line\">\t\tthis.syncStack=syncStack;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 20; i++) &#123;</span><br><span class=\"line\">\t\tMantou mantou=\tsyncStack.pop();</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+&quot; Consumer mantou:&quot;+mantou);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ProducerConsumer &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">    \tSyncStack syncStack=new SyncStack();//只有一个筐，生产者在这个筐里面工作，实际上是模拟共用资源</span><br><span class=\"line\">    \tfor (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">    \t\tProducer producer=new Producer(syncStack);</span><br><span class=\"line\">    \t\tThread producerthread=new Thread(producer);</span><br><span class=\"line\">    \t\tproducerthread.setName(&quot;Producer:&quot;+i);</span><br><span class=\"line\">    \t\tproducerthread.start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    \tfor (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">    \t\tConsumer consumer=new Consumer(syncStack);</span><br><span class=\"line\">        \tThread consumerthread=new Thread(consumer);</span><br><span class=\"line\">        \tconsumerthread.setName(&quot;Consumer:&quot;+i);</span><br><span class=\"line\">        \tconsumerthread.start();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>馒头：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Mantou&#123;</span><br><span class=\"line\">\tint id;</span><br><span class=\"line\">\tpublic Mantou(int id) &#123;</span><br><span class=\"line\">\t\tthis.id=id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;id:&quot;+id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>筐或者是篮子（盛馒头用的）:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SyncStack&#123;</span><br><span class=\"line\">\tint index=0;</span><br><span class=\"line\">\tMantou[] arr=new Mantou[6];</span><br><span class=\"line\">\t//生产者往arr中添加馒头</span><br><span class=\"line\">\tpublic synchronized void push(Mantou mt) &#123;</span><br><span class=\"line\">\t\twhile(index==arr.length) &#123;//当index==6的时候，说明arr已经满了，这是生产者应该等待，因此如果下一个还是生产者的话一直等待，然后这里就是一个wait();</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tthis.wait();//等待，一直等，等下去，直到有人叫我。</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tthis.notifyAll();//唤醒所有线程</span><br><span class=\"line\">\t\tarr[index]=mt;</span><br><span class=\"line\">\t\tindex++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//消费者在arr中拿馒头吃</span><br><span class=\"line\">\tpublic synchronized Mantou pop() &#123;</span><br><span class=\"line\">\t\twhile (index==0) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tthis.wait();</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tthis.notifyAll();//唤醒所又，如果我现在拿出来一个后</span><br><span class=\"line\">\t\tindex--;</span><br><span class=\"line\">\t\treturn arr[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h4><h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><p> 上面的一个例子中，notifyAll(),是叫醒所有线程，这时候如果，有一个空位，我就叫醒一个线程，还有空位，我就再叫醒一个线程，这里的有多少个线程正在睡觉，就是信号量的概念。这里就不再演示了。</p>\n<p>参考文献</p>\n<ul>\n<li><a href=\"http://www.56.com/u74/v_MTA4MTI4MTI3.html\" target=\"_blank\" rel=\"noopener\">Java线程多线程编程【尚学堂科技马士兵Java基础教程】</a> </li>\n<li><a href=\"http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html\" target=\"_blank\" rel=\"noopener\">Java synchronized详解</a> </li>\n<li><a href=\"http://www.cnblogs.com/GnagWang/archive/2011/02/27/1966606.html\" target=\"_blank\" rel=\"noopener\">java synchronized详解</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006049612\" target=\"_blank\" rel=\"noopener\">Java 8 并发教程：同步和锁</a></li>\n<li><a href=\"http://blog.csdn.net/escaflone/article/details/10418651\" target=\"_blank\" rel=\"noopener\">Java 多线程 并发编程</a></li>\n<li><a href=\"https://my.oschina.net/liughDevelop/blog/1505500\" target=\"_blank\" rel=\"noopener\">JDK并发四篇文章</a></li>\n<li><a href=\"https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md\" target=\"_blank\" rel=\"noopener\">技术面试基础知识CyC2018</a></li>\n</ul>\n"},{"title":"Tomcat源码阅读之URL请求解析","date":"2018-04-17T02:07:03.000Z","description":"研究tomcat系列,组件之间的请求转发，Connector怎么到了Container？ ","_content":"\n## 这个流程写的很详细\n可参考这个博客的[时序图](http://hill007299.iteye.com/blog/1757198)\n\nhttp://localhost:8080/examples/composite.jsp\n---\n- 在端口8080启动Server，并通知Service完成启动，Service通知Connector完成初始化和启动的过程\n- Connector首先收到这个请求，会调用ProtocolHandler完成http协议的解析，然后交给SocketProcessor处理，解析请求头，通过ConnectionHandler，给到Http11Processor，再交给CoyoteAdapter解析请求行和请求体，并把解析信息封装到Request和Response对象中， 把请求（此时应该是Request对象，这里的Request对象已经封装了Http请求的信息）交给Container容器 \n- Container容器交给其子容器——Engine容器，并等待Engine容器的处理结果 Engine容器匹配其所有的虚拟主机，这里匹配到Host\n- 请求被移交给hostname为localhost的Host容器，host匹配其所有子容器Context，这里找到contextPath为/examples的Context容器。如果匹配不到就把该请求交给路径名为”“的Context去处理\n- 请求再次被移交给Context容器，Context继续匹配其子容器Wrapper，由Wrapper容器加载composite.jsp对应的servlet，这里编译的servlet是basic_002dcomparisons_jsp.class文件\n- Context容器根据后缀匹配原则*.jsp找到composite.jsp编译的java类的class文件\n- Connector构建一个org.apache.catalina.connector.Request以及org.apache.catalina.connector.Response对象，使用反射调用Servelt的service方法\n- Context容器把封装了响应消息的Response对象返回给Host容器\n- 容器把Response返回给Engine容器\n- Engine容器返回给Connector\n- Connetor容器把Response返回给浏览器\n- 浏览器解析Response报文\n- 显示资源内容\n\n\n![流程主要代码](/Tomcat源码阅读之URL请求解析/Connector.png)\n\n## Connector到Container\nConnector 中的init和start 都是对应service调用的参考上一篇[Tomcat组件生命周期]()\n\n这里主要通过initInternal和startInternal来进行详细分析。\n\n```\n//代码段1\n    protected String protocolHandlerClassName = \"org.apache.coyote.http11.Http11NioProtocol\";\n    public Connector(String protocol) {\n        setProtocol(protocol);\n        // Instantiate protocol handler\n        ProtocolHandler p = null;\n        try {\n            Class<?> clazz = Class.forName(protocolHandlerClassName);\n            p = (ProtocolHandler) clazz.getConstructor().newInstance();\n        } catch (Exception e) {\n            log.error(sm.getString(\n                    \"coyoteConnector.protocolHandlerInstantiationFailed\"), e);\n        } finally {\n        \n            this.protocolHandler = p;//初始化的时候这里的protocolHandler是通过反射获取的Http11NioProtocol实例。\n        }\n\n        if (Globals.STRICT_SERVLET_COMPLIANCE) {\n            uriCharset = StandardCharsets.ISO_8859_1;\n        } else {\n            uriCharset = StandardCharsets.UTF_8;\n        }\n    }\n    @Override\n    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        // Initialize adapter\n        adapter = new CoyoteAdapter(this);\n        protocolHandler.setAdapter(adapter);//protocolHandler到CoyoteAdapter的关联关系\n\n      \n        try {\n            protocolHandler.init();//AbstractProtocol.init(),这里会调用到endpoint.bind()\n        } catch (Exception e) {\n            throw new LifecycleException(\n                    sm.getString(\"coyoteConnector.protocolHandlerInitializationFailed\"), e);\n        }\n    }\n\n\n    /**\n     * Begin processing requests via this Connector.\n     *\n     * @exception LifecycleException if a fatal startup error occurs\n     */\n    @Override\n    protected void startInternal() throws LifecycleException {\n\n        // Validate settings before starting\n        if (getPort() < 0) {\n            throw new LifecycleException(sm.getString(\n                    \"coyoteConnector.invalidPort\", Integer.valueOf(getPort())));\n        }\n\n        setState(LifecycleState.STARTING);\n\n        try {\n            protocolHandler.start();//AbstractProtocol.start(),这里会调用到endpoint.start()\n        } catch (Exception e) {\n            throw new LifecycleException(\n                    sm.getString(\"coyoteConnector.protocolHandlerStartFailed\"), e);\n        }\n    }\n   \n\n```\n\nConnector中主要确定要哪一个协议来处理请求，最后又交回到CoyoteAdapter中。\n\n\n\n#### AbstractProtocol\n\n\n```\n @Override\n    public void init() throws Exception {\n        if (getLog().isInfoEnabled()) {\n            getLog().info(sm.getString(\"abstractProtocolHandler.init\", getName()));\n        }\n\n        if (oname == null) {\n            // Component not pre-registered so register it\n            oname = createObjectName();\n            if (oname != null) {\n                Registry.getRegistry(null, null).registerComponent(this, oname, null);\n            }\n        }\n\n        if (this.domain != null) {\n            rgOname = new ObjectName(domain + \":type=GlobalRequestProcessor,name=\" + getName());\n            Registry.getRegistry(null, null).registerComponent(\n                    getHandler().getGlobal(), rgOname, null);\n        }\n\n        String endpointName = getName();\n        endpoint.setName(endpointName.substring(1, endpointName.length()-1));\n        endpoint.setDomain(domain);\n\n        endpoint.init();//这里在初始化Http11NioProtocol的时候有一个实例化NioEndpoint，这个就是endpoint\n        ···················\n        Http11NioProtocol 的构造方法\n         public Http11NioProtocol() {\n        super(new NioEndpoint());\n        }\n        ····················\n        \n    }\n\n\n    @Override\n    public void start() throws Exception {\n        if (getLog().isInfoEnabled()) {\n            getLog().info(sm.getString(\"abstractProtocolHandler.start\", getName()));\n        }\n\n        endpoint.start();\n\n        // Start async timeout thread\n        asyncTimeout = new AsyncTimeout();\n        Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + \"-AsyncTimeout\");\n        int priority = endpoint.getThreadPriority();\n        if (priority < Thread.MIN_PRIORITY || priority > Thread.MAX_PRIORITY) {\n            priority = Thread.NORM_PRIORITY;\n        }\n        timeoutThread.setPriority(priority);\n        timeoutThread.setDaemon(true);\n        timeoutThread.start();\n    }\n\n```\n\n此步骤已经从Connector转到了AbstractProtocol协议处理内部，然后找NioEndpoint\n\n需要注意在Connector找AbstractProtocol的时候，\n```\n    public AbstractHttp11Protocol(AbstractEndpoint<S> endpoint) {\n        super(endpoint);\n        setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);\n        ConnectionHandler<S> cHandler = new ConnectionHandler<>(this);\n        setHandler(cHandler);\n        getEndpoint().setHandler(cHandler);\n    }\n```\n这里在AbstractHttp11Protocol构造函数中设置了NioEndpoint的handler，就是AbstractProtocol中的ConnectionHandler，因此在Protocol处理完后给ConnectionHandler，然后通过getHandler调用process(),\n\n\n\n#### AbstractEndpoint 和NioEndpoint  \n首先是抽象类AbstractEndpoint中的init和start，会bind()和start()一下，这才会到NioEndpoint进行处理\n\nAbstractEndpoint\n\n```\n    public void init() throws Exception {\n        if (bindOnInit) {\n            bind();\n            bindState = BindState.BOUND_ON_INIT;\n        }\n        if (this.domain != null) {\n            // Register endpoint (as ThreadPool - historical name)\n            oname = new ObjectName(domain + \":type=ThreadPool,name=\\\"\" + getName() + \"\\\"\");\n            Registry.getRegistry(null, null).registerComponent(this, oname, null);\n\n            for (SSLHostConfig sslHostConfig : findSslHostConfigs()) {\n                registerJmx(sslHostConfig);\n            }\n        }\n    }\n    \n    public final void start() throws Exception {\n        if (bindState == BindState.UNBOUND) {\n            bind();\n            bindState = BindState.BOUND_ON_START;\n        }\n        startInternal();\n    }\n    public abstract void bind() throws Exception;\n    public abstract void startInternal() throws Exception;\n    \n```\nNioEndpoint\n\n```\n@Override\n    public void bind() throws Exception {\n\n        serverSock = ServerSocketChannel.open();\n        socketProperties.setProperties(serverSock.socket());\n        InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));\n        serverSock.socket().bind(addr,getAcceptCount());\n        serverSock.configureBlocking(true); //mimic APR behavior\n\n        selectorPool.open();\n    }\n\n    @Override\n    public void startInternal() throws Exception {\n\n        if (!running) {\n \n         // Start poller threads 这里启动了并一直在空转看内部的run()方法有一个while(true)\n            pollers = new Poller[getPollerThreadCount()];\n            for (int i=0; i<pollers.length; i++) {\n                pollers[i] = new Poller();\n                Thread pollerThread = new Thread(pollers[i], getName() + \"-ClientPoller-\"+i);\n                pollerThread.setPriority(threadPriority);\n                pollerThread.setDaemon(true);\n                pollerThread.start();\n            }\n\n            startAcceptorThreads();//调用到AbstractEndpoint然后new Acceptor(),并start()\n            ···············\n             Acceptor.run()方法\n             \n               // Accept the next incoming connection from the server\n             socket = serverSock.accept();这里阻塞了，等待请求\n             setSocketOptions();// getPoller0().register(channel);\n            ················\n        }\n    }\n```\nAcceptor的作用是控制与tomcat建立连接的数量，但Acceptor只负责建立连接。socket内容的读写是通过Poller来实现的。\n\nsetSocketOptions()是关键关联点\n\n#### NioEndpoint到SocketProcessor到ConnectionHandler\n\n这里应该是使用了一个注册监听。\n\nPoller 和事件类PollerEvent\nPoller 是在startInternal就启动了`pollerThread.start();`\n先把channel注册到Poller并添加addEvent(),对应一个PollerEvent，然后每次Poller在run()的时候，就会events()[PollerEvent.run()],如果有事件，就会返回true，\n\n```\nPoller implements Runnable {\n    public boolean events() {\n        boolean result = false;\n        //events.poll()看event里面还有没有事件\n        PollerEvent pe = null;\n        for (int i = 0, size = events.size(); i < size && (pe = events.poll()) != null; i++ ) {\n            result = true;\n            try {\n                pe.run();\n                pe.reset();\n                if (running && !paused) {\n                    eventCache.push(pe);\n                }\n            } catch ( Throwable x ) {\n                log.error(\"\",x);\n            }\n        }\n\n        return result;\n    }\n    public void register(final NioChannel socket) {\n        PollerEvent r = eventCache.pop();\n        addEvent(r);\n    }\n    public void run() {\n            // Loop until destroy() is called\n            while (true) {\n\n                boolean hasEvents = false;\n\n                try {\n                    if (!close) {\n                        hasEvents = events();\n                        if (wakeupCounter.getAndSet(-1) > 0) {\n                            //if we are here, means we have other stuff to do\n                            //do a non blocking select\n                            keyCount = selector.selectNow();\n                        } else {\n                            keyCount = selector.select(selectorTimeout);\n                        }\n                        wakeupCounter.set(0);\n                    }\n                    if (close) {\n                        events();\n                        timeout(0, false);\n                        try {\n                            selector.close();\n                        } catch (IOException ioe) {\n                            log.error(sm.getString(\"endpoint.nio.selectorCloseFail\"), ioe);\n                        }\n                        break;\n                    }\n                } catch (Throwable x) {\n                    ExceptionUtils.handleThrowable(x);\n                    log.error(\"\",x);\n                    continue;\n                }\n                //either we timed out or we woke up, process events first\n                if ( keyCount == 0 ) hasEvents = (hasEvents | events());\n\n                Iterator<SelectionKey> iterator =\n                    keyCount > 0 ? selector.selectedKeys().iterator() : null;\n                // Walk through the collection of ready keys and dispatch\n                // any active event.\n                while (iterator != null && iterator.hasNext()) {\n                    SelectionKey sk = iterator.next();\n                    NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();\n                    // Attachment may be null if another thread has called\n                    // cancelledKey()\n                    if (attachment == null) {\n                        iterator.remove();\n                    } else {\n                        iterator.remove();\n                        //这样就到了继续处理的时候\n                        processKey(sk, attachment);\n                    }\n                }//while\n\n                //process timeouts\n                timeout(keyCount,hasEvents);\n            }//while\n\n            getStopLatch().countDown();\n        }\n}\n\n\nPollerEvent implements Runnable {\n     public void run() {\n           socket.getIOChannel().register(\n                            socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);\n     }\n}\n```\n\n\nPoller只要执行run()之后，就会依次按照下面这个步骤：\n- `processKey(sk, attachment);`\n    - `processSendfile(sk,attachment, false); `\n- `processSocket(socketWrapper, SocketEvent.OPEN_READ, true)`\n- 找到AbstractEndpoint.processSocket()\n- ` sc = createSocketProcessor(socketWrapper, event); sc.run();`\n- NioEndpoint.createSocketProcessor()内部`new SocketProcessor(socketWrapper, event);`\n-  `state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);`\n\n\n```\n    @Override\n    protected SocketProcessorBase<NioChannel> createSocketProcessor(\n            SocketWrapperBase<NioChannel> socketWrapper, SocketEvent event) {\n        return new SocketProcessor(socketWrapper, event);\n    }\n```\n\n到SocketProcessor后，getHandler()就能用ConnectionHandler进而到Http11Processor处理(AbstractHttp11Protocol的构造函数定义的handler)\n\n####  ConnectionHandler到Http11Processor\n\n\nNioEndpoint调用processSocket()方法，最终还是执行SocketProcessor.doRun();这个doRun中就使用了getHandler().process(socketWrapper);此处的handler是上文中AbstractHttp11Protocol构造函数中设置的ConnectionHandler（内部类AbstractProtocol），这个类中就把SocketProcessor和Http11Processor 关联起来l，也正如这个名字所示ConnectionHandler.\n\nAbstractProtocol.ConnectionHandler.process()方法内部\n```\n processor = getProtocol().createProcessor();\n ···················\n  AbstractHttp11Protocol.createProcessor();这就是上一行的创建这个处理就是Http11Processor。\n  Http11Processor processor = new Http11Processor(getMaxHttpHeaderSize(),\n                getAllowHostHeaderMismatch(), getRejectIllegalHeaderName(), getEndpoint(),\n                getMaxTrailerSize(), allowedTrailerHeaders, getMaxExtensionSize(),\n                getMaxSwallowSize(), httpUpgradeProtocols, getSendReasonPhrase());\n ····················\n processor.process(wrapper, status);\n```\n那么这个process就是Http11Processor的执行了，下面就是Http11Processor和CoyoteAdapter的转换。\n\n\n#### Http11Processor到CoyoteAdapter到Container\n\n上面的`processor.process(wrapper, status);`实际上是调用AbstractProcessorLight.process()-------------->内部有一个service()\n\n就又回到了Http11Processor重写的方法service()\n\n```\n  public SocketState process(SocketWrapperBase<?> socketWrapper, SocketEvent status)\n            throws IOException {\n\n        SocketState state = SocketState.CLOSED;\n        Iterator<DispatchType> dispatches = null;\n        do {\n                       // There may be pipe-lined data to read. If the data isn't\n                    // processed now, execution will exit this loop and call\n                    // release() which will recycle the processor (and input\n                    // buffer) deleting any pipe-lined data. To avoid this,\n                    // process it now.\n                    state = service(socketWrapper);\n          \n        } while (state == SocketState.ASYNC_END ||\n                dispatches != null && state != SocketState.CLOSED);\n\n        return state;\n    }\n    \n```\n\nHttp11Processor.process()-------------->AbstractProcessorLight.process()\n state = service(socketWrapper);----------->Http11Processor.service()\n\n\nHttp11Processor.service() :\n`import org.apache.coyote.Request;`\n`getAdapter().service(request, response);`\n\ngetAdapter是在Connector.init()中给的就是下面这个CoyoteAdapter\n\n\nCoyoteAdapter.service()方法中有代码：\n这里构造request，response\n\n``` \nrequest = connector.createRequest();\nrequest.setCoyoteRequest(req);\nresponse = connector.createResponse();\nresponse.setCoyoteResponse(res);\nconnector.getService().getContainer().getPipeline().getFirst().invoke(request, response);\n\n```\n`org.apache.catalina.connector.Request`这个req.res都有了，然后就是找到具体的请求处理模块并返回。\n\n这样就找到了Container，实际上到这里已经完成了Connector到Container的转换。\n\n[百度脑图Connector](http://naotu.baidu.com/file/3a08dd05ba3011c349941c95a4814be4?token=1ab842bbabc206c6)\n\n## Container内部进行责任链处理\n\n#### Engine Host Context Wrapper\n\n见下篇\"Tomcat源码阅读之Container责任链\"\n                             \n系列文章\n\n- [Tomcat源码阅读之从server.xml看组件关系](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/)\n- [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)\n- [Tomcat源码阅读之URL请求解析](http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/)\n- [Tomcat源码阅读之Container责任链](https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/)\n\n参看文献：\n\n- [Poller](https://blog.csdn.net/yanlinwang/article/details/46382889)\n- [随笔分类 - Tomcat](http://www.cnblogs.com/coldridgeValley/category/797239.html)\n- [Tomcat中的设计模式](https://www.cnblogs.com/coldridgeValley/p/6606271.html)\n- 《深入剖析Tomcat》\n- [Tomcat 系统架构与设计模式](https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)\n- [tomcat8.5.30源码](http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip)\n- [手写一个简化版Tomcat](https://my.oschina.net/liughDevelop/blog/1790893#comment-list)\n- [Tomcat对HTTP请求的处理(二)](http://www.cnblogs.com/coldridgeValley/p/6252781.html)\n- [请求流程](https://blog.csdn.net/u011116672/article/details/50994038)","source":"_posts/Tomcat源码阅读之URL请求解析.md","raw":"---\ntitle: Tomcat源码阅读之URL请求解析\ndate: 2018-04-17 10:07:03\ntags: tomcat\ncategories: java\ndescription: \"研究tomcat系列,组件之间的请求转发，Connector怎么到了Container？ \"\n---\n\n## 这个流程写的很详细\n可参考这个博客的[时序图](http://hill007299.iteye.com/blog/1757198)\n\nhttp://localhost:8080/examples/composite.jsp\n---\n- 在端口8080启动Server，并通知Service完成启动，Service通知Connector完成初始化和启动的过程\n- Connector首先收到这个请求，会调用ProtocolHandler完成http协议的解析，然后交给SocketProcessor处理，解析请求头，通过ConnectionHandler，给到Http11Processor，再交给CoyoteAdapter解析请求行和请求体，并把解析信息封装到Request和Response对象中， 把请求（此时应该是Request对象，这里的Request对象已经封装了Http请求的信息）交给Container容器 \n- Container容器交给其子容器——Engine容器，并等待Engine容器的处理结果 Engine容器匹配其所有的虚拟主机，这里匹配到Host\n- 请求被移交给hostname为localhost的Host容器，host匹配其所有子容器Context，这里找到contextPath为/examples的Context容器。如果匹配不到就把该请求交给路径名为”“的Context去处理\n- 请求再次被移交给Context容器，Context继续匹配其子容器Wrapper，由Wrapper容器加载composite.jsp对应的servlet，这里编译的servlet是basic_002dcomparisons_jsp.class文件\n- Context容器根据后缀匹配原则*.jsp找到composite.jsp编译的java类的class文件\n- Connector构建一个org.apache.catalina.connector.Request以及org.apache.catalina.connector.Response对象，使用反射调用Servelt的service方法\n- Context容器把封装了响应消息的Response对象返回给Host容器\n- 容器把Response返回给Engine容器\n- Engine容器返回给Connector\n- Connetor容器把Response返回给浏览器\n- 浏览器解析Response报文\n- 显示资源内容\n\n\n![流程主要代码](/Tomcat源码阅读之URL请求解析/Connector.png)\n\n## Connector到Container\nConnector 中的init和start 都是对应service调用的参考上一篇[Tomcat组件生命周期]()\n\n这里主要通过initInternal和startInternal来进行详细分析。\n\n```\n//代码段1\n    protected String protocolHandlerClassName = \"org.apache.coyote.http11.Http11NioProtocol\";\n    public Connector(String protocol) {\n        setProtocol(protocol);\n        // Instantiate protocol handler\n        ProtocolHandler p = null;\n        try {\n            Class<?> clazz = Class.forName(protocolHandlerClassName);\n            p = (ProtocolHandler) clazz.getConstructor().newInstance();\n        } catch (Exception e) {\n            log.error(sm.getString(\n                    \"coyoteConnector.protocolHandlerInstantiationFailed\"), e);\n        } finally {\n        \n            this.protocolHandler = p;//初始化的时候这里的protocolHandler是通过反射获取的Http11NioProtocol实例。\n        }\n\n        if (Globals.STRICT_SERVLET_COMPLIANCE) {\n            uriCharset = StandardCharsets.ISO_8859_1;\n        } else {\n            uriCharset = StandardCharsets.UTF_8;\n        }\n    }\n    @Override\n    protected void initInternal() throws LifecycleException {\n        super.initInternal();\n        \n        // Initialize adapter\n        adapter = new CoyoteAdapter(this);\n        protocolHandler.setAdapter(adapter);//protocolHandler到CoyoteAdapter的关联关系\n\n      \n        try {\n            protocolHandler.init();//AbstractProtocol.init(),这里会调用到endpoint.bind()\n        } catch (Exception e) {\n            throw new LifecycleException(\n                    sm.getString(\"coyoteConnector.protocolHandlerInitializationFailed\"), e);\n        }\n    }\n\n\n    /**\n     * Begin processing requests via this Connector.\n     *\n     * @exception LifecycleException if a fatal startup error occurs\n     */\n    @Override\n    protected void startInternal() throws LifecycleException {\n\n        // Validate settings before starting\n        if (getPort() < 0) {\n            throw new LifecycleException(sm.getString(\n                    \"coyoteConnector.invalidPort\", Integer.valueOf(getPort())));\n        }\n\n        setState(LifecycleState.STARTING);\n\n        try {\n            protocolHandler.start();//AbstractProtocol.start(),这里会调用到endpoint.start()\n        } catch (Exception e) {\n            throw new LifecycleException(\n                    sm.getString(\"coyoteConnector.protocolHandlerStartFailed\"), e);\n        }\n    }\n   \n\n```\n\nConnector中主要确定要哪一个协议来处理请求，最后又交回到CoyoteAdapter中。\n\n\n\n#### AbstractProtocol\n\n\n```\n @Override\n    public void init() throws Exception {\n        if (getLog().isInfoEnabled()) {\n            getLog().info(sm.getString(\"abstractProtocolHandler.init\", getName()));\n        }\n\n        if (oname == null) {\n            // Component not pre-registered so register it\n            oname = createObjectName();\n            if (oname != null) {\n                Registry.getRegistry(null, null).registerComponent(this, oname, null);\n            }\n        }\n\n        if (this.domain != null) {\n            rgOname = new ObjectName(domain + \":type=GlobalRequestProcessor,name=\" + getName());\n            Registry.getRegistry(null, null).registerComponent(\n                    getHandler().getGlobal(), rgOname, null);\n        }\n\n        String endpointName = getName();\n        endpoint.setName(endpointName.substring(1, endpointName.length()-1));\n        endpoint.setDomain(domain);\n\n        endpoint.init();//这里在初始化Http11NioProtocol的时候有一个实例化NioEndpoint，这个就是endpoint\n        ···················\n        Http11NioProtocol 的构造方法\n         public Http11NioProtocol() {\n        super(new NioEndpoint());\n        }\n        ····················\n        \n    }\n\n\n    @Override\n    public void start() throws Exception {\n        if (getLog().isInfoEnabled()) {\n            getLog().info(sm.getString(\"abstractProtocolHandler.start\", getName()));\n        }\n\n        endpoint.start();\n\n        // Start async timeout thread\n        asyncTimeout = new AsyncTimeout();\n        Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + \"-AsyncTimeout\");\n        int priority = endpoint.getThreadPriority();\n        if (priority < Thread.MIN_PRIORITY || priority > Thread.MAX_PRIORITY) {\n            priority = Thread.NORM_PRIORITY;\n        }\n        timeoutThread.setPriority(priority);\n        timeoutThread.setDaemon(true);\n        timeoutThread.start();\n    }\n\n```\n\n此步骤已经从Connector转到了AbstractProtocol协议处理内部，然后找NioEndpoint\n\n需要注意在Connector找AbstractProtocol的时候，\n```\n    public AbstractHttp11Protocol(AbstractEndpoint<S> endpoint) {\n        super(endpoint);\n        setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);\n        ConnectionHandler<S> cHandler = new ConnectionHandler<>(this);\n        setHandler(cHandler);\n        getEndpoint().setHandler(cHandler);\n    }\n```\n这里在AbstractHttp11Protocol构造函数中设置了NioEndpoint的handler，就是AbstractProtocol中的ConnectionHandler，因此在Protocol处理完后给ConnectionHandler，然后通过getHandler调用process(),\n\n\n\n#### AbstractEndpoint 和NioEndpoint  \n首先是抽象类AbstractEndpoint中的init和start，会bind()和start()一下，这才会到NioEndpoint进行处理\n\nAbstractEndpoint\n\n```\n    public void init() throws Exception {\n        if (bindOnInit) {\n            bind();\n            bindState = BindState.BOUND_ON_INIT;\n        }\n        if (this.domain != null) {\n            // Register endpoint (as ThreadPool - historical name)\n            oname = new ObjectName(domain + \":type=ThreadPool,name=\\\"\" + getName() + \"\\\"\");\n            Registry.getRegistry(null, null).registerComponent(this, oname, null);\n\n            for (SSLHostConfig sslHostConfig : findSslHostConfigs()) {\n                registerJmx(sslHostConfig);\n            }\n        }\n    }\n    \n    public final void start() throws Exception {\n        if (bindState == BindState.UNBOUND) {\n            bind();\n            bindState = BindState.BOUND_ON_START;\n        }\n        startInternal();\n    }\n    public abstract void bind() throws Exception;\n    public abstract void startInternal() throws Exception;\n    \n```\nNioEndpoint\n\n```\n@Override\n    public void bind() throws Exception {\n\n        serverSock = ServerSocketChannel.open();\n        socketProperties.setProperties(serverSock.socket());\n        InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));\n        serverSock.socket().bind(addr,getAcceptCount());\n        serverSock.configureBlocking(true); //mimic APR behavior\n\n        selectorPool.open();\n    }\n\n    @Override\n    public void startInternal() throws Exception {\n\n        if (!running) {\n \n         // Start poller threads 这里启动了并一直在空转看内部的run()方法有一个while(true)\n            pollers = new Poller[getPollerThreadCount()];\n            for (int i=0; i<pollers.length; i++) {\n                pollers[i] = new Poller();\n                Thread pollerThread = new Thread(pollers[i], getName() + \"-ClientPoller-\"+i);\n                pollerThread.setPriority(threadPriority);\n                pollerThread.setDaemon(true);\n                pollerThread.start();\n            }\n\n            startAcceptorThreads();//调用到AbstractEndpoint然后new Acceptor(),并start()\n            ···············\n             Acceptor.run()方法\n             \n               // Accept the next incoming connection from the server\n             socket = serverSock.accept();这里阻塞了，等待请求\n             setSocketOptions();// getPoller0().register(channel);\n            ················\n        }\n    }\n```\nAcceptor的作用是控制与tomcat建立连接的数量，但Acceptor只负责建立连接。socket内容的读写是通过Poller来实现的。\n\nsetSocketOptions()是关键关联点\n\n#### NioEndpoint到SocketProcessor到ConnectionHandler\n\n这里应该是使用了一个注册监听。\n\nPoller 和事件类PollerEvent\nPoller 是在startInternal就启动了`pollerThread.start();`\n先把channel注册到Poller并添加addEvent(),对应一个PollerEvent，然后每次Poller在run()的时候，就会events()[PollerEvent.run()],如果有事件，就会返回true，\n\n```\nPoller implements Runnable {\n    public boolean events() {\n        boolean result = false;\n        //events.poll()看event里面还有没有事件\n        PollerEvent pe = null;\n        for (int i = 0, size = events.size(); i < size && (pe = events.poll()) != null; i++ ) {\n            result = true;\n            try {\n                pe.run();\n                pe.reset();\n                if (running && !paused) {\n                    eventCache.push(pe);\n                }\n            } catch ( Throwable x ) {\n                log.error(\"\",x);\n            }\n        }\n\n        return result;\n    }\n    public void register(final NioChannel socket) {\n        PollerEvent r = eventCache.pop();\n        addEvent(r);\n    }\n    public void run() {\n            // Loop until destroy() is called\n            while (true) {\n\n                boolean hasEvents = false;\n\n                try {\n                    if (!close) {\n                        hasEvents = events();\n                        if (wakeupCounter.getAndSet(-1) > 0) {\n                            //if we are here, means we have other stuff to do\n                            //do a non blocking select\n                            keyCount = selector.selectNow();\n                        } else {\n                            keyCount = selector.select(selectorTimeout);\n                        }\n                        wakeupCounter.set(0);\n                    }\n                    if (close) {\n                        events();\n                        timeout(0, false);\n                        try {\n                            selector.close();\n                        } catch (IOException ioe) {\n                            log.error(sm.getString(\"endpoint.nio.selectorCloseFail\"), ioe);\n                        }\n                        break;\n                    }\n                } catch (Throwable x) {\n                    ExceptionUtils.handleThrowable(x);\n                    log.error(\"\",x);\n                    continue;\n                }\n                //either we timed out or we woke up, process events first\n                if ( keyCount == 0 ) hasEvents = (hasEvents | events());\n\n                Iterator<SelectionKey> iterator =\n                    keyCount > 0 ? selector.selectedKeys().iterator() : null;\n                // Walk through the collection of ready keys and dispatch\n                // any active event.\n                while (iterator != null && iterator.hasNext()) {\n                    SelectionKey sk = iterator.next();\n                    NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();\n                    // Attachment may be null if another thread has called\n                    // cancelledKey()\n                    if (attachment == null) {\n                        iterator.remove();\n                    } else {\n                        iterator.remove();\n                        //这样就到了继续处理的时候\n                        processKey(sk, attachment);\n                    }\n                }//while\n\n                //process timeouts\n                timeout(keyCount,hasEvents);\n            }//while\n\n            getStopLatch().countDown();\n        }\n}\n\n\nPollerEvent implements Runnable {\n     public void run() {\n           socket.getIOChannel().register(\n                            socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);\n     }\n}\n```\n\n\nPoller只要执行run()之后，就会依次按照下面这个步骤：\n- `processKey(sk, attachment);`\n    - `processSendfile(sk,attachment, false); `\n- `processSocket(socketWrapper, SocketEvent.OPEN_READ, true)`\n- 找到AbstractEndpoint.processSocket()\n- ` sc = createSocketProcessor(socketWrapper, event); sc.run();`\n- NioEndpoint.createSocketProcessor()内部`new SocketProcessor(socketWrapper, event);`\n-  `state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);`\n\n\n```\n    @Override\n    protected SocketProcessorBase<NioChannel> createSocketProcessor(\n            SocketWrapperBase<NioChannel> socketWrapper, SocketEvent event) {\n        return new SocketProcessor(socketWrapper, event);\n    }\n```\n\n到SocketProcessor后，getHandler()就能用ConnectionHandler进而到Http11Processor处理(AbstractHttp11Protocol的构造函数定义的handler)\n\n####  ConnectionHandler到Http11Processor\n\n\nNioEndpoint调用processSocket()方法，最终还是执行SocketProcessor.doRun();这个doRun中就使用了getHandler().process(socketWrapper);此处的handler是上文中AbstractHttp11Protocol构造函数中设置的ConnectionHandler（内部类AbstractProtocol），这个类中就把SocketProcessor和Http11Processor 关联起来l，也正如这个名字所示ConnectionHandler.\n\nAbstractProtocol.ConnectionHandler.process()方法内部\n```\n processor = getProtocol().createProcessor();\n ···················\n  AbstractHttp11Protocol.createProcessor();这就是上一行的创建这个处理就是Http11Processor。\n  Http11Processor processor = new Http11Processor(getMaxHttpHeaderSize(),\n                getAllowHostHeaderMismatch(), getRejectIllegalHeaderName(), getEndpoint(),\n                getMaxTrailerSize(), allowedTrailerHeaders, getMaxExtensionSize(),\n                getMaxSwallowSize(), httpUpgradeProtocols, getSendReasonPhrase());\n ····················\n processor.process(wrapper, status);\n```\n那么这个process就是Http11Processor的执行了，下面就是Http11Processor和CoyoteAdapter的转换。\n\n\n#### Http11Processor到CoyoteAdapter到Container\n\n上面的`processor.process(wrapper, status);`实际上是调用AbstractProcessorLight.process()-------------->内部有一个service()\n\n就又回到了Http11Processor重写的方法service()\n\n```\n  public SocketState process(SocketWrapperBase<?> socketWrapper, SocketEvent status)\n            throws IOException {\n\n        SocketState state = SocketState.CLOSED;\n        Iterator<DispatchType> dispatches = null;\n        do {\n                       // There may be pipe-lined data to read. If the data isn't\n                    // processed now, execution will exit this loop and call\n                    // release() which will recycle the processor (and input\n                    // buffer) deleting any pipe-lined data. To avoid this,\n                    // process it now.\n                    state = service(socketWrapper);\n          \n        } while (state == SocketState.ASYNC_END ||\n                dispatches != null && state != SocketState.CLOSED);\n\n        return state;\n    }\n    \n```\n\nHttp11Processor.process()-------------->AbstractProcessorLight.process()\n state = service(socketWrapper);----------->Http11Processor.service()\n\n\nHttp11Processor.service() :\n`import org.apache.coyote.Request;`\n`getAdapter().service(request, response);`\n\ngetAdapter是在Connector.init()中给的就是下面这个CoyoteAdapter\n\n\nCoyoteAdapter.service()方法中有代码：\n这里构造request，response\n\n``` \nrequest = connector.createRequest();\nrequest.setCoyoteRequest(req);\nresponse = connector.createResponse();\nresponse.setCoyoteResponse(res);\nconnector.getService().getContainer().getPipeline().getFirst().invoke(request, response);\n\n```\n`org.apache.catalina.connector.Request`这个req.res都有了，然后就是找到具体的请求处理模块并返回。\n\n这样就找到了Container，实际上到这里已经完成了Connector到Container的转换。\n\n[百度脑图Connector](http://naotu.baidu.com/file/3a08dd05ba3011c349941c95a4814be4?token=1ab842bbabc206c6)\n\n## Container内部进行责任链处理\n\n#### Engine Host Context Wrapper\n\n见下篇\"Tomcat源码阅读之Container责任链\"\n                             \n系列文章\n\n- [Tomcat源码阅读之从server.xml看组件关系](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/)\n- [Tomcat源码阅读之组件生命周期](http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/)\n- [Tomcat源码阅读之URL请求解析](http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/)\n- [Tomcat源码阅读之Container责任链](https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/)\n\n参看文献：\n\n- [Poller](https://blog.csdn.net/yanlinwang/article/details/46382889)\n- [随笔分类 - Tomcat](http://www.cnblogs.com/coldridgeValley/category/797239.html)\n- [Tomcat中的设计模式](https://www.cnblogs.com/coldridgeValley/p/6606271.html)\n- 《深入剖析Tomcat》\n- [Tomcat 系统架构与设计模式](https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)\n- [tomcat8.5.30源码](http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip)\n- [手写一个简化版Tomcat](https://my.oschina.net/liughDevelop/blog/1790893#comment-list)\n- [Tomcat对HTTP请求的处理(二)](http://www.cnblogs.com/coldridgeValley/p/6252781.html)\n- [请求流程](https://blog.csdn.net/u011116672/article/details/50994038)","slug":"Tomcat源码阅读之URL请求解析","published":1,"updated":"2018-04-20T08:07:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7bf009pugv58g9eg1hh","content":"<h2 id=\"这个流程写的很详细\"><a href=\"#这个流程写的很详细\" class=\"headerlink\" title=\"这个流程写的很详细\"></a>这个流程写的很详细</h2><p>可参考这个博客的<a href=\"http://hill007299.iteye.com/blog/1757198\" target=\"_blank\" rel=\"noopener\">时序图</a></p>\n<h2 id=\"http-localhost-8080-examples-composite-jsp\"><a href=\"#http-localhost-8080-examples-composite-jsp\" class=\"headerlink\" title=\"http://localhost:8080/examples/composite.jsp\"></a><a href=\"http://localhost:8080/examples/composite.jsp\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/examples/composite.jsp</a></h2><ul>\n<li>在端口8080启动Server，并通知Service完成启动，Service通知Connector完成初始化和启动的过程</li>\n<li>Connector首先收到这个请求，会调用ProtocolHandler完成http协议的解析，然后交给SocketProcessor处理，解析请求头，通过ConnectionHandler，给到Http11Processor，再交给CoyoteAdapter解析请求行和请求体，并把解析信息封装到Request和Response对象中， 把请求（此时应该是Request对象，这里的Request对象已经封装了Http请求的信息）交给Container容器 </li>\n<li>Container容器交给其子容器——Engine容器，并等待Engine容器的处理结果 Engine容器匹配其所有的虚拟主机，这里匹配到Host</li>\n<li>请求被移交给hostname为localhost的Host容器，host匹配其所有子容器Context，这里找到contextPath为/examples的Context容器。如果匹配不到就把该请求交给路径名为”“的Context去处理</li>\n<li>请求再次被移交给Context容器，Context继续匹配其子容器Wrapper，由Wrapper容器加载composite.jsp对应的servlet，这里编译的servlet是basic_002dcomparisons_jsp.class文件</li>\n<li>Context容器根据后缀匹配原则*.jsp找到composite.jsp编译的java类的class文件</li>\n<li>Connector构建一个org.apache.catalina.connector.Request以及org.apache.catalina.connector.Response对象，使用反射调用Servelt的service方法</li>\n<li>Context容器把封装了响应消息的Response对象返回给Host容器</li>\n<li>容器把Response返回给Engine容器</li>\n<li>Engine容器返回给Connector</li>\n<li>Connetor容器把Response返回给浏览器</li>\n<li>浏览器解析Response报文</li>\n<li>显示资源内容</li>\n</ul>\n<p><img src=\"/.io//Connector.png\" alt=\"流程主要代码\"></p>\n<h2 id=\"Connector到Container\"><a href=\"#Connector到Container\" class=\"headerlink\" title=\"Connector到Container\"></a>Connector到Container</h2><p>Connector 中的init和start 都是对应service调用的参考上一篇<a href>Tomcat组件生命周期</a></p>\n<p>这里主要通过initInternal和startInternal来进行详细分析。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//代码段1</span><br><span class=\"line\">    protected String protocolHandlerClassName = &quot;org.apache.coyote.http11.Http11NioProtocol&quot;;</span><br><span class=\"line\">    public Connector(String protocol) &#123;</span><br><span class=\"line\">        setProtocol(protocol);</span><br><span class=\"line\">        // Instantiate protocol handler</span><br><span class=\"line\">        ProtocolHandler p = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class=\"line\">            p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(sm.getString(</span><br><span class=\"line\">                    &quot;coyoteConnector.protocolHandlerInstantiationFailed&quot;), e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            this.protocolHandler = p;//初始化的时候这里的protocolHandler是通过反射获取的Http11NioProtocol实例。</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (Globals.STRICT_SERVLET_COMPLIANCE) &#123;</span><br><span class=\"line\">            uriCharset = StandardCharsets.ISO_8859_1;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            uriCharset = StandardCharsets.UTF_8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void initInternal() throws LifecycleException &#123;</span><br><span class=\"line\">        super.initInternal();</span><br><span class=\"line\">        </span><br><span class=\"line\">        // Initialize adapter</span><br><span class=\"line\">        adapter = new CoyoteAdapter(this);</span><br><span class=\"line\">        protocolHandler.setAdapter(adapter);//protocolHandler到CoyoteAdapter的关联关系</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            protocolHandler.init();//AbstractProtocol.init(),这里会调用到endpoint.bind()</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new LifecycleException(</span><br><span class=\"line\">                    sm.getString(&quot;coyoteConnector.protocolHandlerInitializationFailed&quot;), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Begin processing requests via this Connector.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @exception LifecycleException if a fatal startup error occurs</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void startInternal() throws LifecycleException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Validate settings before starting</span><br><span class=\"line\">        if (getPort() &lt; 0) &#123;</span><br><span class=\"line\">            throw new LifecycleException(sm.getString(</span><br><span class=\"line\">                    &quot;coyoteConnector.invalidPort&quot;, Integer.valueOf(getPort())));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setState(LifecycleState.STARTING);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            protocolHandler.start();//AbstractProtocol.start(),这里会调用到endpoint.start()</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new LifecycleException(</span><br><span class=\"line\">                    sm.getString(&quot;coyoteConnector.protocolHandlerStartFailed&quot;), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Connector中主要确定要哪一个协议来处理请求，最后又交回到CoyoteAdapter中。</p>\n<h4 id=\"AbstractProtocol\"><a href=\"#AbstractProtocol\" class=\"headerlink\" title=\"AbstractProtocol\"></a>AbstractProtocol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public void init() throws Exception &#123;</span><br><span class=\"line\">       if (getLog().isInfoEnabled()) &#123;</span><br><span class=\"line\">           getLog().info(sm.getString(&quot;abstractProtocolHandler.init&quot;, getName()));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (oname == null) &#123;</span><br><span class=\"line\">           // Component not pre-registered so register it</span><br><span class=\"line\">           oname = createObjectName();</span><br><span class=\"line\">           if (oname != null) &#123;</span><br><span class=\"line\">               Registry.getRegistry(null, null).registerComponent(this, oname, null);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (this.domain != null) &#123;</span><br><span class=\"line\">           rgOname = new ObjectName(domain + &quot;:type=GlobalRequestProcessor,name=&quot; + getName());</span><br><span class=\"line\">           Registry.getRegistry(null, null).registerComponent(</span><br><span class=\"line\">                   getHandler().getGlobal(), rgOname, null);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       String endpointName = getName();</span><br><span class=\"line\">       endpoint.setName(endpointName.substring(1, endpointName.length()-1));</span><br><span class=\"line\">       endpoint.setDomain(domain);</span><br><span class=\"line\"></span><br><span class=\"line\">       endpoint.init();//这里在初始化Http11NioProtocol的时候有一个实例化NioEndpoint，这个就是endpoint</span><br><span class=\"line\">       ···················</span><br><span class=\"line\">       Http11NioProtocol 的构造方法</span><br><span class=\"line\">        public Http11NioProtocol() &#123;</span><br><span class=\"line\">       super(new NioEndpoint());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       ····················</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public void start() throws Exception &#123;</span><br><span class=\"line\">       if (getLog().isInfoEnabled()) &#123;</span><br><span class=\"line\">           getLog().info(sm.getString(&quot;abstractProtocolHandler.start&quot;, getName()));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       endpoint.start();</span><br><span class=\"line\"></span><br><span class=\"line\">       // Start async timeout thread</span><br><span class=\"line\">       asyncTimeout = new AsyncTimeout();</span><br><span class=\"line\">       Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + &quot;-AsyncTimeout&quot;);</span><br><span class=\"line\">       int priority = endpoint.getThreadPriority();</span><br><span class=\"line\">       if (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class=\"line\">           priority = Thread.NORM_PRIORITY;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       timeoutThread.setPriority(priority);</span><br><span class=\"line\">       timeoutThread.setDaemon(true);</span><br><span class=\"line\">       timeoutThread.start();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>此步骤已经从Connector转到了AbstractProtocol协议处理内部，然后找NioEndpoint</p>\n<p>需要注意在Connector找AbstractProtocol的时候，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public AbstractHttp11Protocol(AbstractEndpoint&lt;S&gt; endpoint) &#123;</span><br><span class=\"line\">    super(endpoint);</span><br><span class=\"line\">    setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class=\"line\">    ConnectionHandler&lt;S&gt; cHandler = new ConnectionHandler&lt;&gt;(this);</span><br><span class=\"line\">    setHandler(cHandler);</span><br><span class=\"line\">    getEndpoint().setHandler(cHandler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里在AbstractHttp11Protocol构造函数中设置了NioEndpoint的handler，就是AbstractProtocol中的ConnectionHandler，因此在Protocol处理完后给ConnectionHandler，然后通过getHandler调用process(),</p>\n<h4 id=\"AbstractEndpoint-和NioEndpoint\"><a href=\"#AbstractEndpoint-和NioEndpoint\" class=\"headerlink\" title=\"AbstractEndpoint 和NioEndpoint\"></a>AbstractEndpoint 和NioEndpoint</h4><p>首先是抽象类AbstractEndpoint中的init和start，会bind()和start()一下，这才会到NioEndpoint进行处理</p>\n<p>AbstractEndpoint</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void init() throws Exception &#123;</span><br><span class=\"line\">    if (bindOnInit) &#123;</span><br><span class=\"line\">        bind();</span><br><span class=\"line\">        bindState = BindState.BOUND_ON_INIT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.domain != null) &#123;</span><br><span class=\"line\">        // Register endpoint (as ThreadPool - historical name)</span><br><span class=\"line\">        oname = new ObjectName(domain + &quot;:type=ThreadPool,name=\\&quot;&quot; + getName() + &quot;\\&quot;&quot;);</span><br><span class=\"line\">        Registry.getRegistry(null, null).registerComponent(this, oname, null);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (SSLHostConfig sslHostConfig : findSslHostConfigs()) &#123;</span><br><span class=\"line\">            registerJmx(sslHostConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public final void start() throws Exception &#123;</span><br><span class=\"line\">    if (bindState == BindState.UNBOUND) &#123;</span><br><span class=\"line\">        bind();</span><br><span class=\"line\">        bindState = BindState.BOUND_ON_START;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startInternal();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public abstract void bind() throws Exception;</span><br><span class=\"line\">public abstract void startInternal() throws Exception;</span><br></pre></td></tr></table></figure>\n<p>NioEndpoint</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public void bind() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSock = ServerSocketChannel.open();</span><br><span class=\"line\">        socketProperties.setProperties(serverSock.socket());</span><br><span class=\"line\">        InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));</span><br><span class=\"line\">        serverSock.socket().bind(addr,getAcceptCount());</span><br><span class=\"line\">        serverSock.configureBlocking(true); //mimic APR behavior</span><br><span class=\"line\"></span><br><span class=\"line\">        selectorPool.open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void startInternal() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!running) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">         // Start poller threads 这里启动了并一直在空转看内部的run()方法有一个while(true)</span><br><span class=\"line\">            pollers = new Poller[getPollerThreadCount()];</span><br><span class=\"line\">            for (int i=0; i&lt;pollers.length; i++) &#123;</span><br><span class=\"line\">                pollers[i] = new Poller();</span><br><span class=\"line\">                Thread pollerThread = new Thread(pollers[i], getName() + &quot;-ClientPoller-&quot;+i);</span><br><span class=\"line\">                pollerThread.setPriority(threadPriority);</span><br><span class=\"line\">                pollerThread.setDaemon(true);</span><br><span class=\"line\">                pollerThread.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            startAcceptorThreads();//调用到AbstractEndpoint然后new Acceptor(),并start()</span><br><span class=\"line\">            ···············</span><br><span class=\"line\">             Acceptor.run()方法</span><br><span class=\"line\">             </span><br><span class=\"line\">               // Accept the next incoming connection from the server</span><br><span class=\"line\">             socket = serverSock.accept();这里阻塞了，等待请求</span><br><span class=\"line\">             setSocketOptions();// getPoller0().register(channel);</span><br><span class=\"line\">            ················</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Acceptor的作用是控制与tomcat建立连接的数量，但Acceptor只负责建立连接。socket内容的读写是通过Poller来实现的。</p>\n<p>setSocketOptions()是关键关联点</p>\n<h4 id=\"NioEndpoint到SocketProcessor到ConnectionHandler\"><a href=\"#NioEndpoint到SocketProcessor到ConnectionHandler\" class=\"headerlink\" title=\"NioEndpoint到SocketProcessor到ConnectionHandler\"></a>NioEndpoint到SocketProcessor到ConnectionHandler</h4><p>这里应该是使用了一个注册监听。</p>\n<p>Poller 和事件类PollerEvent<br>Poller 是在startInternal就启动了<code>pollerThread.start();</code><br>先把channel注册到Poller并添加addEvent(),对应一个PollerEvent，然后每次Poller在run()的时候，就会events()[PollerEvent.run()],如果有事件，就会返回true，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Poller implements Runnable &#123;</span><br><span class=\"line\">    public boolean events() &#123;</span><br><span class=\"line\">        boolean result = false;</span><br><span class=\"line\">        //events.poll()看event里面还有没有事件</span><br><span class=\"line\">        PollerEvent pe = null;</span><br><span class=\"line\">        for (int i = 0, size = events.size(); i &lt; size &amp;&amp; (pe = events.poll()) != null; i++ ) &#123;</span><br><span class=\"line\">            result = true;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                pe.run();</span><br><span class=\"line\">                pe.reset();</span><br><span class=\"line\">                if (running &amp;&amp; !paused) &#123;</span><br><span class=\"line\">                    eventCache.push(pe);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch ( Throwable x ) &#123;</span><br><span class=\"line\">                log.error(&quot;&quot;,x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void register(final NioChannel socket) &#123;</span><br><span class=\"line\">        PollerEvent r = eventCache.pop();</span><br><span class=\"line\">        addEvent(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">            // Loop until destroy() is called</span><br><span class=\"line\">            while (true) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                boolean hasEvents = false;</span><br><span class=\"line\"></span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (!close) &#123;</span><br><span class=\"line\">                        hasEvents = events();</span><br><span class=\"line\">                        if (wakeupCounter.getAndSet(-1) &gt; 0) &#123;</span><br><span class=\"line\">                            //if we are here, means we have other stuff to do</span><br><span class=\"line\">                            //do a non blocking select</span><br><span class=\"line\">                            keyCount = selector.selectNow();</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            keyCount = selector.select(selectorTimeout);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        wakeupCounter.set(0);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (close) &#123;</span><br><span class=\"line\">                        events();</span><br><span class=\"line\">                        timeout(0, false);</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            selector.close();</span><br><span class=\"line\">                        &#125; catch (IOException ioe) &#123;</span><br><span class=\"line\">                            log.error(sm.getString(&quot;endpoint.nio.selectorCloseFail&quot;), ioe);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; catch (Throwable x) &#123;</span><br><span class=\"line\">                    ExceptionUtils.handleThrowable(x);</span><br><span class=\"line\">                    log.error(&quot;&quot;,x);</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //either we timed out or we woke up, process events first</span><br><span class=\"line\">                if ( keyCount == 0 ) hasEvents = (hasEvents | events());</span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; iterator =</span><br><span class=\"line\">                    keyCount &gt; 0 ? selector.selectedKeys().iterator() : null;</span><br><span class=\"line\">                // Walk through the collection of ready keys and dispatch</span><br><span class=\"line\">                // any active event.</span><br><span class=\"line\">                while (iterator != null &amp;&amp; iterator.hasNext()) &#123;</span><br><span class=\"line\">                    SelectionKey sk = iterator.next();</span><br><span class=\"line\">                    NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();</span><br><span class=\"line\">                    // Attachment may be null if another thread has called</span><br><span class=\"line\">                    // cancelledKey()</span><br><span class=\"line\">                    if (attachment == null) &#123;</span><br><span class=\"line\">                        iterator.remove();</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        iterator.remove();</span><br><span class=\"line\">                        //这样就到了继续处理的时候</span><br><span class=\"line\">                        processKey(sk, attachment);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;//while</span><br><span class=\"line\"></span><br><span class=\"line\">                //process timeouts</span><br><span class=\"line\">                timeout(keyCount,hasEvents);</span><br><span class=\"line\">            &#125;//while</span><br><span class=\"line\"></span><br><span class=\"line\">            getStopLatch().countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PollerEvent implements Runnable &#123;</span><br><span class=\"line\">     public void run() &#123;</span><br><span class=\"line\">           socket.getIOChannel().register(</span><br><span class=\"line\">                            socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Poller只要执行run()之后，就会依次按照下面这个步骤：</p>\n<ul>\n<li><code>processKey(sk, attachment);</code><ul>\n<li><code>processSendfile(sk,attachment, false);</code></li>\n</ul>\n</li>\n<li><code>processSocket(socketWrapper, SocketEvent.OPEN_READ, true)</code></li>\n<li>找到AbstractEndpoint.processSocket()</li>\n<li><code>sc = createSocketProcessor(socketWrapper, event); sc.run();</code></li>\n<li>NioEndpoint.createSocketProcessor()内部<code>new SocketProcessor(socketWrapper, event);</code></li>\n<li><code>state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected SocketProcessorBase&lt;NioChannel&gt; createSocketProcessor(</span><br><span class=\"line\">        SocketWrapperBase&lt;NioChannel&gt; socketWrapper, SocketEvent event) &#123;</span><br><span class=\"line\">    return new SocketProcessor(socketWrapper, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到SocketProcessor后，getHandler()就能用ConnectionHandler进而到Http11Processor处理(AbstractHttp11Protocol的构造函数定义的handler)</p>\n<h4 id=\"ConnectionHandler到Http11Processor\"><a href=\"#ConnectionHandler到Http11Processor\" class=\"headerlink\" title=\"ConnectionHandler到Http11Processor\"></a>ConnectionHandler到Http11Processor</h4><p>NioEndpoint调用processSocket()方法，最终还是执行SocketProcessor.doRun();这个doRun中就使用了getHandler().process(socketWrapper);此处的handler是上文中AbstractHttp11Protocol构造函数中设置的ConnectionHandler（内部类AbstractProtocol），这个类中就把SocketProcessor和Http11Processor 关联起来l，也正如这个名字所示ConnectionHandler.</p>\n<p>AbstractProtocol.ConnectionHandler.process()方法内部<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processor = getProtocol().createProcessor();</span><br><span class=\"line\">···················</span><br><span class=\"line\"> AbstractHttp11Protocol.createProcessor();这就是上一行的创建这个处理就是Http11Processor。</span><br><span class=\"line\"> Http11Processor processor = new Http11Processor(getMaxHttpHeaderSize(),</span><br><span class=\"line\">               getAllowHostHeaderMismatch(), getRejectIllegalHeaderName(), getEndpoint(),</span><br><span class=\"line\">               getMaxTrailerSize(), allowedTrailerHeaders, getMaxExtensionSize(),</span><br><span class=\"line\">               getMaxSwallowSize(), httpUpgradeProtocols, getSendReasonPhrase());</span><br><span class=\"line\">····················</span><br><span class=\"line\">processor.process(wrapper, status);</span><br></pre></td></tr></table></figure></p>\n<p>那么这个process就是Http11Processor的执行了，下面就是Http11Processor和CoyoteAdapter的转换。</p>\n<h4 id=\"Http11Processor到CoyoteAdapter到Container\"><a href=\"#Http11Processor到CoyoteAdapter到Container\" class=\"headerlink\" title=\"Http11Processor到CoyoteAdapter到Container\"></a>Http11Processor到CoyoteAdapter到Container</h4><p>上面的<code>processor.process(wrapper, status);</code>实际上是调用AbstractProcessorLight.process()————–&gt;内部有一个service()</p>\n<p>就又回到了Http11Processor重写的方法service()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public SocketState process(SocketWrapperBase&lt;?&gt; socketWrapper, SocketEvent status)</span><br><span class=\"line\">          throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      SocketState state = SocketState.CLOSED;</span><br><span class=\"line\">      Iterator&lt;DispatchType&gt; dispatches = null;</span><br><span class=\"line\">      do &#123;</span><br><span class=\"line\">                     // There may be pipe-lined data to read. If the data isn&apos;t</span><br><span class=\"line\">                  // processed now, execution will exit this loop and call</span><br><span class=\"line\">                  // release() which will recycle the processor (and input</span><br><span class=\"line\">                  // buffer) deleting any pipe-lined data. To avoid this,</span><br><span class=\"line\">                  // process it now.</span><br><span class=\"line\">                  state = service(socketWrapper);</span><br><span class=\"line\">        </span><br><span class=\"line\">      &#125; while (state == SocketState.ASYNC_END ||</span><br><span class=\"line\">              dispatches != null &amp;&amp; state != SocketState.CLOSED);</span><br><span class=\"line\"></span><br><span class=\"line\">      return state;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>Http11Processor.process()————–&gt;AbstractProcessorLight.process()<br> state = service(socketWrapper);———–&gt;Http11Processor.service()</p>\n<p>Http11Processor.service() :<br><code>import org.apache.coyote.Request;</code><br><code>getAdapter().service(request, response);</code></p>\n<p>getAdapter是在Connector.init()中给的就是下面这个CoyoteAdapter</p>\n<p>CoyoteAdapter.service()方法中有代码：<br>这里构造request，response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request = connector.createRequest();</span><br><span class=\"line\">request.setCoyoteRequest(req);</span><br><span class=\"line\">response = connector.createResponse();</span><br><span class=\"line\">response.setCoyoteResponse(res);</span><br><span class=\"line\">connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure>\n<p><code>org.apache.catalina.connector.Request</code>这个req.res都有了，然后就是找到具体的请求处理模块并返回。</p>\n<p>这样就找到了Container，实际上到这里已经完成了Connector到Container的转换。</p>\n<p><a href=\"http://naotu.baidu.com/file/3a08dd05ba3011c349941c95a4814be4?token=1ab842bbabc206c6\" target=\"_blank\" rel=\"noopener\">百度脑图Connector</a></p>\n<h2 id=\"Container内部进行责任链处理\"><a href=\"#Container内部进行责任链处理\" class=\"headerlink\" title=\"Container内部进行责任链处理\"></a>Container内部进行责任链处理</h2><h4 id=\"Engine-Host-Context-Wrapper\"><a href=\"#Engine-Host-Context-Wrapper\" class=\"headerlink\" title=\"Engine Host Context Wrapper\"></a>Engine Host Context Wrapper</h4><p>见下篇”Tomcat源码阅读之Container责任链”</p>\n<p>系列文章</p>\n<ul>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/\">Tomcat源码阅读之从server.xml看组件关系</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/\">Tomcat源码阅读之URL请求解析</a></li>\n<li><a href=\"https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/\">Tomcat源码阅读之Container责任链</a></li>\n</ul>\n<p>参看文献：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/yanlinwang/article/details/46382889\" target=\"_blank\" rel=\"noopener\">Poller</a></li>\n<li><a href=\"http://www.cnblogs.com/coldridgeValley/category/797239.html\" target=\"_blank\" rel=\"noopener\">随笔分类 - Tomcat</a></li>\n<li><a href=\"https://www.cnblogs.com/coldridgeValley/p/6606271.html\" target=\"_blank\" rel=\"noopener\">Tomcat中的设计模式</a></li>\n<li>《深入剖析Tomcat》</li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">Tomcat 系统架构与设计模式</a></li>\n<li><a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip\" target=\"_blank\" rel=\"noopener\">tomcat8.5.30源码</a></li>\n<li><a href=\"https://my.oschina.net/liughDevelop/blog/1790893#comment-list\" target=\"_blank\" rel=\"noopener\">手写一个简化版Tomcat</a></li>\n<li><a href=\"http://www.cnblogs.com/coldridgeValley/p/6252781.html\" target=\"_blank\" rel=\"noopener\">Tomcat对HTTP请求的处理(二)</a></li>\n<li><a href=\"https://blog.csdn.net/u011116672/article/details/50994038\" target=\"_blank\" rel=\"noopener\">请求流程</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"这个流程写的很详细\"><a href=\"#这个流程写的很详细\" class=\"headerlink\" title=\"这个流程写的很详细\"></a>这个流程写的很详细</h2><p>可参考这个博客的<a href=\"http://hill007299.iteye.com/blog/1757198\" target=\"_blank\" rel=\"noopener\">时序图</a></p>\n<h2 id=\"http-localhost-8080-examples-composite-jsp\"><a href=\"#http-localhost-8080-examples-composite-jsp\" class=\"headerlink\" title=\"http://localhost:8080/examples/composite.jsp\"></a><a href=\"http://localhost:8080/examples/composite.jsp\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/examples/composite.jsp</a></h2><ul>\n<li>在端口8080启动Server，并通知Service完成启动，Service通知Connector完成初始化和启动的过程</li>\n<li>Connector首先收到这个请求，会调用ProtocolHandler完成http协议的解析，然后交给SocketProcessor处理，解析请求头，通过ConnectionHandler，给到Http11Processor，再交给CoyoteAdapter解析请求行和请求体，并把解析信息封装到Request和Response对象中， 把请求（此时应该是Request对象，这里的Request对象已经封装了Http请求的信息）交给Container容器 </li>\n<li>Container容器交给其子容器——Engine容器，并等待Engine容器的处理结果 Engine容器匹配其所有的虚拟主机，这里匹配到Host</li>\n<li>请求被移交给hostname为localhost的Host容器，host匹配其所有子容器Context，这里找到contextPath为/examples的Context容器。如果匹配不到就把该请求交给路径名为”“的Context去处理</li>\n<li>请求再次被移交给Context容器，Context继续匹配其子容器Wrapper，由Wrapper容器加载composite.jsp对应的servlet，这里编译的servlet是basic_002dcomparisons_jsp.class文件</li>\n<li>Context容器根据后缀匹配原则*.jsp找到composite.jsp编译的java类的class文件</li>\n<li>Connector构建一个org.apache.catalina.connector.Request以及org.apache.catalina.connector.Response对象，使用反射调用Servelt的service方法</li>\n<li>Context容器把封装了响应消息的Response对象返回给Host容器</li>\n<li>容器把Response返回给Engine容器</li>\n<li>Engine容器返回给Connector</li>\n<li>Connetor容器把Response返回给浏览器</li>\n<li>浏览器解析Response报文</li>\n<li>显示资源内容</li>\n</ul>\n<p><img src=\"/.io//Connector.png\" alt=\"流程主要代码\"></p>\n<h2 id=\"Connector到Container\"><a href=\"#Connector到Container\" class=\"headerlink\" title=\"Connector到Container\"></a>Connector到Container</h2><p>Connector 中的init和start 都是对应service调用的参考上一篇<a href>Tomcat组件生命周期</a></p>\n<p>这里主要通过initInternal和startInternal来进行详细分析。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//代码段1</span><br><span class=\"line\">    protected String protocolHandlerClassName = &quot;org.apache.coyote.http11.Http11NioProtocol&quot;;</span><br><span class=\"line\">    public Connector(String protocol) &#123;</span><br><span class=\"line\">        setProtocol(protocol);</span><br><span class=\"line\">        // Instantiate protocol handler</span><br><span class=\"line\">        ProtocolHandler p = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class=\"line\">            p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            log.error(sm.getString(</span><br><span class=\"line\">                    &quot;coyoteConnector.protocolHandlerInstantiationFailed&quot;), e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            this.protocolHandler = p;//初始化的时候这里的protocolHandler是通过反射获取的Http11NioProtocol实例。</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (Globals.STRICT_SERVLET_COMPLIANCE) &#123;</span><br><span class=\"line\">            uriCharset = StandardCharsets.ISO_8859_1;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            uriCharset = StandardCharsets.UTF_8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void initInternal() throws LifecycleException &#123;</span><br><span class=\"line\">        super.initInternal();</span><br><span class=\"line\">        </span><br><span class=\"line\">        // Initialize adapter</span><br><span class=\"line\">        adapter = new CoyoteAdapter(this);</span><br><span class=\"line\">        protocolHandler.setAdapter(adapter);//protocolHandler到CoyoteAdapter的关联关系</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            protocolHandler.init();//AbstractProtocol.init(),这里会调用到endpoint.bind()</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new LifecycleException(</span><br><span class=\"line\">                    sm.getString(&quot;coyoteConnector.protocolHandlerInitializationFailed&quot;), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Begin processing requests via this Connector.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @exception LifecycleException if a fatal startup error occurs</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void startInternal() throws LifecycleException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Validate settings before starting</span><br><span class=\"line\">        if (getPort() &lt; 0) &#123;</span><br><span class=\"line\">            throw new LifecycleException(sm.getString(</span><br><span class=\"line\">                    &quot;coyoteConnector.invalidPort&quot;, Integer.valueOf(getPort())));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setState(LifecycleState.STARTING);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            protocolHandler.start();//AbstractProtocol.start(),这里会调用到endpoint.start()</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new LifecycleException(</span><br><span class=\"line\">                    sm.getString(&quot;coyoteConnector.protocolHandlerStartFailed&quot;), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Connector中主要确定要哪一个协议来处理请求，最后又交回到CoyoteAdapter中。</p>\n<h4 id=\"AbstractProtocol\"><a href=\"#AbstractProtocol\" class=\"headerlink\" title=\"AbstractProtocol\"></a>AbstractProtocol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public void init() throws Exception &#123;</span><br><span class=\"line\">       if (getLog().isInfoEnabled()) &#123;</span><br><span class=\"line\">           getLog().info(sm.getString(&quot;abstractProtocolHandler.init&quot;, getName()));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (oname == null) &#123;</span><br><span class=\"line\">           // Component not pre-registered so register it</span><br><span class=\"line\">           oname = createObjectName();</span><br><span class=\"line\">           if (oname != null) &#123;</span><br><span class=\"line\">               Registry.getRegistry(null, null).registerComponent(this, oname, null);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (this.domain != null) &#123;</span><br><span class=\"line\">           rgOname = new ObjectName(domain + &quot;:type=GlobalRequestProcessor,name=&quot; + getName());</span><br><span class=\"line\">           Registry.getRegistry(null, null).registerComponent(</span><br><span class=\"line\">                   getHandler().getGlobal(), rgOname, null);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       String endpointName = getName();</span><br><span class=\"line\">       endpoint.setName(endpointName.substring(1, endpointName.length()-1));</span><br><span class=\"line\">       endpoint.setDomain(domain);</span><br><span class=\"line\"></span><br><span class=\"line\">       endpoint.init();//这里在初始化Http11NioProtocol的时候有一个实例化NioEndpoint，这个就是endpoint</span><br><span class=\"line\">       ···················</span><br><span class=\"line\">       Http11NioProtocol 的构造方法</span><br><span class=\"line\">        public Http11NioProtocol() &#123;</span><br><span class=\"line\">       super(new NioEndpoint());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       ····················</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public void start() throws Exception &#123;</span><br><span class=\"line\">       if (getLog().isInfoEnabled()) &#123;</span><br><span class=\"line\">           getLog().info(sm.getString(&quot;abstractProtocolHandler.start&quot;, getName()));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       endpoint.start();</span><br><span class=\"line\"></span><br><span class=\"line\">       // Start async timeout thread</span><br><span class=\"line\">       asyncTimeout = new AsyncTimeout();</span><br><span class=\"line\">       Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + &quot;-AsyncTimeout&quot;);</span><br><span class=\"line\">       int priority = endpoint.getThreadPriority();</span><br><span class=\"line\">       if (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class=\"line\">           priority = Thread.NORM_PRIORITY;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       timeoutThread.setPriority(priority);</span><br><span class=\"line\">       timeoutThread.setDaemon(true);</span><br><span class=\"line\">       timeoutThread.start();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>此步骤已经从Connector转到了AbstractProtocol协议处理内部，然后找NioEndpoint</p>\n<p>需要注意在Connector找AbstractProtocol的时候，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public AbstractHttp11Protocol(AbstractEndpoint&lt;S&gt; endpoint) &#123;</span><br><span class=\"line\">    super(endpoint);</span><br><span class=\"line\">    setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class=\"line\">    ConnectionHandler&lt;S&gt; cHandler = new ConnectionHandler&lt;&gt;(this);</span><br><span class=\"line\">    setHandler(cHandler);</span><br><span class=\"line\">    getEndpoint().setHandler(cHandler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里在AbstractHttp11Protocol构造函数中设置了NioEndpoint的handler，就是AbstractProtocol中的ConnectionHandler，因此在Protocol处理完后给ConnectionHandler，然后通过getHandler调用process(),</p>\n<h4 id=\"AbstractEndpoint-和NioEndpoint\"><a href=\"#AbstractEndpoint-和NioEndpoint\" class=\"headerlink\" title=\"AbstractEndpoint 和NioEndpoint\"></a>AbstractEndpoint 和NioEndpoint</h4><p>首先是抽象类AbstractEndpoint中的init和start，会bind()和start()一下，这才会到NioEndpoint进行处理</p>\n<p>AbstractEndpoint</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void init() throws Exception &#123;</span><br><span class=\"line\">    if (bindOnInit) &#123;</span><br><span class=\"line\">        bind();</span><br><span class=\"line\">        bindState = BindState.BOUND_ON_INIT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.domain != null) &#123;</span><br><span class=\"line\">        // Register endpoint (as ThreadPool - historical name)</span><br><span class=\"line\">        oname = new ObjectName(domain + &quot;:type=ThreadPool,name=\\&quot;&quot; + getName() + &quot;\\&quot;&quot;);</span><br><span class=\"line\">        Registry.getRegistry(null, null).registerComponent(this, oname, null);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (SSLHostConfig sslHostConfig : findSslHostConfigs()) &#123;</span><br><span class=\"line\">            registerJmx(sslHostConfig);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public final void start() throws Exception &#123;</span><br><span class=\"line\">    if (bindState == BindState.UNBOUND) &#123;</span><br><span class=\"line\">        bind();</span><br><span class=\"line\">        bindState = BindState.BOUND_ON_START;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startInternal();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public abstract void bind() throws Exception;</span><br><span class=\"line\">public abstract void startInternal() throws Exception;</span><br></pre></td></tr></table></figure>\n<p>NioEndpoint</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public void bind() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSock = ServerSocketChannel.open();</span><br><span class=\"line\">        socketProperties.setProperties(serverSock.socket());</span><br><span class=\"line\">        InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));</span><br><span class=\"line\">        serverSock.socket().bind(addr,getAcceptCount());</span><br><span class=\"line\">        serverSock.configureBlocking(true); //mimic APR behavior</span><br><span class=\"line\"></span><br><span class=\"line\">        selectorPool.open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void startInternal() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!running) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">         // Start poller threads 这里启动了并一直在空转看内部的run()方法有一个while(true)</span><br><span class=\"line\">            pollers = new Poller[getPollerThreadCount()];</span><br><span class=\"line\">            for (int i=0; i&lt;pollers.length; i++) &#123;</span><br><span class=\"line\">                pollers[i] = new Poller();</span><br><span class=\"line\">                Thread pollerThread = new Thread(pollers[i], getName() + &quot;-ClientPoller-&quot;+i);</span><br><span class=\"line\">                pollerThread.setPriority(threadPriority);</span><br><span class=\"line\">                pollerThread.setDaemon(true);</span><br><span class=\"line\">                pollerThread.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            startAcceptorThreads();//调用到AbstractEndpoint然后new Acceptor(),并start()</span><br><span class=\"line\">            ···············</span><br><span class=\"line\">             Acceptor.run()方法</span><br><span class=\"line\">             </span><br><span class=\"line\">               // Accept the next incoming connection from the server</span><br><span class=\"line\">             socket = serverSock.accept();这里阻塞了，等待请求</span><br><span class=\"line\">             setSocketOptions();// getPoller0().register(channel);</span><br><span class=\"line\">            ················</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Acceptor的作用是控制与tomcat建立连接的数量，但Acceptor只负责建立连接。socket内容的读写是通过Poller来实现的。</p>\n<p>setSocketOptions()是关键关联点</p>\n<h4 id=\"NioEndpoint到SocketProcessor到ConnectionHandler\"><a href=\"#NioEndpoint到SocketProcessor到ConnectionHandler\" class=\"headerlink\" title=\"NioEndpoint到SocketProcessor到ConnectionHandler\"></a>NioEndpoint到SocketProcessor到ConnectionHandler</h4><p>这里应该是使用了一个注册监听。</p>\n<p>Poller 和事件类PollerEvent<br>Poller 是在startInternal就启动了<code>pollerThread.start();</code><br>先把channel注册到Poller并添加addEvent(),对应一个PollerEvent，然后每次Poller在run()的时候，就会events()[PollerEvent.run()],如果有事件，就会返回true，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Poller implements Runnable &#123;</span><br><span class=\"line\">    public boolean events() &#123;</span><br><span class=\"line\">        boolean result = false;</span><br><span class=\"line\">        //events.poll()看event里面还有没有事件</span><br><span class=\"line\">        PollerEvent pe = null;</span><br><span class=\"line\">        for (int i = 0, size = events.size(); i &lt; size &amp;&amp; (pe = events.poll()) != null; i++ ) &#123;</span><br><span class=\"line\">            result = true;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                pe.run();</span><br><span class=\"line\">                pe.reset();</span><br><span class=\"line\">                if (running &amp;&amp; !paused) &#123;</span><br><span class=\"line\">                    eventCache.push(pe);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch ( Throwable x ) &#123;</span><br><span class=\"line\">                log.error(&quot;&quot;,x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void register(final NioChannel socket) &#123;</span><br><span class=\"line\">        PollerEvent r = eventCache.pop();</span><br><span class=\"line\">        addEvent(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">            // Loop until destroy() is called</span><br><span class=\"line\">            while (true) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                boolean hasEvents = false;</span><br><span class=\"line\"></span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (!close) &#123;</span><br><span class=\"line\">                        hasEvents = events();</span><br><span class=\"line\">                        if (wakeupCounter.getAndSet(-1) &gt; 0) &#123;</span><br><span class=\"line\">                            //if we are here, means we have other stuff to do</span><br><span class=\"line\">                            //do a non blocking select</span><br><span class=\"line\">                            keyCount = selector.selectNow();</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            keyCount = selector.select(selectorTimeout);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        wakeupCounter.set(0);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (close) &#123;</span><br><span class=\"line\">                        events();</span><br><span class=\"line\">                        timeout(0, false);</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            selector.close();</span><br><span class=\"line\">                        &#125; catch (IOException ioe) &#123;</span><br><span class=\"line\">                            log.error(sm.getString(&quot;endpoint.nio.selectorCloseFail&quot;), ioe);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; catch (Throwable x) &#123;</span><br><span class=\"line\">                    ExceptionUtils.handleThrowable(x);</span><br><span class=\"line\">                    log.error(&quot;&quot;,x);</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //either we timed out or we woke up, process events first</span><br><span class=\"line\">                if ( keyCount == 0 ) hasEvents = (hasEvents | events());</span><br><span class=\"line\"></span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; iterator =</span><br><span class=\"line\">                    keyCount &gt; 0 ? selector.selectedKeys().iterator() : null;</span><br><span class=\"line\">                // Walk through the collection of ready keys and dispatch</span><br><span class=\"line\">                // any active event.</span><br><span class=\"line\">                while (iterator != null &amp;&amp; iterator.hasNext()) &#123;</span><br><span class=\"line\">                    SelectionKey sk = iterator.next();</span><br><span class=\"line\">                    NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();</span><br><span class=\"line\">                    // Attachment may be null if another thread has called</span><br><span class=\"line\">                    // cancelledKey()</span><br><span class=\"line\">                    if (attachment == null) &#123;</span><br><span class=\"line\">                        iterator.remove();</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        iterator.remove();</span><br><span class=\"line\">                        //这样就到了继续处理的时候</span><br><span class=\"line\">                        processKey(sk, attachment);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;//while</span><br><span class=\"line\"></span><br><span class=\"line\">                //process timeouts</span><br><span class=\"line\">                timeout(keyCount,hasEvents);</span><br><span class=\"line\">            &#125;//while</span><br><span class=\"line\"></span><br><span class=\"line\">            getStopLatch().countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">PollerEvent implements Runnable &#123;</span><br><span class=\"line\">     public void run() &#123;</span><br><span class=\"line\">           socket.getIOChannel().register(</span><br><span class=\"line\">                            socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Poller只要执行run()之后，就会依次按照下面这个步骤：</p>\n<ul>\n<li><code>processKey(sk, attachment);</code><ul>\n<li><code>processSendfile(sk,attachment, false);</code></li>\n</ul>\n</li>\n<li><code>processSocket(socketWrapper, SocketEvent.OPEN_READ, true)</code></li>\n<li>找到AbstractEndpoint.processSocket()</li>\n<li><code>sc = createSocketProcessor(socketWrapper, event); sc.run();</code></li>\n<li>NioEndpoint.createSocketProcessor()内部<code>new SocketProcessor(socketWrapper, event);</code></li>\n<li><code>state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected SocketProcessorBase&lt;NioChannel&gt; createSocketProcessor(</span><br><span class=\"line\">        SocketWrapperBase&lt;NioChannel&gt; socketWrapper, SocketEvent event) &#123;</span><br><span class=\"line\">    return new SocketProcessor(socketWrapper, event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到SocketProcessor后，getHandler()就能用ConnectionHandler进而到Http11Processor处理(AbstractHttp11Protocol的构造函数定义的handler)</p>\n<h4 id=\"ConnectionHandler到Http11Processor\"><a href=\"#ConnectionHandler到Http11Processor\" class=\"headerlink\" title=\"ConnectionHandler到Http11Processor\"></a>ConnectionHandler到Http11Processor</h4><p>NioEndpoint调用processSocket()方法，最终还是执行SocketProcessor.doRun();这个doRun中就使用了getHandler().process(socketWrapper);此处的handler是上文中AbstractHttp11Protocol构造函数中设置的ConnectionHandler（内部类AbstractProtocol），这个类中就把SocketProcessor和Http11Processor 关联起来l，也正如这个名字所示ConnectionHandler.</p>\n<p>AbstractProtocol.ConnectionHandler.process()方法内部<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processor = getProtocol().createProcessor();</span><br><span class=\"line\">···················</span><br><span class=\"line\"> AbstractHttp11Protocol.createProcessor();这就是上一行的创建这个处理就是Http11Processor。</span><br><span class=\"line\"> Http11Processor processor = new Http11Processor(getMaxHttpHeaderSize(),</span><br><span class=\"line\">               getAllowHostHeaderMismatch(), getRejectIllegalHeaderName(), getEndpoint(),</span><br><span class=\"line\">               getMaxTrailerSize(), allowedTrailerHeaders, getMaxExtensionSize(),</span><br><span class=\"line\">               getMaxSwallowSize(), httpUpgradeProtocols, getSendReasonPhrase());</span><br><span class=\"line\">····················</span><br><span class=\"line\">processor.process(wrapper, status);</span><br></pre></td></tr></table></figure></p>\n<p>那么这个process就是Http11Processor的执行了，下面就是Http11Processor和CoyoteAdapter的转换。</p>\n<h4 id=\"Http11Processor到CoyoteAdapter到Container\"><a href=\"#Http11Processor到CoyoteAdapter到Container\" class=\"headerlink\" title=\"Http11Processor到CoyoteAdapter到Container\"></a>Http11Processor到CoyoteAdapter到Container</h4><p>上面的<code>processor.process(wrapper, status);</code>实际上是调用AbstractProcessorLight.process()————–&gt;内部有一个service()</p>\n<p>就又回到了Http11Processor重写的方法service()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public SocketState process(SocketWrapperBase&lt;?&gt; socketWrapper, SocketEvent status)</span><br><span class=\"line\">          throws IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      SocketState state = SocketState.CLOSED;</span><br><span class=\"line\">      Iterator&lt;DispatchType&gt; dispatches = null;</span><br><span class=\"line\">      do &#123;</span><br><span class=\"line\">                     // There may be pipe-lined data to read. If the data isn&apos;t</span><br><span class=\"line\">                  // processed now, execution will exit this loop and call</span><br><span class=\"line\">                  // release() which will recycle the processor (and input</span><br><span class=\"line\">                  // buffer) deleting any pipe-lined data. To avoid this,</span><br><span class=\"line\">                  // process it now.</span><br><span class=\"line\">                  state = service(socketWrapper);</span><br><span class=\"line\">        </span><br><span class=\"line\">      &#125; while (state == SocketState.ASYNC_END ||</span><br><span class=\"line\">              dispatches != null &amp;&amp; state != SocketState.CLOSED);</span><br><span class=\"line\"></span><br><span class=\"line\">      return state;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>Http11Processor.process()————–&gt;AbstractProcessorLight.process()<br> state = service(socketWrapper);———–&gt;Http11Processor.service()</p>\n<p>Http11Processor.service() :<br><code>import org.apache.coyote.Request;</code><br><code>getAdapter().service(request, response);</code></p>\n<p>getAdapter是在Connector.init()中给的就是下面这个CoyoteAdapter</p>\n<p>CoyoteAdapter.service()方法中有代码：<br>这里构造request，response</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request = connector.createRequest();</span><br><span class=\"line\">request.setCoyoteRequest(req);</span><br><span class=\"line\">response = connector.createResponse();</span><br><span class=\"line\">response.setCoyoteResponse(res);</span><br><span class=\"line\">connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure>\n<p><code>org.apache.catalina.connector.Request</code>这个req.res都有了，然后就是找到具体的请求处理模块并返回。</p>\n<p>这样就找到了Container，实际上到这里已经完成了Connector到Container的转换。</p>\n<p><a href=\"http://naotu.baidu.com/file/3a08dd05ba3011c349941c95a4814be4?token=1ab842bbabc206c6\" target=\"_blank\" rel=\"noopener\">百度脑图Connector</a></p>\n<h2 id=\"Container内部进行责任链处理\"><a href=\"#Container内部进行责任链处理\" class=\"headerlink\" title=\"Container内部进行责任链处理\"></a>Container内部进行责任链处理</h2><h4 id=\"Engine-Host-Context-Wrapper\"><a href=\"#Engine-Host-Context-Wrapper\" class=\"headerlink\" title=\"Engine Host Context Wrapper\"></a>Engine Host Context Wrapper</h4><p>见下篇”Tomcat源码阅读之Container责任链”</p>\n<p>系列文章</p>\n<ul>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/\">Tomcat源码阅读之从server.xml看组件关系</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/\">Tomcat源码阅读之组件生命周期</a></li>\n<li><a href=\"http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/\">Tomcat源码阅读之URL请求解析</a></li>\n<li><a href=\"https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/\">Tomcat源码阅读之Container责任链</a></li>\n</ul>\n<p>参看文献：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/yanlinwang/article/details/46382889\" target=\"_blank\" rel=\"noopener\">Poller</a></li>\n<li><a href=\"http://www.cnblogs.com/coldridgeValley/category/797239.html\" target=\"_blank\" rel=\"noopener\">随笔分类 - Tomcat</a></li>\n<li><a href=\"https://www.cnblogs.com/coldridgeValley/p/6606271.html\" target=\"_blank\" rel=\"noopener\">Tomcat中的设计模式</a></li>\n<li>《深入剖析Tomcat》</li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">Tomcat 系统架构与设计模式</a></li>\n<li><a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip\" target=\"_blank\" rel=\"noopener\">tomcat8.5.30源码</a></li>\n<li><a href=\"https://my.oschina.net/liughDevelop/blog/1790893#comment-list\" target=\"_blank\" rel=\"noopener\">手写一个简化版Tomcat</a></li>\n<li><a href=\"http://www.cnblogs.com/coldridgeValley/p/6252781.html\" target=\"_blank\" rel=\"noopener\">Tomcat对HTTP请求的处理(二)</a></li>\n<li><a href=\"https://blog.csdn.net/u011116672/article/details/50994038\" target=\"_blank\" rel=\"noopener\">请求流程</a></li>\n</ul>\n"},{"title":"java 常用代码","date":"2018-09-19T19:24:23.000Z","description":"java常用代码汇总，读取配置文件，日期，接口调用，是否为空，","_content":"\n## 读取配置文件\n\n#### configuration2读取配置文件\n\n```\n\nimport org.apache.commons.configuration2.Configuration;\nimport org.apache.commons.configuration2.FileBasedConfiguration;\nimport org.apache.commons.configuration2.PropertiesConfiguration;\nimport org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder;\nimport org.apache.commons.configuration2.builder.fluent.Parameters;\nimport org.apache.commons.configuration2.ex.ConfigurationException;\n\npublic static String getInclude() throws ConfigurationException {\n\tReloadingFileBasedConfigurationBuilder<FileBasedConfiguration> \n\t    include = new ReloadingFileBasedConfigurationBuilder<FileBasedConfiguration>(PropertiesConfiguration.class)\n\t\t.configure(new Parameters().properties().setEncoding(\"utf-8\").setFileName(\"include.properties\"));\n\tConfiguration config = (Configuration)include.getConfiguration();\n\tString source = config.getString(\"ips\");\n\treturn source;\n}\n\n```\n#### static读取配置文件\n\n```\n    public static Properties properties=new Properties();\n    public static String DEFAULT_FILENAME=\"default.properties\";\n    加载配置文件\nstatic {\n    // 1. load library defaults\n    InputStream in = demo.class.getResourceAsStream(DEFAULT_FILENAME);//类名.class\n\n    if (in == null) {\n        throw new RuntimeException(DEFAULT_FILENAME + \" not found\");\n    } else {\n    if (!(in instanceof BufferedInputStream))\n        in = new BufferedInputStream(in);\n        try {\n        properties.load(in);\n        in.close();\n        } catch (Exception e) {\n        throw new RuntimeException(\"Error while processing \"\n        + DEFAULT_FILENAME, e);\n        }\n    }\n\n}\n\n    /**\n    * 获取prop值\n    * @param key 输入的参数\n    * @return 返回value\n    */\n    public static String getProperty(final String key) {\n    return properties.getProperty(key);\n    }\n\n```\n\n\n##  MD5加密\n\n```\nimport org.apache.commons.codec.digest.DigestUtils;\npublic static String getUserToken(String account) {\n    String md5 = \"\";\n\tmd5 = DigestUtils.md5Hex(account+\"0.0.0.0\"+new Date());\n\tSystem.out.println(md5);\n\treturn md5;\n}\n\n```\n\n## 获取request所有参数，和Enumeration循环\n\n```\n\tpublic Map<String, String> getReqParams(HttpServletRequest request){\n\t\tEnumeration<String>  params = \trequest.getParameterNames();\n\t  \tMap<String, String> reqparams = new HashMap<String, String>();\n\t  \twhile(params.hasMoreElements()){\n\t            String value = (String)params.nextElement();//调用nextElement方法获得元素\n\t            reqparams.put(value, request.getParameter(value));\n\t    }\n\t  \treturn reqparams;\n\t}\n\n\t/*\n\t*\n\t*通过request获取参数\n\t*/\n\tpublic StringBuffer getParams(HttpServletRequest request){\n        Enumeration paramMap= request.getParameterNames();\n        StringBuffer sb = new StringBuffer();\n        while(paramMap.hasMoreElements()){\n            String key = (String) paramMap.nextElement();\n            sb.append(key).append(\"=\").append(request.getParameter(key).toString()).append(\"&\");\n        }\n        return sb;\n    }\n```\n\n####  get 获取文件内容并下载，变为byte[]，out输出  \n```\n\n  public static InputStream getInputStreamByUrl(String strUrl){\n        HttpURLConnection conn = null;\n        try {\n            URL url = new URL(strUrl);\n            conn = (HttpURLConnection)url.openConnection();\n            conn.setRequestMethod(\"GET\");\n            conn.setConnectTimeout(20 * 1000);\n            final ByteArrayOutputStream output = new ByteArrayOutputStream();\n            IOUtils.copy(conn.getInputStream(),output);\n            return  new ByteArrayInputStream(output.toByteArray());\n        } catch (Exception e) {\n            try{\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            }catch (Exception e1){\n            }\n        }\n        return null;\n    }\n    public  byte[] readBytes(InputStream in) throws IOException {  \n        BufferedInputStream bufin = new BufferedInputStream(in);  \n        int buffSize = 1024;  \n        ByteArrayOutputStream out = new ByteArrayOutputStream(buffSize);  \n  \n        // System.out.println(\"Available bytes:\" + in.available());  \n  \n        byte[] temp = new byte[buffSize];  \n        int size = 0;  \n        while ((size = bufin.read(temp)) != -1) {  \n            out.write(temp, 0, size);  \n        }  \n        bufin.close();  \n        in.close();  \n        byte[] content = out.toByteArray();  \n        out.close();  \n        return content;  \n    }\n\n```\n然后输出到页面,commons-io-2.6.jar\n\n```\nimport org.apache.commons.io.IOUtils;\n\n\tresponse.setCharacterEncoding(\"UTF-8\");\n\tresponse.setContentType(\"application/octet-stream\");\n\tresponse.setHeader(\"charset\", \"utf-8\");\n\t\n\tTools tools = new Tools();\n\tStringBuffer sb  = tools.getParams(request);\n\tString fileId = request.getParameter(\"fileId\");\n\tString fileName = request.getParameter(\"fileName\");\n\tString url = \"\";\n\t\n\tfileName = new String(URLDecoder.decode(fileName, \"UTF-8\").getBytes(\"UTF-8\"), \"ISO8859-1\");\n\tresponse.addHeader(\"Content-Disposition\", \"attachment;filename=\\\"\" + fileName + \"\\\";filename*=UTF-8''\" + fileName);\n\n\tInputStream inp = tools.getInputStreamByUrl(url);\n\tbyte[] bytes = tools.readBytes(inp);\n\tIOUtils.write(bytes, response.getOutputStream());\n\tresponse.flushBuffer();\n\tout.clear();\n\tout = pageContext.pushBody();\n```\n\n#### 下载文件。乱码等处理\ncommons-io-2.6.jar\n```\n\nimport org.apache.commons.io.IOUtils;\n\n      //修复IE下载 文件名乱码\n    String userAgent = req.getHeader(\"user-agent\").toLowerCase();  \n      if (userAgent.contains(\"msie\") || userAgent.contains(\"like gecko\") ) {  \n        // win10 ie edge 浏览器 和其他系统的ie  \n        excelName = URLEncoder.encode(excelName, \"UTF-8\");  \n    } else {  \n        // fe  \n      excelName = new String(excelName.getBytes(\"UTF-8\"), \"iso-8859-1\");  \n    }\n      \n    rsp.setContentType(\"Application/Octet-Stream\");\n    PopSalaryService service = FORP.SPRING_CONTEXT.getBean(PopSalaryService.class);\n    String filename = req.getServletContext().getRealPath(\"/disk-file/excel-template/pre-modeltemplate.xls\");\n    byte[] data = service.getFileByteArray(filename);\n    rsp.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + excelName + \"\\\"\");\n    IOUtils.write(data, rsp.getOutputStream());\n\treturn null;\n\n```\n#### 存数据库乱码变成问号,全角问题\n\n```\n\n\t    byte[] space = new byte[]{(byte) 0xc2,(byte) 0xa0};\n        String UTFSpace =new String( space,\"UTF-8\" );\n        String  result=attachment.getOriginalFilename().replaceAll(UTFSpace, \" \");\n\n```\n#### Map循环,获取request参数\n\n```\n\n    HashMap<String, Object> map = (HashMap<String, Object>)obj;\n\t\tIterator<String> keys = map.keySet().iterator();\n\t\twhile(keys.hasNext()){\n\t\t\tString k = keys.next();\n\t\t\tif(k.equals(key))\n\t\t\t{\n\t\t\t\treturn map.get(k);\n\t\t\t}\n\t\t}\n\n```\n#### 24位编码\n```\n /**\n\t  * 24位编码： 17日期+6随机数+\"N\"\n\t  * @return\n\t  */\n\t\tpublic static String getModelCode() {\n\t\t\tString ret = DateFormatUtils.format(new Date(), \"yyyyMMddHHmmssSSS\")+(int)((Math.random()*9+1)*100000)+\"N\";\n\t\t\treturn ret;\n\t\t}\n\n```\n\n#### 生成密码并验证，使用了正则，\n\n正则， 包含大小写字母和数字，可以包含特殊字符 ，10位\n\n\n```\n\tpublic static void main(String[] args) {\n\t\tUserService service = new UserService();\n//\t\tString pattern = \"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\S]{8,16}$/\";\n//\t    boolean isMatch = Pattern.matches(pattern, pass);\n\t\tPattern pattern = Pattern.compile(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[\\\\S]{8,16}$\"); \n\t    String pass = service.createPassWord(10);\n\t    Matcher matcher = pattern.matcher(pass); \n\t    boolean isMatch =   matcher.matches();\n//\t\tSystem.out.println(pass+\":\"+isMatch+\":\"+service.getDigPwd(\"MuWajayC1G\"));\n\t}\n\n\t//生成密码\n\tprivate String generatePwd(){\n        String pass = createPassWord(10);\n\t\tPattern pattern = Pattern.compile(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[\\\\S]{8,16}$\"); \n\t\tMatcher matcher = pattern.matcher(pass); \n\t    boolean isMatch =   matcher.matches();\n\n\t      if(isMatch){\n\t\t\t\treturn pass;\n\t\t  }else{\n\t\t\t  return generatePwd();\n\t\t  }\n\t}\n\t// 加密Password\n\tprivate String getDigPwd(String pwd){\n\t\treturn DigestUtils.md5Hex(FORP.MD5_SALT_PREFIX + pwd);\n\t}\n\tprivate String createPassWord(int len){\n\t    int random = this.createRandomInt();\n\t    return this.createPassWord(random, len);\n\t}\n\tprivate String createPassWord(int random,int len){\n\t    Random rd = new Random(random);\n\t    final int maxNum = 62;\n\t    StringBuffer sb = new StringBuffer();\n\t    int rdGet;//取得随机数\n\t    char[] str = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\n\t        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\n\t        'x', 'y', 'z', 'A','B','C','D','E','F','G','H','I','J','K',\n\t        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\n\t        'X', 'Y' ,'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };\n\t    int count=0;\n\t    while(count < len){\n\t      rdGet = Math.abs(rd.nextInt(maxNum));//生成的数最大为62-1\n\t      if (rdGet >= 0 && rdGet < str.length) {\n\t        sb.append(str[rdGet]);\n\t        count ++;\n\t      }\n\t    }\n\t    return sb.toString();\n\t  }\n\t  private int createRandomInt(){\n\t    //得到0.0到1.0之间的数字，并扩大100000倍\n\t    double temp = Math.random()*100000;\n\t    //如果数据等于100000，则减少1\n\t    if(temp>=100000){\n\t      temp = 99999;\n\t    }\n\t    int tempint = (int)Math.ceil(temp);\n\t    return tempint;\n\t  }\n\n```\n\n## 判断对象为空 判断对象不为空\n\n```\n\n/**\n\t * 判断对象为空\n\t * \n\t * @param obj\n\t * @return\n\t */\n\tpublic static boolean isEmpty(Object obj) {\n\t\tif (obj == null)\n\t\t\treturn true;\n\n\t\tif (obj instanceof CharSequence)\n\t\t\treturn ((CharSequence) obj).length() == 0;\n\n\t\tif (obj instanceof Collection)\n\t\t\treturn ((Collection) obj).isEmpty();\n\n\t\tif (obj instanceof Map)\n\t\t\treturn ((Map) obj).isEmpty();\n\n\t\tif (obj instanceof String)\n\t\t\treturn \"\".equals(obj);\n\n\t\tif (obj instanceof Object[]) {\n\t\t\tObject[] object = (Object[]) obj;\n\t\t\tif (object.length == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tboolean empty = true;\n\t\t\tfor (int i = 0; i < object.length; i++) {\n\t\t\t\tif (!isEmpty(object[i])) {\n\t\t\t\t\tempty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn empty;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * 判断对象不为空\n\t * \n\t * @param obj\n\t * @return\n\t */\n\tpublic static boolean isNotEmpty(Object obj) {\n\t\treturn !isEmpty(obj);\n\t}\n\t\n```\n#### Arrays 工具\n\n```\nString[] arr ={\"1\",\"aaa2\",\"3aaa\",\"asds4\"};\nString arrString = Arrays.toString(arr);\nSystem.out.println(arrString);\n\n```\n## JSON 相关\n\n\n```\nFastJson \n按顺序\nMap<String, Object> itemMap = JSONObject.parseObject(exportFiled, LinkedHashMap.class);\n\n```\n## 日期相关\n\n#### 计算两个日期相差天数  xx天 xx天xx时xx分xx秒\n\n```\npublic  String getDatePoor(Date beginDate, Date endDate) {\n\t\t \n\t    long nd = 1000 * 24 * 60 * 60;\n\t    long nh = 1000 * 60 * 60;\n\t    long nm = 1000 * 60;\n\t     long ns = 1000;\n\t    // 获得两个时间的毫秒时间差异\n\t    long diff = endDate.getTime() - beginDate.getTime();\n\t    // 计算差多少天\n\t    long day = diff / nd;\n\t    // 计算差多少小时\n\t    long hour = diff % nd / nh;\n\t    // 计算差多少分钟\n\t    long min = diff % nd % nh / nm;\n\t    // 计算差多少秒//输出结果\n\t     long sec = diff % nd % nh % nm / ns;\n\t    return day + \"天\" + hour + \"小时\" + min + \"分\" + sec + \"秒\";\n\t}\n```\n#### \n\n```\n/**\n\t * 计算两个日期之间相差的天数\n\t * \n\t * @param smdate 较小的时间\n\t * @param bdate 较大的时间\n\t * @return 相差天数\n\t * @throws ParseException\n\t */\n\tpublic static int daysBetween(Date smdate, Date bdate) throws ParseException {\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tsmdate = sdf.parse(sdf.format(smdate));\n\t\tbdate = sdf.parse(sdf.format(bdate));\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.setTime(smdate);\n\t\tlong time1 = cal.getTimeInMillis();\n\t\tcal.setTime(bdate);\n\t\tlong time2 = cal.getTimeInMillis();\n\t\tlong between_days = (time2 - time1) / (1000 * 3600 * 24);\n\t\treturn Integer.parseInt(String.valueOf(between_days));\n\t}\n\n```\n\n####  string2Date\n\n```\n\n/**\n\t * 字符串转日期\n\t * \n\t * @param strDate 字符串日期\n\t * @param pattern 日期格式\n\t * @return\n\t * @throws ParseException\n\t */\n\tpublic static Date string2Date(String strDate, String pattern) throws ParseException {\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(pattern);\n\t\tDate date = sdf.parse(strDate);\n\t\treturn date;\n\t}\n```\n#### date2String\n\n```\n\t/**\n\t * 日期转字符串\n\t * \n\t * @param date\n\t * @return\n\t * @throws ParseException\n\t */\n\n\tpublic static String date2String(Date date, String pattern) throws ParseException {\n\t\tSimpleDateFormat formatter = new SimpleDateFormat(pattern);\n\t\treturn formatter.format(date);\n\t}\n\n```\n#### getFirstDayOfMonth 获取指定年月的第一天\n\n```\n\t/**\n     * 获取指定年月的第一天\n     * @param year\n     * @param month\n     * @return\n     */\n    public static String getFirstDayOfMonth(int year, int month) {     \n        Calendar cal = Calendar.getInstance();   \n        //设置年份\n        cal.set(Calendar.YEAR, year);\n        //设置月份 \n        cal.set(Calendar.MONTH, month-1); \n        //获取某月最小天数\n        int firstDay = cal.getMinimum(Calendar.DATE);\n        //设置日历中月份的最小天数 \n        cal.set(Calendar.DAY_OF_MONTH,firstDay);  \n        //格式化日期\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        return sdf.format(cal.getTime());  \n    }\n    public  String getLastDayOfMonth1(String yearmonth) { \n  \t  int year = Integer.parseInt(yearmonth.split(\"-\")[0]);\n  \t  int month =  Integer.parseInt(yearmonth.split(\"-\")[1]);\n  \t  return getLastDayOfMonth1(year,month);\n  \t}\n```\n#### getLastDayOfMonth 获取指定年月的最后一天\n\n```\n\t/**\n     * 获取指定年月的最后一天\n     * @param year\n     * @param month\n     * @return\n     */\n     public  String getLastDayOfMonth1(int year, int month) {     \n         Calendar cal = Calendar.getInstance();     \n         //设置年份  \n         cal.set(Calendar.YEAR, year);  \n         //设置月份  \n         cal.set(Calendar.MONTH, month-1); \n         //获取某月最大天数\n         int lastDay = cal.getActualMaximum(Calendar.DATE);\n         //设置日历中月份的最大天数  \n         cal.set(Calendar.DAY_OF_MONTH, lastDay);  \n         //格式化日期\n         SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");  \n         return sdf.format(cal.getTime());\n     }\n\n```\n\n\n## 接口方面\n\n#### webservice\n\n```\n\npublic static String postMethod(String url,String method,Object[] param){\n           Service s = new  Service();\n           String val =null;\n           Call call;\n\t\t\ttry {\n\t\t\t\tcall = (Call) s.createCall();\n\t\t\t    call.setTargetEndpointAddress(url);\n\t            call.setOperation(method);\n\t            call.setTimeout(new Integer(5000));\n\t            val = (String)call.invoke(param);\n\t            System.out.println(\"method:\"+ method+\",param:\"  + param+\",return:\"  + val);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t  \treturn val;\n\t\t}\n\t  public static String postMethod(String url,String method,Object[] param, List in){\n          Service s = new  Service();\n          String val =null;\n          Call call;\n\t\t\ttry {\n\t\t\t\tcall = (Call) s.createCall();\n\t\t\t    call.setTargetEndpointAddress(url);\n\t            call.setOperation(method);\n\t            call.setTimeout(new Integer(5000));\n\t            for (Iterator iterator = in.iterator(); iterator.hasNext();) {\n\t\t\t\t\tString type = (String) iterator.next();\n\t\t\t\t\tcall.addParameter(type, org.apache.axis.encoding.XMLType.XSD_STRING, javax.xml.rpc.ParameterMode.IN);\n\t\t\t\t}\n\t              val = (String)call.invoke(param);\n\t            System.out.println(\"method:\"+ method+\",param:\"  + param+\",return:\"  + val);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t  \treturn val;\n\t\t}\n```\n#### rest 请求 get and post use HttpURLConnection\n\n```\n\t  /**\n\t   * rest 请求\n\t   * @param url\n\t   * @param param\n\t   * @return\n\t   */\n\t  public static String postMethod(String url,String method,String params){\n          String val =\"\";\n\t\ttry {\n\t\t\t URL restServiceURL = new URL(url);\n             HttpURLConnection httpConnection = (HttpURLConnection) restServiceURL.openConnection();\n             httpConnection.setRequestMethod(method);\n             httpConnection.setRequestProperty(\"Accept\", \"application/json\");\n             httpConnection.setDoOutput(true);     //需要输出\n             httpConnection.setDoInput(true);      //需要输入\n//             Iterator<Map.Entry<String, Object>> entries = params.entrySet().iterator(); \n//             while (entries.hasNext()) { \n//               Map.Entry<String, Object> entry = entries.next(); \n//               System.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getKey()); \n//               httpConnection.setRequestProperty(entry.getKey(), entry.getKey());\n//             }\n             \n             \n             //建立输入流，向指向的URL传入参数\n             DataOutputStream dos=new DataOutputStream(httpConnection.getOutputStream());\n             dos.writeBytes(params);\n             dos.flush();\n             \n             if (httpConnection.getResponseCode() != 200) {\n                    throw new RuntimeException(\"HTTP GET Request Failed with Error code : \"\n                                  + httpConnection.getResponseCode());\n             }\n             BufferedReader responseBuffer = new BufferedReader(new InputStreamReader(\n                    (httpConnection.getInputStream())));\n\n             String output;\n//             System.out.println(\"Output from Server:  \\n\");\n             \n             while ((output = responseBuffer.readLine()) != null) {\n                    System.out.println(output);\n                    val = val + output;\n             }\n\n             httpConnection.disconnect();\n\t\t\t System.out.println(\"url:\"+ url+\",params:\"  + params+\",return:\"  + val);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn val;\n\t}\n\t\n\t\n\t /** \n     * 发起http请求获取返回结果 \n     * @param req_url 请求地址 \n     * @return \n     */ \n    public  String getMethod(String req_url) {\n        StringBuffer buffer = new StringBuffer();  \n        try {  \n            URL url = new URL(req_url);  \n            HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  \n\n            httpUrlConn.setDoOutput(false);  \n            httpUrlConn.setDoInput(true);  \n            httpUrlConn.setUseCaches(false);  \n\n            httpUrlConn.setRequestMethod(\"GET\");  \n            httpUrlConn.connect();  \n\n            // 将返回的输入流转换成字符串  \n            InputStream inputStream = httpUrlConn.getInputStream();  \n            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, \"utf-8\");  \n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  \n\n            String str = null;  \n            while ((str = bufferedReader.readLine()) != null) {  \n                buffer.append(str);  \n            }  \n            bufferedReader.close();  \n            inputStreamReader.close();  \n            // 释放资源  \n            inputStream.close();  \n            inputStream = null;  \n            httpUrlConn.disconnect();  \n\n        } catch (Exception e) {  \n            System.out.println(e.getStackTrace());  \n        }  \n        return buffer.toString();  \n    } \n\n\tpublic static void main(String[] args) throws ConfigurationException {\n\t\tObject[] objects = {\"taskid\"};\n\t\tList<String> in = new ArrayList<String>();\n\t\tin.add(\"taskid\");\n\t\tMap<String, Object> params = new HashMap<String, Object>();\n\t\t\tparams.put(\"acc\", \"admin\");\n\t\t\tparams.put(\"pwd\", \"q7A1ArKxRM8=\");\n//\t\t\t\tparams.put(\"accessToken\", \"\");\n\t\tString pa = \"acc=admin&pwd=q7A1ArKxRM8=\";\n\t\tString par = \"accessToken=MpOfjtPXtYGGrQhBU3mHNH/TmQZNUoN8uNBzCd9fTGxPxVnCjxR2+m5p/DTWySzX\";\n\t\t\n//\t\t\tpostMethod(\"http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/StartSession\",\n//\t\t\t\t\t\"POST\",pa);\n\t\tpostMethod(\"http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/CloseSession\",\n\t\t\t\t\"POST\",par);\n\t\t\n//\t\t\tpostMethod(\"http://10.32.1.91:7007/OAUAcenter/services/OAOrgService\",\n//\t\t\t\t\t\"getOrgData\",null);\n//\t\t\tpostMethod(\"http://10.32.1.91:7007/OAUAcenter/services/OAProcessTaskService\",\n//\t\t\t\t\t\"endDb\",objects);\n//\t\t\tgetUserToken(\"admin\");\n\t}\n\n```\n## 反射常用调用\n\n```\n  String methodName = new StringBuffer(\"get\").append(key.substring(0, 1).toUpperCase())\n\t        \t.append(key.substring(1)).toString();\n\t  Method method =  PrjProject.class.getMethod(methodName);\n\t  Object result = method.invoke(info);\n```\n\n## jdbc 数据操作\n\n```\n String sql = \" select count(1) as count from demo_userrole t where t.fk_userid = ? and t.fk_roleid = ? \";\n SqlRowSet rs = jdbc.queryForRowSet(sql, userId, roleid);\n if (rs.next()) {\n    rs.getInt(\"count\");\n }\n\n```\n\n## log Linux 权限问题\n\n\n通过继承RollingFileAppender或者DailyRollingFileAppender来实现\n\n```\nlog4j.properties配置\n\n#输出到文件   \nlog4j.appender.fileInfo = com.core.log4jconfig.Mylog4jWriter\nlog4j.appender.fileInfo.Threshold = DEBUG   \nlog4j.appender.fileInfo.layout = org.apache.log4j.PatternLayout   \nlog4j.appender.fileInfo.layout.ConversionPattern = %d{yyyy-MM-dd HH\\:mm\\:ss} %p %c %x - %m%n  \nlog4j.appender.fileInfo.Append = TRUE   \nlog4j.appender.fileInfo.File = /data/my/logs/my.log   \nlog4j.appender.fileInfo.File='.'yyyy-MM-dd  \n\n```\n\ncom.core.log4jconfig.Mylog4jWriter.java代码\n\n```\npublic class Mylog4jWriter extends DailyRollingFileAppender{  \n      \n    @Override  \n    public synchronized void setFile(String fileName, boolean append,  \n            boolean bufferedIO, int bufferSize) throws IOException {  \n        super.setFile(fileName, append, bufferedIO, bufferSize);  \n        File f = new File(fileName);  \n        Set<PosixFilePermission> set = new HashSet<PosixFilePermission>();  \n        set.add(PosixFilePermission.OWNER_READ);  \n        set.add(PosixFilePermission.OTHERS_WRITE);  \n        set.add(PosixFilePermission.GROUP_READ);  \n        set.add(PosixFilePermission.OTHERS_READ);  \n        if(f.exists()){  \n            Files.setPosixFilePermissions(f.toPath(), set);  \n        }  \n    }  \n  \n} \n\n```\n启动项目即可\n生成的日志文件读写权限为rw-r--r--\n\n所有用户都有日志文件的读权限\n\n#### 修改 Sequence\n\n```\npublic void updateSequence() {\n  String sql = \"select SEQUENCE_NAME from ALL_SEQUENCES WHERE SEQUENCE_OWNER='database'\";\n  List<xxxx> list = findByList(sql, xxxx.class);\n  String updateSql1 = \"\";\n  String updateSql2 = \"\";\n  String selectSql = \"\";\n  for (xxxx p:list) {\n      updateSql1 = \"alter sequence \"+p.getSequence_name()+\" increment by 1000000\";\n      jdbc.update(updateSql1);\n      selectSql = \"select \"+p.getSequence_name()+\".nextval from dual\";\n      List<xxxx> byList = findByList(selectSql, xxxx.class);\n      updateSql2 = \"alter sequence \"+p.getSequence_name()+\" increment by 1\";\n      jdbc.update(updateSql2);\n  }\n}\n```","source":"_posts/java-常用代码.md","raw":"---\ntitle: java 常用代码\ndate: 2018-09-20 03:24:23\ntags: \ncategories: java\ndescription: \"java常用代码汇总，读取配置文件，日期，接口调用，是否为空，\"\n---\n\n## 读取配置文件\n\n#### configuration2读取配置文件\n\n```\n\nimport org.apache.commons.configuration2.Configuration;\nimport org.apache.commons.configuration2.FileBasedConfiguration;\nimport org.apache.commons.configuration2.PropertiesConfiguration;\nimport org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder;\nimport org.apache.commons.configuration2.builder.fluent.Parameters;\nimport org.apache.commons.configuration2.ex.ConfigurationException;\n\npublic static String getInclude() throws ConfigurationException {\n\tReloadingFileBasedConfigurationBuilder<FileBasedConfiguration> \n\t    include = new ReloadingFileBasedConfigurationBuilder<FileBasedConfiguration>(PropertiesConfiguration.class)\n\t\t.configure(new Parameters().properties().setEncoding(\"utf-8\").setFileName(\"include.properties\"));\n\tConfiguration config = (Configuration)include.getConfiguration();\n\tString source = config.getString(\"ips\");\n\treturn source;\n}\n\n```\n#### static读取配置文件\n\n```\n    public static Properties properties=new Properties();\n    public static String DEFAULT_FILENAME=\"default.properties\";\n    加载配置文件\nstatic {\n    // 1. load library defaults\n    InputStream in = demo.class.getResourceAsStream(DEFAULT_FILENAME);//类名.class\n\n    if (in == null) {\n        throw new RuntimeException(DEFAULT_FILENAME + \" not found\");\n    } else {\n    if (!(in instanceof BufferedInputStream))\n        in = new BufferedInputStream(in);\n        try {\n        properties.load(in);\n        in.close();\n        } catch (Exception e) {\n        throw new RuntimeException(\"Error while processing \"\n        + DEFAULT_FILENAME, e);\n        }\n    }\n\n}\n\n    /**\n    * 获取prop值\n    * @param key 输入的参数\n    * @return 返回value\n    */\n    public static String getProperty(final String key) {\n    return properties.getProperty(key);\n    }\n\n```\n\n\n##  MD5加密\n\n```\nimport org.apache.commons.codec.digest.DigestUtils;\npublic static String getUserToken(String account) {\n    String md5 = \"\";\n\tmd5 = DigestUtils.md5Hex(account+\"0.0.0.0\"+new Date());\n\tSystem.out.println(md5);\n\treturn md5;\n}\n\n```\n\n## 获取request所有参数，和Enumeration循环\n\n```\n\tpublic Map<String, String> getReqParams(HttpServletRequest request){\n\t\tEnumeration<String>  params = \trequest.getParameterNames();\n\t  \tMap<String, String> reqparams = new HashMap<String, String>();\n\t  \twhile(params.hasMoreElements()){\n\t            String value = (String)params.nextElement();//调用nextElement方法获得元素\n\t            reqparams.put(value, request.getParameter(value));\n\t    }\n\t  \treturn reqparams;\n\t}\n\n\t/*\n\t*\n\t*通过request获取参数\n\t*/\n\tpublic StringBuffer getParams(HttpServletRequest request){\n        Enumeration paramMap= request.getParameterNames();\n        StringBuffer sb = new StringBuffer();\n        while(paramMap.hasMoreElements()){\n            String key = (String) paramMap.nextElement();\n            sb.append(key).append(\"=\").append(request.getParameter(key).toString()).append(\"&\");\n        }\n        return sb;\n    }\n```\n\n####  get 获取文件内容并下载，变为byte[]，out输出  \n```\n\n  public static InputStream getInputStreamByUrl(String strUrl){\n        HttpURLConnection conn = null;\n        try {\n            URL url = new URL(strUrl);\n            conn = (HttpURLConnection)url.openConnection();\n            conn.setRequestMethod(\"GET\");\n            conn.setConnectTimeout(20 * 1000);\n            final ByteArrayOutputStream output = new ByteArrayOutputStream();\n            IOUtils.copy(conn.getInputStream(),output);\n            return  new ByteArrayInputStream(output.toByteArray());\n        } catch (Exception e) {\n            try{\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            }catch (Exception e1){\n            }\n        }\n        return null;\n    }\n    public  byte[] readBytes(InputStream in) throws IOException {  \n        BufferedInputStream bufin = new BufferedInputStream(in);  \n        int buffSize = 1024;  \n        ByteArrayOutputStream out = new ByteArrayOutputStream(buffSize);  \n  \n        // System.out.println(\"Available bytes:\" + in.available());  \n  \n        byte[] temp = new byte[buffSize];  \n        int size = 0;  \n        while ((size = bufin.read(temp)) != -1) {  \n            out.write(temp, 0, size);  \n        }  \n        bufin.close();  \n        in.close();  \n        byte[] content = out.toByteArray();  \n        out.close();  \n        return content;  \n    }\n\n```\n然后输出到页面,commons-io-2.6.jar\n\n```\nimport org.apache.commons.io.IOUtils;\n\n\tresponse.setCharacterEncoding(\"UTF-8\");\n\tresponse.setContentType(\"application/octet-stream\");\n\tresponse.setHeader(\"charset\", \"utf-8\");\n\t\n\tTools tools = new Tools();\n\tStringBuffer sb  = tools.getParams(request);\n\tString fileId = request.getParameter(\"fileId\");\n\tString fileName = request.getParameter(\"fileName\");\n\tString url = \"\";\n\t\n\tfileName = new String(URLDecoder.decode(fileName, \"UTF-8\").getBytes(\"UTF-8\"), \"ISO8859-1\");\n\tresponse.addHeader(\"Content-Disposition\", \"attachment;filename=\\\"\" + fileName + \"\\\";filename*=UTF-8''\" + fileName);\n\n\tInputStream inp = tools.getInputStreamByUrl(url);\n\tbyte[] bytes = tools.readBytes(inp);\n\tIOUtils.write(bytes, response.getOutputStream());\n\tresponse.flushBuffer();\n\tout.clear();\n\tout = pageContext.pushBody();\n```\n\n#### 下载文件。乱码等处理\ncommons-io-2.6.jar\n```\n\nimport org.apache.commons.io.IOUtils;\n\n      //修复IE下载 文件名乱码\n    String userAgent = req.getHeader(\"user-agent\").toLowerCase();  \n      if (userAgent.contains(\"msie\") || userAgent.contains(\"like gecko\") ) {  \n        // win10 ie edge 浏览器 和其他系统的ie  \n        excelName = URLEncoder.encode(excelName, \"UTF-8\");  \n    } else {  \n        // fe  \n      excelName = new String(excelName.getBytes(\"UTF-8\"), \"iso-8859-1\");  \n    }\n      \n    rsp.setContentType(\"Application/Octet-Stream\");\n    PopSalaryService service = FORP.SPRING_CONTEXT.getBean(PopSalaryService.class);\n    String filename = req.getServletContext().getRealPath(\"/disk-file/excel-template/pre-modeltemplate.xls\");\n    byte[] data = service.getFileByteArray(filename);\n    rsp.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + excelName + \"\\\"\");\n    IOUtils.write(data, rsp.getOutputStream());\n\treturn null;\n\n```\n#### 存数据库乱码变成问号,全角问题\n\n```\n\n\t    byte[] space = new byte[]{(byte) 0xc2,(byte) 0xa0};\n        String UTFSpace =new String( space,\"UTF-8\" );\n        String  result=attachment.getOriginalFilename().replaceAll(UTFSpace, \" \");\n\n```\n#### Map循环,获取request参数\n\n```\n\n    HashMap<String, Object> map = (HashMap<String, Object>)obj;\n\t\tIterator<String> keys = map.keySet().iterator();\n\t\twhile(keys.hasNext()){\n\t\t\tString k = keys.next();\n\t\t\tif(k.equals(key))\n\t\t\t{\n\t\t\t\treturn map.get(k);\n\t\t\t}\n\t\t}\n\n```\n#### 24位编码\n```\n /**\n\t  * 24位编码： 17日期+6随机数+\"N\"\n\t  * @return\n\t  */\n\t\tpublic static String getModelCode() {\n\t\t\tString ret = DateFormatUtils.format(new Date(), \"yyyyMMddHHmmssSSS\")+(int)((Math.random()*9+1)*100000)+\"N\";\n\t\t\treturn ret;\n\t\t}\n\n```\n\n#### 生成密码并验证，使用了正则，\n\n正则， 包含大小写字母和数字，可以包含特殊字符 ，10位\n\n\n```\n\tpublic static void main(String[] args) {\n\t\tUserService service = new UserService();\n//\t\tString pattern = \"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\S]{8,16}$/\";\n//\t    boolean isMatch = Pattern.matches(pattern, pass);\n\t\tPattern pattern = Pattern.compile(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[\\\\S]{8,16}$\"); \n\t    String pass = service.createPassWord(10);\n\t    Matcher matcher = pattern.matcher(pass); \n\t    boolean isMatch =   matcher.matches();\n//\t\tSystem.out.println(pass+\":\"+isMatch+\":\"+service.getDigPwd(\"MuWajayC1G\"));\n\t}\n\n\t//生成密码\n\tprivate String generatePwd(){\n        String pass = createPassWord(10);\n\t\tPattern pattern = Pattern.compile(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[\\\\S]{8,16}$\"); \n\t\tMatcher matcher = pattern.matcher(pass); \n\t    boolean isMatch =   matcher.matches();\n\n\t      if(isMatch){\n\t\t\t\treturn pass;\n\t\t  }else{\n\t\t\t  return generatePwd();\n\t\t  }\n\t}\n\t// 加密Password\n\tprivate String getDigPwd(String pwd){\n\t\treturn DigestUtils.md5Hex(FORP.MD5_SALT_PREFIX + pwd);\n\t}\n\tprivate String createPassWord(int len){\n\t    int random = this.createRandomInt();\n\t    return this.createPassWord(random, len);\n\t}\n\tprivate String createPassWord(int random,int len){\n\t    Random rd = new Random(random);\n\t    final int maxNum = 62;\n\t    StringBuffer sb = new StringBuffer();\n\t    int rdGet;//取得随机数\n\t    char[] str = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\n\t        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\n\t        'x', 'y', 'z', 'A','B','C','D','E','F','G','H','I','J','K',\n\t        'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\n\t        'X', 'Y' ,'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };\n\t    int count=0;\n\t    while(count < len){\n\t      rdGet = Math.abs(rd.nextInt(maxNum));//生成的数最大为62-1\n\t      if (rdGet >= 0 && rdGet < str.length) {\n\t        sb.append(str[rdGet]);\n\t        count ++;\n\t      }\n\t    }\n\t    return sb.toString();\n\t  }\n\t  private int createRandomInt(){\n\t    //得到0.0到1.0之间的数字，并扩大100000倍\n\t    double temp = Math.random()*100000;\n\t    //如果数据等于100000，则减少1\n\t    if(temp>=100000){\n\t      temp = 99999;\n\t    }\n\t    int tempint = (int)Math.ceil(temp);\n\t    return tempint;\n\t  }\n\n```\n\n## 判断对象为空 判断对象不为空\n\n```\n\n/**\n\t * 判断对象为空\n\t * \n\t * @param obj\n\t * @return\n\t */\n\tpublic static boolean isEmpty(Object obj) {\n\t\tif (obj == null)\n\t\t\treturn true;\n\n\t\tif (obj instanceof CharSequence)\n\t\t\treturn ((CharSequence) obj).length() == 0;\n\n\t\tif (obj instanceof Collection)\n\t\t\treturn ((Collection) obj).isEmpty();\n\n\t\tif (obj instanceof Map)\n\t\t\treturn ((Map) obj).isEmpty();\n\n\t\tif (obj instanceof String)\n\t\t\treturn \"\".equals(obj);\n\n\t\tif (obj instanceof Object[]) {\n\t\t\tObject[] object = (Object[]) obj;\n\t\t\tif (object.length == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tboolean empty = true;\n\t\t\tfor (int i = 0; i < object.length; i++) {\n\t\t\t\tif (!isEmpty(object[i])) {\n\t\t\t\t\tempty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn empty;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * 判断对象不为空\n\t * \n\t * @param obj\n\t * @return\n\t */\n\tpublic static boolean isNotEmpty(Object obj) {\n\t\treturn !isEmpty(obj);\n\t}\n\t\n```\n#### Arrays 工具\n\n```\nString[] arr ={\"1\",\"aaa2\",\"3aaa\",\"asds4\"};\nString arrString = Arrays.toString(arr);\nSystem.out.println(arrString);\n\n```\n## JSON 相关\n\n\n```\nFastJson \n按顺序\nMap<String, Object> itemMap = JSONObject.parseObject(exportFiled, LinkedHashMap.class);\n\n```\n## 日期相关\n\n#### 计算两个日期相差天数  xx天 xx天xx时xx分xx秒\n\n```\npublic  String getDatePoor(Date beginDate, Date endDate) {\n\t\t \n\t    long nd = 1000 * 24 * 60 * 60;\n\t    long nh = 1000 * 60 * 60;\n\t    long nm = 1000 * 60;\n\t     long ns = 1000;\n\t    // 获得两个时间的毫秒时间差异\n\t    long diff = endDate.getTime() - beginDate.getTime();\n\t    // 计算差多少天\n\t    long day = diff / nd;\n\t    // 计算差多少小时\n\t    long hour = diff % nd / nh;\n\t    // 计算差多少分钟\n\t    long min = diff % nd % nh / nm;\n\t    // 计算差多少秒//输出结果\n\t     long sec = diff % nd % nh % nm / ns;\n\t    return day + \"天\" + hour + \"小时\" + min + \"分\" + sec + \"秒\";\n\t}\n```\n#### \n\n```\n/**\n\t * 计算两个日期之间相差的天数\n\t * \n\t * @param smdate 较小的时间\n\t * @param bdate 较大的时间\n\t * @return 相差天数\n\t * @throws ParseException\n\t */\n\tpublic static int daysBetween(Date smdate, Date bdate) throws ParseException {\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tsmdate = sdf.parse(sdf.format(smdate));\n\t\tbdate = sdf.parse(sdf.format(bdate));\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.setTime(smdate);\n\t\tlong time1 = cal.getTimeInMillis();\n\t\tcal.setTime(bdate);\n\t\tlong time2 = cal.getTimeInMillis();\n\t\tlong between_days = (time2 - time1) / (1000 * 3600 * 24);\n\t\treturn Integer.parseInt(String.valueOf(between_days));\n\t}\n\n```\n\n####  string2Date\n\n```\n\n/**\n\t * 字符串转日期\n\t * \n\t * @param strDate 字符串日期\n\t * @param pattern 日期格式\n\t * @return\n\t * @throws ParseException\n\t */\n\tpublic static Date string2Date(String strDate, String pattern) throws ParseException {\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(pattern);\n\t\tDate date = sdf.parse(strDate);\n\t\treturn date;\n\t}\n```\n#### date2String\n\n```\n\t/**\n\t * 日期转字符串\n\t * \n\t * @param date\n\t * @return\n\t * @throws ParseException\n\t */\n\n\tpublic static String date2String(Date date, String pattern) throws ParseException {\n\t\tSimpleDateFormat formatter = new SimpleDateFormat(pattern);\n\t\treturn formatter.format(date);\n\t}\n\n```\n#### getFirstDayOfMonth 获取指定年月的第一天\n\n```\n\t/**\n     * 获取指定年月的第一天\n     * @param year\n     * @param month\n     * @return\n     */\n    public static String getFirstDayOfMonth(int year, int month) {     \n        Calendar cal = Calendar.getInstance();   \n        //设置年份\n        cal.set(Calendar.YEAR, year);\n        //设置月份 \n        cal.set(Calendar.MONTH, month-1); \n        //获取某月最小天数\n        int firstDay = cal.getMinimum(Calendar.DATE);\n        //设置日历中月份的最小天数 \n        cal.set(Calendar.DAY_OF_MONTH,firstDay);  \n        //格式化日期\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        return sdf.format(cal.getTime());  \n    }\n    public  String getLastDayOfMonth1(String yearmonth) { \n  \t  int year = Integer.parseInt(yearmonth.split(\"-\")[0]);\n  \t  int month =  Integer.parseInt(yearmonth.split(\"-\")[1]);\n  \t  return getLastDayOfMonth1(year,month);\n  \t}\n```\n#### getLastDayOfMonth 获取指定年月的最后一天\n\n```\n\t/**\n     * 获取指定年月的最后一天\n     * @param year\n     * @param month\n     * @return\n     */\n     public  String getLastDayOfMonth1(int year, int month) {     \n         Calendar cal = Calendar.getInstance();     \n         //设置年份  \n         cal.set(Calendar.YEAR, year);  \n         //设置月份  \n         cal.set(Calendar.MONTH, month-1); \n         //获取某月最大天数\n         int lastDay = cal.getActualMaximum(Calendar.DATE);\n         //设置日历中月份的最大天数  \n         cal.set(Calendar.DAY_OF_MONTH, lastDay);  \n         //格式化日期\n         SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");  \n         return sdf.format(cal.getTime());\n     }\n\n```\n\n\n## 接口方面\n\n#### webservice\n\n```\n\npublic static String postMethod(String url,String method,Object[] param){\n           Service s = new  Service();\n           String val =null;\n           Call call;\n\t\t\ttry {\n\t\t\t\tcall = (Call) s.createCall();\n\t\t\t    call.setTargetEndpointAddress(url);\n\t            call.setOperation(method);\n\t            call.setTimeout(new Integer(5000));\n\t            val = (String)call.invoke(param);\n\t            System.out.println(\"method:\"+ method+\",param:\"  + param+\",return:\"  + val);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t  \treturn val;\n\t\t}\n\t  public static String postMethod(String url,String method,Object[] param, List in){\n          Service s = new  Service();\n          String val =null;\n          Call call;\n\t\t\ttry {\n\t\t\t\tcall = (Call) s.createCall();\n\t\t\t    call.setTargetEndpointAddress(url);\n\t            call.setOperation(method);\n\t            call.setTimeout(new Integer(5000));\n\t            for (Iterator iterator = in.iterator(); iterator.hasNext();) {\n\t\t\t\t\tString type = (String) iterator.next();\n\t\t\t\t\tcall.addParameter(type, org.apache.axis.encoding.XMLType.XSD_STRING, javax.xml.rpc.ParameterMode.IN);\n\t\t\t\t}\n\t              val = (String)call.invoke(param);\n\t            System.out.println(\"method:\"+ method+\",param:\"  + param+\",return:\"  + val);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t  \treturn val;\n\t\t}\n```\n#### rest 请求 get and post use HttpURLConnection\n\n```\n\t  /**\n\t   * rest 请求\n\t   * @param url\n\t   * @param param\n\t   * @return\n\t   */\n\t  public static String postMethod(String url,String method,String params){\n          String val =\"\";\n\t\ttry {\n\t\t\t URL restServiceURL = new URL(url);\n             HttpURLConnection httpConnection = (HttpURLConnection) restServiceURL.openConnection();\n             httpConnection.setRequestMethod(method);\n             httpConnection.setRequestProperty(\"Accept\", \"application/json\");\n             httpConnection.setDoOutput(true);     //需要输出\n             httpConnection.setDoInput(true);      //需要输入\n//             Iterator<Map.Entry<String, Object>> entries = params.entrySet().iterator(); \n//             while (entries.hasNext()) { \n//               Map.Entry<String, Object> entry = entries.next(); \n//               System.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getKey()); \n//               httpConnection.setRequestProperty(entry.getKey(), entry.getKey());\n//             }\n             \n             \n             //建立输入流，向指向的URL传入参数\n             DataOutputStream dos=new DataOutputStream(httpConnection.getOutputStream());\n             dos.writeBytes(params);\n             dos.flush();\n             \n             if (httpConnection.getResponseCode() != 200) {\n                    throw new RuntimeException(\"HTTP GET Request Failed with Error code : \"\n                                  + httpConnection.getResponseCode());\n             }\n             BufferedReader responseBuffer = new BufferedReader(new InputStreamReader(\n                    (httpConnection.getInputStream())));\n\n             String output;\n//             System.out.println(\"Output from Server:  \\n\");\n             \n             while ((output = responseBuffer.readLine()) != null) {\n                    System.out.println(output);\n                    val = val + output;\n             }\n\n             httpConnection.disconnect();\n\t\t\t System.out.println(\"url:\"+ url+\",params:\"  + params+\",return:\"  + val);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn val;\n\t}\n\t\n\t\n\t /** \n     * 发起http请求获取返回结果 \n     * @param req_url 请求地址 \n     * @return \n     */ \n    public  String getMethod(String req_url) {\n        StringBuffer buffer = new StringBuffer();  \n        try {  \n            URL url = new URL(req_url);  \n            HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  \n\n            httpUrlConn.setDoOutput(false);  \n            httpUrlConn.setDoInput(true);  \n            httpUrlConn.setUseCaches(false);  \n\n            httpUrlConn.setRequestMethod(\"GET\");  \n            httpUrlConn.connect();  \n\n            // 将返回的输入流转换成字符串  \n            InputStream inputStream = httpUrlConn.getInputStream();  \n            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, \"utf-8\");  \n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  \n\n            String str = null;  \n            while ((str = bufferedReader.readLine()) != null) {  \n                buffer.append(str);  \n            }  \n            bufferedReader.close();  \n            inputStreamReader.close();  \n            // 释放资源  \n            inputStream.close();  \n            inputStream = null;  \n            httpUrlConn.disconnect();  \n\n        } catch (Exception e) {  \n            System.out.println(e.getStackTrace());  \n        }  \n        return buffer.toString();  \n    } \n\n\tpublic static void main(String[] args) throws ConfigurationException {\n\t\tObject[] objects = {\"taskid\"};\n\t\tList<String> in = new ArrayList<String>();\n\t\tin.add(\"taskid\");\n\t\tMap<String, Object> params = new HashMap<String, Object>();\n\t\t\tparams.put(\"acc\", \"admin\");\n\t\t\tparams.put(\"pwd\", \"q7A1ArKxRM8=\");\n//\t\t\t\tparams.put(\"accessToken\", \"\");\n\t\tString pa = \"acc=admin&pwd=q7A1ArKxRM8=\";\n\t\tString par = \"accessToken=MpOfjtPXtYGGrQhBU3mHNH/TmQZNUoN8uNBzCd9fTGxPxVnCjxR2+m5p/DTWySzX\";\n\t\t\n//\t\t\tpostMethod(\"http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/StartSession\",\n//\t\t\t\t\t\"POST\",pa);\n\t\tpostMethod(\"http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/CloseSession\",\n\t\t\t\t\"POST\",par);\n\t\t\n//\t\t\tpostMethod(\"http://10.32.1.91:7007/OAUAcenter/services/OAOrgService\",\n//\t\t\t\t\t\"getOrgData\",null);\n//\t\t\tpostMethod(\"http://10.32.1.91:7007/OAUAcenter/services/OAProcessTaskService\",\n//\t\t\t\t\t\"endDb\",objects);\n//\t\t\tgetUserToken(\"admin\");\n\t}\n\n```\n## 反射常用调用\n\n```\n  String methodName = new StringBuffer(\"get\").append(key.substring(0, 1).toUpperCase())\n\t        \t.append(key.substring(1)).toString();\n\t  Method method =  PrjProject.class.getMethod(methodName);\n\t  Object result = method.invoke(info);\n```\n\n## jdbc 数据操作\n\n```\n String sql = \" select count(1) as count from demo_userrole t where t.fk_userid = ? and t.fk_roleid = ? \";\n SqlRowSet rs = jdbc.queryForRowSet(sql, userId, roleid);\n if (rs.next()) {\n    rs.getInt(\"count\");\n }\n\n```\n\n## log Linux 权限问题\n\n\n通过继承RollingFileAppender或者DailyRollingFileAppender来实现\n\n```\nlog4j.properties配置\n\n#输出到文件   \nlog4j.appender.fileInfo = com.core.log4jconfig.Mylog4jWriter\nlog4j.appender.fileInfo.Threshold = DEBUG   \nlog4j.appender.fileInfo.layout = org.apache.log4j.PatternLayout   \nlog4j.appender.fileInfo.layout.ConversionPattern = %d{yyyy-MM-dd HH\\:mm\\:ss} %p %c %x - %m%n  \nlog4j.appender.fileInfo.Append = TRUE   \nlog4j.appender.fileInfo.File = /data/my/logs/my.log   \nlog4j.appender.fileInfo.File='.'yyyy-MM-dd  \n\n```\n\ncom.core.log4jconfig.Mylog4jWriter.java代码\n\n```\npublic class Mylog4jWriter extends DailyRollingFileAppender{  \n      \n    @Override  \n    public synchronized void setFile(String fileName, boolean append,  \n            boolean bufferedIO, int bufferSize) throws IOException {  \n        super.setFile(fileName, append, bufferedIO, bufferSize);  \n        File f = new File(fileName);  \n        Set<PosixFilePermission> set = new HashSet<PosixFilePermission>();  \n        set.add(PosixFilePermission.OWNER_READ);  \n        set.add(PosixFilePermission.OTHERS_WRITE);  \n        set.add(PosixFilePermission.GROUP_READ);  \n        set.add(PosixFilePermission.OTHERS_READ);  \n        if(f.exists()){  \n            Files.setPosixFilePermissions(f.toPath(), set);  \n        }  \n    }  \n  \n} \n\n```\n启动项目即可\n生成的日志文件读写权限为rw-r--r--\n\n所有用户都有日志文件的读权限\n\n#### 修改 Sequence\n\n```\npublic void updateSequence() {\n  String sql = \"select SEQUENCE_NAME from ALL_SEQUENCES WHERE SEQUENCE_OWNER='database'\";\n  List<xxxx> list = findByList(sql, xxxx.class);\n  String updateSql1 = \"\";\n  String updateSql2 = \"\";\n  String selectSql = \"\";\n  for (xxxx p:list) {\n      updateSql1 = \"alter sequence \"+p.getSequence_name()+\" increment by 1000000\";\n      jdbc.update(updateSql1);\n      selectSql = \"select \"+p.getSequence_name()+\".nextval from dual\";\n      List<xxxx> byList = findByList(selectSql, xxxx.class);\n      updateSql2 = \"alter sequence \"+p.getSequence_name()+\" increment by 1\";\n      jdbc.update(updateSql2);\n  }\n}\n```","slug":"java-常用代码","published":1,"updated":"2019-04-08T01:25:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7bg009rugv5uu8z6ymb","content":"<h2 id=\"读取配置文件\"><a href=\"#读取配置文件\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h2><h4 id=\"configuration2读取配置文件\"><a href=\"#configuration2读取配置文件\" class=\"headerlink\" title=\"configuration2读取配置文件\"></a>configuration2读取配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.apache.commons.configuration2.Configuration;</span><br><span class=\"line\">import org.apache.commons.configuration2.FileBasedConfiguration;</span><br><span class=\"line\">import org.apache.commons.configuration2.PropertiesConfiguration;</span><br><span class=\"line\">import org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder;</span><br><span class=\"line\">import org.apache.commons.configuration2.builder.fluent.Parameters;</span><br><span class=\"line\">import org.apache.commons.configuration2.ex.ConfigurationException;</span><br><span class=\"line\"></span><br><span class=\"line\">public static String getInclude() throws ConfigurationException &#123;</span><br><span class=\"line\">\tReloadingFileBasedConfigurationBuilder&lt;FileBasedConfiguration&gt; </span><br><span class=\"line\">\t    include = new ReloadingFileBasedConfigurationBuilder&lt;FileBasedConfiguration&gt;(PropertiesConfiguration.class)</span><br><span class=\"line\">\t\t.configure(new Parameters().properties().setEncoding(&quot;utf-8&quot;).setFileName(&quot;include.properties&quot;));</span><br><span class=\"line\">\tConfiguration config = (Configuration)include.getConfiguration();</span><br><span class=\"line\">\tString source = config.getString(&quot;ips&quot;);</span><br><span class=\"line\">\treturn source;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"static读取配置文件\"><a href=\"#static读取配置文件\" class=\"headerlink\" title=\"static读取配置文件\"></a>static读取配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public static Properties properties=new Properties();</span><br><span class=\"line\">    public static String DEFAULT_FILENAME=&quot;default.properties&quot;;</span><br><span class=\"line\">    加载配置文件</span><br><span class=\"line\">static &#123;</span><br><span class=\"line\">    // 1. load library defaults</span><br><span class=\"line\">    InputStream in = demo.class.getResourceAsStream(DEFAULT_FILENAME);//类名.class</span><br><span class=\"line\"></span><br><span class=\"line\">    if (in == null) &#123;</span><br><span class=\"line\">        throw new RuntimeException(DEFAULT_FILENAME + &quot; not found&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    if (!(in instanceof BufferedInputStream))</span><br><span class=\"line\">        in = new BufferedInputStream(in);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">        properties.load(in);</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        throw new RuntimeException(&quot;Error while processing &quot;</span><br><span class=\"line\">        + DEFAULT_FILENAME, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 获取prop值</span><br><span class=\"line\">    * @param key 输入的参数</span><br><span class=\"line\">    * @return 返回value</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static String getProperty(final String key) &#123;</span><br><span class=\"line\">    return properties.getProperty(key);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MD5加密\"><a href=\"#MD5加密\" class=\"headerlink\" title=\"MD5加密\"></a>MD5加密</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.codec.digest.DigestUtils;</span><br><span class=\"line\">public static String getUserToken(String account) &#123;</span><br><span class=\"line\">    String md5 = &quot;&quot;;</span><br><span class=\"line\">\tmd5 = DigestUtils.md5Hex(account+&quot;0.0.0.0&quot;+new Date());</span><br><span class=\"line\">\tSystem.out.println(md5);</span><br><span class=\"line\">\treturn md5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取request所有参数，和Enumeration循环\"><a href=\"#获取request所有参数，和Enumeration循环\" class=\"headerlink\" title=\"获取request所有参数，和Enumeration循环\"></a>获取request所有参数，和Enumeration循环</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Map&lt;String, String&gt; getReqParams(HttpServletRequest request)&#123;</span><br><span class=\"line\">\tEnumeration&lt;String&gt;  params = \trequest.getParameterNames();</span><br><span class=\"line\">  \tMap&lt;String, String&gt; reqparams = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">  \twhile(params.hasMoreElements())&#123;</span><br><span class=\"line\">            String value = (String)params.nextElement();//调用nextElement方法获得元素</span><br><span class=\"line\">            reqparams.put(value, request.getParameter(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \treturn reqparams;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">*</span><br><span class=\"line\">*通过request获取参数</span><br><span class=\"line\">*/</span><br><span class=\"line\">public StringBuffer getParams(HttpServletRequest request)&#123;</span><br><span class=\"line\">       Enumeration paramMap= request.getParameterNames();</span><br><span class=\"line\">       StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">       while(paramMap.hasMoreElements())&#123;</span><br><span class=\"line\">           String key = (String) paramMap.nextElement();</span><br><span class=\"line\">           sb.append(key).append(&quot;=&quot;).append(request.getParameter(key).toString()).append(&quot;&amp;&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return sb;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"get-获取文件内容并下载，变为byte-，out输出\"><a href=\"#get-获取文件内容并下载，变为byte-，out输出\" class=\"headerlink\" title=\"get 获取文件内容并下载，变为byte[]，out输出\"></a>get 获取文件内容并下载，变为byte[]，out输出</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static InputStream getInputStreamByUrl(String strUrl)&#123;</span><br><span class=\"line\">      HttpURLConnection conn = null;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">          URL url = new URL(strUrl);</span><br><span class=\"line\">          conn = (HttpURLConnection)url.openConnection();</span><br><span class=\"line\">          conn.setRequestMethod(&quot;GET&quot;);</span><br><span class=\"line\">          conn.setConnectTimeout(20 * 1000);</span><br><span class=\"line\">          final ByteArrayOutputStream output = new ByteArrayOutputStream();</span><br><span class=\"line\">          IOUtils.copy(conn.getInputStream(),output);</span><br><span class=\"line\">          return  new ByteArrayInputStream(output.toByteArray());</span><br><span class=\"line\">      &#125; catch (Exception e) &#123;</span><br><span class=\"line\">          try&#123;</span><br><span class=\"line\">              if (conn != null) &#123;</span><br><span class=\"line\">                  conn.disconnect();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;catch (Exception e1)&#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public  byte[] readBytes(InputStream in) throws IOException &#123;  </span><br><span class=\"line\">      BufferedInputStream bufin = new BufferedInputStream(in);  </span><br><span class=\"line\">      int buffSize = 1024;  </span><br><span class=\"line\">      ByteArrayOutputStream out = new ByteArrayOutputStream(buffSize);  </span><br><span class=\"line\"></span><br><span class=\"line\">      // System.out.println(&quot;Available bytes:&quot; + in.available());  </span><br><span class=\"line\"></span><br><span class=\"line\">      byte[] temp = new byte[buffSize];  </span><br><span class=\"line\">      int size = 0;  </span><br><span class=\"line\">      while ((size = bufin.read(temp)) != -1) &#123;  </span><br><span class=\"line\">          out.write(temp, 0, size);  </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      bufin.close();  </span><br><span class=\"line\">      in.close();  </span><br><span class=\"line\">      byte[] content = out.toByteArray();  </span><br><span class=\"line\">      out.close();  </span><br><span class=\"line\">      return content;  </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>然后输出到页面,commons-io-2.6.jar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.io.IOUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">\tresponse.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">\tresponse.setContentType(&quot;application/octet-stream&quot;);</span><br><span class=\"line\">\tresponse.setHeader(&quot;charset&quot;, &quot;utf-8&quot;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTools tools = new Tools();</span><br><span class=\"line\">\tStringBuffer sb  = tools.getParams(request);</span><br><span class=\"line\">\tString fileId = request.getParameter(&quot;fileId&quot;);</span><br><span class=\"line\">\tString fileName = request.getParameter(&quot;fileName&quot;);</span><br><span class=\"line\">\tString url = &quot;&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfileName = new String(URLDecoder.decode(fileName, &quot;UTF-8&quot;).getBytes(&quot;UTF-8&quot;), &quot;ISO8859-1&quot;);</span><br><span class=\"line\">\tresponse.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=\\&quot;&quot; + fileName + &quot;\\&quot;;filename*=UTF-8&apos;&apos;&quot; + fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInputStream inp = tools.getInputStreamByUrl(url);</span><br><span class=\"line\">\tbyte[] bytes = tools.readBytes(inp);</span><br><span class=\"line\">\tIOUtils.write(bytes, response.getOutputStream());</span><br><span class=\"line\">\tresponse.flushBuffer();</span><br><span class=\"line\">\tout.clear();</span><br><span class=\"line\">\tout = pageContext.pushBody();</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载文件。乱码等处理\"><a href=\"#下载文件。乱码等处理\" class=\"headerlink\" title=\"下载文件。乱码等处理\"></a>下载文件。乱码等处理</h4><p>commons-io-2.6.jar<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.apache.commons.io.IOUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">      //修复IE下载 文件名乱码</span><br><span class=\"line\">    String userAgent = req.getHeader(&quot;user-agent&quot;).toLowerCase();  </span><br><span class=\"line\">      if (userAgent.contains(&quot;msie&quot;) || userAgent.contains(&quot;like gecko&quot;) ) &#123;  </span><br><span class=\"line\">        // win10 ie edge 浏览器 和其他系统的ie  </span><br><span class=\"line\">        excelName = URLEncoder.encode(excelName, &quot;UTF-8&quot;);  </span><br><span class=\"line\">    &#125; else &#123;  </span><br><span class=\"line\">        // fe  </span><br><span class=\"line\">      excelName = new String(excelName.getBytes(&quot;UTF-8&quot;), &quot;iso-8859-1&quot;);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    rsp.setContentType(&quot;Application/Octet-Stream&quot;);</span><br><span class=\"line\">    PopSalaryService service = FORP.SPRING_CONTEXT.getBean(PopSalaryService.class);</span><br><span class=\"line\">    String filename = req.getServletContext().getRealPath(&quot;/disk-file/excel-template/pre-modeltemplate.xls&quot;);</span><br><span class=\"line\">    byte[] data = service.getFileByteArray(filename);</span><br><span class=\"line\">    rsp.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\\&quot;&quot; + excelName + &quot;\\&quot;&quot;);</span><br><span class=\"line\">    IOUtils.write(data, rsp.getOutputStream());</span><br><span class=\"line\">\treturn null;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"存数据库乱码变成问号-全角问题\"><a href=\"#存数据库乱码变成问号-全角问题\" class=\"headerlink\" title=\"存数据库乱码变成问号,全角问题\"></a>存数据库乱码变成问号,全角问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">byte[] space = new byte[]&#123;(byte) 0xc2,(byte) 0xa0&#125;;</span><br><span class=\"line\">   String UTFSpace =new String( space,&quot;UTF-8&quot; );</span><br><span class=\"line\">   String  result=attachment.getOriginalFilename().replaceAll(UTFSpace, &quot; &quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Map循环-获取request参数\"><a href=\"#Map循环-获取request参数\" class=\"headerlink\" title=\"Map循环,获取request参数\"></a>Map循环,获取request参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  HashMap&lt;String, Object&gt; map = (HashMap&lt;String, Object&gt;)obj;</span><br><span class=\"line\">Iterator&lt;String&gt; keys = map.keySet().iterator();</span><br><span class=\"line\">while(keys.hasNext())&#123;</span><br><span class=\"line\">\tString k = keys.next();</span><br><span class=\"line\">\tif(k.equals(key))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn map.get(k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"24位编码\"><a href=\"#24位编码\" class=\"headerlink\" title=\"24位编码\"></a>24位编码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * 24位编码： 17日期+6随机数+&quot;N&quot;</span><br><span class=\"line\">  * @return</span><br><span class=\"line\">  */</span><br><span class=\"line\">\tpublic static String getModelCode() &#123;</span><br><span class=\"line\">\t\tString ret = DateFormatUtils.format(new Date(), &quot;yyyyMMddHHmmssSSS&quot;)+(int)((Math.random()*9+1)*100000)+&quot;N&quot;;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成密码并验证，使用了正则，\"><a href=\"#生成密码并验证，使用了正则，\" class=\"headerlink\" title=\"生成密码并验证，使用了正则，\"></a>生成密码并验证，使用了正则，</h4><p>正则， 包含大小写字母和数字，可以包含特殊字符 ，10位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tUserService service = new UserService();</span><br><span class=\"line\">//\t\tString pattern = &quot;/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\S]&#123;8,16&#125;$/&quot;;</span><br><span class=\"line\">//\t    boolean isMatch = Pattern.matches(pattern, pass);</span><br><span class=\"line\">\t\tPattern pattern = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[\\\\S]&#123;8,16&#125;$&quot;); </span><br><span class=\"line\">\t    String pass = service.createPassWord(10);</span><br><span class=\"line\">\t    Matcher matcher = pattern.matcher(pass); </span><br><span class=\"line\">\t    boolean isMatch =   matcher.matches();</span><br><span class=\"line\">//\t\tSystem.out.println(pass+&quot;:&quot;+isMatch+&quot;:&quot;+service.getDigPwd(&quot;MuWajayC1G&quot;));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//生成密码</span><br><span class=\"line\">\tprivate String generatePwd()&#123;</span><br><span class=\"line\">        String pass = createPassWord(10);</span><br><span class=\"line\">\t\tPattern pattern = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[\\\\S]&#123;8,16&#125;$&quot;); </span><br><span class=\"line\">\t\tMatcher matcher = pattern.matcher(pass); </span><br><span class=\"line\">\t    boolean isMatch =   matcher.matches();</span><br><span class=\"line\"></span><br><span class=\"line\">\t      if(isMatch)&#123;</span><br><span class=\"line\">\t\t\t\treturn pass;</span><br><span class=\"line\">\t\t  &#125;else&#123;</span><br><span class=\"line\">\t\t\t  return generatePwd();</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 加密Password</span><br><span class=\"line\">\tprivate String getDigPwd(String pwd)&#123;</span><br><span class=\"line\">\t\treturn DigestUtils.md5Hex(FORP.MD5_SALT_PREFIX + pwd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate String createPassWord(int len)&#123;</span><br><span class=\"line\">\t    int random = this.createRandomInt();</span><br><span class=\"line\">\t    return this.createPassWord(random, len);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate String createPassWord(int random,int len)&#123;</span><br><span class=\"line\">\t    Random rd = new Random(random);</span><br><span class=\"line\">\t    final int maxNum = 62;</span><br><span class=\"line\">\t    StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">\t    int rdGet;//取得随机数</span><br><span class=\"line\">\t    char[] str = &#123; &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;,</span><br><span class=\"line\">\t        &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;,</span><br><span class=\"line\">\t        &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,</span><br><span class=\"line\">\t        &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;, &apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;,</span><br><span class=\"line\">\t        &apos;X&apos;, &apos;Y&apos; ,&apos;Z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos; &#125;;</span><br><span class=\"line\">\t    int count=0;</span><br><span class=\"line\">\t    while(count &lt; len)&#123;</span><br><span class=\"line\">\t      rdGet = Math.abs(rd.nextInt(maxNum));//生成的数最大为62-1</span><br><span class=\"line\">\t      if (rdGet &gt;= 0 &amp;&amp; rdGet &lt; str.length) &#123;</span><br><span class=\"line\">\t        sb.append(str[rdGet]);</span><br><span class=\"line\">\t        count ++;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    return sb.toString();</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  private int createRandomInt()&#123;</span><br><span class=\"line\">\t    //得到0.0到1.0之间的数字，并扩大100000倍</span><br><span class=\"line\">\t    double temp = Math.random()*100000;</span><br><span class=\"line\">\t    //如果数据等于100000，则减少1</span><br><span class=\"line\">\t    if(temp&gt;=100000)&#123;</span><br><span class=\"line\">\t      temp = 99999;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    int tempint = (int)Math.ceil(temp);</span><br><span class=\"line\">\t    return tempint;</span><br><span class=\"line\">\t  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断对象为空-判断对象不为空\"><a href=\"#判断对象为空-判断对象不为空\" class=\"headerlink\" title=\"判断对象为空 判断对象不为空\"></a>判断对象为空 判断对象不为空</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">\t * 判断对象为空</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param obj</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static boolean isEmpty(Object obj) &#123;</span><br><span class=\"line\">\t\tif (obj == null)</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof CharSequence)</span><br><span class=\"line\">\t\t\treturn ((CharSequence) obj).length() == 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof Collection)</span><br><span class=\"line\">\t\t\treturn ((Collection) obj).isEmpty();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof Map)</span><br><span class=\"line\">\t\t\treturn ((Map) obj).isEmpty();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof String)</span><br><span class=\"line\">\t\t\treturn &quot;&quot;.equals(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof Object[]) &#123;</span><br><span class=\"line\">\t\t\tObject[] object = (Object[]) obj;</span><br><span class=\"line\">\t\t\tif (object.length == 0) &#123;</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tboolean empty = true;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; object.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tif (!isEmpty(object[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\tempty = false;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn empty;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 判断对象不为空</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param obj</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static boolean isNotEmpty(Object obj) &#123;</span><br><span class=\"line\">\t\treturn !isEmpty(obj);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Arrays-工具\"><a href=\"#Arrays-工具\" class=\"headerlink\" title=\"Arrays 工具\"></a>Arrays 工具</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] arr =&#123;&quot;1&quot;,&quot;aaa2&quot;,&quot;3aaa&quot;,&quot;asds4&quot;&#125;;</span><br><span class=\"line\">String arrString = Arrays.toString(arr);</span><br><span class=\"line\">System.out.println(arrString);</span><br></pre></td></tr></table></figure>\n<h2 id=\"JSON-相关\"><a href=\"#JSON-相关\" class=\"headerlink\" title=\"JSON 相关\"></a>JSON 相关</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FastJson </span><br><span class=\"line\">按顺序</span><br><span class=\"line\">Map&lt;String, Object&gt; itemMap = JSONObject.parseObject(exportFiled, LinkedHashMap.class);</span><br></pre></td></tr></table></figure>\n<h2 id=\"日期相关\"><a href=\"#日期相关\" class=\"headerlink\" title=\"日期相关\"></a>日期相关</h2><h4 id=\"计算两个日期相差天数-xx天-xx天xx时xx分xx秒\"><a href=\"#计算两个日期相差天数-xx天-xx天xx时xx分xx秒\" class=\"headerlink\" title=\"计算两个日期相差天数  xx天 xx天xx时xx分xx秒\"></a>计算两个日期相差天数  xx天 xx天xx时xx分xx秒</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  String getDatePoor(Date beginDate, Date endDate) &#123;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t    long nd = 1000 * 24 * 60 * 60;</span><br><span class=\"line\">\t    long nh = 1000 * 60 * 60;</span><br><span class=\"line\">\t    long nm = 1000 * 60;</span><br><span class=\"line\">\t     long ns = 1000;</span><br><span class=\"line\">\t    // 获得两个时间的毫秒时间差异</span><br><span class=\"line\">\t    long diff = endDate.getTime() - beginDate.getTime();</span><br><span class=\"line\">\t    // 计算差多少天</span><br><span class=\"line\">\t    long day = diff / nd;</span><br><span class=\"line\">\t    // 计算差多少小时</span><br><span class=\"line\">\t    long hour = diff % nd / nh;</span><br><span class=\"line\">\t    // 计算差多少分钟</span><br><span class=\"line\">\t    long min = diff % nd % nh / nm;</span><br><span class=\"line\">\t    // 计算差多少秒//输出结果</span><br><span class=\"line\">\t     long sec = diff % nd % nh % nm / ns;</span><br><span class=\"line\">\t    return day + &quot;天&quot; + hour + &quot;小时&quot; + min + &quot;分&quot; + sec + &quot;秒&quot;;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>#### </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * 计算两个日期之间相差的天数</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param smdate 较小的时间</span><br><span class=\"line\">\t * @param bdate 较大的时间</span><br><span class=\"line\">\t * @return 相差天数</span><br><span class=\"line\">\t * @throws ParseException</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static int daysBetween(Date smdate, Date bdate) throws ParseException &#123;</span><br><span class=\"line\">\t\tSimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">\t\tsmdate = sdf.parse(sdf.format(smdate));</span><br><span class=\"line\">\t\tbdate = sdf.parse(sdf.format(bdate));</span><br><span class=\"line\">\t\tCalendar cal = Calendar.getInstance();</span><br><span class=\"line\">\t\tcal.setTime(smdate);</span><br><span class=\"line\">\t\tlong time1 = cal.getTimeInMillis();</span><br><span class=\"line\">\t\tcal.setTime(bdate);</span><br><span class=\"line\">\t\tlong time2 = cal.getTimeInMillis();</span><br><span class=\"line\">\t\tlong between_days = (time2 - time1) / (1000 * 3600 * 24);</span><br><span class=\"line\">\t\treturn Integer.parseInt(String.valueOf(between_days));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"string2Date\"><a href=\"#string2Date\" class=\"headerlink\" title=\"string2Date\"></a>string2Date</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">\t * 字符串转日期</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param strDate 字符串日期</span><br><span class=\"line\">\t * @param pattern 日期格式</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t * @throws ParseException</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static Date string2Date(String strDate, String pattern) throws ParseException &#123;</span><br><span class=\"line\">\t\tSimpleDateFormat sdf = new SimpleDateFormat(pattern);</span><br><span class=\"line\">\t\tDate date = sdf.parse(strDate);</span><br><span class=\"line\">\t\treturn date;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"date2String\"><a href=\"#date2String\" class=\"headerlink\" title=\"date2String\"></a>date2String</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 日期转字符串</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @param date</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> * @throws ParseException</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public static String date2String(Date date, String pattern) throws ParseException &#123;</span><br><span class=\"line\">\tSimpleDateFormat formatter = new SimpleDateFormat(pattern);</span><br><span class=\"line\">\treturn formatter.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getFirstDayOfMonth-获取指定年月的第一天\"><a href=\"#getFirstDayOfMonth-获取指定年月的第一天\" class=\"headerlink\" title=\"getFirstDayOfMonth 获取指定年月的第一天\"></a>getFirstDayOfMonth 获取指定年月的第一天</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 获取指定年月的第一天</span><br><span class=\"line\">    * @param year</span><br><span class=\"line\">    * @param month</span><br><span class=\"line\">    * @return</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public static String getFirstDayOfMonth(int year, int month) &#123;     </span><br><span class=\"line\">       Calendar cal = Calendar.getInstance();   </span><br><span class=\"line\">       //设置年份</span><br><span class=\"line\">       cal.set(Calendar.YEAR, year);</span><br><span class=\"line\">       //设置月份 </span><br><span class=\"line\">       cal.set(Calendar.MONTH, month-1); </span><br><span class=\"line\">       //获取某月最小天数</span><br><span class=\"line\">       int firstDay = cal.getMinimum(Calendar.DATE);</span><br><span class=\"line\">       //设置日历中月份的最小天数 </span><br><span class=\"line\">       cal.set(Calendar.DAY_OF_MONTH,firstDay);  </span><br><span class=\"line\">       //格式化日期</span><br><span class=\"line\">       SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">       return sdf.format(cal.getTime());  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public  String getLastDayOfMonth1(String yearmonth) &#123; </span><br><span class=\"line\"> \t  int year = Integer.parseInt(yearmonth.split(&quot;-&quot;)[0]);</span><br><span class=\"line\"> \t  int month =  Integer.parseInt(yearmonth.split(&quot;-&quot;)[1]);</span><br><span class=\"line\"> \t  return getLastDayOfMonth1(year,month);</span><br><span class=\"line\"> \t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getLastDayOfMonth-获取指定年月的最后一天\"><a href=\"#getLastDayOfMonth-获取指定年月的最后一天\" class=\"headerlink\" title=\"getLastDayOfMonth 获取指定年月的最后一天\"></a>getLastDayOfMonth 获取指定年月的最后一天</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 获取指定年月的最后一天</span><br><span class=\"line\">    * @param year</span><br><span class=\"line\">    * @param month</span><br><span class=\"line\">    * @return</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public  String getLastDayOfMonth1(int year, int month) &#123;     </span><br><span class=\"line\">        Calendar cal = Calendar.getInstance();     </span><br><span class=\"line\">        //设置年份  </span><br><span class=\"line\">        cal.set(Calendar.YEAR, year);  </span><br><span class=\"line\">        //设置月份  </span><br><span class=\"line\">        cal.set(Calendar.MONTH, month-1); </span><br><span class=\"line\">        //获取某月最大天数</span><br><span class=\"line\">        int lastDay = cal.getActualMaximum(Calendar.DATE);</span><br><span class=\"line\">        //设置日历中月份的最大天数  </span><br><span class=\"line\">        cal.set(Calendar.DAY_OF_MONTH, lastDay);  </span><br><span class=\"line\">        //格式化日期</span><br><span class=\"line\">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);  </span><br><span class=\"line\">        return sdf.format(cal.getTime());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口方面\"><a href=\"#接口方面\" class=\"headerlink\" title=\"接口方面\"></a>接口方面</h2><h4 id=\"webservice\"><a href=\"#webservice\" class=\"headerlink\" title=\"webservice\"></a>webservice</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static String postMethod(String url,String method,Object[] param)&#123;</span><br><span class=\"line\">           Service s = new  Service();</span><br><span class=\"line\">           String val =null;</span><br><span class=\"line\">           Call call;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcall = (Call) s.createCall();</span><br><span class=\"line\">\t\t\t    call.setTargetEndpointAddress(url);</span><br><span class=\"line\">\t            call.setOperation(method);</span><br><span class=\"line\">\t            call.setTimeout(new Integer(5000));</span><br><span class=\"line\">\t            val = (String)call.invoke(param);</span><br><span class=\"line\">\t            System.out.println(&quot;method:&quot;+ method+&quot;,param:&quot;  + param+&quot;,return:&quot;  + val);</span><br><span class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t  \treturn val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t  public static String postMethod(String url,String method,Object[] param, List in)&#123;</span><br><span class=\"line\">          Service s = new  Service();</span><br><span class=\"line\">          String val =null;</span><br><span class=\"line\">          Call call;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcall = (Call) s.createCall();</span><br><span class=\"line\">\t\t\t    call.setTargetEndpointAddress(url);</span><br><span class=\"line\">\t            call.setOperation(method);</span><br><span class=\"line\">\t            call.setTimeout(new Integer(5000));</span><br><span class=\"line\">\t            for (Iterator iterator = in.iterator(); iterator.hasNext();) &#123;</span><br><span class=\"line\">\t\t\t\t\tString type = (String) iterator.next();</span><br><span class=\"line\">\t\t\t\t\tcall.addParameter(type, org.apache.axis.encoding.XMLType.XSD_STRING, javax.xml.rpc.ParameterMode.IN);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t              val = (String)call.invoke(param);</span><br><span class=\"line\">\t            System.out.println(&quot;method:&quot;+ method+&quot;,param:&quot;  + param+&quot;,return:&quot;  + val);</span><br><span class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t  \treturn val;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rest-请求-get-and-post-use-HttpURLConnection\"><a href=\"#rest-请求-get-and-post-use-HttpURLConnection\" class=\"headerlink\" title=\"rest 请求 get and post use HttpURLConnection\"></a>rest 请求 get and post use HttpURLConnection</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t  /**</span><br><span class=\"line\">\t   * rest 请求</span><br><span class=\"line\">\t   * @param url</span><br><span class=\"line\">\t   * @param param</span><br><span class=\"line\">\t   * @return</span><br><span class=\"line\">\t   */</span><br><span class=\"line\">\t  public static String postMethod(String url,String method,String params)&#123;</span><br><span class=\"line\">          String val =&quot;&quot;;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t URL restServiceURL = new URL(url);</span><br><span class=\"line\">             HttpURLConnection httpConnection = (HttpURLConnection) restServiceURL.openConnection();</span><br><span class=\"line\">             httpConnection.setRequestMethod(method);</span><br><span class=\"line\">             httpConnection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class=\"line\">             httpConnection.setDoOutput(true);     //需要输出</span><br><span class=\"line\">             httpConnection.setDoInput(true);      //需要输入</span><br><span class=\"line\">//             Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; entries = params.entrySet().iterator(); </span><br><span class=\"line\">//             while (entries.hasNext()) &#123; </span><br><span class=\"line\">//               Map.Entry&lt;String, Object&gt; entry = entries.next(); </span><br><span class=\"line\">//               System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getKey()); </span><br><span class=\"line\">//               httpConnection.setRequestProperty(entry.getKey(), entry.getKey());</span><br><span class=\"line\">//             &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">             </span><br><span class=\"line\">             //建立输入流，向指向的URL传入参数</span><br><span class=\"line\">             DataOutputStream dos=new DataOutputStream(httpConnection.getOutputStream());</span><br><span class=\"line\">             dos.writeBytes(params);</span><br><span class=\"line\">             dos.flush();</span><br><span class=\"line\">             </span><br><span class=\"line\">             if (httpConnection.getResponseCode() != 200) &#123;</span><br><span class=\"line\">                    throw new RuntimeException(&quot;HTTP GET Request Failed with Error code : &quot;</span><br><span class=\"line\">                                  + httpConnection.getResponseCode());</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             BufferedReader responseBuffer = new BufferedReader(new InputStreamReader(</span><br><span class=\"line\">                    (httpConnection.getInputStream())));</span><br><span class=\"line\"></span><br><span class=\"line\">             String output;</span><br><span class=\"line\">//             System.out.println(&quot;Output from Server:  \\n&quot;);</span><br><span class=\"line\">             </span><br><span class=\"line\">             while ((output = responseBuffer.readLine()) != null) &#123;</span><br><span class=\"line\">                    System.out.println(output);</span><br><span class=\"line\">                    val = val + output;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">             httpConnection.disconnect();</span><br><span class=\"line\">\t\t\t System.out.println(&quot;url:&quot;+ url+&quot;,params:&quot;  + params+&quot;,return:&quot;  + val);</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t /** </span><br><span class=\"line\">     * 发起http请求获取返回结果 </span><br><span class=\"line\">     * @param req_url 请求地址 </span><br><span class=\"line\">     * @return </span><br><span class=\"line\">     */ </span><br><span class=\"line\">    public  String getMethod(String req_url) &#123;</span><br><span class=\"line\">        StringBuffer buffer = new StringBuffer();  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            URL url = new URL(req_url);  </span><br><span class=\"line\">            HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  </span><br><span class=\"line\"></span><br><span class=\"line\">            httpUrlConn.setDoOutput(false);  </span><br><span class=\"line\">            httpUrlConn.setDoInput(true);  </span><br><span class=\"line\">            httpUrlConn.setUseCaches(false);  </span><br><span class=\"line\"></span><br><span class=\"line\">            httpUrlConn.setRequestMethod(&quot;GET&quot;);  </span><br><span class=\"line\">            httpUrlConn.connect();  </span><br><span class=\"line\"></span><br><span class=\"line\">            // 将返回的输入流转换成字符串  </span><br><span class=\"line\">            InputStream inputStream = httpUrlConn.getInputStream();  </span><br><span class=\"line\">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);  </span><br><span class=\"line\">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  </span><br><span class=\"line\"></span><br><span class=\"line\">            String str = null;  </span><br><span class=\"line\">            while ((str = bufferedReader.readLine()) != null) &#123;  </span><br><span class=\"line\">                buffer.append(str);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            bufferedReader.close();  </span><br><span class=\"line\">            inputStreamReader.close();  </span><br><span class=\"line\">            // 释放资源  </span><br><span class=\"line\">            inputStream.close();  </span><br><span class=\"line\">            inputStream = null;  </span><br><span class=\"line\">            httpUrlConn.disconnect();  </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;  </span><br><span class=\"line\">            System.out.println(e.getStackTrace());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return buffer.toString();  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws ConfigurationException &#123;</span><br><span class=\"line\">\t\tObject[] objects = &#123;&quot;taskid&quot;&#125;;</span><br><span class=\"line\">\t\tList&lt;String&gt; in = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tin.add(&quot;taskid&quot;);</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">\t\t\tparams.put(&quot;acc&quot;, &quot;admin&quot;);</span><br><span class=\"line\">\t\t\tparams.put(&quot;pwd&quot;, &quot;q7A1ArKxRM8=&quot;);</span><br><span class=\"line\">//\t\t\t\tparams.put(&quot;accessToken&quot;, &quot;&quot;);</span><br><span class=\"line\">\t\tString pa = &quot;acc=admin&amp;pwd=q7A1ArKxRM8=&quot;;</span><br><span class=\"line\">\t\tString par = &quot;accessToken=MpOfjtPXtYGGrQhBU3mHNH/TmQZNUoN8uNBzCd9fTGxPxVnCjxR2+m5p/DTWySzX&quot;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\t\tpostMethod(&quot;http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/StartSession&quot;,</span><br><span class=\"line\">//\t\t\t\t\t&quot;POST&quot;,pa);</span><br><span class=\"line\">\t\tpostMethod(&quot;http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/CloseSession&quot;,</span><br><span class=\"line\">\t\t\t\t&quot;POST&quot;,par);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\t\tpostMethod(&quot;http://10.32.1.91:7007/OAUAcenter/services/OAOrgService&quot;,</span><br><span class=\"line\">//\t\t\t\t\t&quot;getOrgData&quot;,null);</span><br><span class=\"line\">//\t\t\tpostMethod(&quot;http://10.32.1.91:7007/OAUAcenter/services/OAProcessTaskService&quot;,</span><br><span class=\"line\">//\t\t\t\t\t&quot;endDb&quot;,objects);</span><br><span class=\"line\">//\t\t\tgetUserToken(&quot;admin&quot;);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反射常用调用\"><a href=\"#反射常用调用\" class=\"headerlink\" title=\"反射常用调用\"></a>反射常用调用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String methodName = new StringBuffer(&quot;get&quot;).append(key.substring(0, 1).toUpperCase())</span><br><span class=\"line\">       \t.append(key.substring(1)).toString();</span><br><span class=\"line\"> Method method =  PrjProject.class.getMethod(methodName);</span><br><span class=\"line\"> Object result = method.invoke(info);</span><br></pre></td></tr></table></figure>\n<h2 id=\"jdbc-数据操作\"><a href=\"#jdbc-数据操作\" class=\"headerlink\" title=\"jdbc 数据操作\"></a>jdbc 数据操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql = &quot; select count(1) as count from demo_userrole t where t.fk_userid = ? and t.fk_roleid = ? &quot;;</span><br><span class=\"line\">SqlRowSet rs = jdbc.queryForRowSet(sql, userId, roleid);</span><br><span class=\"line\">if (rs.next()) &#123;</span><br><span class=\"line\">   rs.getInt(&quot;count&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"log-Linux-权限问题\"><a href=\"#log-Linux-权限问题\" class=\"headerlink\" title=\"log Linux 权限问题\"></a>log Linux 权限问题</h2><p>通过继承RollingFileAppender或者DailyRollingFileAppender来实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.properties配置</span><br><span class=\"line\"></span><br><span class=\"line\">#输出到文件   </span><br><span class=\"line\">log4j.appender.fileInfo = com.core.log4jconfig.Mylog4jWriter</span><br><span class=\"line\">log4j.appender.fileInfo.Threshold = DEBUG   </span><br><span class=\"line\">log4j.appender.fileInfo.layout = org.apache.log4j.PatternLayout   </span><br><span class=\"line\">log4j.appender.fileInfo.layout.ConversionPattern = %d&#123;yyyy-MM-dd HH\\:mm\\:ss&#125; %p %c %x - %m%n  </span><br><span class=\"line\">log4j.appender.fileInfo.Append = TRUE   </span><br><span class=\"line\">log4j.appender.fileInfo.File = /data/my/logs/my.log   </span><br><span class=\"line\">log4j.appender.fileInfo.File=&apos;.&apos;yyyy-MM-dd</span><br></pre></td></tr></table></figure>\n<p>com.core.log4jconfig.Mylog4jWriter.java代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Mylog4jWriter extends DailyRollingFileAppender&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    @Override  </span><br><span class=\"line\">    public synchronized void setFile(String fileName, boolean append,  </span><br><span class=\"line\">            boolean bufferedIO, int bufferSize) throws IOException &#123;  </span><br><span class=\"line\">        super.setFile(fileName, append, bufferedIO, bufferSize);  </span><br><span class=\"line\">        File f = new File(fileName);  </span><br><span class=\"line\">        Set&lt;PosixFilePermission&gt; set = new HashSet&lt;PosixFilePermission&gt;();  </span><br><span class=\"line\">        set.add(PosixFilePermission.OWNER_READ);  </span><br><span class=\"line\">        set.add(PosixFilePermission.OTHERS_WRITE);  </span><br><span class=\"line\">        set.add(PosixFilePermission.GROUP_READ);  </span><br><span class=\"line\">        set.add(PosixFilePermission.OTHERS_READ);  </span><br><span class=\"line\">        if(f.exists())&#123;  </span><br><span class=\"line\">            Files.setPosixFilePermissions(f.toPath(), set);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目即可<br>生成的日志文件读写权限为rw-r–r–</p>\n<p>所有用户都有日志文件的读权限</p>\n<h4 id=\"修改-Sequence\"><a href=\"#修改-Sequence\" class=\"headerlink\" title=\"修改 Sequence\"></a>修改 Sequence</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void updateSequence() &#123;</span><br><span class=\"line\">  String sql = &quot;select SEQUENCE_NAME from ALL_SEQUENCES WHERE SEQUENCE_OWNER=&apos;database&apos;&quot;;</span><br><span class=\"line\">  List&lt;xxxx&gt; list = findByList(sql, xxxx.class);</span><br><span class=\"line\">  String updateSql1 = &quot;&quot;;</span><br><span class=\"line\">  String updateSql2 = &quot;&quot;;</span><br><span class=\"line\">  String selectSql = &quot;&quot;;</span><br><span class=\"line\">  for (xxxx p:list) &#123;</span><br><span class=\"line\">      updateSql1 = &quot;alter sequence &quot;+p.getSequence_name()+&quot; increment by 1000000&quot;;</span><br><span class=\"line\">      jdbc.update(updateSql1);</span><br><span class=\"line\">      selectSql = &quot;select &quot;+p.getSequence_name()+&quot;.nextval from dual&quot;;</span><br><span class=\"line\">      List&lt;xxxx&gt; byList = findByList(selectSql, xxxx.class);</span><br><span class=\"line\">      updateSql2 = &quot;alter sequence &quot;+p.getSequence_name()+&quot; increment by 1&quot;;</span><br><span class=\"line\">      jdbc.update(updateSql2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"读取配置文件\"><a href=\"#读取配置文件\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h2><h4 id=\"configuration2读取配置文件\"><a href=\"#configuration2读取配置文件\" class=\"headerlink\" title=\"configuration2读取配置文件\"></a>configuration2读取配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.apache.commons.configuration2.Configuration;</span><br><span class=\"line\">import org.apache.commons.configuration2.FileBasedConfiguration;</span><br><span class=\"line\">import org.apache.commons.configuration2.PropertiesConfiguration;</span><br><span class=\"line\">import org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder;</span><br><span class=\"line\">import org.apache.commons.configuration2.builder.fluent.Parameters;</span><br><span class=\"line\">import org.apache.commons.configuration2.ex.ConfigurationException;</span><br><span class=\"line\"></span><br><span class=\"line\">public static String getInclude() throws ConfigurationException &#123;</span><br><span class=\"line\">\tReloadingFileBasedConfigurationBuilder&lt;FileBasedConfiguration&gt; </span><br><span class=\"line\">\t    include = new ReloadingFileBasedConfigurationBuilder&lt;FileBasedConfiguration&gt;(PropertiesConfiguration.class)</span><br><span class=\"line\">\t\t.configure(new Parameters().properties().setEncoding(&quot;utf-8&quot;).setFileName(&quot;include.properties&quot;));</span><br><span class=\"line\">\tConfiguration config = (Configuration)include.getConfiguration();</span><br><span class=\"line\">\tString source = config.getString(&quot;ips&quot;);</span><br><span class=\"line\">\treturn source;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"static读取配置文件\"><a href=\"#static读取配置文件\" class=\"headerlink\" title=\"static读取配置文件\"></a>static读取配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public static Properties properties=new Properties();</span><br><span class=\"line\">    public static String DEFAULT_FILENAME=&quot;default.properties&quot;;</span><br><span class=\"line\">    加载配置文件</span><br><span class=\"line\">static &#123;</span><br><span class=\"line\">    // 1. load library defaults</span><br><span class=\"line\">    InputStream in = demo.class.getResourceAsStream(DEFAULT_FILENAME);//类名.class</span><br><span class=\"line\"></span><br><span class=\"line\">    if (in == null) &#123;</span><br><span class=\"line\">        throw new RuntimeException(DEFAULT_FILENAME + &quot; not found&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    if (!(in instanceof BufferedInputStream))</span><br><span class=\"line\">        in = new BufferedInputStream(in);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">        properties.load(in);</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        throw new RuntimeException(&quot;Error while processing &quot;</span><br><span class=\"line\">        + DEFAULT_FILENAME, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 获取prop值</span><br><span class=\"line\">    * @param key 输入的参数</span><br><span class=\"line\">    * @return 返回value</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static String getProperty(final String key) &#123;</span><br><span class=\"line\">    return properties.getProperty(key);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MD5加密\"><a href=\"#MD5加密\" class=\"headerlink\" title=\"MD5加密\"></a>MD5加密</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.codec.digest.DigestUtils;</span><br><span class=\"line\">public static String getUserToken(String account) &#123;</span><br><span class=\"line\">    String md5 = &quot;&quot;;</span><br><span class=\"line\">\tmd5 = DigestUtils.md5Hex(account+&quot;0.0.0.0&quot;+new Date());</span><br><span class=\"line\">\tSystem.out.println(md5);</span><br><span class=\"line\">\treturn md5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取request所有参数，和Enumeration循环\"><a href=\"#获取request所有参数，和Enumeration循环\" class=\"headerlink\" title=\"获取request所有参数，和Enumeration循环\"></a>获取request所有参数，和Enumeration循环</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Map&lt;String, String&gt; getReqParams(HttpServletRequest request)&#123;</span><br><span class=\"line\">\tEnumeration&lt;String&gt;  params = \trequest.getParameterNames();</span><br><span class=\"line\">  \tMap&lt;String, String&gt; reqparams = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">  \twhile(params.hasMoreElements())&#123;</span><br><span class=\"line\">            String value = (String)params.nextElement();//调用nextElement方法获得元素</span><br><span class=\"line\">            reqparams.put(value, request.getParameter(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \treturn reqparams;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">*</span><br><span class=\"line\">*通过request获取参数</span><br><span class=\"line\">*/</span><br><span class=\"line\">public StringBuffer getParams(HttpServletRequest request)&#123;</span><br><span class=\"line\">       Enumeration paramMap= request.getParameterNames();</span><br><span class=\"line\">       StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">       while(paramMap.hasMoreElements())&#123;</span><br><span class=\"line\">           String key = (String) paramMap.nextElement();</span><br><span class=\"line\">           sb.append(key).append(&quot;=&quot;).append(request.getParameter(key).toString()).append(&quot;&amp;&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return sb;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"get-获取文件内容并下载，变为byte-，out输出\"><a href=\"#get-获取文件内容并下载，变为byte-，out输出\" class=\"headerlink\" title=\"get 获取文件内容并下载，变为byte[]，out输出\"></a>get 获取文件内容并下载，变为byte[]，out输出</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static InputStream getInputStreamByUrl(String strUrl)&#123;</span><br><span class=\"line\">      HttpURLConnection conn = null;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">          URL url = new URL(strUrl);</span><br><span class=\"line\">          conn = (HttpURLConnection)url.openConnection();</span><br><span class=\"line\">          conn.setRequestMethod(&quot;GET&quot;);</span><br><span class=\"line\">          conn.setConnectTimeout(20 * 1000);</span><br><span class=\"line\">          final ByteArrayOutputStream output = new ByteArrayOutputStream();</span><br><span class=\"line\">          IOUtils.copy(conn.getInputStream(),output);</span><br><span class=\"line\">          return  new ByteArrayInputStream(output.toByteArray());</span><br><span class=\"line\">      &#125; catch (Exception e) &#123;</span><br><span class=\"line\">          try&#123;</span><br><span class=\"line\">              if (conn != null) &#123;</span><br><span class=\"line\">                  conn.disconnect();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;catch (Exception e1)&#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public  byte[] readBytes(InputStream in) throws IOException &#123;  </span><br><span class=\"line\">      BufferedInputStream bufin = new BufferedInputStream(in);  </span><br><span class=\"line\">      int buffSize = 1024;  </span><br><span class=\"line\">      ByteArrayOutputStream out = new ByteArrayOutputStream(buffSize);  </span><br><span class=\"line\"></span><br><span class=\"line\">      // System.out.println(&quot;Available bytes:&quot; + in.available());  </span><br><span class=\"line\"></span><br><span class=\"line\">      byte[] temp = new byte[buffSize];  </span><br><span class=\"line\">      int size = 0;  </span><br><span class=\"line\">      while ((size = bufin.read(temp)) != -1) &#123;  </span><br><span class=\"line\">          out.write(temp, 0, size);  </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      bufin.close();  </span><br><span class=\"line\">      in.close();  </span><br><span class=\"line\">      byte[] content = out.toByteArray();  </span><br><span class=\"line\">      out.close();  </span><br><span class=\"line\">      return content;  </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>然后输出到页面,commons-io-2.6.jar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.io.IOUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">\tresponse.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class=\"line\">\tresponse.setContentType(&quot;application/octet-stream&quot;);</span><br><span class=\"line\">\tresponse.setHeader(&quot;charset&quot;, &quot;utf-8&quot;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTools tools = new Tools();</span><br><span class=\"line\">\tStringBuffer sb  = tools.getParams(request);</span><br><span class=\"line\">\tString fileId = request.getParameter(&quot;fileId&quot;);</span><br><span class=\"line\">\tString fileName = request.getParameter(&quot;fileName&quot;);</span><br><span class=\"line\">\tString url = &quot;&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfileName = new String(URLDecoder.decode(fileName, &quot;UTF-8&quot;).getBytes(&quot;UTF-8&quot;), &quot;ISO8859-1&quot;);</span><br><span class=\"line\">\tresponse.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=\\&quot;&quot; + fileName + &quot;\\&quot;;filename*=UTF-8&apos;&apos;&quot; + fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInputStream inp = tools.getInputStreamByUrl(url);</span><br><span class=\"line\">\tbyte[] bytes = tools.readBytes(inp);</span><br><span class=\"line\">\tIOUtils.write(bytes, response.getOutputStream());</span><br><span class=\"line\">\tresponse.flushBuffer();</span><br><span class=\"line\">\tout.clear();</span><br><span class=\"line\">\tout = pageContext.pushBody();</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载文件。乱码等处理\"><a href=\"#下载文件。乱码等处理\" class=\"headerlink\" title=\"下载文件。乱码等处理\"></a>下载文件。乱码等处理</h4><p>commons-io-2.6.jar<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.apache.commons.io.IOUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">      //修复IE下载 文件名乱码</span><br><span class=\"line\">    String userAgent = req.getHeader(&quot;user-agent&quot;).toLowerCase();  </span><br><span class=\"line\">      if (userAgent.contains(&quot;msie&quot;) || userAgent.contains(&quot;like gecko&quot;) ) &#123;  </span><br><span class=\"line\">        // win10 ie edge 浏览器 和其他系统的ie  </span><br><span class=\"line\">        excelName = URLEncoder.encode(excelName, &quot;UTF-8&quot;);  </span><br><span class=\"line\">    &#125; else &#123;  </span><br><span class=\"line\">        // fe  </span><br><span class=\"line\">      excelName = new String(excelName.getBytes(&quot;UTF-8&quot;), &quot;iso-8859-1&quot;);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    rsp.setContentType(&quot;Application/Octet-Stream&quot;);</span><br><span class=\"line\">    PopSalaryService service = FORP.SPRING_CONTEXT.getBean(PopSalaryService.class);</span><br><span class=\"line\">    String filename = req.getServletContext().getRealPath(&quot;/disk-file/excel-template/pre-modeltemplate.xls&quot;);</span><br><span class=\"line\">    byte[] data = service.getFileByteArray(filename);</span><br><span class=\"line\">    rsp.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\\&quot;&quot; + excelName + &quot;\\&quot;&quot;);</span><br><span class=\"line\">    IOUtils.write(data, rsp.getOutputStream());</span><br><span class=\"line\">\treturn null;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"存数据库乱码变成问号-全角问题\"><a href=\"#存数据库乱码变成问号-全角问题\" class=\"headerlink\" title=\"存数据库乱码变成问号,全角问题\"></a>存数据库乱码变成问号,全角问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">byte[] space = new byte[]&#123;(byte) 0xc2,(byte) 0xa0&#125;;</span><br><span class=\"line\">   String UTFSpace =new String( space,&quot;UTF-8&quot; );</span><br><span class=\"line\">   String  result=attachment.getOriginalFilename().replaceAll(UTFSpace, &quot; &quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Map循环-获取request参数\"><a href=\"#Map循环-获取request参数\" class=\"headerlink\" title=\"Map循环,获取request参数\"></a>Map循环,获取request参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  HashMap&lt;String, Object&gt; map = (HashMap&lt;String, Object&gt;)obj;</span><br><span class=\"line\">Iterator&lt;String&gt; keys = map.keySet().iterator();</span><br><span class=\"line\">while(keys.hasNext())&#123;</span><br><span class=\"line\">\tString k = keys.next();</span><br><span class=\"line\">\tif(k.equals(key))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn map.get(k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"24位编码\"><a href=\"#24位编码\" class=\"headerlink\" title=\"24位编码\"></a>24位编码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * 24位编码： 17日期+6随机数+&quot;N&quot;</span><br><span class=\"line\">  * @return</span><br><span class=\"line\">  */</span><br><span class=\"line\">\tpublic static String getModelCode() &#123;</span><br><span class=\"line\">\t\tString ret = DateFormatUtils.format(new Date(), &quot;yyyyMMddHHmmssSSS&quot;)+(int)((Math.random()*9+1)*100000)+&quot;N&quot;;</span><br><span class=\"line\">\t\treturn ret;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成密码并验证，使用了正则，\"><a href=\"#生成密码并验证，使用了正则，\" class=\"headerlink\" title=\"生成密码并验证，使用了正则，\"></a>生成密码并验证，使用了正则，</h4><p>正则， 包含大小写字母和数字，可以包含特殊字符 ，10位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tUserService service = new UserService();</span><br><span class=\"line\">//\t\tString pattern = &quot;/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\S]&#123;8,16&#125;$/&quot;;</span><br><span class=\"line\">//\t    boolean isMatch = Pattern.matches(pattern, pass);</span><br><span class=\"line\">\t\tPattern pattern = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[\\\\S]&#123;8,16&#125;$&quot;); </span><br><span class=\"line\">\t    String pass = service.createPassWord(10);</span><br><span class=\"line\">\t    Matcher matcher = pattern.matcher(pass); </span><br><span class=\"line\">\t    boolean isMatch =   matcher.matches();</span><br><span class=\"line\">//\t\tSystem.out.println(pass+&quot;:&quot;+isMatch+&quot;:&quot;+service.getDigPwd(&quot;MuWajayC1G&quot;));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//生成密码</span><br><span class=\"line\">\tprivate String generatePwd()&#123;</span><br><span class=\"line\">        String pass = createPassWord(10);</span><br><span class=\"line\">\t\tPattern pattern = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[\\\\S]&#123;8,16&#125;$&quot;); </span><br><span class=\"line\">\t\tMatcher matcher = pattern.matcher(pass); </span><br><span class=\"line\">\t    boolean isMatch =   matcher.matches();</span><br><span class=\"line\"></span><br><span class=\"line\">\t      if(isMatch)&#123;</span><br><span class=\"line\">\t\t\t\treturn pass;</span><br><span class=\"line\">\t\t  &#125;else&#123;</span><br><span class=\"line\">\t\t\t  return generatePwd();</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 加密Password</span><br><span class=\"line\">\tprivate String getDigPwd(String pwd)&#123;</span><br><span class=\"line\">\t\treturn DigestUtils.md5Hex(FORP.MD5_SALT_PREFIX + pwd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate String createPassWord(int len)&#123;</span><br><span class=\"line\">\t    int random = this.createRandomInt();</span><br><span class=\"line\">\t    return this.createPassWord(random, len);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate String createPassWord(int random,int len)&#123;</span><br><span class=\"line\">\t    Random rd = new Random(random);</span><br><span class=\"line\">\t    final int maxNum = 62;</span><br><span class=\"line\">\t    StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">\t    int rdGet;//取得随机数</span><br><span class=\"line\">\t    char[] str = &#123; &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;,</span><br><span class=\"line\">\t        &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;,</span><br><span class=\"line\">\t        &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,</span><br><span class=\"line\">\t        &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;, &apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;,</span><br><span class=\"line\">\t        &apos;X&apos;, &apos;Y&apos; ,&apos;Z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos; &#125;;</span><br><span class=\"line\">\t    int count=0;</span><br><span class=\"line\">\t    while(count &lt; len)&#123;</span><br><span class=\"line\">\t      rdGet = Math.abs(rd.nextInt(maxNum));//生成的数最大为62-1</span><br><span class=\"line\">\t      if (rdGet &gt;= 0 &amp;&amp; rdGet &lt; str.length) &#123;</span><br><span class=\"line\">\t        sb.append(str[rdGet]);</span><br><span class=\"line\">\t        count ++;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    return sb.toString();</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  private int createRandomInt()&#123;</span><br><span class=\"line\">\t    //得到0.0到1.0之间的数字，并扩大100000倍</span><br><span class=\"line\">\t    double temp = Math.random()*100000;</span><br><span class=\"line\">\t    //如果数据等于100000，则减少1</span><br><span class=\"line\">\t    if(temp&gt;=100000)&#123;</span><br><span class=\"line\">\t      temp = 99999;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    int tempint = (int)Math.ceil(temp);</span><br><span class=\"line\">\t    return tempint;</span><br><span class=\"line\">\t  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断对象为空-判断对象不为空\"><a href=\"#判断对象为空-判断对象不为空\" class=\"headerlink\" title=\"判断对象为空 判断对象不为空\"></a>判断对象为空 判断对象不为空</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">\t * 判断对象为空</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param obj</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static boolean isEmpty(Object obj) &#123;</span><br><span class=\"line\">\t\tif (obj == null)</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof CharSequence)</span><br><span class=\"line\">\t\t\treturn ((CharSequence) obj).length() == 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof Collection)</span><br><span class=\"line\">\t\t\treturn ((Collection) obj).isEmpty();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof Map)</span><br><span class=\"line\">\t\t\treturn ((Map) obj).isEmpty();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof String)</span><br><span class=\"line\">\t\t\treturn &quot;&quot;.equals(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (obj instanceof Object[]) &#123;</span><br><span class=\"line\">\t\t\tObject[] object = (Object[]) obj;</span><br><span class=\"line\">\t\t\tif (object.length == 0) &#123;</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tboolean empty = true;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; object.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tif (!isEmpty(object[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\tempty = false;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn empty;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 判断对象不为空</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param obj</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static boolean isNotEmpty(Object obj) &#123;</span><br><span class=\"line\">\t\treturn !isEmpty(obj);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Arrays-工具\"><a href=\"#Arrays-工具\" class=\"headerlink\" title=\"Arrays 工具\"></a>Arrays 工具</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] arr =&#123;&quot;1&quot;,&quot;aaa2&quot;,&quot;3aaa&quot;,&quot;asds4&quot;&#125;;</span><br><span class=\"line\">String arrString = Arrays.toString(arr);</span><br><span class=\"line\">System.out.println(arrString);</span><br></pre></td></tr></table></figure>\n<h2 id=\"JSON-相关\"><a href=\"#JSON-相关\" class=\"headerlink\" title=\"JSON 相关\"></a>JSON 相关</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FastJson </span><br><span class=\"line\">按顺序</span><br><span class=\"line\">Map&lt;String, Object&gt; itemMap = JSONObject.parseObject(exportFiled, LinkedHashMap.class);</span><br></pre></td></tr></table></figure>\n<h2 id=\"日期相关\"><a href=\"#日期相关\" class=\"headerlink\" title=\"日期相关\"></a>日期相关</h2><h4 id=\"计算两个日期相差天数-xx天-xx天xx时xx分xx秒\"><a href=\"#计算两个日期相差天数-xx天-xx天xx时xx分xx秒\" class=\"headerlink\" title=\"计算两个日期相差天数  xx天 xx天xx时xx分xx秒\"></a>计算两个日期相差天数  xx天 xx天xx时xx分xx秒</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  String getDatePoor(Date beginDate, Date endDate) &#123;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t    long nd = 1000 * 24 * 60 * 60;</span><br><span class=\"line\">\t    long nh = 1000 * 60 * 60;</span><br><span class=\"line\">\t    long nm = 1000 * 60;</span><br><span class=\"line\">\t     long ns = 1000;</span><br><span class=\"line\">\t    // 获得两个时间的毫秒时间差异</span><br><span class=\"line\">\t    long diff = endDate.getTime() - beginDate.getTime();</span><br><span class=\"line\">\t    // 计算差多少天</span><br><span class=\"line\">\t    long day = diff / nd;</span><br><span class=\"line\">\t    // 计算差多少小时</span><br><span class=\"line\">\t    long hour = diff % nd / nh;</span><br><span class=\"line\">\t    // 计算差多少分钟</span><br><span class=\"line\">\t    long min = diff % nd % nh / nm;</span><br><span class=\"line\">\t    // 计算差多少秒//输出结果</span><br><span class=\"line\">\t     long sec = diff % nd % nh % nm / ns;</span><br><span class=\"line\">\t    return day + &quot;天&quot; + hour + &quot;小时&quot; + min + &quot;分&quot; + sec + &quot;秒&quot;;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>#### </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">\t * 计算两个日期之间相差的天数</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param smdate 较小的时间</span><br><span class=\"line\">\t * @param bdate 较大的时间</span><br><span class=\"line\">\t * @return 相差天数</span><br><span class=\"line\">\t * @throws ParseException</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static int daysBetween(Date smdate, Date bdate) throws ParseException &#123;</span><br><span class=\"line\">\t\tSimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">\t\tsmdate = sdf.parse(sdf.format(smdate));</span><br><span class=\"line\">\t\tbdate = sdf.parse(sdf.format(bdate));</span><br><span class=\"line\">\t\tCalendar cal = Calendar.getInstance();</span><br><span class=\"line\">\t\tcal.setTime(smdate);</span><br><span class=\"line\">\t\tlong time1 = cal.getTimeInMillis();</span><br><span class=\"line\">\t\tcal.setTime(bdate);</span><br><span class=\"line\">\t\tlong time2 = cal.getTimeInMillis();</span><br><span class=\"line\">\t\tlong between_days = (time2 - time1) / (1000 * 3600 * 24);</span><br><span class=\"line\">\t\treturn Integer.parseInt(String.valueOf(between_days));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"string2Date\"><a href=\"#string2Date\" class=\"headerlink\" title=\"string2Date\"></a>string2Date</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">\t * 字符串转日期</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param strDate 字符串日期</span><br><span class=\"line\">\t * @param pattern 日期格式</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t * @throws ParseException</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static Date string2Date(String strDate, String pattern) throws ParseException &#123;</span><br><span class=\"line\">\t\tSimpleDateFormat sdf = new SimpleDateFormat(pattern);</span><br><span class=\"line\">\t\tDate date = sdf.parse(strDate);</span><br><span class=\"line\">\t\treturn date;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"date2String\"><a href=\"#date2String\" class=\"headerlink\" title=\"date2String\"></a>date2String</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 日期转字符串</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @param date</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> * @throws ParseException</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public static String date2String(Date date, String pattern) throws ParseException &#123;</span><br><span class=\"line\">\tSimpleDateFormat formatter = new SimpleDateFormat(pattern);</span><br><span class=\"line\">\treturn formatter.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getFirstDayOfMonth-获取指定年月的第一天\"><a href=\"#getFirstDayOfMonth-获取指定年月的第一天\" class=\"headerlink\" title=\"getFirstDayOfMonth 获取指定年月的第一天\"></a>getFirstDayOfMonth 获取指定年月的第一天</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 获取指定年月的第一天</span><br><span class=\"line\">    * @param year</span><br><span class=\"line\">    * @param month</span><br><span class=\"line\">    * @return</span><br><span class=\"line\">    */</span><br><span class=\"line\">   public static String getFirstDayOfMonth(int year, int month) &#123;     </span><br><span class=\"line\">       Calendar cal = Calendar.getInstance();   </span><br><span class=\"line\">       //设置年份</span><br><span class=\"line\">       cal.set(Calendar.YEAR, year);</span><br><span class=\"line\">       //设置月份 </span><br><span class=\"line\">       cal.set(Calendar.MONTH, month-1); </span><br><span class=\"line\">       //获取某月最小天数</span><br><span class=\"line\">       int firstDay = cal.getMinimum(Calendar.DATE);</span><br><span class=\"line\">       //设置日历中月份的最小天数 </span><br><span class=\"line\">       cal.set(Calendar.DAY_OF_MONTH,firstDay);  </span><br><span class=\"line\">       //格式化日期</span><br><span class=\"line\">       SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">       return sdf.format(cal.getTime());  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public  String getLastDayOfMonth1(String yearmonth) &#123; </span><br><span class=\"line\"> \t  int year = Integer.parseInt(yearmonth.split(&quot;-&quot;)[0]);</span><br><span class=\"line\"> \t  int month =  Integer.parseInt(yearmonth.split(&quot;-&quot;)[1]);</span><br><span class=\"line\"> \t  return getLastDayOfMonth1(year,month);</span><br><span class=\"line\"> \t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getLastDayOfMonth-获取指定年月的最后一天\"><a href=\"#getLastDayOfMonth-获取指定年月的最后一天\" class=\"headerlink\" title=\"getLastDayOfMonth 获取指定年月的最后一天\"></a>getLastDayOfMonth 获取指定年月的最后一天</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * 获取指定年月的最后一天</span><br><span class=\"line\">    * @param year</span><br><span class=\"line\">    * @param month</span><br><span class=\"line\">    * @return</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public  String getLastDayOfMonth1(int year, int month) &#123;     </span><br><span class=\"line\">        Calendar cal = Calendar.getInstance();     </span><br><span class=\"line\">        //设置年份  </span><br><span class=\"line\">        cal.set(Calendar.YEAR, year);  </span><br><span class=\"line\">        //设置月份  </span><br><span class=\"line\">        cal.set(Calendar.MONTH, month-1); </span><br><span class=\"line\">        //获取某月最大天数</span><br><span class=\"line\">        int lastDay = cal.getActualMaximum(Calendar.DATE);</span><br><span class=\"line\">        //设置日历中月份的最大天数  </span><br><span class=\"line\">        cal.set(Calendar.DAY_OF_MONTH, lastDay);  </span><br><span class=\"line\">        //格式化日期</span><br><span class=\"line\">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);  </span><br><span class=\"line\">        return sdf.format(cal.getTime());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口方面\"><a href=\"#接口方面\" class=\"headerlink\" title=\"接口方面\"></a>接口方面</h2><h4 id=\"webservice\"><a href=\"#webservice\" class=\"headerlink\" title=\"webservice\"></a>webservice</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static String postMethod(String url,String method,Object[] param)&#123;</span><br><span class=\"line\">           Service s = new  Service();</span><br><span class=\"line\">           String val =null;</span><br><span class=\"line\">           Call call;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcall = (Call) s.createCall();</span><br><span class=\"line\">\t\t\t    call.setTargetEndpointAddress(url);</span><br><span class=\"line\">\t            call.setOperation(method);</span><br><span class=\"line\">\t            call.setTimeout(new Integer(5000));</span><br><span class=\"line\">\t            val = (String)call.invoke(param);</span><br><span class=\"line\">\t            System.out.println(&quot;method:&quot;+ method+&quot;,param:&quot;  + param+&quot;,return:&quot;  + val);</span><br><span class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t  \treturn val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t  public static String postMethod(String url,String method,Object[] param, List in)&#123;</span><br><span class=\"line\">          Service s = new  Service();</span><br><span class=\"line\">          String val =null;</span><br><span class=\"line\">          Call call;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tcall = (Call) s.createCall();</span><br><span class=\"line\">\t\t\t    call.setTargetEndpointAddress(url);</span><br><span class=\"line\">\t            call.setOperation(method);</span><br><span class=\"line\">\t            call.setTimeout(new Integer(5000));</span><br><span class=\"line\">\t            for (Iterator iterator = in.iterator(); iterator.hasNext();) &#123;</span><br><span class=\"line\">\t\t\t\t\tString type = (String) iterator.next();</span><br><span class=\"line\">\t\t\t\t\tcall.addParameter(type, org.apache.axis.encoding.XMLType.XSD_STRING, javax.xml.rpc.ParameterMode.IN);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t              val = (String)call.invoke(param);</span><br><span class=\"line\">\t            System.out.println(&quot;method:&quot;+ method+&quot;,param:&quot;  + param+&quot;,return:&quot;  + val);</span><br><span class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t  \treturn val;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rest-请求-get-and-post-use-HttpURLConnection\"><a href=\"#rest-请求-get-and-post-use-HttpURLConnection\" class=\"headerlink\" title=\"rest 请求 get and post use HttpURLConnection\"></a>rest 请求 get and post use HttpURLConnection</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t  /**</span><br><span class=\"line\">\t   * rest 请求</span><br><span class=\"line\">\t   * @param url</span><br><span class=\"line\">\t   * @param param</span><br><span class=\"line\">\t   * @return</span><br><span class=\"line\">\t   */</span><br><span class=\"line\">\t  public static String postMethod(String url,String method,String params)&#123;</span><br><span class=\"line\">          String val =&quot;&quot;;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t URL restServiceURL = new URL(url);</span><br><span class=\"line\">             HttpURLConnection httpConnection = (HttpURLConnection) restServiceURL.openConnection();</span><br><span class=\"line\">             httpConnection.setRequestMethod(method);</span><br><span class=\"line\">             httpConnection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class=\"line\">             httpConnection.setDoOutput(true);     //需要输出</span><br><span class=\"line\">             httpConnection.setDoInput(true);      //需要输入</span><br><span class=\"line\">//             Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; entries = params.entrySet().iterator(); </span><br><span class=\"line\">//             while (entries.hasNext()) &#123; </span><br><span class=\"line\">//               Map.Entry&lt;String, Object&gt; entry = entries.next(); </span><br><span class=\"line\">//               System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getKey()); </span><br><span class=\"line\">//               httpConnection.setRequestProperty(entry.getKey(), entry.getKey());</span><br><span class=\"line\">//             &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\">             </span><br><span class=\"line\">             //建立输入流，向指向的URL传入参数</span><br><span class=\"line\">             DataOutputStream dos=new DataOutputStream(httpConnection.getOutputStream());</span><br><span class=\"line\">             dos.writeBytes(params);</span><br><span class=\"line\">             dos.flush();</span><br><span class=\"line\">             </span><br><span class=\"line\">             if (httpConnection.getResponseCode() != 200) &#123;</span><br><span class=\"line\">                    throw new RuntimeException(&quot;HTTP GET Request Failed with Error code : &quot;</span><br><span class=\"line\">                                  + httpConnection.getResponseCode());</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             BufferedReader responseBuffer = new BufferedReader(new InputStreamReader(</span><br><span class=\"line\">                    (httpConnection.getInputStream())));</span><br><span class=\"line\"></span><br><span class=\"line\">             String output;</span><br><span class=\"line\">//             System.out.println(&quot;Output from Server:  \\n&quot;);</span><br><span class=\"line\">             </span><br><span class=\"line\">             while ((output = responseBuffer.readLine()) != null) &#123;</span><br><span class=\"line\">                    System.out.println(output);</span><br><span class=\"line\">                    val = val + output;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">             httpConnection.disconnect();</span><br><span class=\"line\">\t\t\t System.out.println(&quot;url:&quot;+ url+&quot;,params:&quot;  + params+&quot;,return:&quot;  + val);</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t /** </span><br><span class=\"line\">     * 发起http请求获取返回结果 </span><br><span class=\"line\">     * @param req_url 请求地址 </span><br><span class=\"line\">     * @return </span><br><span class=\"line\">     */ </span><br><span class=\"line\">    public  String getMethod(String req_url) &#123;</span><br><span class=\"line\">        StringBuffer buffer = new StringBuffer();  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            URL url = new URL(req_url);  </span><br><span class=\"line\">            HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  </span><br><span class=\"line\"></span><br><span class=\"line\">            httpUrlConn.setDoOutput(false);  </span><br><span class=\"line\">            httpUrlConn.setDoInput(true);  </span><br><span class=\"line\">            httpUrlConn.setUseCaches(false);  </span><br><span class=\"line\"></span><br><span class=\"line\">            httpUrlConn.setRequestMethod(&quot;GET&quot;);  </span><br><span class=\"line\">            httpUrlConn.connect();  </span><br><span class=\"line\"></span><br><span class=\"line\">            // 将返回的输入流转换成字符串  </span><br><span class=\"line\">            InputStream inputStream = httpUrlConn.getInputStream();  </span><br><span class=\"line\">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);  </span><br><span class=\"line\">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  </span><br><span class=\"line\"></span><br><span class=\"line\">            String str = null;  </span><br><span class=\"line\">            while ((str = bufferedReader.readLine()) != null) &#123;  </span><br><span class=\"line\">                buffer.append(str);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            bufferedReader.close();  </span><br><span class=\"line\">            inputStreamReader.close();  </span><br><span class=\"line\">            // 释放资源  </span><br><span class=\"line\">            inputStream.close();  </span><br><span class=\"line\">            inputStream = null;  </span><br><span class=\"line\">            httpUrlConn.disconnect();  </span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; catch (Exception e) &#123;  </span><br><span class=\"line\">            System.out.println(e.getStackTrace());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return buffer.toString();  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws ConfigurationException &#123;</span><br><span class=\"line\">\t\tObject[] objects = &#123;&quot;taskid&quot;&#125;;</span><br><span class=\"line\">\t\tList&lt;String&gt; in = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tin.add(&quot;taskid&quot;);</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">\t\t\tparams.put(&quot;acc&quot;, &quot;admin&quot;);</span><br><span class=\"line\">\t\t\tparams.put(&quot;pwd&quot;, &quot;q7A1ArKxRM8=&quot;);</span><br><span class=\"line\">//\t\t\t\tparams.put(&quot;accessToken&quot;, &quot;&quot;);</span><br><span class=\"line\">\t\tString pa = &quot;acc=admin&amp;pwd=q7A1ArKxRM8=&quot;;</span><br><span class=\"line\">\t\tString par = &quot;accessToken=MpOfjtPXtYGGrQhBU3mHNH/TmQZNUoN8uNBzCd9fTGxPxVnCjxR2+m5p/DTWySzX&quot;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\t\tpostMethod(&quot;http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/StartSession&quot;,</span><br><span class=\"line\">//\t\t\t\t\t&quot;POST&quot;,pa);</span><br><span class=\"line\">\t\tpostMethod(&quot;http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/CloseSession&quot;,</span><br><span class=\"line\">\t\t\t\t&quot;POST&quot;,par);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\t\tpostMethod(&quot;http://10.32.1.91:7007/OAUAcenter/services/OAOrgService&quot;,</span><br><span class=\"line\">//\t\t\t\t\t&quot;getOrgData&quot;,null);</span><br><span class=\"line\">//\t\t\tpostMethod(&quot;http://10.32.1.91:7007/OAUAcenter/services/OAProcessTaskService&quot;,</span><br><span class=\"line\">//\t\t\t\t\t&quot;endDb&quot;,objects);</span><br><span class=\"line\">//\t\t\tgetUserToken(&quot;admin&quot;);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反射常用调用\"><a href=\"#反射常用调用\" class=\"headerlink\" title=\"反射常用调用\"></a>反射常用调用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String methodName = new StringBuffer(&quot;get&quot;).append(key.substring(0, 1).toUpperCase())</span><br><span class=\"line\">       \t.append(key.substring(1)).toString();</span><br><span class=\"line\"> Method method =  PrjProject.class.getMethod(methodName);</span><br><span class=\"line\"> Object result = method.invoke(info);</span><br></pre></td></tr></table></figure>\n<h2 id=\"jdbc-数据操作\"><a href=\"#jdbc-数据操作\" class=\"headerlink\" title=\"jdbc 数据操作\"></a>jdbc 数据操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql = &quot; select count(1) as count from demo_userrole t where t.fk_userid = ? and t.fk_roleid = ? &quot;;</span><br><span class=\"line\">SqlRowSet rs = jdbc.queryForRowSet(sql, userId, roleid);</span><br><span class=\"line\">if (rs.next()) &#123;</span><br><span class=\"line\">   rs.getInt(&quot;count&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"log-Linux-权限问题\"><a href=\"#log-Linux-权限问题\" class=\"headerlink\" title=\"log Linux 权限问题\"></a>log Linux 权限问题</h2><p>通过继承RollingFileAppender或者DailyRollingFileAppender来实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.properties配置</span><br><span class=\"line\"></span><br><span class=\"line\">#输出到文件   </span><br><span class=\"line\">log4j.appender.fileInfo = com.core.log4jconfig.Mylog4jWriter</span><br><span class=\"line\">log4j.appender.fileInfo.Threshold = DEBUG   </span><br><span class=\"line\">log4j.appender.fileInfo.layout = org.apache.log4j.PatternLayout   </span><br><span class=\"line\">log4j.appender.fileInfo.layout.ConversionPattern = %d&#123;yyyy-MM-dd HH\\:mm\\:ss&#125; %p %c %x - %m%n  </span><br><span class=\"line\">log4j.appender.fileInfo.Append = TRUE   </span><br><span class=\"line\">log4j.appender.fileInfo.File = /data/my/logs/my.log   </span><br><span class=\"line\">log4j.appender.fileInfo.File=&apos;.&apos;yyyy-MM-dd</span><br></pre></td></tr></table></figure>\n<p>com.core.log4jconfig.Mylog4jWriter.java代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Mylog4jWriter extends DailyRollingFileAppender&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    @Override  </span><br><span class=\"line\">    public synchronized void setFile(String fileName, boolean append,  </span><br><span class=\"line\">            boolean bufferedIO, int bufferSize) throws IOException &#123;  </span><br><span class=\"line\">        super.setFile(fileName, append, bufferedIO, bufferSize);  </span><br><span class=\"line\">        File f = new File(fileName);  </span><br><span class=\"line\">        Set&lt;PosixFilePermission&gt; set = new HashSet&lt;PosixFilePermission&gt;();  </span><br><span class=\"line\">        set.add(PosixFilePermission.OWNER_READ);  </span><br><span class=\"line\">        set.add(PosixFilePermission.OTHERS_WRITE);  </span><br><span class=\"line\">        set.add(PosixFilePermission.GROUP_READ);  </span><br><span class=\"line\">        set.add(PosixFilePermission.OTHERS_READ);  </span><br><span class=\"line\">        if(f.exists())&#123;  </span><br><span class=\"line\">            Files.setPosixFilePermissions(f.toPath(), set);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动项目即可<br>生成的日志文件读写权限为rw-r–r–</p>\n<p>所有用户都有日志文件的读权限</p>\n<h4 id=\"修改-Sequence\"><a href=\"#修改-Sequence\" class=\"headerlink\" title=\"修改 Sequence\"></a>修改 Sequence</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void updateSequence() &#123;</span><br><span class=\"line\">  String sql = &quot;select SEQUENCE_NAME from ALL_SEQUENCES WHERE SEQUENCE_OWNER=&apos;database&apos;&quot;;</span><br><span class=\"line\">  List&lt;xxxx&gt; list = findByList(sql, xxxx.class);</span><br><span class=\"line\">  String updateSql1 = &quot;&quot;;</span><br><span class=\"line\">  String updateSql2 = &quot;&quot;;</span><br><span class=\"line\">  String selectSql = &quot;&quot;;</span><br><span class=\"line\">  for (xxxx p:list) &#123;</span><br><span class=\"line\">      updateSql1 = &quot;alter sequence &quot;+p.getSequence_name()+&quot; increment by 1000000&quot;;</span><br><span class=\"line\">      jdbc.update(updateSql1);</span><br><span class=\"line\">      selectSql = &quot;select &quot;+p.getSequence_name()+&quot;.nextval from dual&quot;;</span><br><span class=\"line\">      List&lt;xxxx&gt; byList = findByList(selectSql, xxxx.class);</span><br><span class=\"line\">      updateSql2 = &quot;alter sequence &quot;+p.getSequence_name()+&quot; increment by 1&quot;;</span><br><span class=\"line\">      jdbc.update(updateSql2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"javascript再学习之DOM","date":"2017-08-07T23:17:59.000Z","description":"对象问题innerHTML属于js原生的。DOM XMLDOM 等究竟是什么？","_content":"\n\n产生这种想法的原因是，之前在使用jQuery的时候，chrome的append(),insert(),等都没有问题，但是正式环境，他们使用的是IE9 可能是jQuery的版本太高了，不支持innerHTML，后来问我们大师，告诉我说innerHTML，都是支持的。这样这种问题一直记录到现在。最近在看jQuery的源码，才知道IE9是不支持innerHTML的，因此又学习了一下原生的javascript对DOM的操作。\n<!--more-->\n使用[caniuse.com](http://caniuse.com/#search=innerHTML)查innerHTML会有这样一个issue\n  innerHTML, insertAdjacentHTML, etc aren't supported or are read-only on the following elements in IE9 and below: col, colgroup, frameset, html, head, style, table, tbody, tfoot, thead, title, and tr.\n不支持，只读\n\n###  javascript犀牛书的词典\n\njavascript基本\nnull undefined \nString Number Boolean Array Object \n\njavascript客户端\n\n\n### jQuery 源码阅读 三个抽象方法 dir siblings domMamip\n\ndir  siblings(sibling) 针对获取、遍历\n\ndomManip 针对添加的elem片段，将一些不合规矩的元素修改一下，顺便整理一下兼容性的问题。让其符合W3C的规范。\n\n```\n\n//dir 层级关系抽象 2893\n//参数解释 ：第一个是当前节点 dir是针对 until 直到找到until结束\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\t    //如果until没有的话 truncate 为false ，不会break，只能循环结束，\n    \t//如果有的话，为true，再判断当前elem是不是until\n    //  这里使用dir把原生的属性都变成参数来获取，当前元素的dir元素\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {//while重新赋值\n\t\tif ( elem.nodeType === 1 ) {//element节点\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;//跳出循环的条件 找到这个终止until\n\t\t\t}\n\t\t\tmatched.push( elem );//同样，添加到返回数组中\n\t\t}\n\t}\n\treturn matched;\n};\n\n//兄弟节点 nextSibling\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {//重新赋值\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );//只要是节点而且这个节点不等于elem（终止条件），添加到数组中返回\n\t\t}\n\t}\n\n\treturn matched;\n};\n//当前cur的dir节点 while 的时候就把cur重新赋值了\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\n```\n\n\n### Document Element Node\n\n##### 获取 创建\n\n\n获取了element之后，再次操作的话就是针对element了。\n  ● 使用Document对象查找对象\n      ○ getElementById()：通过节点的id属性，查找对应节点。\n      ○ getElementsByName()：通过节点的name属性，查找对应节点。\n      ○ getElementsByTagName()：通过节点名称，查找对应节点。\n  ● 使用Document对象的方法创建节点：\n      ○ crateElement(tagName)：创建元素节点。\n      ○ createTextNode(data)：创建文本节点。\n      ○ createAttirbute(name)：创建属性节点。(不使用)\n\n这里的document获取在jQuery下分为几个判断，主要在init中，包含：\n    //$(\"\"), $(null), $(undefined), $(false)\n\t// Handle HTML strings\n\t\t// Match html or make sure no context is specified for #id\n\t    \t// HANDLE: $(html) -> $(array)\n\t    \t// HANDLE: $(#id) `getElementById`\n\t    // HANDLE: $(expr, $(...)) `find`复杂选择器\n\t    // HANDLE: $(expr, context) `find` `$(context).find(expr)`\n\t// HANDLE: $(DOMElement)\n\t// HANDLE: $(function)\n调用的话，返回值就是jQuery.fn对象\n复杂的直接通过Sizzle来完成了。 `jQuery.find = Sizzle;`\n\n##### 属性 attribute \n抽象方法：access \nelement 可以对属性进行操作 \n  ● 获取属性：getAttribute(name);方法\n  ● 设置属性：setAttribute(name,value)方法。\n  ● 删除属性：removeAttribute(name);方法。\n  \n```\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {//\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );//调用jQuery的removeAttr()就是下面这个\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {//节点 name =value 赋值\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;//节点类型\n\t\t//文本/注释/属性 不能get/set属性\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\t\t//不支持属性操作用jQuery.prop()\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );//如果没有getAttribute 的话就用prop\n\t\t}\n\t\t//节点不是元素而且不是XML节点\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t//hooks //checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\t\t//设置了value\n\t\tif ( value !== undefined ) {\n\t\t\t//当value=null时，没有赋值，实际上是移除值\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//把value变为name进行set/remove \n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t//设置setAttribute()\n\t\t\telem.setAttribute( name, value + \"\" );//有值设值\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\t\t// Sizzle.attr()\n\t\tret = jQuery.find.attr( elem, name );//无值取值\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\t//移除属性\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );//这里就可以看出来了。\n\t\t\t}\n\t\t}\n\t}\n} );\n\n```\n  \n  \n#####  parentNode  childNodes firstChild lastChild nextSibling previousSibling\n\n  ● 父节点：parentNode:\n      ○ parentNode返回的永远都是一个节点，因为只有元素节点才有可能包含子节点。\n      ○ document节点没有父节点。也就是文档节点没有父节点，也就是HTML\n  ● 子节点：childNode：\n      ○ childNodes，获取指定节点的所有子节点。\n      ○ firstChild：指定第一个子节点。\n      ○ lastChild：指定最后一个子节点。\n  ● 同辈节点：\n      ○ nextSibling：返回一个给定节点的下一个兄弟节点。\n      ○ previousSibling：返回一个节点的上一个兄弟节点。\n\n以document.getElementById(\"p1\")为例说明\n\n```\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n          <span>1</span>\n          <span>2</span>\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n\nvar  p1 = document.getElementById(\"p1\");\np1.parentNode == document.getElementById(\"box-one\");\np1.childNodes == \" <span>1</span><span>2</span>\";\np1.firstChild == \"<span>1</span>\";\np1.lastChild == \"<span>2</span>\";\np1.nextSibling =document.getElementByClassName(\"con2\")[0]; == \" <p class=\"con2\" >2</p> \"\np1.previousSibling 没有\n\n```\n\n\njQuery中的方法\n\n```\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},//一层 find(\"\")多层\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n\n```\n根据单词意思都可以知道jQuery这几个方法的含义。\n\n#####  appendChild  insertBefore removeChild\n\nElement对象：\n  ● 插入节点：\n      ○ appendChild(newchild)方法。 在当前节点(相当于父)内部最后添加newchild（node）\n      ○ insertBefore(newchild,refchild)方法。还要有一个调用节点，可在已有的节点（refchild）前插入一个新的节点  （newchild）\n      ○ 没有insertAfter()方法。\n  ● 删除节点：\n      ○ removeChild()方法。 您必须清楚该元素的父元素  parm.removeChild(child)\n  ● 替换节点：\n      ○ replaceChild()方法。 同删除\n\n应用：\njQuery四种插入 append  prepend before after ,其中domMamip是为了处理插入的内容elem\n```\n//内部，最后添加   appendChild原意就是在当前节点的最后添加新元素\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n//内部 最前添加   当前节点插入，引用位置refchild为当前节点的第一个儿子节点，那么自然在原节点的最前面插入。\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n//外部 ，前面最近添加    和下一个结合理解，\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n//外部 后面最近添加  当前节点的父节点 insertBefore 是在父的最后，然后又添加了一个refchild\n刚好是当前的下一个兄弟节点，那么插入位置肯定是在原节点的后面\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n```\n\n示例代码：(当前元素为documet.getElementById(\"p1\"))\n\n```\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n          <span>1</span>\n          <span>2</span>\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n```\n内部最后插入：\n```\nvar p1 = document.getElementById(\"p1\");\nvar newNode = document.createElement(\"p\"); \nnewNode.innerHTML = \" This is a newcon \"; \np1.appendChild(newNode);//直接内部插入，最后\n\n插入结果：\n\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n         <span>1</span>\n         <span>2</span>\n         <p>This is a newcon </p>//插入位置\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n    \n</div>\n\n```\n内部最前插入：\n```\nvar newNode = document.createElement(\"p\"); \nnewNode.innerHTML = \" This is a newcon \"; \nvar p1 = document.getElementById(\"p1\"); \np1.insertBefore(newNode,p1.fiestChild); // 新建的元素节点插入到 id为p1的元素内部最前面 \n结果：\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n        <p>This is a newcon </p>//插入位置\n        <span>1</span>\n        <span>2</span>\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n```\n外部最后插入：\n```\nvar newNode = document.createElement(\"p\"); \nvar p1 = document.getElementById(\"p1\"); \nnewNode.innerHTML = \" This is a newcon \"; \n//新建的元素节点插入到 id为p1后面节点元素的前面， \np1.parentNode.insertBefore(newNode,p1.nextSibling);　也就是说 插入id为P1节点元素的后面。\n　　\n插入结果：\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n        <span>1</span>\n        <span>2</span>\n    </p>\n    <p>This is a newcon </p>//插入位置\n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n```\n外部最前插入：\n```\nvar newNode = document.createElement(\"p\"); \nvar p1 = document.getElementById(\"p1\"); \nnewNode.innerHTML = \" This is a newcon \"; \n//新建的元素节点插入到 id为p1节点元素的前面， \np1.parentNode.insertBefore(newNode,p1);　也就是说 插入id为P1节点元素的前前面。\n　　\n插入结果：\n<div id=\"box-one\"> \n    <p>This is a newcon </p>//插入位置\n    <p class=\"con2\" id=\"p1\">\n        <span>1</span>\n        <span>2</span>\n    </p>\n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n\n```\n插入基本就到这里了。下面是删除removeChild\n\n```\nvar newNode = document.createElement(\"p\"); \nvar p1 = document.getElementById(\"p1\"); \nnewNode.innerHTML = \" This is a newcon \"; \np1.parentNode.removeChild(p1);\n删除结果：\n<div id=\"box-one\"> \n    //删除位置\n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n\n```\n#####  innerHTML innerText textContent\n\ninnerText 是IE自己搞出来的，规范应该是textContent\ninnerHTML 在IE8下不支持\n\n```\n//内部 所有东西替换成这个value textContent 内部的文本\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\t\t//置空  textContent == \"\"\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\t// 内部 所有文本会被解释后再展示出来 innerHTML\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\t\n```\n```\n<div id=\"demo\" value = \"demo\">\n\t<video id=\"test\" src=\"asas\"></video>\n\t<div id=\"inner\">inner</div>\n\t<div id=\"inner2\">inner2</div>\n\t\n</div>\n```\n![20170809](javascript再学习之DOM/20170809.PNG)\n\n示例代码：(当前元素为documet.getElementById(\"p1\"))\n\n```\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n    \n          <span>1</span>\n          <span>2</span>\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n\n\nvar p1 = document.getElementById(\"p1\");\n//注：不能这里只是解释说明\np1.innerHTML ==\"<span>1</span><span></span>\";\np1.innerText  == \" 1  \n                   2\";//IE8非规范，但其他浏览器也有这个\np1.textContent == \" \n                    1  \n                    2\n                    \";\n```\n\n###  参考:\n\n[初学js插入节点appendChild insertBefore使用方法](http://www.jb51.net/article/27604.htm)\n\n[被玩坏的innerHTML、innerText、textContent和value属性](http://www.cnblogs.com/fsjohnhuang/p/4319635.html)","source":"_posts/javascript再学习之DOM.md","raw":"---\ntitle: javascript再学习之DOM\ndate: 2017-08-08 07:17:59\ntags: 前端\ncategories: [javascript]\ndescription: \"对象问题innerHTML属于js原生的。DOM XMLDOM 等究竟是什么？\"\n---\n\n\n产生这种想法的原因是，之前在使用jQuery的时候，chrome的append(),insert(),等都没有问题，但是正式环境，他们使用的是IE9 可能是jQuery的版本太高了，不支持innerHTML，后来问我们大师，告诉我说innerHTML，都是支持的。这样这种问题一直记录到现在。最近在看jQuery的源码，才知道IE9是不支持innerHTML的，因此又学习了一下原生的javascript对DOM的操作。\n<!--more-->\n使用[caniuse.com](http://caniuse.com/#search=innerHTML)查innerHTML会有这样一个issue\n  innerHTML, insertAdjacentHTML, etc aren't supported or are read-only on the following elements in IE9 and below: col, colgroup, frameset, html, head, style, table, tbody, tfoot, thead, title, and tr.\n不支持，只读\n\n###  javascript犀牛书的词典\n\njavascript基本\nnull undefined \nString Number Boolean Array Object \n\njavascript客户端\n\n\n### jQuery 源码阅读 三个抽象方法 dir siblings domMamip\n\ndir  siblings(sibling) 针对获取、遍历\n\ndomManip 针对添加的elem片段，将一些不合规矩的元素修改一下，顺便整理一下兼容性的问题。让其符合W3C的规范。\n\n```\n\n//dir 层级关系抽象 2893\n//参数解释 ：第一个是当前节点 dir是针对 until 直到找到until结束\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\t    //如果until没有的话 truncate 为false ，不会break，只能循环结束，\n    \t//如果有的话，为true，再判断当前elem是不是until\n    //  这里使用dir把原生的属性都变成参数来获取，当前元素的dir元素\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {//while重新赋值\n\t\tif ( elem.nodeType === 1 ) {//element节点\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;//跳出循环的条件 找到这个终止until\n\t\t\t}\n\t\t\tmatched.push( elem );//同样，添加到返回数组中\n\t\t}\n\t}\n\treturn matched;\n};\n\n//兄弟节点 nextSibling\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {//重新赋值\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );//只要是节点而且这个节点不等于elem（终止条件），添加到数组中返回\n\t\t}\n\t}\n\n\treturn matched;\n};\n//当前cur的dir节点 while 的时候就把cur重新赋值了\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\n```\n\n\n### Document Element Node\n\n##### 获取 创建\n\n\n获取了element之后，再次操作的话就是针对element了。\n  ● 使用Document对象查找对象\n      ○ getElementById()：通过节点的id属性，查找对应节点。\n      ○ getElementsByName()：通过节点的name属性，查找对应节点。\n      ○ getElementsByTagName()：通过节点名称，查找对应节点。\n  ● 使用Document对象的方法创建节点：\n      ○ crateElement(tagName)：创建元素节点。\n      ○ createTextNode(data)：创建文本节点。\n      ○ createAttirbute(name)：创建属性节点。(不使用)\n\n这里的document获取在jQuery下分为几个判断，主要在init中，包含：\n    //$(\"\"), $(null), $(undefined), $(false)\n\t// Handle HTML strings\n\t\t// Match html or make sure no context is specified for #id\n\t    \t// HANDLE: $(html) -> $(array)\n\t    \t// HANDLE: $(#id) `getElementById`\n\t    // HANDLE: $(expr, $(...)) `find`复杂选择器\n\t    // HANDLE: $(expr, context) `find` `$(context).find(expr)`\n\t// HANDLE: $(DOMElement)\n\t// HANDLE: $(function)\n调用的话，返回值就是jQuery.fn对象\n复杂的直接通过Sizzle来完成了。 `jQuery.find = Sizzle;`\n\n##### 属性 attribute \n抽象方法：access \nelement 可以对属性进行操作 \n  ● 获取属性：getAttribute(name);方法\n  ● 设置属性：setAttribute(name,value)方法。\n  ● 删除属性：removeAttribute(name);方法。\n  \n```\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {//\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );//调用jQuery的removeAttr()就是下面这个\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {//节点 name =value 赋值\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;//节点类型\n\t\t//文本/注释/属性 不能get/set属性\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\t\t//不支持属性操作用jQuery.prop()\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );//如果没有getAttribute 的话就用prop\n\t\t}\n\t\t//节点不是元素而且不是XML节点\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t//hooks //checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\t\t//设置了value\n\t\tif ( value !== undefined ) {\n\t\t\t//当value=null时，没有赋值，实际上是移除值\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//把value变为name进行set/remove \n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t//设置setAttribute()\n\t\t\telem.setAttribute( name, value + \"\" );//有值设值\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\t\t// Sizzle.attr()\n\t\tret = jQuery.find.attr( elem, name );//无值取值\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\t//移除属性\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );//这里就可以看出来了。\n\t\t\t}\n\t\t}\n\t}\n} );\n\n```\n  \n  \n#####  parentNode  childNodes firstChild lastChild nextSibling previousSibling\n\n  ● 父节点：parentNode:\n      ○ parentNode返回的永远都是一个节点，因为只有元素节点才有可能包含子节点。\n      ○ document节点没有父节点。也就是文档节点没有父节点，也就是HTML\n  ● 子节点：childNode：\n      ○ childNodes，获取指定节点的所有子节点。\n      ○ firstChild：指定第一个子节点。\n      ○ lastChild：指定最后一个子节点。\n  ● 同辈节点：\n      ○ nextSibling：返回一个给定节点的下一个兄弟节点。\n      ○ previousSibling：返回一个节点的上一个兄弟节点。\n\n以document.getElementById(\"p1\")为例说明\n\n```\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n          <span>1</span>\n          <span>2</span>\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n\nvar  p1 = document.getElementById(\"p1\");\np1.parentNode == document.getElementById(\"box-one\");\np1.childNodes == \" <span>1</span><span>2</span>\";\np1.firstChild == \"<span>1</span>\";\np1.lastChild == \"<span>2</span>\";\np1.nextSibling =document.getElementByClassName(\"con2\")[0]; == \" <p class=\"con2\" >2</p> \"\np1.previousSibling 没有\n\n```\n\n\njQuery中的方法\n\n```\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},//一层 find(\"\")多层\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n\n```\n根据单词意思都可以知道jQuery这几个方法的含义。\n\n#####  appendChild  insertBefore removeChild\n\nElement对象：\n  ● 插入节点：\n      ○ appendChild(newchild)方法。 在当前节点(相当于父)内部最后添加newchild（node）\n      ○ insertBefore(newchild,refchild)方法。还要有一个调用节点，可在已有的节点（refchild）前插入一个新的节点  （newchild）\n      ○ 没有insertAfter()方法。\n  ● 删除节点：\n      ○ removeChild()方法。 您必须清楚该元素的父元素  parm.removeChild(child)\n  ● 替换节点：\n      ○ replaceChild()方法。 同删除\n\n应用：\njQuery四种插入 append  prepend before after ,其中domMamip是为了处理插入的内容elem\n```\n//内部，最后添加   appendChild原意就是在当前节点的最后添加新元素\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n//内部 最前添加   当前节点插入，引用位置refchild为当前节点的第一个儿子节点，那么自然在原节点的最前面插入。\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n//外部 ，前面最近添加    和下一个结合理解，\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n//外部 后面最近添加  当前节点的父节点 insertBefore 是在父的最后，然后又添加了一个refchild\n刚好是当前的下一个兄弟节点，那么插入位置肯定是在原节点的后面\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n```\n\n示例代码：(当前元素为documet.getElementById(\"p1\"))\n\n```\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n          <span>1</span>\n          <span>2</span>\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n```\n内部最后插入：\n```\nvar p1 = document.getElementById(\"p1\");\nvar newNode = document.createElement(\"p\"); \nnewNode.innerHTML = \" This is a newcon \"; \np1.appendChild(newNode);//直接内部插入，最后\n\n插入结果：\n\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n         <span>1</span>\n         <span>2</span>\n         <p>This is a newcon </p>//插入位置\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n    \n</div>\n\n```\n内部最前插入：\n```\nvar newNode = document.createElement(\"p\"); \nnewNode.innerHTML = \" This is a newcon \"; \nvar p1 = document.getElementById(\"p1\"); \np1.insertBefore(newNode,p1.fiestChild); // 新建的元素节点插入到 id为p1的元素内部最前面 \n结果：\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n        <p>This is a newcon </p>//插入位置\n        <span>1</span>\n        <span>2</span>\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n```\n外部最后插入：\n```\nvar newNode = document.createElement(\"p\"); \nvar p1 = document.getElementById(\"p1\"); \nnewNode.innerHTML = \" This is a newcon \"; \n//新建的元素节点插入到 id为p1后面节点元素的前面， \np1.parentNode.insertBefore(newNode,p1.nextSibling);　也就是说 插入id为P1节点元素的后面。\n　　\n插入结果：\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n        <span>1</span>\n        <span>2</span>\n    </p>\n    <p>This is a newcon </p>//插入位置\n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n```\n外部最前插入：\n```\nvar newNode = document.createElement(\"p\"); \nvar p1 = document.getElementById(\"p1\"); \nnewNode.innerHTML = \" This is a newcon \"; \n//新建的元素节点插入到 id为p1节点元素的前面， \np1.parentNode.insertBefore(newNode,p1);　也就是说 插入id为P1节点元素的前前面。\n　　\n插入结果：\n<div id=\"box-one\"> \n    <p>This is a newcon </p>//插入位置\n    <p class=\"con2\" id=\"p1\">\n        <span>1</span>\n        <span>2</span>\n    </p>\n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n\n```\n插入基本就到这里了。下面是删除removeChild\n\n```\nvar newNode = document.createElement(\"p\"); \nvar p1 = document.getElementById(\"p1\"); \nnewNode.innerHTML = \" This is a newcon \"; \np1.parentNode.removeChild(p1);\n删除结果：\n<div id=\"box-one\"> \n    //删除位置\n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n\n```\n#####  innerHTML innerText textContent\n\ninnerText 是IE自己搞出来的，规范应该是textContent\ninnerHTML 在IE8下不支持\n\n```\n//内部 所有东西替换成这个value textContent 内部的文本\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\t\t//置空  textContent == \"\"\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\t// 内部 所有文本会被解释后再展示出来 innerHTML\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\t\n```\n```\n<div id=\"demo\" value = \"demo\">\n\t<video id=\"test\" src=\"asas\"></video>\n\t<div id=\"inner\">inner</div>\n\t<div id=\"inner2\">inner2</div>\n\t\n</div>\n```\n![20170809](javascript再学习之DOM/20170809.PNG)\n\n示例代码：(当前元素为documet.getElementById(\"p1\"))\n\n```\n<div id=\"box-one\"> \n    <p class=\"con2\" id=\"p1\">\n    \n          <span>1</span>\n          <span>2</span>\n    </p> \n    <p class=\"con2\" >2</p> \n    <p class=\"con2\" >3</p> \n</div>\n\n\nvar p1 = document.getElementById(\"p1\");\n//注：不能这里只是解释说明\np1.innerHTML ==\"<span>1</span><span></span>\";\np1.innerText  == \" 1  \n                   2\";//IE8非规范，但其他浏览器也有这个\np1.textContent == \" \n                    1  \n                    2\n                    \";\n```\n\n###  参考:\n\n[初学js插入节点appendChild insertBefore使用方法](http://www.jb51.net/article/27604.htm)\n\n[被玩坏的innerHTML、innerText、textContent和value属性](http://www.cnblogs.com/fsjohnhuang/p/4319635.html)","slug":"javascript再学习之DOM","published":1,"updated":"2017-08-30T03:31:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7bn009uugv5efm3hxvh","content":"<p>产生这种想法的原因是，之前在使用jQuery的时候，chrome的append(),insert(),等都没有问题，但是正式环境，他们使用的是IE9 可能是jQuery的版本太高了，不支持innerHTML，后来问我们大师，告诉我说innerHTML，都是支持的。这样这种问题一直记录到现在。最近在看jQuery的源码，才知道IE9是不支持innerHTML的，因此又学习了一下原生的javascript对DOM的操作。<br><a id=\"more\"></a><br>使用<a href=\"http://caniuse.com/#search=innerHTML\" target=\"_blank\" rel=\"noopener\">caniuse.com</a>查innerHTML会有这样一个issue<br>  innerHTML, insertAdjacentHTML, etc aren’t supported or are read-only on the following elements in IE9 and below: col, colgroup, frameset, html, head, style, table, tbody, tfoot, thead, title, and tr.<br>不支持，只读</p>\n<h3 id=\"javascript犀牛书的词典\"><a href=\"#javascript犀牛书的词典\" class=\"headerlink\" title=\"javascript犀牛书的词典\"></a>javascript犀牛书的词典</h3><p>javascript基本<br>null undefined<br>String Number Boolean Array Object </p>\n<p>javascript客户端</p>\n<h3 id=\"jQuery-源码阅读-三个抽象方法-dir-siblings-domMamip\"><a href=\"#jQuery-源码阅读-三个抽象方法-dir-siblings-domMamip\" class=\"headerlink\" title=\"jQuery 源码阅读 三个抽象方法 dir siblings domMamip\"></a>jQuery 源码阅读 三个抽象方法 dir siblings domMamip</h3><p>dir  siblings(sibling) 针对获取、遍历</p>\n<p>domManip 针对添加的elem片段，将一些不合规矩的元素修改一下，顺便整理一下兼容性的问题。让其符合W3C的规范。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//dir 层级关系抽象 2893</span><br><span class=\"line\">//参数解释 ：第一个是当前节点 dir是针对 until 直到找到until结束</span><br><span class=\"line\">var dir = function( elem, dir, until ) &#123;</span><br><span class=\"line\">\tvar matched = [],</span><br><span class=\"line\">\t\ttruncate = until !== undefined;</span><br><span class=\"line\">\t    //如果until没有的话 truncate 为false ，不会break，只能循环结束，</span><br><span class=\"line\">    \t//如果有的话，为true，再判断当前elem是不是until</span><br><span class=\"line\">    //  这里使用dir把原生的属性都变成参数来获取，当前元素的dir元素</span><br><span class=\"line\">\twhile ( ( elem = elem[ dir ] ) &amp;&amp; elem.nodeType !== 9 ) &#123;//while重新赋值</span><br><span class=\"line\">\t\tif ( elem.nodeType === 1 ) &#123;//element节点</span><br><span class=\"line\">\t\t\tif ( truncate &amp;&amp; jQuery( elem ).is( until ) ) &#123;</span><br><span class=\"line\">\t\t\t\tbreak;//跳出循环的条件 找到这个终止until</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmatched.push( elem );//同样，添加到返回数组中</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn matched;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//兄弟节点 nextSibling</span><br><span class=\"line\">var siblings = function( n, elem ) &#123;</span><br><span class=\"line\">\tvar matched = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor ( ; n; n = n.nextSibling ) &#123;//重新赋值</span><br><span class=\"line\">\t\tif ( n.nodeType === 1 &amp;&amp; n !== elem ) &#123;</span><br><span class=\"line\">\t\t\tmatched.push( n );//只要是节点而且这个节点不等于elem（终止条件），添加到数组中返回</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn matched;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//当前cur的dir节点 while 的时候就把cur重新赋值了</span><br><span class=\"line\">function sibling( cur, dir ) &#123;</span><br><span class=\"line\">\twhile ( ( cur = cur[ dir ] ) &amp;&amp; cur.nodeType !== 1 ) &#123;&#125;</span><br><span class=\"line\">\treturn cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Document-Element-Node\"><a href=\"#Document-Element-Node\" class=\"headerlink\" title=\"Document Element Node\"></a>Document Element Node</h3><h5 id=\"获取-创建\"><a href=\"#获取-创建\" class=\"headerlink\" title=\"获取 创建\"></a>获取 创建</h5><p>获取了element之后，再次操作的话就是针对element了。<br>  ● 使用Document对象查找对象<br>      ○ getElementById()：通过节点的id属性，查找对应节点。<br>      ○ getElementsByName()：通过节点的name属性，查找对应节点。<br>      ○ getElementsByTagName()：通过节点名称，查找对应节点。<br>  ● 使用Document对象的方法创建节点：<br>      ○ crateElement(tagName)：创建元素节点。<br>      ○ createTextNode(data)：创建文本节点。<br>      ○ createAttirbute(name)：创建属性节点。(不使用)</p>\n<p>这里的document获取在jQuery下分为几个判断，主要在init中，包含：<br>    //$(“”), $(null), $(undefined), $(false)<br>    // Handle HTML strings<br>        // Match html or make sure no context is specified for #id<br>            // HANDLE: $(html) -&gt; $(array)<br>            // HANDLE: $(#id) <code>getElementById</code><br>        // HANDLE: $(expr, $(…)) <code>find</code>复杂选择器<br>        // HANDLE: $(expr, context) <code>find</code> <code>$(context).find(expr)</code><br>    // HANDLE: $(DOMElement)<br>    // HANDLE: $(function)<br>调用的话，返回值就是jQuery.fn对象<br>复杂的直接通过Sizzle来完成了。 <code>jQuery.find = Sizzle;</code></p>\n<h5 id=\"属性-attribute\"><a href=\"#属性-attribute\" class=\"headerlink\" title=\"属性 attribute\"></a>属性 attribute</h5><p>抽象方法：access<br>element 可以对属性进行操作<br>  ● 获取属性：getAttribute(name);方法<br>  ● 设置属性：setAttribute(name,value)方法。<br>  ● 删除属性：removeAttribute(name);方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fn.extend( &#123;</span><br><span class=\"line\">\tattr: function( name, value ) &#123;</span><br><span class=\"line\">\t\treturn access( this, jQuery.attr, name, value, arguments.length &gt; 1 );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\tremoveAttr: function( name ) &#123;//</span><br><span class=\"line\">\t\treturn this.each( function() &#123;</span><br><span class=\"line\">\t\t\tjQuery.removeAttr( this, name );//调用jQuery的removeAttr()就是下面这个</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">jQuery.extend( &#123;</span><br><span class=\"line\">\tattr: function( elem, name, value ) &#123;//节点 name =value 赋值</span><br><span class=\"line\">\t\tvar ret, hooks,</span><br><span class=\"line\">\t\t\tnType = elem.nodeType;//节点类型</span><br><span class=\"line\">\t\t//文本/注释/属性 不能get/set属性</span><br><span class=\"line\">\t\t// Don&apos;t get/set attributes on text, comment and attribute nodes</span><br><span class=\"line\">\t\tif ( nType === 3 || nType === 8 || nType === 2 ) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//不支持属性操作用jQuery.prop()</span><br><span class=\"line\">\t\t// Fallback to prop when attributes are not supported</span><br><span class=\"line\">\t\tif ( typeof elem.getAttribute === &quot;undefined&quot; ) &#123;</span><br><span class=\"line\">\t\t\treturn jQuery.prop( elem, name, value );//如果没有getAttribute 的话就用prop</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//节点不是元素而且不是XML节点</span><br><span class=\"line\">\t\t// Attribute hooks are determined by the lowercase version</span><br><span class=\"line\">\t\t//hooks //checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped</span><br><span class=\"line\">\t\t// Grab necessary hook if one is defined</span><br><span class=\"line\">\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) &#123;</span><br><span class=\"line\">\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||</span><br><span class=\"line\">\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//设置了value</span><br><span class=\"line\">\t\tif ( value !== undefined ) &#123;</span><br><span class=\"line\">\t\t\t//当value=null时，没有赋值，实际上是移除值</span><br><span class=\"line\">\t\t\tif ( value === null ) &#123;</span><br><span class=\"line\">\t\t\t\tjQuery.removeAttr( elem, name );</span><br><span class=\"line\">\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t//把value变为name进行set/remove </span><br><span class=\"line\">\t\t\tif ( hooks &amp;&amp; &quot;set&quot; in hooks &amp;&amp;</span><br><span class=\"line\">\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) &#123;</span><br><span class=\"line\">\t\t\t\treturn ret;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t//设置setAttribute()</span><br><span class=\"line\">\t\t\telem.setAttribute( name, value + &quot;&quot; );//有值设值</span><br><span class=\"line\">\t\t\treturn value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif ( hooks &amp;&amp; &quot;get&quot; in hooks &amp;&amp; ( ret = hooks.get( elem, name ) ) !== null ) &#123;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// Sizzle.attr()</span><br><span class=\"line\">\t\tret = jQuery.find.attr( elem, name );//无值取值</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Non-existent attributes return null, we normalize to undefined</span><br><span class=\"line\">\t\treturn ret == null ? undefined : ret;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t//移除属性</span><br><span class=\"line\">\tremoveAttr: function( elem, value ) &#123;</span><br><span class=\"line\">\t\tvar name,</span><br><span class=\"line\">\t\t\ti = 0,</span><br><span class=\"line\">\t\t\tattrNames = value &amp;&amp; value.match( rnotwhite );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif ( attrNames &amp;&amp; elem.nodeType === 1 ) &#123;</span><br><span class=\"line\">\t\t\twhile ( ( name = attrNames[ i++ ] ) ) &#123;</span><br><span class=\"line\">\t\t\t\telem.removeAttribute( name );//这里就可以看出来了。</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<h5 id=\"parentNode-childNodes-firstChild-lastChild-nextSibling-previousSibling\"><a href=\"#parentNode-childNodes-firstChild-lastChild-nextSibling-previousSibling\" class=\"headerlink\" title=\"parentNode  childNodes firstChild lastChild nextSibling previousSibling\"></a>parentNode  childNodes firstChild lastChild nextSibling previousSibling</h5><p>  ● 父节点：parentNode:<br>      ○ parentNode返回的永远都是一个节点，因为只有元素节点才有可能包含子节点。<br>      ○ document节点没有父节点。也就是文档节点没有父节点，也就是HTML<br>  ● 子节点：childNode：<br>      ○ childNodes，获取指定节点的所有子节点。<br>      ○ firstChild：指定第一个子节点。<br>      ○ lastChild：指定最后一个子节点。<br>  ● 同辈节点：<br>      ○ nextSibling：返回一个给定节点的下一个兄弟节点。<br>      ○ previousSibling：返回一个节点的上一个兄弟节点。</p>\n<p>以document.getElementById(“p1”)为例说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">          &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">          &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var  p1 = document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">p1.parentNode == document.getElementById(&quot;box-one&quot;);</span><br><span class=\"line\">p1.childNodes == &quot; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&quot;;</span><br><span class=\"line\">p1.firstChild == &quot;&lt;span&gt;1&lt;/span&gt;&quot;;</span><br><span class=\"line\">p1.lastChild == &quot;&lt;span&gt;2&lt;/span&gt;&quot;;</span><br><span class=\"line\">p1.nextSibling =document.getElementByClassName(&quot;con2&quot;)[0]; == &quot; &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; &quot;</span><br><span class=\"line\">p1.previousSibling 没有</span><br></pre></td></tr></table></figure>\n<p>jQuery中的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent: function( elem ) &#123;</span><br><span class=\"line\">\tvar parent = elem.parentNode;</span><br><span class=\"line\">\treturn parent &amp;&amp; parent.nodeType !== 11 ? parent : null;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">parents: function( elem ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;parentNode&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">parentsUntil: function( elem, i, until ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;parentNode&quot;, until );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">next: function( elem ) &#123;</span><br><span class=\"line\">\treturn sibling( elem, &quot;nextSibling&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">prev: function( elem ) &#123;</span><br><span class=\"line\">\treturn sibling( elem, &quot;previousSibling&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">nextAll: function( elem ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;nextSibling&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">prevAll: function( elem ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;previousSibling&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">nextUntil: function( elem, i, until ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;nextSibling&quot;, until );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">prevUntil: function( elem, i, until ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;previousSibling&quot;, until );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">siblings: function( elem ) &#123;</span><br><span class=\"line\">\treturn siblings( ( elem.parentNode || &#123;&#125; ).firstChild, elem );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">children: function( elem ) &#123;</span><br><span class=\"line\">\treturn siblings( elem.firstChild );</span><br><span class=\"line\">&#125;,//一层 find(&quot;&quot;)多层</span><br><span class=\"line\">contents: function( elem ) &#123;</span><br><span class=\"line\">\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据单词意思都可以知道jQuery这几个方法的含义。</p>\n<h5 id=\"appendChild-insertBefore-removeChild\"><a href=\"#appendChild-insertBefore-removeChild\" class=\"headerlink\" title=\"appendChild  insertBefore removeChild\"></a>appendChild  insertBefore removeChild</h5><p>Element对象：<br>  ● 插入节点：<br>      ○ appendChild(newchild)方法。 在当前节点(相当于父)内部最后添加newchild（node）<br>      ○ insertBefore(newchild,refchild)方法。还要有一个调用节点，可在已有的节点（refchild）前插入一个新的节点  （newchild）<br>      ○ 没有insertAfter()方法。<br>  ● 删除节点：<br>      ○ removeChild()方法。 您必须清楚该元素的父元素  parm.removeChild(child)<br>  ● 替换节点：<br>      ○ replaceChild()方法。 同删除</p>\n<p>应用：<br>jQuery四种插入 append  prepend before after ,其中domMamip是为了处理插入的内容elem<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//内部，最后添加   appendChild原意就是在当前节点的最后添加新元素</span><br><span class=\"line\">\tappend: function() &#123;</span><br><span class=\"line\">\t\treturn domManip( this, arguments, function( elem ) &#123;</span><br><span class=\"line\">\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class=\"line\">\t\t\t\tvar target = manipulationTarget( this, elem );</span><br><span class=\"line\">\t\t\t\ttarget.appendChild( elem );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">//内部 最前添加   当前节点插入，引用位置refchild为当前节点的第一个儿子节点，那么自然在原节点的最前面插入。</span><br><span class=\"line\">\tprepend: function() &#123;</span><br><span class=\"line\">\t\treturn domManip( this, arguments, function( elem ) &#123;</span><br><span class=\"line\">\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class=\"line\">\t\t\t\tvar target = manipulationTarget( this, elem );</span><br><span class=\"line\">\t\t\t\ttarget.insertBefore( elem, target.firstChild );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">//外部 ，前面最近添加    和下一个结合理解，</span><br><span class=\"line\">\tbefore: function() &#123;</span><br><span class=\"line\">\t\treturn domManip( this, arguments, function( elem ) &#123;</span><br><span class=\"line\">\t\t\tif ( this.parentNode ) &#123;</span><br><span class=\"line\">\t\t\t\tthis.parentNode.insertBefore( elem, this );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">//外部 后面最近添加  当前节点的父节点 insertBefore 是在父的最后，然后又添加了一个refchild</span><br><span class=\"line\">刚好是当前的下一个兄弟节点，那么插入位置肯定是在原节点的后面</span><br><span class=\"line\">\tafter: function() &#123;</span><br><span class=\"line\">\t\treturn domManip( this, arguments, function( elem ) &#123;</span><br><span class=\"line\">\t\t\tif ( this.parentNode ) &#123;</span><br><span class=\"line\">\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>示例代码：(当前元素为documet.getElementById(“p1”))</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">          &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">          &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>内部最后插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">p1.appendChild(newNode);//直接内部插入，最后</span><br><span class=\"line\"></span><br><span class=\"line\">插入结果：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">         &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">         &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">         &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>内部最前插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class=\"line\">p1.insertBefore(newNode,p1.fiestChild); // 新建的元素节点插入到 id为p1的元素内部最前面 </span><br><span class=\"line\">结果：</span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class=\"line\">        &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>外部最后插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">//新建的元素节点插入到 id为p1后面节点元素的前面， </span><br><span class=\"line\">p1.parentNode.insertBefore(newNode,p1.nextSibling);　也就是说 插入id为P1节点元素的后面。</span><br><span class=\"line\">　　</span><br><span class=\"line\">插入结果：</span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>外部最前插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">//新建的元素节点插入到 id为p1节点元素的前面， </span><br><span class=\"line\">p1.parentNode.insertBefore(newNode,p1);　也就是说 插入id为P1节点元素的前前面。</span><br><span class=\"line\">　　</span><br><span class=\"line\">插入结果：</span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>插入基本就到这里了。下面是删除removeChild</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">p1.parentNode.removeChild(p1);</span><br><span class=\"line\">删除结果：</span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    //删除位置</span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"innerHTML-innerText-textContent\"><a href=\"#innerHTML-innerText-textContent\" class=\"headerlink\" title=\"innerHTML innerText textContent\"></a>innerHTML innerText textContent</h5><p>innerText 是IE自己搞出来的，规范应该是textContent<br>innerHTML 在IE8下不支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//内部 所有东西替换成这个value textContent 内部的文本</span><br><span class=\"line\">\ttext: function( value ) &#123;</span><br><span class=\"line\">\t\treturn access( this, function( value ) &#123;</span><br><span class=\"line\">\t\t\treturn value === undefined ?</span><br><span class=\"line\">\t\t\t\tjQuery.text( this ) :</span><br><span class=\"line\">\t\t\t\tthis.empty().each( function() &#123;</span><br><span class=\"line\">\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tthis.textContent = value;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; );</span><br><span class=\"line\">\t\t&#125;, null, value, arguments.length );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t\t//置空  textContent == &quot;&quot;</span><br><span class=\"line\">\tempty: function() &#123;</span><br><span class=\"line\">\t\tvar elem,</span><br><span class=\"line\">\t\t\ti = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) &#123;</span><br><span class=\"line\">\t\t\tif ( elem.nodeType === 1 ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Prevent memory leaks</span><br><span class=\"line\">\t\t\t\tjQuery.cleanData( getAll( elem, false ) );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Remove any remaining nodes</span><br><span class=\"line\">\t\t\t\telem.textContent = &quot;&quot;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn this;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t// 内部 所有文本会被解释后再展示出来 innerHTML</span><br><span class=\"line\">\thtml: function( value ) &#123;</span><br><span class=\"line\">\t\treturn access( this, function( value ) &#123;</span><br><span class=\"line\">\t\t\tvar elem = this[ 0 ] || &#123;&#125;,</span><br><span class=\"line\">\t\t\t\ti = 0,</span><br><span class=\"line\">\t\t\t\tl = this.length;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif ( value === undefined &amp;&amp; elem.nodeType === 1 ) &#123;</span><br><span class=\"line\">\t\t\t\treturn elem.innerHTML;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// See if we can take a shortcut and just use innerHTML</span><br><span class=\"line\">\t\t\tif ( typeof value === &quot;string&quot; &amp;&amp; !rnoInnerhtml.test( value ) &amp;&amp;</span><br><span class=\"line\">\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ &quot;&quot;, &quot;&quot; ] )[ 1 ].toLowerCase() ] ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tvalue = jQuery.htmlPrefilter( value );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tfor ( ; i &lt; l; i++ ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\telem = this[ i ] || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t// Remove element nodes and prevent memory leaks</span><br><span class=\"line\">\t\t\t\t\t\tif ( elem.nodeType === 1 ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );</span><br><span class=\"line\">\t\t\t\t\t\t\telem.innerHTML = value;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\telem = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// If using innerHTML throws an exception, use the fallback method</span><br><span class=\"line\">\t\t\t\t&#125; catch ( e ) &#123;&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif ( elem ) &#123;</span><br><span class=\"line\">\t\t\t\tthis.empty().append( value );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, null, value, arguments.length );</span><br><span class=\"line\">\t&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;demo&quot; value = &quot;demo&quot;&gt;</span><br><span class=\"line\">\t&lt;video id=&quot;test&quot; src=&quot;asas&quot;&gt;&lt;/video&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;inner&quot;&gt;inner&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;inner2&quot;&gt;inner2&lt;/div&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//20170809.PNG\" alt=\"20170809\"></p>\n<p>示例代码：(当前元素为documet.getElementById(“p1”))</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">          &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">          &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">//注：不能这里只是解释说明</span><br><span class=\"line\">p1.innerHTML ==&quot;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&quot;;</span><br><span class=\"line\">p1.innerText  == &quot; 1  </span><br><span class=\"line\">                   2&quot;;//IE8非规范，但其他浏览器也有这个</span><br><span class=\"line\">p1.textContent == &quot; </span><br><span class=\"line\">                    1  </span><br><span class=\"line\">                    2</span><br><span class=\"line\">                    &quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h3><p><a href=\"http://www.jb51.net/article/27604.htm\" target=\"_blank\" rel=\"noopener\">初学js插入节点appendChild insertBefore使用方法</a></p>\n<p><a href=\"http://www.cnblogs.com/fsjohnhuang/p/4319635.html\" target=\"_blank\" rel=\"noopener\">被玩坏的innerHTML、innerText、textContent和value属性</a></p>\n","site":{"data":{}},"excerpt":"<p>产生这种想法的原因是，之前在使用jQuery的时候，chrome的append(),insert(),等都没有问题，但是正式环境，他们使用的是IE9 可能是jQuery的版本太高了，不支持innerHTML，后来问我们大师，告诉我说innerHTML，都是支持的。这样这种问题一直记录到现在。最近在看jQuery的源码，才知道IE9是不支持innerHTML的，因此又学习了一下原生的javascript对DOM的操作。<br></p>","more":"<br>使用<a href=\"http://caniuse.com/#search=innerHTML\" target=\"_blank\" rel=\"noopener\">caniuse.com</a>查innerHTML会有这样一个issue<br>  innerHTML, insertAdjacentHTML, etc aren’t supported or are read-only on the following elements in IE9 and below: col, colgroup, frameset, html, head, style, table, tbody, tfoot, thead, title, and tr.<br>不支持，只读<p></p>\n<h3 id=\"javascript犀牛书的词典\"><a href=\"#javascript犀牛书的词典\" class=\"headerlink\" title=\"javascript犀牛书的词典\"></a>javascript犀牛书的词典</h3><p>javascript基本<br>null undefined<br>String Number Boolean Array Object </p>\n<p>javascript客户端</p>\n<h3 id=\"jQuery-源码阅读-三个抽象方法-dir-siblings-domMamip\"><a href=\"#jQuery-源码阅读-三个抽象方法-dir-siblings-domMamip\" class=\"headerlink\" title=\"jQuery 源码阅读 三个抽象方法 dir siblings domMamip\"></a>jQuery 源码阅读 三个抽象方法 dir siblings domMamip</h3><p>dir  siblings(sibling) 针对获取、遍历</p>\n<p>domManip 针对添加的elem片段，将一些不合规矩的元素修改一下，顺便整理一下兼容性的问题。让其符合W3C的规范。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//dir 层级关系抽象 2893</span><br><span class=\"line\">//参数解释 ：第一个是当前节点 dir是针对 until 直到找到until结束</span><br><span class=\"line\">var dir = function( elem, dir, until ) &#123;</span><br><span class=\"line\">\tvar matched = [],</span><br><span class=\"line\">\t\ttruncate = until !== undefined;</span><br><span class=\"line\">\t    //如果until没有的话 truncate 为false ，不会break，只能循环结束，</span><br><span class=\"line\">    \t//如果有的话，为true，再判断当前elem是不是until</span><br><span class=\"line\">    //  这里使用dir把原生的属性都变成参数来获取，当前元素的dir元素</span><br><span class=\"line\">\twhile ( ( elem = elem[ dir ] ) &amp;&amp; elem.nodeType !== 9 ) &#123;//while重新赋值</span><br><span class=\"line\">\t\tif ( elem.nodeType === 1 ) &#123;//element节点</span><br><span class=\"line\">\t\t\tif ( truncate &amp;&amp; jQuery( elem ).is( until ) ) &#123;</span><br><span class=\"line\">\t\t\t\tbreak;//跳出循环的条件 找到这个终止until</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmatched.push( elem );//同样，添加到返回数组中</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn matched;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//兄弟节点 nextSibling</span><br><span class=\"line\">var siblings = function( n, elem ) &#123;</span><br><span class=\"line\">\tvar matched = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor ( ; n; n = n.nextSibling ) &#123;//重新赋值</span><br><span class=\"line\">\t\tif ( n.nodeType === 1 &amp;&amp; n !== elem ) &#123;</span><br><span class=\"line\">\t\t\tmatched.push( n );//只要是节点而且这个节点不等于elem（终止条件），添加到数组中返回</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn matched;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//当前cur的dir节点 while 的时候就把cur重新赋值了</span><br><span class=\"line\">function sibling( cur, dir ) &#123;</span><br><span class=\"line\">\twhile ( ( cur = cur[ dir ] ) &amp;&amp; cur.nodeType !== 1 ) &#123;&#125;</span><br><span class=\"line\">\treturn cur;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Document-Element-Node\"><a href=\"#Document-Element-Node\" class=\"headerlink\" title=\"Document Element Node\"></a>Document Element Node</h3><h5 id=\"获取-创建\"><a href=\"#获取-创建\" class=\"headerlink\" title=\"获取 创建\"></a>获取 创建</h5><p>获取了element之后，再次操作的话就是针对element了。<br>  ● 使用Document对象查找对象<br>      ○ getElementById()：通过节点的id属性，查找对应节点。<br>      ○ getElementsByName()：通过节点的name属性，查找对应节点。<br>      ○ getElementsByTagName()：通过节点名称，查找对应节点。<br>  ● 使用Document对象的方法创建节点：<br>      ○ crateElement(tagName)：创建元素节点。<br>      ○ createTextNode(data)：创建文本节点。<br>      ○ createAttirbute(name)：创建属性节点。(不使用)</p>\n<p>这里的document获取在jQuery下分为几个判断，主要在init中，包含：<br>    //$(“”), $(null), $(undefined), $(false)<br>    // Handle HTML strings<br>        // Match html or make sure no context is specified for #id<br>            // HANDLE: $(html) -&gt; $(array)<br>            // HANDLE: $(#id) <code>getElementById</code><br>        // HANDLE: $(expr, $(…)) <code>find</code>复杂选择器<br>        // HANDLE: $(expr, context) <code>find</code> <code>$(context).find(expr)</code><br>    // HANDLE: $(DOMElement)<br>    // HANDLE: $(function)<br>调用的话，返回值就是jQuery.fn对象<br>复杂的直接通过Sizzle来完成了。 <code>jQuery.find = Sizzle;</code></p>\n<h5 id=\"属性-attribute\"><a href=\"#属性-attribute\" class=\"headerlink\" title=\"属性 attribute\"></a>属性 attribute</h5><p>抽象方法：access<br>element 可以对属性进行操作<br>  ● 获取属性：getAttribute(name);方法<br>  ● 设置属性：setAttribute(name,value)方法。<br>  ● 删除属性：removeAttribute(name);方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fn.extend( &#123;</span><br><span class=\"line\">\tattr: function( name, value ) &#123;</span><br><span class=\"line\">\t\treturn access( this, jQuery.attr, name, value, arguments.length &gt; 1 );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\tremoveAttr: function( name ) &#123;//</span><br><span class=\"line\">\t\treturn this.each( function() &#123;</span><br><span class=\"line\">\t\t\tjQuery.removeAttr( this, name );//调用jQuery的removeAttr()就是下面这个</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">jQuery.extend( &#123;</span><br><span class=\"line\">\tattr: function( elem, name, value ) &#123;//节点 name =value 赋值</span><br><span class=\"line\">\t\tvar ret, hooks,</span><br><span class=\"line\">\t\t\tnType = elem.nodeType;//节点类型</span><br><span class=\"line\">\t\t//文本/注释/属性 不能get/set属性</span><br><span class=\"line\">\t\t// Don&apos;t get/set attributes on text, comment and attribute nodes</span><br><span class=\"line\">\t\tif ( nType === 3 || nType === 8 || nType === 2 ) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//不支持属性操作用jQuery.prop()</span><br><span class=\"line\">\t\t// Fallback to prop when attributes are not supported</span><br><span class=\"line\">\t\tif ( typeof elem.getAttribute === &quot;undefined&quot; ) &#123;</span><br><span class=\"line\">\t\t\treturn jQuery.prop( elem, name, value );//如果没有getAttribute 的话就用prop</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//节点不是元素而且不是XML节点</span><br><span class=\"line\">\t\t// Attribute hooks are determined by the lowercase version</span><br><span class=\"line\">\t\t//hooks //checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped</span><br><span class=\"line\">\t\t// Grab necessary hook if one is defined</span><br><span class=\"line\">\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) &#123;</span><br><span class=\"line\">\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||</span><br><span class=\"line\">\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//设置了value</span><br><span class=\"line\">\t\tif ( value !== undefined ) &#123;</span><br><span class=\"line\">\t\t\t//当value=null时，没有赋值，实际上是移除值</span><br><span class=\"line\">\t\t\tif ( value === null ) &#123;</span><br><span class=\"line\">\t\t\t\tjQuery.removeAttr( elem, name );</span><br><span class=\"line\">\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t//把value变为name进行set/remove </span><br><span class=\"line\">\t\t\tif ( hooks &amp;&amp; &quot;set&quot; in hooks &amp;&amp;</span><br><span class=\"line\">\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) &#123;</span><br><span class=\"line\">\t\t\t\treturn ret;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t//设置setAttribute()</span><br><span class=\"line\">\t\t\telem.setAttribute( name, value + &quot;&quot; );//有值设值</span><br><span class=\"line\">\t\t\treturn value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif ( hooks &amp;&amp; &quot;get&quot; in hooks &amp;&amp; ( ret = hooks.get( elem, name ) ) !== null ) &#123;</span><br><span class=\"line\">\t\t\treturn ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// Sizzle.attr()</span><br><span class=\"line\">\t\tret = jQuery.find.attr( elem, name );//无值取值</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Non-existent attributes return null, we normalize to undefined</span><br><span class=\"line\">\t\treturn ret == null ? undefined : ret;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t//移除属性</span><br><span class=\"line\">\tremoveAttr: function( elem, value ) &#123;</span><br><span class=\"line\">\t\tvar name,</span><br><span class=\"line\">\t\t\ti = 0,</span><br><span class=\"line\">\t\t\tattrNames = value &amp;&amp; value.match( rnotwhite );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif ( attrNames &amp;&amp; elem.nodeType === 1 ) &#123;</span><br><span class=\"line\">\t\t\twhile ( ( name = attrNames[ i++ ] ) ) &#123;</span><br><span class=\"line\">\t\t\t\telem.removeAttribute( name );//这里就可以看出来了。</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<h5 id=\"parentNode-childNodes-firstChild-lastChild-nextSibling-previousSibling\"><a href=\"#parentNode-childNodes-firstChild-lastChild-nextSibling-previousSibling\" class=\"headerlink\" title=\"parentNode  childNodes firstChild lastChild nextSibling previousSibling\"></a>parentNode  childNodes firstChild lastChild nextSibling previousSibling</h5><p>  ● 父节点：parentNode:<br>      ○ parentNode返回的永远都是一个节点，因为只有元素节点才有可能包含子节点。<br>      ○ document节点没有父节点。也就是文档节点没有父节点，也就是HTML<br>  ● 子节点：childNode：<br>      ○ childNodes，获取指定节点的所有子节点。<br>      ○ firstChild：指定第一个子节点。<br>      ○ lastChild：指定最后一个子节点。<br>  ● 同辈节点：<br>      ○ nextSibling：返回一个给定节点的下一个兄弟节点。<br>      ○ previousSibling：返回一个节点的上一个兄弟节点。</p>\n<p>以document.getElementById(“p1”)为例说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">          &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">          &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var  p1 = document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">p1.parentNode == document.getElementById(&quot;box-one&quot;);</span><br><span class=\"line\">p1.childNodes == &quot; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&quot;;</span><br><span class=\"line\">p1.firstChild == &quot;&lt;span&gt;1&lt;/span&gt;&quot;;</span><br><span class=\"line\">p1.lastChild == &quot;&lt;span&gt;2&lt;/span&gt;&quot;;</span><br><span class=\"line\">p1.nextSibling =document.getElementByClassName(&quot;con2&quot;)[0]; == &quot; &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; &quot;</span><br><span class=\"line\">p1.previousSibling 没有</span><br></pre></td></tr></table></figure>\n<p>jQuery中的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent: function( elem ) &#123;</span><br><span class=\"line\">\tvar parent = elem.parentNode;</span><br><span class=\"line\">\treturn parent &amp;&amp; parent.nodeType !== 11 ? parent : null;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">parents: function( elem ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;parentNode&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">parentsUntil: function( elem, i, until ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;parentNode&quot;, until );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">next: function( elem ) &#123;</span><br><span class=\"line\">\treturn sibling( elem, &quot;nextSibling&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">prev: function( elem ) &#123;</span><br><span class=\"line\">\treturn sibling( elem, &quot;previousSibling&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">nextAll: function( elem ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;nextSibling&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">prevAll: function( elem ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;previousSibling&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">nextUntil: function( elem, i, until ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;nextSibling&quot;, until );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">prevUntil: function( elem, i, until ) &#123;</span><br><span class=\"line\">\treturn dir( elem, &quot;previousSibling&quot;, until );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">siblings: function( elem ) &#123;</span><br><span class=\"line\">\treturn siblings( ( elem.parentNode || &#123;&#125; ).firstChild, elem );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">children: function( elem ) &#123;</span><br><span class=\"line\">\treturn siblings( elem.firstChild );</span><br><span class=\"line\">&#125;,//一层 find(&quot;&quot;)多层</span><br><span class=\"line\">contents: function( elem ) &#123;</span><br><span class=\"line\">\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据单词意思都可以知道jQuery这几个方法的含义。</p>\n<h5 id=\"appendChild-insertBefore-removeChild\"><a href=\"#appendChild-insertBefore-removeChild\" class=\"headerlink\" title=\"appendChild  insertBefore removeChild\"></a>appendChild  insertBefore removeChild</h5><p>Element对象：<br>  ● 插入节点：<br>      ○ appendChild(newchild)方法。 在当前节点(相当于父)内部最后添加newchild（node）<br>      ○ insertBefore(newchild,refchild)方法。还要有一个调用节点，可在已有的节点（refchild）前插入一个新的节点  （newchild）<br>      ○ 没有insertAfter()方法。<br>  ● 删除节点：<br>      ○ removeChild()方法。 您必须清楚该元素的父元素  parm.removeChild(child)<br>  ● 替换节点：<br>      ○ replaceChild()方法。 同删除</p>\n<p>应用：<br>jQuery四种插入 append  prepend before after ,其中domMamip是为了处理插入的内容elem<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//内部，最后添加   appendChild原意就是在当前节点的最后添加新元素</span><br><span class=\"line\">\tappend: function() &#123;</span><br><span class=\"line\">\t\treturn domManip( this, arguments, function( elem ) &#123;</span><br><span class=\"line\">\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class=\"line\">\t\t\t\tvar target = manipulationTarget( this, elem );</span><br><span class=\"line\">\t\t\t\ttarget.appendChild( elem );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">//内部 最前添加   当前节点插入，引用位置refchild为当前节点的第一个儿子节点，那么自然在原节点的最前面插入。</span><br><span class=\"line\">\tprepend: function() &#123;</span><br><span class=\"line\">\t\treturn domManip( this, arguments, function( elem ) &#123;</span><br><span class=\"line\">\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class=\"line\">\t\t\t\tvar target = manipulationTarget( this, elem );</span><br><span class=\"line\">\t\t\t\ttarget.insertBefore( elem, target.firstChild );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">//外部 ，前面最近添加    和下一个结合理解，</span><br><span class=\"line\">\tbefore: function() &#123;</span><br><span class=\"line\">\t\treturn domManip( this, arguments, function( elem ) &#123;</span><br><span class=\"line\">\t\t\tif ( this.parentNode ) &#123;</span><br><span class=\"line\">\t\t\t\tthis.parentNode.insertBefore( elem, this );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">//外部 后面最近添加  当前节点的父节点 insertBefore 是在父的最后，然后又添加了一个refchild</span><br><span class=\"line\">刚好是当前的下一个兄弟节点，那么插入位置肯定是在原节点的后面</span><br><span class=\"line\">\tafter: function() &#123;</span><br><span class=\"line\">\t\treturn domManip( this, arguments, function( elem ) &#123;</span><br><span class=\"line\">\t\t\tif ( this.parentNode ) &#123;</span><br><span class=\"line\">\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; );</span><br><span class=\"line\">\t&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>示例代码：(当前元素为documet.getElementById(“p1”))</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">          &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">          &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>内部最后插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">p1.appendChild(newNode);//直接内部插入，最后</span><br><span class=\"line\"></span><br><span class=\"line\">插入结果：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">         &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">         &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">         &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>内部最前插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class=\"line\">p1.insertBefore(newNode,p1.fiestChild); // 新建的元素节点插入到 id为p1的元素内部最前面 </span><br><span class=\"line\">结果：</span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class=\"line\">        &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>外部最后插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">//新建的元素节点插入到 id为p1后面节点元素的前面， </span><br><span class=\"line\">p1.parentNode.insertBefore(newNode,p1.nextSibling);　也就是说 插入id为P1节点元素的后面。</span><br><span class=\"line\">　　</span><br><span class=\"line\">插入结果：</span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>外部最前插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">//新建的元素节点插入到 id为p1节点元素的前面， </span><br><span class=\"line\">p1.parentNode.insertBefore(newNode,p1);　也就是说 插入id为P1节点元素的前前面。</span><br><span class=\"line\">　　</span><br><span class=\"line\">插入结果：</span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">        &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>插入基本就到这里了。下面是删除removeChild</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newNode = document.createElement(&quot;p&quot;); </span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class=\"line\">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class=\"line\">p1.parentNode.removeChild(p1);</span><br><span class=\"line\">删除结果：</span><br><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    //删除位置</span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"innerHTML-innerText-textContent\"><a href=\"#innerHTML-innerText-textContent\" class=\"headerlink\" title=\"innerHTML innerText textContent\"></a>innerHTML innerText textContent</h5><p>innerText 是IE自己搞出来的，规范应该是textContent<br>innerHTML 在IE8下不支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//内部 所有东西替换成这个value textContent 内部的文本</span><br><span class=\"line\">\ttext: function( value ) &#123;</span><br><span class=\"line\">\t\treturn access( this, function( value ) &#123;</span><br><span class=\"line\">\t\t\treturn value === undefined ?</span><br><span class=\"line\">\t\t\t\tjQuery.text( this ) :</span><br><span class=\"line\">\t\t\t\tthis.empty().each( function() &#123;</span><br><span class=\"line\">\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tthis.textContent = value;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; );</span><br><span class=\"line\">\t\t&#125;, null, value, arguments.length );</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t\t//置空  textContent == &quot;&quot;</span><br><span class=\"line\">\tempty: function() &#123;</span><br><span class=\"line\">\t\tvar elem,</span><br><span class=\"line\">\t\t\ti = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) &#123;</span><br><span class=\"line\">\t\t\tif ( elem.nodeType === 1 ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Prevent memory leaks</span><br><span class=\"line\">\t\t\t\tjQuery.cleanData( getAll( elem, false ) );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// Remove any remaining nodes</span><br><span class=\"line\">\t\t\t\telem.textContent = &quot;&quot;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn this;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t// 内部 所有文本会被解释后再展示出来 innerHTML</span><br><span class=\"line\">\thtml: function( value ) &#123;</span><br><span class=\"line\">\t\treturn access( this, function( value ) &#123;</span><br><span class=\"line\">\t\t\tvar elem = this[ 0 ] || &#123;&#125;,</span><br><span class=\"line\">\t\t\t\ti = 0,</span><br><span class=\"line\">\t\t\t\tl = this.length;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif ( value === undefined &amp;&amp; elem.nodeType === 1 ) &#123;</span><br><span class=\"line\">\t\t\t\treturn elem.innerHTML;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// See if we can take a shortcut and just use innerHTML</span><br><span class=\"line\">\t\t\tif ( typeof value === &quot;string&quot; &amp;&amp; !rnoInnerhtml.test( value ) &amp;&amp;</span><br><span class=\"line\">\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ &quot;&quot;, &quot;&quot; ] )[ 1 ].toLowerCase() ] ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tvalue = jQuery.htmlPrefilter( value );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tfor ( ; i &lt; l; i++ ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\telem = this[ i ] || &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t// Remove element nodes and prevent memory leaks</span><br><span class=\"line\">\t\t\t\t\t\tif ( elem.nodeType === 1 ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );</span><br><span class=\"line\">\t\t\t\t\t\t\telem.innerHTML = value;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\telem = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t// If using innerHTML throws an exception, use the fallback method</span><br><span class=\"line\">\t\t\t\t&#125; catch ( e ) &#123;&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif ( elem ) &#123;</span><br><span class=\"line\">\t\t\t\tthis.empty().append( value );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, null, value, arguments.length );</span><br><span class=\"line\">\t&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;demo&quot; value = &quot;demo&quot;&gt;</span><br><span class=\"line\">\t&lt;video id=&quot;test&quot; src=&quot;asas&quot;&gt;&lt;/video&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;inner&quot;&gt;inner&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;inner2&quot;&gt;inner2&lt;/div&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/.io//20170809.PNG\" alt=\"20170809\"></p>\n<p>示例代码：(当前元素为documet.getElementById(“p1”))</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">          &lt;span&gt;1&lt;/span&gt;</span><br><span class=\"line\">          &lt;span&gt;2&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class=\"line\">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">//注：不能这里只是解释说明</span><br><span class=\"line\">p1.innerHTML ==&quot;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&quot;;</span><br><span class=\"line\">p1.innerText  == &quot; 1  </span><br><span class=\"line\">                   2&quot;;//IE8非规范，但其他浏览器也有这个</span><br><span class=\"line\">p1.textContent == &quot; </span><br><span class=\"line\">                    1  </span><br><span class=\"line\">                    2</span><br><span class=\"line\">                    &quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h3><p><a href=\"http://www.jb51.net/article/27604.htm\" target=\"_blank\" rel=\"noopener\">初学js插入节点appendChild insertBefore使用方法</a></p>\n<p><a href=\"http://www.cnblogs.com/fsjohnhuang/p/4319635.html\" target=\"_blank\" rel=\"noopener\">被玩坏的innerHTML、innerText、textContent和value属性</a></p>"},{"title":"深入理解JVM之性能调优","date":"2017-08-29T05:58:04.000Z","description":"JVM参数调优以及日志展示","_content":"\n\n\n先放一下我在慕课网上的三篇关于JVM的一些手记\n- [深入理解JVM之基本构架](http://www.imooc.com/article/6143)\n- [深入理解JVM之对象生命周期](http://www.imooc.com/article/6319)\n- [深入理解JVM之类加载](http://www.imooc.com/article/6461)\n\n本次 [JVM参数](http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html)\n[GC知识要点回顾,有案例](http://blog.csdn.net/firecoder/article/details/7225654)\n[“-Xmx1024m -Xms1024m -Xmn512m -Xss256k”——Java运行参数(转)](http://blog.csdn.net/a503921892/article/details/39048889)\n[监测工具](http://www.cnblogs.com/redcreen/archive/2011/05/09/2040977.html)\nweb监测工具Javamelody.jar[Javamelody](https://muxiaobai.github.io/2017/08/02/Javamelody-%E5%B7%A5%E5%85%B7/)\njdk自带工具：\njmc: java mission  control (飞行记录器(黑匣子))\n监测:jconsole\n监视:jvisualvm   \n\njvisualvm工具插件下载地址修改为[https://visualvm.github.io/pluginscenters.html](https://visualvm.github.io/pluginscenters.html)在这个上面查找到对应的版本，进行更新。\n\n上线的话用jstack 命令行或者Java Mission Control 图形化界面（jml）\n<!--more-->\n\n![jvm](深入理解JVM之性能调优/jvm-parameter.png)\n![jvm](深入理解JVM之性能调优/堆内存.png)\n\n#### 修改tomcat 的java_opts\n\n在Catalina.bat 中添加 `set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m `\n`set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=768m -XX:MaxNewSize=768m -XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCTimeStamps  `\n`set JAVA_OPTS=-Xms6g -Xmx6g -XX:NewSize=4g -XX:MaxNewSize=4g  -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCDateStamps  -XX:+PrintTenuringDistribution`\n\n#### 各个参数的含义\n\n[JVM参数](http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html)\n\n|参数名称\t|含义\t|默认值\t|\n|:---:|:---:| :---:|\n|-Xms | 初始堆大小\t物理内存的1/64(<1GB)|默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.|\n|-Xmx |最大堆大小\t|物理内存的1/4(<1GB)|\t默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制|\n|-Xmn |\t年轻代大小(1.4 or lator) 默认1/64 | \t注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8|\n|-XX:NewSize|\t设置年轻代大小(for 1.3/1.4)|\t \t \n|-XX:MaxNewSize\t|年轻代最大值(for 1.3/1.4)|\t \t \n|-XX:PermSize\t|设置持久代(perm gen)初始值|\t物理内存的1/64|\t \n|-XX:MaxPermSize|\t设置持久代最大值\t|物理内存的1/4\t|\n|-XX:NewRatio\t| |年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代) |默认值为2，-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。|\n|-XX:SurvivorRatio|\tEden区与Survivor区的大小比值\t|默认值为8，设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10|\n\n注意：两个比率问题-XX:NewRatio  -XX:SurvivorRatio  \n\n![jvm](深入理解JVM之性能调优/jvm-model.png)\n\n设置了堆的大小-Xms 和-Xmx之后，再修改-Xmn Eden后， Survivor 根据比例配置，Old区域就会受影响（，没有Perm区域了）\n对于非堆来说就有MetaSpace Code Class\n\njdk1.8之后，把perm修改为matespace，具体的修改配置以及介绍\n在JDK8中,classe metadata(the virtual machines internal presentation of Java class),\n被存储在叫做Metaspace的native memory。一些新的flags被加入：\n\n|参数名称\t|含义\t|默认值\t|\n|:---:|:---:| :---:|\n|-XX:MetaspaceSize| class metadata的初始空间配额，以bytes为单位，|达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。\n|-XX:MaxMetaspaceSize|可以为class metadata分配的最大空间。|默认是没有限制的。 32位的JVM默认MaxPermSize是64M 但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。\n|-XX:MinMetaspaceFreeRatio|在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集\n|-XX:MaxMetaspaceFreeRatio|在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集\n \n☆-XX:+UseParNewGC -XX:+UseConcMarkSweepGC 使用ParNew 和 CMS \n-XX:CMSInitiatingOccupancyFraction=80 即老年代满80%时触发CMS(full gc)，调高则full gc相对减少，调低则full gc处理得比较快；\n-XX:+UseCMSCompactAtFullCollection 或 -XX:CMSFullGCsBeforeCompaction=5 即full gc前或后做碎片整理。\n\n每次full gc之后，进行压缩 -XX:CMSFullGCsBeforeCompaction=0\n\nCMS的两个挑战：\n1. 堆碎片\nCMS收集器默认并没有任何碎片整理的机制。所以可能会出现这样的情形：\n即使总的堆大小远没有耗尽但却不能分配对象，仅仅是因为没有足够连续的空间完全容纳对象。\n当这种事发生后，JVM会触发Full GC\n\n2. 对象分配率高\n获取对象实例的频率高于收集器清除堆里死对象的频率\n并发模式失败： 老年代没有足够的可用空间来容纳一个从年轻代提升过来的对象\n此时JVM会执行堆碎片整理：触发Full GC\n\n\n\n\n以下参数没有具体尝试，\n\n|参数名称\t|含义\t|默认值\t|\n|:---:|:---:| :---:|\n|-Xss\t|每个线程的堆栈大小\t |\tJDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长）和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize一般设置这个值就可以了。|\n|-XX:ThreadStackSize|\tThread Stack Size\t|(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]|\n|-XX:LargePageSizeInBytes\t|内存页的大小不可设置过大， 会影响Perm的大小\t| \t=128m|\n|-XX:+UseFastAccessorMethods\t|原始类型的快速优化\t| \t \n|-XX:+DisableExplicitGC\t|关闭System.gc()\t \t|这个参数需要严格的测试|\n|-XX:MaxTenuringThreshold\t|垃圾最大年龄\t |\t如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.|\n|-XX:+AggressiveOpts\t|加快编译\t \t \n|-XX:+UseBiasedLocking|\t锁机制的性能改善\t \t \n|-Xnoclassgc\t|禁用垃圾回收\t \t \n|-XX:SoftRefLRUPolicyMSPerMB\t|每兆堆空闲空间中SoftReference的存活时间\t|1s\tsoftly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap|\n|-XX:PretenureSizeThreshold |\t对象超过多大是直接在旧生代分配\t|0\t单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.|\n|-XX:TLABWasteTargetPercent|\tTLAB占eden区的百分比|\t1%\t| \n|-XX:+CollectGen0First|\tFullGC时是否先YGC\t|false\t |\n\n\n其他功能，方便之后查找问题\n\n|参数名称\t|含义\t|默认值\t|\n|:---:|:---:| :---:|\n|-XX:+HeapDumpOnOutOfMemoryError|在OutOfMenory的时候自动创建Heapdump,注：其中不设-XX:HeapDumpPath时，dump出的文件在/tomcat_home/bin目录下|-XX:HeapDumpPath=D:/heapdump,文章最后还有手动生成jmap|\n\n\n为了分析可以将gc日志搞出来\n\n| 属性        |     说明\t     | \n| :--------:  | :---------------:| \n|-XX:+PrintGC | \t 输出形式 :  [GC 118250K->113543K(130112K), 0.0094143 secs]  [Full GC 121376K->10414K(130112K), 0.0650971 secs]   |  \n|-XX:+PrintGCDetails  |输出形式:[GC [DefNew: 8614K->781K(9088K), 0.0123035 secs] 118250K->113543K(130112K), 0.0124633 secs] [GC [DefNew: 8614K->8614K(9088K), 0.0000665 secs][Tenured: 112761K->10414K(121024K), 0.0433488 secs] 121376K->10414K(130112K), 0.0436268 secs]|\n|-XX:+PrintGCTimeStamps\t | -XX:+PrintGCDateStamps |\t \t \n|-XX:+PrintGC:PrintGCTimeStamps\t \t| \t可与-XX:+PrintGC -XX:+PrintGCDetails混合使用  输出形式:11.851: [GC 98328K->93620K(130112K), 0.0082960 secs]|\n|-XX:+PrintGCApplicationStoppedTime\t|打印垃圾回收期间程序暂停的时间.可与上面混合使用\t输出形式:Total time for which application threads were stopped: 0.0468229 seconds|\n|-XX:+PrintGCApplicationConcurrentTime\t|打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用\t \t输出形式:Application time: 0.5291524 seconds|\n|-XX:+PrintHeapAtGC\t|打印GC前后的详细堆栈信息\t |\t \n|-Xloggc:../logs/gc.log\t|把相关日志信息记录到文件以便分析.|\n|-XX:+PrintClassHistogram | garbage collects before printing the histogram.\t与上面几个配合使用\t\t |\n|-XX:+PrintTLAB\t|查看TLAB空间的使用情况\t \t |\n|-XX:+PrintTenuringDistribution\t|查看每次minor GC后新的存活周期的阈值\t\t Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。|\n|-XX:+PrintTenuringDistribution | 打印对象年龄 默认配置的15，jvm是动态对象年龄判定的 取决于survivor的大小，调大survivor会增加age|\n|-XX:MaxTenuringThreshold=10|Desired survivor size 40239104 bytes, new threshold 6 (max 6)意思是说对象在survivor区域中经过10minorGC还存活的话就提拔到老生代。再比如 -XX:SurvivorRatio=65536 -XX:MaxTenuringThreshold=0这样的配置实际上就是去掉了survivor区域，直接将对象从eden区域提拔到老生代  |\n\n#### tomcat下的几个日志\n\ngc日志 配置Catalina.bat JAVA_OPTS\n-XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC\n \n##### 根据gc log分析收集器\n\n[日志含义及分析](http://blog.csdn.net/doc_sgl/article/details/46594123)\n默认的垃圾收集器 PS Scavenge 和PS MarkSweep  对应 PS Eden 和PS Old, Parallel Scavenge 和Serial Old\n`-XX:+UseParallelGC `\n```\nJava HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by \"java_re\" with MS VC++ 10.0 (VS2010)\nMemory: 4k page, physical 8299408k(1668496k free), swap 16596956k(4817128k free)\nCommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:NewSize=536870912 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC \n3.009: [GC (Allocation Failure) [PSYoungGen: 393216K->44906K(458752K)] 393216K->44994K(983040K), 0.0299992 secs] [Times: user=0.09 sys=0.02, real=0.03 secs] \n4.184: [GC (Metadata GC Threshold) [PSYoungGen: 438122K->52440K(458752K)] 438210K->52536K(983040K), 0.0307814 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] \n4.215: [Full GC (Metadata GC Threshold) [PSYoungGen: 52440K->0K(458752K)] [ParOldGen: 96K->50332K(524288K)] 52536K->50332K(983040K), [Metaspace: 20805K->20805K(1069056K)], 0.0588943 secs] [Times: user=0.19 sys=0.03, real=0.06 secs] \n5.833: [GC (Metadata GC Threshold) [PSYoungGen: 223304K->16405K(458752K)] 273636K->66746K(983040K), 0.0090804 secs] [Times: user=0.00 sys=0.03, real=0.01 secs] \n5.842: [Full GC (Metadata GC Threshold) [PSYoungGen: 16405K->0K(458752K)] [ParOldGen: 50340K->35102K(524288K)] 66746K->35102K(983040K), [Metaspace: 34776K->34776K(1081344K)], 0.0372804 secs] [Times: user=0.09 sys=0.00, real=0.04 secs] \n```\n说明 进行了三次 Minor GC(Metadata GC Threshold)和二次Full GC (Metadata GC Threshold)，PSYoungGen 和ParOldGen Metaspace三个区域进行garbage回收，\n\n\n-XX:+UseParNewGC  -XX:+UseConcMarkSweepGC对应  ParNew Eden 和 CMS Old\n\n各种收集器的搭配 \n![jvm](深入理解JVM之性能调优/gc收集器.jpg)\n![jvm参数设置](深入理解JVM之性能调优/jvmGC.png)\n\n参数：`-XX:+UseConcMarkSweepGC -XX:+UseParNewGC ` \n\n```\nJava HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by \"java_re\" with MS VC++ 10.0 (VS2010)\nMemory: 4k page, physical 8299408k(1605020k free), swap 16596956k(4755960k free)\nCommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:MaxTenuringThreshold=6 -XX:NewSize=536870912 -XX:OldPLABSize=16 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC \n2.538: [GC (Allocation Failure) 2.538: [ParNew: 419456K->45084K(471872K), 0.0319020 secs] 419456K->45084K(996160K), 0.0320000 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] \n4.063: [GC (Allocation Failure) 4.063: [ParNew: 464540K->47903K(471872K), 0.0510502 secs] 464540K->62045K(996160K), 0.0511090 secs] [Times: user=0.19 sys=0.00, real=0.05 secs] \n4.114: [GC (CMS Initial Mark) [1 CMS-initial-mark: 14142K(524288K)] 69798K(996160K), 0.0044547 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n4.119: [CMS-concurrent-mark-start]\n4.131: [CMS-concurrent-mark: 0.013/0.013 secs] [Times: user=0.06 sys=0.00, real=0.01 secs] \n4.131: [CMS-concurrent-preclean-start]\n4.132: [CMS-concurrent-preclean: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n4.132: [CMS-concurrent-abortable-preclean-start]\n5.631: [CMS-concurrent-abortable-preclean: 1.022/1.499 secs] [Times: user=3.53 sys=0.31, real=1.50 secs] \n5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs] \n5.657: [CMS-concurrent-sweep-start]\n5.660: [CMS-concurrent-sweep: 0.003/0.003 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n5.660: [CMS-concurrent-reset-start]\n5.660: [CMS-concurrent-reset: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n310.132: [GC (Allocation Failure) 310.132: [ParNew: 467359K->25032K(471872K), 0.0437937 secs] 481496K->47728K(996160K), 0.0438755 secs] [Times: user=0.03 sys=0.05, real=0.04 secs] \n2176.769: [GC (Allocation Failure) 2176.769: [ParNew: 444488K->20094K(471872K), 0.0397949 secs] 467184K->42790K(996160K), 0.0399206 secs] [Times: user=0.13 sys=0.00, real=0.04 secs] \n4106.112: [GC (Allocation Failure) 4106.112: [ParNew: 439550K->27010K(471872K), 0.0349045 secs] 462246K->49707K(996160K), 0.0350339 secs] [Times: user=0.05 sys=0.03, real=0.03 secs] \n\n```\n\n5次GC (Allocation Failure)和2次Full GC ，这个我还没有看出来怎么是两次，CMS Initial Mark 一次， CMS Final Remark一次？好像jconsole和jvisualvm的统计不一致。\n5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs] \n这个是全部GC的， YG occupancy、Rescan (parallel)、weak refs processing、class unloadingscrub symbol table、scrub string table、1 CMS-remark\n\n\n|-XX:+PrintTenuringDistribution\t|查看每次minor GC后新的存活周期的阈值\t\t Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。|\n\n```\nDesired survivor size 40239104 bytes, new threshold 6 (max 6)\n- age   1:   38395784 bytes,   38395784 total\n: 697938K->46713K(707840K), 0.0827063 secs] 697938K->62235K(969984K), 0.0828384 secs] [Times: user=0.26 sys=0.00, real=0.08 secs] \n2017-11-06T17:47:26.663+0800: 2084.592: [GC (Allocation Failure) 2017-11-06T17:47:26.663+0800: 2084.592: [ParNew\nDesired survivor size 40239104 bytes, new threshold 6 (max 6)\n- age   1:    7222536 bytes,    7222536 total\n- age   2:   12782736 bytes,   20005272 total\n: 675961K->26286K(707840K), 0.0380878 secs] 691483K->41807K(969984K), 0.0382007 secs] [Times: user=0.06 sys=0.00, real=0.04 secs] \n\n```\n\n经常性的 \"premature promotion”， 最总会导致大量短期对象被提升到老年代， 最终导致老年代空间不足， 引发另一个 JVM 内存问题 “promotion failure”（提升失败： 即老年代空间不足以容乃 Minor GC 中提升上来的对象）\n\n阈值 6\n\n\n-XX:+PrintHeapAtGC 打印GC前后的堆栈信息\n```\n{Heap before GC invocations=0 (full 0):\n par new generation   total 707840K, used 629248K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)\n  eden space 629248K, 100% used [0x00000000c0000000, 0x00000000e6680000, 0x00000000e6680000)\n  from space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)\n  to   space 78592K,   0% used [0x00000000eb340000, 0x00000000eb340000, 0x00000000f0000000)\n concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)\n Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K\n  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K\n2017-11-07T21:14:24.642+0800: 12.757: [GC (Allocation Failure) 2017-11-07T21:14:24.642+0800: 12.757: [ParNew\nDesired survivor size 40239104 bytes, new threshold 1 (max 6)\n- age   1:   73044040 bytes,   73044040 total\n: 629248K->71474K(707840K), 0.0671453 secs] 629248K->71474K(969984K), 0.0672460 secs] [Times: user=0.14 sys=0.05, real=0.07 secs] \nHeap after GC invocations=1 (full 0):\n par new generation   total 707840K, used 71474K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)\n  eden space 629248K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000e6680000)\n  from space 78592K,  90% used [0x00000000eb340000, 0x00000000ef90ca70, 0x00000000f0000000)\n  to   space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)\n concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)\n Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K\n  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K\n}\n```\n\n\ncatalina host-manage manager localhost日志 配置Catalina.bat JAVA_OPTS\n-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=\"..\\conf\\logging.properties\" \n对应下面几个\nlocalhost.2012-07-05.txt\ncatalina.2012-07-05.txt\nmanager.2012-07-05.txt\nhost-manager.2012-07-05.txt\n\n\n访问日志access_log 配置server.xml Host节点内部添加的Valve\n`<Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs/tomcat\"  prefix=\"localhost_access_log.\" suffix=\".txt\" pattern=\"common\" resolveHosts=\"false\"/>`\n\napp日志\nlog4j 应用内部的log\n\n\n#### 堆文件分析\n\n\n查看pid : jps  -m -l\n生成hprof文件 : jmap -dump:format=b,file=log.hprof [pid]\n\n\n`-XX:+HeapDumpOnOutOfMemoryError` 自动生成dump \n\n##### visual VM  jvisualvm工具亦可\n\n##### eclipse中的分析工具加载地址: http://www.eclipse.org/mat/downloads.php 找到Update Site\n\n在Eclipse中点击Windows->Open Perspective->Other->Memory Analysis\n导入.hprof文件\n在MAT中点击 File->Open File,浏览到刚刚转换而得到的.hprof文件，并Cancel掉自动生成报告,点击Dominator Tree，并按Package分组，\n选择自己所定义的Package 类点右键，在弹出菜单中选择List objects->With incoming references。\n这时会列出所有可疑类，右键点击某一项，并选择Path to GC Roots->exclude weak/soft references,\n会进一步筛选出跟程序相关的所有有内存泄露的类。据此，可以追踪到代码中的某一个产生泄露的类。\n\n\n","source":"_posts/深入理解JVM之性能调优.md","raw":"---\ntitle: 深入理解JVM之性能调优\ndate: 2017-08-29 13:58:04\ntags: [jvm,tomcat]\ncategories: [java,性能优化]\ndescription: \"JVM参数调优以及日志展示\"\n---\n\n\n\n先放一下我在慕课网上的三篇关于JVM的一些手记\n- [深入理解JVM之基本构架](http://www.imooc.com/article/6143)\n- [深入理解JVM之对象生命周期](http://www.imooc.com/article/6319)\n- [深入理解JVM之类加载](http://www.imooc.com/article/6461)\n\n本次 [JVM参数](http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html)\n[GC知识要点回顾,有案例](http://blog.csdn.net/firecoder/article/details/7225654)\n[“-Xmx1024m -Xms1024m -Xmn512m -Xss256k”——Java运行参数(转)](http://blog.csdn.net/a503921892/article/details/39048889)\n[监测工具](http://www.cnblogs.com/redcreen/archive/2011/05/09/2040977.html)\nweb监测工具Javamelody.jar[Javamelody](https://muxiaobai.github.io/2017/08/02/Javamelody-%E5%B7%A5%E5%85%B7/)\njdk自带工具：\njmc: java mission  control (飞行记录器(黑匣子))\n监测:jconsole\n监视:jvisualvm   \n\njvisualvm工具插件下载地址修改为[https://visualvm.github.io/pluginscenters.html](https://visualvm.github.io/pluginscenters.html)在这个上面查找到对应的版本，进行更新。\n\n上线的话用jstack 命令行或者Java Mission Control 图形化界面（jml）\n<!--more-->\n\n![jvm](深入理解JVM之性能调优/jvm-parameter.png)\n![jvm](深入理解JVM之性能调优/堆内存.png)\n\n#### 修改tomcat 的java_opts\n\n在Catalina.bat 中添加 `set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m `\n`set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=768m -XX:MaxNewSize=768m -XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCTimeStamps  `\n`set JAVA_OPTS=-Xms6g -Xmx6g -XX:NewSize=4g -XX:MaxNewSize=4g  -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCDateStamps  -XX:+PrintTenuringDistribution`\n\n#### 各个参数的含义\n\n[JVM参数](http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html)\n\n|参数名称\t|含义\t|默认值\t|\n|:---:|:---:| :---:|\n|-Xms | 初始堆大小\t物理内存的1/64(<1GB)|默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.|\n|-Xmx |最大堆大小\t|物理内存的1/4(<1GB)|\t默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制|\n|-Xmn |\t年轻代大小(1.4 or lator) 默认1/64 | \t注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8|\n|-XX:NewSize|\t设置年轻代大小(for 1.3/1.4)|\t \t \n|-XX:MaxNewSize\t|年轻代最大值(for 1.3/1.4)|\t \t \n|-XX:PermSize\t|设置持久代(perm gen)初始值|\t物理内存的1/64|\t \n|-XX:MaxPermSize|\t设置持久代最大值\t|物理内存的1/4\t|\n|-XX:NewRatio\t| |年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代) |默认值为2，-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。|\n|-XX:SurvivorRatio|\tEden区与Survivor区的大小比值\t|默认值为8，设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10|\n\n注意：两个比率问题-XX:NewRatio  -XX:SurvivorRatio  \n\n![jvm](深入理解JVM之性能调优/jvm-model.png)\n\n设置了堆的大小-Xms 和-Xmx之后，再修改-Xmn Eden后， Survivor 根据比例配置，Old区域就会受影响（，没有Perm区域了）\n对于非堆来说就有MetaSpace Code Class\n\njdk1.8之后，把perm修改为matespace，具体的修改配置以及介绍\n在JDK8中,classe metadata(the virtual machines internal presentation of Java class),\n被存储在叫做Metaspace的native memory。一些新的flags被加入：\n\n|参数名称\t|含义\t|默认值\t|\n|:---:|:---:| :---:|\n|-XX:MetaspaceSize| class metadata的初始空间配额，以bytes为单位，|达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。\n|-XX:MaxMetaspaceSize|可以为class metadata分配的最大空间。|默认是没有限制的。 32位的JVM默认MaxPermSize是64M 但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。\n|-XX:MinMetaspaceFreeRatio|在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集\n|-XX:MaxMetaspaceFreeRatio|在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集\n \n☆-XX:+UseParNewGC -XX:+UseConcMarkSweepGC 使用ParNew 和 CMS \n-XX:CMSInitiatingOccupancyFraction=80 即老年代满80%时触发CMS(full gc)，调高则full gc相对减少，调低则full gc处理得比较快；\n-XX:+UseCMSCompactAtFullCollection 或 -XX:CMSFullGCsBeforeCompaction=5 即full gc前或后做碎片整理。\n\n每次full gc之后，进行压缩 -XX:CMSFullGCsBeforeCompaction=0\n\nCMS的两个挑战：\n1. 堆碎片\nCMS收集器默认并没有任何碎片整理的机制。所以可能会出现这样的情形：\n即使总的堆大小远没有耗尽但却不能分配对象，仅仅是因为没有足够连续的空间完全容纳对象。\n当这种事发生后，JVM会触发Full GC\n\n2. 对象分配率高\n获取对象实例的频率高于收集器清除堆里死对象的频率\n并发模式失败： 老年代没有足够的可用空间来容纳一个从年轻代提升过来的对象\n此时JVM会执行堆碎片整理：触发Full GC\n\n\n\n\n以下参数没有具体尝试，\n\n|参数名称\t|含义\t|默认值\t|\n|:---:|:---:| :---:|\n|-Xss\t|每个线程的堆栈大小\t |\tJDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长）和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize一般设置这个值就可以了。|\n|-XX:ThreadStackSize|\tThread Stack Size\t|(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]|\n|-XX:LargePageSizeInBytes\t|内存页的大小不可设置过大， 会影响Perm的大小\t| \t=128m|\n|-XX:+UseFastAccessorMethods\t|原始类型的快速优化\t| \t \n|-XX:+DisableExplicitGC\t|关闭System.gc()\t \t|这个参数需要严格的测试|\n|-XX:MaxTenuringThreshold\t|垃圾最大年龄\t |\t如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.|\n|-XX:+AggressiveOpts\t|加快编译\t \t \n|-XX:+UseBiasedLocking|\t锁机制的性能改善\t \t \n|-Xnoclassgc\t|禁用垃圾回收\t \t \n|-XX:SoftRefLRUPolicyMSPerMB\t|每兆堆空闲空间中SoftReference的存活时间\t|1s\tsoftly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap|\n|-XX:PretenureSizeThreshold |\t对象超过多大是直接在旧生代分配\t|0\t单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.|\n|-XX:TLABWasteTargetPercent|\tTLAB占eden区的百分比|\t1%\t| \n|-XX:+CollectGen0First|\tFullGC时是否先YGC\t|false\t |\n\n\n其他功能，方便之后查找问题\n\n|参数名称\t|含义\t|默认值\t|\n|:---:|:---:| :---:|\n|-XX:+HeapDumpOnOutOfMemoryError|在OutOfMenory的时候自动创建Heapdump,注：其中不设-XX:HeapDumpPath时，dump出的文件在/tomcat_home/bin目录下|-XX:HeapDumpPath=D:/heapdump,文章最后还有手动生成jmap|\n\n\n为了分析可以将gc日志搞出来\n\n| 属性        |     说明\t     | \n| :--------:  | :---------------:| \n|-XX:+PrintGC | \t 输出形式 :  [GC 118250K->113543K(130112K), 0.0094143 secs]  [Full GC 121376K->10414K(130112K), 0.0650971 secs]   |  \n|-XX:+PrintGCDetails  |输出形式:[GC [DefNew: 8614K->781K(9088K), 0.0123035 secs] 118250K->113543K(130112K), 0.0124633 secs] [GC [DefNew: 8614K->8614K(9088K), 0.0000665 secs][Tenured: 112761K->10414K(121024K), 0.0433488 secs] 121376K->10414K(130112K), 0.0436268 secs]|\n|-XX:+PrintGCTimeStamps\t | -XX:+PrintGCDateStamps |\t \t \n|-XX:+PrintGC:PrintGCTimeStamps\t \t| \t可与-XX:+PrintGC -XX:+PrintGCDetails混合使用  输出形式:11.851: [GC 98328K->93620K(130112K), 0.0082960 secs]|\n|-XX:+PrintGCApplicationStoppedTime\t|打印垃圾回收期间程序暂停的时间.可与上面混合使用\t输出形式:Total time for which application threads were stopped: 0.0468229 seconds|\n|-XX:+PrintGCApplicationConcurrentTime\t|打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用\t \t输出形式:Application time: 0.5291524 seconds|\n|-XX:+PrintHeapAtGC\t|打印GC前后的详细堆栈信息\t |\t \n|-Xloggc:../logs/gc.log\t|把相关日志信息记录到文件以便分析.|\n|-XX:+PrintClassHistogram | garbage collects before printing the histogram.\t与上面几个配合使用\t\t |\n|-XX:+PrintTLAB\t|查看TLAB空间的使用情况\t \t |\n|-XX:+PrintTenuringDistribution\t|查看每次minor GC后新的存活周期的阈值\t\t Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。|\n|-XX:+PrintTenuringDistribution | 打印对象年龄 默认配置的15，jvm是动态对象年龄判定的 取决于survivor的大小，调大survivor会增加age|\n|-XX:MaxTenuringThreshold=10|Desired survivor size 40239104 bytes, new threshold 6 (max 6)意思是说对象在survivor区域中经过10minorGC还存活的话就提拔到老生代。再比如 -XX:SurvivorRatio=65536 -XX:MaxTenuringThreshold=0这样的配置实际上就是去掉了survivor区域，直接将对象从eden区域提拔到老生代  |\n\n#### tomcat下的几个日志\n\ngc日志 配置Catalina.bat JAVA_OPTS\n-XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC\n \n##### 根据gc log分析收集器\n\n[日志含义及分析](http://blog.csdn.net/doc_sgl/article/details/46594123)\n默认的垃圾收集器 PS Scavenge 和PS MarkSweep  对应 PS Eden 和PS Old, Parallel Scavenge 和Serial Old\n`-XX:+UseParallelGC `\n```\nJava HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by \"java_re\" with MS VC++ 10.0 (VS2010)\nMemory: 4k page, physical 8299408k(1668496k free), swap 16596956k(4817128k free)\nCommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:NewSize=536870912 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC \n3.009: [GC (Allocation Failure) [PSYoungGen: 393216K->44906K(458752K)] 393216K->44994K(983040K), 0.0299992 secs] [Times: user=0.09 sys=0.02, real=0.03 secs] \n4.184: [GC (Metadata GC Threshold) [PSYoungGen: 438122K->52440K(458752K)] 438210K->52536K(983040K), 0.0307814 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] \n4.215: [Full GC (Metadata GC Threshold) [PSYoungGen: 52440K->0K(458752K)] [ParOldGen: 96K->50332K(524288K)] 52536K->50332K(983040K), [Metaspace: 20805K->20805K(1069056K)], 0.0588943 secs] [Times: user=0.19 sys=0.03, real=0.06 secs] \n5.833: [GC (Metadata GC Threshold) [PSYoungGen: 223304K->16405K(458752K)] 273636K->66746K(983040K), 0.0090804 secs] [Times: user=0.00 sys=0.03, real=0.01 secs] \n5.842: [Full GC (Metadata GC Threshold) [PSYoungGen: 16405K->0K(458752K)] [ParOldGen: 50340K->35102K(524288K)] 66746K->35102K(983040K), [Metaspace: 34776K->34776K(1081344K)], 0.0372804 secs] [Times: user=0.09 sys=0.00, real=0.04 secs] \n```\n说明 进行了三次 Minor GC(Metadata GC Threshold)和二次Full GC (Metadata GC Threshold)，PSYoungGen 和ParOldGen Metaspace三个区域进行garbage回收，\n\n\n-XX:+UseParNewGC  -XX:+UseConcMarkSweepGC对应  ParNew Eden 和 CMS Old\n\n各种收集器的搭配 \n![jvm](深入理解JVM之性能调优/gc收集器.jpg)\n![jvm参数设置](深入理解JVM之性能调优/jvmGC.png)\n\n参数：`-XX:+UseConcMarkSweepGC -XX:+UseParNewGC ` \n\n```\nJava HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by \"java_re\" with MS VC++ 10.0 (VS2010)\nMemory: 4k page, physical 8299408k(1605020k free), swap 16596956k(4755960k free)\nCommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:MaxTenuringThreshold=6 -XX:NewSize=536870912 -XX:OldPLABSize=16 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC \n2.538: [GC (Allocation Failure) 2.538: [ParNew: 419456K->45084K(471872K), 0.0319020 secs] 419456K->45084K(996160K), 0.0320000 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] \n4.063: [GC (Allocation Failure) 4.063: [ParNew: 464540K->47903K(471872K), 0.0510502 secs] 464540K->62045K(996160K), 0.0511090 secs] [Times: user=0.19 sys=0.00, real=0.05 secs] \n4.114: [GC (CMS Initial Mark) [1 CMS-initial-mark: 14142K(524288K)] 69798K(996160K), 0.0044547 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n4.119: [CMS-concurrent-mark-start]\n4.131: [CMS-concurrent-mark: 0.013/0.013 secs] [Times: user=0.06 sys=0.00, real=0.01 secs] \n4.131: [CMS-concurrent-preclean-start]\n4.132: [CMS-concurrent-preclean: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n4.132: [CMS-concurrent-abortable-preclean-start]\n5.631: [CMS-concurrent-abortable-preclean: 1.022/1.499 secs] [Times: user=3.53 sys=0.31, real=1.50 secs] \n5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs] \n5.657: [CMS-concurrent-sweep-start]\n5.660: [CMS-concurrent-sweep: 0.003/0.003 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n5.660: [CMS-concurrent-reset-start]\n5.660: [CMS-concurrent-reset: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n310.132: [GC (Allocation Failure) 310.132: [ParNew: 467359K->25032K(471872K), 0.0437937 secs] 481496K->47728K(996160K), 0.0438755 secs] [Times: user=0.03 sys=0.05, real=0.04 secs] \n2176.769: [GC (Allocation Failure) 2176.769: [ParNew: 444488K->20094K(471872K), 0.0397949 secs] 467184K->42790K(996160K), 0.0399206 secs] [Times: user=0.13 sys=0.00, real=0.04 secs] \n4106.112: [GC (Allocation Failure) 4106.112: [ParNew: 439550K->27010K(471872K), 0.0349045 secs] 462246K->49707K(996160K), 0.0350339 secs] [Times: user=0.05 sys=0.03, real=0.03 secs] \n\n```\n\n5次GC (Allocation Failure)和2次Full GC ，这个我还没有看出来怎么是两次，CMS Initial Mark 一次， CMS Final Remark一次？好像jconsole和jvisualvm的统计不一致。\n5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs] \n这个是全部GC的， YG occupancy、Rescan (parallel)、weak refs processing、class unloadingscrub symbol table、scrub string table、1 CMS-remark\n\n\n|-XX:+PrintTenuringDistribution\t|查看每次minor GC后新的存活周期的阈值\t\t Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。|\n\n```\nDesired survivor size 40239104 bytes, new threshold 6 (max 6)\n- age   1:   38395784 bytes,   38395784 total\n: 697938K->46713K(707840K), 0.0827063 secs] 697938K->62235K(969984K), 0.0828384 secs] [Times: user=0.26 sys=0.00, real=0.08 secs] \n2017-11-06T17:47:26.663+0800: 2084.592: [GC (Allocation Failure) 2017-11-06T17:47:26.663+0800: 2084.592: [ParNew\nDesired survivor size 40239104 bytes, new threshold 6 (max 6)\n- age   1:    7222536 bytes,    7222536 total\n- age   2:   12782736 bytes,   20005272 total\n: 675961K->26286K(707840K), 0.0380878 secs] 691483K->41807K(969984K), 0.0382007 secs] [Times: user=0.06 sys=0.00, real=0.04 secs] \n\n```\n\n经常性的 \"premature promotion”， 最总会导致大量短期对象被提升到老年代， 最终导致老年代空间不足， 引发另一个 JVM 内存问题 “promotion failure”（提升失败： 即老年代空间不足以容乃 Minor GC 中提升上来的对象）\n\n阈值 6\n\n\n-XX:+PrintHeapAtGC 打印GC前后的堆栈信息\n```\n{Heap before GC invocations=0 (full 0):\n par new generation   total 707840K, used 629248K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)\n  eden space 629248K, 100% used [0x00000000c0000000, 0x00000000e6680000, 0x00000000e6680000)\n  from space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)\n  to   space 78592K,   0% used [0x00000000eb340000, 0x00000000eb340000, 0x00000000f0000000)\n concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)\n Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K\n  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K\n2017-11-07T21:14:24.642+0800: 12.757: [GC (Allocation Failure) 2017-11-07T21:14:24.642+0800: 12.757: [ParNew\nDesired survivor size 40239104 bytes, new threshold 1 (max 6)\n- age   1:   73044040 bytes,   73044040 total\n: 629248K->71474K(707840K), 0.0671453 secs] 629248K->71474K(969984K), 0.0672460 secs] [Times: user=0.14 sys=0.05, real=0.07 secs] \nHeap after GC invocations=1 (full 0):\n par new generation   total 707840K, used 71474K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)\n  eden space 629248K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000e6680000)\n  from space 78592K,  90% used [0x00000000eb340000, 0x00000000ef90ca70, 0x00000000f0000000)\n  to   space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)\n concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)\n Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K\n  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K\n}\n```\n\n\ncatalina host-manage manager localhost日志 配置Catalina.bat JAVA_OPTS\n-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=\"..\\conf\\logging.properties\" \n对应下面几个\nlocalhost.2012-07-05.txt\ncatalina.2012-07-05.txt\nmanager.2012-07-05.txt\nhost-manager.2012-07-05.txt\n\n\n访问日志access_log 配置server.xml Host节点内部添加的Valve\n`<Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs/tomcat\"  prefix=\"localhost_access_log.\" suffix=\".txt\" pattern=\"common\" resolveHosts=\"false\"/>`\n\napp日志\nlog4j 应用内部的log\n\n\n#### 堆文件分析\n\n\n查看pid : jps  -m -l\n生成hprof文件 : jmap -dump:format=b,file=log.hprof [pid]\n\n\n`-XX:+HeapDumpOnOutOfMemoryError` 自动生成dump \n\n##### visual VM  jvisualvm工具亦可\n\n##### eclipse中的分析工具加载地址: http://www.eclipse.org/mat/downloads.php 找到Update Site\n\n在Eclipse中点击Windows->Open Perspective->Other->Memory Analysis\n导入.hprof文件\n在MAT中点击 File->Open File,浏览到刚刚转换而得到的.hprof文件，并Cancel掉自动生成报告,点击Dominator Tree，并按Package分组，\n选择自己所定义的Package 类点右键，在弹出菜单中选择List objects->With incoming references。\n这时会列出所有可疑类，右键点击某一项，并选择Path to GC Roots->exclude weak/soft references,\n会进一步筛选出跟程序相关的所有有内存泄露的类。据此，可以追踪到代码中的某一个产生泄露的类。\n\n\n","slug":"深入理解JVM之性能调优","published":1,"updated":"2019-05-09T01:24:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7bu009xugv5t0f4kc3g","content":"<p>先放一下我在慕课网上的三篇关于JVM的一些手记</p>\n<ul>\n<li><a href=\"http://www.imooc.com/article/6143\" target=\"_blank\" rel=\"noopener\">深入理解JVM之基本构架</a></li>\n<li><a href=\"http://www.imooc.com/article/6319\" target=\"_blank\" rel=\"noopener\">深入理解JVM之对象生命周期</a></li>\n<li><a href=\"http://www.imooc.com/article/6461\" target=\"_blank\" rel=\"noopener\">深入理解JVM之类加载</a></li>\n</ul>\n<p>本次 <a href=\"http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html\" target=\"_blank\" rel=\"noopener\">JVM参数</a><br><a href=\"http://blog.csdn.net/firecoder/article/details/7225654\" target=\"_blank\" rel=\"noopener\">GC知识要点回顾,有案例</a><br><a href=\"http://blog.csdn.net/a503921892/article/details/39048889\" target=\"_blank\" rel=\"noopener\">“-Xmx1024m -Xms1024m -Xmn512m -Xss256k”——Java运行参数(转)</a><br><a href=\"http://www.cnblogs.com/redcreen/archive/2011/05/09/2040977.html\" target=\"_blank\" rel=\"noopener\">监测工具</a><br>web监测工具Javamelody.jar<a href=\"https://muxiaobai.github.io/2017/08/02/Javamelody-%E5%B7%A5%E5%85%B7/\">Javamelody</a><br>jdk自带工具：<br>jmc: java mission  control (飞行记录器(黑匣子))<br>监测:jconsole<br>监视:jvisualvm   </p>\n<p>jvisualvm工具插件下载地址修改为<a href=\"https://visualvm.github.io/pluginscenters.html\" target=\"_blank\" rel=\"noopener\">https://visualvm.github.io/pluginscenters.html</a>在这个上面查找到对应的版本，进行更新。</p>\n<p>上线的话用jstack 命令行或者Java Mission Control 图形化界面（jml）<br><a id=\"more\"></a></p>\n<p><img src=\"/.io//jvm-parameter.png\" alt=\"jvm\"><br><img src=\"/.io//堆内存.png\" alt=\"jvm\"></p>\n<h4 id=\"修改tomcat-的java-opts\"><a href=\"#修改tomcat-的java-opts\" class=\"headerlink\" title=\"修改tomcat 的java_opts\"></a>修改tomcat 的java_opts</h4><p>在Catalina.bat 中添加 <code>set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m</code><br><code>set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=768m -XX:MaxNewSize=768m -XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCTimeStamps</code><br><code>set JAVA_OPTS=-Xms6g -Xmx6g -XX:NewSize=4g -XX:MaxNewSize=4g  -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCDateStamps  -XX:+PrintTenuringDistribution</code></p>\n<h4 id=\"各个参数的含义\"><a href=\"#各个参数的含义\" class=\"headerlink\" title=\"各个参数的含义\"></a>各个参数的含义</h4><p><a href=\"http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html\" target=\"_blank\" rel=\"noopener\">JVM参数</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-Xms</td>\n<td style=\"text-align:center\">初始堆大小    物理内存的1/64(&lt;1GB)</td>\n<td style=\"text-align:center\">默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-Xmx</td>\n<td style=\"text-align:center\">最大堆大小</td>\n<td style=\"text-align:center\">物理内存的1/4(&lt;1GB)</td>\n<td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-Xmn</td>\n<td style=\"text-align:center\">年轻代大小(1.4 or lator) 默认1/64</td>\n<td style=\"text-align:center\">注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:NewSize</td>\n<td style=\"text-align:center\">设置年轻代大小(for 1.3/1.4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxNewSize</td>\n<td style=\"text-align:center\">年轻代最大值(for 1.3/1.4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:PermSize</td>\n<td style=\"text-align:center\">设置持久代(perm gen)初始值</td>\n<td style=\"text-align:center\">物理内存的1/64</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxPermSize</td>\n<td style=\"text-align:center\">设置持久代最大值</td>\n<td style=\"text-align:center\">物理内存的1/4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:NewRatio</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>\n<td>默认值为2，-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:SurvivorRatio</td>\n<td style=\"text-align:center\">Eden区与Survivor区的大小比值</td>\n<td style=\"text-align:center\">默认值为8，设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td>\n</tr>\n</tbody>\n</table>\n<p>注意：两个比率问题-XX:NewRatio  -XX:SurvivorRatio  </p>\n<p><img src=\"/.io//jvm-model.png\" alt=\"jvm\"></p>\n<p>设置了堆的大小-Xms 和-Xmx之后，再修改-Xmn Eden后， Survivor 根据比例配置，Old区域就会受影响（，没有Perm区域了）<br>对于非堆来说就有MetaSpace Code Class</p>\n<p>jdk1.8之后，把perm修改为matespace，具体的修改配置以及介绍<br>在JDK8中,classe metadata(the virtual machines internal presentation of Java class),<br>被存储在叫做Metaspace的native memory。一些新的flags被加入：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-XX:MetaspaceSize</td>\n<td style=\"text-align:center\">class metadata的初始空间配额，以bytes为单位，</td>\n<td style=\"text-align:center\">达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxMetaspaceSize</td>\n<td style=\"text-align:center\">可以为class metadata分配的最大空间。</td>\n<td style=\"text-align:center\">默认是没有限制的。 32位的JVM默认MaxPermSize是64M 但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MinMetaspaceFreeRatio</td>\n<td style=\"text-align:center\">在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxMetaspaceFreeRatio</td>\n<td style=\"text-align:center\">在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集</td>\n</tr>\n</tbody>\n</table>\n<p>☆-XX:+UseParNewGC -XX:+UseConcMarkSweepGC 使用ParNew 和 CMS<br>-XX:CMSInitiatingOccupancyFraction=80 即老年代满80%时触发CMS(full gc)，调高则full gc相对减少，调低则full gc处理得比较快；<br>-XX:+UseCMSCompactAtFullCollection 或 -XX:CMSFullGCsBeforeCompaction=5 即full gc前或后做碎片整理。</p>\n<p>每次full gc之后，进行压缩 -XX:CMSFullGCsBeforeCompaction=0</p>\n<p>CMS的两个挑战：</p>\n<ol>\n<li><p>堆碎片<br>CMS收集器默认并没有任何碎片整理的机制。所以可能会出现这样的情形：<br>即使总的堆大小远没有耗尽但却不能分配对象，仅仅是因为没有足够连续的空间完全容纳对象。<br>当这种事发生后，JVM会触发Full GC</p>\n</li>\n<li><p>对象分配率高<br>获取对象实例的频率高于收集器清除堆里死对象的频率<br>并发模式失败： 老年代没有足够的可用空间来容纳一个从年轻代提升过来的对象<br>此时JVM会执行堆碎片整理：触发Full GC</p>\n</li>\n</ol>\n<p>以下参数没有具体尝试，</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-Xss</td>\n<td style=\"text-align:center\">每个线程的堆栈大小</td>\n<td style=\"text-align:center\">JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长）和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize一般设置这个值就可以了。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:ThreadStackSize</td>\n<td style=\"text-align:center\">Thread Stack Size</td>\n<td style=\"text-align:center\">(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:LargePageSizeInBytes</td>\n<td style=\"text-align:center\">内存页的大小不可设置过大， 会影响Perm的大小</td>\n<td style=\"text-align:center\">=128m</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+UseFastAccessorMethods</td>\n<td style=\"text-align:center\">原始类型的快速优化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+DisableExplicitGC</td>\n<td style=\"text-align:center\">关闭System.gc()</td>\n<td style=\"text-align:center\">这个参数需要严格的测试</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxTenuringThreshold</td>\n<td style=\"text-align:center\">垃圾最大年龄</td>\n<td style=\"text-align:center\">如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+AggressiveOpts</td>\n<td style=\"text-align:center\">加快编译          </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+UseBiasedLocking</td>\n<td style=\"text-align:center\">锁机制的性能改善          </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-Xnoclassgc</td>\n<td style=\"text-align:center\">禁用垃圾回收          </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:SoftRefLRUPolicyMSPerMB</td>\n<td style=\"text-align:center\">每兆堆空闲空间中SoftReference的存活时间</td>\n<td style=\"text-align:center\">1s    softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:PretenureSizeThreshold</td>\n<td style=\"text-align:center\">对象超过多大是直接在旧生代分配</td>\n<td style=\"text-align:center\">0    单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:TLABWasteTargetPercent</td>\n<td style=\"text-align:center\">TLAB占eden区的百分比</td>\n<td style=\"text-align:center\">1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+CollectGen0First</td>\n<td style=\"text-align:center\">FullGC时是否先YGC</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n</tbody>\n</table>\n<p>其他功能，方便之后查找问题</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-XX:+HeapDumpOnOutOfMemoryError</td>\n<td style=\"text-align:center\">在OutOfMenory的时候自动创建Heapdump,注：其中不设-XX:HeapDumpPath时，dump出的文件在/tomcat_home/bin目录下</td>\n<td style=\"text-align:center\">-XX:HeapDumpPath=D:/heapdump,文章最后还有手动生成jmap</td>\n</tr>\n</tbody>\n</table>\n<p>为了分析可以将gc日志搞出来</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGC</td>\n<td style=\"text-align:center\">输出形式 :  [GC 118250K-&gt;113543K(130112K), 0.0094143 secs]  [Full GC 121376K-&gt;10414K(130112K), 0.0650971 secs]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGCDetails</td>\n<td style=\"text-align:center\">输出形式:[GC [DefNew: 8614K-&gt;781K(9088K), 0.0123035 secs] 118250K-&gt;113543K(130112K), 0.0124633 secs] [GC [DefNew: 8614K-&gt;8614K(9088K), 0.0000665 secs][Tenured: 112761K-&gt;10414K(121024K), 0.0433488 secs] 121376K-&gt;10414K(130112K), 0.0436268 secs]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGCTimeStamps</td>\n<td style=\"text-align:center\">-XX:+PrintGCDateStamps</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGC:PrintGCTimeStamps</td>\n<td style=\"text-align:center\">可与-XX:+PrintGC -XX:+PrintGCDetails混合使用  输出形式:11.851: [GC 98328K-&gt;93620K(130112K), 0.0082960 secs]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGCApplicationStoppedTime</td>\n<td style=\"text-align:center\">打印垃圾回收期间程序暂停的时间.可与上面混合使用    输出形式:Total time for which application threads were stopped: 0.0468229 seconds</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGCApplicationConcurrentTime</td>\n<td style=\"text-align:center\">打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用         输出形式:Application time: 0.5291524 seconds</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintHeapAtGC</td>\n<td style=\"text-align:center\">打印GC前后的详细堆栈信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-Xloggc:../logs/gc.log</td>\n<td style=\"text-align:center\">把相关日志信息记录到文件以便分析.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintClassHistogram</td>\n<td style=\"text-align:center\">garbage collects before printing the histogram.    与上面几个配合使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintTLAB</td>\n<td style=\"text-align:center\">查看TLAB空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintTenuringDistribution</td>\n<td style=\"text-align:center\">查看每次minor GC后新的存活周期的阈值         Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintTenuringDistribution</td>\n<td style=\"text-align:center\">打印对象年龄 默认配置的15，jvm是动态对象年龄判定的 取决于survivor的大小，调大survivor会增加age</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxTenuringThreshold=10</td>\n<td style=\"text-align:center\">Desired survivor size 40239104 bytes, new threshold 6 (max 6)意思是说对象在survivor区域中经过10minorGC还存活的话就提拔到老生代。再比如 -XX:SurvivorRatio=65536 -XX:MaxTenuringThreshold=0这样的配置实际上就是去掉了survivor区域，直接将对象从eden区域提拔到老生代</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"tomcat下的几个日志\"><a href=\"#tomcat下的几个日志\" class=\"headerlink\" title=\"tomcat下的几个日志\"></a>tomcat下的几个日志</h4><p>gc日志 配置Catalina.bat JAVA_OPTS<br>-XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC</p>\n<h5 id=\"根据gc-log分析收集器\"><a href=\"#根据gc-log分析收集器\" class=\"headerlink\" title=\"根据gc log分析收集器\"></a>根据gc log分析收集器</h5><p><a href=\"http://blog.csdn.net/doc_sgl/article/details/46594123\" target=\"_blank\" rel=\"noopener\">日志含义及分析</a><br>默认的垃圾收集器 PS Scavenge 和PS MarkSweep  对应 PS Eden 和PS Old, Parallel Scavenge 和Serial Old<br><code>-XX:+UseParallelGC</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class=\"line\">Memory: 4k page, physical 8299408k(1668496k free), swap 16596956k(4817128k free)</span><br><span class=\"line\">CommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:NewSize=536870912 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC </span><br><span class=\"line\">3.009: [GC (Allocation Failure) [PSYoungGen: 393216K-&gt;44906K(458752K)] 393216K-&gt;44994K(983040K), 0.0299992 secs] [Times: user=0.09 sys=0.02, real=0.03 secs] </span><br><span class=\"line\">4.184: [GC (Metadata GC Threshold) [PSYoungGen: 438122K-&gt;52440K(458752K)] 438210K-&gt;52536K(983040K), 0.0307814 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] </span><br><span class=\"line\">4.215: [Full GC (Metadata GC Threshold) [PSYoungGen: 52440K-&gt;0K(458752K)] [ParOldGen: 96K-&gt;50332K(524288K)] 52536K-&gt;50332K(983040K), [Metaspace: 20805K-&gt;20805K(1069056K)], 0.0588943 secs] [Times: user=0.19 sys=0.03, real=0.06 secs] </span><br><span class=\"line\">5.833: [GC (Metadata GC Threshold) [PSYoungGen: 223304K-&gt;16405K(458752K)] 273636K-&gt;66746K(983040K), 0.0090804 secs] [Times: user=0.00 sys=0.03, real=0.01 secs] </span><br><span class=\"line\">5.842: [Full GC (Metadata GC Threshold) [PSYoungGen: 16405K-&gt;0K(458752K)] [ParOldGen: 50340K-&gt;35102K(524288K)] 66746K-&gt;35102K(983040K), [Metaspace: 34776K-&gt;34776K(1081344K)], 0.0372804 secs] [Times: user=0.09 sys=0.00, real=0.04 secs]</span><br></pre></td></tr></table></figure></p>\n<p>说明 进行了三次 Minor GC(Metadata GC Threshold)和二次Full GC (Metadata GC Threshold)，PSYoungGen 和ParOldGen Metaspace三个区域进行garbage回收，</p>\n<p>-XX:+UseParNewGC  -XX:+UseConcMarkSweepGC对应  ParNew Eden 和 CMS Old</p>\n<p>各种收集器的搭配<br><img src=\"/.io//gc收集器.jpg\" alt=\"jvm\"><br><img src=\"/.io//jvmGC.png\" alt=\"jvm参数设置\"></p>\n<p>参数：<code>-XX:+UseConcMarkSweepGC -XX:+UseParNewGC</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class=\"line\">Memory: 4k page, physical 8299408k(1605020k free), swap 16596956k(4755960k free)</span><br><span class=\"line\">CommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:MaxTenuringThreshold=6 -XX:NewSize=536870912 -XX:OldPLABSize=16 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC </span><br><span class=\"line\">2.538: [GC (Allocation Failure) 2.538: [ParNew: 419456K-&gt;45084K(471872K), 0.0319020 secs] 419456K-&gt;45084K(996160K), 0.0320000 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] </span><br><span class=\"line\">4.063: [GC (Allocation Failure) 4.063: [ParNew: 464540K-&gt;47903K(471872K), 0.0510502 secs] 464540K-&gt;62045K(996160K), 0.0511090 secs] [Times: user=0.19 sys=0.00, real=0.05 secs] </span><br><span class=\"line\">4.114: [GC (CMS Initial Mark) [1 CMS-initial-mark: 14142K(524288K)] 69798K(996160K), 0.0044547 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">4.119: [CMS-concurrent-mark-start]</span><br><span class=\"line\">4.131: [CMS-concurrent-mark: 0.013/0.013 secs] [Times: user=0.06 sys=0.00, real=0.01 secs] </span><br><span class=\"line\">4.131: [CMS-concurrent-preclean-start]</span><br><span class=\"line\">4.132: [CMS-concurrent-preclean: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">4.132: [CMS-concurrent-abortable-preclean-start]</span><br><span class=\"line\">5.631: [CMS-concurrent-abortable-preclean: 1.022/1.499 secs] [Times: user=3.53 sys=0.31, real=1.50 secs] </span><br><span class=\"line\">5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs] </span><br><span class=\"line\">5.657: [CMS-concurrent-sweep-start]</span><br><span class=\"line\">5.660: [CMS-concurrent-sweep: 0.003/0.003 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">5.660: [CMS-concurrent-reset-start]</span><br><span class=\"line\">5.660: [CMS-concurrent-reset: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">310.132: [GC (Allocation Failure) 310.132: [ParNew: 467359K-&gt;25032K(471872K), 0.0437937 secs] 481496K-&gt;47728K(996160K), 0.0438755 secs] [Times: user=0.03 sys=0.05, real=0.04 secs] </span><br><span class=\"line\">2176.769: [GC (Allocation Failure) 2176.769: [ParNew: 444488K-&gt;20094K(471872K), 0.0397949 secs] 467184K-&gt;42790K(996160K), 0.0399206 secs] [Times: user=0.13 sys=0.00, real=0.04 secs] </span><br><span class=\"line\">4106.112: [GC (Allocation Failure) 4106.112: [ParNew: 439550K-&gt;27010K(471872K), 0.0349045 secs] 462246K-&gt;49707K(996160K), 0.0350339 secs] [Times: user=0.05 sys=0.03, real=0.03 secs]</span><br></pre></td></tr></table></figure>\n<p>5次GC (Allocation Failure)和2次Full GC ，这个我还没有看出来怎么是两次，CMS Initial Mark 一次， CMS Final Remark一次？好像jconsole和jvisualvm的统计不一致。<br>5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs]<br>这个是全部GC的， YG occupancy、Rescan (parallel)、weak refs processing、class unloadingscrub symbol table、scrub string table、1 CMS-remark</p>\n<p>|-XX:+PrintTenuringDistribution    |查看每次minor GC后新的存活周期的阈值         Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。|</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Desired survivor size 40239104 bytes, new threshold 6 (max 6)</span><br><span class=\"line\">- age   1:   38395784 bytes,   38395784 total</span><br><span class=\"line\">: 697938K-&gt;46713K(707840K), 0.0827063 secs] 697938K-&gt;62235K(969984K), 0.0828384 secs] [Times: user=0.26 sys=0.00, real=0.08 secs] </span><br><span class=\"line\">2017-11-06T17:47:26.663+0800: 2084.592: [GC (Allocation Failure) 2017-11-06T17:47:26.663+0800: 2084.592: [ParNew</span><br><span class=\"line\">Desired survivor size 40239104 bytes, new threshold 6 (max 6)</span><br><span class=\"line\">- age   1:    7222536 bytes,    7222536 total</span><br><span class=\"line\">- age   2:   12782736 bytes,   20005272 total</span><br><span class=\"line\">: 675961K-&gt;26286K(707840K), 0.0380878 secs] 691483K-&gt;41807K(969984K), 0.0382007 secs] [Times: user=0.06 sys=0.00, real=0.04 secs]</span><br></pre></td></tr></table></figure>\n<p>经常性的 “premature promotion”， 最总会导致大量短期对象被提升到老年代， 最终导致老年代空间不足， 引发另一个 JVM 内存问题 “promotion failure”（提升失败： 即老年代空间不足以容乃 Minor GC 中提升上来的对象）</p>\n<p>阈值 6</p>\n<p>-XX:+PrintHeapAtGC 打印GC前后的堆栈信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;Heap before GC invocations=0 (full 0):</span><br><span class=\"line\"> par new generation   total 707840K, used 629248K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)</span><br><span class=\"line\">  eden space 629248K, 100% used [0x00000000c0000000, 0x00000000e6680000, 0x00000000e6680000)</span><br><span class=\"line\">  from space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)</span><br><span class=\"line\">  to   space 78592K,   0% used [0x00000000eb340000, 0x00000000eb340000, 0x00000000f0000000)</span><br><span class=\"line\"> concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)</span><br><span class=\"line\"> Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K</span><br><span class=\"line\">  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K</span><br><span class=\"line\">2017-11-07T21:14:24.642+0800: 12.757: [GC (Allocation Failure) 2017-11-07T21:14:24.642+0800: 12.757: [ParNew</span><br><span class=\"line\">Desired survivor size 40239104 bytes, new threshold 1 (max 6)</span><br><span class=\"line\">- age   1:   73044040 bytes,   73044040 total</span><br><span class=\"line\">: 629248K-&gt;71474K(707840K), 0.0671453 secs] 629248K-&gt;71474K(969984K), 0.0672460 secs] [Times: user=0.14 sys=0.05, real=0.07 secs] </span><br><span class=\"line\">Heap after GC invocations=1 (full 0):</span><br><span class=\"line\"> par new generation   total 707840K, used 71474K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)</span><br><span class=\"line\">  eden space 629248K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000e6680000)</span><br><span class=\"line\">  from space 78592K,  90% used [0x00000000eb340000, 0x00000000ef90ca70, 0x00000000f0000000)</span><br><span class=\"line\">  to   space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)</span><br><span class=\"line\"> concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)</span><br><span class=\"line\"> Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K</span><br><span class=\"line\">  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>catalina host-manage manager localhost日志 配置Catalina.bat JAVA_OPTS<br>-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=”..\\conf\\logging.properties”<br>对应下面几个<br>localhost.2012-07-05.txt<br>catalina.2012-07-05.txt<br>manager.2012-07-05.txt<br>host-manager.2012-07-05.txt</p>\n<p>访问日志access_log 配置server.xml Host节点内部添加的Valve<br><code>&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs/tomcat&quot;  prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;common&quot; resolveHosts=&quot;false&quot;/&gt;</code></p>\n<p>app日志<br>log4j 应用内部的log</p>\n<h4 id=\"堆文件分析\"><a href=\"#堆文件分析\" class=\"headerlink\" title=\"堆文件分析\"></a>堆文件分析</h4><p>查看pid : jps  -m -l<br>生成hprof文件 : jmap -dump:format=b,file=log.hprof [pid]</p>\n<p><code>-XX:+HeapDumpOnOutOfMemoryError</code> 自动生成dump </p>\n<h5 id=\"visual-VM-jvisualvm工具亦可\"><a href=\"#visual-VM-jvisualvm工具亦可\" class=\"headerlink\" title=\"visual VM  jvisualvm工具亦可\"></a>visual VM  jvisualvm工具亦可</h5><h5 id=\"eclipse中的分析工具加载地址-http-www-eclipse-org-mat-downloads-php-找到Update-Site\"><a href=\"#eclipse中的分析工具加载地址-http-www-eclipse-org-mat-downloads-php-找到Update-Site\" class=\"headerlink\" title=\"eclipse中的分析工具加载地址: http://www.eclipse.org/mat/downloads.php 找到Update Site\"></a>eclipse中的分析工具加载地址: <a href=\"http://www.eclipse.org/mat/downloads.php\" target=\"_blank\" rel=\"noopener\">http://www.eclipse.org/mat/downloads.php</a> 找到Update Site</h5><p>在Eclipse中点击Windows-&gt;Open Perspective-&gt;Other-&gt;Memory Analysis<br>导入.hprof文件<br>在MAT中点击 File-&gt;Open File,浏览到刚刚转换而得到的.hprof文件，并Cancel掉自动生成报告,点击Dominator Tree，并按Package分组，<br>选择自己所定义的Package 类点右键，在弹出菜单中选择List objects-&gt;With incoming references。<br>这时会列出所有可疑类，右键点击某一项，并选择Path to GC Roots-&gt;exclude weak/soft references,<br>会进一步筛选出跟程序相关的所有有内存泄露的类。据此，可以追踪到代码中的某一个产生泄露的类。</p>\n","site":{"data":{}},"excerpt":"<p>先放一下我在慕课网上的三篇关于JVM的一些手记</p>\n<ul>\n<li><a href=\"http://www.imooc.com/article/6143\" target=\"_blank\" rel=\"noopener\">深入理解JVM之基本构架</a></li>\n<li><a href=\"http://www.imooc.com/article/6319\" target=\"_blank\" rel=\"noopener\">深入理解JVM之对象生命周期</a></li>\n<li><a href=\"http://www.imooc.com/article/6461\" target=\"_blank\" rel=\"noopener\">深入理解JVM之类加载</a></li>\n</ul>\n<p>本次 <a href=\"http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html\" target=\"_blank\" rel=\"noopener\">JVM参数</a><br><a href=\"http://blog.csdn.net/firecoder/article/details/7225654\" target=\"_blank\" rel=\"noopener\">GC知识要点回顾,有案例</a><br><a href=\"http://blog.csdn.net/a503921892/article/details/39048889\" target=\"_blank\" rel=\"noopener\">“-Xmx1024m -Xms1024m -Xmn512m -Xss256k”——Java运行参数(转)</a><br><a href=\"http://www.cnblogs.com/redcreen/archive/2011/05/09/2040977.html\" target=\"_blank\" rel=\"noopener\">监测工具</a><br>web监测工具Javamelody.jar<a href=\"https://muxiaobai.github.io/2017/08/02/Javamelody-%E5%B7%A5%E5%85%B7/\">Javamelody</a><br>jdk自带工具：<br>jmc: java mission  control (飞行记录器(黑匣子))<br>监测:jconsole<br>监视:jvisualvm   </p>\n<p>jvisualvm工具插件下载地址修改为<a href=\"https://visualvm.github.io/pluginscenters.html\" target=\"_blank\" rel=\"noopener\">https://visualvm.github.io/pluginscenters.html</a>在这个上面查找到对应的版本，进行更新。</p>\n<p>上线的话用jstack 命令行或者Java Mission Control 图形化界面（jml）<br></p>","more":"<p></p>\n<p><img src=\"/.io//jvm-parameter.png\" alt=\"jvm\"><br><img src=\"/.io//堆内存.png\" alt=\"jvm\"></p>\n<h4 id=\"修改tomcat-的java-opts\"><a href=\"#修改tomcat-的java-opts\" class=\"headerlink\" title=\"修改tomcat 的java_opts\"></a>修改tomcat 的java_opts</h4><p>在Catalina.bat 中添加 <code>set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m</code><br><code>set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=768m -XX:MaxNewSize=768m -XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCTimeStamps</code><br><code>set JAVA_OPTS=-Xms6g -Xmx6g -XX:NewSize=4g -XX:MaxNewSize=4g  -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCDateStamps  -XX:+PrintTenuringDistribution</code></p>\n<h4 id=\"各个参数的含义\"><a href=\"#各个参数的含义\" class=\"headerlink\" title=\"各个参数的含义\"></a>各个参数的含义</h4><p><a href=\"http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html\" target=\"_blank\" rel=\"noopener\">JVM参数</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-Xms</td>\n<td style=\"text-align:center\">初始堆大小    物理内存的1/64(&lt;1GB)</td>\n<td style=\"text-align:center\">默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-Xmx</td>\n<td style=\"text-align:center\">最大堆大小</td>\n<td style=\"text-align:center\">物理内存的1/4(&lt;1GB)</td>\n<td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-Xmn</td>\n<td style=\"text-align:center\">年轻代大小(1.4 or lator) 默认1/64</td>\n<td style=\"text-align:center\">注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:NewSize</td>\n<td style=\"text-align:center\">设置年轻代大小(for 1.3/1.4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxNewSize</td>\n<td style=\"text-align:center\">年轻代最大值(for 1.3/1.4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:PermSize</td>\n<td style=\"text-align:center\">设置持久代(perm gen)初始值</td>\n<td style=\"text-align:center\">物理内存的1/64</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxPermSize</td>\n<td style=\"text-align:center\">设置持久代最大值</td>\n<td style=\"text-align:center\">物理内存的1/4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:NewRatio</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>\n<td>默认值为2，-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:SurvivorRatio</td>\n<td style=\"text-align:center\">Eden区与Survivor区的大小比值</td>\n<td style=\"text-align:center\">默认值为8，设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td>\n</tr>\n</tbody>\n</table>\n<p>注意：两个比率问题-XX:NewRatio  -XX:SurvivorRatio  </p>\n<p><img src=\"/.io//jvm-model.png\" alt=\"jvm\"></p>\n<p>设置了堆的大小-Xms 和-Xmx之后，再修改-Xmn Eden后， Survivor 根据比例配置，Old区域就会受影响（，没有Perm区域了）<br>对于非堆来说就有MetaSpace Code Class</p>\n<p>jdk1.8之后，把perm修改为matespace，具体的修改配置以及介绍<br>在JDK8中,classe metadata(the virtual machines internal presentation of Java class),<br>被存储在叫做Metaspace的native memory。一些新的flags被加入：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-XX:MetaspaceSize</td>\n<td style=\"text-align:center\">class metadata的初始空间配额，以bytes为单位，</td>\n<td style=\"text-align:center\">达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxMetaspaceSize</td>\n<td style=\"text-align:center\">可以为class metadata分配的最大空间。</td>\n<td style=\"text-align:center\">默认是没有限制的。 32位的JVM默认MaxPermSize是64M 但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MinMetaspaceFreeRatio</td>\n<td style=\"text-align:center\">在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxMetaspaceFreeRatio</td>\n<td style=\"text-align:center\">在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集</td>\n</tr>\n</tbody>\n</table>\n<p>☆-XX:+UseParNewGC -XX:+UseConcMarkSweepGC 使用ParNew 和 CMS<br>-XX:CMSInitiatingOccupancyFraction=80 即老年代满80%时触发CMS(full gc)，调高则full gc相对减少，调低则full gc处理得比较快；<br>-XX:+UseCMSCompactAtFullCollection 或 -XX:CMSFullGCsBeforeCompaction=5 即full gc前或后做碎片整理。</p>\n<p>每次full gc之后，进行压缩 -XX:CMSFullGCsBeforeCompaction=0</p>\n<p>CMS的两个挑战：</p>\n<ol>\n<li><p>堆碎片<br>CMS收集器默认并没有任何碎片整理的机制。所以可能会出现这样的情形：<br>即使总的堆大小远没有耗尽但却不能分配对象，仅仅是因为没有足够连续的空间完全容纳对象。<br>当这种事发生后，JVM会触发Full GC</p>\n</li>\n<li><p>对象分配率高<br>获取对象实例的频率高于收集器清除堆里死对象的频率<br>并发模式失败： 老年代没有足够的可用空间来容纳一个从年轻代提升过来的对象<br>此时JVM会执行堆碎片整理：触发Full GC</p>\n</li>\n</ol>\n<p>以下参数没有具体尝试，</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-Xss</td>\n<td style=\"text-align:center\">每个线程的堆栈大小</td>\n<td style=\"text-align:center\">JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长）和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize一般设置这个值就可以了。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:ThreadStackSize</td>\n<td style=\"text-align:center\">Thread Stack Size</td>\n<td style=\"text-align:center\">(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:LargePageSizeInBytes</td>\n<td style=\"text-align:center\">内存页的大小不可设置过大， 会影响Perm的大小</td>\n<td style=\"text-align:center\">=128m</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+UseFastAccessorMethods</td>\n<td style=\"text-align:center\">原始类型的快速优化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+DisableExplicitGC</td>\n<td style=\"text-align:center\">关闭System.gc()</td>\n<td style=\"text-align:center\">这个参数需要严格的测试</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxTenuringThreshold</td>\n<td style=\"text-align:center\">垃圾最大年龄</td>\n<td style=\"text-align:center\">如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+AggressiveOpts</td>\n<td style=\"text-align:center\">加快编译          </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+UseBiasedLocking</td>\n<td style=\"text-align:center\">锁机制的性能改善          </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-Xnoclassgc</td>\n<td style=\"text-align:center\">禁用垃圾回收          </td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:SoftRefLRUPolicyMSPerMB</td>\n<td style=\"text-align:center\">每兆堆空闲空间中SoftReference的存活时间</td>\n<td style=\"text-align:center\">1s    softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:PretenureSizeThreshold</td>\n<td style=\"text-align:center\">对象超过多大是直接在旧生代分配</td>\n<td style=\"text-align:center\">0    单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:TLABWasteTargetPercent</td>\n<td style=\"text-align:center\">TLAB占eden区的百分比</td>\n<td style=\"text-align:center\">1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+CollectGen0First</td>\n<td style=\"text-align:center\">FullGC时是否先YGC</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n</tbody>\n</table>\n<p>其他功能，方便之后查找问题</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数名称</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-XX:+HeapDumpOnOutOfMemoryError</td>\n<td style=\"text-align:center\">在OutOfMenory的时候自动创建Heapdump,注：其中不设-XX:HeapDumpPath时，dump出的文件在/tomcat_home/bin目录下</td>\n<td style=\"text-align:center\">-XX:HeapDumpPath=D:/heapdump,文章最后还有手动生成jmap</td>\n</tr>\n</tbody>\n</table>\n<p>为了分析可以将gc日志搞出来</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGC</td>\n<td style=\"text-align:center\">输出形式 :  [GC 118250K-&gt;113543K(130112K), 0.0094143 secs]  [Full GC 121376K-&gt;10414K(130112K), 0.0650971 secs]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGCDetails</td>\n<td style=\"text-align:center\">输出形式:[GC [DefNew: 8614K-&gt;781K(9088K), 0.0123035 secs] 118250K-&gt;113543K(130112K), 0.0124633 secs] [GC [DefNew: 8614K-&gt;8614K(9088K), 0.0000665 secs][Tenured: 112761K-&gt;10414K(121024K), 0.0433488 secs] 121376K-&gt;10414K(130112K), 0.0436268 secs]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGCTimeStamps</td>\n<td style=\"text-align:center\">-XX:+PrintGCDateStamps</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGC:PrintGCTimeStamps</td>\n<td style=\"text-align:center\">可与-XX:+PrintGC -XX:+PrintGCDetails混合使用  输出形式:11.851: [GC 98328K-&gt;93620K(130112K), 0.0082960 secs]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGCApplicationStoppedTime</td>\n<td style=\"text-align:center\">打印垃圾回收期间程序暂停的时间.可与上面混合使用    输出形式:Total time for which application threads were stopped: 0.0468229 seconds</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintGCApplicationConcurrentTime</td>\n<td style=\"text-align:center\">打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用         输出形式:Application time: 0.5291524 seconds</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintHeapAtGC</td>\n<td style=\"text-align:center\">打印GC前后的详细堆栈信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-Xloggc:../logs/gc.log</td>\n<td style=\"text-align:center\">把相关日志信息记录到文件以便分析.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintClassHistogram</td>\n<td style=\"text-align:center\">garbage collects before printing the histogram.    与上面几个配合使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintTLAB</td>\n<td style=\"text-align:center\">查看TLAB空间的使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintTenuringDistribution</td>\n<td style=\"text-align:center\">查看每次minor GC后新的存活周期的阈值         Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:+PrintTenuringDistribution</td>\n<td style=\"text-align:center\">打印对象年龄 默认配置的15，jvm是动态对象年龄判定的 取决于survivor的大小，调大survivor会增加age</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-XX:MaxTenuringThreshold=10</td>\n<td style=\"text-align:center\">Desired survivor size 40239104 bytes, new threshold 6 (max 6)意思是说对象在survivor区域中经过10minorGC还存活的话就提拔到老生代。再比如 -XX:SurvivorRatio=65536 -XX:MaxTenuringThreshold=0这样的配置实际上就是去掉了survivor区域，直接将对象从eden区域提拔到老生代</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"tomcat下的几个日志\"><a href=\"#tomcat下的几个日志\" class=\"headerlink\" title=\"tomcat下的几个日志\"></a>tomcat下的几个日志</h4><p>gc日志 配置Catalina.bat JAVA_OPTS<br>-XX:+PrintGCDetails -Xloggc:..\\logs\\gc.log -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC</p>\n<h5 id=\"根据gc-log分析收集器\"><a href=\"#根据gc-log分析收集器\" class=\"headerlink\" title=\"根据gc log分析收集器\"></a>根据gc log分析收集器</h5><p><a href=\"http://blog.csdn.net/doc_sgl/article/details/46594123\" target=\"_blank\" rel=\"noopener\">日志含义及分析</a><br>默认的垃圾收集器 PS Scavenge 和PS MarkSweep  对应 PS Eden 和PS Old, Parallel Scavenge 和Serial Old<br><code>-XX:+UseParallelGC</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class=\"line\">Memory: 4k page, physical 8299408k(1668496k free), swap 16596956k(4817128k free)</span><br><span class=\"line\">CommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:NewSize=536870912 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC </span><br><span class=\"line\">3.009: [GC (Allocation Failure) [PSYoungGen: 393216K-&gt;44906K(458752K)] 393216K-&gt;44994K(983040K), 0.0299992 secs] [Times: user=0.09 sys=0.02, real=0.03 secs] </span><br><span class=\"line\">4.184: [GC (Metadata GC Threshold) [PSYoungGen: 438122K-&gt;52440K(458752K)] 438210K-&gt;52536K(983040K), 0.0307814 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] </span><br><span class=\"line\">4.215: [Full GC (Metadata GC Threshold) [PSYoungGen: 52440K-&gt;0K(458752K)] [ParOldGen: 96K-&gt;50332K(524288K)] 52536K-&gt;50332K(983040K), [Metaspace: 20805K-&gt;20805K(1069056K)], 0.0588943 secs] [Times: user=0.19 sys=0.03, real=0.06 secs] </span><br><span class=\"line\">5.833: [GC (Metadata GC Threshold) [PSYoungGen: 223304K-&gt;16405K(458752K)] 273636K-&gt;66746K(983040K), 0.0090804 secs] [Times: user=0.00 sys=0.03, real=0.01 secs] </span><br><span class=\"line\">5.842: [Full GC (Metadata GC Threshold) [PSYoungGen: 16405K-&gt;0K(458752K)] [ParOldGen: 50340K-&gt;35102K(524288K)] 66746K-&gt;35102K(983040K), [Metaspace: 34776K-&gt;34776K(1081344K)], 0.0372804 secs] [Times: user=0.09 sys=0.00, real=0.04 secs]</span><br></pre></td></tr></table></figure></p>\n<p>说明 进行了三次 Minor GC(Metadata GC Threshold)和二次Full GC (Metadata GC Threshold)，PSYoungGen 和ParOldGen Metaspace三个区域进行garbage回收，</p>\n<p>-XX:+UseParNewGC  -XX:+UseConcMarkSweepGC对应  ParNew Eden 和 CMS Old</p>\n<p>各种收集器的搭配<br><img src=\"/.io//gc收集器.jpg\" alt=\"jvm\"><br><img src=\"/.io//jvmGC.png\" alt=\"jvm参数设置\"></p>\n<p>参数：<code>-XX:+UseConcMarkSweepGC -XX:+UseParNewGC</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class=\"line\">Memory: 4k page, physical 8299408k(1605020k free), swap 16596956k(4755960k free)</span><br><span class=\"line\">CommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:MaxTenuringThreshold=6 -XX:NewSize=536870912 -XX:OldPLABSize=16 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC </span><br><span class=\"line\">2.538: [GC (Allocation Failure) 2.538: [ParNew: 419456K-&gt;45084K(471872K), 0.0319020 secs] 419456K-&gt;45084K(996160K), 0.0320000 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] </span><br><span class=\"line\">4.063: [GC (Allocation Failure) 4.063: [ParNew: 464540K-&gt;47903K(471872K), 0.0510502 secs] 464540K-&gt;62045K(996160K), 0.0511090 secs] [Times: user=0.19 sys=0.00, real=0.05 secs] </span><br><span class=\"line\">4.114: [GC (CMS Initial Mark) [1 CMS-initial-mark: 14142K(524288K)] 69798K(996160K), 0.0044547 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">4.119: [CMS-concurrent-mark-start]</span><br><span class=\"line\">4.131: [CMS-concurrent-mark: 0.013/0.013 secs] [Times: user=0.06 sys=0.00, real=0.01 secs] </span><br><span class=\"line\">4.131: [CMS-concurrent-preclean-start]</span><br><span class=\"line\">4.132: [CMS-concurrent-preclean: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">4.132: [CMS-concurrent-abortable-preclean-start]</span><br><span class=\"line\">5.631: [CMS-concurrent-abortable-preclean: 1.022/1.499 secs] [Times: user=3.53 sys=0.31, real=1.50 secs] </span><br><span class=\"line\">5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs] </span><br><span class=\"line\">5.657: [CMS-concurrent-sweep-start]</span><br><span class=\"line\">5.660: [CMS-concurrent-sweep: 0.003/0.003 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">5.660: [CMS-concurrent-reset-start]</span><br><span class=\"line\">5.660: [CMS-concurrent-reset: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">310.132: [GC (Allocation Failure) 310.132: [ParNew: 467359K-&gt;25032K(471872K), 0.0437937 secs] 481496K-&gt;47728K(996160K), 0.0438755 secs] [Times: user=0.03 sys=0.05, real=0.04 secs] </span><br><span class=\"line\">2176.769: [GC (Allocation Failure) 2176.769: [ParNew: 444488K-&gt;20094K(471872K), 0.0397949 secs] 467184K-&gt;42790K(996160K), 0.0399206 secs] [Times: user=0.13 sys=0.00, real=0.04 secs] </span><br><span class=\"line\">4106.112: [GC (Allocation Failure) 4106.112: [ParNew: 439550K-&gt;27010K(471872K), 0.0349045 secs] 462246K-&gt;49707K(996160K), 0.0350339 secs] [Times: user=0.05 sys=0.03, real=0.03 secs]</span><br></pre></td></tr></table></figure>\n<p>5次GC (Allocation Failure)和2次Full GC ，这个我还没有看出来怎么是两次，CMS Initial Mark 一次， CMS Final Remark一次？好像jconsole和jvisualvm的统计不一致。<br>5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs]<br>这个是全部GC的， YG occupancy、Rescan (parallel)、weak refs processing、class unloadingscrub symbol table、scrub string table、1 CMS-remark</p>\n<p>|-XX:+PrintTenuringDistribution    |查看每次minor GC后新的存活周期的阈值         Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。|</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Desired survivor size 40239104 bytes, new threshold 6 (max 6)</span><br><span class=\"line\">- age   1:   38395784 bytes,   38395784 total</span><br><span class=\"line\">: 697938K-&gt;46713K(707840K), 0.0827063 secs] 697938K-&gt;62235K(969984K), 0.0828384 secs] [Times: user=0.26 sys=0.00, real=0.08 secs] </span><br><span class=\"line\">2017-11-06T17:47:26.663+0800: 2084.592: [GC (Allocation Failure) 2017-11-06T17:47:26.663+0800: 2084.592: [ParNew</span><br><span class=\"line\">Desired survivor size 40239104 bytes, new threshold 6 (max 6)</span><br><span class=\"line\">- age   1:    7222536 bytes,    7222536 total</span><br><span class=\"line\">- age   2:   12782736 bytes,   20005272 total</span><br><span class=\"line\">: 675961K-&gt;26286K(707840K), 0.0380878 secs] 691483K-&gt;41807K(969984K), 0.0382007 secs] [Times: user=0.06 sys=0.00, real=0.04 secs]</span><br></pre></td></tr></table></figure>\n<p>经常性的 “premature promotion”， 最总会导致大量短期对象被提升到老年代， 最终导致老年代空间不足， 引发另一个 JVM 内存问题 “promotion failure”（提升失败： 即老年代空间不足以容乃 Minor GC 中提升上来的对象）</p>\n<p>阈值 6</p>\n<p>-XX:+PrintHeapAtGC 打印GC前后的堆栈信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;Heap before GC invocations=0 (full 0):</span><br><span class=\"line\"> par new generation   total 707840K, used 629248K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)</span><br><span class=\"line\">  eden space 629248K, 100% used [0x00000000c0000000, 0x00000000e6680000, 0x00000000e6680000)</span><br><span class=\"line\">  from space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)</span><br><span class=\"line\">  to   space 78592K,   0% used [0x00000000eb340000, 0x00000000eb340000, 0x00000000f0000000)</span><br><span class=\"line\"> concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)</span><br><span class=\"line\"> Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K</span><br><span class=\"line\">  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K</span><br><span class=\"line\">2017-11-07T21:14:24.642+0800: 12.757: [GC (Allocation Failure) 2017-11-07T21:14:24.642+0800: 12.757: [ParNew</span><br><span class=\"line\">Desired survivor size 40239104 bytes, new threshold 1 (max 6)</span><br><span class=\"line\">- age   1:   73044040 bytes,   73044040 total</span><br><span class=\"line\">: 629248K-&gt;71474K(707840K), 0.0671453 secs] 629248K-&gt;71474K(969984K), 0.0672460 secs] [Times: user=0.14 sys=0.05, real=0.07 secs] </span><br><span class=\"line\">Heap after GC invocations=1 (full 0):</span><br><span class=\"line\"> par new generation   total 707840K, used 71474K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)</span><br><span class=\"line\">  eden space 629248K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000e6680000)</span><br><span class=\"line\">  from space 78592K,  90% used [0x00000000eb340000, 0x00000000ef90ca70, 0x00000000f0000000)</span><br><span class=\"line\">  to   space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)</span><br><span class=\"line\"> concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)</span><br><span class=\"line\"> Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K</span><br><span class=\"line\">  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>catalina host-manage manager localhost日志 配置Catalina.bat JAVA_OPTS<br>-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=”..\\conf\\logging.properties”<br>对应下面几个<br>localhost.2012-07-05.txt<br>catalina.2012-07-05.txt<br>manager.2012-07-05.txt<br>host-manager.2012-07-05.txt</p>\n<p>访问日志access_log 配置server.xml Host节点内部添加的Valve<br><code>&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs/tomcat&quot;  prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;common&quot; resolveHosts=&quot;false&quot;/&gt;</code></p>\n<p>app日志<br>log4j 应用内部的log</p>\n<h4 id=\"堆文件分析\"><a href=\"#堆文件分析\" class=\"headerlink\" title=\"堆文件分析\"></a>堆文件分析</h4><p>查看pid : jps  -m -l<br>生成hprof文件 : jmap -dump:format=b,file=log.hprof [pid]</p>\n<p><code>-XX:+HeapDumpOnOutOfMemoryError</code> 自动生成dump </p>\n<h5 id=\"visual-VM-jvisualvm工具亦可\"><a href=\"#visual-VM-jvisualvm工具亦可\" class=\"headerlink\" title=\"visual VM  jvisualvm工具亦可\"></a>visual VM  jvisualvm工具亦可</h5><h5 id=\"eclipse中的分析工具加载地址-http-www-eclipse-org-mat-downloads-php-找到Update-Site\"><a href=\"#eclipse中的分析工具加载地址-http-www-eclipse-org-mat-downloads-php-找到Update-Site\" class=\"headerlink\" title=\"eclipse中的分析工具加载地址: http://www.eclipse.org/mat/downloads.php 找到Update Site\"></a>eclipse中的分析工具加载地址: <a href=\"http://www.eclipse.org/mat/downloads.php\" target=\"_blank\" rel=\"noopener\">http://www.eclipse.org/mat/downloads.php</a> 找到Update Site</h5><p>在Eclipse中点击Windows-&gt;Open Perspective-&gt;Other-&gt;Memory Analysis<br>导入.hprof文件<br>在MAT中点击 File-&gt;Open File,浏览到刚刚转换而得到的.hprof文件，并Cancel掉自动生成报告,点击Dominator Tree，并按Package分组，<br>选择自己所定义的Package 类点右键，在弹出菜单中选择List objects-&gt;With incoming references。<br>这时会列出所有可疑类，右键点击某一项，并选择Path to GC Roots-&gt;exclude weak/soft references,<br>会进一步筛选出跟程序相关的所有有内存泄露的类。据此，可以追踪到代码中的某一个产生泄露的类。</p>"},{"title":"Linux下各目录的默认含义","date":"2016-06-27T13:09:58.000Z","description":"摘录，了解","_content":"\n常用的文件目录,以及文件位置,文件夹默认的作用等的总结。\n例如：/etc/init.d,/usr/local等\n<!--more-->\n\n根:/\n/etc\n全局的配置文件存放目录。\n系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。 \n\n/boot\n引导程序，内核等存放的目录。\n这个目录，包括了在引导过程中所必需的文件，引导程序的相关文件（例如grub，lilo以及相应的配置文件以及Linux操作系统内核相关文件（例如vmlinuz等一般都存放在这里。在最开始的启动阶段，通过引导程序将内核加载到内存，完成内核的启动（这个时候，虚拟文件系统还不存在，加载的内核虽然是从硬盘读取的，但是没经过Linux的虚拟文件系统，这是比较底层的东西来实现的。然后内核自己创建好虚拟文件系统，并且从虚拟文件系统的其他子目录中（例如/sbin 和 /etc加载需要在开机启动的其他程序或者服务或者特定的动作（部分可以由用户自己在相应的目录中修改相应的文件来配制。如果我们的机器中包含多个操作系统，那么可以通过修改这个目录中的某个配置文件（例如grub.conf来调整启动的默认操作系统，系统启动的择菜单，以及启动延迟等参数。\n\n/sbin\n超级用户可以使用的命令的存放目录。\n存放大多涉及系统管理的命令（例如引导系统的init程序，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令（但是时普通用户也可能会用到。这个目录和/usr/sbin; /usr/X11R6/sbin或/usr/local/sbin等目录是相似的，我们要记住，凡是目录sbin中包含的都是root权限才能执行的，这样就行了。后面会具体区分。\n\n/bin\n普通用户可以使用的命令的存放目录。\n系统所需要的那些命令位于此目录，比如ls、cp、mkdir等命令；类似的目录还/usr/bin，/usr/local/bin等等。这个目录中的文件都是可执行的、普通用户都可以使用的命令。作为基础系统所需要的最基础的命令就是放在这里。\n\n/lib\n根目录下的所程序的共享库目录。\n此目录下包含系统引导和在根用户执行命令时候所必需用到的共享库。做个不太好但是比较形象的比喻，点类似于Windows上面的system32目录。理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。类似的目录还/usr/lib，/usr/local/lib等等。\n\n/dev\n设备文件目录。\n在Linux中设备都是以文件形式出现，这里的设备可以是硬盘，键盘，鼠标，网卡，终端，等设备，通过访问这些文件可以访问到相应的设备。设备文件可以使用mknod命令来创建，具体参见相应的命令；而为了将对这些设备文件的访问转化为对设备的访问，需要向相应的设备提供设备驱动模块（一般将设备驱动编译之后，生成的结果是一个*.ko类型的二进制文件，在内核启动之后，再通过insmod等命令加载相应的设备驱动之后，我们就可以通过设备文件来访问设备了。一般来说，想要Linux系统支持某个设备，只要个东西：相应的硬件设备，支持硬件的驱动模块，以及相应的设备文件。\n\n/home\n普通用户的家目录（$HOME目录。\n在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。\n\n/root\n用户root的$HOME目录\n系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。\n\n/usr\n这个目录中包含了命令库文件和在通常操作中不会修改的文件。\n这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。\n\n/usr/lib\n目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。\n这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。\n\n/usr/bin\n一般使用者使用并且不是系统自检等所必需可执行文件的目录。\n此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。\n\n/usr/sbin\n管理员使用的非系统必须的可执行文件存放目录。\n此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。\n\n/usr/share\n存放共享文件的目录。\n在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。\n\n/usr/include\nC程序语言编译使用的头文件。\nlinux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。\n\n/usr/local\n安装本地程序的一般默认路径。\n当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。\n\n/proc\n特殊文件目录。\n这个目录采用一种特殊的文件系统格式（proc格式，内核支持这种格式。其中包含了全部虚拟文件。它们并不保存在磁盘中，也不占据磁盘空间(尽管命令ls -c会显示它们的大小)。当您查看它们时，您实际上看到的是内存里的信息，这些文件助于我们了解系统内部信息。例如：\n├1/ 关于进程1的信息目录。每个进程在/proc 下一个名为其进程号的目录。\n├cpuinfo 处理器信息，如类型、制造商、型号和性能。\n├devices 当前运行的核心配置的设备驱动的列表。\n├dma 显示当前使用的DMA通道。\n├filesystems 核心配置的文件系统。\n├interrupts 显示使用的中断，and how many of each there have been.\n├ioports 当前使用的I/O端口。\n├kcore 系统物理内存映象。与物理内存大小一样，但实际不占这么多内存；\n├kmsg 核心输出的消息。也被送到syslog 。\n├ksyms 核心符号表。\n├loadavg 系统”平均负载”；3个没意义的指示器指出系统当前的工作量。\n├meminfo 存储器使用信息，包括物理内存和swap。\n├modules 当前加载了哪些核心模块。\n├net 网络协议状态信息。\n├self 到查看/proc 的程序的进程目录的符号连接。\n├stat 系统的不同状态\n├uptime 系统启动的时间长度。\n└version 核心版本。\n\n/opt\n可择的文件目录。\n这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。\n\n/mnt\n临时挂载目录。\n这个目录一般是用于存放挂载储存设备的挂载目录的，比如磁盘，光驱，网络文件系统等，当我们需要挂载某个磁盘设备的时候，可以把磁盘设备挂载到这个目录上去，这样我们可以直接通过访问这个目录来访问那个磁盘了。一般来说，我们最好在/mnt目录下面多建立几个子目录，挂载的时候挂载到这些子目录上面，因为通常我们可能不仅仅是挂载一个设备吧?\n\n/media\n挂载的媒体设备目录。\n挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。\n\n/var\n内容经常变化的目录。\n此目录下文件的大小可能会改变，如缓冲文件，日志文件，缓存文件，等一般都存放在这里。\n\n/tmp\n临时文件目录。\n该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。\n\n另外，有些目录初学者容易混淆，这里简单区分一下：\n/bin,/sbin与/usr/bin,/usr/sbin:\n/bin一般存放对于用户和系统来说“必须”的程序（二进制文件）。\n/sbin一般存放用于系统管理的“必需”的程序（二进制文件），一般普通用户不会使用，根用户使用。\n/usr/bin一般存放的只是对用户和系统来说“不是必需的”程序（二进制文件）。\n/usr/sbin一般存放用于系统管理的系统管理的不是必需的程序（二进制文件）。\n\n/lib与/usr/lib:\n/lib和/usr/lib的区别类似/bin,/sbin与/usr/bin,/usr/sbin。\n/lib一般存放对于用户和系统来说“必须”的库（二进制文件）。\n/usr/lib一般存放的只是对用户和系统来说“不是必需的”库（二进制文件）。\n\nlinux下的文件结构，看看每个文件夹都是干吗用的\n/bin 二进制可执行命令 \n/dev 设备特殊文件 \n/etc 系统管理和配置文件 \n/etc/rc.d 启动的配置文件和脚本 \n/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示 \n/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件 \n/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序 \n/tmp 公用的临时文件存储点 \n/root 系统管理员的主目录（呵呵，特权阶级） \n/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。 \n/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里 \n/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。 \n/var 某些大文件的溢出区，比方说各种服务的日志文件 \n/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含： \n/usr/x11r6 存放x window的目录 \n/usr/bin 众多的应用程序 \n/usr/sbin 超级用户的一些管理程序 \n/usr/doc linux文档 \n/usr/include linux下开发和编译应用程序所需要的头文件 \n/usr/lib 常用的动态链接库和软件包的配置文件 \n/usr/man 帮助文档 \n/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里 \n/usr/local/bin 本地增加的命令 \n/usr/local/lib 本地增加的库\n\n\n10. /mnt目录 \n/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到 \n/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱， \n而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 \n\n下面详细介绍； \n\n/etc文件系统 \n/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个 \n程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 \n1. /etc/rc或/etc/rc.d或/etc/rc?.d \n启动、或改变运行级时运行的脚本或脚本的目录。 \n2. /etc/passwd \n用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其 \n他信息。 \n3. /etc/fdprm \n软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m \n的帮助页。 \n4. /etc/fstab \n指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 \n5. /etc/group \n类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 \n6. /etc/inittab \ninit 的配置文件。 \n7. /etc/issue \n包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内 \n容由系统管理员确定。 \n8. /etc/magic \n“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 \n9. /etc/motd \nm o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。 \n常用于通告信息，如计划关机时间的警告等。 \n10. /etc/mtab \n当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一 \n个当前安装的文件系统的列表时使用(例如df 命令)。 \n11. /etc/shadow \n在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d \n文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困 \n难，以此增加系统的安全性。 \n12. /etc/login.defs \nl o g i n命令的配置文件。 \n13. /etc/printcap \n类似/etc/termcap ，但针对打印机。语法不同。 \n14. /etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc \n登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 \n15. /etc/securetty \n确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不 \n可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 \n16. /etc/shells \n列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一 \n台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允 \n许该用户登录。 \n17. /etc/termcap \n终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义 \n序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。 \n这样，多数的程序可以在多数终端上运行。 \n\n\n/dev文件系统 \n/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。 \n设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/dev/makedev.local是\n系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准\nmakedev的一部分)。下面简要介绍/dev下一些常用文件。\n1./dev/console \n系统控制台，也就是直接和系统连接的监视器。 \n2. /dev/hd \ni d e硬盘驱动程序接口。如：/dev/hda指的是第一个硬盘，had1则是指/dev/hda的第一个\n分区。如系统中有其他的硬盘，则依次为/dev/hdb、/dev/hdc、......；如有多个分区则依次为\nhda1、hda2......\n3. /dev/sd\nscsi磁盘驱动程序接口。如有系统有scsi硬盘，就不会访问/dev/ha d，而会访问/dev/sda。 \n4. /dev/fd \n软驱设备驱动程序。如：/dev/fd0指系统的第一个软盘，也就是通常所说的a：盘，\n/dev/fd1指第二个软盘，......而/dev/fd1h1440则表示访问驱动器1中的4.5高密盘。\n5./dev/st\nscsi磁带驱动器驱动程序。\n6./dev/tty\n提供虚拟控制台支持。如：/dev/tty1指的是系统的第一个虚拟控制台，/dev/tty2则是系统\n的第二个虚拟控制台。\n7./dev/pty\n提供远程登陆伪终端支持。在进行telnet登录时就要用到/dev/pty设备。\n8./dev/ttys\n计算机串行接口，对于dos来说就是“com1”口。\n9./dev/cua\n计算机串行接口，与调制解调器一起使用的设备。\n10./dev/null\n“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来\n时，只要将输出信息输入到/dev/null中即可。\n\n\n/usr文件系统\n/usr是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr里的\n所有文件一般来自linux发行版(distribution)；本地安装的程序和其他东西在/usr/local下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr目录下的许多内容是 \n可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置 \n文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 \n1. /usr/x11r6 \n包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装， \nx的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形 \n工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 \n2. /usr/x386 \n类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 \n3. /usr/bin \n集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 \n4. /usr/sbin \n包括了根文件系统不必要的系统管理命令，例如多数服务程序。 \n5. /usr/man、/ u s r / i n f o、/ u s r / d o c \n这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节” \n都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文 \n件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调 \n用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 \n6. /usr/include \n包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、 \n子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名 \n字。 \n7. /usr/lib \n包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库 \n(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也 \n有许多程序把配置文件存入其中。 \n8. /usr/local \n本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大 \n的软件包，如t e x、e m a c s等。 \n\n\n/var文件系统 \n/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化 \n或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那 \n些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。 \n下面列出一些重要的目录(一些不太重要的目录省略了)。 \n1. /var/catman \n包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ usr/man / m a n中；有些m a n页 \n可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化， \n格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。 \n(/var/catman 经常被清除，就像清除临时目录一样。) \n2. /var/lib \n存放系统正常运行时要改变的文件。 \n3. /var/local \n存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要， \n即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 \n4. /var/lock \n锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在 \n使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文 \n件。 \n5. /var/log \n各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注 \n销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不 \n确定地增长，应该定期清除。 \n6. /var/run \n保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登 \n录的用户的信息。 \n7. /var/spool \n放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每 \n个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 \n8. /var/tmp \n比/tmp 允许更大的或需要存在较长时间的临时文件。 \n注意系统管理员可能不允许/var/tmp 有很旧的文件。 \n\n\n/proc文件系统 \n/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一 \n个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提 \n供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详 \n细的说明)。 \n1. /proc/x \n关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自 \n己进程号的目录。 \n2. /proc/cpuinfo \n存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 \n3. /proc/devices \n当前运行的核心配置的设备驱动的列表。 \n4. /proc/dma \n显示当前使用的d m a通道。 \n5. /proc/filesystems \n核心配置的文件系统信息。 \n6. /proc/interrupts \n显示被占用的中断信息和占用者的信息，以及被占用的数量。 \n7. /proc/ioports \n当前使用的i / o端口。 \n8. /proc/kcore \n系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅 \n仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何 \n东西占用任何磁盘空间。) \n9. /proc/kmsg \n核心输出的消息。也会被送到s y s l o g。 \n10. /proc/ksyms \n核心符号表。 \n11. /proc/loadavg \n系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 \n12. /proc/meminfo \n各种存储器使用信息，包括物理内存和交换分区( s w a p )。 \n13. /proc/modules \n存放当前加载了哪些核心模块信息。 \n14. /proc/net \n网络协议状态信息。 \n15. /proc/self \n存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同 \n的连接。这主要便于程序得到它自己的进程目录。 \n16. /proc/stat \n系统的不同状态，例如，系统启动后页面发生错误的次数。 \n17. /proc/uptime \n系统启动的时间长度。 \n18. /proc/version \n核心版本。\n\n","source":"_posts/Linux下各目录的默认含义.md","raw":"---\ntitle: Linux下各目录的默认含义\ndate: 2016-06-27 21:09:58\ntags: 目录\ncategories: Linux\ndescription: \"摘录，了解\"\n---\n\n常用的文件目录,以及文件位置,文件夹默认的作用等的总结。\n例如：/etc/init.d,/usr/local等\n<!--more-->\n\n根:/\n/etc\n全局的配置文件存放目录。\n系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。 \n\n/boot\n引导程序，内核等存放的目录。\n这个目录，包括了在引导过程中所必需的文件，引导程序的相关文件（例如grub，lilo以及相应的配置文件以及Linux操作系统内核相关文件（例如vmlinuz等一般都存放在这里。在最开始的启动阶段，通过引导程序将内核加载到内存，完成内核的启动（这个时候，虚拟文件系统还不存在，加载的内核虽然是从硬盘读取的，但是没经过Linux的虚拟文件系统，这是比较底层的东西来实现的。然后内核自己创建好虚拟文件系统，并且从虚拟文件系统的其他子目录中（例如/sbin 和 /etc加载需要在开机启动的其他程序或者服务或者特定的动作（部分可以由用户自己在相应的目录中修改相应的文件来配制。如果我们的机器中包含多个操作系统，那么可以通过修改这个目录中的某个配置文件（例如grub.conf来调整启动的默认操作系统，系统启动的择菜单，以及启动延迟等参数。\n\n/sbin\n超级用户可以使用的命令的存放目录。\n存放大多涉及系统管理的命令（例如引导系统的init程序，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令（但是时普通用户也可能会用到。这个目录和/usr/sbin; /usr/X11R6/sbin或/usr/local/sbin等目录是相似的，我们要记住，凡是目录sbin中包含的都是root权限才能执行的，这样就行了。后面会具体区分。\n\n/bin\n普通用户可以使用的命令的存放目录。\n系统所需要的那些命令位于此目录，比如ls、cp、mkdir等命令；类似的目录还/usr/bin，/usr/local/bin等等。这个目录中的文件都是可执行的、普通用户都可以使用的命令。作为基础系统所需要的最基础的命令就是放在这里。\n\n/lib\n根目录下的所程序的共享库目录。\n此目录下包含系统引导和在根用户执行命令时候所必需用到的共享库。做个不太好但是比较形象的比喻，点类似于Windows上面的system32目录。理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。类似的目录还/usr/lib，/usr/local/lib等等。\n\n/dev\n设备文件目录。\n在Linux中设备都是以文件形式出现，这里的设备可以是硬盘，键盘，鼠标，网卡，终端，等设备，通过访问这些文件可以访问到相应的设备。设备文件可以使用mknod命令来创建，具体参见相应的命令；而为了将对这些设备文件的访问转化为对设备的访问，需要向相应的设备提供设备驱动模块（一般将设备驱动编译之后，生成的结果是一个*.ko类型的二进制文件，在内核启动之后，再通过insmod等命令加载相应的设备驱动之后，我们就可以通过设备文件来访问设备了。一般来说，想要Linux系统支持某个设备，只要个东西：相应的硬件设备，支持硬件的驱动模块，以及相应的设备文件。\n\n/home\n普通用户的家目录（$HOME目录。\n在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。\n\n/root\n用户root的$HOME目录\n系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。\n\n/usr\n这个目录中包含了命令库文件和在通常操作中不会修改的文件。\n这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。\n\n/usr/lib\n目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。\n这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。\n\n/usr/bin\n一般使用者使用并且不是系统自检等所必需可执行文件的目录。\n此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。\n\n/usr/sbin\n管理员使用的非系统必须的可执行文件存放目录。\n此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。\n\n/usr/share\n存放共享文件的目录。\n在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。\n\n/usr/include\nC程序语言编译使用的头文件。\nlinux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。\n\n/usr/local\n安装本地程序的一般默认路径。\n当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。\n\n/proc\n特殊文件目录。\n这个目录采用一种特殊的文件系统格式（proc格式，内核支持这种格式。其中包含了全部虚拟文件。它们并不保存在磁盘中，也不占据磁盘空间(尽管命令ls -c会显示它们的大小)。当您查看它们时，您实际上看到的是内存里的信息，这些文件助于我们了解系统内部信息。例如：\n├1/ 关于进程1的信息目录。每个进程在/proc 下一个名为其进程号的目录。\n├cpuinfo 处理器信息，如类型、制造商、型号和性能。\n├devices 当前运行的核心配置的设备驱动的列表。\n├dma 显示当前使用的DMA通道。\n├filesystems 核心配置的文件系统。\n├interrupts 显示使用的中断，and how many of each there have been.\n├ioports 当前使用的I/O端口。\n├kcore 系统物理内存映象。与物理内存大小一样，但实际不占这么多内存；\n├kmsg 核心输出的消息。也被送到syslog 。\n├ksyms 核心符号表。\n├loadavg 系统”平均负载”；3个没意义的指示器指出系统当前的工作量。\n├meminfo 存储器使用信息，包括物理内存和swap。\n├modules 当前加载了哪些核心模块。\n├net 网络协议状态信息。\n├self 到查看/proc 的程序的进程目录的符号连接。\n├stat 系统的不同状态\n├uptime 系统启动的时间长度。\n└version 核心版本。\n\n/opt\n可择的文件目录。\n这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。\n\n/mnt\n临时挂载目录。\n这个目录一般是用于存放挂载储存设备的挂载目录的，比如磁盘，光驱，网络文件系统等，当我们需要挂载某个磁盘设备的时候，可以把磁盘设备挂载到这个目录上去，这样我们可以直接通过访问这个目录来访问那个磁盘了。一般来说，我们最好在/mnt目录下面多建立几个子目录，挂载的时候挂载到这些子目录上面，因为通常我们可能不仅仅是挂载一个设备吧?\n\n/media\n挂载的媒体设备目录。\n挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。\n\n/var\n内容经常变化的目录。\n此目录下文件的大小可能会改变，如缓冲文件，日志文件，缓存文件，等一般都存放在这里。\n\n/tmp\n临时文件目录。\n该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。\n\n另外，有些目录初学者容易混淆，这里简单区分一下：\n/bin,/sbin与/usr/bin,/usr/sbin:\n/bin一般存放对于用户和系统来说“必须”的程序（二进制文件）。\n/sbin一般存放用于系统管理的“必需”的程序（二进制文件），一般普通用户不会使用，根用户使用。\n/usr/bin一般存放的只是对用户和系统来说“不是必需的”程序（二进制文件）。\n/usr/sbin一般存放用于系统管理的系统管理的不是必需的程序（二进制文件）。\n\n/lib与/usr/lib:\n/lib和/usr/lib的区别类似/bin,/sbin与/usr/bin,/usr/sbin。\n/lib一般存放对于用户和系统来说“必须”的库（二进制文件）。\n/usr/lib一般存放的只是对用户和系统来说“不是必需的”库（二进制文件）。\n\nlinux下的文件结构，看看每个文件夹都是干吗用的\n/bin 二进制可执行命令 \n/dev 设备特殊文件 \n/etc 系统管理和配置文件 \n/etc/rc.d 启动的配置文件和脚本 \n/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示 \n/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件 \n/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序 \n/tmp 公用的临时文件存储点 \n/root 系统管理员的主目录（呵呵，特权阶级） \n/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。 \n/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里 \n/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。 \n/var 某些大文件的溢出区，比方说各种服务的日志文件 \n/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含： \n/usr/x11r6 存放x window的目录 \n/usr/bin 众多的应用程序 \n/usr/sbin 超级用户的一些管理程序 \n/usr/doc linux文档 \n/usr/include linux下开发和编译应用程序所需要的头文件 \n/usr/lib 常用的动态链接库和软件包的配置文件 \n/usr/man 帮助文档 \n/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里 \n/usr/local/bin 本地增加的命令 \n/usr/local/lib 本地增加的库\n\n\n10. /mnt目录 \n/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到 \n/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱， \n而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 \n\n下面详细介绍； \n\n/etc文件系统 \n/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个 \n程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 \n1. /etc/rc或/etc/rc.d或/etc/rc?.d \n启动、或改变运行级时运行的脚本或脚本的目录。 \n2. /etc/passwd \n用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其 \n他信息。 \n3. /etc/fdprm \n软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m \n的帮助页。 \n4. /etc/fstab \n指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 \n5. /etc/group \n类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 \n6. /etc/inittab \ninit 的配置文件。 \n7. /etc/issue \n包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内 \n容由系统管理员确定。 \n8. /etc/magic \n“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 \n9. /etc/motd \nm o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。 \n常用于通告信息，如计划关机时间的警告等。 \n10. /etc/mtab \n当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一 \n个当前安装的文件系统的列表时使用(例如df 命令)。 \n11. /etc/shadow \n在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d \n文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困 \n难，以此增加系统的安全性。 \n12. /etc/login.defs \nl o g i n命令的配置文件。 \n13. /etc/printcap \n类似/etc/termcap ，但针对打印机。语法不同。 \n14. /etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc \n登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 \n15. /etc/securetty \n确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不 \n可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 \n16. /etc/shells \n列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一 \n台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允 \n许该用户登录。 \n17. /etc/termcap \n终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义 \n序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。 \n这样，多数的程序可以在多数终端上运行。 \n\n\n/dev文件系统 \n/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。 \n设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/dev/makedev.local是\n系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准\nmakedev的一部分)。下面简要介绍/dev下一些常用文件。\n1./dev/console \n系统控制台，也就是直接和系统连接的监视器。 \n2. /dev/hd \ni d e硬盘驱动程序接口。如：/dev/hda指的是第一个硬盘，had1则是指/dev/hda的第一个\n分区。如系统中有其他的硬盘，则依次为/dev/hdb、/dev/hdc、......；如有多个分区则依次为\nhda1、hda2......\n3. /dev/sd\nscsi磁盘驱动程序接口。如有系统有scsi硬盘，就不会访问/dev/ha d，而会访问/dev/sda。 \n4. /dev/fd \n软驱设备驱动程序。如：/dev/fd0指系统的第一个软盘，也就是通常所说的a：盘，\n/dev/fd1指第二个软盘，......而/dev/fd1h1440则表示访问驱动器1中的4.5高密盘。\n5./dev/st\nscsi磁带驱动器驱动程序。\n6./dev/tty\n提供虚拟控制台支持。如：/dev/tty1指的是系统的第一个虚拟控制台，/dev/tty2则是系统\n的第二个虚拟控制台。\n7./dev/pty\n提供远程登陆伪终端支持。在进行telnet登录时就要用到/dev/pty设备。\n8./dev/ttys\n计算机串行接口，对于dos来说就是“com1”口。\n9./dev/cua\n计算机串行接口，与调制解调器一起使用的设备。\n10./dev/null\n“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来\n时，只要将输出信息输入到/dev/null中即可。\n\n\n/usr文件系统\n/usr是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr里的\n所有文件一般来自linux发行版(distribution)；本地安装的程序和其他东西在/usr/local下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr目录下的许多内容是 \n可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置 \n文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 \n1. /usr/x11r6 \n包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装， \nx的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形 \n工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 \n2. /usr/x386 \n类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 \n3. /usr/bin \n集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 \n4. /usr/sbin \n包括了根文件系统不必要的系统管理命令，例如多数服务程序。 \n5. /usr/man、/ u s r / i n f o、/ u s r / d o c \n这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节” \n都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文 \n件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调 \n用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 \n6. /usr/include \n包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、 \n子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名 \n字。 \n7. /usr/lib \n包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库 \n(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也 \n有许多程序把配置文件存入其中。 \n8. /usr/local \n本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大 \n的软件包，如t e x、e m a c s等。 \n\n\n/var文件系统 \n/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化 \n或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那 \n些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。 \n下面列出一些重要的目录(一些不太重要的目录省略了)。 \n1. /var/catman \n包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ usr/man / m a n中；有些m a n页 \n可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化， \n格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。 \n(/var/catman 经常被清除，就像清除临时目录一样。) \n2. /var/lib \n存放系统正常运行时要改变的文件。 \n3. /var/local \n存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要， \n即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 \n4. /var/lock \n锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在 \n使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文 \n件。 \n5. /var/log \n各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注 \n销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不 \n确定地增长，应该定期清除。 \n6. /var/run \n保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登 \n录的用户的信息。 \n7. /var/spool \n放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每 \n个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 \n8. /var/tmp \n比/tmp 允许更大的或需要存在较长时间的临时文件。 \n注意系统管理员可能不允许/var/tmp 有很旧的文件。 \n\n\n/proc文件系统 \n/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一 \n个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提 \n供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详 \n细的说明)。 \n1. /proc/x \n关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自 \n己进程号的目录。 \n2. /proc/cpuinfo \n存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 \n3. /proc/devices \n当前运行的核心配置的设备驱动的列表。 \n4. /proc/dma \n显示当前使用的d m a通道。 \n5. /proc/filesystems \n核心配置的文件系统信息。 \n6. /proc/interrupts \n显示被占用的中断信息和占用者的信息，以及被占用的数量。 \n7. /proc/ioports \n当前使用的i / o端口。 \n8. /proc/kcore \n系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅 \n仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何 \n东西占用任何磁盘空间。) \n9. /proc/kmsg \n核心输出的消息。也会被送到s y s l o g。 \n10. /proc/ksyms \n核心符号表。 \n11. /proc/loadavg \n系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 \n12. /proc/meminfo \n各种存储器使用信息，包括物理内存和交换分区( s w a p )。 \n13. /proc/modules \n存放当前加载了哪些核心模块信息。 \n14. /proc/net \n网络协议状态信息。 \n15. /proc/self \n存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同 \n的连接。这主要便于程序得到它自己的进程目录。 \n16. /proc/stat \n系统的不同状态，例如，系统启动后页面发生错误的次数。 \n17. /proc/uptime \n系统启动的时间长度。 \n18. /proc/version \n核心版本。\n\n","slug":"Linux下各目录的默认含义","published":1,"updated":"2016-08-31T12:24:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwpyz7cp00a8ugv5ijlzdauh","content":"<p>常用的文件目录,以及文件位置,文件夹默认的作用等的总结。<br>例如：/etc/init.d,/usr/local等<br><a id=\"more\"></a></p>\n<p>根:/<br>/etc<br>全局的配置文件存放目录。<br>系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。 </p>\n<p>/boot<br>引导程序，内核等存放的目录。<br>这个目录，包括了在引导过程中所必需的文件，引导程序的相关文件（例如grub，lilo以及相应的配置文件以及Linux操作系统内核相关文件（例如vmlinuz等一般都存放在这里。在最开始的启动阶段，通过引导程序将内核加载到内存，完成内核的启动（这个时候，虚拟文件系统还不存在，加载的内核虽然是从硬盘读取的，但是没经过Linux的虚拟文件系统，这是比较底层的东西来实现的。然后内核自己创建好虚拟文件系统，并且从虚拟文件系统的其他子目录中（例如/sbin 和 /etc加载需要在开机启动的其他程序或者服务或者特定的动作（部分可以由用户自己在相应的目录中修改相应的文件来配制。如果我们的机器中包含多个操作系统，那么可以通过修改这个目录中的某个配置文件（例如grub.conf来调整启动的默认操作系统，系统启动的择菜单，以及启动延迟等参数。</p>\n<p>/sbin<br>超级用户可以使用的命令的存放目录。<br>存放大多涉及系统管理的命令（例如引导系统的init程序，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令（但是时普通用户也可能会用到。这个目录和/usr/sbin; /usr/X11R6/sbin或/usr/local/sbin等目录是相似的，我们要记住，凡是目录sbin中包含的都是root权限才能执行的，这样就行了。后面会具体区分。</p>\n<p>/bin<br>普通用户可以使用的命令的存放目录。<br>系统所需要的那些命令位于此目录，比如ls、cp、mkdir等命令；类似的目录还/usr/bin，/usr/local/bin等等。这个目录中的文件都是可执行的、普通用户都可以使用的命令。作为基础系统所需要的最基础的命令就是放在这里。</p>\n<p>/lib<br>根目录下的所程序的共享库目录。<br>此目录下包含系统引导和在根用户执行命令时候所必需用到的共享库。做个不太好但是比较形象的比喻，点类似于Windows上面的system32目录。理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。类似的目录还/usr/lib，/usr/local/lib等等。</p>\n<p>/dev<br>设备文件目录。<br>在Linux中设备都是以文件形式出现，这里的设备可以是硬盘，键盘，鼠标，网卡，终端，等设备，通过访问这些文件可以访问到相应的设备。设备文件可以使用mknod命令来创建，具体参见相应的命令；而为了将对这些设备文件的访问转化为对设备的访问，需要向相应的设备提供设备驱动模块（一般将设备驱动编译之后，生成的结果是一个*.ko类型的二进制文件，在内核启动之后，再通过insmod等命令加载相应的设备驱动之后，我们就可以通过设备文件来访问设备了。一般来说，想要Linux系统支持某个设备，只要个东西：相应的硬件设备，支持硬件的驱动模块，以及相应的设备文件。</p>\n<p>/home<br>普通用户的家目录（$HOME目录。<br>在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。</p>\n<p>/root<br>用户root的$HOME目录<br>系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。</p>\n<p>/usr<br>这个目录中包含了命令库文件和在通常操作中不会修改的文件。<br>这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。</p>\n<p>/usr/lib<br>目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。<br>这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。</p>\n<p>/usr/bin<br>一般使用者使用并且不是系统自检等所必需可执行文件的目录。<br>此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。</p>\n<p>/usr/sbin<br>管理员使用的非系统必须的可执行文件存放目录。<br>此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。</p>\n<p>/usr/share<br>存放共享文件的目录。<br>在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。</p>\n<p>/usr/include<br>C程序语言编译使用的头文件。<br>linux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。</p>\n<p>/usr/local<br>安装本地程序的一般默认路径。<br>当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。</p>\n<p>/proc<br>特殊文件目录。<br>这个目录采用一种特殊的文件系统格式（proc格式，内核支持这种格式。其中包含了全部虚拟文件。它们并不保存在磁盘中，也不占据磁盘空间(尽管命令ls -c会显示它们的大小)。当您查看它们时，您实际上看到的是内存里的信息，这些文件助于我们了解系统内部信息。例如：<br>├1/ 关于进程1的信息目录。每个进程在/proc 下一个名为其进程号的目录。<br>├cpuinfo 处理器信息，如类型、制造商、型号和性能。<br>├devices 当前运行的核心配置的设备驱动的列表。<br>├dma 显示当前使用的DMA通道。<br>├filesystems 核心配置的文件系统。<br>├interrupts 显示使用的中断，and how many of each there have been.<br>├ioports 当前使用的I/O端口。<br>├kcore 系统物理内存映象。与物理内存大小一样，但实际不占这么多内存；<br>├kmsg 核心输出的消息。也被送到syslog 。<br>├ksyms 核心符号表。<br>├loadavg 系统”平均负载”；3个没意义的指示器指出系统当前的工作量。<br>├meminfo 存储器使用信息，包括物理内存和swap。<br>├modules 当前加载了哪些核心模块。<br>├net 网络协议状态信息。<br>├self 到查看/proc 的程序的进程目录的符号连接。<br>├stat 系统的不同状态<br>├uptime 系统启动的时间长度。<br>└version 核心版本。</p>\n<p>/opt<br>可择的文件目录。<br>这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。</p>\n<p>/mnt<br>临时挂载目录。<br>这个目录一般是用于存放挂载储存设备的挂载目录的，比如磁盘，光驱，网络文件系统等，当我们需要挂载某个磁盘设备的时候，可以把磁盘设备挂载到这个目录上去，这样我们可以直接通过访问这个目录来访问那个磁盘了。一般来说，我们最好在/mnt目录下面多建立几个子目录，挂载的时候挂载到这些子目录上面，因为通常我们可能不仅仅是挂载一个设备吧?</p>\n<p>/media<br>挂载的媒体设备目录。<br>挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。</p>\n<p>/var<br>内容经常变化的目录。<br>此目录下文件的大小可能会改变，如缓冲文件，日志文件，缓存文件，等一般都存放在这里。</p>\n<p>/tmp<br>临时文件目录。<br>该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。</p>\n<p>另外，有些目录初学者容易混淆，这里简单区分一下：<br>/bin,/sbin与/usr/bin,/usr/sbin:<br>/bin一般存放对于用户和系统来说“必须”的程序（二进制文件）。<br>/sbin一般存放用于系统管理的“必需”的程序（二进制文件），一般普通用户不会使用，根用户使用。<br>/usr/bin一般存放的只是对用户和系统来说“不是必需的”程序（二进制文件）。<br>/usr/sbin一般存放用于系统管理的系统管理的不是必需的程序（二进制文件）。</p>\n<p>/lib与/usr/lib:<br>/lib和/usr/lib的区别类似/bin,/sbin与/usr/bin,/usr/sbin。<br>/lib一般存放对于用户和系统来说“必须”的库（二进制文件）。<br>/usr/lib一般存放的只是对用户和系统来说“不是必需的”库（二进制文件）。</p>\n<p>linux下的文件结构，看看每个文件夹都是干吗用的<br>/bin 二进制可执行命令<br>/dev 设备特殊文件<br>/etc 系统管理和配置文件<br>/etc/rc.d 启动的配置文件和脚本<br>/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示<br>/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件<br>/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序<br>/tmp 公用的临时文件存储点<br>/root 系统管理员的主目录（呵呵，特权阶级）<br>/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。<br>/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里<br>/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。<br>/var 某些大文件的溢出区，比方说各种服务的日志文件<br>/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：<br>/usr/x11r6 存放x window的目录<br>/usr/bin 众多的应用程序<br>/usr/sbin 超级用户的一些管理程序<br>/usr/doc linux文档<br>/usr/include linux下开发和编译应用程序所需要的头文件<br>/usr/lib 常用的动态链接库和软件包的配置文件<br>/usr/man 帮助文档<br>/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里<br>/usr/local/bin 本地增加的命令<br>/usr/local/lib 本地增加的库</p>\n<ol start=\"10\">\n<li>/mnt目录<br>/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到<br>/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱，<br>而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 </li>\n</ol>\n<p>下面详细介绍； </p>\n<p>/etc文件系统<br>/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个<br>程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 </p>\n<ol>\n<li>/etc/rc或/etc/rc.d或/etc/rc?.d<br>启动、或改变运行级时运行的脚本或脚本的目录。 </li>\n<li>/etc/passwd<br>用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其<br>他信息。 </li>\n<li>/etc/fdprm<br>软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m<br>的帮助页。 </li>\n<li>/etc/fstab<br>指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 </li>\n<li>/etc/group<br>类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 </li>\n<li>/etc/inittab<br>init 的配置文件。 </li>\n<li>/etc/issue<br>包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内<br>容由系统管理员确定。 </li>\n<li>/etc/magic<br>“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 </li>\n<li>/etc/motd<br>m o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。<br>常用于通告信息，如计划关机时间的警告等。 </li>\n<li>/etc/mtab<br>当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一<br>个当前安装的文件系统的列表时使用(例如df 命令)。 </li>\n<li>/etc/shadow<br>在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d<br>文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困<br>难，以此增加系统的安全性。 </li>\n<li>/etc/login.defs<br>l o g i n命令的配置文件。 </li>\n<li>/etc/printcap<br>类似/etc/termcap ，但针对打印机。语法不同。 </li>\n<li>/etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc<br>登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 </li>\n<li>/etc/securetty<br>确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不<br>可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 </li>\n<li>/etc/shells<br>列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一<br>台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允<br>许该用户登录。 </li>\n<li>/etc/termcap<br>终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义<br>序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。<br>这样，多数的程序可以在多数终端上运行。 </li>\n</ol>\n<p>/dev文件系统<br>/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。<br>设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/dev/makedev.local是<br>系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准<br>makedev的一部分)。下面简要介绍/dev下一些常用文件。<br>1./dev/console<br>系统控制台，也就是直接和系统连接的监视器。 </p>\n<ol start=\"2\">\n<li>/dev/hd<br>i d e硬盘驱动程序接口。如：/dev/hda指的是第一个硬盘，had1则是指/dev/hda的第一个<br>分区。如系统中有其他的硬盘，则依次为/dev/hdb、/dev/hdc、……；如有多个分区则依次为<br>hda1、hda2……</li>\n<li>/dev/sd<br>scsi磁盘驱动程序接口。如有系统有scsi硬盘，就不会访问/dev/ha d，而会访问/dev/sda。 </li>\n<li>/dev/fd<br>软驱设备驱动程序。如：/dev/fd0指系统的第一个软盘，也就是通常所说的a：盘，<br>/dev/fd1指第二个软盘，……而/dev/fd1h1440则表示访问驱动器1中的4.5高密盘。<br>5./dev/st<br>scsi磁带驱动器驱动程序。<br>6./dev/tty<br>提供虚拟控制台支持。如：/dev/tty1指的是系统的第一个虚拟控制台，/dev/tty2则是系统<br>的第二个虚拟控制台。<br>7./dev/pty<br>提供远程登陆伪终端支持。在进行telnet登录时就要用到/dev/pty设备。<br>8./dev/ttys<br>计算机串行接口，对于dos来说就是“com1”口。<br>9./dev/cua<br>计算机串行接口，与调制解调器一起使用的设备。<br>10./dev/null<br>“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来<br>时，只要将输出信息输入到/dev/null中即可。</li>\n</ol>\n<p>/usr文件系统<br>/usr是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr里的<br>所有文件一般来自linux发行版(distribution)；本地安装的程序和其他东西在/usr/local下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr目录下的许多内容是<br>可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置<br>文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 </p>\n<ol>\n<li>/usr/x11r6<br>包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，<br>x的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形<br>工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 </li>\n<li>/usr/x386<br>类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 </li>\n<li>/usr/bin<br>集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 </li>\n<li>/usr/sbin<br>包括了根文件系统不必要的系统管理命令，例如多数服务程序。 </li>\n<li>/usr/man、/ u s r / i n f o、/ u s r / d o c<br>这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节”<br>都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文<br>件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调<br>用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 </li>\n<li>/usr/include<br>包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、<br>子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名<br>字。 </li>\n<li>/usr/lib<br>包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库<br>(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也<br>有许多程序把配置文件存入其中。 </li>\n<li>/usr/local<br>本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大<br>的软件包，如t e x、e m a c s等。 </li>\n</ol>\n<p>/var文件系统<br>/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化<br>或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那<br>些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。<br>下面列出一些重要的目录(一些不太重要的目录省略了)。 </p>\n<ol>\n<li>/var/catman<br>包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ usr/man / m a n中；有些m a n页<br>可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化，<br>格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。<br>(/var/catman 经常被清除，就像清除临时目录一样。) </li>\n<li>/var/lib<br>存放系统正常运行时要改变的文件。 </li>\n<li>/var/local<br>存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，<br>即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 </li>\n<li>/var/lock<br>锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在<br>使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文<br>件。 </li>\n<li>/var/log<br>各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注<br>销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不<br>确定地增长，应该定期清除。 </li>\n<li>/var/run<br>保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登<br>录的用户的信息。 </li>\n<li>/var/spool<br>放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每<br>个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 </li>\n<li>/var/tmp<br>比/tmp 允许更大的或需要存在较长时间的临时文件。<br>注意系统管理员可能不允许/var/tmp 有很旧的文件。 </li>\n</ol>\n<p>/proc文件系统<br>/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一<br>个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提<br>供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详<br>细的说明)。 </p>\n<ol>\n<li>/proc/x<br>关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自<br>己进程号的目录。 </li>\n<li>/proc/cpuinfo<br>存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 </li>\n<li>/proc/devices<br>当前运行的核心配置的设备驱动的列表。 </li>\n<li>/proc/dma<br>显示当前使用的d m a通道。 </li>\n<li>/proc/filesystems<br>核心配置的文件系统信息。 </li>\n<li>/proc/interrupts<br>显示被占用的中断信息和占用者的信息，以及被占用的数量。 </li>\n<li>/proc/ioports<br>当前使用的i / o端口。 </li>\n<li>/proc/kcore<br>系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅<br>仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何<br>东西占用任何磁盘空间。) </li>\n<li>/proc/kmsg<br>核心输出的消息。也会被送到s y s l o g。 </li>\n<li>/proc/ksyms<br>核心符号表。 </li>\n<li>/proc/loadavg<br>系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 </li>\n<li>/proc/meminfo<br>各种存储器使用信息，包括物理内存和交换分区( s w a p )。 </li>\n<li>/proc/modules<br>存放当前加载了哪些核心模块信息。 </li>\n<li>/proc/net<br>网络协议状态信息。 </li>\n<li>/proc/self<br>存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同<br>的连接。这主要便于程序得到它自己的进程目录。 </li>\n<li>/proc/stat<br>系统的不同状态，例如，系统启动后页面发生错误的次数。 </li>\n<li>/proc/uptime<br>系统启动的时间长度。 </li>\n<li>/proc/version<br>核心版本。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>常用的文件目录,以及文件位置,文件夹默认的作用等的总结。<br>例如：/etc/init.d,/usr/local等<br></p>","more":"<p></p>\n<p>根:/<br>/etc<br>全局的配置文件存放目录。<br>系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。 </p>\n<p>/boot<br>引导程序，内核等存放的目录。<br>这个目录，包括了在引导过程中所必需的文件，引导程序的相关文件（例如grub，lilo以及相应的配置文件以及Linux操作系统内核相关文件（例如vmlinuz等一般都存放在这里。在最开始的启动阶段，通过引导程序将内核加载到内存，完成内核的启动（这个时候，虚拟文件系统还不存在，加载的内核虽然是从硬盘读取的，但是没经过Linux的虚拟文件系统，这是比较底层的东西来实现的。然后内核自己创建好虚拟文件系统，并且从虚拟文件系统的其他子目录中（例如/sbin 和 /etc加载需要在开机启动的其他程序或者服务或者特定的动作（部分可以由用户自己在相应的目录中修改相应的文件来配制。如果我们的机器中包含多个操作系统，那么可以通过修改这个目录中的某个配置文件（例如grub.conf来调整启动的默认操作系统，系统启动的择菜单，以及启动延迟等参数。</p>\n<p>/sbin<br>超级用户可以使用的命令的存放目录。<br>存放大多涉及系统管理的命令（例如引导系统的init程序，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令（但是时普通用户也可能会用到。这个目录和/usr/sbin; /usr/X11R6/sbin或/usr/local/sbin等目录是相似的，我们要记住，凡是目录sbin中包含的都是root权限才能执行的，这样就行了。后面会具体区分。</p>\n<p>/bin<br>普通用户可以使用的命令的存放目录。<br>系统所需要的那些命令位于此目录，比如ls、cp、mkdir等命令；类似的目录还/usr/bin，/usr/local/bin等等。这个目录中的文件都是可执行的、普通用户都可以使用的命令。作为基础系统所需要的最基础的命令就是放在这里。</p>\n<p>/lib<br>根目录下的所程序的共享库目录。<br>此目录下包含系统引导和在根用户执行命令时候所必需用到的共享库。做个不太好但是比较形象的比喻，点类似于Windows上面的system32目录。理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。类似的目录还/usr/lib，/usr/local/lib等等。</p>\n<p>/dev<br>设备文件目录。<br>在Linux中设备都是以文件形式出现，这里的设备可以是硬盘，键盘，鼠标，网卡，终端，等设备，通过访问这些文件可以访问到相应的设备。设备文件可以使用mknod命令来创建，具体参见相应的命令；而为了将对这些设备文件的访问转化为对设备的访问，需要向相应的设备提供设备驱动模块（一般将设备驱动编译之后，生成的结果是一个*.ko类型的二进制文件，在内核启动之后，再通过insmod等命令加载相应的设备驱动之后，我们就可以通过设备文件来访问设备了。一般来说，想要Linux系统支持某个设备，只要个东西：相应的硬件设备，支持硬件的驱动模块，以及相应的设备文件。</p>\n<p>/home<br>普通用户的家目录（$HOME目录。<br>在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。</p>\n<p>/root<br>用户root的$HOME目录<br>系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。</p>\n<p>/usr<br>这个目录中包含了命令库文件和在通常操作中不会修改的文件。<br>这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。</p>\n<p>/usr/lib<br>目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。<br>这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。</p>\n<p>/usr/bin<br>一般使用者使用并且不是系统自检等所必需可执行文件的目录。<br>此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。</p>\n<p>/usr/sbin<br>管理员使用的非系统必须的可执行文件存放目录。<br>此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。</p>\n<p>/usr/share<br>存放共享文件的目录。<br>在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。</p>\n<p>/usr/include<br>C程序语言编译使用的头文件。<br>linux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。</p>\n<p>/usr/local<br>安装本地程序的一般默认路径。<br>当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。</p>\n<p>/proc<br>特殊文件目录。<br>这个目录采用一种特殊的文件系统格式（proc格式，内核支持这种格式。其中包含了全部虚拟文件。它们并不保存在磁盘中，也不占据磁盘空间(尽管命令ls -c会显示它们的大小)。当您查看它们时，您实际上看到的是内存里的信息，这些文件助于我们了解系统内部信息。例如：<br>├1/ 关于进程1的信息目录。每个进程在/proc 下一个名为其进程号的目录。<br>├cpuinfo 处理器信息，如类型、制造商、型号和性能。<br>├devices 当前运行的核心配置的设备驱动的列表。<br>├dma 显示当前使用的DMA通道。<br>├filesystems 核心配置的文件系统。<br>├interrupts 显示使用的中断，and how many of each there have been.<br>├ioports 当前使用的I/O端口。<br>├kcore 系统物理内存映象。与物理内存大小一样，但实际不占这么多内存；<br>├kmsg 核心输出的消息。也被送到syslog 。<br>├ksyms 核心符号表。<br>├loadavg 系统”平均负载”；3个没意义的指示器指出系统当前的工作量。<br>├meminfo 存储器使用信息，包括物理内存和swap。<br>├modules 当前加载了哪些核心模块。<br>├net 网络协议状态信息。<br>├self 到查看/proc 的程序的进程目录的符号连接。<br>├stat 系统的不同状态<br>├uptime 系统启动的时间长度。<br>└version 核心版本。</p>\n<p>/opt<br>可择的文件目录。<br>这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。</p>\n<p>/mnt<br>临时挂载目录。<br>这个目录一般是用于存放挂载储存设备的挂载目录的，比如磁盘，光驱，网络文件系统等，当我们需要挂载某个磁盘设备的时候，可以把磁盘设备挂载到这个目录上去，这样我们可以直接通过访问这个目录来访问那个磁盘了。一般来说，我们最好在/mnt目录下面多建立几个子目录，挂载的时候挂载到这些子目录上面，因为通常我们可能不仅仅是挂载一个设备吧?</p>\n<p>/media<br>挂载的媒体设备目录。<br>挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。</p>\n<p>/var<br>内容经常变化的目录。<br>此目录下文件的大小可能会改变，如缓冲文件，日志文件，缓存文件，等一般都存放在这里。</p>\n<p>/tmp<br>临时文件目录。<br>该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。</p>\n<p>另外，有些目录初学者容易混淆，这里简单区分一下：<br>/bin,/sbin与/usr/bin,/usr/sbin:<br>/bin一般存放对于用户和系统来说“必须”的程序（二进制文件）。<br>/sbin一般存放用于系统管理的“必需”的程序（二进制文件），一般普通用户不会使用，根用户使用。<br>/usr/bin一般存放的只是对用户和系统来说“不是必需的”程序（二进制文件）。<br>/usr/sbin一般存放用于系统管理的系统管理的不是必需的程序（二进制文件）。</p>\n<p>/lib与/usr/lib:<br>/lib和/usr/lib的区别类似/bin,/sbin与/usr/bin,/usr/sbin。<br>/lib一般存放对于用户和系统来说“必须”的库（二进制文件）。<br>/usr/lib一般存放的只是对用户和系统来说“不是必需的”库（二进制文件）。</p>\n<p>linux下的文件结构，看看每个文件夹都是干吗用的<br>/bin 二进制可执行命令<br>/dev 设备特殊文件<br>/etc 系统管理和配置文件<br>/etc/rc.d 启动的配置文件和脚本<br>/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示<br>/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件<br>/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序<br>/tmp 公用的临时文件存储点<br>/root 系统管理员的主目录（呵呵，特权阶级）<br>/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。<br>/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里<br>/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。<br>/var 某些大文件的溢出区，比方说各种服务的日志文件<br>/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：<br>/usr/x11r6 存放x window的目录<br>/usr/bin 众多的应用程序<br>/usr/sbin 超级用户的一些管理程序<br>/usr/doc linux文档<br>/usr/include linux下开发和编译应用程序所需要的头文件<br>/usr/lib 常用的动态链接库和软件包的配置文件<br>/usr/man 帮助文档<br>/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里<br>/usr/local/bin 本地增加的命令<br>/usr/local/lib 本地增加的库</p>\n<ol start=\"10\">\n<li>/mnt目录<br>/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到<br>/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱，<br>而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 </li>\n</ol>\n<p>下面详细介绍； </p>\n<p>/etc文件系统<br>/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个<br>程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 </p>\n<ol>\n<li>/etc/rc或/etc/rc.d或/etc/rc?.d<br>启动、或改变运行级时运行的脚本或脚本的目录。 </li>\n<li>/etc/passwd<br>用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其<br>他信息。 </li>\n<li>/etc/fdprm<br>软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m<br>的帮助页。 </li>\n<li>/etc/fstab<br>指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 </li>\n<li>/etc/group<br>类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 </li>\n<li>/etc/inittab<br>init 的配置文件。 </li>\n<li>/etc/issue<br>包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内<br>容由系统管理员确定。 </li>\n<li>/etc/magic<br>“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 </li>\n<li>/etc/motd<br>m o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。<br>常用于通告信息，如计划关机时间的警告等。 </li>\n<li>/etc/mtab<br>当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一<br>个当前安装的文件系统的列表时使用(例如df 命令)。 </li>\n<li>/etc/shadow<br>在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d<br>文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困<br>难，以此增加系统的安全性。 </li>\n<li>/etc/login.defs<br>l o g i n命令的配置文件。 </li>\n<li>/etc/printcap<br>类似/etc/termcap ，但针对打印机。语法不同。 </li>\n<li>/etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc<br>登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 </li>\n<li>/etc/securetty<br>确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不<br>可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 </li>\n<li>/etc/shells<br>列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一<br>台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允<br>许该用户登录。 </li>\n<li>/etc/termcap<br>终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义<br>序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。<br>这样，多数的程序可以在多数终端上运行。 </li>\n</ol>\n<p>/dev文件系统<br>/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。<br>设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/dev/makedev.local是<br>系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准<br>makedev的一部分)。下面简要介绍/dev下一些常用文件。<br>1./dev/console<br>系统控制台，也就是直接和系统连接的监视器。 </p>\n<ol start=\"2\">\n<li>/dev/hd<br>i d e硬盘驱动程序接口。如：/dev/hda指的是第一个硬盘，had1则是指/dev/hda的第一个<br>分区。如系统中有其他的硬盘，则依次为/dev/hdb、/dev/hdc、……；如有多个分区则依次为<br>hda1、hda2……</li>\n<li>/dev/sd<br>scsi磁盘驱动程序接口。如有系统有scsi硬盘，就不会访问/dev/ha d，而会访问/dev/sda。 </li>\n<li>/dev/fd<br>软驱设备驱动程序。如：/dev/fd0指系统的第一个软盘，也就是通常所说的a：盘，<br>/dev/fd1指第二个软盘，……而/dev/fd1h1440则表示访问驱动器1中的4.5高密盘。<br>5./dev/st<br>scsi磁带驱动器驱动程序。<br>6./dev/tty<br>提供虚拟控制台支持。如：/dev/tty1指的是系统的第一个虚拟控制台，/dev/tty2则是系统<br>的第二个虚拟控制台。<br>7./dev/pty<br>提供远程登陆伪终端支持。在进行telnet登录时就要用到/dev/pty设备。<br>8./dev/ttys<br>计算机串行接口，对于dos来说就是“com1”口。<br>9./dev/cua<br>计算机串行接口，与调制解调器一起使用的设备。<br>10./dev/null<br>“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来<br>时，只要将输出信息输入到/dev/null中即可。</li>\n</ol>\n<p>/usr文件系统<br>/usr是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr里的<br>所有文件一般来自linux发行版(distribution)；本地安装的程序和其他东西在/usr/local下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr目录下的许多内容是<br>可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置<br>文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 </p>\n<ol>\n<li>/usr/x11r6<br>包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，<br>x的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形<br>工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 </li>\n<li>/usr/x386<br>类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 </li>\n<li>/usr/bin<br>集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 </li>\n<li>/usr/sbin<br>包括了根文件系统不必要的系统管理命令，例如多数服务程序。 </li>\n<li>/usr/man、/ u s r / i n f o、/ u s r / d o c<br>这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节”<br>都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文<br>件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调<br>用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 </li>\n<li>/usr/include<br>包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、<br>子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名<br>字。 </li>\n<li>/usr/lib<br>包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库<br>(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也<br>有许多程序把配置文件存入其中。 </li>\n<li>/usr/local<br>本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大<br>的软件包，如t e x、e m a c s等。 </li>\n</ol>\n<p>/var文件系统<br>/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化<br>或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那<br>些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。<br>下面列出一些重要的目录(一些不太重要的目录省略了)。 </p>\n<ol>\n<li>/var/catman<br>包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ usr/man / m a n中；有些m a n页<br>可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化，<br>格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。<br>(/var/catman 经常被清除，就像清除临时目录一样。) </li>\n<li>/var/lib<br>存放系统正常运行时要改变的文件。 </li>\n<li>/var/local<br>存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，<br>即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 </li>\n<li>/var/lock<br>锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在<br>使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文<br>件。 </li>\n<li>/var/log<br>各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注<br>销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不<br>确定地增长，应该定期清除。 </li>\n<li>/var/run<br>保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登<br>录的用户的信息。 </li>\n<li>/var/spool<br>放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每<br>个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 </li>\n<li>/var/tmp<br>比/tmp 允许更大的或需要存在较长时间的临时文件。<br>注意系统管理员可能不允许/var/tmp 有很旧的文件。 </li>\n</ol>\n<p>/proc文件系统<br>/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一<br>个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提<br>供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详<br>细的说明)。 </p>\n<ol>\n<li>/proc/x<br>关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自<br>己进程号的目录。 </li>\n<li>/proc/cpuinfo<br>存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 </li>\n<li>/proc/devices<br>当前运行的核心配置的设备驱动的列表。 </li>\n<li>/proc/dma<br>显示当前使用的d m a通道。 </li>\n<li>/proc/filesystems<br>核心配置的文件系统信息。 </li>\n<li>/proc/interrupts<br>显示被占用的中断信息和占用者的信息，以及被占用的数量。 </li>\n<li>/proc/ioports<br>当前使用的i / o端口。 </li>\n<li>/proc/kcore<br>系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅<br>仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何<br>东西占用任何磁盘空间。) </li>\n<li>/proc/kmsg<br>核心输出的消息。也会被送到s y s l o g。 </li>\n<li>/proc/ksyms<br>核心符号表。 </li>\n<li>/proc/loadavg<br>系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 </li>\n<li>/proc/meminfo<br>各种存储器使用信息，包括物理内存和交换分区( s w a p )。 </li>\n<li>/proc/modules<br>存放当前加载了哪些核心模块信息。 </li>\n<li>/proc/net<br>网络协议状态信息。 </li>\n<li>/proc/self<br>存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同<br>的连接。这主要便于程序得到它自己的进程目录。 </li>\n<li>/proc/stat<br>系统的不同状态，例如，系统启动后页面发生错误的次数。 </li>\n<li>/proc/uptime<br>系统启动的时间长度。 </li>\n<li>/proc/version<br>核心版本。</li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/Linux-基础命令总结3/english.gif","slug":"english.gif","post":"cjwpyz773000mugv52t3o1cus","modified":1,"renderable":0},{"_id":"source/_posts/Spring中的Session生命周期/201608051337CurrentSessionContext.PNG","slug":"201608051337CurrentSessionContext.PNG","post":"cjwpyz79m006mugv53tedv4dv","modified":1,"renderable":0},{"_id":"source/_posts/使用ELK分析日志/data2.png","slug":"data2.png","post":"cjwpyz79t0078ugv5n43p93as","modified":1,"renderable":0},{"_id":"source/_posts/Linux-基础Shell脚本/201607101216.PNG","slug":"201607101216.PNG","post":"cjwpyz76y000hugv560t97pyt","modified":1,"renderable":0},{"_id":"source/_posts/Linux-基础Shell脚本/201607101227.PNG","slug":"201607101227.PNG","post":"cjwpyz76y000hugv560t97pyt","modified":1,"renderable":0},{"_id":"source/_posts/Linux-基础Shell脚本/201607101231.PNG","slug":"201607101231.PNG","post":"cjwpyz76y000hugv560t97pyt","modified":1,"renderable":0},{"_id":"source/_posts/使用ELK分析日志/data1.png","slug":"data1.png","post":"cjwpyz79t0078ugv5n43p93as","modified":1,"renderable":0},{"_id":"source/_posts/使用ELK分析日志/kibaba4.png","slug":"kibaba4.png","post":"cjwpyz79t0078ugv5n43p93as","modified":1,"renderable":0},{"_id":"source/_drafts/jQuery中的延迟和回调-Deferred和Callbacks/2017102409Callbacks.png","post":"cjwpyz76c0000ugv518cw8tyt","slug":"2017102409Callbacks.png","modified":1,"renderable":1},{"_id":"source/_posts/Javamelody-工具/20170802.PNG","post":"cjwpyz76m0008ugv5q3ebi6kd","slug":"20170802.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Linux-下的java安装、变更以及升级问题/20170720125445.png","post":"cjwpyz76p000dugv5wsojol5c","slug":"20170720125445.png","modified":1,"renderable":1},{"_id":"source/_posts/Spring源码阅读之Ioc控制反转/SpringIOC.png","post":"cjwpyz77c000tugv54me8fsbm","slug":"SpringIOC.png","modified":1,"renderable":1},{"_id":"source/_posts/Spring源码阅读之AOP两种代理模式/20180628.png","post":"cjwpyz77e000wugv5cdm3t66s","slug":"20180628.png","modified":1,"renderable":1},{"_id":"source/_posts/前端小tips/P71102-200420.jpg","slug":"P71102-200420.jpg","post":"cjwpyz77u001yugv5k9dygh1t","modified":1,"renderable":0},{"_id":"source/_posts/前言技术之OCR识别/1.png","post":"cjwpyz77v0021ugv5ve0zy6f9","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/等待-等待-等待/loading.gif","post":"cjwpyz786002vugv5vly8554q","slug":"loading.gif","modified":1,"renderable":1},{"_id":"source/_posts/javascript再学习之Event/54781e7f0001e00505400486.jpg","post":"cjwpyz77o001hugv5b1flb7ai","slug":"54781e7f0001e00505400486.jpg","modified":1,"renderable":1},{"_id":"source/_posts/javascript再学习之Event/54c89def0001c19105810528.jpg","slug":"54c89def0001c19105810528.jpg","post":"cjwpyz77o001hugv5b1flb7ai","modified":1,"renderable":0},{"_id":"source/_posts/前后台数据交互方式总结/201608031249.PNG","post":"cjwpyz77t001vugv5jkp2hvvs","slug":"201608031249.PNG","modified":1,"renderable":1},{"_id":"source/_posts/前后台数据交互方式总结/201608031301.PNG","post":"cjwpyz77t001vugv5jkp2hvvs","slug":"201608031301.PNG","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法总结/1342514529_5795.jpg","post":"cjwpyz77y002augv5qv87kxpr","slug":"1342514529_5795.jpg","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法总结/20160925.gif","post":"cjwpyz77y002augv5qv87kxpr","slug":"20160925.gif","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之组件生命周期/Lifecycle.PNG","post":"cjwpyz77k0017ugv5isl9nl3v","slug":"Lifecycle.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之组件生命周期/LifecycleBaseinit.PNG","post":"cjwpyz77k0017ugv5isl9nl3v","slug":"LifecycleBaseinit.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之组件生命周期/StandardService.PNG","post":"cjwpyz77k0017ugv5isl9nl3v","slug":"StandardService.PNG","modified":1,"renderable":1},{"_id":"source/_posts/javascript再学习之prototype/person.png","post":"cjwpyz77p001kugv5m3ys6xa2","slug":"person.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript再学习之prototype/person2.png","post":"cjwpyz77p001kugv5m3ys6xa2","slug":"person2.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript再学习之prototype/xproto-2.png","post":"cjwpyz77p001kugv5m3ys6xa2","slug":"xproto-2.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器的加载页面过程及优化方法/website1.png","post":"cjwpyz783002ougv5oduf4on1","slug":"website1.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器的加载页面过程及优化方法/website2.png","post":"cjwpyz783002ougv5oduf4on1","slug":"website2.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器的加载页面过程及优化方法/website3.png","post":"cjwpyz783002ougv5oduf4on1","slug":"website3.png","modified":1,"renderable":1},{"_id":"source/_posts/CSS-定位布局/04191646-bdab6a76666f4747a58b5e9b7c6be74c.png","post":"cjwpyz76k0006ugv5f8vltiig","slug":"04191646-bdab6a76666f4747a58b5e9b7c6be74c.png","modified":1,"renderable":1},{"_id":"source/_posts/CSS-定位布局/04191649-7fdab9f4cce5477a90e766ff47ba1291.png","post":"cjwpyz76k0006ugv5f8vltiig","slug":"04191649-7fdab9f4cce5477a90e766ff47ba1291.png","modified":1,"renderable":1},{"_id":"source/_posts/CSS-定位布局/69699506520645702.jpg","post":"cjwpyz76k0006ugv5f8vltiig","slug":"69699506520645702.jpg","modified":1,"renderable":1},{"_id":"source/_posts/CSS-定位布局/779058981978531304.jpg","slug":"779058981978531304.jpg","post":"cjwpyz76k0006ugv5f8vltiig","modified":1,"renderable":0},{"_id":"source/_posts/Linux-基础Shell脚本/201607101243.PNG","post":"cjwpyz76y000hugv560t97pyt","slug":"201607101243.PNG","modified":1,"renderable":1},{"_id":"source/_posts/好软件-靠机遇/img-60eeb15f9df2b5821a84cab6db1511af.jpg","post":"cjwpyz77w0023ugv56g398oux","slug":"img-60eeb15f9df2b5821a84cab6db1511af.jpg","modified":1,"renderable":1},{"_id":"source/_posts/好软件-靠机遇/img-670ca2c60725b12876bb66ca02b80547.jpg","post":"cjwpyz77w0023ugv56g398oux","slug":"img-670ca2c60725b12876bb66ca02b80547.jpg","modified":1,"renderable":1},{"_id":"source/_posts/好软件-靠机遇/img-9f0a8ec10b7aef312e1fe3aafc7b4729.jpg","slug":"img-9f0a8ec10b7aef312e1fe3aafc7b4729.jpg","post":"cjwpyz77w0023ugv56g398oux","modified":1,"renderable":0},{"_id":"source/_posts/好软件-靠机遇/img-aa57dfa19bfd30ca05cae84c0121304c.jpg","post":"cjwpyz77w0023ugv56g398oux","slug":"img-aa57dfa19bfd30ca05cae84c0121304c.jpg","modified":1,"renderable":1},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object/20160920.png","post":"cjwpyz785002sugv5fgxawdie","slug":"20160920.png","modified":1,"renderable":1},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object/201609201006.PNG","post":"cjwpyz785002sugv5fgxawdie","slug":"201609201006.PNG","modified":1,"renderable":1},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object/201609201019.PNG","post":"cjwpyz785002sugv5fgxawdie","slug":"201609201019.PNG","modified":1,"renderable":1},{"_id":"source/_posts/由ES6中的Proxy和Reflect再了解Object/201609201219.PNG","post":"cjwpyz785002sugv5fgxawdie","slug":"201609201219.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192134.jpg","post":"cjwpyz76o000cugv5qa9fda8o","slug":"201606192134.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192138.jpg","post":"cjwpyz76o000cugv5qa9fda8o","slug":"201606192138.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192139.jpg","post":"cjwpyz76o000cugv5qa9fda8o","slug":"201606192139.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192140.jpg","post":"cjwpyz76o000cugv5qa9fda8o","slug":"201606192140.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Linux-下安装SVN服务器/201606192141.jpg","post":"cjwpyz76o000cugv5qa9fda8o","slug":"201606192141.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Linux-基础命令总结3/1089507-20170126222420597-662074402.jpg","post":"cjwpyz773000mugv52t3o1cus","slug":"1089507-20170126222420597-662074402.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Linux-基础命令总结3/1353759337_6781.png","slug":"1353759337_6781.png","post":"cjwpyz773000mugv52t3o1cus","modified":1,"renderable":0},{"_id":"source/_posts/Linux-基础命令总结3/160604162658756.gif","post":"cjwpyz773000mugv52t3o1cus","slug":"160604162658756.gif","modified":1,"renderable":1},{"_id":"source/_posts/Linux-基础命令总结3/chinese.gif","post":"cjwpyz773000mugv52t3o1cus","slug":"chinese.gif","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之集合框架/201606251033.gif","post":"cjwpyz79q006yugv5ccjo1wso","slug":"201606251033.gif","modified":1,"renderable":1},{"_id":"source/_posts/毕业设计心得/20170629.png","post":"cjwpyz7a3007vugv5z7udmpi3","slug":"20170629.png","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之I-O/201606250959.jpg","slug":"201606250959.jpg","post":"cjwpyz79n006nugv5oy8spx2o","modified":1,"renderable":0},{"_id":"source/_posts/Thinking-in-java-基础之I-O/20160625095901.png","post":"cjwpyz79n006nugv5oy8spx2o","slug":"20160625095901.png","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之Container责任链/665375-20160119184923890-1995839223.png","post":"cjwpyz79p006uugv5q1kwc39r","slug":"665375-20160119184923890-1995839223.png","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之Container责任链/818454-20161025170804984-654825756.png","post":"cjwpyz79p006uugv5q1kwc39r","slug":"818454-20161025170804984-654825756.png","modified":1,"renderable":1},{"_id":"source/_posts/从ES6中学习编码/2011050311372042.png","slug":"2011050311372042.png","post":"cjwpyz79s0075ugv51j1cwe2c","modified":1,"renderable":0},{"_id":"source/_posts/从ES6中学习编码/201105031137219627.png","slug":"201105031137219627.png","post":"cjwpyz79s0075ugv51j1cwe2c","modified":1,"renderable":0},{"_id":"source/_posts/从ES6中学习编码/201609170838.PNG","post":"cjwpyz79s0075ugv51j1cwe2c","slug":"201609170838.PNG","modified":1,"renderable":1},{"_id":"source/_posts/模仿jQuery创建自己的js工具/201609131126.PNG","post":"cjwpyz7a0007ougv5fboelxfx","slug":"201609131126.PNG","modified":1,"renderable":1},{"_id":"source/_posts/模仿jQuery创建自己的js工具/201609131136.PNG","post":"cjwpyz7a0007ougv5fboelxfx","slug":"201609131136.PNG","modified":1,"renderable":1},{"_id":"source/_posts/模仿jQuery创建自己的js工具/201609131200.PNG","post":"cjwpyz7a0007ougv5fboelxfx","slug":"201609131200.PNG","modified":1,"renderable":1},{"_id":"source/_posts/浏览器的请求与响应过程/baidu.png","post":"cjwpyz7a2007rugv59w5cze9a","slug":"baidu.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器的请求与响应过程/dom-navtiming.png","post":"cjwpyz7a2007rugv59w5cze9a","slug":"dom-navtiming.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器的请求与响应过程/load.png","post":"cjwpyz7a2007rugv59w5cze9a","slug":"load.png","modified":1,"renderable":1},{"_id":"source/_posts/浏览器的请求与响应过程/timing-overview.png","post":"cjwpyz7a2007rugv59w5cze9a","slug":"timing-overview.png","modified":1,"renderable":1},{"_id":"source/_posts/Spring中的Session生命周期/201608051345SpringSessionContext.PNG","post":"cjwpyz79m006mugv53tedv4dv","slug":"201608051345SpringSessionContext.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Spring中的Session生命周期/201608051437LocalSessionFactoryBean.PNG","post":"cjwpyz79m006mugv53tedv4dv","slug":"201608051437LocalSessionFactoryBean.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Spring中的Session生命周期/201608051454LocalSessionFactoryBuilder.PNG","post":"cjwpyz79m006mugv53tedv4dv","slug":"201608051454LocalSessionFactoryBuilder.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Spring中的Session生命周期/201608051457AvailableSettings.PNG","post":"cjwpyz79m006mugv53tedv4dv","slug":"201608051457AvailableSettings.PNG","modified":1,"renderable":1},{"_id":"source/_posts/HTML5-API-新特性/201608201813.PNG","post":"cjwpyz79k006hugv5gtfhrwex","slug":"201608201813.PNG","modified":1,"renderable":1},{"_id":"source/_posts/HTML5-API-新特性/201608201816.PNG","post":"cjwpyz79k006hugv5gtfhrwex","slug":"201608201816.PNG","modified":1,"renderable":1},{"_id":"source/_posts/HTML5-API-新特性/201608230954.PNG","post":"cjwpyz79k006hugv5gtfhrwex","slug":"201608230954.PNG","modified":1,"renderable":1},{"_id":"source/_posts/HTML5-API-新特性/201608230958.PNG","post":"cjwpyz79k006hugv5gtfhrwex","slug":"201608230958.PNG","modified":1,"renderable":1},{"_id":"source/_posts/HTML5-API-新特性/201608231046.PNG","post":"cjwpyz79k006hugv5gtfhrwex","slug":"201608231046.PNG","modified":1,"renderable":1},{"_id":"source/_posts/HTML5-API-新特性/201608231049.PNG","post":"cjwpyz79k006hugv5gtfhrwex","slug":"201608231049.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608031722.jpg","post":"cjwpyz79o006rugv53g2kl20e","slug":"201608031722.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091504Error.PNG","post":"cjwpyz79o006rugv53g2kl20e","slug":"201608091504Error.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091505Exception.PNG","post":"cjwpyz79o006rugv53g2kl20e","slug":"201608091505Exception.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091505IOException.PNG","post":"cjwpyz79o006rugv53g2kl20e","slug":"201608091505IOException.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091506RuntimeException.PNG","post":"cjwpyz79o006rugv53g2kl20e","slug":"201608091506RuntimeException.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之异常/201608091509Throwable.PNG","post":"cjwpyz79o006rugv53g2kl20e","slug":"201608091509Throwable.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/1174710-20170804092103272-2042915115.png","post":"cjwpyz79r0071ugv59zk7y4by","slug":"1174710-20170804092103272-2042915115.png","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/Lifecycle.PNG","post":"cjwpyz79r0071ugv59zk7y4by","slug":"Lifecycle.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/catalinaload.PNG","post":"cjwpyz79r0071ugv59zk7y4by","slug":"catalinaload.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/image001.png","post":"cjwpyz79r0071ugv59zk7y4by","slug":"image001.png","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/init.PNG","post":"cjwpyz79r0071ugv59zk7y4by","slug":"init.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/load.PNG","post":"cjwpyz79r0071ugv59zk7y4by","slug":"load.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/main.PNG","post":"cjwpyz79r0071ugv59zk7y4by","slug":"main.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之从server-xml看组件关系/start&stop.PNG","post":"cjwpyz79r0071ugv59zk7y4by","slug":"start&stop.PNG","modified":1,"renderable":1},{"_id":"source/_posts/使用ELK分析日志/elasticsearch-header.png","post":"cjwpyz79t0078ugv5n43p93as","slug":"elasticsearch-header.png","modified":1,"renderable":1},{"_id":"source/_posts/使用ELK分析日志/elasticsearch-init.png","post":"cjwpyz79t0078ugv5n43p93as","slug":"elasticsearch-init.png","modified":1,"renderable":1},{"_id":"source/_posts/使用ELK分析日志/filebeat.png","post":"cjwpyz79t0078ugv5n43p93as","slug":"filebeat.png","modified":1,"renderable":1},{"_id":"source/_posts/使用ELK分析日志/kibaba1.png","post":"cjwpyz79t0078ugv5n43p93as","slug":"kibaba1.png","modified":1,"renderable":1},{"_id":"source/_posts/使用ELK分析日志/kibaba2.png","post":"cjwpyz79t0078ugv5n43p93as","slug":"kibaba2.png","modified":1,"renderable":1},{"_id":"source/_posts/使用ELK分析日志/logstash-nginx.png","post":"cjwpyz79t0078ugv5n43p93as","slug":"logstash-nginx.png","modified":1,"renderable":1},{"_id":"source/_posts/Tomcat源码阅读之URL请求解析/Connector.png","post":"cjwpyz7bf009pugv58g9eg1hh","slug":"Connector.png","modified":1,"renderable":1},{"_id":"source/_posts/JavaEE-资源路径问题/201607191615.PNG","post":"cjwpyz7be009mugv5zn2ejmtd","slug":"201607191615.PNG","modified":1,"renderable":1},{"_id":"source/_posts/JavaEE-资源路径问题/201607191616.PNG","post":"cjwpyz7be009mugv5zn2ejmtd","slug":"201607191616.PNG","modified":1,"renderable":1},{"_id":"source/_posts/javascript再学习之DOM/20170809.PNG","post":"cjwpyz7bn009uugv5efm3hxvh","slug":"20170809.PNG","modified":1,"renderable":1},{"_id":"source/_posts/javascript再学习之DOM/547672a9000140b904700285.jpg","post":"cjwpyz7bn009uugv5efm3hxvh","slug":"547672a9000140b904700285.jpg","modified":1,"renderable":1},{"_id":"source/_posts/深入理解JVM之性能调优/gc收集器.jpg","post":"cjwpyz7bu009xugv5t0f4kc3g","slug":"gc收集器.jpg","modified":1,"renderable":1},{"_id":"source/_posts/深入理解JVM之性能调优/jvm-model.png","post":"cjwpyz7bu009xugv5t0f4kc3g","slug":"jvm-model.png","modified":1,"renderable":1},{"_id":"source/_posts/深入理解JVM之性能调优/jvm-parameter.png","post":"cjwpyz7bu009xugv5t0f4kc3g","slug":"jvm-parameter.png","modified":1,"renderable":1},{"_id":"source/_posts/深入理解JVM之性能调优/jvmGC.png","post":"cjwpyz7bu009xugv5t0f4kc3g","slug":"jvmGC.png","modified":1,"renderable":1},{"_id":"source/_posts/深入理解JVM之性能调优/堆内存.png","post":"cjwpyz7bu009xugv5t0f4kc3g","slug":"堆内存.png","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/20150309140927553.jpg","post":"cjwpyz7be009nugv59wafm1rn","slug":"20150309140927553.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/20160924.PNG","post":"cjwpyz7be009nugv59wafm1rn","slug":"20160924.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/201609241035.PNG","post":"cjwpyz7be009nugv59wafm1rn","slug":"201609241035.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/201609241126.PNG","post":"cjwpyz7be009nugv59wafm1rn","slug":"201609241126.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/201609241131.PNG","post":"cjwpyz7be009nugv59wafm1rn","slug":"201609241131.PNG","modified":1,"renderable":1},{"_id":"source/_posts/Thinking-in-java-基础之线程和并发/201609241132.PNG","post":"cjwpyz7be009nugv59wafm1rn","slug":"201609241132.PNG","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjwpyz76c0000ugv518cw8tyt","category_id":"cjwpyz76j0004ugv5izuee2u2","_id":"cjwpyz76v000eugv5nx9eipoh"},{"post_id":"cjwpyz76h0002ugv5oyb42p5p","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz771000jugv5d6zvnrmm"},{"post_id":"cjwpyz76l0007ugv5hwhrl150","category_id":"cjwpyz773000kugv5m0vtb6c6","_id":"cjwpyz77e000vugv5sb6uqrwh"},{"post_id":"cjwpyz76m0008ugv5q3ebi6kd","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz77i000zugv5duv0ubjq"},{"post_id":"cjwpyz77c000tugv54me8fsbm","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz77j0013ugv5dwp0jmx8"},{"post_id":"cjwpyz77e000wugv5cdm3t66s","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz77k0016ugv5xndcm92v"},{"post_id":"cjwpyz77i0010ugv5n2zkcw63","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz77n001cugv5c1uihnjl"},{"post_id":"cjwpyz77k0017ugv5isl9nl3v","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz77p001iugv5gt0xd027"},{"post_id":"cjwpyz77l001bugv50lf2ubhs","category_id":"cjwpyz773000kugv5m0vtb6c6","_id":"cjwpyz77q001lugv5vlkvjmjw"},{"post_id":"cjwpyz76y000hugv560t97pyt","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz77r001pugv5e1cq23qb"},{"post_id":"cjwpyz76k0006ugv5f8vltiig","category_id":"cjwpyz76v000fugv55rli83hp","_id":"cjwpyz77s001uugv5rlanwlbm"},{"post_id":"cjwpyz76k0006ugv5f8vltiig","category_id":"cjwpyz77o001fugv5qjwnxi5r","_id":"cjwpyz77t001wugv5hzb03bsx"},{"post_id":"cjwpyz770000iugv5q552o4lp","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz77u0020ugv5rcdgb83n"},{"post_id":"cjwpyz773000mugv52t3o1cus","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz77w0025ugv50c5v3c1q"},{"post_id":"cjwpyz775000ougv5ql6dnkjc","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz77z002bugv5dc0xwgmc"},{"post_id":"cjwpyz77x0027ugv5bsszqpsp","category_id":"cjwpyz77w0024ugv5vho2fsy8","_id":"cjwpyz781002gugv5lss1aixn"},{"post_id":"cjwpyz778000sugv51kdz8m23","category_id":"cjwpyz77w0024ugv5vho2fsy8","_id":"cjwpyz782002kugv5skd84c16"},{"post_id":"cjwpyz77h000yugv5r7n7603h","category_id":"cjwpyz77z002cugv5aerrudla","_id":"cjwpyz783002nugv56yd7u0co"},{"post_id":"cjwpyz76o000cugv5qa9fda8o","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz786002tugv5tksyxr87"},{"post_id":"cjwpyz76o000cugv5qa9fda8o","category_id":"cjwpyz781002iugv59zf2h48y","_id":"cjwpyz787002wugv5ur5ldtc0"},{"post_id":"cjwpyz784002qugv5vpklc5wx","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz788002zugv50x9mg8id"},{"post_id":"cjwpyz77j0014ugv5v86ur7d9","category_id":"cjwpyz784002pugv5z9d9d6ik","_id":"cjwpyz7880032ugv536g9t8ij"},{"post_id":"cjwpyz785002sugv5fgxawdie","category_id":"cjwpyz76v000fugv55rli83hp","_id":"cjwpyz7890035ugv5tdw30oim"},{"post_id":"cjwpyz786002vugv5vly8554q","category_id":"cjwpyz76v000fugv55rli83hp","_id":"cjwpyz78a0038ugv5wxl1nias"},{"post_id":"cjwpyz787002yugv5cxaydtxu","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz78b003bugv5cpnd5vg7"},{"post_id":"cjwpyz77n001eugv5u8byu6m3","category_id":"cjwpyz7880030ugv5px1orsvo","_id":"cjwpyz78b003eugv53cczq3n6"},{"post_id":"cjwpyz77o001hugv5b1flb7ai","category_id":"cjwpyz7880030ugv5px1orsvo","_id":"cjwpyz78c003jugv5jq8wutfc"},{"post_id":"cjwpyz77p001kugv5m3ys6xa2","category_id":"cjwpyz7880030ugv5px1orsvo","_id":"cjwpyz78c003mugv5yjygbywo"},{"post_id":"cjwpyz77r001ougv5yegnudhr","category_id":"cjwpyz78c003iugv5to8tu9fq","_id":"cjwpyz78d003rugv5a5bego2d"},{"post_id":"cjwpyz77s001sugv52zzm82ub","category_id":"cjwpyz78c003iugv5to8tu9fq","_id":"cjwpyz78e003uugv58y7ovxjm"},{"post_id":"cjwpyz77t001vugv5jkp2hvvs","category_id":"cjwpyz78d003qugv5tjfh9z95","_id":"cjwpyz78e003xugv52ggj9roz"},{"post_id":"cjwpyz77v0021ugv5ve0zy6f9","category_id":"cjwpyz78e003vugv5ioi24lj8","_id":"cjwpyz78f0043ugv57msz3pq1"},{"post_id":"cjwpyz77w0023ugv56g398oux","category_id":"cjwpyz77w0024ugv5vho2fsy8","_id":"cjwpyz78g0046ugv5ee528syy"},{"post_id":"cjwpyz77z002eugv5s8k3icgh","category_id":"cjwpyz78g0047ugv5auo00y4s","_id":"cjwpyz78i004dugv5irp8dixo"},{"post_id":"cjwpyz780002fugv58a86z3qc","category_id":"cjwpyz78h004augv5f17ox5nx","_id":"cjwpyz78j004hugv5y215b69g"},{"post_id":"cjwpyz782002lugv5yuvx8oh0","category_id":"cjwpyz78j004iugv50zp7ja3a","_id":"cjwpyz78k004ougv5kau7ozlk"},{"post_id":"cjwpyz783002ougv5oduf4on1","category_id":"cjwpyz76v000fugv55rli83hp","_id":"cjwpyz78l004rugv5czwlbqfh"},{"post_id":"cjwpyz783002ougv5oduf4on1","category_id":"cjwpyz78k004lugv5833a18yp","_id":"cjwpyz78l004uugv5f5l7r57s"},{"post_id":"cjwpyz76p000dugv5wsojol5c","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz78m004xugv515pc4xtl"},{"post_id":"cjwpyz76p000dugv5wsojol5c","category_id":"cjwpyz786002uugv50ktgp67d","_id":"cjwpyz78m004zugv5fd9bia4w"},{"post_id":"cjwpyz76p000dugv5wsojol5c","category_id":"cjwpyz78k004pugv5f2yyfzl7","_id":"cjwpyz78n0051ugv5t3xb62b2"},{"post_id":"cjwpyz77y002augv5qv87kxpr","category_id":"cjwpyz78f0042ugv5db85ivfc","_id":"cjwpyz78n0053ugv5xa9wslp7"},{"post_id":"cjwpyz77y002augv5qv87kxpr","category_id":"cjwpyz78l004tugv5qhp1h17r","_id":"cjwpyz78q0056ugv54p3dh8jg"},{"post_id":"cjwpyz781002jugv5lspzy8nf","category_id":"cjwpyz78j004eugv56kytyy28","_id":"cjwpyz78q0057ugv5h9pd3i6h"},{"post_id":"cjwpyz781002jugv5lspzy8nf","category_id":"cjwpyz78m004yugv57on5ji7m","_id":"cjwpyz78r0059ugv5hp3s3ayj"},{"post_id":"cjwpyz79f006augv5zbi1tnsc","category_id":"cjwpyz79i006eugv5wrz7vl12","_id":"cjwpyz79n006pugv5bwkjxu0x"},{"post_id":"cjwpyz79k006iugv5uuwyrvjo","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz79o006sugv576yzq4qw"},{"post_id":"cjwpyz79m006mugv53tedv4dv","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz79p006wugv5c7zqn5vm"},{"post_id":"cjwpyz79g006cugv5gat7utsk","category_id":"cjwpyz79i006eugv5wrz7vl12","_id":"cjwpyz79q006zugv55e6xz31m"},{"post_id":"cjwpyz79n006nugv5oy8spx2o","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz79r0072ugv5u62e9szn"},{"post_id":"cjwpyz79o006rugv53g2kl20e","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz79s0076ugv5t87zd6ua"},{"post_id":"cjwpyz79j006gugv5yog7o727","category_id":"cjwpyz79i006eugv5wrz7vl12","_id":"cjwpyz79u0079ugv5cisqok5f"},{"post_id":"cjwpyz79p006uugv5q1kwc39r","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz79v007bugv5wcsmassf"},{"post_id":"cjwpyz79q006yugv5ccjo1wso","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz79w007fugv53j8hru23"},{"post_id":"cjwpyz79k006hugv5gtfhrwex","category_id":"cjwpyz79p006vugv5hcrlq1yz","_id":"cjwpyz79y007iugv57ae176sl"},{"post_id":"cjwpyz79r0071ugv59zk7y4by","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz7a0007mugv5llbmb1wx"},{"post_id":"cjwpyz79s0075ugv51j1cwe2c","category_id":"cjwpyz76v000fugv55rli83hp","_id":"cjwpyz7a2007pugv5axyb4b19"},{"post_id":"cjwpyz79u007augv5rslhah9z","category_id":"cjwpyz78g0047ugv5auo00y4s","_id":"cjwpyz7a3007tugv5pkif88dx"},{"post_id":"cjwpyz79v007eugv5ovem7ta8","category_id":"cjwpyz78j004eugv56kytyy28","_id":"cjwpyz7a4007wugv52tuqrv3h"},{"post_id":"cjwpyz79v007eugv5ovem7ta8","category_id":"cjwpyz78m004yugv57on5ji7m","_id":"cjwpyz7a50080ugv5cgyk2xy0"},{"post_id":"cjwpyz79t0078ugv5n43p93as","category_id":"cjwpyz79v007dugv5vunlmm7l","_id":"cjwpyz7a50082ugv5bdtya8aq"},{"post_id":"cjwpyz79y007hugv5tvg0xovm","category_id":"cjwpyz78j004eugv56kytyy28","_id":"cjwpyz7a60085ugv560t8xhwa"},{"post_id":"cjwpyz79y007hugv5tvg0xovm","category_id":"cjwpyz78m004yugv57on5ji7m","_id":"cjwpyz7a70088ugv5pfe36sjx"},{"post_id":"cjwpyz7a0007ougv5fboelxfx","category_id":"cjwpyz76j0004ugv5izuee2u2","_id":"cjwpyz7a8008bugv5knh13no2"},{"post_id":"cjwpyz7a2007rugv59w5cze9a","category_id":"cjwpyz76v000fugv55rli83hp","_id":"cjwpyz7a9008eugv5lw8rpnvp"},{"post_id":"cjwpyz7a3007vugv5z7udmpi3","category_id":"cjwpyz79i006eugv5wrz7vl12","_id":"cjwpyz7a9008gugv5kybwi16q"},{"post_id":"cjwpyz79z007lugv57yc321tp","category_id":"cjwpyz78j004eugv56kytyy28","_id":"cjwpyz7aa008jugv5rkm81wvu"},{"post_id":"cjwpyz79z007lugv57yc321tp","category_id":"cjwpyz7a3007sugv5p5y384xj","_id":"cjwpyz7aa008lugv58yqysykx"},{"post_id":"cjwpyz79z007lugv57yc321tp","category_id":"cjwpyz7a60083ugv5swkiibtp","_id":"cjwpyz7aa008ougv51rvdyhta"},{"post_id":"cjwpyz7a4007zugv5ug2kqgat","category_id":"cjwpyz7a8008augv5ha5yek9l","_id":"cjwpyz7ab008qugv5nqefv5pc"},{"post_id":"cjwpyz7be009mugv5zn2ejmtd","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz7bg009sugv5dvlhdjh7"},{"post_id":"cjwpyz7be009nugv59wafm1rn","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz7bo009vugv5qsurpliw"},{"post_id":"cjwpyz7bf009pugv58g9eg1hh","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz7bu009yugv56stg9rxt"},{"post_id":"cjwpyz7bg009rugv5uu8z6ymb","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz7c000a0ugv5sa2mk9me"},{"post_id":"cjwpyz7bn009uugv5efm3hxvh","category_id":"cjwpyz7880030ugv5px1orsvo","_id":"cjwpyz7c600a3ugv5pgnfsyln"},{"post_id":"cjwpyz7bu009xugv5t0f4kc3g","category_id":"cjwpyz76n0009ugv5y506dkbo","_id":"cjwpyz7cd00a6ugv59eb8cz2y"},{"post_id":"cjwpyz7bu009xugv5t0f4kc3g","category_id":"cjwpyz7c600a2ugv5q9rogsjm","_id":"cjwpyz7cd00a7ugv5bqgi1hdo"},{"post_id":"cjwpyz7cp00a8ugv5ijlzdauh","category_id":"cjwpyz77e000uugv5tsvtv7xi","_id":"cjwpyz7cs00aaugv5k71wxkj3"}],"PostTag":[{"post_id":"cjwpyz76c0000ugv518cw8tyt","tag_id":"cjwpyz76k0005ugv5xopxxl9l","_id":"cjwpyz76o000bugv5bsvxbecp"},{"post_id":"cjwpyz76h0002ugv5oyb42p5p","tag_id":"cjwpyz76n000augv55pgxio83","_id":"cjwpyz774000nugv5tutv834m"},{"post_id":"cjwpyz76h0002ugv5oyb42p5p","tag_id":"cjwpyz76v000gugv53c1hhfqg","_id":"cjwpyz776000pugv55zv48ms4"},{"post_id":"cjwpyz76k0006ugv5f8vltiig","tag_id":"cjwpyz773000lugv5d9jrdtev","_id":"cjwpyz77k0015ugv5kqmqp1u8"},{"post_id":"cjwpyz76k0006ugv5f8vltiig","tag_id":"cjwpyz778000rugv5kwc9c23i","_id":"cjwpyz77l0019ugv5zqtywgp1"},{"post_id":"cjwpyz76k0006ugv5f8vltiig","tag_id":"cjwpyz77f000xugv5qjqggwmm","_id":"cjwpyz77n001dugv5w1f8bg93"},{"post_id":"cjwpyz76l0007ugv5hwhrl150","tag_id":"cjwpyz77j0012ugv5zh09sg1y","_id":"cjwpyz77p001jugv5f4xtnlss"},{"post_id":"cjwpyz76l0007ugv5hwhrl150","tag_id":"cjwpyz77l001augv5u8rhz9d0","_id":"cjwpyz77q001nugv50am0an0a"},{"post_id":"cjwpyz76m0008ugv5q3ebi6kd","tag_id":"cjwpyz77o001gugv5r2m934c9","_id":"cjwpyz77r001rugv5wld948hd"},{"post_id":"cjwpyz76o000cugv5qa9fda8o","tag_id":"cjwpyz77r001qugv56zwhtn5x","_id":"cjwpyz77x0026ugv5ts7umutr"},{"post_id":"cjwpyz76o000cugv5qa9fda8o","tag_id":"cjwpyz77t001xugv5rkbcbdnk","_id":"cjwpyz77y0028ugv5gw0bnilu"},{"post_id":"cjwpyz76y000hugv560t97pyt","tag_id":"cjwpyz77w0022ugv5vq7tyvhj","_id":"cjwpyz77z002dugv5i7eoihb9"},{"post_id":"cjwpyz770000iugv5q552o4lp","tag_id":"cjwpyz77y0029ugv5bbsp3yxw","_id":"cjwpyz7880031ugv58qvbr43l"},{"post_id":"cjwpyz770000iugv5q552o4lp","tag_id":"cjwpyz781002hugv5wgytvoc5","_id":"cjwpyz7890033ugv5k7m9nyiv"},{"post_id":"cjwpyz770000iugv5q552o4lp","tag_id":"cjwpyz783002mugv5w02zafy4","_id":"cjwpyz7890036ugv54fwq5kgl"},{"post_id":"cjwpyz770000iugv5q552o4lp","tag_id":"cjwpyz785002rugv5j2v0e72f","_id":"cjwpyz78a0039ugv5c0m0l29a"},{"post_id":"cjwpyz787002yugv5cxaydtxu","tag_id":"cjwpyz77t001xugv5rkbcbdnk","_id":"cjwpyz78b003cugv5du8cmbpj"},{"post_id":"cjwpyz773000mugv52t3o1cus","tag_id":"cjwpyz77y0029ugv5bbsp3yxw","_id":"cjwpyz78b003fugv51uddgmoj"},{"post_id":"cjwpyz775000ougv5ql6dnkjc","tag_id":"cjwpyz77y0029ugv5bbsp3yxw","_id":"cjwpyz78c003hugv5re8b6ayk"},{"post_id":"cjwpyz778000sugv51kdz8m23","tag_id":"cjwpyz78a003augv588e95644","_id":"cjwpyz78c003kugv5l3kojha7"},{"post_id":"cjwpyz77c000tugv54me8fsbm","tag_id":"cjwpyz78b003gugv5tza1mqy4","_id":"cjwpyz78d003ougv5nhar483p"},{"post_id":"cjwpyz77e000wugv5cdm3t66s","tag_id":"cjwpyz78b003gugv5tza1mqy4","_id":"cjwpyz78d003sugv5sbwrf4am"},{"post_id":"cjwpyz77h000yugv5r7n7603h","tag_id":"cjwpyz78d003pugv583gmr4h9","_id":"cjwpyz78e003zugv5ao4zwvqh"},{"post_id":"cjwpyz77h000yugv5r7n7603h","tag_id":"cjwpyz78d003tugv5dbhwy5fu","_id":"cjwpyz78e0040ugv51s2w4r22"},{"post_id":"cjwpyz77i0010ugv5n2zkcw63","tag_id":"cjwpyz78e003wugv5k1fze6o2","_id":"cjwpyz78f0044ugv57ma0ce07"},{"post_id":"cjwpyz77k0017ugv5isl9nl3v","tag_id":"cjwpyz78f0041ugv5z8pp1ahu","_id":"cjwpyz78g0048ugv5mpw14rq1"},{"post_id":"cjwpyz77n001eugv5u8byu6m3","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz78h004bugv51s245tvn"},{"post_id":"cjwpyz77o001hugv5b1flb7ai","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz78j004fugv5zcx6qyzc"},{"post_id":"cjwpyz77p001kugv5m3ys6xa2","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz78k004kugv5jrwv4dd2"},{"post_id":"cjwpyz77p001kugv5m3ys6xa2","tag_id":"cjwpyz78j004gugv5y9ks4n9z","_id":"cjwpyz78k004mugv5ipy92ngg"},{"post_id":"cjwpyz77r001ougv5yegnudhr","tag_id":"cjwpyz78j004jugv5agxtq3r1","_id":"cjwpyz78l004sugv54xwo7tkd"},{"post_id":"cjwpyz77r001ougv5yegnudhr","tag_id":"cjwpyz78k004nugv5zh6ddp4i","_id":"cjwpyz78m004vugv5184r0uax"},{"post_id":"cjwpyz77s001sugv52zzm82ub","tag_id":"cjwpyz78j004jugv5agxtq3r1","_id":"cjwpyz78n0052ugv5pxi137qi"},{"post_id":"cjwpyz77s001sugv52zzm82ub","tag_id":"cjwpyz78m004wugv5hgl5tvd7","_id":"cjwpyz78n0054ugv5miuvpgpd"},{"post_id":"cjwpyz77t001vugv5jkp2hvvs","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz78r005augv5g5oj1alh"},{"post_id":"cjwpyz77t001vugv5jkp2hvvs","tag_id":"cjwpyz78n0055ugv577isq5cj","_id":"cjwpyz78r005bugv5ky5bh2p2"},{"post_id":"cjwpyz77u001yugv5k9dygh1t","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz78r005dugv5r4hfuwwf"},{"post_id":"cjwpyz77v0021ugv5ve0zy6f9","tag_id":"cjwpyz78r005cugv504t9i7sw","_id":"cjwpyz78r005fugv5v845fw3d"},{"post_id":"cjwpyz77w0023ugv56g398oux","tag_id":"cjwpyz78a003augv588e95644","_id":"cjwpyz78s005hugv5e45kwaft"},{"post_id":"cjwpyz77x0027ugv5bsszqpsp","tag_id":"cjwpyz78s005gugv527mgsc4a","_id":"cjwpyz78s005kugv5hvh4ls7d"},{"post_id":"cjwpyz77x0027ugv5bsszqpsp","tag_id":"cjwpyz78s005iugv53ity9jiw","_id":"cjwpyz78s005lugv5e6nvyty0"},{"post_id":"cjwpyz77y002augv5qv87kxpr","tag_id":"cjwpyz78s005jugv5530jem4n","_id":"cjwpyz78s005nugv5v44t9fvl"},{"post_id":"cjwpyz77z002eugv5s8k3icgh","tag_id":"cjwpyz78s005mugv54hw7def8","_id":"cjwpyz78t005qugv5y9ci5353"},{"post_id":"cjwpyz77z002eugv5s8k3icgh","tag_id":"cjwpyz78f0041ugv5z8pp1ahu","_id":"cjwpyz78t005rugv5fkq9aavw"},{"post_id":"cjwpyz780002fugv58a86z3qc","tag_id":"cjwpyz78t005pugv5opp055xl","_id":"cjwpyz78t005tugv5qju0bhch"},{"post_id":"cjwpyz781002jugv5lspzy8nf","tag_id":"cjwpyz78t005sugv518s54e2d","_id":"cjwpyz78u005vugv586hc9odz"},{"post_id":"cjwpyz782002lugv5yuvx8oh0","tag_id":"cjwpyz78t005uugv58ijgyquu","_id":"cjwpyz78u005xugv5ay3ck2xm"},{"post_id":"cjwpyz783002ougv5oduf4on1","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz78u005zugv5ajjf14nq"},{"post_id":"cjwpyz783002ougv5oduf4on1","tag_id":"cjwpyz77o001gugv5r2m934c9","_id":"cjwpyz78u0060ugv5ro2jelz0"},{"post_id":"cjwpyz784002qugv5vpklc5wx","tag_id":"cjwpyz78u005yugv5t3qdzxnl","_id":"cjwpyz78v0063ugv5riwpn5ch"},{"post_id":"cjwpyz784002qugv5vpklc5wx","tag_id":"cjwpyz78f0041ugv5z8pp1ahu","_id":"cjwpyz78v0064ugv5m8sezeeg"},{"post_id":"cjwpyz785002sugv5fgxawdie","tag_id":"cjwpyz78v0062ugv5dbixsezv","_id":"cjwpyz78w0067ugv54o8kydzd"},{"post_id":"cjwpyz785002sugv5fgxawdie","tag_id":"cjwpyz78v0065ugv51dy54k7m","_id":"cjwpyz78w0068ugv5ot85u889"},{"post_id":"cjwpyz786002vugv5vly8554q","tag_id":"cjwpyz78t005sugv518s54e2d","_id":"cjwpyz78x0069ugv50g1v27pl"},{"post_id":"cjwpyz79f006augv5zbi1tnsc","tag_id":"cjwpyz79i006fugv5hlm1xrvu","_id":"cjwpyz79m006lugv5berckkdc"},{"post_id":"cjwpyz79g006cugv5gat7utsk","tag_id":"cjwpyz79l006kugv5iwls4efa","_id":"cjwpyz79o006tugv5a6fb46ja"},{"post_id":"cjwpyz79j006gugv5yog7o727","tag_id":"cjwpyz79n006qugv5y4w5ac84","_id":"cjwpyz79r0070ugv5fu8hm4ak"},{"post_id":"cjwpyz79p006uugv5q1kwc39r","tag_id":"cjwpyz78f0041ugv5z8pp1ahu","_id":"cjwpyz79s0073ugv5qes8kh52"},{"post_id":"cjwpyz79r0071ugv59zk7y4by","tag_id":"cjwpyz78f0041ugv5z8pp1ahu","_id":"cjwpyz79t0077ugv5j8rfn4z7"},{"post_id":"cjwpyz79u007augv5rslhah9z","tag_id":"cjwpyz78s005mugv54hw7def8","_id":"cjwpyz79x007gugv5xsx3hj2c"},{"post_id":"cjwpyz79v007eugv5ovem7ta8","tag_id":"cjwpyz78t005sugv518s54e2d","_id":"cjwpyz79z007kugv5kxx2vcrm"},{"post_id":"cjwpyz79y007hugv5tvg0xovm","tag_id":"cjwpyz78t005sugv518s54e2d","_id":"cjwpyz7a0007nugv51l0unwh1"},{"post_id":"cjwpyz79k006hugv5gtfhrwex","tag_id":"cjwpyz79q006xugv5kixg0umx","_id":"cjwpyz7a3007uugv5ib2dngjk"},{"post_id":"cjwpyz79k006hugv5gtfhrwex","tag_id":"cjwpyz79s0074ugv5mwo7gn5k","_id":"cjwpyz7a4007xugv52oyg0xg4"},{"post_id":"cjwpyz79k006hugv5gtfhrwex","tag_id":"cjwpyz79v007cugv50knqi5bl","_id":"cjwpyz7a50081ugv53wxddbco"},{"post_id":"cjwpyz79k006hugv5gtfhrwex","tag_id":"cjwpyz79y007jugv5fkj6fum5","_id":"cjwpyz7a60084ugv5a01khnxe"},{"post_id":"cjwpyz7a0007ougv5fboelxfx","tag_id":"cjwpyz76k0005ugv5xopxxl9l","_id":"cjwpyz7a60087ugv537r80xrr"},{"post_id":"cjwpyz7a2007rugv59w5cze9a","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz7a80089ugv5dw2nyhbd"},{"post_id":"cjwpyz7a2007rugv59w5cze9a","tag_id":"cjwpyz77o001gugv5r2m934c9","_id":"cjwpyz7a9008dugv56uptiqw7"},{"post_id":"cjwpyz79k006iugv5uuwyrvjo","tag_id":"cjwpyz77y0029ugv5bbsp3yxw","_id":"cjwpyz7a9008fugv5ycy858xf"},{"post_id":"cjwpyz79k006iugv5uuwyrvjo","tag_id":"cjwpyz7a2007qugv5ixsit8aa","_id":"cjwpyz7a9008hugv5ennibwfd"},{"post_id":"cjwpyz7a3007vugv5z7udmpi3","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz7aa008kugv51i5mvw8d"},{"post_id":"cjwpyz7a3007vugv5z7udmpi3","tag_id":"cjwpyz78n0055ugv577isq5cj","_id":"cjwpyz7aa008mugv5d0kvd0e2"},{"post_id":"cjwpyz7a3007vugv5z7udmpi3","tag_id":"cjwpyz7a2007qugv5ixsit8aa","_id":"cjwpyz7ab008pugv507yjthv8"},{"post_id":"cjwpyz79m006mugv53tedv4dv","tag_id":"cjwpyz7a4007yugv53wb47y7s","_id":"cjwpyz7ab008rugv5ad45wc7x"},{"post_id":"cjwpyz79m006mugv53tedv4dv","tag_id":"cjwpyz7a60086ugv53faqxpo1","_id":"cjwpyz7ab008tugv55harvjvv"},{"post_id":"cjwpyz79m006mugv53tedv4dv","tag_id":"cjwpyz78b003gugv5tza1mqy4","_id":"cjwpyz7ab008uugv5v94xiug0"},{"post_id":"cjwpyz79n006nugv5oy8spx2o","tag_id":"cjwpyz7a8008cugv5z4y19ro5","_id":"cjwpyz7ac008wugv5wiuhdi5i"},{"post_id":"cjwpyz79n006nugv5oy8spx2o","tag_id":"cjwpyz7a9008iugv5t6s1oppc","_id":"cjwpyz7ac008xugv5xceiu7mm"},{"post_id":"cjwpyz79o006rugv53g2kl20e","tag_id":"cjwpyz7aa008nugv52nwpd133","_id":"cjwpyz7ac008zugv5g3sr5z2v"},{"post_id":"cjwpyz79o006rugv53g2kl20e","tag_id":"cjwpyz7ab008sugv5n4119yf5","_id":"cjwpyz7al0090ugv5mhfy2kb3"},{"post_id":"cjwpyz79o006rugv53g2kl20e","tag_id":"cjwpyz7ab008vugv5uylzeewe","_id":"cjwpyz7at0092ugv546rxtt69"},{"post_id":"cjwpyz79q006yugv5ccjo1wso","tag_id":"cjwpyz7ac008yugv5b3rj1vn8","_id":"cjwpyz7b80097ugv5qse65kk9"},{"post_id":"cjwpyz79q006yugv5ccjo1wso","tag_id":"cjwpyz7at0091ugv5zrsuo1q9","_id":"cjwpyz7b80098ugv5d0m1t8lv"},{"post_id":"cjwpyz79q006yugv5ccjo1wso","tag_id":"cjwpyz7b70093ugv57g44h3yl","_id":"cjwpyz7b8009augv501a7qwkb"},{"post_id":"cjwpyz79q006yugv5ccjo1wso","tag_id":"cjwpyz7b70094ugv5t4q3ef8i","_id":"cjwpyz7b9009bugv5xrr2d46l"},{"post_id":"cjwpyz79q006yugv5ccjo1wso","tag_id":"cjwpyz7b80095ugv5ekmvdfqd","_id":"cjwpyz7b9009dugv5ruha18lo"},{"post_id":"cjwpyz79s0075ugv51j1cwe2c","tag_id":"cjwpyz78v0062ugv5dbixsezv","_id":"cjwpyz7b9009eugv59hxnoqoa"},{"post_id":"cjwpyz79s0075ugv51j1cwe2c","tag_id":"cjwpyz7b80096ugv5ryb2x5iy","_id":"cjwpyz7b9009gugv5wgelitlg"},{"post_id":"cjwpyz79t0078ugv5n43p93as","tag_id":"cjwpyz7b80099ugv5k4uca800","_id":"cjwpyz7b9009hugv5ze7ca5ba"},{"post_id":"cjwpyz79t0078ugv5n43p93as","tag_id":"cjwpyz7b9009cugv50d97on5w","_id":"cjwpyz7b9009iugv5ke1tdho1"},{"post_id":"cjwpyz79z007lugv57yc321tp","tag_id":"cjwpyz7b9009fugv5b1ss1ruh","_id":"cjwpyz7ba009kugv56egg52z8"},{"post_id":"cjwpyz7a4007zugv5ug2kqgat","tag_id":"cjwpyz7b9009jugv5o1i5zqh9","_id":"cjwpyz7ba009lugv5z5g8fopz"},{"post_id":"cjwpyz7be009nugv59wafm1rn","tag_id":"cjwpyz76n000augv55pgxio83","_id":"cjwpyz7bg009qugv5exu8aqh7"},{"post_id":"cjwpyz7be009nugv59wafm1rn","tag_id":"cjwpyz76v000gugv53c1hhfqg","_id":"cjwpyz7bm009tugv5vz4br47x"},{"post_id":"cjwpyz7bf009pugv58g9eg1hh","tag_id":"cjwpyz78f0041ugv5z8pp1ahu","_id":"cjwpyz7bt009wugv52ioug4wr"},{"post_id":"cjwpyz7be009mugv5zn2ejmtd","tag_id":"cjwpyz7bf009ougv5ovp1oruu","_id":"cjwpyz7bz009zugv50nogzhoz"},{"post_id":"cjwpyz7bn009uugv5efm3hxvh","tag_id":"cjwpyz78g0045ugv53783712e","_id":"cjwpyz7c500a1ugv5krdh0w9e"},{"post_id":"cjwpyz7bu009xugv5t0f4kc3g","tag_id":"cjwpyz78u005yugv5t3qdzxnl","_id":"cjwpyz7cc00a4ugv5zxnsr7mm"},{"post_id":"cjwpyz7bu009xugv5t0f4kc3g","tag_id":"cjwpyz78f0041ugv5z8pp1ahu","_id":"cjwpyz7cc00a5ugv5hfh5glzw"},{"post_id":"cjwpyz7cp00a8ugv5ijlzdauh","tag_id":"cjwpyz7cr00a9ugv50lwjukkg","_id":"cjwpyz7cs00abugv5rjadj8cb"}],"Tag":[{"name":"jQuery实践","_id":"cjwpyz76k0005ugv5xopxxl9l"},{"name":"Thread","_id":"cjwpyz76n000augv55pgxio83"},{"name":"Concurrent","_id":"cjwpyz76v000gugv53c1hhfqg"},{"name":"CSS","_id":"cjwpyz773000lugv5d9jrdtev"},{"name":"定位","_id":"cjwpyz778000rugv5kwc9c23i"},{"name":"行高","_id":"cjwpyz77f000xugv5qjqggwmm"},{"name":"Github","_id":"cjwpyz77j0012ugv5zh09sg1y"},{"name":"Hexo","_id":"cjwpyz77l001augv5u8rhz9d0"},{"name":"工具","_id":"cjwpyz77o001gugv5r2m934c9"},{"name":"svn","_id":"cjwpyz77r001qugv56zwhtn5x"},{"name":"Linux","_id":"cjwpyz77t001xugv5rkbcbdnk"},{"name":"Shell","_id":"cjwpyz77w0022ugv5vq7tyvhj"},{"name":"基础命令","_id":"cjwpyz77y0029ugv5bbsp3yxw"},{"name":"file","_id":"cjwpyz781002hugv5wgytvoc5"},{"name":"directory","_id":"cjwpyz783002mugv5w02zafy4"},{"name":"tar","_id":"cjwpyz785002rugv5j2v0e72f"},{"name":"软件","_id":"cjwpyz78a003augv588e95644"},{"name":"Spring","_id":"cjwpyz78b003gugv5tza1mqy4"},{"name":"Sublime","_id":"cjwpyz78d003pugv583gmr4h9"},{"name":"编辑器","_id":"cjwpyz78d003tugv5dbhwy5fu"},{"name":"Socket","_id":"cjwpyz78e003wugv5k1fze6o2"},{"name":"tomcat","_id":"cjwpyz78f0041ugv5z8pp1ahu"},{"name":"前端","_id":"cjwpyz78g0045ugv53783712e"},{"name":"prototype","_id":"cjwpyz78j004gugv5y9ks4n9z"},{"name":"mongo","_id":"cjwpyz78j004jugv5agxtq3r1"},{"name":"常用命令","_id":"cjwpyz78k004nugv5zh6ddp4i"},{"name":"设计","_id":"cjwpyz78m004wugv5hgl5tvd7"},{"name":"后端","_id":"cjwpyz78n0055ugv577isq5cj"},{"name":"前沿技术","_id":"cjwpyz78r005cugv504t9i7sw"},{"name":"网站","_id":"cjwpyz78s005gugv527mgsc4a"},{"name":"插件","_id":"cjwpyz78s005iugv53ity9jiw"},{"name":"排序","_id":"cjwpyz78s005jugv5530jem4n"},{"name":"nginx","_id":"cjwpyz78s005mugv54hw7def8"},{"name":"redis","_id":"cjwpyz78t005pugv5opp055xl"},{"name":"常用代码","_id":"cjwpyz78t005sugv518s54e2d"},{"name":"CI","_id":"cjwpyz78t005uugv58ijgyquu"},{"name":"jvm","_id":"cjwpyz78u005yugv5t3qdzxnl"},{"name":"javascript","_id":"cjwpyz78v0062ugv5dbixsezv"},{"name":"Object","_id":"cjwpyz78v0065ugv51dy54k7m"},{"name":"2016","_id":"cjwpyz79i006fugv5hlm1xrvu"},{"name":"2017","_id":"cjwpyz79l006kugv5iwls4efa"},{"name":"2018","_id":"cjwpyz79n006qugv5y4w5ac84"},{"name":"API","_id":"cjwpyz79q006xugv5kixg0umx"},{"name":"Canvas","_id":"cjwpyz79s0074ugv5mwo7gn5k"},{"name":"Storage","_id":"cjwpyz79v007cugv50knqi5bl"},{"name":"Cache","_id":"cjwpyz79y007jugv5fkj6fum5"},{"name":"系统","_id":"cjwpyz7a2007qugv5ixsit8aa"},{"name":"Session","_id":"cjwpyz7a4007yugv53wb47y7s"},{"name":"Hibernate","_id":"cjwpyz7a60086ugv53faqxpo1"},{"name":"I/O","_id":"cjwpyz7a8008cugv5z4y19ro5"},{"name":"File","_id":"cjwpyz7a9008iugv5t6s1oppc"},{"name":"Throwable","_id":"cjwpyz7aa008nugv52nwpd133"},{"name":"Error","_id":"cjwpyz7ab008sugv5n4119yf5"},{"name":"Exception","_id":"cjwpyz7ab008vugv5uylzeewe"},{"name":"List","_id":"cjwpyz7ac008yugv5b3rj1vn8"},{"name":"Set","_id":"cjwpyz7at0091ugv5zrsuo1q9"},{"name":"Map","_id":"cjwpyz7b70093ugv57g44h3yl"},{"name":"Collection","_id":"cjwpyz7b70094ugv5t4q3ef8i"},{"name":"Iterator","_id":"cjwpyz7b80095ugv5ekmvdfqd"},{"name":"编码","_id":"cjwpyz7b80096ugv5ryb2x5iy"},{"name":"分析","_id":"cjwpyz7b80099ugv5k4uca800"},{"name":"日志","_id":"cjwpyz7b9009cugv50d97on5w"},{"name":"连接池","_id":"cjwpyz7b9009fugv5b1ss1ruh"},{"name":"基础","_id":"cjwpyz7b9009jugv5o1i5zqh9"},{"name":"Struts","_id":"cjwpyz7bf009ougv5ovp1oruu"},{"name":"目录","_id":"cjwpyz7cr00a9ugv50lwjukkg"}]}}