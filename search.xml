<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ES相关度得分原理研究]]></title>
      <url>https://muxiaobai.github.io/2022/05/17/ES%E7%9B%B8%E5%85%B3%E5%BA%A6%E5%BE%97%E5%88%86%E5%8E%9F%E7%90%86%E7%A0%94%E7%A9%B6/</url>
      <content type="html"><![CDATA[<h2 id="常规查询结果"><a href="#常规查询结果" class="headerlink" title="常规查询结果"></a>常规查询结果</h2><p><code>POST /index_name/_search?explain=true</code> 每一查询结果就有计算的过程，_explanation节点为计算过程</p>
<h2 id="相关度基础查询"><a href="#相关度基础查询" class="headerlink" title="相关度基础查询"></a>相关度基础查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">        &quot;title.hanLP&quot;: &quot;测试文章&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认查询形式</p>
<p><img src="/2022/05/17/ES相关度得分原理研究/%E9%BB%98%E8%AE%A4%E5%BE%97%E5%88%86%E7%BB%93%E6%9E%9C.png" alt="默认图片"></p>
<h3 id="仅查询一个字段"><a href="#仅查询一个字段" class="headerlink" title="仅查询一个字段"></a>仅查询一个字段</h3><p>默认的得分为 score(freq=1.0), computed as boost <em> idf </em> tf from</p>
<p>boost 为查询时候的boost*2.2，此处2.2还不清楚为什么要这么设置。</p>
<blockquote>
<p>idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:</p>
</blockquote>
<p>n 当前文档包含的分词数，N 总共的文档数 </p>
<blockquote>
<p>tf, computed as freq / (freq + k1 <em> (1 - b + b </em> dl / avgdl)) from:</p>
</blockquote>
<p>freq 为该文档上出现的所查词的频数。一些默认值 k1=1.2 b=0.75,<br>d1 当前文档长度 avgdl 平均文档长度</p>
<p>此处查询出来是一个字段在一个词上的得分。</p>
<p>然后默认时候，比如检索查询的词是 “测试文章”，会出现 两个结果 然后相加得出最终得分。</p>
<h3 id="如果match了两个分词的时候会在这个字段上相加两个词的和"><a href="#如果match了两个分词的时候会在这个字段上相加两个词的和" class="headerlink" title="如果match了两个分词的时候会在这个字段上相加两个词的和"></a>如果match了两个分词的时候会在这个字段上相加两个词的和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">        &quot;title.hanLP&quot;: &quot;测试文章&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;_explanation&quot; : &#123;</span><br><span class="line">         &quot;value&quot; : 16.725555, 两个词的和</span><br><span class="line">         &quot;description&quot; : &quot;sum of:&quot;,</span><br><span class="line">         &quot;details&quot; : [</span><br><span class="line">           &#123;</span><br><span class="line">             &quot;value&quot; : 8.399242, 其中一个词的得分 测试</span><br><span class="line">             &quot;description&quot; : &quot;weight(title.hanLP:测试 in 24) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">             &quot;details&quot; : [</span><br><span class="line">              ...</span><br><span class="line">              ]</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">             &quot;value&quot; : 8.326312, 另外一个词 文章</span><br><span class="line">             &quot;description&quot; : &quot;weight(title.hanLP:文章 in 24) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">             &quot;details&quot; : [</span><br><span class="line">               ...</span><br><span class="line">             ]</span><br><span class="line">           &#125;</span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>默认的是求和</p>
<h3 id="term和match-一样会有得分"><a href="#term和match-一样会有得分" class="headerlink" title="term和match 一样会有得分"></a>term和match 一样会有得分</h3><h3 id="multi-match"><a href="#multi-match" class="headerlink" title="multi_match"></a>multi_match</h3><p>如果多个字段的话，根据type和tie_breaker来决定，需设置 type 默认情况使用 所有的字段得分加和。best_fields &amp; tie_breaker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;测试文章&quot;,</span><br><span class="line">      &quot;fields&quot;: [</span><br><span class="line">        &quot;title&quot;,</span><br><span class="line">        &quot;content^2.0&quot;],</span><br><span class="line">        &quot;type&quot;: &quot;best_fields&quot;,</span><br><span class="line">        &quot;tie_breaker&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>max plus 0.3 times others of: 在多个字段时候档类型为 best 的时候，在设置了 tie_breaker 的时候使用 max + others * 0.3,为该字段的最后得分。</p>
<h3 id="filter是不影响得分的"><a href="#filter是不影响得分的" class="headerlink" title="filter是不影响得分的"></a>filter是不影响得分的</h3><p>如果无需相关度，直接用filter过滤,一般为固定条件。</p>
<h2 id="调整得分结果"><a href="#调整得分结果" class="headerlink" title="调整得分结果"></a>调整得分结果</h2><h3 id="通过方法"><a href="#通过方法" class="headerlink" title="通过方法"></a>通过方法</h3><h4 id="替换-相乘-相加"><a href="#替换-相乘-相加" class="headerlink" title="替换 相乘 相加"></a>替换 相乘 相加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">      &quot;match&quot;: &#123;</span><br><span class="line">          &quot;content&quot;: &#123;</span><br><span class="line">                &quot;query&quot;: &quot;测试&quot;,</span><br><span class="line">                &quot;boost&quot;: 2  </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;field_value_factor&quot;: &#123;</span><br><span class="line">        &quot;field&quot;:    &quot;createDate&quot;,</span><br><span class="line">        &quot;modifier&quot;: &quot;log1p&quot; ,</span><br><span class="line">        &quot;factor&quot;: 1.0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>field_value_factor </p>
<p>old_score <em> log(1+createData)</em>factor = new_score,<br>同时可以设置 factor,和field的权重类似.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;value&quot; : 221.86592,</span><br><span class="line">&quot;description&quot; : &quot;sum of:&quot;,</span><br><span class="line">&quot;details&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">  &quot;value&quot; : 221.86592,</span><br><span class="line">  &quot;description&quot; : &quot;function score, product of:&quot;,</span><br><span class="line">  &quot;details&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;value&quot; : 18.19208,</span><br><span class="line">      &quot;description&quot; : &quot;weight(content.hanLP:测试 in 909) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;value&quot; : 12.195743,</span><br><span class="line">      &quot;description&quot; : &quot;min of:&quot;,</span><br><span class="line">      &quot;details&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;value&quot; : 12.195743,</span><br><span class="line">          &quot;description&quot; : &quot;field value function: log1p(doc[&apos;createDate&apos;].value * factor=1.0)&quot;,</span><br><span class="line">          &quot;details&quot; : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;value&quot; : 3.4028235E38,</span><br><span class="line">          &quot;description&quot; : &quot;maxBoost&quot;,</span><br><span class="line">          &quot;details&quot; : [ ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="添加常见的影响因子"><a href="#添加常见的影响因子" class="headerlink" title="添加常见的影响因子"></a>添加常见的影响因子</h2><h3 id="时间因子影响（日期型）"><a href="#时间因子影响（日期型）" class="headerlink" title="时间因子影响（日期型）"></a>时间因子影响（日期型）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;gauss&quot; :&#123;</span><br><span class="line">    &quot;timestamp&quot;: &#123;</span><br><span class="line">      &quot;origin&quot;: &quot;now timestamp&quot;,</span><br><span class="line">      &quot;offset&quot;: &quot;5d&quot;,</span><br><span class="line">      &quot;scale&quot;: &quot;10d&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>距离现在5天都为1，之后10天逐渐递减</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">这种是使用服务端直接_scripts, 推荐</span><br><span class="line">POST _scripts/calculate-create-score</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;:&#123;</span><br><span class="line">    &quot;source&quot;: &quot;if (doc[&apos;createDate&apos;].size()==0 || doc[&apos;createDate&apos;].size()==0) &#123;return 0.5;&#125; else&#123;  long year = 1000L * 3600 * 24 * 365; double gaussScale =  1.5 * year ; long gaussOffset = year * 0; double gaussDecay = 0.5; double sigmaSquare = - (Math.pow(gaussScale, 2) / (2 * Math.log(gaussDecay)));double gaussMultiplier = Math.exp(-1 * Math.pow(Math.max(0, Math.abs(params[&apos;now&apos;] - doc[&apos;createDate&apos;].value.toInstant().toEpochMilli()) - gaussOffset), 2) / 2 / sigmaSquare);  return gaussMultiplier; &#125;&quot;,</span><br><span class="line">    &quot;lang&quot;: &quot;painless&quot;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST </span><br><span class="line">&#123;</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 4,</span><br><span class="line">  &quot;timeout&quot;: &quot;60s&quot;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        </span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">           &quot;content&quot;: &#123;</span><br><span class="line">                  &quot;query&quot;: &quot;测试&quot;,</span><br><span class="line">                  &quot;boost&quot;: 2  </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;match_all&quot;: &#123;</span><br><span class="line">              &quot;boost&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;script_score&quot;: &#123;</span><br><span class="line">            &quot;script&quot;: &#123;</span><br><span class="line">              &quot;id&quot;:&quot;calculate-create-score&quot;,</span><br><span class="line">              &quot;params&quot;: &#123;</span><br><span class="line">                &quot;now&quot;:1651728368608</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  &quot;track_total_hits&quot;: 2147483647</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String scoreScript = &quot;if (doc[&apos;createDate&apos;].size()==0 || doc[&apos;createDate&apos;].size()==0) &#123;return 1;&#125; else&#123;  &quot; +</span><br><span class="line">&quot;long year = 1000L * 3600 * 24 * 365; double gaussScale =  1.5 * year ; long gaussOffset = year * 0; &quot; +</span><br><span class="line">&quot;double gaussDecay = 0.5; double sigmaSquare = - (Math.pow(gaussScale, 2) / (2 * Math.log(gaussDecay)&quot; +</span><br><span class="line">&quot;));double gaussMultiplier = Math.exp(-1 * Math.pow(Math.max(0, Math.abs(params[&apos;now&apos;] - doc[&apos;createDate&apos;].value.toInstant().toEpochMilli()) - gaussOffset), 2) / 2 / sigmaSquare);  return gaussMultiplier; &#125;&quot;;</span><br><span class="line">Map map = new HashMap();</span><br><span class="line">map.put(&quot;now&quot;, new Date().toInstant().toEpochMilli());</span><br></pre></td></tr></table></figure>
<p>添加了一个高斯函数来进行影响 0-1之间，最近一年的相关度最高，时间越远，影响越小。和上面的类似。</p>
<h3 id="访问记录影响（数字型）"><a href="#访问记录影响（数字型）" class="headerlink" title="访问记录影响（数字型）"></a>访问记录影响（数字型）</h3><p>使用log1p函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;field_value_factor&quot;: &#123;</span><br><span class="line">  &quot;field&quot;:    &quot;votes&quot;,</span><br><span class="line">  &quot;modifier&quot;: &quot;log1p&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>将field_value_factor设为对数计算，计算公式：new_score = old_score * log(1 + number_of_votes)。</p>
<h3 id="（坐标型）"><a href="#（坐标型）" class="headerlink" title="（坐标型）"></a>（坐标型）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;gauss&quot;: &#123;</span><br><span class="line">    &quot;lat_lon&quot;: &#123; </span><br><span class="line">      &quot;origin&quot;: &#123; &quot;lat&quot;: 51.5, &quot;lon&quot;: 0.12 &#125;,</span><br><span class="line">      &quot;offset&quot;: &quot;2km&quot;,</span><br><span class="line">      &quot;scale&quot;:  &quot;3km&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>距离中心点( “lat”: 51.5, “lon”: 0.12),offset 2km内的都是1.0，之后每相差scale 3km得分逐渐减小。</p>
]]></content>
      
        <categories>
            
            <category> elasticsearch </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[devops之k8s]]></title>
      <url>https://muxiaobai.github.io/2021/08/19/devops%E4%B9%8Bk8s/</url>
      <content type="html"><![CDATA[<p>kubectl apply -f kuboard_2021_01_29_11_27_09.yaml</p>
<p>kubectl get svc –all-namespaces</p>
<p>kubectl get pods –namespace ns | grep app<br>kubectl get pv -A</p>
<p>进入执行<br>kubectl -n ns  exec -it svc-app-877df6545-j7dzd sh<br>获取日志<br>kubectl -n ns  logs  -f svc-app-877df6545-j7dzd</p>
<p>kubectl -n ns  logs –tail=200  -f svc-app-877df6545-j7dzd</p>
<p>拷贝文件<br>kubectl cp ns/svc-app-search-fb47d75bb-xz8pd:var/d/application.yml application.yaml<br>kubectl cp application.yaml ns/svc-app-search-fb47d75bb-xz8pd:var/d/application.yml</p>
<p>kubectl patch pv pvc-8477bd20-ffbe-4fa2-85b9-f864d7b3690c  -p ‘{“metadata”:{“finalizers”:null}}’ –type=merge<br>kubectl patch pvc elasticsearch-master-db-elasticsearch-0 -p ‘{“metadata”:{“finalizers”:null}}’ –type=merge</p>
]]></content>
      
        <categories>
            
            <category> devops </category>
            
        </categories>
        
        
        <tags>
            
            <tag> devops </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot之MVC的注册和调用]]></title>
      <url>https://muxiaobai.github.io/2021/07/20/SpringBoot%E4%B9%8BMVC%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="SpringMVC的DispatcherServlet注册到tomcat中"><a href="#SpringMVC的DispatcherServlet注册到tomcat中" class="headerlink" title="SpringMVC的DispatcherServlet注册到tomcat中"></a>SpringMVC的DispatcherServlet注册到tomcat中</h2><p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/注册流程.png" alt="注册流程"></p>
<p>直接从org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#onRefresh中看起，<br>重写onRefresh方法创建WebServer;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#createWebServer</span><br><span class="line">private void createWebServer() &#123;</span><br><span class="line">    WebServer webServer = this.webServer;</span><br><span class="line">    ServletContext servletContext = getServletContext();</span><br><span class="line">    if (webServer == null &amp;&amp; servletContext == null) &#123;</span><br><span class="line">        ServletWebServerFactory factory = getWebServerFactory();//这里获取了一个工厂</span><br><span class="line">        this.webServer = factory.getWebServer(getSelfInitializer());//getSelfInitialzer()方法获取了一些需要实现ServletContextInitializer的对象，在StandardContext启动的时候，会之心onStartup()方法。</span><br><span class="line">    &#125;else if (servletContext != null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            getSelfInitializer().onStartup(servletContext);//这里如果没有servletContext的话就直接执行这些onStartup方法。</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ServletException ex) &#123;</span><br><span class="line">            throw new ApplicationContextException(&quot;Cannot initialize servlet context&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    initPropertySources();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#getWebServer</span><br><span class="line">这里传入的getSelfInitializer()会在StandardContext start的时候执行onStartup方法。</span><br><span class="line">@Override</span><br><span class="line">public WebServer getWebServer(ServletContextInitializer... initializers) &#123;</span><br><span class="line">    Tomcat tomcat = new Tomcat();// 这个就是一个tocmat里面会添加两大组件 Connector和Container</span><br><span class="line">    File baseDir = (this.baseDirectory != null) ? this.baseDirectory : createTempDir(&quot;tomcat&quot;);</span><br><span class="line">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">    Connector connector = new Connector(this.protocol);</span><br><span class="line">    tomcat.getService().addConnector(connector);//通过查看tomcat类方法，getService()会，getServer()里面 StandardService放在StandardServer然后把connector放在当前的StandardService中</span><br><span class="line">    customizeConnector(connector);</span><br><span class="line">    tomcat.setConnector(connector);//此处在所有的service中设置Connector</span><br><span class="line">    tomcat.getHost().setAutoDeploy(false);//这里会设置一个StandardHost放在StandardEngine中</span><br><span class="line">    configureEngine(tomcat.getEngine());//这里会获取service设置一个StandardEngine</span><br><span class="line">    for (Connector additionalConnector : this.additionalTomcatConnectors) &#123;</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">    &#125;</span><br><span class="line">    prepareContext(tomcat.getHost(), initializers);//这里把需要initialzers的ServletContextInitialzer放到</span><br><span class="line">    return getTomcatWebServer(tomcat);// 最终返回的就是一个TomcatWebServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected TomcatWebServer getTomcatWebServer(Tomcat tomcat) &#123;</span><br><span class="line">    return new TomcatWebServer(tomcat, getPort() &gt;= 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在初始化的时候会执行<code>initialize</code>,里面有启动<code>this.tomcat.start();</code>就是当前的Tomcat的启动。</p>
<p>重点看两个<code>prepareContext(tomcat.getHost(), initializers);</code>是准备了一个<code>TomcatEmbeddedContext</code>放在host里面<br><img src="/2021/07/20/SpringBoot之MVC的注册和调用/TomcatEmbeddedContext.png" alt="TomcatEmbeddedContext"><br>可看出来，这就是一个 StandardContext也是一个Container组件，就是tomcat的两个组件之一，另外一个是Connector。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">protected void prepareContext(Host host, ServletContextInitializer[] initializers) &#123;</span><br><span class="line">		File documentRoot = getValidDocumentRoot();</span><br><span class="line">		TomcatEmbeddedContext context = new TomcatEmbeddedContext();//新建一个  StandardContext</span><br><span class="line">		if (documentRoot != null) &#123;</span><br><span class="line">			context.setResources(new LoaderHidingResourceRoot(context));</span><br><span class="line">		&#125;</span><br><span class="line">		context.setName(getContextPath());</span><br><span class="line">		context.setDisplayName(getDisplayName());</span><br><span class="line">		context.setPath(getContextPath());</span><br><span class="line">		File docBase = (documentRoot != null) ? documentRoot : createTempDir(&quot;tomcat-docbase&quot;);</span><br><span class="line">		context.setDocBase(docBase.getAbsolutePath());</span><br><span class="line">		context.addLifecycleListener(new FixContextListener());</span><br><span class="line">		context.setParentClassLoader((this.resourceLoader != null) ? this.resourceLoader.getClassLoader()</span><br><span class="line">				: ClassUtils.getDefaultClassLoader());</span><br><span class="line">		resetDefaultLocaleMapping(context);</span><br><span class="line">		addLocaleMappings(context);</span><br><span class="line">		context.setUseRelativeRedirects(false);</span><br><span class="line">		...</span><br><span class="line">		configureTldSkipPatterns(context);</span><br><span class="line">		WebappLoader loader = new WebappLoader(context.getParentClassLoader());</span><br><span class="line">		loader.setLoaderClass(TomcatEmbeddedWebappClassLoader.class.getName());</span><br><span class="line">		loader.setDelegate(true);</span><br><span class="line">		context.setLoader(loader);</span><br><span class="line">		if (isRegisterDefaultServlet()) &#123;</span><br><span class="line">			addDefaultServlet(context);//在context中添加默认的Servlet处理</span><br><span class="line">		&#125;</span><br><span class="line">		if (shouldRegisterJspServlet()) &#123;</span><br><span class="line">			addJspServlet(context);//添加默认Jsp处理</span><br><span class="line">			addJasperInitializer(context);</span><br><span class="line">		&#125;</span><br><span class="line">		context.addLifecycleListener(new StaticResourceConfigurer(context));</span><br><span class="line"></span><br><span class="line">		ServletContextInitializer[] initializersToUse = mergeInitializers(initializers);</span><br><span class="line">		host.addChild(context);// StandardHost 添加context，</span><br><span class="line">		configureContext(context, initializersToUse);</span><br><span class="line">		postProcessContext(context);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>configureContext(context, initializersToUse);</code>最后再配置一下</p>
<p>这个里面是初始化了一个TomcatStarter放在context中作为一个Servlet容器也就是放在，StandardContext的initializers中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected void configureContext(Context context, ServletContextInitializer[] initializers) &#123;</span><br><span class="line">    TomcatStarter starter = new TomcatStarter(initializers);</span><br><span class="line">    if (context instanceof TomcatEmbeddedContext) &#123;</span><br><span class="line">        TomcatEmbeddedContext embeddedContext = (TomcatEmbeddedContext) context;</span><br><span class="line">        embeddedContext.setStarter(starter);</span><br><span class="line">        embeddedContext.setFailCtxIfServletStartFails(true);</span><br><span class="line">    &#125;</span><br><span class="line">    context.addServletContainerInitializer(starter, NO_CLASSES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在StandardContext是LifecycleBase的子类，因此在Lifecycle的start的时候就会执行下面的startInternal(),<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected synchronized void startInternal() throws LifecycleException &#123;</span><br><span class="line">    for (Map.Entry&lt;ServletContainerInitializer, Set&lt;Class&lt;?&gt;&gt;&gt; entry :initializers.entrySet()) &#123;</span><br><span class="line">        //这里是ToncatStarter的执行，</span><br><span class="line">        entry.getKey().onStartup(entry.getValue(),getServletContext());//getServletContext() 会 new ApplicationContext(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里面的ServletContainerInitialzer就是上面TomcatStarter 然后执行TomcatStarter的onStartup方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (ServletContextInitializer initializer : this.initializers) &#123;</span><br><span class="line">    //将当前的ServletContextInitializer启动执行,</span><br><span class="line">    initializer.onStartup(servletContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就找到了最初始的getSelfInitializer()中的对象开始执行onStartup方法。<code>org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#getSelfInitializer</code></p>
<h4 id="看一下-getSelfInitializer-怎么添加的"><a href="#看一下-getSelfInitializer-怎么添加的" class="headerlink" title="看一下 getSelfInitializer() 怎么添加的"></a>看一下 getSelfInitializer() 怎么添加的</h4><p>这里的启动<code>initializer.onStartup(servletContext);</code>即 <code>getSelfInitializer().onStartup(servletContext)</code>也验证了<code>createWebServer()</code>方法里面的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void selfInitialize(ServletContext servletContext) throws ServletException &#123;</span><br><span class="line">    prepareWebApplicationContext(servletContext);</span><br><span class="line">    registerApplicationScope(servletContext);</span><br><span class="line">    WebApplicationContextUtils.registerEnvironmentBeans(getBeanFactory(), servletContext);</span><br><span class="line">    for (ServletContextInitializer beans : getServletContextInitializerBeans()) &#123;</span><br><span class="line">        beans.onStartup(servletContext);//这里就直接执行了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处的<code>getServletContextInitializerBeans()</code>是一个集合，在递归循环的时候返回，所以就是<code>this.sortedList</code>的循环onStartup(),</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#getServletContextInitializerBeans</span><br><span class="line"></span><br><span class="line">protected Collection&lt;ServletContextInitializer&gt; getServletContextInitializerBeans() &#123;</span><br><span class="line">    return new ServletContextInitializerBeans(getBeanFactory());//此处获取的即ServletContextInitializerBeans集合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>org.springframework.boot.SpringApplication#run(java.lang.String...)</code>中有<code>context = createApplicationContext();</code>的时候，创建了beanFactory,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public GenericApplicationContext() &#123;</span><br><span class="line">    this.beanFactory = new DefaultListableBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">可以看出此处是集合类，会递归</span><br><span class="line">public class ServletContextInitializerBeans extends AbstractCollection&lt;ServletContextInitializer&gt; &#123;</span><br><span class="line">    //递归调用的是 this.sortedList</span><br><span class="line">	@Override</span><br><span class="line">	public Iterator&lt;ServletContextInitializer&gt; iterator() &#123;</span><br><span class="line">		return this.sortedList.iterator();</span><br><span class="line">	&#125;</span><br><span class="line">	@SafeVarargs</span><br><span class="line">	public ServletContextInitializerBeans(ListableBeanFactory beanFactory,</span><br><span class="line">			Class&lt;? extends ServletContextInitializer&gt;... initializerTypes) &#123;</span><br><span class="line">		this.initializers = new LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">		this.initializerTypes = (initializerTypes.length != 0) ? Arrays.asList(initializerTypes)</span><br><span class="line">				: Collections.singletonList(ServletContextInitializer.class);//默认只有ServletContextInitializer类型</span><br><span class="line">		addServletContextInitializerBeans(beanFactory);//从beanFactory中获取到ServletContextInitializer并添加到initializers中</span><br><span class="line">		addAdaptableBeans(beanFactory);</span><br><span class="line">		List&lt;ServletContextInitializer&gt; sortedInitializers = this.initializers.values().stream()</span><br><span class="line">				.flatMap((value) -&gt; value.stream().sorted(AnnotationAwareOrderComparator.INSTANCE))</span><br><span class="line">				.collect(Collectors.toList());</span><br><span class="line">		this.sortedList = Collections.unmodifiableList(sortedInitializers);//最终执行的位置，也是返回的ServletContextInitializer</span><br><span class="line">		logMappings(this.initializers);</span><br><span class="line">	&#125;</span><br><span class="line">    //两次循环获取ServletContextInitializer的所有子类</span><br><span class="line">	private void addServletContextInitializerBeans(ListableBeanFactory beanFactory) &#123;</span><br><span class="line">		for (Class&lt;? extends ServletContextInitializer&gt; initializerType : this.initializerTypes) &#123;</span><br><span class="line">			for (Entry&lt;String, ? extends ServletContextInitializer&gt; initializerBean : getOrderedBeansOfType(beanFactory,</span><br><span class="line">					initializerType)) &#123;</span><br><span class="line">                    //获取到的getOrderedBeansOfType(beanFactory,initializerType): beanName和对应的bean</span><br><span class="line">				addServletContextInitializerBean(initializerBean.getKey(), initializerBean.getValue(), beanFactory);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    //添加到initializers中</span><br><span class="line">	private void addServletContextInitializerBean(String beanName, ServletContextInitializer initializer,</span><br><span class="line">			ListableBeanFactory beanFactory) &#123;</span><br><span class="line">		if (initializer instanceof ServletRegistrationBean) &#123;</span><br><span class="line">			Servlet source = ((ServletRegistrationBean&lt;?&gt;) initializer).getServlet();</span><br><span class="line">			addServletContextInitializerBean(Servlet.class, beanName, initializer, beanFactory, source);</span><br><span class="line">		&#125;</span><br><span class="line">		...</span><br><span class="line">		else &#123;</span><br><span class="line">			addServletContextInitializerBean(ServletContextInitializer.class, beanName, initializer, beanFactory,</span><br><span class="line">					initializer);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	private void addServletContextInitializerBean(Class&lt;?&gt; type, String beanName, ServletContextInitializer initializer,</span><br><span class="line">			ListableBeanFactory beanFactory, Object source) &#123;</span><br><span class="line">		    this.initializers.add(type, initializer);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    // 从beanFactory(DefaultListableBeanFactory)中获取对应的类，这里的获取到的</span><br><span class="line">    private &lt;T&gt; List&lt;Entry&lt;String, T&gt;&gt; getOrderedBeansOfType(ListableBeanFactory beanFactory, Class&lt;T&gt; type,</span><br><span class="line">			Set&lt;?&gt; excludes) &#123;</span><br><span class="line">		String[] names = beanFactory.getBeanNamesForType(type, true, false);</span><br><span class="line">		Map&lt;String, T&gt; map = new LinkedHashMap&lt;&gt;();</span><br><span class="line">		for (String name : names) &#123;</span><br><span class="line">			if (!excludes.contains(name) &amp;&amp; !ScopedProxyUtils.isScopedTarget(name)) &#123;</span><br><span class="line">				T bean = beanFactory.getBean(name, type);</span><br><span class="line">				if (!excludes.contains(bean)) &#123;</span><br><span class="line">					map.put(name, bean);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		List&lt;Entry&lt;String, T&gt;&gt; beans = new ArrayList&lt;&gt;();</span><br><span class="line">		beans.addAll(map.entrySet());</span><br><span class="line">		beans.sort((o1, o2) -&gt; AnnotationAwareOrderComparator.INSTANCE.compare(o1.getValue(), o2.getValue()));</span><br><span class="line">		return beans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration，自动扫描,<br>onRefresh();生成<code>DispatcherServlet</code>和<code>DispatcherServletRegistrationBean</code>,路径是”/“:继承ServletRegistrationBean,继承 ServletContextInitializer，会被初始化调用，   DispatcherServletRegistrationBean registration = new DispatcherServletRegistrationBean(dispatcherServlet,this.webMvcProperties.getServlet().getPath()),此处的路径就是”/“<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ServletRegistrationBean(T servlet, boolean alwaysMapUrl, String... urlMappings) &#123;</span><br><span class="line">		Assert.notNull(servlet, &quot;Servlet must not be null&quot;);</span><br><span class="line">		Assert.notNull(urlMappings, &quot;UrlMappings must not be null&quot;);</span><br><span class="line">		this.servlet = servlet;</span><br><span class="line">		this.alwaysMapUrl = alwaysMapUrl;</span><br><span class="line">		this.urlMappings.addAll(Arrays.asList(urlMappings));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/DispatcherServletRegistrationBean.png" alt="DispatcherServletRegistrationBean"></p>
<p>实现了ServletContextInitializer，因此会被扫描到添加到this.sortedList,然后执行<code>beans.onStartup(servletContext);</code></p>
<p>将servlet添加到context中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   org.springframework.boot.web.servlet.RegistrationBean#onStartup</span><br><span class="line">   @Override</span><br><span class="line">public final void onStartup(ServletContext servletContext) throws ServletException &#123;</span><br><span class="line">	String description = getDescription();</span><br><span class="line">	if (!isEnabled()) &#123;</span><br><span class="line">		logger.info(StringUtils.capitalize(description) + &quot; was not registered (disabled)&quot;);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	register(description, servletContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>register(description, servletContext);</code>在当前的servletContext中添加了description,<code>addRegistration(description, servletContext);</code>是添加servlet,<code>configure(registration);</code>是给当前的Wrapper添加对应的path ,同时给StandardContext添加路径和类名字对应，<code>servletMappings.put(adjustedPattern, name);</code>，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected final void register(String description, ServletContext servletContext) &#123;</span><br><span class="line">    D registration = addRegistration(description, servletContext);</span><br><span class="line">    if (registration == null) &#123;</span><br><span class="line">        logger.info(</span><br><span class="line">                StringUtils.capitalize(description) + &quot; was not registered &quot; + &quot;(possibly already registered?)&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    configure(registration);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//ServletRegistrationBean的两个，一个是放servlet 一个是放mapping关系</span><br><span class="line">@Override</span><br><span class="line">protected ServletRegistration.Dynamic addRegistration(String description, ServletContext servletContext) &#123;</span><br><span class="line">    String name = getServletName();</span><br><span class="line">    return servletContext.addServlet(name, this.servlet);//此处的this.servlet是DispatcherServletAutoConfiguration注入的ApplicationContext</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">protected void configure(ServletRegistration.Dynamic registration) &#123;</span><br><span class="line">    super.configure(registration);</span><br><span class="line">    String[] urlMapping = StringUtils.toStringArray(this.urlMappings);</span><br><span class="line">    if (urlMapping.length == 0 &amp;&amp; this.alwaysMapUrl) &#123;</span><br><span class="line">        urlMapping = DEFAULT_MAPPINGS;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!ObjectUtils.isEmpty(urlMapping)) &#123;</span><br><span class="line">        registration.addMapping(urlMapping);</span><br><span class="line">    &#125;</span><br><span class="line">    registration.setLoadOnStartup(this.loadOnStartup);</span><br><span class="line">    if (this.multipartConfig != null) &#123;</span><br><span class="line">        registration.setMultipartConfig(this.multipartConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//ApplicationContext</span><br><span class="line">private ServletRegistration.Dynamic addServlet(String servletName, String servletClass,</span><br><span class="line">        Servlet servlet, Map&lt;String,String&gt; initParams) throws IllegalStateException &#123;</span><br><span class="line">    Wrapper wrapper = (Wrapper) context.findChild(servletName);</span><br><span class="line">    ...</span><br><span class="line">    wrapper = context.createWrapper();</span><br><span class="line">    wrapper.setName(servletName);</span><br><span class="line">    context.addChild(wrapper);//在当前context添加servletWrapper</span><br><span class="line">    ...</span><br><span class="line">    wrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">    wrapper.setServlet(servlet);//这里的servlet就是DispatcherServlet</span><br><span class="line">    ServletRegistration.Dynamic registration =new ApplicationServletRegistration(wrapper, context);// </span><br><span class="line">    return registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DispatcherServlet执行流程"><a href="#DispatcherServlet执行流程" class="headerlink" title="DispatcherServlet执行流程"></a>DispatcherServlet执行流程</h2><p>前言是tomcat的请求可以到servlet中，中间经过了Connector到Container，经过一些Valve，Engine，Host，Contex，到Wrapper，<br>因为拦截所有”/“请求，因此全部都在DispatherServlet中处理请求</p>
<p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/Springmvc执行流程.png" alt="Springmvc执行流程"></p>
<ul>
<li>1.DispatcherServlet：前端控制器。用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性,系统扩展性提高。由框架实现</li>
<li>2.HandlerMapping：处理器映射器。HandlerMapping负责根据用户请求的url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，根据一定的规则去查找,例如：xml配置方式，实现接口方式，注解方式等。由框架实现</li>
<li>3.Handler：处理器。Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。</li>
<li>4.HandlAdapter：处理器适配器。通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。由框架实现。</li>
<li>5.ModelAndView是springmvc的封装对象，将model和view封装在一起。</li>
<li>6.ViewResolver：视图解析器。ViewResolver负责将处理结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。</li>
<li>7.View:是springmvc的封装对象，是一个接口, springmvc框架提供了很多的View视图类型，包括：jspview，pdfview,jstlView、freemarkerView、pdfView等。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</li>
</ul>
<p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/请求流程.png" alt="请求流程"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">	doDispatch(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">	HttpServletRequest processedRequest = request;</span><br><span class="line">	HandlerExecutionChain mappedHandler = null;</span><br><span class="line">	boolean multipartRequestParsed = false;</span><br><span class="line"></span><br><span class="line">	WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">	...</span><br><span class="line">	ModelAndView mv = null;</span><br><span class="line">	...</span><br><span class="line">	//检查是否是上传附件</span><br><span class="line">	processedRequest = checkMultipart(request);</span><br><span class="line">	multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">	//通过request找到处理handler，对应图中2、3步骤,返回请求链</span><br><span class="line">	// Determine handler for the current request.</span><br><span class="line">	mappedHandler = getHandler(processedRequest);</span><br><span class="line">	...</span><br><span class="line">	//对应图中4步骤，找到handlerAdapter数据</span><br><span class="line">	// Determine handler adapter for the current request.</span><br><span class="line">	HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">	...</span><br><span class="line">	//真正调用到处理的地方，对应图中5部分，然后返回对应7 ModelAndView</span><br><span class="line">	// Actually invoke the handler.</span><br><span class="line">	mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">	if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	applyDefaultViewName(processedRequest, mv);</span><br><span class="line">	mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">	...</span><br><span class="line">	processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>getHandler()找到对应的处理<code>HandlerExecutionChain</code>请求处理链，返回的是HandlerMapping的包装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">	if (this.handlerMappings != null) &#123;</span><br><span class="line">		for (HandlerMapping mapping : this.handlerMappings) &#123;</span><br><span class="line">			HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">			if (handler != null) &#123;</span><br><span class="line">				return handler;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>this.handlerMappings在初始化的时候<code>initHandlerMappings(context);</code>在context中找<code>HandlerMapping.class</code>对象的所有bean放入的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void initHandlerMappings(ApplicationContext context) &#123;</span><br><span class="line">	this.handlerMappings = null;</span><br><span class="line">	Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">	BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);</span><br><span class="line">	if (!matchingBeans.isEmpty()) &#123;</span><br><span class="line">		this.handlerMappings = new ArrayList&lt;&gt;(matchingBeans.values());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>那这个context是怎么得到的？<br>就是Spring的ApplicationContext，确切的说是<code>AnnotationConfigServletWebServerApplicationContext</code>,在实例化DispatcherServlet的时候会调用所有的BeanPostProcessor，恰巧也会调用ApplicationContextAwareProcessor的<code>postProcessBeforeInitialization</code>,在这里面调用了<br><code>invokeAwareInterfaces</code>，就调用了bean的<code>setApplicationContext()</code>方法，DispatcherServlet实现了<code>ApplicationContextAware</code><br>因此就把Spring的applicationContext放到DispatcherServlet对象里面了。</p>
<p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/DispatcherServlet.png" alt="DispatcherServlet"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Nullable</span><br><span class="line">public Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">	AccessControlContext acc = null;</span><br><span class="line">	</span><br><span class="line">	invokeAwareInterfaces(bean);</span><br><span class="line"></span><br><span class="line">	return bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void invokeAwareInterfaces(Object bean) &#123;</span><br><span class="line">	if (bean instanceof Aware) &#123;</span><br><span class="line">		if (bean instanceof EnvironmentAware) &#123;</span><br><span class="line">			((EnvironmentAware) bean).setEnvironment(this.applicationContext.getEnvironment());</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof EmbeddedValueResolverAware) &#123;</span><br><span class="line">			((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(this.embeddedValueResolver);</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof ResourceLoaderAware) &#123;</span><br><span class="line">			((ResourceLoaderAware) bean).setResourceLoader(this.applicationContext);</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof ApplicationEventPublisherAware) &#123;</span><br><span class="line">			((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(this.applicationContext);</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof MessageSourceAware) &#123;</span><br><span class="line">			((MessageSourceAware) bean).setMessageSource(this.applicationContext);</span><br><span class="line">		&#125;</span><br><span class="line">		//bean 实现了ApplicationContextAware，因此dispatcherServlet中就有了</span><br><span class="line">		if (bean instanceof ApplicationContextAware) &#123;</span><br><span class="line">			((ApplicationContextAware) bean).setApplicationContext(this.applicationContext);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/HandlerAdapter.png" alt="生成HandlerAdapter过程"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface HandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">	boolean supports(Object handler);</span><br><span class="line"></span><br><span class="line">	@Nullable</span><br><span class="line">	ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;</span><br><span class="line"></span><br><span class="line">	long getLastModified(HttpServletRequest request, Object handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要判断当前的mappedHandler.getHandler()的类型来生成Adapter，<br>RequestMappingHandlerAdapter实现了HandlerAdapter，判断handler 就是执行supports(),handle就是handlerReqeust();</p>
<p><code>mav = invokeHandlerMethod(request, response, handlerMethod);</code><br><code>invocableMethod.invokeAndHandle(webRequest, mavContainer);</code>调用反射</p>
<h2 id="Spring生成请求地址和方法映射"><a href="#Spring生成请求地址和方法映射" class="headerlink" title="Spring生成请求地址和方法映射"></a>Spring生成请求地址和方法映射</h2><p>主要是找到两个注解的解析，@RequestMapping,@Controller,以及他们的变种,@RestControllrt,@GetMapping,@PostMapping</p>
<p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/生成handler过程.png" alt="生成handler过程"></p>
<p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/RequestMappingHandlerMapping.png" alt="RequestMappingHandlerMapping"></p>
<p><img src="/2021/07/20/SpringBoot之MVC的注册和调用/ServletWebServerApplicationContext.png" alt="ServletWebServerApplicationContext"></p>
<ul>
<li><a href="https://blog.csdn.net/bishabeijing/article/details/115729250" target="_blank" rel="noopener">springboot如何添加dispacherServerlet到tomcat中</a></li>
<li><a href="https://www.cnblogs.com/yangxiaohui227/p/13187719.html" target="_blank" rel="noopener">springmvc 源码分析（一）– DisparcherServlet的创建和注册到tomcat</a></li>
<li><a href="https://www.jianshu.com/p/8a20c547e245" target="_blank" rel="noopener">SpringMVC执行流程及工作原理</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[常见问题分析RabbitMQ如何处理消息丢失]]></title>
      <url>https://muxiaobai.github.io/2021/06/08/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90RabbitMQ%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1/</url>
      <content type="html"><![CDATA[<h2 id="首先明确一点-一条消息的传送流程：生产者-gt-MQ-gt-消费者"><a href="#首先明确一点-一条消息的传送流程：生产者-gt-MQ-gt-消费者" class="headerlink" title="首先明确一点 一条消息的传送流程：生产者-&gt;MQ-&gt;消费者"></a>首先明确一点 一条消息的传送流程：生产者-&gt;MQ-&gt;消费者</h2><p>所以有三个地方都会丢失数据：</p>
<p>生产者发送给MQ的途中出现网络问题<br>MQ自己没保管好弄丢了<br>消费者拿到数据后出错了没有最终完成任务<br>依次分析</p>
<h3 id="1）生产者弄丢了数据"><a href="#1）生产者弄丢了数据" class="headerlink" title="1）生产者弄丢了数据"></a>1）生产者弄丢了数据</h3><p>生产者将数据发送到rabbitmq的时候，可能因为网络问题导致数据就在半路给搞丢了。</p>
<p>1.使用事务（性能差）<br>可以选择用rabbitmq提供的事务功能，在生产者发送数据之前开启rabbitmq事务（channel.txSelect），然后发送消息，如果消息没有成功被rabbitmq接收到，那么生产者会收到异常报错，此时就可以回滚事务（channel.txRollback），然后重试发送消息；如果收到了消息，那么可以提交事务（channel.txCommit）。但是问题是，开始rabbitmq事务机制，基本上吞吐量会下来，因为太耗性能。</p>
<p>2.发送回执确认（推荐）<br>可以开启confirm模式，在生产者那里设置开启confirm模式之后，你每次写的消息都会分配一个唯一的id，然后如果写入了rabbitmq中，rabbitmq会给你回传一个ack消息，告诉你说这个消息ok了。如果rabbitmq没能处理这个消息，会回调你一个nack接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息id的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。<br>　　事务机制和cnofirm机制最大的不同在于，事务机制是同步的，你提交一个事务之后会阻塞在那儿，但是confirm机制是异步的，你发送个消息之后就可以发送下一个消息，然后那个消息rabbitmq接收了之后会异步回调你一个接口通知你这个消息接收到了。</p>
<p>所以一般在生产者这块避免数据丢失，都是用confirm机制的。</p>
<h3 id="2）RabbitMQ弄丢了数据-开启RabbitMQ的数据持久化"><a href="#2）RabbitMQ弄丢了数据-开启RabbitMQ的数据持久化" class="headerlink" title="2）RabbitMQ弄丢了数据-开启RabbitMQ的数据持久化"></a>2）RabbitMQ弄丢了数据-开启RabbitMQ的数据持久化</h3><p>　　为了防止rabbitmq自己弄丢了数据，这个你必须开启rabbitmq的持久化，就是消息写入之后会持久化到磁盘，哪怕是rabbitmq自己挂了，恢复之后会自动读取之前存储的数据，一般数据不会丢。除非极其罕见的是，rabbitmq还没持久化，自己就挂了，可能导致少量数据会丢失的，但是这个概率较小。</p>
<p>　　设置持久化有两个步骤，第一个是创建queue的时候将其设置为持久化的，这样就可以保证rabbitmq持久化queue的元数据，但是不会持久化queue里的数据；第二个是发送消息的时候将消息的deliveryMode设置为2，就是将消息设置为持久化的，此时rabbitmq就会将消息持久化到磁盘上去。必须要同时设置这两个持久化才行，rabbitmq哪怕是挂了，再次重启，也会从磁盘上重启恢复queue，恢复这个queue里的数据。</p>
<p>　　而且持久化可以跟生产者那边的confirm机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者ack了，所以哪怕是在持久化到磁盘之前，rabbitmq挂了，数据丢了，生产者收不到ack，你也是可以自己重发的。</p>
<p>　　若生产者那边的confirm机制未开启的情况下，哪怕是你给rabbitmq开启了持久化机制，也有一种可能，就是这个消息写到了rabbitmq中，但是还没来得及持久化到磁盘上，结果不巧，此时rabbitmq挂了，就会导致内存里的一点点数据会丢失。</p>
<h3 id="3）消费端弄丢了数据"><a href="#3）消费端弄丢了数据" class="headerlink" title="3）消费端弄丢了数据"></a>3）消费端弄丢了数据</h3><p>　　主要是因为你消费的时候，刚消费到，还没处理，结果进程挂了比如重启了，那么就尴尬了，RabbitMQ认为你都消费了，这数据就丢了。或者消费者拿到数据之后挂了，这时候需要MQ重新指派另一个消费者去执行任务（一块肉，刚用筷子夹起来，发地震抖了一下，肉掉了）</p>
<p>　　这个时候得用RabbitMQ提供的ack机制，也是一种处理完成发送回执确认的机制。如果MQ等待一段时间后你没有发送过来处理完成 那么RabbitMQ就认为你还没处理完，这个时候RabbitMQ会把这个消费分配给别的consumer去处理，消息是不会丢的。</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot之自动装配]]></title>
      <url>https://muxiaobai.github.io/2021/06/02/SpringBoot%E4%B9%8B%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
      <content type="html"><![CDATA[<p>主图是spring和mybatis的结合的内容</p>
<p><img src="http://assets.processon.com/chart_image/5c8b1387e4b02b2ce4995739.png" alt="图片"></p>
<p>此为主要部分spring @Import</p>
<p><img src="/2021/06/02/SpringBoot之自动装配/import.png" alt="图片"></p>
<p>一点点分析：</p>
<p>@Import({xxx.class})直接来的</p>
<p>@EnableAutoConfiguration中的@Import(AutoConfigurationImportSelector.class)扫描 <code>META-INF/spring.factories</code>中的</p>
<p>@AutoConfigurationPackage中的@Import(AutoConfigurationPackages.Registrar.class)<br>注册包中的</p>
<p>这些配置都存在 ，在run中读取放入Spring中</p>
<p><img src="/2021/06/02/SpringBoot之自动装配/AutowiredAnnotationBeanPostProcessor.png" alt="图片"></p>
<p>这是一个BeanPostProcessor执行，所有有@Autowired注解的都会被执行注入</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3MjMwMzg2Nw==&amp;mid=2247493911&amp;idx=1&amp;sn=1e3a08d74795a5019ad75aeb96e6d03f&amp;chksm=9f22fc83a855759508466fd2b688b84596322c5cf09544d8c131a82b050519863130abb2861d&amp;mpshare=1&amp;scene=1&amp;srcid=0413hiUoUrSnubWmvPrjhtEb&amp;sharer_sharetime=1618283761073&amp;sharer_shareid=76ce302a154389434cac572dafac93a9&amp;exportkey=AWeI%2BZ6voGgk7zqHOgEJWv4%3D&amp;pass_ticket=kIMvV2YwZ%2FHhNKTNMAeYQZjH1J5ya%2BLtLS4VTLEYVerq1bu1Os1JaaImGAR8cIvz&amp;wx_header=0#rd" target="_blank" rel="noopener">Spring Boot 注解原理，自动装配原理，图文并茂，万字长文！</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习之总览全局]]></title>
      <url>https://muxiaobai.github.io/2021/01/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%80%BB%E8%A7%88%E5%85%A8%E5%B1%80/</url>
      <content type="html"><![CDATA[<h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><pre><code>通过现有数据获取一些未知的联系，生成一个模型，然后在新数据来的时候，可以通过这个模型进行预测。
</code></pre><h2 id="为什么要了解机器学习"><a href="#为什么要了解机器学习" class="headerlink" title="为什么要了解机器学习"></a>为什么要了解机器学习</h2><p>在这个人人都在说编程，说python的时候，我们要思考的是背后有什么趋势，为何会这样？我自己想了一些儿原因。</p>
<ul>
<li>信息的爆炸</li>
<li>计算机的算力提升</li>
<li>人的习惯有传递性，不会立刻改变</li>
<li>人是喜欢有规则的</li>
</ul>
<h2 id="机器学习可以做什么"><a href="#机器学习可以做什么" class="headerlink" title="机器学习可以做什么"></a>机器学习可以做什么</h2><pre><code>主要是预测和辅助决策。
</code></pre><h2 id="怎么去深入理解"><a href="#怎么去深入理解" class="headerlink" title="怎么去深入理解"></a>怎么去深入理解</h2><pre><code>个人理解，不要一开始就研究算法，你会自己把自己绕晕，然后也出不来。应结合实际案例，理解了机器学习的常规过程。然后再整理算法，在算法阶段，也不要太纠结具体的那个参数，先有全貌，再有枝叶。
</code></pre><p>大概的一个学习过程，</p>
<h2 id="总纲"><a href="#总纲" class="headerlink" title="总纲"></a>总纲</h2><h3 id="先来一个最简单的例子—-人人皆知的房价预测"><a href="#先来一个最简单的例子—-人人皆知的房价预测" class="headerlink" title="先来一个最简单的例子—-人人皆知的房价预测"></a>先来一个最简单的例子—-人人皆知的房价预测</h3><h4 id="从最小二乘法开始"><a href="#从最小二乘法开始" class="headerlink" title="从最小二乘法开始"></a>从最小二乘法开始</h4><h3 id="推广到线性模型"><a href="#推广到线性模型" class="headerlink" title="推广到线性模型"></a>推广到线性模型</h3><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><h4 id="变形-Rige-Lasso-ElasticNet"><a href="#变形-Rige-Lasso-ElasticNet" class="headerlink" title="变形  Rige Lasso ElasticNet"></a>变形  Rige Lasso ElasticNet</h4><h4 id="计算距离-相似（欧氏距离、Jaccard相似、cos相似、person相似）"><a href="#计算距离-相似（欧氏距离、Jaccard相似、cos相似、person相似）" class="headerlink" title="计算距离/相似（欧氏距离、Jaccard相似、cos相似、person相似）"></a>计算距离/相似（欧氏距离、Jaccard相似、cos相似、person相似）</h4><h4 id="怎么确认模型过拟合-欠拟合"><a href="#怎么确认模型过拟合-欠拟合" class="headerlink" title="怎么确认模型过拟合/欠拟合"></a>怎么确认模型过拟合/欠拟合</h4><h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><h4 id="sign函数-决定"><a href="#sign函数-决定" class="headerlink" title="sign函数 决定"></a>sign函数 决定</h4><h3 id="贝叶斯-隐形马尔科夫链-HMM"><a href="#贝叶斯-隐形马尔科夫链-HMM" class="headerlink" title="贝叶斯,隐形马尔科夫链 HMM"></a>贝叶斯,隐形马尔科夫链 HMM</h3><h3 id="SVM-支持向量机"><a href="#SVM-支持向量机" class="headerlink" title="SVM 支持向量机"></a>SVM 支持向量机</h3><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><h3 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h3><h4 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h4><h4 id="SVD"><a href="#SVD" class="headerlink" title="SVD"></a>SVD</h4><p>2*2情况，是否连续值；是否监督；</p>
<p><img src="/2021/01/27/机器学习之总览全局/ml_conceptml_algorithms.png" alt="一些常见的算法归类"></p>
<p>如何选择合适的算法进行工作：</p>
<p><img src="/2021/01/27/机器学习之总览全局/sklearn.png" alt="如何选区算法"><br><a href="https://sklearn.apachecn.org/" target="_blank" rel="noopener">sklearn-CN文档</a><br>分类</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[leetcode-二叉树-遍历-01]]></title>
      <url>https://muxiaobai.github.io/2020/12/03/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%81%8D%E5%8E%86-01/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void traverse(TreeNode root) &#123;</span><br><span class="line">    // 前序遍历</span><br><span class="line">    traverse(root.left)</span><br><span class="line">    // 中序遍历</span><br><span class="line">    traverse(root.right)</span><br><span class="line">    // 后序遍历</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * 先序遍历</span><br><span class="line">    *144</span><br><span class="line">    *</span><br><span class="line">    作者：LeetCode-Solution</span><br><span class="line">    链接：https://leetcode-cn.com/problems/binary-tree-preorder-traversal</span><br><span class="line">    来源：力扣（LeetCode）</span><br><span class="line">    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line">    * @param root</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">public static String traverseb(TreeNode root) &#123;</span><br><span class="line">    // 对于空节点，可以用一个特殊字符表示</span><br><span class="line">    if (root == null) &#123;</span><br><span class="line">        return &quot;#&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    // 将左右子树序列化成字符串</span><br><span class="line">    String left = traverseb(root.left);</span><br><span class="line">    String right = traverseb(root.right);</span><br><span class="line">    /* 先序遍历代码位置 */</span><br><span class="line">    // 左右子树加上自己，就是以自己为根的二叉树序列化结果</span><br><span class="line">    String subTree = root.val + &quot;,&quot; + left + &quot;,&quot; + right;</span><br><span class="line">    return subTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考:<a href="https://github.com/muxiaobai/java-demo/blob/master/test-java-demo/src/main/java/io/github/muxiaobai/labuladong/hhh.java" target="_blank" rel="noopener">遍历二叉树</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[应用部署之nginx的https配置及自动生成证书]]></title>
      <url>https://muxiaobai.github.io/2020/10/30/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E7%9A%84https%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</url>
      <content type="html"><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>运行nginx -V命令查看已经安装的nginx模块</p>
<p>./configure –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module</p>
<p>需要添加ssl模块<br>make &amp;&amp; make install</p>
<h3 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen          8080;</span><br><span class="line">	listen       8443 ssl;</span><br><span class="line">	server_name  localhost;</span><br><span class="line">	#ssl on;</span><br><span class="line">	root html/app-layui/src;</span><br><span class="line">	index login.html index.htm;</span><br><span class="line">	ssl_certificate    ../cert/zhang.pem;</span><br><span class="line">	ssl_certificate_key ../cert/zhang.key;</span><br><span class="line">	ssl_session_timeout 5m;</span><br><span class="line">	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line">	#charset koi8-r;</span><br><span class="line">	#access_log  logs/host.access.log  main;</span><br><span class="line">	location / &#123;</span><br><span class="line">	    root   html;</span><br><span class="line">	    index  login.html login.thm;</span><br><span class="line">	&#125;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">	proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">	proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>证书区分<br><img src="应用部署之nginx的https配置及自动生成证书/cert.png" alt="cert.png"></p>
<p>tomcat keytool 免费证书<br>win&amp;linux 脚本</p>
<ul>
<li><a href="https://github.com/muxiaobai/shell/blob/master/winsh/gen_cert.bat" target="_blank" rel="noopener">https://github.com/muxiaobai/shell/blob/master/winsh/gen_cert.bat</a></li>
<li><a href="https://github.com/muxiaobai/shell/blob/master/linux/gen_cert.sh" target="_blank" rel="noopener">https://github.com/muxiaobai/shell/blob/master/linux/gen_cert.sh</a></li>
</ul>
<p>免费安全证书  1year<br><a href="https://freessl.cn/" target="_blank" rel="noopener">https://freessl.cn/</a></p>
<p>安全证书 </p>
<p><a href="https://github.com/certbot/certbot" target="_blank" rel="noopener">https://github.com/certbot/certbot</a>   90day</p>
<p>参考:</p>
<ul>
<li><a href="https://blog.csdn.net/achenyuan/article/details/83340179" target="_blank" rel="noopener">keytool和openssl生成证书，应用tomcat和nginx</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> deploy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux-基础命令总结之systemctl]]></title>
      <url>https://muxiaobai.github.io/2020/09/23/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%E4%B9%8Bsystemctl/</url>
      <content type="html"><![CDATA[<p>systemctl也会去/etc/init.d目录下，查看，执行相关程序</p>
<ul>
<li>systemctl status firewalld</li>
<li>systemctl list-unit-files 所有的资源</li>
<li>systemctl list-units  –type=service 正在运行的   type 类型</li>
</ul>
<p>unit 为资源</p>
<ul>
<li>Service unit：系统服务</li>
<li>Target unit：多个 Unit 构成的一个组</li>
<li>Device Unit：硬件设备</li>
<li>Mount Unit：文件系统的挂载点</li>
<li>Automount Unit：自动挂载点</li>
<li>Path Unit：文件或路径</li>
<li>Scope Unit：不是由 Systemd 启动的外部进程</li>
<li>Slice Unit：进程组</li>
<li>Snapshot Unit：Systemd 快照，可以切回某个快照</li>
<li>Socket Unit：进程间通信的 socket</li>
<li>Swap Unit：swap 文件</li>
<li>Timer Unit：定时器</li>
</ul>
<p>最常用的就是service unit</p>
<p>文件位置</p>
<p>Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的<br>配置文件存放在那个目录</p>
<p>启动一个服务：systemctl start firewalld.service<br>关闭一个服务：systemctl stop firewalld.service<br>重启一个服务：systemctl restart firewalld.service<br>显示一个服务的状态：systemctl status firewalld.service<br>在开机时启用一个服务：systemctl enable firewalld.service<br>在开机时禁用一个服务：systemctl disable firewalld.service<br>查看服务是否开机启动：systemctlis-enabled firewalld.service<br>查看已启动的服务列表：systemctllist-unit-files|grep enabled<br>查看启动失败的服务列表：systemctl–failed</p>
<p>启动服务（等同于service httpd start）<br>systemctl start httpd.service<br>停止服务（等同于service httpd stop）<br>systemctl stop httpd.service<br>重启服务（等同于service httpd restart）<br>systemctl restart httpd.service<br>查看服务是否运行（等同于service httpd status）<br>systemctl status httpd.service<br>开机自启动服务（等同于chkconfig httpd on）<br>systemctl enable httpd.service<br>开机时禁用服务（等同于chkconfig httpd on）<br>systemctl disable httpd.service<br>查看服务是否开机启动 （等同于chkconfig –list）</p>
<p><code>journalctl</code> 日志</p>
<p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">阮一峰</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS网络设置]]></title>
      <url>https://muxiaobai.github.io/2020/09/23/CentOS%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>查看硬件的编号</p>
<p><code>ip addr</code></p>
<p><img src="/2020/09/23/CentOS网络设置/ip.png" alt="获取硬件编号"></p>
<p>路径：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">#BOOTPROTO=dhcp</span><br><span class="line">IPADDR=192.168.160.74</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.160.254</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=3187afee-d4cd-4047-a498-e63f00570e53</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">HWADDR=00:0C:29:86:ef:a3</span><br></pre></td></tr></table></figure></p>
<p><img src="/2020/09/23/CentOS网络设置/ifcfg-ens33.png" alt="图解命令"></p>
<p>重启网络<br><code>systemctl restart network</code></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch集群化部署方案]]></title>
      <url>https://muxiaobai.github.io/2020/06/23/%E9%9B%86%E7%BE%A4%E4%B9%8BElasticsearch%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>应用服务IP为:192.168.1.2,ES_HOME为安装目录</p>
<h3 id="1-修改elasticsearch-yml配置："><a href="#1-修改elasticsearch-yml配置：" class="headerlink" title="1.修改elasticsearch.yml配置："></a>1.修改elasticsearch.yml配置：</h3><p>修改ES_HOME/config.elasticsearch.yml<br>network.host: 192.168.1.2 # 对外暴露的IP，本机IP<br>http.port: 9200 #设置对外服务的http端口号<br>transport.tcp.port: 9300 #设置节点之间交互的端口号<br>discovery.zen.ping.unicast.hosts: [“192.168.1.2:9300”,”192.168.1.2:9301”,”192.168.1.2:9302”]</p>
<p>#集群IP其它可以是主节点的IP加transport.tcp.port端口</p>
<p>修改ES_HOME/config/analysis-hanlp/hanlp.properties<br>root 为ES_HOME绝对路径</p>
<p>修改ES_HOME/config/analysis-hanlp/hanlp-remote.xml<br>remote_ext_dict和remote_ext_stopwords</p>
<entry key="remote_ext_dict"><a href="http://192.168.1.2:8080/dict" target="_blank" rel="noopener">http://192.168.1.2:8080/dict</a></entry><br><entry key="remote_ext_stopwords"><a href="http://192.168.1.2:8080/stop_words" target="_blank" rel="noopener">http://192.168.1.2:8080/stop_words</a></entry>

<p>可以添加hanlp插件或者ik插件 并配置远程更新词库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Logs(&quot;分词热更新到分词器中接口&quot;)</span><br><span class="line">@RequestMapping(&quot;/dict&quot;)</span><br><span class="line">public ResponseEntity dict(WebRequest request, HttpServletResponse response) &#123;</span><br><span class="line">    // 1. 应用相关的方式计算得到(application-specific calculation)</span><br><span class="line">    Date date = new Date();</span><br><span class="line">    if (request.checkNotModified(date)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; list= new ArrayList();</span><br><span class="line">    return ResponseEntity.ok().lastModified(date).body(String.join(&quot;\n&quot;,list));</span><br><span class="line">&#125;</span><br><span class="line">@Logs(&quot;停顿词热更新到分词器中接口&quot;)</span><br><span class="line">@RequestMapping(&quot;/stop_words&quot;)</span><br><span class="line">public ResponseEntity stopWords(WebRequest request, HttpServletResponse response) &#123;</span><br><span class="line">    // 1. 应用相关的方式计算得到(application-specific calculation)</span><br><span class="line">    Date date = new Date();</span><br><span class="line">    if (request.checkNotModified(date)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; list= new ArrayList();</span><br><span class="line">    return ResponseEntity.ok().lastModified(date).body(String.join(&quot;\n&quot;,list));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-修改下面三个配置"><a href="#2-修改下面三个配置" class="headerlink" title="2.    修改下面三个配置"></a>2.    修改下面三个配置</h3><h4 id="vim-etc-security-limits-conf"><a href="#vim-etc-security-limits-conf" class="headerlink" title="vim /etc/security/limits.conf"></a>vim /etc/security/limits.conf</h4><p>错误1：max file descriptors [65535] for elasticsearch process is too low, increase to at least [65536]<br>这个问题是无法创建本地文件,用户最大可创建文件数太小<br>解决：只需要修改创建文件的最大数目为65536就行了<br>root用户修改<br>vim /etc/security/limits.conf</p>
<pre><code>root soft nofile 65536
root hard nofile 65536
* soft nofile 65536
* hard nofile 65536
</code></pre><p>保存、退出、重新登录才可生效</p>
<p>参数解释：</p>
<ul>
<li>soft nproc:可打开的文件描述符的最大数(软限制)</li>
<li>hard nproc:可打开的文件描述符的最大数(硬限制)</li>
<li>soft nofile:单个用户可用的最大进程数量(软限制)</li>
<li>hard nofile:单个用户可用的最大进程数量(硬限制)<h4 id="vim-etc-sysctl-conf"><a href="#vim-etc-sysctl-conf" class="headerlink" title="vim /etc/sysctl.conf"></a>vim /etc/sysctl.conf</h4></li>
</ul>
<p>错误2：max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br>虚拟内存太小<br>切换到root用户修改</p>
<p>vim /etc/sysctl.conf</p>
<p>vm.max_map_count=262144<br>执行命令：</p>
<p> sysctl -p</p>
<h4 id="vim-ES-HOME-config-jvm-options"><a href="#vim-ES-HOME-config-jvm-options" class="headerlink" title="vim ES_HOME/config/jvm.options"></a>vim ES_HOME/config/jvm.options</h4><p>错误3：Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=’Cannot allocate memory’ (errno=12)<br>jvm需要分配的内存太大<br>vim ES_HOME/config/jvm.options</p>
<p>设置 –Xmx2g和-Xms2g</p>
<p>推荐单机版16g<br>单机不得超过32G，否则会引发指针膨胀，虽然堆内存变大了，但是所能指向的实际对象会减少。</p>
<h3 id="3-不能使用root启动，必须创建用户"><a href="#3-不能使用root启动，必须创建用户" class="headerlink" title="3.    不能使用root启动，必须创建用户"></a>3.    不能使用root启动，必须创建用户</h3><p>添加用户：useradd -m 用户名  然后设置密码  passwd 用户名<br>useradd -m admin<br>passwd admin<br>修改文件夹权限<br>chown -R  admin elasticsearch</p>
<p>启动可能出现的错误</p>
<h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4.    启动"></a>4.    启动</h3><p>ES_HOME/bin/elasticsearch -d</p>
<h3 id="5-无法形成集群"><a href="#5-无法形成集群" class="headerlink" title="5.    无法形成集群"></a>5.    无法形成集群</h3><p>删除elsticsearch文件夹下的data文件夹下的节点数据<br>调整 discovery.zen.minimum_master_nodes: 2 （N  master节点/2）+1</p>
<h3 id="6-设置密码X-pack"><a href="#6-设置密码X-pack" class="headerlink" title="6.    设置密码X-pack"></a>6.    设置密码X-pack</h3><p>1、    安全配置<br>默认情况下，拥有安全免费许可证时，Elasticsearch安全功能被禁用。 要启用安全功能，需要设置xpack.security.enabled。<br>在每个节点(包括node-1、node-2、node-3)的elasticsearch.yml配置文件中，新增：<br>xpack.security.enabled: true<br>2、    为节点间通信配置传输层安全性(TLS/SSL)<br>借助elasticsearch-certutil命令生成证书<br>cd ES_HOME/bin/<br>./elasticsearch-certutil ca -out /etc/elasticsearch/elastic-certificates.p12 -pass “”</p>
<p>Root用户<br>chown -R elasticsearch:elasticsearch   /etc/elasticsearch/elastic-certificates.p12<br>将证书拷贝到其他节点，放入 /etc/elasticsearch 目录下<br>cd /etc/elasticsearch/<br>scp elastic-certificates.p12  172.168.201.77:/etc/elasticsearch/<br>scp elastic-certificates.p12  172.168.201.78:/etc/elasticsearch/<br>3、    配置加密通信<br>启用安全功能后，必须使用TLS来确保节点之间的通信已加密。<br>在elasticsearch.yml中心新增配置如下：(其他节点相同配置)<br>xpack.security.transport.ssl.enabled: true<br>xpack.security.transport.ssl.verification_mode: certificate<br>xpack.security.transport.ssl.keystore.path: elastic-certificates.p12<br>xpack.security.transport.ssl.truststore.path: elastic-certificates.p12<br>重启elasticsearch服务<br>4、    设置集群密码<br>因为你上面已经做了SSL通信，所以只需要在第一台es(master)上设置用户名和密码就可以了，其他的2台es就会是相同的用户名密码<br>[elastic@es-node1 bin]$ cd /usr/share/elasticsearch/bin<br>[elastic@es-node1 bin]$ ./elasticsearch-setup-passwords -h  #查看命令帮助<br>Sets the passwords for reserved users</p>
<h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><p>auto - Uses randomly generated passwords          #主要命令选项，表示系统将使用随机字符串设置密码<br>interactive - Uses passwords entered by a user    #主要命令选项，表示使用用户输入的字符串作为密码</p>
<p>Non-option arguments:<br>command            </p>
<p>Option         Description      </p>
<hr>
<p>-h, –help     show help<br>-s, –silent   show minimal output<br>-v, –verbose  show verbose output<br>[elastic@es-node1 bin]$ ./elasticsearch-setup-passwords auto  #为了演示效果，这里我们使用系统自动创建<br>Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.<br>The passwords will be randomly generated and printed to the console.<br>Please confirm that you would like to continue [y/N]y     #选择y<br>Changed password for user kibana                   #kibana角色和密码<br>PASSWORD kibana = 4VXPRYIVibyAbjugK6Ok<br>Changed password for user logstash_system          #logstash角色和密码<br>PASSWORD logstash_system = 2m4uVdSzDzpt9OEmNin5<br>Changed password for user beats_system             #beast角色和密码<br>PASSWORD beats_system = O8VOzAaD3fO6bstCGDyQ<br>Changed password for user elastic                  #elasticsearch角色和密码<br>PASSWORD elastic = 1TWVMeN8tiBy917thUxq<br>核心：<br>auto - 随机生成密码。<br>interactive - 自定义不同用户的密码。<br>附：elasticsearch-setup-passwords此脚本只能运行一次，如要修改密码可以在kibana 中设置密码</p>
<p>验证是否正常<br><a href="http://192.168.1.2:9200" target="_blank" rel="noopener">http://192.168.1.2:9200</a></p>
<p>输入上一步生成的elastic和密码</p>
<p><a href="http://192.168.1.2:9200/_cluster/health" target="_blank" rel="noopener">http://192.168.1.2:9200/_cluster/health</a></p>
<p><a href="http://192.168.160.23:9100/?auth_user=elastic&amp;auth_password=123123" target="_blank" rel="noopener">http://192.168.160.23:9100/?auth_user=elastic&amp;auth_password=123123</a><br>curl -u elastic ‘<a href="http://192.168.1.2:9200/_xpack/security/_authenticate?pretty’" target="_blank" rel="noopener">http://192.168.1.2:9200/_xpack/security/_authenticate?pretty’</a> </p>
<h3 id="7-重置密码-非必须，如忘记密码"><a href="#7-重置密码-非必须，如忘记密码" class="headerlink" title="7.    重置密码(非必须，如忘记密码)"></a>7.    重置密码(非必须，如忘记密码)</h3><p>创建本地超级账户，然后使用api接口本地超级账户重置elastic账户的密码<br>(1) 停止elasticsearch服务<br>(2) 确保你的配置文件中支持本地账户认证支持，如果你使用的是xpack的默认配置则无需做特殊修改；如果你配置了其他认证方式则需要确保配置本地认证方式在ES_HOME/config/elasticsearch.yml中；<br>(3) 使用命令ES_HOME/bin/ elasticsearch-users 建一个基于本地问价认证的超级管理员<br>bin/elasticsearch-users useradd my_admin -p my_password -r superuser<br>(4) 启动elasticsearch服务<br>(5) 通过api重置elastic超级管理员的密码<br>curl -H “Content-Type:application/json” -XPOST -u my_admin ‘<a href="http://192.168.1.2:9200/_xpack/security/user/elastic/_password&#39;" target="_blank" rel="noopener">http://192.168.1.2:9200/_xpack/security/user/elastic/_password&#39;</a> -d ‘{ “password” : “123123” }’<br>(6) 校验下密码是否重置成功<br>curl -u elastic ‘<a href="http://192.168.1.2:9200/_xpack/security/_authenticate?pretty&#39;" target="_blank" rel="noopener">http://192.168.1.2:9200/_xpack/security/_authenticate?pretty&#39;</a><br>(7)删除my_admin账号<br>bin/elasticsearch-users userdel my_admin</p>
<h2 id="附：默认集群配置："><a href="#附：默认集群配置：" class="headerlink" title="附：默认集群配置："></a>附：默认集群配置：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true  #跨域连接相关设置</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;  #跨域连接相关设置  </span><br><span class="line">http.cors.allow-headers: Authorization,content-type</span><br><span class="line"></span><br><span class="line">cluster.name: elasticsearch #集群的名称，同一个集群该值必须设置成相同的</span><br><span class="line">node.name: master #该节点的名字</span><br><span class="line">node.master: true #该节点有机会成为master节点</span><br><span class="line">node.data: true #该节点可以存储数据</span><br><span class="line"></span><br><span class="line">#network.bind_host: 0.0.0.0 #设置绑定的IP地址，可以是IPV4或者IPV6</span><br><span class="line">#network.publish_host: 192.168.1.2 #设置其他节点与该节点交互的IP地址</span><br><span class="line">network.host: 192.168.1.2 #该参数用于同时设置bind_host和publish_host</span><br><span class="line"></span><br><span class="line">http.port: 9200 #设置对外服务的http端口号</span><br><span class="line">http.max_content_length: 100mb #设置http内容的最大大小</span><br><span class="line">http.enabled: true #是否开启http服务对外提供服务</span><br><span class="line">transport.tcp.port: 9300 #设置节点之间交互的端口号</span><br><span class="line">transport.tcp.compress: true #设置是否压缩tcp上交互传输的数据</span><br><span class="line"></span><br><span class="line">cluster.initial_master_nodes: [&quot;master&quot;]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2 #设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。官方推荐（N/2）+1</span><br><span class="line">discovery.zen.ping_timeout: 120s #设置集群中自动发现其他节点时ping连接的超时时间</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.1.2:9300&quot;,&quot;192.168.1.2:9500&quot;,&quot;192.168.1.2:9700&quot;] #设置集群中的Master节点的初始列表，可以通过这些节点来自动发现其他新加入集群的节点</span><br><span class="line">#discovery.zen.ping.unicast.hosts 使用network.host. transport.tcp.port</span><br><span class="line"></span><br><span class="line">#开启x-pack安全验证</span><br><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.license.self_generated.type: basic</span><br><span class="line">##如果是basic license的话需要加入下面这一行，不然的话restart elasticsearch之后会报错。</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: elastic-certificates.p12</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://github.com/muxiaobai/shell/tree/master/linux/elasticsearch" target="_blank" rel="noopener">github 集群脚本</a></p>
<p>自动化部署，包含单机多节点和多机多节点，其中，多机需要ssh自动登录。</p>
]]></content>
      
        <categories>
            
            <category> 集群 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 高级之JIT即时编译]]></title>
      <url>https://muxiaobai.github.io/2020/06/04/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8BJIT%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<p>以synchronized为例：<br><img src="/2020/06/04/Thinking-in-java-高级之JIT即时编译/execjava.png" alt="exec"></p>
<h3 id="什么是JIT？"><a href="#什么是JIT？" class="headerlink" title="什么是JIT？"></a>什么是JIT？</h3><p>JIT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”。JIT编译是动态编译的一种特例。JIT编译一词后来被泛华，时常与动态编译等价；但要注意广义与狭义的JIT编译所指的区别。JIT(即时编译)是用来提高java程序运行效率的，原本字节码由解释器需要经过解释再运行，现在有了JIT技术，将字节码编译成平台相关的原生机器码，并进行各个层次的优化，这些机器码会被缓存起来，以备下次使用，如果JIT对每条字节码都进行编译，缓存(缓存的指令是有限的)，会增加开销，因此JIT只对热点代码进行即时编译，如循环，高频度使用的方法，会将整个方法编译成本地机器码，然后直接运行机器码。</p>
<h3 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h3><p>pom.xml添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;LATEST&lt;/version&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">            &lt;execution&gt;</span><br><span class="line">                &lt;goals&gt;</span><br><span class="line">                    &lt;goal&gt;java&lt;/goal&gt;</span><br><span class="line">                &lt;/goals&gt;</span><br><span class="line">            &lt;/execution&gt;</span><br><span class="line">        &lt;/executions&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;mainClass&gt;org.adoptopenjdk.jitwatch.launch.LaunchUI&lt;/mainClass&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure></p>
<p>main运行添加参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-XX:+UnlockDiagnosticVMOptions</span><br><span class="line">-XX:+TraceClassLoading</span><br><span class="line">-XX:+LogCompilation</span><br><span class="line">-XX:LogFile=mylogfile.log</span><br><span class="line">-XX:+PrintAssembly</span><br><span class="line">-XX:+TraceClassLoading</span><br></pre></td></tr></table></figure></p>
<p>生成log文件<code>mvn exec:java</code>运行，添加log文件和源文件和编译文件</p>
<h3 id="编译器的时间开销和空间开销："><a href="#编译器的时间开销和空间开销：" class="headerlink" title="编译器的时间开销和空间开销："></a>编译器的时间开销和空间开销：</h3><p><img src="/2020/06/04/Thinking-in-java-高级之JIT即时编译/jit逻辑图.png" alt="jit逻辑图"><br>解释器的执行，抽象的看是这样的：<br>字节码 -&gt; [ 解释器 解释执行机器码 ] -&gt; 执行结果<br>而要JIT编译然后再执行的话，抽象的看则是：<br>字节码 -&gt; [ 编译器 编译 ] -&gt; 与机器相关的机器码-&gt; [ 执行 ] -&gt; 执行结果</p>
<p>说JIT比解释快，其实说的是“执行编译后的代码”比“解释器解释执行”要快，并不是说“编译”这个动作比“解释”这个动作快。</p>
<h3 id="不会被JIT编译"><a href="#不会被JIT编译" class="headerlink" title="不会被JIT编译"></a>不会被JIT编译</h3><p>JIT编译再怎么快，至少也比解释执行一次略慢一些，而要得到最后的执行结果还得再经过一个“执行编译后的代码”的过程。所以，对“只执行一次”的代码而言，解释执行其实总是比JIT编译执行要快。怎么算是“只执行一次的代码”呢？粗略说，下面两个条件同时满足时就是严格的“只执行一次”</p>
<p>1、只被调用一次，例如类的构造器（class initializer，()）<br>2、没有循环</p>
<p>对只执行一次的代码做JIT编译再执行，可以说是得不偿失。对只执行少量次数的代码，JIT编译带来的执行速度的提升也未必能抵消掉最初编译带来的开销。只有对频繁执行的代码，JIT编译才能保证有正面的收益。</p>
<p>对一般的Java方法而言，编译后代码的大小相对于字节码的大小，膨胀比达到10x是很正常的。同上面说的时间开销一样，这里的空间开销也是，只有对执行频繁的代码才值得编译，如果把所有代码都编译则会显著增加代码所占空间，导致“代码爆炸”。这也就解释了为什么有些JVM会选择不总是做JIT编译，而是选择用解释器+JIT编译器的混合执行引擎。<br>哪些程序代码会被编译为本地代码？如何编译为本地代码？</p>
<h3 id="会被JIT编译"><a href="#会被JIT编译" class="headerlink" title="会被JIT编译"></a>会被JIT编译</h3><p>程序中的代码只有是热点代码时，才会编译为本地代码，那么什么是热点代码呢？运行过程中会被即时编译器编译的“热点代码”有两类：</p>
<p>1、被多次调用的方法。<br>2、被多次执行的循环体。</p>
<p>两种情况，编译器都是以整个方法作为编译对象。 这种编译方法因为编译发生在方法执行过程之中，因此形象的称之为栈上替换（On Stack Replacement，OSR），即方法栈帧还在栈上，方法就被替换了。<br><img src="/2020/06/04/Thinking-in-java-高级之JIT即时编译/jit.png" alt="jit未编译和编译过得"></p>
<h3 id="呢到底多少次才会被JIT编译？"><a href="#呢到底多少次才会被JIT编译？" class="headerlink" title="呢到底多少次才会被JIT编译？"></a>呢到底多少次才会被JIT编译？</h3><p>即时编译JIT只在代码段执行足够次数才会进行优化，在执行过程中不断收集各种数据，作为优化的决策，所以在优化完成之前，例子中的User对象还是在堆上进行分配。</p>
<p>那么一段代码需要执行多少次才会触发JIT优化呢？通常这个值由-XX:CompileThreshold参数进行设置：</p>
<p>1、使用client编译器时，默认为1500；<br>2、使用server编译器时，默认为10000；</p>
<p>意味着如果方法调用次数或循环次数达到这个阈值就会触发标准编译，更改CompileThreshold标志的值，将使编译器提早（或延迟）编译。</p>
<p>除了标准编译，还有一个叫做OSR（On Stack Replacement）栈上替换的编译，如上述例子中的main方法，只执行一次，远远达不到阈值，但是方法体中执行了多次循环，OSR编译就是只编译该循环代码，然后将其替换，下次循环时就执行编译好的代码，不过触发OSR编译也需要一个阈值，可以通过以下公式得到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:CompileThreshold = 10000</span><br><span class="line">-XX:OnStackReplacePercentage = 140</span><br><span class="line">-XX:InterpreterProfilePercentage = 33</span><br></pre></td></tr></table></figure>
<p>OSR trigger = (CompileThreshold * (OnStackReplacePercentage - InterpreterProfilePercentage)) / 100 = 10700</p>
<p>其中trigger即为OSR编译的阈值。</p>
<ul>
<li><a href="https://blog.csdn.net/qq_28674045/article/details/51896129" target="_blank" rel="noopener">Java性能优化指南系列(三）：理解JIT编译器</a></li>
<li><a href="https://www.jianshu.com/p/20bd2e9b1f03" target="_blank" rel="noopener">浅谈HotSpot逃逸分析</a></li>
<li><a href="https://www.jianshu.com/p/eea12f3bf490" target="_blank" rel="noopener">Java JIT 知识</a></li>
<li><a href="https://www.cnblogs.com/dzhou/p/9549839.html" target="_blank" rel="noopener">什么是JIT</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[https是如何保护我们的隐私?]]></title>
      <url>https://muxiaobai.github.io/2020/05/26/https%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8A%A4%E6%88%91%E4%BB%AC%E7%9A%84%E9%9A%90%E7%A7%81/</url>
      <content type="html"><![CDATA[<p>怎么配置可以参考<a href="https://muxiaobai.github.io/2020/01/02/SpringBoot%E4%B9%8Bhttps%E8%AF%B7%E6%B1%82/">SpringBoot之https请求</a></p>
<h3 id="信息安全问题"><a href="#信息安全问题" class="headerlink" title="信息安全问题"></a>信息安全问题</h3><p>在信息安全性问题中，我们常常要做到三点才能保证信息的安全：</p>
<ul>
<li>信息的保密性</li>
<li>信息的完整性</li>
<li>身份识别</li>
</ul>
<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>非对称加密中的：公钥(public)和私钥(private)</p>
<ul>
<li>公钥(public key)是对外开放的，私钥(private key)是自己拥有的。</li>
<li>公钥(public key)加密的数据，只能用私钥(private key)解密。</li>
<li>私钥(private key)加密的数据，只能用公钥(public key)解密。</li>
</ul>
<h3 id="一个简单的过程"><a href="#一个简单的过程" class="headerlink" title="一个简单的过程"></a>一个简单的过程</h3><p>首先，客户端向服务器发出加密请求。</p>
<p>3)服务器用自己的私钥加密网页以后，连同本身的数字证书，这里的数字证书，是CA发给你的（默认你是知道CA颁布的证书的），一起发送给客户端。</p>
<p>4)客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</p>
<p>5)如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</p>
<p>6)如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告</p>
<p>自己生成的证书，浏览器没有维护证书机构，因此标记不安全，但从算法上来说是安全的，加密过的信息，只是不知道出处，数据来源。</p>
<p><img src="https是如何保护我们的隐私/unsafe.png" alt="自己生成的证书"><br>明确一点：各大浏览器和操作系统已经维护了所有权威证书机构的名称和公钥。所以客户端只需要知道是哪个机构(CA)颁布的证书，就可以从本地找到对应的机构公钥，解密出证书签名。</p>
<p><a href="https://www.jianshu.com/p/29e0ba31fb8d" target="_blank" rel="noopener">一文看懂HTTPS、证书机构（CA）、证书、数字签名、私钥、公钥</a><br><a href="https://www.sohu.com/a/320031789_371153" target="_blank" rel="noopener">是时候理解下HTTPS的原理及流程了</a><br><a href="https://blog.csdn.net/u011123724/article/details/80586173" target="_blank" rel="noopener">钥与私钥，HTTPS详解</a><br><a href="http://www.youdzone.com/signature.html" target="_blank" rel="noopener">对应的英文版本 上一篇</a></p>
]]></content>
      
        <categories>
            
            <category> deploy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 信息安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 高级之对象大小模型]]></title>
      <url>https://muxiaobai.github.io/2020/05/19/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>本文主要介绍对象的创建，对象一般有哪些内容，对象大小是怎么计算的，学习完，可以根据对象大小来优化jvm的设置。</p>
<p>下文默认64位机并开启指针压缩，-XX:+UseCompressedOops<br>压缩的所用：<br>1.在64位平台的HotSpot中使用32位指针，内存使用会多出1.5倍左右，使用较大指针在主内存和缓存之间移动数据，占用较大宽带，同时GC也会承受较大压力<br>2.为了减少64位平台下内存的消耗，启用指针压缩功能<br>3.在jvm中，32位地址表示4G个对象的指针，在4G-32G堆内存范围内，可以通过编码、解码方式进行优化，使得jvm可以支持更大的内存配置<br>4.堆内存小于4G时，不需要启用指针压缩，jvm会直接去除高32位地址，即使用低虚拟地址空间<br>5.堆内存大于32G时，压缩指针会失效，会强制使用64位(即8字节)来对java对象寻址，这就会出现1的问题，所以堆内存不要大于32G为好</p>
<p>以下内容会被压缩：<br>1.对象的全局静态变量(即类属性)<br>2.对象头信息:64位平台下，原生对象头大小为16字节，压缩后为12字节<br>3.对象的引用类型:64位平台下，引用类型本身大小为8字节，压缩后为4字节<br>4.对象数组类型:64位平台下，数组类型本身大小为24字节，压缩后16字节</p>
<p><img src="/2020/05/19/Thinking-in-java-高级之对象内存模型/jvm内存.png" alt="java 对象大小"><br>jvm内存模型图，熟悉吧，接着往下看。</p>
<p><img src="/2020/05/19/Thinking-in-java-高级之对象内存模型/oop指针.png" alt="java 对象大小"><br>先看图这个熟悉jvm的对这个指针指向都知道，基本数据类型在栈帧中，对象，复杂类型，栈帧中只保存对对象的应用，而真实的对象是存在堆中的，我们本文是要揭示堆中的这个对象到底有什么内容，包含哪些数据，记录的什么信息。</p>
<h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><p>首先堆中的都是复杂对象这个可以理解吧，基本对象都在栈帧中了，就是int，long，char这些，注意String 不是 Integer不是，基本类型，这种是包装类型，String<br>内部包含一个char[] 和一个hash属性。<br><img src="/2020/05/19/Thinking-in-java-高级之对象内存模型/java对象大小.png" alt="java 对象大小"><br>对象包括 markword oop，（数组长度）成为对象头，这里有可能有一个内部对齐，然后是对象的属性，最后还有一个对齐。</p>
<p>注意：对齐，8位对齐，一个字节。<br><img src="/2020/05/19/Thinking-in-java-高级之对象内存模型/java对象模型.png" alt="java 对象大小"></p>
<p>大小应该怎么计算呢？分为两种情况，一种是Object ，一种是Array，Array中对象头包含了一个4位的数组长度。</p>
<h3 id="markword"><a href="#markword" class="headerlink" title="_markword"></a>_markword</h3><p><img src="/2020/05/19/Thinking-in-java-高级之对象内存模型/markword结构图.jpg" alt="java 对象大小"></p>
<p>这是markword的详细信息，也就是堆中的对象头包含的信息。<br>这里的正常对象，age  4位  2^4-1 =15,Eden区，从form到to同一个对象，最多标记只能移动15次，参数是<br>MaxTenuringThreshold 默认也是15，在调试gc的时候可以把年龄打印出来-XX:+PrintTenuringDistribution.</p>
<p>markword<br>第一部分markword,用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“MarkWord”。</p>
<h3 id="KlassOop"><a href="#KlassOop" class="headerlink" title="KlassOop"></a>KlassOop</h3><p>klass 64位机本有8字节，压缩之后4字节<br>对象头的另外一部分是klass类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例. 32位4字节，64位开启指针压缩或最大堆内存&lt;32g时 4字节，否则8字节</p>
<p>指针，治理是指向方法区现在叫metaspace，我们可以想象一下反射的时候我们是不是要获取Class对象，这个Oop可以想象就是为了获取Class对象。</p>
<h3 id="数组长度-Array对象"><a href="#数组长度-Array对象" class="headerlink" title="数组长度(Array对象)"></a>数组长度(Array对象)</h3><p>数组长度（只有数组对象有） 4字节<br>如果对象是一个数组, 那在对象头中还必须有一块数据用于记录数组长度.int最大值2g，2^31，java数组（包含字符串）最长2g</p>
<h3 id="实际数据大小"><a href="#实际数据大小" class="headerlink" title="实际数据大小"></a>实际数据大小</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>基本类型大小：单位字节</p>
<ul>
<li>1 byte boolean</li>
<li>2 short char (ref引用，复杂对象指向，)</li>
<li>4 int folat</li>
<li>8 long double</li>
</ul>
<h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>String =char[] + hash<br>Object = ref 4<br>上一个对象添加引用，本对象计算</p>
<h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>包含数组类型属性的对象，还要加上一个数组长度，<br>一个数组需要添加一个长度</p>
<ul>
<li>int[] 基本类型 添加数组长度4 加上基本类型大小</li>
<li>Object[] 对象数组  添加数组长度 + ref  另外Object对象要占用16个位</li>
</ul>
<p><a href="https://github.com/muxiaobai/java-demo/blob/master/test-java-demo/src/main/java/io/github/muxiaobai/java/objectsize/DoubleArraySize.java" target="_blank" rel="noopener">DoubleArraySize</a></p>
<p>下面来实战一下吧。</p>
<h2 id="JOL工具"><a href="#JOL工具" class="headerlink" title="JOL工具"></a>JOL工具</h2><p>pom.xml 引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(ClassLayout.parseClass(Object.class).toPrintable());</span><br><span class="line">print(ClassLayout.parseInstance(new Object()).toPrintable());</span><br><span class="line">print(ClassLayout.parseInstance(Object.class).toPrintable());//这个实际上是class对象</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line">java.lang.Object object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0    12        (object header)                           N/A</span><br><span class="line">     12     4        (loss due to the next object alignment)</span><br><span class="line">Instance size: 16 bytes</span><br><span class="line">Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line">java.lang.Object object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)</span><br><span class="line">     12     4        (loss due to the next object alignment)</span><br><span class="line">Instance size: 16 bytes</span><br><span class="line">Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line">java.lang.Class object internals:</span><br><span class="line"> OFFSET  SIZE                                              TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4                                                   (object header)                           01 e8 bf 80 (00000001 11101000 10111111 10000000) (-2134906879)</span><br><span class="line">      4     4                                                   (object header)                           1e 00 00 00 (00011110 00000000 00000000 00000000) (30)</span><br><span class="line">      8     4                                                   (object header)                           df 03 00 f8 (11011111 00000011 00000000 11111000) (-134216737)</span><br><span class="line">     12     4                     java.lang.reflect.Constructor Class.cachedConstructor                   null</span><br><span class="line">     16     4                                   java.lang.Class Class.newInstanceCallerCache              null</span><br><span class="line">     20     4                                  java.lang.String Class.name                                (object)</span><br><span class="line">     24     4                                                   (alignment/padding gap)                  </span><br><span class="line">     28     4                       java.lang.ref.SoftReference Class.reflectionData                      (object)</span><br><span class="line">     32     4   sun.reflect.generics.repository.ClassRepository Class.genericInfo                         null</span><br><span class="line">     36     4                                java.lang.Object[] Class.enumConstants                       null</span><br><span class="line">     40     4                                     java.util.Map Class.enumConstantDirectory               null</span><br><span class="line">     44     4                    java.lang.Class.AnnotationData Class.annotationData                      (object)</span><br><span class="line">     48     4             sun.reflect.annotation.AnnotationType Class.annotationType                      null</span><br><span class="line">     52     4                java.lang.ClassValue.ClassValueMap Class.classValueMap                       null</span><br><span class="line">     56    32                                                   (alignment/padding gap)                  </span><br><span class="line">     88     4                                               int Class.classRedefinedCount                 0</span><br><span class="line">     92   404                                                   (loss due to the next object alignment)</span><br><span class="line">Instance size: 496 bytes</span><br><span class="line">Space losses: 36 bytes internal + 404 bytes external = 440 bytes total</span><br></pre></td></tr></table></figure>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><h3 id="本身大小"><a href="#本身大小" class="headerlink" title="本身大小"></a>本身大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package io.github.muxiaobai.java.objectsize;</span><br><span class="line"></span><br><span class="line">import org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line">public class JOLPeople &#123;</span><br><span class="line">    int age = 20;</span><br><span class="line">    String name = &quot;Xiaoming&quot;;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        print(ClassLayout.parseInstance(new JOLPeople()).toPrintable());</span><br><span class="line"></span><br><span class="line">        print(ClassLayout.parseInstance(new String(&quot;Xiaoming&quot;)).toPrintable());</span><br><span class="line">        char[] chars = new char[8];</span><br><span class="line">        chars[0] = &apos;X&apos;;</span><br><span class="line">        chars[1] = &apos;i&apos;;</span><br><span class="line">        chars[2] = &apos;a&apos;;</span><br><span class="line">        chars[3] = &apos;o&apos;;</span><br><span class="line">        chars[4] = &apos;m&apos;;</span><br><span class="line">        chars[5] = &apos;i&apos;;</span><br><span class="line">        chars[6] = &apos;n&apos;;</span><br><span class="line">        chars[7] = &apos;g&apos;;</span><br><span class="line"></span><br><span class="line">        print(ClassLayout.parseInstance(chars).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void print(String message) &#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        System.out.println(&quot;-------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>
<h2 id="JOLPeople-本身"><a href="#JOLPeople-本身" class="headerlink" title="JOLPeople 本身"></a>JOLPeople 本身</h2><p> io.github.muxiaobai.java.objectsize.JOLPeople object internals:<br> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE<br> 0     4                    (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)<br> 4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br> 8     4                    (object header)                           af f3 00 f8 (10101111 11110011 00000000 11111000) (-134155345)<br> 12     4                int JOLPeople.age                             20<br> 16     4   java.lang.String JOLPeople.name                            (object)<br> 20     4                    (loss due to the next object alignment)<br> Instance size: 24 bytes<br> Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</p>
<hr>
<p> _mark +oop  + 4(age的value)+ 4(name引用)<br> 8     + 4   +  4            +4          + 4(lose) =  24</p>
<h3 id="ShallowSize"><a href="#ShallowSize" class="headerlink" title="ShallowSize"></a>ShallowSize</h3><p> String 是一个char[] 数组 和hash 两个属性</p>
<p> The value is used for character storage.<br>private final char value[];</p>
<p> Cache the hash code for the string<br>private int hash; // Default to 0</p>
<p>String</p>
<hr>
<p> java.lang.String object internals:<br> OFFSET  SIZE     TYPE DESCRIPTION                               VALUE<br> 0     4          (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)<br> 4     4          (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br> 8     4          (object header)                           da 02 00 f8 (11011010 00000010 00000000 11111000) (-134216998)<br> 12     4   char[] String.value                              []<br> 16     4      int String.hash                               0<br> 20     4          (loss due to the next object alignment)<br> Instance size: 24 bytes<br> Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</p>
<hr>
<p> _mark +oop  + 引用(char[])+ hash<br> 8     + 4   +  4            4 + lose =  24</p>
<p> char[]数组 大小</p>
<hr>
<p> [C object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br> 0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)<br> 4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br> 8     4        (object header)                           41 00 00 f8 (01000001 00000000 00000000 11111000) (-134217663)<br> 12     4        (object header)                           08 00 00 00 (00001000 00000000 00000000 00000000) (8)<br> 16    16   char [C.<elements>                             N/A<br> Instance size: 32 bytes<br> Space losses: 0 bytes internal + 0 bytes external = 0 bytes total</elements></p>
<hr>
<p> _mark +oop + 数组长度 + 实际数据<br> 8     + 4   +  4     + 8(arrLength) * 2(char) =  32</p>
<p> 我们可以手工计算一下JOLPeople obj = new JOLPeople()的大小：<br> JOLPeople的Shallow size = 8(_mark) + 4(oop指针) +  4(age的value)+ 4(name引用) + 4(lose) = 24<br> String对象的长度 = 8(_mark) + 4(oop指针) + 4(char[8]引用) +4(hash) +4(lose) =  24<br> char[]对象长度 =  8(_mark) + 4(oop指针) +  4(数组长度占4个字节) + 8*2(value) = 32<br> 所以JOLPeople实际占用的空间 = 24 + 24 + 32 = 80</p>
<p>验证：参考:<a href="https://github.com/muxiaobai/java-demo/blob/master/test-java-demo/src/main/java/io/github/muxiaobai/java/objectsize/ShallowSize.java" target="_blank" rel="noopener">github ShallowSize.java</a><br><a href="https://blog.csdn.net/scdn_cp/article/details/86491792" target="_blank" rel="noopener">Java对象结构与锁实现原理及MarkWord详解</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 高级之synchronized]]></title>
      <url>https://muxiaobai.github.io/2020/05/07/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8Bsynchronized/</url>
      <content type="html"><![CDATA[<p>本文主要</p>
<h3 id="先从内核态和用户态说起"><a href="#先从内核态和用户态说起" class="headerlink" title="先从内核态和用户态说起"></a>先从内核态和用户态说起</h3><p>0x80 软中断 频繁切换会耗时，切换到内核态，调用内核方法。</p>
<h3 id="从DCL到锁升级"><a href="#从DCL到锁升级" class="headerlink" title="从DCL到锁升级"></a>从DCL到锁升级</h3><p>Double Check Lock 单例<a href="https://github.com/muxiaobai/java-demo/blob/master/test-java-demo/src/main/java/io/github/muxiaobai/java/java/threadTest/Singleton.java" target="_blank" rel="noopener">参考Singleton.java</a></p>
<p>普通 偏向锁 轻量级锁 重量级锁</p>
<p>升级过程</p>
<h3 id="需要-markword信息-标记有哪一种锁"><a href="#需要-markword信息-标记有哪一种锁" class="headerlink" title="需要_markword信息 标记有哪一种锁"></a>需要_markword信息 标记有哪一种锁</h3><p><img src="/2020/05/07/Thinking-in-java-高级之synchronized/锁偏向.png" alt="java 对象大小"></p>
<h3 id="java字节码指令"><a href="#java字节码指令" class="headerlink" title="java字节码指令"></a>java字节码指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> private static sync classSync = new sync();</span><br><span class="line">public void doSth()&#123;</span><br><span class="line">       synchronized (sync.class)&#123;</span><br><span class="line">           System.out.println(&quot;test Synchronized 锁的是 class对象 因此this不会标记&quot; );</span><br><span class="line">           System.out.println(ClassLayout.parseInstance(this).toPrintable());</span><br><span class="line">       &#125;</span><br><span class="line">       synchronized (classSync)&#123;</span><br><span class="line">           System.out.println(&quot;test Synchronized 锁的是 private classSync对象 因此this会标记&quot; );</span><br><span class="line">           System.out.println(ClassLayout.parseInstance(this).toPrintable());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>sync锁对象，一个是锁class对象，一个是锁object对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> 0 ldc #2 &lt;io/github/muxiaobai/java/java/threadTest/base/sync&gt;</span><br><span class="line"> 2 dup</span><br><span class="line"> 3 astore_1</span><br><span class="line"> 4 monitorenter   sync进入</span><br><span class="line"> 5 getstatic #6 &lt;java/lang/System.out&gt;</span><br><span class="line"> 8 ldc #12 &lt;test Synchronized 锁的是 class对象 因此this不会标记&gt;</span><br><span class="line">10 invokevirtual #8 &lt;java/io/PrintStream.println&gt;</span><br><span class="line">13 getstatic #6 &lt;java/lang/System.out&gt;</span><br><span class="line">16 aload_0</span><br><span class="line">17 invokestatic #10 &lt;org/openjdk/jol/info/ClassLayout.parseInstance&gt;</span><br><span class="line">20 invokevirtual #11 &lt;org/openjdk/jol/info/ClassLayout.toPrintable&gt;</span><br><span class="line">23 invokevirtual #8 &lt;java/io/PrintStream.println&gt;</span><br><span class="line">26 aload_1</span><br><span class="line">27 monitorexit   sync退出</span><br><span class="line">28 goto 36 (+8)  异常退出 跳到36行，aload_0 继续往下执行，下一个sync</span><br><span class="line">31 astore_2</span><br><span class="line">32 aload_1</span><br><span class="line">33 monitorexit    sync退出</span><br><span class="line">34 aload_2</span><br><span class="line">35 athrow</span><br><span class="line">36 aload_0</span><br><span class="line">37 getfield #4 &lt;io/github/muxiaobai/java/java/threadTest/base/sync.classSync&gt;</span><br><span class="line">40 dup</span><br><span class="line">41 astore_1</span><br><span class="line">42 monitorenter  sync进入</span><br><span class="line">43 getstatic #6 &lt;java/lang/System.out&gt;</span><br><span class="line">46 ldc #13 &lt;test Synchronized 锁的是 private classSync对象 因此this会标记&gt;</span><br><span class="line">48 invokevirtual #8 &lt;java/io/PrintStream.println&gt;</span><br><span class="line">51 getstatic #6 &lt;java/lang/System.out&gt;</span><br><span class="line">54 aload_0</span><br><span class="line">55 invokestatic #10 &lt;org/openjdk/jol/info/ClassLayout.parseInstance&gt;</span><br><span class="line">58 invokevirtual #11 &lt;org/openjdk/jol/info/ClassLayout.toPrintable&gt;</span><br><span class="line">61 invokevirtual #8 &lt;java/io/PrintStream.println&gt;</span><br><span class="line">64 aload_1</span><br><span class="line">65 monitorexit   sync退出</span><br><span class="line">66 goto 74 (+8)  异常直接跳到 74行return</span><br><span class="line">69 astore_3</span><br><span class="line">70 aload_1</span><br><span class="line">71 monitorexit  sync退出</span><br><span class="line">72 aload_3</span><br><span class="line">73 athrow</span><br><span class="line">74 return</span><br></pre></td></tr></table></figure></p>
<p>注意 monitorenter 和monitorexit  ，每一个sync关键字，对应 一个enter和两个exit，正常退出和异常退出。</p>
<h3 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h3><p>即时编译JIT只在代码段执行足够次数才会进行优化，在执行过程中不断收集各种数据，作为优化的决策; 什么代码会被即时编译 JIT，？</p>
<p><code>lock cmpxchg</code></p>
<p>方法上的锁调用方法的对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void doSth1()&#123;</span><br><span class="line">       System.out.println(&quot;test Synchronized method，sync调用这个方法，方法上的，会锁this对象 ，也就是main方法中 new的sync&quot; );</span><br><span class="line">       System.out.println(ClassLayout.parseInstance(this).toPrintable());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>// access flags 0x21<br>public synchronized doSth1()V<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 0 getstatic #6 &lt;java/lang/System.out&gt;</span><br><span class="line"> 3 ldc #14 &lt;test Synchronized method，sync调用这个方法，方法上的，会锁this对象 ，也就是main方法中 new的sync&gt;</span><br><span class="line"> 5 invokevirtual #8 &lt;java/io/PrintStream.println&gt;</span><br><span class="line"> 8 getstatic #6 &lt;java/lang/System.out&gt;</span><br><span class="line">11 aload_0</span><br><span class="line">12 invokestatic #10 &lt;org/openjdk/jol/info/ClassLayout.parseInstance&gt;</span><br><span class="line">15 invokevirtual #11 &lt;org/openjdk/jol/info/ClassLayout.toPrintable&gt;</span><br><span class="line">18 invokevirtual #8 &lt;java/io/PrintStream.println&gt;</span><br><span class="line">21 return</span><br></pre></td></tr></table></figure></p>
<p>### </p>
<ul>
<li><a href="https://juejin.im/post/5d5374076fb9a06ac76da894#heading-18" target="_blank" rel="noopener">Synchronized解析——如果你愿意一层一层剥开我的心</a></li>
<li><a href="https://www.cnblogs.com/charlesblc/p/5994162.html" target="_blank" rel="noopener">【转载】Java中的锁机制 synchronized &amp; 偏向锁 &amp; 轻量级锁 &amp; 重量级锁 &amp; 各自优缺点及场景 &amp; AtomicReference</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[java线上代码监控-linux分析线上问题]]></title>
      <url>https://muxiaobai.github.io/2020/04/29/java%E7%BA%BF%E4%B8%8A%E4%BB%A3%E7%A0%81%E7%9B%91%E6%8E%A7-linux%E5%88%86%E6%9E%90%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>jps(Java Virtual Machine Process Status Tool)<br>jstack(查看线程)、jmap(查看内存)和jstat(性能分析)</p>
<h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p>jps 找到对应的进程ID</p>
<p><code>jps -m -l</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-q 不输出类名、Jar名和传入main方法的参数</span><br><span class="line">-m 输出传入main方法的参数</span><br><span class="line">-l 输出main类或Jar的全限名</span><br><span class="line">-v 输出传入JVM的参数</span><br></pre></td></tr></table></figure>
<p><code>ll /proc/[pid]/ | grep exe</code></p>
<p>可以查到时哪一个后台进程在执行</p>
<h2 id="未重启的话，分析现在的时候"><a href="#未重启的话，分析现在的时候" class="headerlink" title="未重启的话，分析现在的时候:"></a>未重启的话，分析现在的时候:</h2><h3 id="jstack-线程问题"><a href="#jstack-线程问题" class="headerlink" title="jstack 线程问题"></a>jstack 线程问题</h3><p>ps -mp [pid] -o THREAD,tid,time |sort -rn 打印CPU最高的线程<br>top -Hp [pid] </p>
<p>printf “%x\n” 22338 把线程ID转换成16进制<br>5742</p>
<p>jstack [pid] | grep 5742 -A 30 打印堆栈信息</p>
<p>-l long listings，会打印出额外的锁信息，在发生死锁时可以用jstack -l pid来观察锁持有情况<br>-m mixed mode，不仅会输出Java堆栈信息，还会输出C/C++堆栈信息（比如Native方法）</p>
<p>-F  to force a thread dump. Use when jstack <pid> does not respond (process is hung)<br>-m  to print both java and native frames (mixed mode)<br>-l  long listing. Prints additional information about locks<br>-h or -help to print this help message</pid></p>
<p><a href="https://www.cnblogs.com/zhengyun_ustc/archive/2013/01/06/dumpanalysis.html" target="_blank" rel="noopener">jstack Dump 日志文件中的线程状态</a></p>
<p>线程死锁：<br>jstack –l pid | grep -i –E ‘BLOCKED | deadlock’</p>
<h3 id="jmap-堆问题"><a href="#jmap-堆问题" class="headerlink" title="jmap 堆问题"></a>jmap 堆问题</h3><p>jmap -heap [pid] 先查看堆栈</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./jmap -heap 22327</span><br><span class="line">Attaching to process ID 22327, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.201-b09</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 0</span><br><span class="line">   MaxHeapFreeRatio         = 100</span><br><span class="line">   MaxHeapSize              = 2147483648 (2048.0MB)</span><br><span class="line">   NewSize                  = 89128960 (85.0MB)</span><br><span class="line">   MaxNewSize               = 715653120 (682.5MB)</span><br><span class="line">   OldSize                  = 179306496 (171.0MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = 671612928 (640.5MB)</span><br><span class="line">   used     = 349908376 (333.6986312866211MB)</span><br><span class="line">   free     = 321704552 (306.8013687133789MB)</span><br><span class="line">   52.0997082414709% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = 12582912 (12.0MB)</span><br><span class="line">   used     = 12566640 (11.984481811523438MB)</span><br><span class="line">   free     = 16272 (0.0155181884765625MB)</span><br><span class="line">   99.87068176269531% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = 22020096 (21.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 22020096 (21.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation</span><br><span class="line">   capacity = 236978176 (226.0MB)</span><br><span class="line">   used     = 45630600 (43.51673126220703MB)</span><br><span class="line">   free     = 191347576 (182.48326873779297MB)</span><br><span class="line">   19.255190823985412% used</span><br><span class="line"></span><br><span class="line">38073 interned Strings occupying 3725472 bytes.</span><br></pre></td></tr></table></figure>
<p>查看对象</p>
<p>用jmap -histo[:live] pid查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象，如下：</p>
<p>数量和容量</p>
<p>实例数量前十的类：jmap -histo pid | sort -n -r -k 2 | head -10</p>
<p>实例容量前十的类：jmap -histo pid | sort -n -r -k 3 | head -10</p>
<h4 id="生成hprof文件（hprof（Heap-CPU-Profiling-Tool））"><a href="#生成hprof文件（hprof（Heap-CPU-Profiling-Tool））" class="headerlink" title="生成hprof文件（hprof（Heap/CPU Profiling Tool））"></a>生成hprof文件（hprof（Heap/CPU Profiling Tool））</h4><p><code>./jmap -dump:live,format=b,file=dump.dump [pid]</code></p>
<p>可以用：<code>./jhat -port 9998 dump.dump</code>  <code>./jhat -J-Xmx512m -port 9998 dump.dump</code><br>jhat -port 7401 -J -Xmx4G dump.dump</p>
<p>或者dump文件修改为dump.hprof,可以加到jprofiler</p>
<p>作用：主要分析内部当时的对象。</p>
<h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><p>jstat（JVM统计监测工具）</p>
<p>每隔250ms采集4次<code>./jstat -gc 30359 250 4</code><br>S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br>区容量（Capacity）和使用量（Used）<br>S0 S1 Survivor E O Eden Old M MetaspaceSize CCS CompressedClassSpaceSize  YG young gc FG  full gc T time FCT full gc time</p>
<p><code>./jstat -options</code> 参数 -gc  </p>
<p>250ms调用4次</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./jstat -gc 22327  250 4</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU            MC     MU     CCSC   CCSU      YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">12288.0 21504.0 12272.1  0.0   655872.0 341707.4  231424.0   44561.1   87384.0 83940.7 11352.0 10729.1     18    0.238   3      0.254    0.492</span><br><span class="line">12288.0 21504.0 12272.1  0.0   655872.0 341707.4  231424.0   44561.1   87384.0 83940.7 11352.0 10729.1     18    0.238   3      0.254    0.492</span><br><span class="line">12288.0 21504.0 12272.1  0.0   655872.0 341707.4  231424.0   44561.1   87384.0 83940.7 11352.0 10729.1     18    0.238   3      0.254    0.492</span><br><span class="line">12288.0 21504.0 12272.1  0.0   655872.0 341707.4  231424.0   44561.1   87384.0 83940.7 11352.0 10729.1     18    0.238   3      0.254    0.492</span><br></pre></td></tr></table></figure>
<h2 id="准备重启复现的话："><a href="#准备重启复现的话：" class="headerlink" title="准备重启复现的话："></a>准备重启复现的话：</h2><p>第一步 加参数 ：</p>
<p>gc日志 配置Catalina.bat JAVA_OPTS</p>
<p><code>-Xloggc:./logs/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=32  -XX:GCLogFileSize=64m -XX:+HeapDumpOnOutOfMemoryError</code></p>
<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247495546&amp;idx=1&amp;sn=f435f56c3b92802ef649cd14bb60711b&amp;chksm=e92ad275de5d5b63b9fc1e48463044ea1b234a4f28d0ad8d7964c42516f1cf7cae47c60162dc&amp;scene=0&amp;xtrack=1&amp;exportkey=AeNCSm6QS4EwNcRCTNfXDUs%3D&amp;pass_ticket=sHf4d8XsExleK1yRet7Gq5oJd6I%2FDOYRgopyFK8gH%2B81%2FhlGHzeiSrSlgR9oXDlk#rd" target="_blank" rel="noopener">步骤:线上问题定位，重启大法好！线上常见问题排查手册</a></li>
<li><a href="https://blog.csdn.net/muyimo/article/details/52837323?utm_source=distribute.pc_relevant.none-task-blog-baidujs-8" target="_blank" rel="noopener">VM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解</a></li>
</ul>
<p>一  线上常见问题定位</p>
<p>常见问题 1：CPU 利用率高</p>
<p>CPU 使用率是衡量系统繁忙程度的重要指标，一般情况下单纯的 CPU 高并没有问题，它代表系统正在不断的处理我们的任务，但是如果 CPU 过高，导致任务处理不过来，从而引起 load 高，这个是非常危险需要关注的。 CPU 使用率的安全值没有一个标准值，取决于你的系统是计算密集型还是 IO 密集型，一般计算密集型应用 CPU 使用率偏高 load 偏低，IO 密集型相反。</p>
<p>问题原因及定位：</p>
<p>1  频繁 FullGC/YongGC</p>
<p>2  代码消耗，如死循环，md5 等内存态操作</p>
<p>常见问题 2：load 高</p>
<p>load 指单位时间内活跃进程数，包含运行态（runnable 和 running）和不可中断态（ IO、内核态锁）。关键字是运行态和不可中断态，运行态可以联想到 Java 线程的 6 种状态，如下，线程 new 之后处于 NEW 状态，执行 start 进入 runnable 等待 CPU 调度，因此如果 CPU 很忙会导致 runnable 进程数增加；不可中断态主要包含网络 IO、磁盘 IO 以及内核态的锁，如 synchronized 等。</p>
<p>问题原因及定位：</p>
<p>1  CPU 利用率高，可运行态进程数多</p>
<p>2  iowait，等待 IO</p>
<p>3  等待内核态锁，如 synchronized</p>
<p>常见问题 3：持续 FullGC</p>
<p>问题原因及定位：</p>
<p>1  prommotion failed</p>
<p>从S区晋升的对象在老年代也放不下导致 FullGC（fgc 回收无效则抛 OOM）。</p>
<p>1）survivor 区太小，对象过早进入老年代。</p>
<p>2）大对象分配，没有足够的内存。</p>
<p>日志查找关键字 “allocating large”；</p>
<p>2  concurrent mode failed</p>
<p>在 CMS GC 过程中业务线程将对象放入老年代（并发收集的特点）内存不足。详细原因：</p>
<p>1）fgc 触发比例过大，导致老年代占用过多，并发收集时用户线程持续产生对象导致达到触发 FGC 比例。</p>
<p>jinfo  查看 CMSInitiatingOccupancyFraction 参数，一般 70~80 即可</p>
<p>2）老年代存在内存碎片。</p>
<p>jinfo  查看 UseCMSCompactAtFullCollection 参数，在 FullGC 后整理内存</p>
<p>常见问题 4：线程池满</p>
<p>Java 线程池以有界队列的线程池为例，当新任务提交时，如果运行的线程少于 corePoolSize，则创建新线程来处理请求。如果正在运行的线程数等于 corePoolSize 时，则新任务被添加到队列中，直到队列满。当队列满了后，会继续开辟新线程来处理任务，但不超过 maximumPoolSize。当任务队列满了并且已开辟了最大线程数，此时又来了新任务，ThreadPoolExecutor 会拒绝服务。</p>
<p>问题原因及定位：</p>
<p>2  数据库慢 sql 或者数据库死锁</p>
<p>日志关键字 “Deadlock found when trying to get lock”</p>
<p>Jstack 或 zprofiler 查看阻塞态线程</p>
<p>3  Java 代码死锁</p>
<p>jstack –l pid | grep -i -E ‘BLOCKED | deadlock’</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot之https请求]]></title>
      <url>https://muxiaobai.github.io/2020/01/02/SpringBoot%E4%B9%8Bhttps%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias spring -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -keystore E:/spring.keystore -storepass 123456</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-genkey      在用户主目录中创建一个默认文件&quot;.keystore&quot;,还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书</span><br><span class="line">(在没有指定生成位置的情况下,keystore会存在用户系统默认目录，如：对于window xp系统，会生成在系统的C:/Documents and Settings/UserName/文件名为“.keystore”)</span><br><span class="line">-alias       产生别名</span><br><span class="line">-keystore    指定密钥库的名称(产生的各类信息将不在.keystore文件中)</span><br><span class="line">-keyalg      指定密钥的算法 (如 RSA  DSA（如果不指定默认采用DSA）)</span><br><span class="line">-validity    指定创建的证书有效期多少天</span><br><span class="line">-keysize     指定密钥长度</span><br><span class="line">-storepass   指定密钥库的密码(获取keystore信息所需的密码)</span><br><span class="line">-keypass     指定别名条目的密码(私钥的密码)</span><br><span class="line">-dname       指定证书拥有者信息 例如：  &quot;CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码&quot;</span><br><span class="line">-list        显示密钥库中的证书信息      keytool -list -v -keystore 指定keystore -storepass 密码</span><br><span class="line">-v           显示密钥库中的证书详细信息</span><br><span class="line">-export      将别名指定的证书导出到文件  keytool -export -alias 需要导出的别名 -keystore 指定keystore -file 指定导出的证书位置及证书名称 -storepass 密码</span><br><span class="line">-file        参数指定导出到文件的文件名</span><br><span class="line">-delete      删除密钥库中某条目          keytool -delete -alias 指定需删除的别  -keystore 指定keystore  -storepass 密码</span><br><span class="line">-printcert   查看导出的证书信息          keytool -printcert -file yushan.crt</span><br><span class="line">-keypasswd   修改密钥库中指定条目口令    keytool -keypasswd -alias 需修改的别名 -keypass 旧密码 -new  新密码  -storepass keystore密码  -keystore sage</span><br><span class="line">-storepasswd 修改keystore口令      keytool -storepasswd -keystore e:/yushan.keystore(需修改口令的keystore) -storepass 123456(原始密码) -new yushan(新密码)</span><br><span class="line">-import      将已签名数字证书导入密钥库  keytool -import -alias 指定导入条目的别名 -keystore 指定keystore -file 需导入的证书</span><br></pre></td></tr></table></figure>
<p>默认参数：</p>
<p>下面是各选项的缺省值。<br>-alias “mykey”</p>
<p>-keyalg “DSA”</p>
<p>-keysize 1024</p>
<p>-validity 90</p>
<p>-keystore 用户宿主目录中名为 .keystore 的文件</p>
<p>-file 读时为标准输入，写时为标准输</p>
<h2 id="修改yaml配置文件"><a href="#修改yaml配置文件" class="headerlink" title="修改yaml配置文件"></a>修改yaml配置文件</h2><p>把E盘下的spring.keystore证书文件拷贝到项目中的resources目录中 , 然后在application.yml中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  ssl:</span><br><span class="line">    key-alias: spring</span><br><span class="line">    key-password: 123456</span><br><span class="line">    key-store: classpath:spring.keystore</span><br></pre></td></tr></table></figure></p>
<p>和生成的证书的参数对应，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8443</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /</span><br><span class="line">  ssl:</span><br><span class="line">    key-store: classpath:spring.keystore</span><br><span class="line">    key-password: 123456</span><br><span class="line">    key-alias: spring</span><br><span class="line">    key-store-type:</span><br><span class="line">    key-store-password:</span><br><span class="line">    key-store-provider:</span><br><span class="line">http:</span><br><span class="line">  port: 8080</span><br></pre></td></tr></table></figure>
<h2 id="添加http和https同时监听"><a href="#添加http和https同时监听" class="headerlink" title="添加http和https同时监听"></a>添加http和https同时监听</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.catalina.Context;</span><br><span class="line">import org.apache.catalina.connector.Connector;</span><br><span class="line">import org.apache.tomcat.util.descriptor.web.SecurityCollection;</span><br><span class="line">import org.apache.tomcat.util.descriptor.web.SecurityConstraint;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @date 2020/1/2/002 13:52</span><br><span class="line"> * @TODO Http支持</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class TomcatConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    TomcatServletWebServerFactory tomcatServletWebServerFactory() &#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void postProcessContext(Context context) &#123;</span><br><span class="line">                SecurityConstraint constraint = new SecurityConstraint();</span><br><span class="line">                constraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);</span><br><span class="line">                SecurityCollection collection = new SecurityCollection();</span><br><span class="line">                collection.addPattern(&quot;/*&quot;);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.addAdditionalTomcatConnectors(createTomcatConnector());</span><br><span class="line">        return factory;</span><br><span class="line">    &#125;</span><br><span class="line">    private Connector createTomcatConnector() &#123;</span><br><span class="line">        // 默认协议为 TomcatServletWebServerFactory.DEFAULT_PROTOCOL=org.apache.coyote.http11.Http11NioProtocol</span><br><span class="line">        Connector connector = new</span><br><span class="line">                Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL);</span><br><span class="line">        connector.setScheme(&quot;http&quot;);</span><br><span class="line">        connector.setPort(port);</span><br><span class="line">        connector.setSecure(false);</span><br><span class="line">        connector.setRedirectPort(httpsPort);//请求8080转到8443端口</span><br><span class="line">        return connector;</span><br><span class="line">    &#125;</span><br><span class="line">    //8080 请求8080转到8443端口</span><br><span class="line">    @Value(&quot;$&#123;http.port&#125;&quot;)</span><br><span class="line">    private Integer port;</span><br><span class="line">    </span><br><span class="line">    //8443</span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    private Integer httpsPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2020-01-02 14:17:43.303  INFO 10076 --- [           main] o.s.cloud.commons.util.InetUtils         : Cannot determine local hostname</span><br><span class="line">2020-01-02 14:17:44.394  INFO 10076 --- [           main] o.s.cloud.commons.util.InetUtils         : Cannot determine local hostname</span><br><span class="line">2020-01-02 14:17:44.629  INFO 10076 --- [           main] o.s.c.n.eureka.InstanceInfoFactory       : Setting initial instance status as: STARTING</span><br><span class="line">2020-01-02 14:17:44.667  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Initializing Eureka in region us-east-1</span><br><span class="line">2020-01-02 14:17:44.719  INFO 10076 --- [           main] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON encoding codec LegacyJacksonJson</span><br><span class="line">2020-01-02 14:17:44.720  INFO 10076 --- [           main] c.n.d.provider.DiscoveryJerseyProvider   : Using JSON decoding codec LegacyJacksonJson</span><br><span class="line">2020-01-02 14:17:44.873  INFO 10076 --- [           main] c.n.d.provider.DiscoveryJerseyProvider   : Using XML encoding codec XStreamXml</span><br><span class="line">2020-01-02 14:17:44.874  INFO 10076 --- [           main] c.n.d.provider.DiscoveryJerseyProvider   : Using XML decoding codec XStreamXml</span><br><span class="line">2020-01-02 14:17:45.066  INFO 10076 --- [           main] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration</span><br><span class="line">2020-01-02 14:17:45.122  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Disable delta property : false</span><br><span class="line">2020-01-02 14:17:45.123  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : null</span><br><span class="line">2020-01-02 14:17:45.123  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : false</span><br><span class="line">2020-01-02 14:17:45.123  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Application is null : false</span><br><span class="line">2020-01-02 14:17:45.123  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : true</span><br><span class="line">2020-01-02 14:17:45.123  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Application version is -1: true</span><br><span class="line">2020-01-02 14:17:45.123  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server</span><br><span class="line">2020-01-02 14:17:45.316  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : The response status is 200</span><br><span class="line">2020-01-02 14:17:45.319  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Starting heartbeat executor: renew interval is: 10</span><br><span class="line">2020-01-02 14:17:45.322  INFO 10076 --- [           main] c.n.discovery.InstanceInfoReplicator     : InstanceInfoReplicator onDemand update allowed rate per min is 4</span><br><span class="line">2020-01-02 14:17:45.327  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1577945865325 with initial instances count: 5</span><br><span class="line">2020-01-02 14:17:45.330  INFO 10076 --- [           main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application APP-SEARCH with eureka with status UP</span><br><span class="line">2020-01-02 14:17:45.330  INFO 10076 --- [           main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1577945865330, current=UP, previous=STARTING]</span><br><span class="line">2020-01-02 14:17:45.333  INFO 10076 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_APP-SEARCH/192.168.170.1:8443: registering service...</span><br><span class="line">2020-01-02 14:17:45.375  INFO 10076 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_APP-SEARCH/192.168.170.1:8443 - registration status: 204</span><br><span class="line">2020-01-02 14:17:45.398  INFO 10076 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8443 (https) 8080 (http) with context path &apos;&apos;</span><br></pre></td></tr></table></figure></p>
<p>最终日志启动监听：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-01-02 14:17:45.398  INFO 10076 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8443 (https) 8080 (http) with context path &apos;&apos;</span><br></pre></td></tr></table></figure></p>
<h3 id="免费证书-失效最多一年"><a href="#免费证书-失效最多一年" class="headerlink" title="免费证书 失效最多一年"></a>免费证书 失效最多一年</h3><p> <a href="https://freessl.cn/" target="_blank" rel="noopener">https://freessl.cn/</a></p>
<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/Smile__1/article/details/99848578" target="_blank" rel="noopener">证书生成</a></li>
<li><a href="https://blog.csdn.net/qq_36699423/article/details/93481187" target="_blank" rel="noopener">SpringBoot配置同时支持http和https</a></li>
<li><a href="https://segmentfault.com/a/1190000020052375" target="_blank" rel="noopener">SpringBoot支持https</a></li>
<li><a href="https://juejin.im/post/5efa9c9e6fb9a07e5a1c2705" target="_blank" rel="noopener">证书</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[tools-需要开启自启动的应用配置]]></title>
      <url>https://muxiaobai.github.io/2019/12/26/tools-%E9%9C%80%E8%A6%81%E5%BC%80%E5%90%AF%E8%87%AA%E5%90%AF%E5%8A%A8%E7%9A%84%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>每个人对应的目录可能不一致，<br>可以用 win +r  <code>shell:startup</code><br>把需要启动的bat文件创建快捷方式，到此文件夹下<br><img src="/2019/12/26/tools-需要开启自启动的应用配置/自启动目录.png" alt="自启动目录"></p>
<p>或者开机启动脚本</p>
<p>win+r  gpedit.msc</p>
<p>用户配置—-&gt; Windows设置—-&gt;脚本（登陆/注销）—-&gt; 登陆—-&gt;添加—-&gt;start.bat</p>
<p>一开机就启动必须的应用 IDEA VS Code  Chrome CloudMusic,自己写的脚本必须启动的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">echo start </span><br><span class="line"></span><br><span class="line">echo idea START</span><br><span class="line">start /d &quot;E:\Program Files\JetBrains\IntelliJ IDEA 2019.1.2\bin&quot; idea64.exe</span><br><span class="line"></span><br><span class="line">echo VS CODE START</span><br><span class="line">start /d &quot;E:\tools\Microsoft VS Code&quot; code.exe</span><br><span class="line"></span><br><span class="line">echo sublime START</span><br><span class="line">start /d &quot;E:\Program Files\Sublime Text 3&quot; sublime_text.exe</span><br><span class="line"></span><br><span class="line">echo Chrome START</span><br><span class="line">start /d &quot;C:\Program Files (x86)\Google\Chrome\Application&quot; chrome.exe</span><br><span class="line"></span><br><span class="line">echo cloudmusic START</span><br><span class="line">start /d &quot;E:\Program Files (x86)\Netease\CloudMusic&quot; cloudmusic.exe</span><br><span class="line"></span><br><span class="line">echo javaw START</span><br><span class="line">start /d  &quot;E:\workspace\idea\app-cloud\&quot; taskrunjavaw.bat</span><br><span class="line"></span><br><span class="line">echo nginx START</span><br><span class="line">start /d  &quot;E:\tools\nginx-1.14.2\&quot; nginx.exe  -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">echo dbeaver START</span><br><span class="line">start /d  &quot;E:\tools\dbeaver-ee-7.2.0-win32.win32.x86_64\dbeaver&quot; dbeaver.exe</span><br><span class="line"></span><br><span class="line">echo redis START</span><br><span class="line">start /d  &quot;E:\tools\Redis-x64-3.2.100\&quot; redis-server.exe --service-install redis.windows-service.conf --loglevel verbose</span><br><span class="line"></span><br><span class="line">echo ssr START</span><br><span class="line">start /d &quot;E:\tools\ssr-win-4.9.0\ShadowsocksR-win-4.9.0&quot; ShadowsocksR-dotnet4.0.exe</span><br><span class="line"></span><br><span class="line">echo Ditto START</span><br><span class="line">start /d &quot;E:\tools\DittoPortable_64bit_3_23_124_0剪贴板\Ditto&quot; Ditto.exe</span><br><span class="line"></span><br><span class="line">echo pg_sql START</span><br><span class="line">&quot;E:\Program Files\pgsql\bin\pg_ctl.exe&quot;  -D &quot;E:\Program Files\pgsql\data&quot; start</span><br><span class="line"></span><br><span class="line">echo vmware START</span><br><span class="line">&quot;E:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe&quot; start &quot;E:\Users\Administrator\Documents\Virtual Machines\CentOS-192.168.160.75\CentOS-192.168.160.75.vmx&quot;</span><br><span class="line"></span><br><span class="line">echo ES START</span><br><span class="line">start /d &quot;E:\tools\elk\elasticsearch-7.5.1-master\bin&quot;  elasticsearch.bat</span><br><span class="line"></span><br><span class="line">start /d &quot;E:\tools\elk\elasticsearch-7.5.1-slave1\bin&quot;  elasticsearch.bat</span><br><span class="line"></span><br><span class="line">start /d &quot;E:\tools\elk\kibana-7.5.1-windows-x86_64\bin&quot;  kibana.bat</span><br><span class="line"></span><br><span class="line">echo jupyter START</span><br><span class="line">start  E:\ProgramData\Anaconda3\python.exe E:\ProgramData\Anaconda3\cwp.py E:\ProgramData\Anaconda3\envs\tensorflow E:\ProgramData\Anaconda3\envs\tensorflow\python.exe E:\ProgramData\Anaconda3\envs\tensorflow\Scripts\jupyter-notebook-script.py E:\workspace\git</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>切换到对应目录然后执行exe</p>
<p>taskrunjavaw.bat 中是需要启动的平台<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">start javaw -jar ./app-core/app-register/target/app-register-0.0.1.jar   &amp;</span><br><span class="line">ping -n 8 127.0.0.1 1&gt;null</span><br><span class="line">rem 等待8秒</span><br><span class="line">echo &quot;app-register&quot;</span><br><span class="line">start javaw -jar ./app-core/app-config/target/app-config-0.0.1.jar &amp;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p>
<p>对于一些不经常变动的，定式启动内容可以如此处理。</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[devops之jenkins持续集成]]></title>
      <url>https://muxiaobai.github.io/2019/12/21/devops%E4%B9%8Bjenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<p>分两步走，第一安装，第二配置</p>
<h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R 1000 /root/jenkins_home</span><br><span class="line">chmod 777 /var/run/docker.sock</span><br></pre></td></tr></table></figure>
<h2 id="docker-创建jenkins工具持续集成"><a href="#docker-创建jenkins工具持续集成" class="headerlink" title="docker 创建jenkins工具持续集成"></a>docker 创建jenkins工具持续集成</h2><p>拉取镜像 <code>docker pulljenkins/jenkins</code></p>
<p>8080映射到16000 5000映射到16001端口<br>创建容器:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jenkins -p 16000:8080 -p 16001:50000 \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v $(which docker):/bin/docker \</span><br><span class="line">    -v /root/jenkins_home:/var/jenkins_home \</span><br><span class="line">    -d jenkins/jenkins</span><br></pre></td></tr></table></figure>
<ul>
<li>/root/jenkins_home 为jenkins工作空间，包括插件maven，git工具等</li>
<li>需要在shell中使用宿主机的docker命令</li>
</ul>
<p>删除容器：<code>docker rm -f jenkins</code></p>
<p>下面的创建，添加了本地执行shell挂载卷</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d -p 16000:8080 -p 16001:50000 \</span><br><span class="line">    -v /opt/demo/:/opt/demo \</span><br><span class="line">    -v /root/jenkins_home/:/var/jenkins_home \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v $(which docker):/usr/bin/docker \</span><br><span class="line">    -v $(which git):/usr/bin/git \</span><br><span class="line">    -v ~/.ssh:/var/jenkins_home/.ssh \</span><br><span class="line">    --name=jenkins jenkins/jenkins</span><br></pre></td></tr></table></figure>
<p>挂载：其中/opt/demo 为命令执行空间</p>
<p>访问 <a href="http://ip:16000" target="_blank" rel="noopener">http://ip:16000</a></p>
<p>以上 安装完成</p>
<p>参考<a href="https://www.cnblogs.com/stulzq/p/8627360.html" target="_blank" rel="noopener">jenkins安装</a></p>
<h2 id="构建集成配置"><a href="#构建集成配置" class="headerlink" title="构建集成配置"></a>构建集成配置</h2><p>需要以下工具     </p>
<ul>
<li>Git plugin 源码地址</li>
<li>Maven Integration plugin   构建工具</li>
<li>Publish Over SSH 远程发布</li>
</ul>
<p><code>/root/jenkins_home/tools/hudson.tasks.Maven_MavenInstallation</code>在这个文件夹下会有maven工具支持构建</p>
<p>新建项目选择maven,需要安装maven 工具<br><img src="/2019/12/21/devops之jenkins持续集成/pom.png" alt="maven"></p>
<h3 id="配置源码仓库"><a href="#配置源码仓库" class="headerlink" title="配置源码仓库"></a>配置源码仓库</h3><p>配置git地址，分支<code>refs/heads/dev</code></p>
<p><img src="/2019/12/21/devops之jenkins持续集成/gitsource.png" alt="源码配置"></p>
<h3 id="配置触发器"><a href="#配置触发器" class="headerlink" title="配置触发器"></a>配置触发器</h3><h4 id="github-hook"><a href="#github-hook" class="headerlink" title="github hook"></a>github hook</h4><p><img src="/2019/12/21/devops之jenkins持续集成/githubhook.png" alt="github hook"><br>只用把github勾选<br><img src="/2019/12/21/devops之jenkins持续集成/配置触发器.png" alt="配置触发器"></p>
<h4 id="gitlab配置"><a href="#gitlab配置" class="headerlink" title="gitlab配置"></a>gitlab配置</h4><p>Accepted Merge Requests Events 接受合并分支时，触发<br><img src="/2019/12/21/devops之jenkins持续集成/webhook.png" alt="配置jenkins合并触发"><br>出现<code>Url is blocked: Requests to the local network are not allowed</code> 问题，需要在系统管理员处配置：<br><img src="/2019/12/21/devops之jenkins持续集成/gitlab配置1.png" alt="配置gitlabwebhook"><br>合并分支时候调用hook地址<br><img src="/2019/12/21/devops之jenkins持续集成/gitlab配置2.png" alt="配置gitlab"></p>
<h3 id="配置-Build"><a href="#配置-Build" class="headerlink" title="配置 Build"></a>配置 Build</h3><p>pom.xml<br>clean package<br><img src="/2019/12/21/devops之jenkins持续集成/bulid.png" alt="build"></p>
<h3 id="配置Post-Steps"><a href="#配置Post-Steps" class="headerlink" title="配置Post Steps"></a>配置Post Steps</h3><h4 id="本机发布执行shell"><a href="#本机发布执行shell" class="headerlink" title="本机发布执行shell"></a>本机发布执行shell</h4><p>shell脚本</p>
<p><img src="/2019/12/21/devops之jenkins持续集成/shell.png" alt="本地shell"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">WORK_DIR=/opt/demo/package</span><br><span class="line">PROJECT_NAME=app-demo</span><br><span class="line">PROJECT_VERSION=0.0.1</span><br><span class="line">echo `pwd`</span><br><span class="line">docker ps -a </span><br><span class="line">#  判断工作目录是否存在</span><br><span class="line">if [ ! -e $&#123;WORK_DIR&#125; ] &amp;&amp; [ ! -d $&#123;WORK_DIR&#125; ]; then</span><br><span class="line">    mkdir -p $&#123;WORK_DIR&#125;</span><br><span class="line">    echo &quot;Create Dir: $&#123;WORK_DIR&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Dockerfile存在 删除</span><br><span class="line">if [ -e $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/Dockerfile ]; then</span><br><span class="line">    rm -rf $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/Dockerfile</span><br><span class="line">    echo &quot;Remove File: $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/Dockerfile&quot;</span><br><span class="line">fi</span><br><span class="line"># 如果容器已经启动，移除</span><br><span class="line">if docker ps -a | grep $&#123;PROJECT_NAME&#125;; then</span><br><span class="line">    docker rm -f $&#123;PROJECT_NAME&#125;-$&#123;PROJECT_VERSION&#125;</span><br><span class="line">    docker rmi -f $&#123;PROJECT_NAME&#125;-$&#123;PROJECT_VERSION&#125;</span><br><span class="line">    echo &quot;Remove Docker Container: $&#123;PROJECT_NAME&#125;-$&#123;PROJECT_VERSION&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 拷贝jar包到工作目录 jar是通过maven pom.xml 生成的</span><br><span class="line">cp ./target/*.jar $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/ </span><br><span class="line"># 拷贝Dockerfile到工作目录 是提前编写在git项目内</span><br><span class="line">cp ./Dockerfile $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/</span><br><span class="line"></span><br><span class="line"># 开始构建镜像</span><br><span class="line"># 进入工作目录</span><br><span class="line">cd $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/</span><br><span class="line"># 构建镜像 在个工作目录，依据当前目录创建镜像</span><br><span class="line"># docker build -t $&#123;PROJECT_NAME&#125;:$&#123;PROJECT_VERSION&#125; .</span><br><span class="line"># 推送镜像</span><br><span class="line"># docker push $&#123;PROJECT_NAME&#125;:$&#123;PROJECT_VERSION&#125;</span><br><span class="line"></span><br><span class="line">#  启动容器</span><br><span class="line"># docker run -d -p 18000:8761 --name $&#123;PROJECT_NAME&#125; $&#123;PROJECT_NAME&#125;:$&#123;PROJECT_VERSION&#125;</span><br><span class="line"></span><br><span class="line">#dockerstart.sh 为便捷构建容器启动容器脚本</span><br><span class="line">#cd $&#123;WORK_DIR&#125;</span><br><span class="line">#sh ../shell/dockerstart.sh $&#123;PROJECT_NAME&#125;-$&#123;PROJECT_VERSION&#125; /opt/demo/package/ 18000</span><br><span class="line"></span><br><span class="line">#判断容器启动成功</span><br><span class="line">if docker ps  | grep $&#123;PROJECT_NAME&#125;; then</span><br><span class="line">    echo &quot;Start Docker Container: $&#123;PROJECT_NAME&#125;-$&#123;PROJECT_VERSION&#125; Success&quot;</span><br><span class="line">else </span><br><span class="line">    echo &quot;Start Docker Container: $&#123;PROJECT_NAME&#125;-$&#123;PROJECT_VERSION&#125; Error&quot;</span><br><span class="line">    return 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h4 id="远程发布SSH-Publishers"><a href="#远程发布SSH-Publishers" class="headerlink" title="远程发布SSH Publishers"></a>远程发布SSH Publishers</h4><p>配置插件如果要进行远程发布，需要插件</p>
<p>先在系统全局配置中配置以下ssh<br><img src="/2019/12/21/devops之jenkins持续集成/配置ssh.png" alt="配置"><br><img src="/2019/12/21/devops之jenkins持续集成/SSHpublisher.png" alt="远程发布"></p>
<p><a href="https://blog.csdn.net/Denny2333/article/details/88037413" target="_blank" rel="noopener">配置构建项目</a></p>
]]></content>
      
        <categories>
            
            <category> devops </category>
            
        </categories>
        
        
        <tags>
            
            <tag> devops </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 基础之AQS和应用]]></title>
      <url>https://muxiaobai.github.io/2019/10/31/Thinking-in-java-%E5%9F%BA%E7%A1%80%E4%B9%8BAQS%E5%92%8C%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>使用锁的时候我们直接<code>ReentrantLock lock = new ReentrantLock();lock.lock();</code>,这中间究竟有什么内容,<br>lock的时候，其它线程为什么不能执行，unlook()的时候其它的线程究竟从哪个线程能执行？本文主要分析lock的各种情况。</p>
<h2 id="j-u-c-locks-AbstractQueuedSynchronizer"><a href="#j-u-c-locks-AbstractQueuedSynchronizer" class="headerlink" title="j.u.c.locks.AbstractQueuedSynchronizer"></a>j.u.c.locks.AbstractQueuedSynchronizer</h2><p>有共享和独占两种状态，SHARE，EXCLUSIVE 这两个在AQS中对应两个Node节点{state:1,thread:Thread.CurrentThread()},节点里面的内容。<br>从名字里面就能知道，共享锁，每一个线程来都可以拿到锁，简单的来说，就是可以运行lock和unlock内的代码，独占锁，一个线程lock，其它线程必须等到unlock之后，再去抢占锁。</p>
<blockquote>
<p>排队接水喝，我的杯子放在这里，当前这个饮水机就我能用。其它人来了，不好意思，排队。</p>
</blockquote>
<p>至于怎么抢占，又分为公平锁，和非公平锁，公平锁：先来后到，非公平：随机获取。</p>
<blockquote>
<p>排队接水喝， 先后顺序，公平，来了个领导，他先接水，不公平，但合理。</p>
</blockquote>
<p>AbstractOwnableSynchronizer</p>
<p><img src="/2019/10/31/Thinking-in-java-基础之AQS和应用/state.png" alt="图"><br>CLH锁也是一种基于链表的可扩展、高性能、公平的自旋锁，申请线程仅仅在本地变量上自旋，它不断轮询前驱的状态，假设发现前驱释放了锁就结束自旋。</p>
<p>资源state使用volatile标识，保证所有的线程来的时候都是确定的值。详细查看<a href>volatile</a>，其它线程在队列里。</p>
<p>protected boolean tryAcquire(int arg) : 独占式获取同步状态，试着获取，成功返回true，反之为false<br>protected boolean tryRelease(int arg) ：独占式释放同步状态，等待中的其他线程此时将有机会获取到同步状态；<br>protected int tryAcquireShared(int arg) ：共享式获取同步状态，返回值大于等于0，代表获取成功；反之获取失败；<br>protected boolean tryReleaseShared(int arg) ：共享式释放同步状态，成功为true，失败为false<br>protected boolean isHeldExclusively() ： 是否在独占模式下被线程占用。</p>
<h2 id="CountDownLatch-倒计时器"><a href="#CountDownLatch-倒计时器" class="headerlink" title="CountDownLatch 倒计时器"></a>CountDownLatch 倒计时器</h2><p>它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行</p>
<p>CountDownLatch，任务分为N个子线程去执行，state也初始化为N（注意N要与线程个数一致）。这N个子线程是并行执行的，每个子线程执行完后countDown()一次，state会CAS(Compare and Swap)减1。等到所有子线程都执行完后(即state=0)，会unpark()主调用线程，然后主调用线程就会从await()函数返回，继续后余动作。</p>
<h2 id="CyclicBarrier-循环栅栏"><a href="#CyclicBarrier-循环栅栏" class="headerlink" title="CyclicBarrier 循环栅栏"></a>CyclicBarrier 循环栅栏</h2><p>让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。</p>
<blockquote>
<p>CountDownLatch: A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes. (CountDownLatch: 一个或者多个线程，等待其他多个线程完成某件事情之后才能执行；) CyclicBarrier : A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.(CyclicBarrier : 多个线程互相等待，直到到达同一个同步点，再继续一起执行。)</p>
</blockquote>
<p>对于CountDownLatch来说，重点是“一个线程（多个线程）等待”，而其他的N个线程在完成“某件事情”之后，可以终止，也可以等待。而对于CyclicBarrier，重点是多个线程，在任意一个线程没有完成，所有的线程都必须等待。</p>
<h2 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore 信号量"></a>Semaphore 信号量</h2><p>synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源,可以指定多个线程同时访问某个资源</p>
<h2 id="ReentrantLock-重入锁"><a href="#ReentrantLock-重入锁" class="headerlink" title="ReentrantLock 重入锁"></a>ReentrantLock 重入锁</h2><blockquote>
<p>排队接水喝，水杯太大，杯子放着接，我先干别的事，干完了回来，直接就能拿杯子，重入。</p>
</blockquote>
<p>ReentrantLock，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</p>
<h2 id="tomcat的-LimitLatch"><a href="#tomcat的-LimitLatch" class="headerlink" title="tomcat的 LimitLatch"></a>tomcat的 LimitLatch</h2><ul>
<li><a href="https://www.cnblogs.com/waterystone/p/4920797.html" target="_blank" rel="noopener">Java并发之AQS详解</a></li>
<li><a href="https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html" target="_blank" rel="noopener">Java并发包基石-AQS详解</a></li>
<li><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Multithread/AQS.md#41-countdownlatch-%E7%9A%84%E4%B8%89%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%94%A8%E6%B3%95" target="_blank" rel="noopener">JavaGuide</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 基础之类加载顺序&初始化]]></title>
      <url>https://muxiaobai.github.io/2019/10/21/Thinking-in-java-%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F-%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<h4 id="先来一个题"><a href="#先来一个题" class="headerlink" title="先来一个题"></a>先来一个题</h4><p>FatherClass:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class FatherClass &#123;</span><br><span class="line">    public  static  int F_NUM = 1111;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(F_NUM);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    FatherClass()&#123;</span><br><span class="line">        System.out.println(F_NUM);</span><br><span class="line">        F_NUM = 5555;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SonClass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class SonClass  extends  FatherClass&#123;</span><br><span class="line">    public  static  int S_NUM = 2222;</span><br><span class="line">    static &#123;</span><br><span class="line">        F_NUM = 3333;</span><br><span class="line">        System.out.println(S_NUM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        S_NUM = 4444;</span><br><span class="line">        System.out.println(F_NUM);</span><br><span class="line">    &#125;</span><br><span class="line">    //这里是一个大坑，没有无参的构造方法，所以newInstance的时候会报错</span><br><span class="line">    SonClass(int inNUM)&#123;</span><br><span class="line">        System.out.println(F_NUM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class LoaderOrder &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">//        testClassLoad();</span><br><span class="line">        testClassForName();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void testClassLoad() throws ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class clazz =LoaderOrder.class.getClassLoader().loadClass(&quot;io.github.muxiaobai.spring_my_demo.loadClass.SonClass&quot;);</span><br><span class="line">        System.out.println(&quot;---------------------------&quot;);</span><br><span class="line">        clazz.newInstance();</span><br><span class="line">        System.out.println(&quot;===========================&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void testClassForName() throws ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        Class clazz =Class.forName(&quot;io.github.muxiaobai.spring_my_demo.loadClass.SonClass&quot;);</span><br><span class="line">        System.out.println(&quot;---------------------------&quot;);</span><br><span class="line">        clazz.newInstance();</span><br><span class="line">        System.out.println(&quot;===========================&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用ClassLoad<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.InstantiationException: io.github.muxiaobai.spring_my_demo.loadClass.SonClass</span><br><span class="line">	at java.lang.Class.newInstance(Class.java:427)</span><br></pre></td></tr></table></figure></p>
<p>使用Class.forName();</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1111</span><br><span class="line">2222</span><br><span class="line">3333</span><br><span class="line">---------------------------</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.InstantiationException: io.github.muxiaobai.spring_my_demo.loadClass.SonClass</span><br></pre></td></tr></table></figure>
<p>链接：static成员变量，附初始值。0,null,false,</p>
<p>初始化做了那些事情？显性的：static语句块，执行到实例化的时候没有无参的构造函数，因此父类和子类都没有实例化。</p>
<p>没有完成类的初始化，无法访问类成员</p>
<p><img src="/2019/10/21/Thinking-in-java-基础之类加载顺序-初始化/Class初始化.png" alt="初始化"></p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><h5 id="java对象，获取"><a href="#java对象，获取" class="headerlink" title="java对象，获取"></a>java对象，获取</h5><ul>
<li>new </li>
<li>反射</li>
<li>反序列化</li>
<li>克隆</li>
</ul>
<h5 id="Class对象获取"><a href="#Class对象获取" class="headerlink" title="Class对象获取"></a>Class对象获取</h5><ul>
<li>类名.class</li>
<li>实例.getClass()</li>
<li>classloader.loadClass(“包.类”)</li>
<li>Class.forName(“包.类”);</li>
</ul>
<p><img src="/2019/10/21/Thinking-in-java-基础之类加载顺序-初始化/获取Class四种方式.PNG" alt="初始化"></p>
<p>jvm加载步骤：加载——链接（验证，准备，解析）———–初始化</p>
<p><img src="/2019/10/21/Thinking-in-java-基础之类加载顺序-初始化/Class初始化时机.png" alt="初始化"></p>
<p>两种，实际上是识别到字节码指令:new，putstatic,getstatic,invokestatic,<br>反射</p>
<p>根据Java虚拟机的规范，只有5中情况属于主动引用：</p>
<ul>
<li><p>遇到new（使用new 关键字实例化一个对象）、getstatic（读取一个类的静态字段）、putstatic或者invokestatic（设置一个类的静态字段）这4条指令的时候，如果累没有进行过初始化。则需要先触发其初始化。</p>
</li>
<li><p>使用反射进行反射调用的时候，如果类没有初始化，则需要先触发其初始化。</p>
</li>
<li><p>当初始化一个类的时候，如果其父类没有初始化，则需要先触发其父类的初始化</p>
</li>
<li><p>程序启动需要触发main方法的时候，虚拟机会先触发这个类的初始化</p>
</li>
<li><p>当使用jdk1.7的动态语言支持的时候，如果一个java.lang.invoke.MethodHandler实例最后的解析结果为REF_getStatic、REF_pusStatic、REF_invokeStatic的方法句柄（句柄中包含了对象的实例数据和类型数据，句柄是访问对象的一种方法。句柄存储在堆中），并且句柄对应的类没有被初始化，那么需要先触发这个类的初始化。</p>
</li>
</ul>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul>
<li><a href="https://www.cnblogs.com/shyroke/p/9161603.html" target="_blank" rel="noopener">类加载机制和类的加载、连接（验证、准备、解析）和初始化</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 基础之HashMap]]></title>
      <url>https://muxiaobai.github.io/2019/10/17/Thinking-in-java-%E5%9F%BA%E7%A1%80%E4%B9%8BHashMap/</url>
      <content type="html"><![CDATA[<h2 id="一个简单的put引发的惨案"><a href="#一个简单的put引发的惨案" class="headerlink" title="一个简单的put引发的惨案"></a>一个简单的put引发的惨案</h2><pre><code>版本 jdk1.8
Map hashMap = new HashMap&lt;String,String&gt;();
hashMap.put(&quot;abc&quot;,&quot;1&quot;);
一个简单的put
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Associates the specified value with the specified key in this map.</span><br><span class="line"> * If the map previously contained a mapping for the key, the old</span><br><span class="line"> * value is replaced.</span><br><span class="line"> *</span><br><span class="line"> * @param key key with which the specified value is to be associated</span><br><span class="line"> * @param value value to be associated with the specified key</span><br><span class="line"> * @return the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span><br><span class="line"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span><br><span class="line"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span><br><span class="line"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span><br><span class="line"> */</span><br><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="怎么进行hash"><a href="#怎么进行hash" class="headerlink" title="怎么进行hash"></a>怎么进行hash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Computes key.hashCode() and spreads (XORs) higher bits of hash</span><br><span class="line">    * to lower.  Because the table uses power-of-two masking, sets of</span><br><span class="line">    * hashes that vary only in bits above the current mask will</span><br><span class="line">    * always collide. (Among known examples are sets of Float keys</span><br><span class="line">    * holding consecutive whole numbers in small tables.)  So we</span><br><span class="line">    * apply a transform that spreads the impact of higher bits</span><br><span class="line">    * downward. There is a tradeoff between speed, utility, and</span><br><span class="line">    * quality of bit-spreading. Because many common sets of hashes</span><br><span class="line">    * are already reasonably distributed (so don&apos;t benefit from</span><br><span class="line">    * spreading), and because we use trees to handle large sets of</span><br><span class="line">    * collisions in bins, we just XOR some shifted bits in the</span><br><span class="line">    * cheapest possible way to reduce systematic lossage, as well as</span><br><span class="line">    * to incorporate impact of the highest bits that would otherwise</span><br><span class="line">    * never be used in index calculations because of table bounds.</span><br><span class="line">    */</span><br><span class="line">   static final int hash(Object key) &#123;</span><br><span class="line">       int h;</span><br><span class="line">       return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>key可以为null ，返回0，直接落在第一个坑位上。</p>
<blockquote>
<p>解释了key可以为null<br>Object.hashCode();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public native int hashCode();</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>以String举例<br>String.hashCode();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Returns a hash code for this string. The hash code for a</span><br><span class="line">    * &#123;@code String&#125; object is computed as</span><br><span class="line">    * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class="line">    * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</span><br><span class="line">    * &lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line">    * using &#123;@code int&#125; arithmetic, where &#123;@code s[i]&#125; is the</span><br><span class="line">    * &lt;i&gt;i&lt;/i&gt;th character of the string, &#123;@code n&#125; is the length of</span><br><span class="line">    * the string, and &#123;@code ^&#125; indicates exponentiation.</span><br><span class="line">    * (The hash value of the empty string is zero.)</span><br><span class="line">    *</span><br><span class="line">    * @return  a hash code value for this object.</span><br><span class="line">    */</span><br><span class="line">   public int hashCode() &#123;</span><br><span class="line">       int h = hash;</span><br><span class="line">       if (h == 0 &amp;&amp; value.length &gt; 0) &#123;</span><br><span class="line">           char val[] = value;</span><br><span class="line"></span><br><span class="line">           for (int i = 0; i &lt; value.length; i++) &#123;</span><br><span class="line">               h = 31 * h + val[i];</span><br><span class="line">           &#125;</span><br><span class="line">           hash = h;</span><br><span class="line">       &#125;</span><br><span class="line">       return h;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>举例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;abc&quot;.hashCode());//96354</span><br><span class="line">System.out.println(97*31*31 + 98*31+99);//96354</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>s[0]<em>31^(n-1) + s[1]</em>31^(n-2) + … + s[n-1]</p>
</blockquote>
<p>String的hash算法,那么HashMap中的hash(),<br><code>(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</code><br>“abc”进行转hashCode()之后就是96354，然后变成二进制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h&gt;&gt;&gt;16   h^(h&gt;&gt;&gt;16)</span><br><span class="line">那么就是（前面补0）</span><br><span class="line">96354       0000 0000 0000 0001 0111 1000 0110 0010  低16位</span><br><span class="line">h&gt;&gt;&gt;16      0000 0000 0000 0000 0000 0000 0000 0001  高16位</span><br><span class="line">^--------------------------------------------------</span><br><span class="line">h^(h&gt;&gt;&gt;16)  0000 0000 0000 0001 0111 1000 0110 0011  </span><br><span class="line"></span><br><span class="line">最终得到96355</span><br></pre></td></tr></table></figure></p>
<p>高16位与低16位</p>
<p>结果验证<br><img src="/2019/10/17/Thinking-in-java-基础之HashMap/hash.png" alt="hash运行时"></p>
<p>然后下一步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Implements Map.put and related methods</span><br><span class="line">     *</span><br><span class="line">     * @param hash hash for key</span><br><span class="line">     * @param key the key</span><br><span class="line">     * @param value the value to put</span><br><span class="line">     * @param onlyIfAbsent if true, don&apos;t change existing value</span><br><span class="line">     * @param evict if false, the table is in creation mode.</span><br><span class="line">     * @return previous value, or null if none</span><br><span class="line">     */</span><br><span class="line">    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">                   boolean evict) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">        if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">            tab[i] = newNode(hash, key, value, null);</span><br><span class="line">        else &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            if (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            else if (p instanceof TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">            else &#123;</span><br><span class="line">                for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                    if ((e = p.next) == null) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, null);</span><br><span class="line">                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                        break;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (e != null) &#123; // existing mapping for key</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                return oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        if (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="没有数组"><a href="#没有数组" class="headerlink" title="没有数组"></a>没有数组</h4><p>看内部的如果table是空的创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">           n = (tab = resize()).length;</span><br></pre></td></tr></table></figure></p>
<p>resize()把table创建好了，同时把tab.length赋给n<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * Initializes or doubles table size.  If null, allocates in</span><br><span class="line">   * accord with initial capacity target held in field threshold.</span><br><span class="line">   * Otherwise, because we are using power-of-two expansion, the</span><br><span class="line">   * elements from each bin must either stay at same index, or move</span><br><span class="line">   * with a power of two offset in the new table.</span><br><span class="line">   *</span><br><span class="line">   * @return the table</span><br><span class="line">   */</span><br><span class="line">  final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">      Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">      int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">      int oldThr = threshold;</span><br><span class="line">      int newCap, newThr = 0;</span><br><span class="line">      if (oldCap &gt; 0) &#123;</span><br><span class="line">          if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">              threshold = Integer.MAX_VALUE;</span><br><span class="line">              return oldTab;</span><br><span class="line">          &#125;</span><br><span class="line">          else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                   oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">              newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">      &#125;</span><br><span class="line">      else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class="line">          newCap = oldThr;</span><br><span class="line">      else &#123;               // zero initial threshold signifies using defaults 这里是初始化的时候，放容量Cap=16和最多放几个开始扩容负载因子Thr = 0.75*16 = 12，</span><br><span class="line">          newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">          newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      if (newThr == 0) &#123;</span><br><span class="line">          float ft = (float)newCap * loadFactor;</span><br><span class="line">          newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                    (int)ft : Integer.MAX_VALUE);</span><br><span class="line">      &#125;</span><br><span class="line">      threshold = newThr;</span><br><span class="line">      @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">      //创建一个newCap容量大小的数组，然后赋给table</span><br><span class="line">          Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">      table = newTab;</span><br><span class="line">      //以下内容为把原来的Node放到新的Node中，先放一下，后面在扩容判定位置的时候再研究</span><br><span class="line">      if (oldTab != null) &#123;</span><br><span class="line">          ...</span><br><span class="line">          ...</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">      return newTab;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>先看新建的，不看扩容的。知道table是个newCap大小的数组</p>
<p><img src="/2019/10/17/Thinking-in-java-基础之HashMap/resize.png" alt="hash运行时"></p>
<h4 id="数组对应的位置为空"><a href="#数组对应的位置为空" class="headerlink" title="数组对应的位置为空"></a>数组对应的位置为空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">           tab[i] = newNode(hash, key, value, null);</span><br></pre></td></tr></table></figure>
<p>有了数组，怎么计算放在哪一个数组上，<code>(n - 1) &amp; hash]</code>,这个位置上如果为空，那么tab的i上就放当前的Node&lt;K,V&gt;;当前的n就是tab.length = 16<br>算一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">刚才abc的hash值是96355</span><br><span class="line">h^(h&gt;&gt;&gt;16)  0000 0000 0000 0001 0111 1000 0110 0011   96355</span><br><span class="line">16-1        0000 0000 0000 0000 0000 0000 0000 1111   15</span><br><span class="line">&amp;-------------------------------------------------- 保证所有的值都落在tab之内</span><br><span class="line">(n-1)hash   0000 0000 0000 0000 0000 0000 0000 0011   3</span><br><span class="line"></span><br><span class="line">然后看tab[3]上是否为null,为空直接赋值在这里</span><br><span class="line">然后tab[3] =  Node&lt;&gt;(hash, key, value, next);//Node&lt;&gt;(96355，&quot;abc&quot;,&quot;1&quot;,null)</span><br></pre></td></tr></table></figure></p>
<p><img src="/2019/10/17/Thinking-in-java-基础之HashMap/tab[i].png" alt="hash运行时"></p>
<h4 id="数组对应的位置不为空，跟链表，超过TREEIFY-THRESHOLD时，当前hash对应的位置转为treeifyBin"><a href="#数组对应的位置不为空，跟链表，超过TREEIFY-THRESHOLD时，当前hash对应的位置转为treeifyBin" class="headerlink" title="数组对应的位置不为空，跟链表，超过TREEIFY_THRESHOLD时，当前hash对应的位置转为treeifyBin"></a>数组对应的位置不为空，跟链表，超过TREEIFY_THRESHOLD时，当前hash对应的位置转为treeifyBin</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt; e; K k;</span><br><span class="line">if (p.hash == hash &amp;&amp;</span><br><span class="line">    ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">    e = p;</span><br></pre></td></tr></table></figure>
<p>判断key是不是一样的，如果是一样的，直接替换前面的Node，</p>
<blockquote>
<p>解释了 为什么key可以为null，但key一样的话不能重复</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">else &#123;</span><br><span class="line">    //没有条件的一直循环，在内部break，</span><br><span class="line">    for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">        if ((e = p.next) == null) &#123;</span><br><span class="line">            p.next = newNode(hash, key, value, null);</span><br><span class="line">            //当前容量大于8-1 = 7 的时候进行转为红黑树</span><br><span class="line">            if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        if (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            break;</span><br><span class="line">        p = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前hash对应的位置转TreeNode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Replaces all linked nodes in bin at index for given hash unless</span><br><span class="line">     * table is too small, in which case resizes instead.</span><br><span class="line">     */</span><br><span class="line">    final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123;</span><br><span class="line">        int n, index; Node&lt;K,V&gt; e;</span><br><span class="line">        //如果tab数组小于MIN_TREEIFY_CAPACITY=64重新调整大小</span><br><span class="line">        if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line">        else if ((e = tab[index = (n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; hd = null, tl = null;</span><br><span class="line">            do &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, null);</span><br><span class="line">                if (tl == null)</span><br><span class="line">                    hd = p;</span><br><span class="line">                else &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125; while ((e = e.next) != null);</span><br><span class="line">            if ((tab[index] = hd) != null)</span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="数组对应的位置不为空，跟红黑树"><a href="#数组对应的位置不为空，跟红黑树" class="headerlink" title="数组对应的位置不为空，跟红黑树"></a>数组对应的位置不为空，跟红黑树</h4><p>直接调用TreeNode的putTreeVal()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">else if (p instanceof TreeNode)</span><br><span class="line">    e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br></pre></td></tr></table></figure></p>
<p>里面对应的旋转啊，啥子的，一堆。</p>
<h4 id="超过最大值，要进行扩容"><a href="#超过最大值，要进行扩容" class="headerlink" title="超过最大值，要进行扩容"></a>超过最大值，要进行扩容</h4><p>当大小超过threshold=DEFAULT_LOAD_FACTOR <em> DEFAULT_INITIAL_CAPACITY= 0.75</em>16=12重新resize()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (++size &gt; threshold)</span><br><span class="line">        resize();</span><br></pre></td></tr></table></figure></p>
<p>resize(),扩容的时候MAXIMUM_CAPACITY=1&lt;&lt;30<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">    threshold = Integer.MAX_VALUE;//最大值</span><br><span class="line">    return oldTab;</span><br><span class="line">&#125;</span><br><span class="line">//不到最大值，新的容量newCap为原来的左移一位 oldThr&lt;&lt;1, 两倍的容量</span><br><span class="line">else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">            oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">    newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">    //newThr 为12&lt;&lt;1 为 24</span><br></pre></td></tr></table></figure></p>
<h4 id="扩容怎么判定原来的位置，怎么移动"><a href="#扩容怎么判定原来的位置，怎么移动" class="headerlink" title="扩容怎么判定原来的位置，怎么移动"></a>扩容怎么判定原来的位置，怎么移动</h4><p>上面扩容省略的部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">            oldTab[j] = null;</span><br><span class="line">            //没有next 说明只有一个Node直接在table数组中直接移动</span><br><span class="line">            if (e.next == null)</span><br><span class="line">                newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">            //是树的情况</span><br><span class="line">            else if (e instanceof TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">            else &#123; // preserve order 顺序的模式链表</span><br><span class="line">                Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                Node&lt;K,V&gt; next;</span><br><span class="line">                do &#123;</span><br><span class="line">                    next = e.next;</span><br><span class="line">                    //hash与oldCap容量如果等于0 则还在原来的坑位，</span><br><span class="line">                    if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                        if (loTail == null)</span><br><span class="line">                            loHead = e;</span><br><span class="line">                        else</span><br><span class="line">                            loTail.next = e;</span><br><span class="line">                        loTail = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //在新的坑位</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (hiTail == null)</span><br><span class="line">                            hiHead = e;</span><br><span class="line">                        else</span><br><span class="line">                            hiTail.next = e;</span><br><span class="line">                        hiTail = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; while ((e = next) != null);</span><br><span class="line">                if (loTail != null) &#123;</span><br><span class="line">                    loTail.next = null;</span><br><span class="line">                    newTab[j] = loHead;</span><br><span class="line">                &#125;</span><br><span class="line">                if (hiTail != null) &#123;</span><br><span class="line">                    hiTail.next = null;</span><br><span class="line">                    newTab[j + oldCap] = hiHead;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><code>((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</code>中有一段，当小于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">    tab[index] = loHead.untreeify(map);</span><br><span class="line">else &#123;</span><br><span class="line">    tab[index] = loHead;</span><br><span class="line">    if (hiHead != null) // (else is already treeified)</span><br><span class="line">        loHead.treeify(tab);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>已经把原来各个节点Node移动到新的数组中，当小于UNTREEIFY_THRESHOLD=6时，转为链表</p>
<p>链表的情况<code>(e.hash &amp; oldCap) == 0</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">刚才abc的hash值是96355</span><br><span class="line">h^(h&gt;&gt;&gt;16)  0000 0000 0000 0001 0111 1000 0110 0011   96355</span><br><span class="line">16=oldCap   0000 0000 0000 0000 0000 0000 0001 0000   16</span><br><span class="line">&amp;-------------------------------------------------- 保证所有的值都落在tab之内</span><br><span class="line">hash&amp;oldCap 0000 0000 0000 0000 0000 0000 0000 0000   0</span><br><span class="line"></span><br><span class="line">等于0 还在原来的位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h^(h&gt;&gt;&gt;16)  0000 0000 0000 0001 0111 1000 0110 0011</span><br><span class="line">16扩32      0000 0000 0000 0000 0000 0000 0001 1111</span><br><span class="line">&amp;-------------------------------------------------- 保证所有的值都落在tab之内</span><br><span class="line">hash&amp;oldCap 0000 0000 0000 0000 0000 0000 0000 0011   3</span><br><span class="line"></span><br><span class="line">如果不是0的话则在 16+3的位置</span><br></pre></td></tr></table></figure></p>
<p>线程不安全</p>
<h4 id="ConCurrentHashMap是怎么加锁的"><a href="#ConCurrentHashMap是怎么加锁的" class="headerlink" title="ConCurrentHashMap是怎么加锁的"></a>ConCurrentHashMap是怎么加锁的</h4><p>ConcurrentHashMap 中的key和value都不能为空，会抛出NullPointerException<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/** Implementation for put and putIfAbsent */</span><br><span class="line">   final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</span><br><span class="line">       if (key == null || value == null) throw new NullPointerException();</span><br><span class="line">       int hash = spread(key.hashCode());</span><br><span class="line">       int binCount = 0;</span><br><span class="line">       for (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">           Node&lt;K,V&gt; f; int n, i, fh;</span><br><span class="line">           if (tab == null || (n = tab.length) == 0)</span><br><span class="line">           //初始化要考虑多线程</span><br><span class="line">               tab = initTable();</span><br><span class="line">               //tabAt,getObjectVolatile native线程安全</span><br><span class="line">           else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123;</span><br><span class="line">               //使用cas，为空的时候U.compareAndSwapObject,比较交换，使用native 线程安全</span><br><span class="line">               if (casTabAt(tab, i, null,</span><br><span class="line">                            new Node&lt;K,V&gt;(hash, key, value, null)))</span><br><span class="line">                   break;                   // no lock when adding to empty bin</span><br><span class="line">           &#125;</span><br><span class="line">           else if ((fh = f.hash) == MOVED)</span><br><span class="line">               tab = helpTransfer(tab, f);</span><br><span class="line">           else &#123;</span><br><span class="line">               V oldVal = null;</span><br><span class="line">               //直接锁数组上的Node</span><br><span class="line">               //put数据的时候，在同一个数组下标下，锁，保证安全</span><br><span class="line">               synchronized (f) &#123;</span><br><span class="line">                   if (tabAt(tab, i) == f) &#123;</span><br><span class="line">                      ...</span><br><span class="line">                      ...</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               if (binCount != 0) &#123;</span><br><span class="line">                   if (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                       treeifyBin(tab, i);</span><br><span class="line">                   if (oldVal != null)</span><br><span class="line">                       return oldVal;</span><br><span class="line">                   break;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       //扩容要考虑其它线程</span><br><span class="line">       addCount(1L, binCount);</span><br><span class="line">       return null;</span><br></pre></td></tr></table></figure></p>
<h4 id="对比HashTable直接在方法上进行加锁，锁this"><a href="#对比HashTable直接在方法上进行加锁，锁this" class="headerlink" title="对比HashTable直接在方法上进行加锁，锁this"></a>对比HashTable直接在方法上进行加锁，锁this</h4><p>Hashtable上的put<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public synchronized V put(K key, V value) &#123;</span><br><span class="line">    // Make sure the value is not null 不能为空</span><br><span class="line">    if (value == null) &#123;</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">        // Makes sure the key is not already in the hashtable.</span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    int hash = key.hashCode();//不能为空</span><br><span class="line">    int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Hashtable中的value不能为空，抛出异常NullPointerException；key不能为空，因为null不能获取hashcode();</p>
</blockquote>
<p>这种特性，在分析源码的时候就直接出来的，不用背的，不用背的。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 高级之volatile]]></title>
      <url>https://muxiaobai.github.io/2019/10/12/Thinking-in-java-%E9%AB%98%E7%BA%A7%E4%B9%8Bvolatile/</url>
      <content type="html"><![CDATA[<p>显性的作用就是： 这个变量在修改之后，可以及时更新到另外一个线程。</p>
<h3 id="两个代码"><a href="#两个代码" class="headerlink" title="两个代码"></a>两个代码</h3><p>无volatile<br><img src="/2019/10/12/Thinking-in-java-高级之volatile/1.png" alt="无volatile"></p>
<p>有volatile<br><img src="/2019/10/12/Thinking-in-java-高级之volatile/2.png" alt="有volatile"></p>
<p>看一下汇编是啥样子的</p>
<p><a href="https://sourceforge.net/projects/fcml/files/fcml-1.1.1/hsdis-1.1.1-win32-amd64.zip/download" target="_blank" rel="noopener">下载</a><br>hsdis-1.1.1-win32-amd64.zip放到${JAVA_HOME}\jdk1.8.0_171\jre\bin\server下,先<code>javac xxx.java</code> 编译成xxx.class<br><code>java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly  xxx.class &gt;a.txt</code><br>生成汇编文件</p>
<p><code>java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -version</code> 测试是否安装成功<br>给jvm添加参数<br><code>-server -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:CompileCommand=compileonly,*Test.getInstance</code></p>
<p><img src="/2019/10/12/Thinking-in-java-高级之volatile/3.png" alt="汇编"></p>
<p>在修改有volatile修饰的属性，加有lock add第八行。这个有lock 会刷新缓存</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static volatile boolean stop = false ;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Thread thread = new Thread(()-&gt;&#123;</span><br><span class="line">            int i=0;</span><br><span class="line">            while (!stop)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(&quot;begin start thread&quot;);</span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        stop = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><p><img src="/2019/10/12/Thinking-in-java-高级之volatile/L0.png" alt="CPU三级缓存架构图"></p>
<p>因为CPU高速运转，直接读内存会很慢，又开辟一级二级三级缓存，多核CPU下每一个有独立的一级二级缓存；如果现在来了一个数据存在三级缓存中，第一个Thread读取之后，并修改了值，但没有同步到三级缓存中；这时候第二个线程要读值，他还是只从三级缓存中读取内容，；但有了内存屏障，在第三个读的时候，</p>
<p>volatile 会触发lock add ,触发刷新屏障，Cache</p>
<p>从.java———–&gt;.class编译完成，然后.class 在不同的平台上，对于volatile来说，JVM有不同的实现，一次编写，到处运行<code>Write once, run anywhere</code>,JVM屏蔽各种架构的指令集，例如x86 MMX，SSE等，在window系统上使用window指令，在linux上使用linux指令，最终Java实现了，程序员不用关系各个平台的差异。<br>但对于.net ，需要安装其他的中间件等，才能在非window系统运行。</p>
<p><img src="/2019/10/12/Thinking-in-java-高级之volatile/CPU.PNG" alt="总结适配器模式"></p>
<h3 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h3><p> 锁提供了原子性和可见性</p>
<p>因为某一个线程进入synchronized代码块前后，线程会获得锁，清空工作内存，从主内存拷贝共享变量最新的值到工作内存成为副本，执行代码，将修改后的副本的值刷新回主内存中，线程释放锁。</p>
<p>而获取不到锁的线程会阻塞等待，所以变量的值肯定一直都是最新的。</p>
<p>volatile具有锁的可见性，</p>
<p>每个线程操作数据的时候会把数据从主内存读取到自己的工作内存，如果他操作了数据并且写会了，他其他已经读取的线程的变量副本就会失效了，需要都数据进行操作又要再次去主内存中读取了。<br>volatile保证不同线程对共享变量操作的可见性，也就是说一个线程修改了volatile修饰的变量，当修改写回主内存时，另外一个线程立即看到最新的值。上面的JMM缓存刷新。</p>
<p>为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI（IllinoisProtocol）、MOSI、Synapse、Firefly及DragonProtocol等。</p>
<p>指令重排序（本是为了优化代码，对最终的结果无影响）</p>
<p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = 0;              </span><br><span class="line">boolean flag = false;</span><br><span class="line">i = 1;                //语句1  </span><br><span class="line">flag = true;          //语句2</span><br></pre></td></tr></table></figure></p>
<p>从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。</p>
<h2 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序:"></a>指令重排序:</h2><p>一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p>
<p>比如上面的代码中，语句1和语句2谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句2先执行而语句1后执行。虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？靠的是数据依赖性：</p>
<p>编译器和处理器在重排序时，会遵守数据依赖性，编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序。</p>
<p>不管怎么重排序，单线程下的执行结果不能被改变。</p>
<p>编译器、runtime和处理器都必须遵守as-if-serial语义 ，最终一致。</p>
<p>volatile使用内存屏障保证最终一致。</p>
<h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h2><p>内存屏障分为两种：Load Barrier 和 Store Barrier即读屏障和写屏障。</p>
<p>内存屏障有两个作用：</p>
<ul>
<li>1.阻止屏障两侧的指令重排序；</li>
<li>2.强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。</li>
</ul>
<p>对于Load Barrier来说，在指令前插入Load Barrier，可以让高速缓存中的数据失效，强制从新从主内存加载数据；<br>对于Store Barrier来说，在指令后插入Store Barrier，能让写入缓存中的最新数据更新写入主内存，让其他线程可见。<br>java的内存屏障通常所谓的四种即LoadLoad,StoreStore,LoadStore,StoreLoad实际上也是上述两种的组合，完成一系列的屏障和数据同步功能。</p>
<ul>
<li>LoadLoad屏障：对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</li>
<li>StoreStore屏障：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</li>
<li>LoadStore屏障：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</li>
<li>StoreLoad屏障：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能</li>
</ul>
<p>volatile的内存屏障策略非常严格保守，非常悲观且毫无安全感的心态：</p>
<ul>
<li>在每个volatile写操作前插入StoreStore屏障，在写操作后插入StoreLoad屏障；</li>
<li>在每个volatile读操作前插入LoadLoad屏障，在读操作后插入LoadStore屏障；</li>
</ul>
<p>由于内存屏障的作用，避免了volatile变量和其它指令重排序、线程之间实现了通信，使得volatile表现出了锁的特性。</p>
<p><a href="https://mrbird.cc/Java-Memory-model.html#more" target="_blank" rel="noopener">参考Java 内存模型</a><br><a href="https://juejin.im/post/5ea913d35188256d4576d199?utm_source=gold_browser_extension" target="_blank" rel="noopener">volatile</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[java-常用代码2-future等]]></title>
      <url>https://muxiaobai.github.io/2019/09/29/java-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%812-future%E7%AD%89/</url>
      <content type="html"><![CDATA[<p>远程调用可以合并 10ms执行一次。阻塞队列</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class DemoMoreService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RemoteServiceCall remoteCall;</span><br><span class="line">    //阻塞队列</span><br><span class="line">    LinkedBlockingQueue&lt;Request&gt; queue = new LinkedBlockingQueue&lt;Request&gt;();</span><br><span class="line">    </span><br><span class="line">    public Map&lt;String, Object&gt; doRemote(String orderCode) throws InterruptedException, ExecutionException&#123;</span><br><span class="line">        </span><br><span class="line">        Request request = new Request();</span><br><span class="line">        request.orderCode = orderCode;</span><br><span class="line">        //jdk1.8</span><br><span class="line">        CompletableFuture&lt;Map&lt;String, Object&gt;&gt; future = new CompletableFuture&lt;&gt;();</span><br><span class="line">        request.future = future;</span><br><span class="line">        //队列中</span><br><span class="line">        queue.add(request);</span><br><span class="line">        return future.get();//阻塞状态</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 定时任务 初始化执行</span><br><span class="line">     * init:(). servlet init方法之前调用这个注解的方法，只会被调用一次</span><br><span class="line">     * @author Mu Xiaobai</span><br><span class="line">     * @since JDK 1.8</span><br><span class="line">     */</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        //定时任务两个线程数</span><br><span class="line">        ScheduledExecutorService scheduledExecutorService =Executors.newScheduledThreadPool(2);</span><br><span class="line">       </span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(()-&gt;&#123;</span><br><span class="line">           </span><br><span class="line">            //run</span><br><span class="line">            int size = queue.size();</span><br><span class="line">            if(size == 0)&#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //弹出Request</span><br><span class="line">            List&lt;Request&gt; requests = new ArrayList&lt;&gt;();</span><br><span class="line">            for(int i=0; i&lt;size;i++)&#123;</span><br><span class="line">                Request request = queue.poll();//出队列</span><br><span class="line">                requests.add(request);</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            System.out.println(&quot;10ms 取到的本地请求数：&quot;+size);</span><br><span class="line">            </span><br><span class="line">            //循环requests分离orderCode和future</span><br><span class="line">            List&lt;String&gt; orderCodes = new ArrayList&lt;&gt;();</span><br><span class="line">            for(Request request :requests)&#123;</span><br><span class="line">                orderCodes.add(request.orderCode);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //查询返回结果</span><br><span class="line">            List&lt;Map&lt;String,Object&gt;&gt; responses=remoteCall.getMore(orderCodes);</span><br><span class="line">            System.out.println(responses);</span><br><span class="line">            //分离返回内容</span><br><span class="line">            Map&lt;String,Map&lt;String,Object&gt;&gt;  responseMap = new HashMap&lt;&gt;(); </span><br><span class="line">            for(Map&lt;String,Object&gt; response:responses)&#123;</span><br><span class="line">                String orderCode = response.get(&quot;orderCode&quot;).toString();</span><br><span class="line">                responseMap.put(orderCode, response);</span><br><span class="line">            &#125;</span><br><span class="line">            //结果转发到request</span><br><span class="line">            for(Request request:requests)&#123;</span><br><span class="line">                Map&lt;String, Object&gt; result = responseMap.get(request.orderCode);</span><br><span class="line">                request.future.complete(result);//转发到对应的线程</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;, 0, 10, TimeUnit.MILLISECONDS); //10ms执行</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    class Request&#123;</span><br><span class="line">        String orderCode;</span><br><span class="line">        CompletableFuture&lt;Map&lt;String, Object&gt;&gt; future;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>远程接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Project Name:spring-boot</span><br><span class="line"> * File Name:remoteServiceCall.java</span><br><span class="line"> * Package Name:io.github.muxiaobai.spring_boot.remoteService</span><br><span class="line"> * Date:2019年3月22日上午10:37:05</span><br><span class="line"> * Copyright (c) 2019, All Rights Reserved.</span><br><span class="line"> *</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">package io.github.muxiaobai.spring_boot.remoteService;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * ClassName:remoteServiceCall </span><br><span class="line"> * Function: TODO </span><br><span class="line"> * Reason:	 TODO </span><br><span class="line"> * Date:     2019年3月22日 上午10:37:05 </span><br><span class="line"> * @author   Mu Xiaobai</span><br><span class="line"> * @version  </span><br><span class="line"> * @since    JDK 1.8	 </span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class RemoteServiceCall &#123;</span><br><span class="line">    public Map&lt;String,Object&gt; getOne(String orderCode)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(500);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            </span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        map.put(&quot;orderCode&quot;, orderCode);</span><br><span class="line">        map.put(&quot;hello&quot;, &quot;hello&quot;);</span><br><span class="line">        return map ;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public Map&lt;String,Object&gt; getTwo(String orderCode)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(500);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            </span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        map.put(&quot;orderCode2&quot;, orderCode);</span><br><span class="line">        map.put(&quot;hello2&quot;, &quot;hello2&quot;);</span><br><span class="line">        return map ;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;Map&lt;String,Object&gt;&gt; getMore(List&lt;String&gt; orderCodes)&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">        for(String orderCode: orderCodes)&#123;</span><br><span class="line">            Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">            map.put(&quot;code&quot;, orderCode);</span><br><span class="line">            map.put(&quot;hello&quot;, &quot;hello&quot;);</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        return list ;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="多线程-串行，并行futuretask-线程池并行"><a href="#多线程-串行，并行futuretask-线程池并行" class="headerlink" title="多线程  串行，并行futuretask  线程池并行"></a>多线程  串行，并行futuretask  线程池并行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Project Name:spring-boot</span><br><span class="line"> * File Name:DemoService.java</span><br><span class="line"> * Package Name:io.github.muxiaobai.spring_boot.service</span><br><span class="line"> * Date:2019年3月21日下午7:31:58</span><br><span class="line"> * Copyright (c) 2019, All Rights Reserved.</span><br><span class="line"> *</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">package io.github.muxiaobai.spring_boot.service;</span><br><span class="line"></span><br><span class="line">import io.github.muxiaobai.spring_boot.remoteService.RemoteServiceCall;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Propagation;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * ClassName:DemoService </span><br><span class="line"> * Function: TODO </span><br><span class="line"> * Reason:	 TODO </span><br><span class="line"> * Date:     2019年3月21日 下午7:31:58 </span><br><span class="line"> * @author   Mu Xiaobai</span><br><span class="line"> * @version  </span><br><span class="line"> * @since    JDK 1.8	 </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class DemoMoreThreadService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RemoteServiceCall remoteCall;</span><br><span class="line">    </span><br><span class="line">    protected static ExecutorService threads = Executors.newFixedThreadPool(10);</span><br><span class="line">    /**</span><br><span class="line">     * 使用线程池并行</span><br><span class="line">     * doExecPoolRemote:().</span><br><span class="line">     * @author Mu Xiaobai</span><br><span class="line">     * @param orderCode</span><br><span class="line">     * @return</span><br><span class="line">     * @throws InterruptedException</span><br><span class="line">     * @throws ExecutionException</span><br><span class="line">     * @since JDK 1.8</span><br><span class="line">     */</span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">    public Map&lt;String, Object&gt; doExecPoolRemote(String orderCode) throws InterruptedException, ExecutionException&#123;</span><br><span class="line">        System.out.println(&quot;sssss&quot;);</span><br><span class="line">        Callable&lt;Map&lt;String, Object&gt;&gt; callable =  new Callable&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Map&lt;String, Object&gt; call() throws Exception &#123;</span><br><span class="line">                return remoteCall.getOne(orderCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;; </span><br><span class="line">      </span><br><span class="line">        Callable&lt;Map&lt;String, Object&gt;&gt; callable1 =  new Callable&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Map&lt;String, Object&gt; call() throws Exception &#123;</span><br><span class="line">                return remoteCall.getTwo(orderCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;; </span><br><span class="line">        FutureTask&lt;Map&lt;String, Object&gt;&gt; futureTask = new FutureTask&lt;&gt;(callable);</span><br><span class="line">        FutureTask&lt;Map&lt;String, Object&gt;&gt; futureTask1 = new FutureTask&lt;&gt;(callable1);</span><br><span class="line">        </span><br><span class="line">        threads.submit(futureTask);</span><br><span class="line">        threads.submit(futureTask1);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line">        result.putAll(futureTask.get());</span><br><span class="line">        result.putAll(futureTask1.get());</span><br><span class="line">        return result;</span><br><span class="line">&#125;</span><br><span class="line">    /**</span><br><span class="line">     * 使用线程并行</span><br><span class="line">     * doThreadRemote:().</span><br><span class="line">     * @author Mu Xiaobai</span><br><span class="line">     * @param orderCode</span><br><span class="line">     * @return</span><br><span class="line">     * @throws InterruptedException</span><br><span class="line">     * @throws ExecutionException</span><br><span class="line">     * @since JDK 1.8</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;String, Object&gt; doThreadRemote(String orderCode) throws InterruptedException, ExecutionException&#123;</span><br><span class="line">        </span><br><span class="line">        Callable&lt;Map&lt;String, Object&gt;&gt; callable =  new Callable&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Map&lt;String, Object&gt; call() throws Exception &#123;</span><br><span class="line">                return remoteCall.getOne(orderCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;; </span><br><span class="line">        </span><br><span class="line">        Callable&lt;Map&lt;String, Object&gt;&gt; callable1 =  new Callable&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Map&lt;String, Object&gt; call() throws Exception &#123;</span><br><span class="line">                return remoteCall.getTwo(orderCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;; </span><br><span class="line">        </span><br><span class="line">        FutureTask&lt;Map&lt;String, Object&gt;&gt; futureTask = new FutureTask&lt;&gt;(callable);</span><br><span class="line">        new Thread(futureTask).start();</span><br><span class="line">        FutureTask&lt;Map&lt;String, Object&gt;&gt; futureTask1 = new FutureTask&lt;&gt;(callable1);</span><br><span class="line">        new Thread(futureTask1).start();</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line">        result.putAll(futureTask.get());</span><br><span class="line">        result.putAll(futureTask1.get());</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 串行</span><br><span class="line">     * doEachRemote:().</span><br><span class="line">     * @author Mu Xiaobai</span><br><span class="line">     * @param orderCode</span><br><span class="line">     * @return</span><br><span class="line">     * @throws InterruptedException</span><br><span class="line">     * @throws ExecutionException</span><br><span class="line">     * @since JDK 1.8</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;String, Object&gt; doEachRemote(String orderCode) throws InterruptedException, ExecutionException&#123;</span><br><span class="line">       </span><br><span class="line">        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line">        result.putAll(remoteCall.getOne(orderCode));</span><br><span class="line">        result.putAll(remoteCall.getTwo(orderCode));</span><br><span class="line">       </span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[java线上代码监控-工具-jprofiler]]></title>
      <url>https://muxiaobai.github.io/2019/09/26/java%E7%BA%BF%E4%B8%8A%E4%BB%A3%E7%A0%81%E7%9B%91%E6%8E%A7-%E5%B7%A5%E5%85%B7-jprofiler/</url>
      <content type="html"><![CDATA[<p>启动一个jvm进程</p>
<p>java -jar xxx.0.0.1.jar</p>
<p>服务器解压<a href="https://download-gcdn.ej-technologies.com/jprofiler/jprofiler_linux_11_0_2.tar.gz" target="_blank" rel="noopener">服务器端</a><br><a href="https://download-gcdn.ej-technologies.com/jprofiler/jprofiler_windows-x64_11_0_2.zip" target="_blank" rel="noopener">window客户端</a></p>
<p>服务器</p>
<ul>
<li>解压服务器</li>
<li>启动./jprofiler11.0.2/bin.jpenable</li>
<li>选择要监控功能的jvm</li>
<li>选择使用远程GUI监控</li>
<li>设置端口</li>
</ul>
<p>客户端</p>
<p>新建一个remote Session</p>
<h3 id="分析-dump—-gt-hprof"><a href="#分析-dump—-gt-hprof" class="headerlink" title="分析 dump—-&gt;hprof"></a>分析 dump—-&gt;hprof</h3><p><img src="/2019/09/26/java线上代码监控-工具-jprofiler/filter.png" alt><br><img src="/2019/09/26/java线上代码监控-工具-jprofiler/java.util.png" alt><br><img src="/2019/09/26/java线上代码监控-工具-jprofiler/class.png" alt></p>
<p>主要筛选自 java.util集合包中或者java.lang或者自己写的包.类</p>
<p>class 按类寻找，Biggest Objects 大对象</p>
<p>1、打开hprof文件:进入classes视图，根据（instance count和Size）基本可以确定哪个类的对象出现问题。比如(java.util.LinkedList$Entry类有2731062个实例)。<br>2、根据常识，应该java.util.LinkedList类有个对象的Size应该很大。<br>3、查看java.util.LinkedList，右键 use Selected Instance<br>4、选择Outgoing reference 视图(可以查看对象拥有的其他对象句柄,也就是对象属性)。看Retained size列（或者size属性）（有的时候Retained size不灵光），看大小就能确定是哪个对象内存溢出了。<br>5、找到对应的对象，右键use Selected Instance<br>6、选择Incoming refrences视图（该视图显示哪些对象拥有本对象的句柄），在这个视图下有个show Paths To GC Root的按钮，点击，基本能确定我们哪开代码有问题了。</p>
<p>最终找到大对象的或者多对象的类，优化类的代码</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[devops之docker]]></title>
      <url>https://muxiaobai.github.io/2019/08/31/devops%E4%B9%8Bdocker/</url>
      <content type="html"><![CDATA[<hr>
<p>官网 hub.docker.com</p>
<p>docker login/logout</p>
<h4 id="远程镜像"><a href="#远程镜像" class="headerlink" title="远程镜像"></a>远程镜像</h4><p>docker pull mysql<br>docker push<br>docker search </p>
<h3 id="本地镜像-image"><a href="#本地镜像-image" class="headerlink" title="本地镜像 image"></a>本地镜像 image</h3><p>docker images<br>docker rmi</p>
<p>导入导出镜像<br>docker load -i base.tar<br>docker save -o base.tar  hub.docker.com:latest</p>
<h3 id="网络-network"><a href="#网络-network" class="headerlink" title="网络 network"></a>网络 network</h3><p>172.17.0.1/16 以下都可以是使用</p>
<p>docker network ls<br>docker network inspect mysql-net<br>docker network create –subnet=172.19.0.0/24 mysql-net</p>
<h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><p>docker volume create –name v1<br>docker volumn inspect</p>
<h3 id="容器-container"><a href="#容器-container" class="headerlink" title="容器 container"></a>容器 container</h3><p>docker run -d --name mmmysql -p 3300:3306 -m 500M<br>-v v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --privileged --net=mysql-net –ip 172.19.0.2 mysql:latest</p>
<p>mvn clean clean package docker:build -Dmaven.test.skip=true</p>
<p>docker run -d --name tomcat1 -p 3300:3306 --net mysql-net --ip 172.19.0.2 -v v1:/var/lib/mysql mytomcat:latest</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>docker ps -a<br>docker ps<br>docker exec -it mmmysql /bin/bash<br>docker logs -f -t  –tail=100 mmmysql  最新的100行<br>docker inspect mmmysql</p>
<hr>
<h4 id="修改挂载目录"><a href="#修改挂载目录" class="headerlink" title="修改挂载目录"></a>修改挂载目录</h4><p>docker添加挂载目录:先在docker容器里创建目录/import<br>1.关闭docker:/etc/init.d/docker stop<br>2.sudo su切换到root身份，cd /var/lib/docker/containers/容器id/，进入对应容器目录<br>3.vi hostconfig.json，修改如下，将容器目录/import绑定到主机/data 目录:</p>
<p>“Binds”: [“/data:/import”],</p>
<p>4.vi config.v2.json,修改如下，添加MountPoints:</p>
<p>“MountPoints”: {</p>
<p>“/import”: {<br>            “Source”: “/data”,<br>            “Destination”: “/import”,<br>            “RW”: true,<br>            “Name”: “”,<br>            “Driver”: “”,<br>            “Type”: “bind”,<br>            “Propagation”: “rprivate”,<br>            “Spec”: {<br>                “Type”: “bind”,<br>                “Source”: “/data”,<br>                “Target”: “/import”<br>            },<br>            “SkipMountpointCreation”: false<br>        }<br>},  </p>
<p>5.启动docker:/etc/init.d/docker start</p>
<p>最后docker exec -it 容器id /bin/bash进入ls -l /就可以看见import目录</p>
<hr>
<hr>
<p>docker-compose.yml docker 编排</p>
<p><img src="/2019/08/31/devops之docker/docker.PNG" alt="docker请求"></p>
<p>K8s</p>
<h4 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h4><p>Pod  (container-mysql1,container-mysql2,container-mysql3)<br>一个Pod包含一类的container</p>
<h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>Node一台机器多个Pod<br>Kubelet操作Pod<br>docker<br><img src="/2019/08/31/devops之docker/Node.PNG" alt="Node Pod"></p>
<h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>label:不同的Node内部的Pod，同一个label 叫Service<br>mysql1  mysql2<br><img src="/2019/08/31/devops之docker/Service.PNG" alt="Service label"></p>
<p>####<br>master Node Worker Node 调度算法：Scheduler APIServer ControllerManager<br><img src="/2019/08/31/devops之docker/kub.PNG" alt="kub结构"><br>ReplicaSet 对Pod进行扩缩容</p>
<p>对Pod滚动更新：Deployment</p>
<p>分布式ETCD数据存储</p>
<p>使用者通过Kubectl操作K8s和docker<br><img src="/2019/08/31/devops之docker/useropera.PNG" alt="Node Pod"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> devops </category>
            
        </categories>
        
        
        <tags>
            
            <tag> devops </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java线上代码监控-工具-arthas]]></title>
      <url>https://muxiaobai.github.io/2019/08/16/java%E7%BA%BF%E4%B8%8A%E4%BB%A3%E7%A0%81%E7%9B%91%E6%8E%A7-%E5%B7%A5%E5%85%B7-arthas/</url>
      <content type="html"><![CDATA[<p>强力推荐alibaba的arthas</p>
<h2 id="arthas"><a href="#arthas" class="headerlink" title="arthas"></a>arthas</h2><p>官网<a href="https://alibaba.github.io/arthas" target="_blank" rel="noopener">https://alibaba.github.io/arthas</a></p>
<p>教程<a href="https://alibaba.github.io/arthas/arthas-tutorials?language=cn&amp;id=arthas-basics" target="_blank" rel="noopener">Arthas 基础教程</a></p>
<p>教程<a href="https://alibaba.github.io/arthas/arthas-tutorials?language=cn&amp;id=arthas-advanced" target="_blank" rel="noopener">Arthas 进阶教程</a></p>
<p>   参数：–tunnel-server ‘ws://47.75.156.201:7777/ws’<br>默认的是<br>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://alibaba.github.io/arthas/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar --target-ip 0.0.0.0</span><br></pre></td></tr></table></figure>
<p>选择对应的main</p>
<p>通用命令</p>
<ul>
<li>keymap 快捷键</li>
<li>help</li>
<li>Q ctrl+c 退出当前命令</li>
</ul>
<p>常用命令</p>
<ul>
<li>dashboard 实时看板</li>
<li>thread 查线程</li>
<li>jvm 当前jvm信息</li>
<li>classloader</li>
<li>sysprop(sysenv) 系统参数(System Property)(System Environment Variables)</li>
<li>jad 反编译</li>
<li>stack 调用栈</li>
<li>trace 调用时间</li>
<li>watch 方法执行数据观测（实时调用）</li>
<li>sc (search class)查jvm加载的类 -d 加载的信息 classLoaderHash 哪一个ClassLoader加载的类</li>
<li>sm (search method) 查class方法</li>
<li>mc (Memory Compiler) -c 使用指定的ClassLoader编译java javac编译</li>
<li>redefine 热更新代码</li>
<li>ognl 动态执行代码</li>
<li>tt 可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</li>
</ul>
<h3 id="暂存运行状态文件hpof"><a href="#暂存运行状态文件hpof" class="headerlink" title="暂存运行状态文件hpof"></a>暂存运行状态文件hpof</h3><p>类似jmap命令的heap dump功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapdump /tmp/dump.hprof</span><br></pre></td></tr></table></figure>
<p>只dump live对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[arthas@58205]$ heapdump --live /tmp/dump.hprof</span><br><span class="line">Dumping heap to /tmp/dump.hprof...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure>
<p>分析hprof文件工具</p>
<ul>
<li>使用eclipse的MAT (Memory Analyzer Tools)</li>
<li>或者IDEA 的jprofiler插件 <a href="https://blog.csdn.net/wytocsdn/article/details/79258247" target="_blank" rel="noopener">IDEA 配置执行器</a> 需要装jprofiler执行器<a href="https://www.ej-technologies.com/download/jprofiler/version_92" target="_blank" rel="noopener">jprofiler下载</a> <a href="https://www.cnblogs.com/jifeng/p/3336408.html" target="_blank" rel="noopener">license</a>  <a href="https://blog.csdn.net/vicky_pyh/article/details/88797514" target="_blank" rel="noopener">jprofiler 使用</a></li>
<li>IMB 的heapAnalyzer</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">按默认选择“Single or evaluation license”</span><br><span class="line">Name 和 Company 随意</span><br><span class="line">-----------------------忧郁的分割线---------------------------</span><br><span class="line">L-Larry_Lau@163.com#23874-hrwpdp1sh1wrn#0620</span><br><span class="line">L-Larry_Lau@163.com#36573-fdkscp15axjj6#25257</span><br><span class="line">L-Larry_Lau@163.com#5481-ucjn4a16rvd98#6038</span><br><span class="line">L-Larry_Lau@163.com#99016-hli5ay1ylizjj#27215</span><br><span class="line">L-Larry_Lau@163.com#40775-3wle0g1uin5c1#0674</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">L-Larry_Lau@163.com#7009-14frku31ynzpfr#20176</span><br><span class="line">L-Larry_Lau@163.com#49604-1jfe58we9gyb6#5814</span><br><span class="line">L-Larry_Lau@163.com#25531-1qcev4yintqkj#23927</span><br><span class="line">L-Larry_Lau@163.com#96496-1qsu1lb1jz7g8w#23479</span><br><span class="line">L-Larry_Lau@163.com#20948-11amlvg181cw0p#171159</span><br></pre></td></tr></table></figure>
<p>JRebel和JProfiler同时运行</p>
<p>如果IDEA中配置了JRebel热部署，要想JRebel和JProfiler同时运行，就要改手动管理JProfiler session了。<br>在 Run–Debug Configurations窗口JRebel Debug tab页中配置Environment Variables属性 CATALINA_OPTS：<br>使用springboot不成功，<br>CATALINA_OPTS=-agentpath:E:\tools\jprofiler_windows-x64_9_2_1\jprofiler9\bin\windows-x64\jprofilerti.dll=port=8849,nowait,id=81,config=C:\Users\Administrator.jprofiler9\config.xml</p>
<p>调用请求: curl -w “@curl-time.txt” <a href="http://127.0.0.1:8080/hello" target="_blank" rel="noopener">http://127.0.0.1:8080/hello</a></p>
<p>###常用</p>
<p>thread -n 5<br>2）查看某个函数的调用堆栈 打印前五名最消耗CPU的线程，可以及时找到CPU过高的代码位置</p>
<p>stack &lt;类全包名&gt; &lt;函数名&gt; 往来的地方查找 调用栈<br>3）查看某个函数的哪个子调用最慢，耗时最久的调用会标红显示，可以方便找出某个功能中最耗时的操作</p>
<p>trace &lt;类全包名&gt; &lt;函数名&gt; 继续往下查找 追溯追踪<br>4）监控某个函数的调用统计数据，包括总调用次数，平均运行时间，成功率等信息</p>
<p>monitor &lt;类全包名&gt; &lt;函数名&gt;</p>
<h3 id="热更新代码"><a href="#热更新代码" class="headerlink" title="热更新代码"></a>热更新代码</h3><p>sc -d xxx 查找该类的classloader</p>
<p>redfine -d  hash  xxx 更新该类， 注明：不能添加和修改方法，只能修改方法体内部的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">反编译 修改 编译 热更新</span><br><span class="line">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br><span class="line">vim /tmp/UserController.java</span><br><span class="line">sc com.example.demo.arthas.user.UserController -d </span><br><span class="line">mc /tmp/UserController.java -d /tmp -c [classLoaderHash]</span><br><span class="line">redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>
<p>实际上可以直接把本机的class redefine 线上的很可能编译不通过，不过要保证本机代码和线上的代码同步</p>
<p>可以使用changejarfile.sh 只更新class类<br>./changejarfile xxx.jar xxx.class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#需要替换的包名称</span><br><span class="line">bmc=$1</span><br><span class="line">#需要替换的文件名称</span><br><span class="line">hhwjmc=$2</span><br><span class="line">#找到替换文件路径</span><br><span class="line">thwjlj=`jar -tvf \$bmc|grep \$hhwjmc|awk &apos;&#123;print \$NF&#125;&apos;`</span><br><span class="line"></span><br><span class="line">echo $bmc</span><br><span class="line">echo $hhwjmc</span><br><span class="line">echo $thwjlj</span><br><span class="line">#把要替换的文件解压出来</span><br><span class="line">jar -xvf $bmc $thwjlj</span><br><span class="line">#删掉原文件</span><br><span class="line">rm -f $thwjlj</span><br><span class="line">#换掉文件</span><br><span class="line">cp thwj/$hhwjmc $thwjlj</span><br><span class="line">#重新将文件加入到jar包中</span><br><span class="line">jar -uvf $bmc $thwjlj</span><br><span class="line">echo &apos;替换完成&apos;</span><br><span class="line">#删除解压文件</span><br><span class="line">rm -rf $thwjlj</span><br></pre></td></tr></table></figure></p>
<p><a href="https://mp.weixin.qq.com/s/um6XQVv1JvHM3n7NslzB0Q" target="_blank" rel="noopener">热更新</a></p>
<h2 id="常用和spring有关的"><a href="#常用和spring有关的" class="headerlink" title="常用和spring有关的"></a>常用和spring有关的</h2><p>从spring-mvc入手</p>
<h3 id="内部：（该方法内部继续调用其他方法）"><a href="#内部：（该方法内部继续调用其他方法）" class="headerlink" title="内部：（该方法内部继续调用其他方法）"></a>内部：（该方法内部继续调用其他方法）</h3><p>trace 方法内部调用路径，并输出方法路径上的每个节点上耗时 -j跳过jdkclass<br>Servlet Filter 转发 哪一个Controller</p>
<p>trace javax.servlet.Servlet <em><br>trace javax.servlet.Filter </em><br>trace org.springframework.web.servlet.DispatcherServlet *<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[arthas@31978]$ trace  org.springframework.web.servlet.DispatcherServlet *</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:48) cost in 214 ms.</span><br><span class="line">`---ts=2020-05-07 11:28:07;thread_name=http-nio-18201-exec-5;id=40;is_daemon=true;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@73a2e526</span><br><span class="line">    `---[196.804639ms] org.springframework.web.servlet.DispatcherServlet:doService()</span><br><span class="line">        +---[0.025295ms] org.springframework.web.servlet.DispatcherServlet:logRequest() #910</span><br><span class="line">        |   `---[0.013937ms] org.springframework.web.servlet.DispatcherServlet:logRequest()</span><br><span class="line">        |       `---[0.001864ms] org.springframework.core.log.LogFormatUtils:traceDebug() #955</span><br><span class="line">        +---[0.001121ms] org.springframework.web.util.WebUtils:isIncludeRequest() #915</span><br><span class="line">        +---[7.43E-4ms] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() #927</span><br><span class="line">        +---[0.001808ms] javax.servlet.http.HttpServletRequest:setAttribute() #927</span><br><span class="line">        +---[5.21E-4ms] javax.servlet.http.HttpServletRequest:setAttribute() #928</span><br><span class="line">        +---[6.67E-4ms] javax.servlet.http.HttpServletRequest:setAttribute() #929</span><br><span class="line">        +---[0.017824ms] org.springframework.web.servlet.DispatcherServlet:getThemeSource() #930</span><br><span class="line">        |   `---[0.009355ms] org.springframework.web.servlet.DispatcherServlet:getThemeSource()</span><br><span class="line">        |       `---[min=3.26E-4ms,max=4.25E-4ms,total=7.51E-4ms,count=2] org.springframework.web.servlet.DispatcherServlet:getWebApplicationContext() #803</span><br><span class="line">        +---[8.34E-4ms] javax.servlet.http.HttpServletRequest:setAttribute() #930</span><br><span class="line">        +---[0.002303ms] org.springframework.web.servlet.FlashMapManager:retrieveAndUpdate() #933</span><br><span class="line">        +---[0.001279ms] org.springframework.web.servlet.FlashMap:&lt;init&gt;() #937</span><br><span class="line">        +---[5.06E-4ms] javax.servlet.http.HttpServletRequest:setAttribute() #937</span><br><span class="line">        +---[4.63E-4ms] javax.servlet.http.HttpServletRequest:setAttribute() #938</span><br><span class="line">        +---[196.6798ms] org.springframework.web.servlet.DispatcherServlet:doDispatch() #942 这里时间最长196ms doDispatch</span><br><span class="line">        |   `---[196.653121ms] org.springframework.web.servlet.DispatcherServlet:doDispatch()</span><br><span class="line">        |       +---[0.001231ms] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() #1004</span><br><span class="line">        |       +---[0.074447ms] org.springframework.web.servlet.DispatcherServlet:checkMultipart() #1011</span><br><span class="line">        |       |   `---[0.049658ms] org.springframework.web.servlet.DispatcherServlet:checkMultipart()</span><br><span class="line">        |       |       `---[0.03953ms] org.springframework.web.multipart.MultipartResolver:isMultipart() #1164</span><br><span class="line">        |       +---[0.095085ms] org.springframework.web.servlet.DispatcherServlet:getHandler() #1015</span><br><span class="line">        |       |   `---[0.081615ms] org.springframework.web.servlet.DispatcherServlet:getHandler()</span><br><span class="line">        |       |       `---[min=0.010315ms,max=0.056882ms,total=0.067197ms,count=2] org.springframework.web.servlet.HandlerMapping:getHandler() #1232</span><br><span class="line">        |       +---[7.93E-4ms] org.springframework.web.servlet.HandlerExecutionChain:getHandler() #1022</span><br><span class="line">        |       +---[0.02294ms] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter() #1022</span><br><span class="line">        |       |   `---[0.010588ms] org.springframework.web.servlet.DispatcherServlet:getHandlerAdapter()</span><br><span class="line">        |       |       `---[0.00129ms] org.springframework.web.servlet.HandlerAdapter:supports() #1268</span><br><span class="line">        |       +---[8.17E-4ms] javax.servlet.http.HttpServletRequest:getMethod() #1025</span><br><span class="line">        |       +---[6.104335ms] org.springframework.web.servlet.HandlerExecutionChain:applyPreHandle() #1034</span><br><span class="line">        |       +---[7.69E-4ms] org.springframework.web.servlet.HandlerExecutionChain:getHandler() #1039</span><br><span class="line">        |       +---[190.13169ms] org.springframework.web.servlet.HandlerAdapter:handle() #1039   最终落在handle中</span><br><span class="line">        |       +---[0.001149ms] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() #1041</span><br><span class="line">        |       +---[0.087605ms] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName() #1045</span><br><span class="line">        |       |   `---[0.019858ms] org.springframework.web.servlet.DispatcherServlet:applyDefaultViewName()</span><br><span class="line">        |       +---[0.004415ms] org.springframework.web.servlet.HandlerExecutionChain:applyPostHandle() #1046</span><br><span class="line">        |       +---[0.075878ms] org.springframework.web.servlet.DispatcherServlet:processDispatchResult() #1056</span><br><span class="line">        |       |   `---[0.034479ms] org.springframework.web.servlet.DispatcherServlet:processDispatchResult()</span><br><span class="line">        |       |       +---[0.001589ms] org.apache.commons.logging.Log:isTraceEnabled() #1123</span><br><span class="line">        |       |       +---[0.002227ms] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() #1128</span><br><span class="line">        |       |       +---[4.4E-4ms] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() #1128</span><br><span class="line">        |       |       `---[0.002093ms] org.springframework.web.servlet.HandlerExecutionChain:triggerAfterCompletion() #1134</span><br><span class="line">        |       `---[3.93E-4ms] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() #1066</span><br><span class="line">        +---[7.31E-4ms] org.springframework.web.context.request.async.WebAsyncUtils:getAsyncManager() #945</span><br><span class="line">        `---[3.94E-4ms] org.springframework.web.context.request.async.WebAsyncManager:isConcurrentHandlingStarted() #945</span><br></pre></td></tr></table></figure></p>
<h3 id="外部：（其他方法调用该方法的路径）"><a href="#外部：（其他方法调用该方法的路径）" class="headerlink" title="外部：（其他方法调用该方法的路径）"></a>外部：（其他方法调用该方法的路径）</h3><p>stack org.springframework.web.servlet.DispatcherServlet *<br>stack 输出当前方法被调用的调用路径<br>很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。</p>
<h3 id="watch-查看当前方法的输入，输出，异常等"><a href="#watch-查看当前方法的输入，输出，异常等" class="headerlink" title="watch 查看当前方法的输入，输出，异常等"></a>watch 查看当前方法的输入，输出，异常等</h3><p>watch org.springframework.web.servlet.DispatcherServlet getHandler returnObj<br>是哪一个controller调用,查url对应的controller</p>
<p>tt  -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod<br>tt -i 1000 -w ‘target.getApplicationContext()’</p>
<h2 id="其它监控"><a href="#其它监控" class="headerlink" title="其它监控"></a>其它监控</h2><ul>
<li>Druid连接池 数据库监控 参考 <a href="https://muxiaobai.github.io/2018/11/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%91%E6%8E%A7-Druid%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE/">数据库监控-Druid监控配置</a></li>
<li>Javamelody 传统应用 参考 <a href="https://muxiaobai.github.io/2017/08/02/Javamelody-%E5%B7%A5%E5%85%B7/">Javamelody 工具</a></li>
<li>jre自带的工具 jconsole jvisualvm参考 <a href="https://muxiaobai.github.io/2018/11/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7/">深入理解JVM之远程监控</a></li>
</ul>
<p><img src="/2019/08/16/java线上代码监控-工具-arthas/arthas.png" alt="参考"></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[git的一些其它操作]]></title>
      <url>https://muxiaobai.github.io/2019/07/29/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8Bgit%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h4 id="git-拉取代码失败"><a href="#git-拉取代码失败" class="headerlink" title="git 拉取代码失败"></a>git 拉取代码失败</h4><p>解决方法很简单，在git clone时加上–depth=1即可解决</p>
<blockquote>
<p>depth用于指定克隆深度，为1即表示只克隆最近一次commit.</p>
</blockquote>
<p>这种方法克隆的项目只包含最近的一次commit的一个分支，体积很小，即可解决文章开头提到的项目过大导致Timeout的问题，但会产生另外一个问题，他只会把默认分支clone下来，其他远程分支并不在本地，所以这种情况下，需要用如下方法拉取其他分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git clone --depth 1 https://github.com/dogescript/xxxxxxx.git</span><br><span class="line">$ git remote set-branches origin &apos;remote_branch_name&apos;</span><br><span class="line">$ git fetch --depth 1 origin remote_branch_name</span><br><span class="line">$ git checkout remote_branch_name</span><br></pre></td></tr></table></figure></p>
<p>只克隆master 分支 深度为1<br><code>git clone -b master  --depth 1 https://github.com/dogescript/xxxxxxx.git</code></p>
<p>压缩代码<br><code>git config  --add  core.compression -1</code><br>或者<br><code>git config  --global  core.compression -1</code></p>
<p>compression 是压缩的意思，从 clone 的终端输出就知道，服务器会压缩目标文件，然后传输到客户端，客户端再解压。取值为 [-1, 9]，-1 以 zlib 为默认压缩库，0 表示不进行压缩，1..9 是压缩速度与最终获得文件大小的不同程度的权衡，数字越大，压缩越慢，当然得到的文件会越小。</p>
<p>可以增加git的缓存大小</p>
<p><code>git config --global http.postBuffer 1048576000</code></p>
<p>将http.postBuffer设置的尽量大，例如git config –global http.postBuffer 524288000 （500M）<br>git config –global http.postBuffer 1048576000 (1G)。再大的应该是依次类推吧</p>
<h4 id="或者使用git-clone"><a href="#或者使用git-clone" class="headerlink" title="或者使用git@  clone"></a>或者使用git@  clone</h4><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen.exe -t rsa -C &quot;xxxx@gmail.com&quot;</span><br><span class="line">Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">输入密码，push 的时候的密码</span><br></pre></td></tr></table></figure>
<p>验证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx@xxx MINGW64 ~/.ssh</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<p>再使用 <code>git clone git@github.com:xxxx/xxxx.git</code></p>
<h4 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h4><p>git config –global user.name<br>git config –global user.email</p>
<p>git config -l<br>git config  –global -l  全局 展示<br>git config  –local -l 本仓库</p>
<p>清除账号密码<br>git config –local –unset credential.helper</p>
<p>git config  –local  credential.helper store</p>
<h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p>先把vscode作为git默认编辑器</p>
<p>git config –global core.editor “code –wait”</p>
<p>用vscode 打开 .gitconfig文件</p>
<p>git config –global -e</p>
<p>在里面加上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[diff]</span><br><span class="line">    tool = default-difftool</span><br><span class="line">[difftool &quot;default-difftool&quot;]</span><br><span class="line">    cmd = code --wait --diff $LOCAL $REMOTE</span><br></pre></td></tr></table></figure>
<p>这时候运行git difftool，vscode 就作为默认difftool打开了</p>
<h4 id="git-add-回退"><a href="#git-add-回退" class="headerlink" title="git add 回退"></a>git add 回退</h4><p>git status 先看一下add 中的文件<br>git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了<br>git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了</p>
<h4 id="git-commit-回退"><a href="#git-commit-回退" class="headerlink" title="git commit 回退"></a>git commit 回退</h4><p><code>git reset --soft HEAD^</code>这样就成功的撤销了你的commit<br>注意，仅仅是撤回commit操作，您写的代码仍然保留。</p>
<p>HEAD^的意思是上一个版本，也可以写成HEAD~1</p>
<p>如果你进行了2次commit，想都撤回，可以使用HEAD~2</p>
<p>–soft<br>不删除工作空间改动代码，撤销commit，不撤销git add . </p>
<h4 id="修改远程仓库-origin，更换地址"><a href="#修改远程仓库-origin，更换地址" class="headerlink" title="修改远程仓库 origin，更换地址"></a>修改远程仓库 origin，更换地址</h4><p>查看远程地址</p>
<p>git remote -v  </p>
<p>移除origin远程地址</p>
<p>git remote rm origin</p>
<p>添加origin 远程地址</p>
<p>git remote add origin <a href="https://github.com/muxiaobai/xxx" target="_blank" rel="noopener">https://github.com/muxiaobai/xxx</a></p>
<p>拉取origin下的代码</p>
<p>git fetch origin</p>
<h3 id="已存在的git仓库更换地址"><a href="#已存在的git仓库更换地址" class="headerlink" title="已存在的git仓库更换地址"></a>已存在的git仓库更换地址</h3><p>cd existing_repo<br>git remote rename origin old-origin<br>git remote add origin <a href="http://192.168.120.63/xxx/xxx.git" target="_blank" rel="noopener">http://192.168.120.63/xxx/xxx.git</a><br>git push -u origin –all<br>git push -u origin –tags</p>
<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>查看远程和本地分支<br>git branch -a</p>
<p>创建并切换dev 分支<br>git checkout -b dev</p>
<p>切换到dev分支<br>git checkout dev</p>
<p>删除远程xxx分支<br>git remote rm xxx</p>
<h3 id="新分支"><a href="#新分支" class="headerlink" title="新分支"></a>新分支</h3><p>新分支<br>git branch -b newbranch</p>
<p>提交,创建远程分支<br>git push origin newbranch:remotebranch</p>
<p>修改指向<br>git push –set-upstream origin newbranch</p>
<p> 关联本地分支指向<br>git branch –set-upstream-to=origin/remote_branch newbranch</p>
<p>#### </p>
<p>首先，git fetch –all  取回远程库的所有修改；<br>然后，git reset –hard origin/master<br>指向远程库origin的master</p>
<h4 id="回滚上次提交"><a href="#回滚上次提交" class="headerlink" title="回滚上次提交"></a>回滚上次提交</h4><p>git reset --hard HEAD^<br>git log<br>git reset commit_id</p>
<h3 id="每个人的数据库连接信息不一样，可以选择忽略"><a href="#每个人的数据库连接信息不一样，可以选择忽略" class="headerlink" title="每个人的数据库连接信息不一样，可以选择忽略"></a>每个人的数据库连接信息不一样，可以选择忽略</h3><p>具体操作如下：</p>
<p>在命令行中输入</p>
<p>git update-index –assume-unchanged [file-path]<br>命令中的file-path 就是需要忽略提价的文件的路径</p>
<p>如果需要恢复提交，使用：</p>
<p>git update-index –no-assume-unchanged [file-path]</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tools-ide快捷操作]]></title>
      <url>https://muxiaobai.github.io/2019/06/27/tools-ide%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="vs-Code"><a href="#vs-Code" class="headerlink" title="vs Code"></a>vs Code</h2><p>GitLens git 操作<br>vscode-icons 文件图标<br>Beautify 美化代码<br>CSS Peek 从html的class跳转到css文件对应的位置<br>IntelliSense for CSS class names in HTML 自动提示CSS的class<br>Markdown Preview markdown 预览</p>
<p><img src="/2019/06/27/tools-ide快捷操作/vscodeplugins.png" alt="vscode 插件"></p>
<h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p>sublime 工具插件<br>package control<br>ConvertToUTF8</p>
<p>激活sublime</p>
<p>C:\Windows\System32\drivers\etc  host</p>
<p>127.0.0.1 <a href="http://www.sublimetext.com" target="_blank" rel="noopener">www.sublimetext.com</a><br>127.0.0.1 license.sublimehq.com<br>127.0.0.1 45.55.255.55<br>127.0.0.1 45.55.41.223</p>
<p>—– BEGIN LICENSE —–<br>sgbteam<br>Single User License<br>EA7E-1153259<br>8891CBB9 F1513E4F 1A3405C1 A865D53F<br>115F202E 7B91AB2D 0D2A40ED 352B269B<br>76E84F0B CD69BFC7 59F2DFEF E267328F<br>215652A3 E88F9D8F 4C38E3BA 5B2DAAE4<br>969624E7 DC9CD4D5 717FB40C 1B9738CF<br>20B3C4F1 E917B5B3 87C38D9C ACCE7DD8<br>5F7EF854 86B9743C FADC04AA FB0DA5C0<br>F913BE58 42FEA319 F954EFDD AE881E0B<br>—— END LICENSE ——</p>
<p>ZYNGA INC.<br>50 User License<br>EA7E-811825<br>927BA117 84C9300F 4A0CCBC4 34A56B44<br>985E4562 59F2B63B CCCFF92F 0E646B83<br>0FD6487D 1507AE29 9CC4F9F5 0A6F32E3<br>0343D868 C18E2CD5 27641A71 25475648<br>309705B3 E468DDC4 1B766A18 7952D28C<br>E627DDBA 960A2153 69A2D98A C87C0607<br>45DC6049 8C04EC29 D18DFA40 442C680B<br>1342224D 44D90641 33A3B9F2 46AADB8F</p>
<p>sublime3</p>
<p>—– BEGIN LICENSE —–<br>Member J2TeaM<br>Single User License<br>EA7E-1011316<br>D7DA350E 1B8B0760 972F8B60 F3E64036<br>B9B4E234 F356F38F 0AD1E3B7 0E9C5FAD<br>FA0A2ABE 25F65BD8 D51458E5 3923CE80<br>87428428 79079A01 AA69F319 A1AF29A4<br>A684C2DC 0B1583D4 19CBD290 217618CD<br>5653E0A0 BACE3948 BB2EE45E 422D2C87<br>DD9AF44B 99C49590 D2DBDEE1 75860FD2<br>8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864<br>—— END LICENSE ——​</p>
<h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p>###默认配置</p>
<h4 id="滚轮字体大小"><a href="#滚轮字体大小" class="headerlink" title="滚轮字体大小"></a>滚轮字体大小</h4><p>Editor—–&gt; General—–&gt; Change font size(Zoom) with Ctrl+Mouse Wheel</p>
<h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><p>ctrl + B   使用了本方法或者类的地方<br>ctrl + E  最近光标出现的地方<br>ctrl + shift + E 最近修改的地方</p>
<p>shift + shift 查询所有的地方  再次双击，勾选，也能查询jar包内的搜索<br>ctrl + shift + A action查询 </p>
<p>ctrl + </p>
<p>Alt + 1 跳转到项目目录<br>ESC 回到编辑窗口</p>
<h4 id="自动导包"><a href="#自动导包" class="headerlink" title="自动导包"></a>自动导包</h4><p><img src="/2019/06/27/tools-ide快捷操作/AutoImport.png" alt="自动导包"></p>
<p>勾选标注第1个选项，IntelliJ IDEA 将在我们书写代码的时候自动帮我们导入需要用到的包。但是对于那些同名的包，还是需要手动 Alt + Enter 进行导入的</p>
<p>勾选标注 第2个选项，IntelliJ IDEA 将在我们书写代码的时候自动帮我们优化导入的包，比如自动去掉一些没有用到的包。</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>个人意见，仅供参考,顺序代表推荐强度</p>
<ul>
<li>Alibaba Java Coding Guidelines 代码检测</li>
<li>JRebel for Intellij 热部署 （收费）</li>
<li>Lombok 不用写get set 方法</li>
<li>save-action  保存的时候导包，格式化代码</li>
<li>FindBugs Idea 扫描代码，可能出现的bug</li>
<li>Free Mybatis plugin   mapper跳转到xml。xml跳转到mapper</li>
<li>Key promoter X  展示快捷键</li>
<li>Statistic 代码统计</li>
<li>Translation  Google 翻译 </li>
<li>jclasslib Bytecode viewer 查看字节码文件</li>
<li>GosnFormat json转java对象类</li>
<li>SonarLint  代码检查</li>
</ul>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>/**</p>
<ul>
<li>Project Name:${project_name}</li>
<li>File Name:${file_name}</li>
<li>Package Name:${package_name}</li>
<li>Date:${date} ${time}</li>
<li>Copyright (c) ${year}, All Rights Reserved.<br><em>
</em>/</li>
</ul>
<p>${filecomment}</p>
<p>${package_declaration}<br>/**</p>
<ul>
<li>ClassName:${type_name} </li>
<li>Function: ${todo} </li>
<li>Reason: ${todo} </li>
<li>Date: ${date} ${time} </li>
<li>@author Mu Xiaobai</li>
<li>@version </li>
<li>@since JDK 1.8<br>*/<br>${typecomment}<br>${type_declaration}</li>
</ul>
<p>aa 包<br>/**</p>
<ul>
<li>Project Name:$project_name$</li>
<li>File Name:$file_name$</li>
<li>Package Name:$package_name$</li>
<li>Date:$date$ $time$</li>
<li>Copyright (c) $year$, All Rights Reserved.<br><em>
</em>/<br>ss 类<br>/**</li>
<li>@ClassName: $class_name$ </li>
<li>@Function: //TODO </li>
<li>@Reason: //TODO</li>
<li>@Date: $date$ $time$ </li>
<li>@author Mu Xiaobai</li>
<li>@version </li>
<li>@since JDK 1.8<br><em>/<br>zz 方法<br>/</em> </li>
<li>@name: $enclosing_method$</li>
<li>@description: TODO </li>
<li>@param $param$</li>
<li>@return: $return$ </li>
<li>@date: $date$ $time$</li>
<li>@auther: $user$</li>
<li>*/</li>
</ul>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>ctrl + shift + r 替换<br>ctrl + shift + f 查找</p>
<p>alt + ↑/↓  本类中的方法依次上下跳转<br>alt + ←/→  左右边的类</p>
<p>ctrl + shift + u 大小写替换</p>
<p>ctrl +  ←/→   光标左/右单词移动<br>ctrl+shift + ←/→  左/右边单词扩选</p>
<p>ctrl+w 选中光标，依次扩选<br>ctrl +shift + w 反向收缩选中内容</p>
<p>Ctrl + u    前往当前光标所在的方法的父类的方法 / 接口定义<br>ctrl + b 进入光标所在的方法/变量的接口或是定义处</p>
<p>ctrl + alt + 鼠标左键 查看方法的实现类<br>ctrl + alt + ←/→  鼠标上次的位置/下次的位置</p>
<p>Ctrl + Alt + T    对选中的代码弹出环绕选项弹出层 （必备）</p>
<p>ctrl + x 剪切<br>ctrl + d 复制粘贴<br>ctrl + / 单行注释<br>ctrl + shift + / 选中内容多行注释</p>
<p>ctrl + z 撤回<br>ctrl + shift + z 撤回的撤回</p>
<p>ctrl +alt + s 设置<br>ctrl +alt +shift + s 本项目设置 打包</p>
<p>参考:</p>
<ul>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial/blob/master/keymap-introduce.md" target="_blank" rel="noopener">IntelliJ-IDEA-Tutorial</a></li>
<li><a href="https://blog.csdn.net/deniro_li/article/details/72902621" target="_blank" rel="noopener">IntelliJ IDEA 快捷键说明大全（中英对照、带图示详解）</a></li>
<li><a href="https://github.com/xiaoxiunique/tool-tips" target="_blank" rel="noopener">常用操作</a></li>
<li><a href="https://github.com/muxiaobai/intelliJ-settings" target="_blank" rel="noopener">IDEA settigns 更新仓库</a></li>
</ul>
<h2 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h2><p>ctrl + shift + r  选中内容执行<br>ctrl + r 执行当期窗口所有<br>ctrl + q 打开新执行窗口<br>ctrl + w 关闭当期窗口</p>
<h2 id="plsql"><a href="#plsql" class="headerlink" title="plsql"></a>plsql</h2><p>F8 执行选中</p>
<p>设置AutoReplace<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sf = select t.* ,t.rowid from </span><br><span class="line">s = select * from</span><br></pre></td></tr></table></figure></p>
<p>打开PL/SQL，在Tools-&gt;Perferences-&gt;Editor中Autoreplace，勾选Enabled，选择配置的AutoReplace.txt文件，点击OK即可。</p>
<h2 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h2><h3 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h3><p>ctrl+shift+G查看方法被调用<br>ctrl+alt+R 重启或者启动tomcat<br>ctrl+shift+T 查找文件在哪里 匹配java<br>ctrl+shift+R resource查找所有资源<br>ctrl+h file search Containing text 搜索包含某个字符串的所有文件<br>ctrl+shift+c注释/反注释<br>ctrl + alt + H查看方法被调用</p>
<p>ctrl+shift+L  查看所有的快捷键</p>
<p>ctrl+alt+G  搜索文本</p>
<h3 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h3><ul>
<li>svn - <a href="http://subclipse.tigris.org/update_1.8.x" target="_blank" rel="noopener">http://subclipse.tigris.org/update_1.8.x</a></li>
<li>jd-core - <a href="http://jd.benow.ca/jd-eclipse/update" target="_blank" rel="noopener">http://jd.benow.ca/jd-eclipse/update</a></li>
<li>zookeeper：  <a href="http://www.massedynamic.org/eclipse/updates/" target="_blank" rel="noopener">http://www.massedynamic.org/eclipse/updates/</a></li>
<li>Enhanced Class Decompiler  <a href="http://feeling.sourceforge.net/update" target="_blank" rel="noopener">http://feeling.sourceforge.net/update</a></li>
</ul>
<p>反编译</p>
<p>重启之后，在窗口菜单栏点击Widow-&gt;Preference-&gt;General-&gt;Editors-&gt;File Associations,将FileType里的<em>.class和</em>.class without source的Associated editors下面的Class File Editor设置成default即可</p>
<h2 id="powerdesign"><a href="#powerdesign" class="headerlink" title="powerdesign"></a>powerdesign</h2><h3 id="导出excel脚本"><a href="#导出excel脚本" class="headerlink" title="导出excel脚本"></a>导出excel脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;******************************************************************************</span><br><span class="line">Option Explicit</span><br><span class="line">   Dim rowsNum</span><br><span class="line">   rowsNum = 0</span><br><span class="line">&apos;-----------------------------------------------------------------------------</span><br><span class="line">&apos; Main function</span><br><span class="line">&apos;-----------------------------------------------------------------------------</span><br><span class="line">&apos; Get the current active model</span><br><span class="line">    Dim Model</span><br><span class="line">    Set Model = ActiveModel</span><br><span class="line">    If (Model Is Nothing) Or (Not Model.IsKindOf(PdPDM.cls_Model)) Then</span><br><span class="line">       MsgBox &quot;The current model is not an PDM model.&quot;</span><br><span class="line">    Else</span><br><span class="line">      &apos; Get the tables collection</span><br><span class="line">      &apos;创建EXCEL APP</span><br><span class="line">      dim beginrow</span><br><span class="line">      DIM EXCEL, SHEET, SHEETLIST</span><br><span class="line">      set EXCEL = CREATEOBJECT(&quot;Excel.Application&quot;)</span><br><span class="line">      EXCEL.workbooks.add(-4167)&apos;添加工作表</span><br><span class="line">      EXCEL.workbooks(1).sheets(1).name =&quot;表结构&quot;</span><br><span class="line">      set SHEET = EXCEL.workbooks(1).sheets(&quot;表结构&quot;)</span><br><span class="line">       </span><br><span class="line">      EXCEL.workbooks(1).sheets.add</span><br><span class="line">      EXCEL.workbooks(1).sheets(1).name =&quot;目录&quot;</span><br><span class="line">      set SHEETLIST = EXCEL.workbooks(1).sheets(&quot;目录&quot;)</span><br><span class="line">      ShowTableList Model,SHEETLIST</span><br><span class="line"> </span><br><span class="line">      ShowProperties Model, SHEET,SHEETLIST</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">      EXCEL.workbooks(1).Sheets(2).Select</span><br><span class="line">      EXCEL.visible = true</span><br><span class="line">      &apos;设置列宽和自动换行</span><br><span class="line">      sheet.Columns(1).ColumnWidth = 20</span><br><span class="line">      sheet.Columns(2).ColumnWidth = 20</span><br><span class="line">      sheet.Columns(3).ColumnWidth = 20</span><br><span class="line">      sheet.Columns(4).ColumnWidth = 40</span><br><span class="line">      sheet.Columns(5).ColumnWidth = 10</span><br><span class="line">      sheet.Columns(6).ColumnWidth = 10</span><br><span class="line">      sheet.Columns(1).WrapText =true</span><br><span class="line">      sheet.Columns(2).WrapText =true</span><br><span class="line">      sheet.Columns(4).WrapText =true</span><br><span class="line">      &apos;不显示网格线</span><br><span class="line">      EXCEL.ActiveWindow.DisplayGridlines = False</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line"> End If</span><br><span class="line">&apos;-----------------------------------------------------------------------------</span><br><span class="line">&apos; Show properties of tables</span><br><span class="line">&apos;-----------------------------------------------------------------------------</span><br><span class="line">Sub ShowProperties(mdl, sheet,SheetList)</span><br><span class="line">   &apos; Show tables of the current model/package</span><br><span class="line">   rowsNum=0</span><br><span class="line">   beginrow = rowsNum+1</span><br><span class="line">   Dim rowIndex</span><br><span class="line">   rowIndex=3</span><br><span class="line">   &apos; For each table</span><br><span class="line">   output &quot;begin&quot;</span><br><span class="line">   Dim tab</span><br><span class="line">   For Each tab In mdl.tables</span><br><span class="line">      ShowTable tab,sheet,rowIndex,sheetList</span><br><span class="line">      rowIndex = rowIndex +1</span><br><span class="line">   Next</span><br><span class="line">   if mdl.tables.count &gt; 0 then</span><br><span class="line">        sheet.Range(&quot;A&quot; &amp; beginrow + 1 &amp; &quot;:A&quot; &amp; rowsNum).Rows.Group</span><br><span class="line">   end if</span><br><span class="line">   output &quot;end&quot;</span><br><span class="line">End Sub</span><br><span class="line">&apos;-----------------------------------------------------------------------------</span><br><span class="line">&apos; Show table properties</span><br><span class="line">&apos;-----------------------------------------------------------------------------</span><br><span class="line">Sub ShowTable(tab, sheet,rowIndex,sheetList)</span><br><span class="line">   If IsObject(tab) Then</span><br><span class="line">     Dim rangFlag</span><br><span class="line">     rowsNum = rowsNum + 1</span><br><span class="line">      &apos; Show properties</span><br><span class="line">      Output &quot;================================&quot;</span><br><span class="line">      sheet.cells(rowsNum, 1) =tab.name</span><br><span class="line">      sheet.cells(rowsNum, 1).HorizontalAlignment=3</span><br><span class="line">      sheet.cells(rowsNum, 2) = tab.code</span><br><span class="line">      &apos;sheet.cells(rowsNum, 5).HorizontalAlignment=3</span><br><span class="line">      &apos;sheet.cells(rowsNum, 6) = &quot;&quot;</span><br><span class="line">      &apos;sheet.cells(rowsNum, 7) = &quot;表说明&quot;</span><br><span class="line">      sheet.cells(rowsNum, 3) = tab.comment</span><br><span class="line">      &apos;sheet.cells(rowsNum, 8).HorizontalAlignment=3</span><br><span class="line">      sheet.Range(sheet.cells(rowsNum, 3),sheet.cells(rowsNum, 7)).Merge</span><br><span class="line">      &apos;设置超链接，从目录点击表名去查看表结构</span><br><span class="line">      &apos;字段中文名    字段英文名    字段类型    注释    是否主键    是否非空    默认值</span><br><span class="line">      sheetList.Hyperlinks.Add sheetList.cells(rowIndex,2), &quot;&quot;,&quot;表结构&quot;&amp;&quot;!B&quot;&amp;rowsNum</span><br><span class="line">      rowsNum = rowsNum + 1</span><br><span class="line">      sheet.cells(rowsNum, 1) = &quot;字段中文名&quot;</span><br><span class="line">      sheet.cells(rowsNum, 2) = &quot;字段英文名&quot;</span><br><span class="line">      sheet.cells(rowsNum, 3) = &quot;字段类型&quot;</span><br><span class="line">      sheet.cells(rowsNum, 4) = &quot;注释&quot;</span><br><span class="line">      sheet.cells(rowsNum, 5) = &quot;是否主键&quot;</span><br><span class="line">      sheet.cells(rowsNum, 6) = &quot;是否非空&quot;</span><br><span class="line">      sheet.cells(rowsNum, 7) = &quot;默认值&quot;</span><br><span class="line">      &apos;设置边框</span><br><span class="line">      sheet.Range(sheet.cells(rowsNum-1, 1),sheet.cells(rowsNum, 7)).Borders.LineStyle = &quot;1&quot;</span><br><span class="line">      &apos;sheet.Range(sheet.cells(rowsNum-1, 4),sheet.cells(rowsNum, 9)).Borders.LineStyle = &quot;1&quot;</span><br><span class="line">      &apos;字体为10号</span><br><span class="line">      sheet.Range(sheet.cells(rowsNum-1, 1),sheet.cells(rowsNum, 7)).Font.Size=10</span><br><span class="line">            Dim col &apos; running column</span><br><span class="line">            Dim colsNum</span><br><span class="line">            colsNum = 0</span><br><span class="line">      for each col in tab.columns</span><br><span class="line">        rowsNum = rowsNum + 1</span><br><span class="line">        colsNum = colsNum + 1</span><br><span class="line">          sheet.cells(rowsNum, 1) = col.name</span><br><span class="line">        &apos;sheet.cells(rowsNum, 3) = &quot;&quot;</span><br><span class="line">          &apos;sheet.cells(rowsNum, 4) = col.name</span><br><span class="line">          sheet.cells(rowsNum, 2) = col.code</span><br><span class="line">          sheet.cells(rowsNum, 3) = col.datatype</span><br><span class="line">        sheet.cells(rowsNum, 4) = col.comment</span><br><span class="line">          If col.Primary = true Then</span><br><span class="line">        sheet.cells(rowsNum, 5) = &quot;Y&quot;</span><br><span class="line">        Else</span><br><span class="line">        sheet.cells(rowsNum, 5) = &quot; &quot;</span><br><span class="line">        End If</span><br><span class="line">        If col.Mandatory = true Then</span><br><span class="line">        sheet.cells(rowsNum, 6) = &quot;Y&quot;</span><br><span class="line">        Else</span><br><span class="line">        sheet.cells(rowsNum, 6) = &quot; &quot;</span><br><span class="line">        End If</span><br><span class="line">        sheet.cells(rowsNum, 7) =  col.defaultvalue</span><br><span class="line">      next</span><br><span class="line">      sheet.Range(sheet.cells(rowsNum-colsNum+1,1),sheet.cells(rowsNum,7)).Borders.LineStyle = &quot;3&quot;      </span><br><span class="line">      &apos;sheet.Range(sheet.cells(rowsNum-colsNum+1,4),sheet.cells(rowsNum,9)).Borders.LineStyle = &quot;3&quot;</span><br><span class="line">      sheet.Range(sheet.cells(rowsNum-colsNum+1,1),sheet.cells(rowsNum,7)).Font.Size = 10</span><br><span class="line">      rowsNum = rowsNum + 2</span><br><span class="line">       </span><br><span class="line">      Output &quot;FullDescription: &quot;       + tab.Name</span><br><span class="line">   End If</span><br><span class="line">    </span><br><span class="line">End Sub</span><br><span class="line">&apos;-----------------------------------------------------------------------------</span><br><span class="line">&apos; Show List Of Table</span><br><span class="line">&apos;-----------------------------------------------------------------------------</span><br><span class="line">Sub ShowTableList(mdl, SheetList)</span><br><span class="line">   &apos; Show tables of the current model/package</span><br><span class="line">   Dim rowsNo</span><br><span class="line">   rowsNo=1</span><br><span class="line">   &apos; For each table</span><br><span class="line">   output &quot;begin&quot;</span><br><span class="line">   SheetList.cells(rowsNo, 1) = &quot;主题&quot;</span><br><span class="line">   SheetList.cells(rowsNo, 2) = &quot;表中文名&quot;</span><br><span class="line">   SheetList.cells(rowsNo, 3) = &quot;表英文名&quot;</span><br><span class="line">   SheetList.cells(rowsNo, 4) = &quot;表说明&quot;</span><br><span class="line">   rowsNo = rowsNo + 1</span><br><span class="line">   SheetList.cells(rowsNo, 1) = mdl.name</span><br><span class="line">   Dim tab</span><br><span class="line">   For Each tab In mdl.tables</span><br><span class="line">     If IsObject(tab) Then</span><br><span class="line">         rowsNo = rowsNo + 1</span><br><span class="line">      SheetList.cells(rowsNo, 1) = &quot;&quot;</span><br><span class="line">      SheetList.cells(rowsNo, 2) = tab.name</span><br><span class="line">      SheetList.cells(rowsNo, 3) = tab.code</span><br><span class="line">      SheetList.cells(rowsNo, 4) = tab.comment</span><br><span class="line">     End If</span><br><span class="line">   Next</span><br><span class="line">    SheetList.Columns(1).ColumnWidth = 20</span><br><span class="line">      SheetList.Columns(2).ColumnWidth = 20</span><br><span class="line">      SheetList.Columns(3).ColumnWidth = 30</span><br><span class="line">     SheetList.Columns(4).ColumnWidth = 60</span><br><span class="line">   output &quot;end&quot;</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高并发之缓存、限流、降级]]></title>
      <url>https://muxiaobai.github.io/2019/05/21/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B9%8B%E7%BC%93%E5%AD%98%E3%80%81%E9%99%90%E6%B5%81%E3%80%81%E9%99%8D%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p>首先必须要从代码层面上提升性能，利用缓存等，如果在访问量大，确实无法处理的情况下就要考虑限流，或者防刷也是要考虑限流，然后如果服务确实不可用的话就把服务进行降级，比如当无法获取评论信息的时候，但是写的朋友圈是要正常返回的。不能因为评论服务无法提供，连朋友圈也不能看了。</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>可以通过注解把技术相关的，读缓存，写日志，写缓存的功能，使用注解加反射来进行操作。</p>
<p>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Cache cache =getCache();</span><br><span class="line"></span><br><span class="line">if(cache!=null)&#123;</span><br><span class="line">    return cache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Data result= getDatabase();</span><br><span class="line">lg.info(&quot;获取数据&quot;);</span><br><span class="line">if(result!=null)&#123;</span><br><span class="line">    setCacheData(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return result;</span><br></pre></td></tr></table></figure></p>
<p>业务上，实际只有getDatabase才有用。</p>
<p>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@getCache()</span><br><span class="line">@setCache()</span><br><span class="line">@log()</span><br><span class="line">public getData()&#123;</span><br><span class="line">    Data result= getDatabase();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过注解反射如果有getCache的话直接使用缓存中的数据，如果有直接返回，如果有log写日志，如果有set则把获取到的数据写到cache中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><h4 id="限流瞬时流量"><a href="#限流瞬时流量" class="headerlink" title="限流瞬时流量"></a>限流瞬时流量</h4><p>双11，秒杀，之类的属于瞬时流量很大，平时相对稳定。</p>
<h4 id="限流总并发量"><a href="#限流总并发量" class="headerlink" title="限流总并发量"></a>限流总并发量</h4><h4 id="限流平均流量"><a href="#限流平均流量" class="headerlink" title="限流平均流量"></a>限流平均流量</h4><ul>
<li><p>滑动窗口</p>
</li>
<li><p>令牌桶，每秒生成n个，限制平均流量</p>
</li>
<li><p>漏桶，这个是应对瞬时流量过大的一种方法，一定的速率进行消费，MQ，削峰，解耦，异步。但是能解决的瞬时流量也是有一个最大值。</p>
</li>
<li><p>计数器，限制总的并发数，比如说每秒钟只能请求100次，是限制总并发量。通常可用redis缓存，请求增加incr来实现。</p>
</li>
</ul>
<p>采用：Google开源工具包Guava提供了限流工具类RateLimiter，该类基于令牌桶算法来完成限流，非常易于使用。</p>
<h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>当服务调用者使用同步调用的时候，会产生大量的等待线程占用系统资源，一旦线程资源被耗尽，<br>服务调用者提供的服务也将处于不可用状态，于是服务雪崩效应产生了！<br>这时候就需要比如说：当失败了多少次之后，</p>
<p>1，超时机制<br>2，服务限流<br>3，服务熔断<br>4，服务降级</p>
<p>超时机制<br>如果我们加入超时机制，例如2s，那么超过2s就会直接返回了，那么这样就在一定程度上可以抑制消费者资源耗尽的问题</p>
<p>服务限流<br>通过线程池+队列的方式，通过信号量的方式。比如商品评论比较慢，最大能同时处理10个线程，队列待处理5个，那么如果同时20个线程到达的话，其中就有5个线程被限流了，其中10个先被执行，另外5个在队列中</p>
<p>服务熔断<br>这个熔断可以理解为我们自己家里的电闸。<br>当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源，比如我们设置了超时时间为1s，如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个服务了，这个时候就应该使用熔断器避免资源浪费</p>
<p>服务降级<br>有服务熔断，必然要有服务降级。<br>所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据)，这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景</p>
]]></content>
      
        <categories>
            
            <category> 高并发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ELK分析日志]]></title>
      <url>https://muxiaobai.github.io/2019/05/18/%E4%BD%BF%E7%94%A8ELK%E5%88%86%E6%9E%90%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p><a href="https://www.elastic.co/cn/elk-stack" target="_blank" rel="noopener">elk 官网介绍</a><br>要解决的问题：<br>对于日志等文件，需要进行分析，例如：访问IP数，什么时候访问最多，用户量最大；<br>简单的架构就是直接使用filebeat来获取到数据。<br>还有一种实现方式是：拉取文件后，先通过Logstash（tools）把对应的文件分析出来，然后输出到ElasticSearch（data）中然后使用kibaba来进行虚拟化的展示（view）。<br>还可以加上output的输出到队列缓存中等。</p>
<h3 id="主要技术手段"><a href="#主要技术手段" class="headerlink" title="主要技术手段"></a>主要技术手段</h3><p>filebeat、Logstash、ElasticSearch、Kibaba</p>
<h5 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h5><p>通常会有一个客户端和一个服务器，客户端运行在业务应用机上，可以访问到对应的日志文件，<br>然后连接服务器，服务器把数据发送到Logstash中，也可以把数据直接output到ElasticSearch内。</p>
<p><img src="/2019/05/18/使用ELK分析日志/filebeat.png" alt="ElasticSearch控制台"></p>
<h5 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h5><p>Logstash把获取到的数据进行过滤（filter）处理，把找到的文件进行分析，输出到ElasticSearch,</p>
<h5 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h5><p>不用多讲，存储索引数据用的，基于Lucene，的分布式架构。在这种elk中充当数据源。</p>
<h5 id="Kibaba"><a href="#Kibaba" class="headerlink" title="Kibaba"></a>Kibaba</h5><p>visual展示</p>
<h3 id="示例-使用nginx日志来操作，简单版，不使用filebeat"><a href="#示例-使用nginx日志来操作，简单版，不使用filebeat" class="headerlink" title="示例 使用nginx日志来操作，简单版，不使用filebeat"></a>示例 使用nginx日志来操作，简单版，不使用filebeat</h3><p>定义的所有文件路径在<code>/c/ProgrmTool/dev/</code>中</p>
<h5 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h5><p>参考<a href="https://muxiaobai.github.io/2017/09/02/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E8%B4%9F%E8%BD%BD/">应用部署之nginx负载</a></p>
<p><code>/c/ProgrmTool/dev/ &gt;start nginx</code></p>
<p>nginx 中的log_format格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br></pre></td></tr></table></figure>
<p>日志文件在../logs/access.log</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 - - [19/May/2019:11:10:18 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">127.0.0.1 - - [19/May/2019:11:10:19 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://localhost/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">127.0.0.1 - - [19/May/2019:11:10:19 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">127.0.0.1 - - [19/May/2019:11:36:05 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br><span class="line">127.0.0.1 - - [19/May/2019:11:36:05 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://localhost/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot; &quot;-&quot;</span><br></pre></td></tr></table></figure>
<h5 id="配置-Logstash"><a href="#配置-Logstash" class="headerlink" title="配置 Logstash"></a>配置 Logstash</h5><p>把这个地址配置到Logstash中</p>
<p>测试：<code>./logstash -e &#39;input {stdin 0} output {studout 0}&#39;</code><br>从控制台输入，控制台输出，</p>
<p>验证grok是否正确：<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="noopener">https://grokdebug.herokuapp.com/</a></p>
<p>配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># Sample Logstash configuration for creating a simple</span><br><span class="line"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">        file &#123;</span><br><span class="line">                path =&gt; &quot;C:/ProgramTool/dev/nginx/logs/access.log&quot;</span><br><span class="line">                type =&gt; &quot;nginx-access&quot;</span><br><span class="line">                start_position =&gt; &quot;beginning&quot;</span><br><span class="line">                #sincedb_path =&gt; &quot;/usr/local/logstash/sincedb&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">        if [type] == &quot;nginx-access&quot; &#123;</span><br><span class="line">                grok &#123;</span><br><span class="line">                    patterns_dir =&gt; &quot;C:/ProgramTool/dev/logstash-6.7.0/patterns&quot;        #设置自定义正则路径</span><br><span class="line">                    match =&gt; &#123;</span><br><span class="line">                        &quot;message&quot; =&gt; &quot;%&#123;NGINXACCESS&#125;&quot;</span><br><span class="line">                        #使用patterns路径下文件内部的解析名字</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                date &#123;</span><br><span class="line">                    match =&gt; [ &quot;log_timestamp&quot; , &quot;dd/MMM/YYYY:HH:mm:ss Z&quot; ]</span><br><span class="line">                &#125;</span><br><span class="line">                urldecode &#123;</span><br><span class="line">                    all_fields =&gt; true</span><br><span class="line">                &#125;</span><br><span class="line">            #把所有字段进行urldecode（显示中文）</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">        if [type] == &quot;nginx-access&quot; &#123;</span><br><span class="line">            stdout &#123;</span><br><span class="line">                codec    =&gt; rubydebug</span><br><span class="line">            &#125;</span><br><span class="line">            # 输出到控制台</span><br><span class="line">            elasticsearch &#123;</span><br><span class="line">                    hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class="line">                    manage_template =&gt; true</span><br><span class="line">                    index =&gt; &quot;logstash-nginx-access-%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class="line">                    # 索引名称</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>grok参数设置<code>C:/ProgramTool/dev/logstash-6.7.0/patterns</code>路径下设置nginx的匹配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \[%&#123;HTTPDATE:timestamp&#125;\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:x_forwarded_for&#125;</span><br></pre></td></tr></table></figure>
<p>参考<a href="https://www.cnblogs.com/Orgliny/p/5592186.html" target="_blank" rel="noopener">grok参数设置</a><br>更多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URIPARM1 [A-Za-z0-9$.+!*&apos;|()&#123;&#125;,~@#%&amp;/=:;_?\-\[\]]*</span><br><span class="line">URIPATH1 (?:/[A-Za-z0-9$.+!*&apos;()&#123;&#125;,~:;=@#%&amp;_\- ]*)+</span><br><span class="line">URI1 (%&#123;URIPROTO&#125;://)?(?:%&#123;USER&#125;(?::[^@]*)?@)?(?:%&#123;URIHOST&#125;)?(?:%&#123;URIPATHPARAM&#125;)?</span><br><span class="line">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \[%&#123;HTTPDATE:timestamp&#125;\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-) %&#123;QS:referrer&#125; %&#123;QS:agent&#125; %&#123;QS:x_forwarded_for&#125;</span><br><span class="line">DEMOACCESS %&#123;IPORHOST:remote_addr&#125; - (%&#123;USERNAME:user&#125;|-) \[%&#123;HTTPDATE:log_timestamp&#125;\] %&#123;HOSTNAME:http_host&#125; %&#123;WORD:request_method&#125; \&quot;%&#123;URIPATH1:uri&#125;\&quot; \&quot;%&#123;URIPARM1:param&#125;\&quot; %&#123;BASE10NUM:http_status&#125; (?:%&#123;BASE10NUM:body_bytes_sent&#125;|-) \&quot;(?:%&#123;URI1:http_referrer&#125;|-)\&quot; (%&#123;BASE10NUM:upstream_status&#125;|-) (?:%&#123;HOSTPORT:upstream_addr&#125;|-) (%&#123;BASE16FLOAT:upstream_response_time&#125;|-) (%&#123;BASE16FLOAT:request_time&#125;|-) (?:%&#123;QUOTEDSTRING:user_agent&#125;|-) \&quot;(%&#123;IPV4:client_ip&#125;|-)\&quot; \&quot;(%&#123;WORD:x_forword_for&#125;|-)\&quot;</span><br></pre></td></tr></table></figure></p>
<p>上面用到正则切割日志等功能</p>
<p>启动：<code>./logstash -f ../config/logstash.conf &amp;</code><br><code>./logstash -f ../config/logstash.conf --path.data=C:/ProgramTool/dev/logstash-6.7.0/data</code><br>如果有一个实例的话，启动时，需要指定path.data</p>
<h5 id="简单的es主从"><a href="#简单的es主从" class="headerlink" title="简单的es主从"></a>简单的es主从</h5><p>master 默认9200端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">cluster.name: muxiaobai-test</span><br><span class="line">node.name: master</span><br><span class="line">node.master: true</span><br><span class="line"></span><br><span class="line">network.host: 127.0.0.1</span><br></pre></td></tr></table></figure></p>
<p>slave-1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: muxiaobai-test</span><br><span class="line">node.name: slave-1</span><br><span class="line">#node.master: true</span><br><span class="line"></span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9300</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure></p>
<p>slave-2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: muxiaobai-test</span><br><span class="line">node.name: slave-2</span><br><span class="line">#node.master: true</span><br><span class="line"></span><br><span class="line">network.host: 127.0.0.1</span><br><span class="line">http.port: 9400</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br></pre></td></tr></table></figure></p>
<h5 id="使用elastic-head-图形化工具查看运行情况"><a href="#使用elastic-head-图形化工具查看运行情况" class="headerlink" title="使用elastic-head 图形化工具查看运行情况"></a>使用elastic-head 图形化工具查看运行情况</h5><p><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elastic-head github</a><br>需要node环境<br><code>npm install</code> <code>npm run start</code>默认9100端口 访问<a href="http://127.0.0.1:9100" target="_blank" rel="noopener">http://127.0.0.1:9100</a> 带有帐户密码的访问：<a href="http://127.0.0.1:9100/?auth_user=elastic&amp;auth_password=elasticsearch_2017@*)" target="_blank" rel="noopener">http://127.0.0.1:9100/?auth_user=elastic&amp;auth_password=elasticsearch_2017@*)</a>)</p>
<p><img src="/2019/05/18/使用ELK分析日志/elasticsearch-init.png" alt="Logstash日志进入ElasticSearch"></p>
<h5 id="使用kibaba"><a href="#使用kibaba" class="headerlink" title="使用kibaba"></a>使用kibaba</h5><p>默认端口5601，<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a>,把对应的索引加进去。</p>
<h4 id="操作如下"><a href="#操作如下" class="headerlink" title="操作如下"></a>操作如下</h4><p>首先访问 nginx ，地址：<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a></p>
<p>然后可以看到Logstash窗口输出的日志</p>
<p><img src="/2019/05/18/使用ELK分析日志/logstash-nginx.png" alt="ElasticSearch控制台"></p>
<p><a href="http://localhost:9100,中，可以看到访问日志的内容" target="_blank" rel="noopener">http://localhost:9100,中，可以看到访问日志的内容</a><br>效果如下：<br><img src="/2019/05/18/使用ELK分析日志/elasticsearch-header.png" alt="Logstash日志进入ElasticSearch"><br>具体切分的数据<br><img src="/2019/05/18/使用ELK分析日志/data1.png" alt="Logstash日志进入ElasticSearch"></p>
<p><img src="/2019/05/18/使用ELK分析日志/data2.png" alt="Logstash日志进入ElasticSearch"></p>
<p>创建了索引后，<br><img src="/2019/05/18/使用ELK分析日志/kibaba2.png" alt="Logstash日志进入ElasticSearch"><br>在kibaba中有默认的时间线，访问次数，即可展示<br><img src="/2019/05/18/使用ELK分析日志/kibaba4.png" alt="Logstash日志进入ElasticSearch"></p>
<h3 id="使用filebeat"><a href="#使用filebeat" class="headerlink" title="使用filebeat"></a>使用filebeat</h3><p><a href="https://www.elastic.co/guide/en/beats/filebeat/7.0/filebeat-module-nginx.html#nginx-settings" target="_blank" rel="noopener">nginx filebeat 配置</a></p>
<p>已经有模板，使用的时候先开启，然后安装，最后启动即可</p>
<ul>
<li><code>filebeat  modules enable nginx</code></li>
<li><code>filebeat setup -e</code></li>
<li><code>filebeat</code></li>
<li></li>
</ul>
<p>nginx.yml配置文件，需要指定日志文件路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- module: nginx</span><br><span class="line">  access:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;C:/ProgramTool/dev/nginx/logs/access.log*&quot;]</span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;C:/ProgramTool/dev/nginx/logs/error.log*&quot;]</span><br></pre></td></tr></table></figure></p>
<p>默认直接输出到ElasticSearch</p>
<p>然后在Logstash的配置文件中使用beat作为input，输入源。<br>主要是input<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>logstash.conf 默认配置就是从beat中获取数据的</p>
<p>参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/aresxin/p/8035137.html" target="_blank" rel="noopener">ELK系统框架图</a></li>
<li><a href="https://www.colabug.com/2936270.html" target="_blank" rel="noopener">filebeat和Logstash配合使用</a></li>
<li><a href="https://github.com/elastic/logstash/blob/88563c86435926a8e5353bd970f92ab61efe58ec/docs/static/filebeat_modules/nginx/pipeline.conf" target="_blank" rel="noopener">官网 Logstash中的beat nginx 配置</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分析 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 基础命令总结4 shell 快捷键 ps]]></title>
      <url>https://muxiaobai.github.io/2019/04/01/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%934/</url>
      <content type="html"><![CDATA[<h4 id="shell-常用快捷键"><a href="#shell-常用快捷键" class="headerlink" title="shell 常用快捷键"></a>shell 常用快捷键</h4><p><a href="https://blog.csdn.net/weixin_42256178/article/details/80392077" target="_blank" rel="noopener">常用shell快捷键</a></p>
<ul>
<li>ctrl + a 命令行首</li>
<li>ctrl + e 命令行尾（end）</li>
<li>ctrl + b 相当于方向键左←（）</li>
<li>ctrl + f 相当于方向键右→</li>
<li></li>
<li>ctrl + u 剪切光标到行首</li>
<li>ctrl + k 剪切光标到行尾</li>
<li><p>ctrl + w 剪切光标前一个单词</p>
</li>
<li><p>ctrl + y 粘贴上面三个的复制</p>
</li>
<li><p>ctrl + z 挂起当前命令 jobs bg fg  唤醒</p>
</li>
<li></li>
<li>ctrl + r 搜索之前的命令</li>
<li>ctrl + g 取消搜索<br>-</li>
<li>ctrl + s 锁屏，挂起当前shell</li>
<li>ctrl + q 取消锁屏，重新启用当前shell</li>
<li><p>ctrl + l clear 清屏</p>
</li>
<li><p>ctrl + insert 插入</p>
</li>
</ul>
<h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><ul>
<li>ps -ef | grep tomcat </li>
<li>ps -aux | sort -k4nr |head -h 10 内存前十的进程</li>
<li>du -sh *   当前路径（disk usage）  sort -hr 倒序    du -hd1</li>
<li>df -hP  整个磁盘（disk free）</li>
<li>df -k /tmp 查看磁盘使用</li>
<li>crontab -l 定时任务</li>
<li>tail -f -n 200 /root/file.log 查看实时日志文件</li>
<li>free -h 查询内存文件</li>
<li>/var/log/messages 系统日志，</li>
<li>service /etc/init.d  启动脚本位置</li>
<li>netstat -ano | grep 端口占用</li>
<li>netstat -tlnp | grep 端口占用</li>
</ul>
<p>wget 判断端口<br>curl</p>
<p><img src="/2019/04/01/Linux-基础命令总结4/wget测试端口.png" alt="wget"></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[性能优化之redis储存计算值]]></title>
      <url>https://muxiaobai.github.io/2019/02/16/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bredis%E5%82%A8%E5%AD%98%E8%AE%A1%E7%AE%97%E5%80%BC/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>两张表，一个主表，一个树形结构表，</p>
<p>每一条树形结构数据都有一个状态，要统计出所有叶子节点的状态，展示在主表的列上，前期使用了oracle的<code>start connect</code>统计根节点，在前期主表中的数据量很小的时候，列表价在正常，后期数据量增大，列表响应速度异常。后经过分析，得出每一条根节点循环的时候需要600ms左右，然后数据增大直接是主表的600ms*n。</p>
<p>树形结构超过三级，前两级结构超过50条记录，</p>
<h2 id="优化路思路："><a href="#优化路思路：" class="headerlink" title="优化路思路："></a>优化路思路：</h2><p>redis优化查询结果，因为是计算结果，这种数据，在数据库上执行第一次,随后再次查询列表的时候从缓存中获取，减少计算次数。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询的时候先从redis中查询，如果有直接返回；如果没有，再查数据库，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//查询状态,有num直接返回:</span><br><span class="line"></span><br><span class="line">if(Redis.isCached(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class)))&#123;</span><br><span class="line">	return Integer.parseInt(Redis.getString(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//查询出的结果</span><br><span class="line">String sql =  &quot; select count(*) as num &quot;</span><br><span class="line">			+ &quot; from pre_dutysubitem t1 ,pre_dutyitem t2 &quot;</span><br><span class="line">			+ &quot; where t2.fk_dutyid = ?  &quot;</span><br><span class="line">			+ &quot; and (select  count(*) from pre_dutysubitem t3 &quot;</span><br><span class="line">			+ &quot; start with t3.id = t1.id &quot;</span><br><span class="line">			+ &quot; connect by prior t3.id =t3.fk_parentid ) = 1 &quot;</span><br><span class="line">			+ &quot; and t2.id=t1.fk_dutyitemid and t1.currstatus is not null &quot;;</span><br><span class="line">SqlRowSet rs = null;</span><br><span class="line"></span><br><span class="line">//如果currStatus没值查统计全部子项数量，否则按状态统计</span><br><span class="line">if(StringUtils.isNotBlank(currStatus))&#123;</span><br><span class="line">	sql+=&quot; and t1.currstatus = ?  &quot;;</span><br><span class="line">	rs = jdbc.queryForRowSet(sql, dutyId, currStatus);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	rs = jdbc.queryForRowSet(sql, dutyId);</span><br><span class="line">&#125;</span><br><span class="line">int num = 0;</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">	num =rs.getInt(&quot;num&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//缓存查询结果</span><br><span class="line">Redis.cacheString(key, String.valueOf(num), FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class));</span><br><span class="line"></span><br><span class="line">return num;</span><br></pre></td></tr></table></figure>
<h4 id="修改状态"><a href="#修改状态" class="headerlink" title="修改状态"></a>修改状态</h4><p>修改状态的时候，先删除redis缓存，再更改数据库状态，可能会出现刚删除，数据库还没来得及更改，又有用户查询，导致redis缓存脏数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//更新数据状态</span><br><span class="line">//删除缓存状态：</span><br><span class="line"></span><br><span class="line">Redis.delete(key, FORP.SPRING_CONTEXT.getBean(&quot;applicationPool&quot;, JedisPool.class));</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 性能优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb常用命令]]></title>
      <url>https://muxiaobai.github.io/2019/01/11/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8Bmongodb/</url>
      <content type="html"><![CDATA[<p>常用的mongo语句，汇总，以便之后查阅。<br><a id="more"></a></p>
<h2 id="全局、数据库级别"><a href="#全局、数据库级别" class="headerlink" title="全局、数据库级别"></a>全局、数据库级别</h2><p>默认根目录：/db/mongodb-3.4.7/</p>
<h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><p>–导入<br>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 -u test_user -p test_pwd –port 27017 –db jy_db /db/mongo_bak/test_db</p>
<p>–强制删除<br>–drop：先删除所有的记录，然后恢复.<br>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 -u test_user -p test_pwd –port 27017 –db test_db –drop /db/mongo_bak/test_db</p>
<p>–导出<br>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db -u test_user -p 123456 -o /db/mongo_bak/test_db</p>
<p>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db  -o /db/mongo_bak/test_db</p>
<p>–打包<br>tar -czvf  /db/mongo_bak/jy_db20181207.tar.gz /db/mongo_bak/test_db</p>
<p>–导入<br>/db/mongodb-3.4.7/bin/mongodump –host 127.0.0.1 –port 9430 -d test_db -u test_use -p test_pwd -o /db/mongo_bak/</p>
<h3 id="启动-登录，创建用户"><a href="#启动-登录，创建用户" class="headerlink" title="启动 登录，创建用户"></a>启动 登录，创建用户</h3><p>修改配置文件<br><code>vi /db/mongodb-3.4.7/mongodb.conf</code><br>常用配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">后台启动</span><br><span class="line">`/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf `</span><br><span class="line">登录：</span><br><span class="line">`/db/mongodb-3.4.7/bin/mongo  --host 127.0.0.1 --port 9430 -u root -p FpTH2a`</span><br><span class="line"></span><br><span class="line">show dbs;//展示所有数据库</span><br><span class="line"></span><br><span class="line">use test_db;//创建数据库.切换到本数据库</span><br><span class="line"></span><br><span class="line">/db/mongodb-3.4.7/bin/mongod -f /db/mongodb-3.4.7/mongodb.conf  --shutdown</span><br><span class="line"></span><br><span class="line">db.createUser(&#123;user:&apos;name&apos;,pwd:&apos;123456&apos;,roles: [&#123; role:&quot;readWrite&quot;,db:&quot;name&quot;&#125;]&#125;);</span><br><span class="line"># 写密码校验方式</span><br><span class="line">db.createUser(&#123;user:&quot;name&quot;,pwd:&quot;123456&quot;,roles:[&#123;role:&quot;readWrite&quot;,db:&quot;name&quot;&#125;],mechanisms : [&quot;SCRAM-SHA-1&quot;]&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(&apos;system.users&apos;).find(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(&apos;system.users&apos;).remove(&#123;user:&quot;name&quot;&#125;);</span><br></pre></td></tr></table></figure>
<p>查询用户：</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>use test_db;//</p>
<p>db.repairDatabase();//释放空间</p>
<p>db.runCommand({“distinct”:”fs.files”, “key”:”metadata.type”});//所有的集合</p>
<h2 id="集合级别-collection"><a href="#集合级别-collection" class="headerlink" title="集合级别 collection"></a>集合级别 collection</h2><ul>
<li>所有  show collections;</li>
<li>创建  db.createCollection(“test”);</li>
<li>添加  db.getCollection(“test”).insert({“name”:”test”});</li>
<li>清空  db.getCollection(“test”).remove({});</li>
<li>删除  db.getCollection(“test”).drop();</li>
<li>查询  db.getCollection(“test”).find({“name”:”test”});</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> mongo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb主从架构设计]]></title>
      <url>https://muxiaobai.github.io/2019/01/11/%E9%9B%86%E7%BE%A4%E4%B9%8Bmongodb%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>基本的MongoDB主从搭建语句，汇总，以便之后查阅。<br><a id="more"></a></p>
<p>带参数启动MongoDB：<code>./mongod -f mongo-master.conf</code></p>
<p>基本单机配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># mongo.conf</span><br><span class="line"></span><br><span class="line"># fork and run in background</span><br><span class="line">fork=true</span><br><span class="line"></span><br><span class="line"># 端口</span><br><span class="line">port=9430</span><br><span class="line"></span><br><span class="line"># 认证模式</span><br><span class="line">auth=true</span><br><span class="line"></span><br><span class="line"># what storage engine to use - defaults to wiredTiger if no data files present directory for datafiles - defaults to /data/db</span><br><span class="line">storageEngine=wiredTiger</span><br><span class="line"></span><br><span class="line"># maximum amount of memory to allocate for cache; defaults to 1/2 of physical RAM</span><br><span class="line">wiredTigerCacheSizeGB=1</span><br><span class="line"></span><br><span class="line"># 数据库文件保存位置</span><br><span class="line">dbpath=/db/mongodb-3.4.7/data/db</span><br><span class="line"></span><br><span class="line"># where to log</span><br><span class="line">logpath=/db/logs/mongodb.log</span><br><span class="line"></span><br><span class="line">#以追加方式写入日志</span><br><span class="line">logappend=true</span><br><span class="line"></span><br><span class="line"># each database will be stored in a separate directory</span><br><span class="line">directoryperdb=true</span><br><span class="line"></span><br><span class="line"># use a smaller default file size</span><br><span class="line">smallfiles=true</span><br><span class="line"></span><br><span class="line"># enable http interface， port=28017</span><br><span class="line">httpinterface=false</span><br><span class="line"></span><br><span class="line"># turn on simple rest api 开启rest api</span><br><span class="line">rest=false</span><br><span class="line"></span><br><span class="line"># comma separated list of ip addresses to  listen on - all local ips by default</span><br><span class="line"># bind_ip=192.168.1.120,192.168.1.123</span><br></pre></td></tr></table></figure>
<p>简单的主从配置文件</p>
<p>master.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 设置数据文件的存放目录</span><br><span class="line">dbpath=/db/mongo/master/data</span><br><span class="line"># 设置日志文件的存放目录及其日志文件名</span><br><span class="line">logpath=/db/mongo/master/logs/mongo.log</span><br><span class="line"># 设置端口号（默认的端口号是 27017）</span><br><span class="line">master=true</span><br><span class="line">#slave=true</span><br><span class="line"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class="line">fork=true</span><br><span class="line">#监听网卡</span><br><span class="line">bind_ip= 0.0.0.0</span><br><span class="line">#服务端口</span><br><span class="line">port=27019</span><br><span class="line">oplogSize=2048</span><br><span class="line">#source=127.0.0.1:27018</span><br><span class="line">#autoresync=true</span><br></pre></td></tr></table></figure></p>
<p>slave.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 设置数据文件的存放目录</span><br><span class="line">dbpath=/db/mongo/slave/data</span><br><span class="line"># 设置日志文件的存放目录及其日志文件名</span><br><span class="line">logpath=/db/mongo/slave/logs/mongo.log</span><br><span class="line"># 设置端口号（默认的端口号是 27017）</span><br><span class="line">#master=true</span><br><span class="line">slave=true</span><br><span class="line"># 设置为以守护进程的方式运行，即在后台运行</span><br><span class="line">fork=true</span><br><span class="line">#监听网卡</span><br><span class="line">bind_ip= 0.0.0.0</span><br><span class="line">#服务端口</span><br><span class="line">port=27019</span><br><span class="line">oplogSize=2048</span><br><span class="line">source=127.0.0.1:27018</span><br><span class="line">autoresync=true</span><br></pre></td></tr></table></figure>
<p>一些其他的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">--quiet # 安静输出</span><br><span class="line">--port arg  # 指定服务端口号，默认端口27017</span><br><span class="line">--bind_ip arg   # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</span><br><span class="line">--logpath arg   # 指定MongoDB日志文件，注意是指定文件不是目录</span><br><span class="line">--logappend # 使用追加的方式写日志</span><br><span class="line">--pidfilepath arg   # PID File 的完整路径，如果没有设置，则没有PID文件</span><br><span class="line">--keyFile arg   # 集群的私钥的完整路径，只对于Replica Set 架构有效</span><br><span class="line">--unixSocketPrefix arg  # UNIX域套接字替代目录,(默认为 /tmp)</span><br><span class="line">--fork  # 以守护进程的方式运行MongoDB，创建服务器进程</span><br><span class="line">--auth  # 启用验证</span><br><span class="line">--cpu   # 定期显示CPU的CPU利用率和iowait</span><br><span class="line">--dbpath arg    # 指定数据库路径</span><br><span class="line">--diaglog arg   # diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads</span><br><span class="line">--directoryperdb    # 设置每个数据库将被保存在一个单独的目录</span><br><span class="line">--journal   # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里</span><br><span class="line">--journalOptions arg    # 启用日志诊断选项</span><br><span class="line">--ipv6  # 启用IPv6选项</span><br><span class="line">--jsonp # 允许JSONP形式通过HTTP访问（有安全影响）</span><br><span class="line">--maxConns arg  # 最大同时连接数 默认2000</span><br><span class="line">--noauth    # 不启用验证</span><br><span class="line">--nohttpinterface   # 关闭http接口，默认关闭27018端口访问</span><br><span class="line">--noprealloc    # 禁用数据文件预分配(往往影响性能)</span><br><span class="line">--noscripting   # 禁用脚本引擎</span><br><span class="line">--notablescan   # 不允许表扫描</span><br><span class="line">--nounixsocket  # 禁用Unix套接字监听</span><br><span class="line">--nssize arg (=16)  # 设置信数据库.ns文件大小(MB)</span><br><span class="line">--objcheck  # 在收到客户数据,检查的有效性，</span><br><span class="line">--profile arg   # 档案参数 0=off 1=slow, 2=all</span><br><span class="line">--quota # 限制每个数据库的文件数，设置默认为8</span><br><span class="line">--quotaFiles arg    # number of files allower per db, requires --quota</span><br><span class="line">--rest  # 开启简单的rest API</span><br><span class="line">--repair    # 修复所有数据库run repair on all dbs</span><br><span class="line">--repairpath arg    # 修复库生成的文件的目录,默认为目录名称dbpath</span><br><span class="line">--slowms arg (=100) # value of slow for profile and console log</span><br><span class="line">--smallfiles    # 使用较小的默认文件</span><br><span class="line">--syncdelay arg (=60)   # 数据写入磁盘的时间秒数(0=never,不推荐)</span><br><span class="line">--sysinfo   # 打印一些诊断系统信息</span><br><span class="line">--upgrade   # 如果需要升级数据库</span><br><span class="line"> * Replicaton 参数</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--fastsync  # 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步</span><br><span class="line">--autoresync    # 如果从库与主库同步数据差得多，自动重新同步;当发现从服务器的数据不是最新时，开始从主服务器请求同步数据</span><br><span class="line">--oplogSize arg # 主节点的oplog日志大小，单位为M，建议设大点(更改oplog大小时，只需停主库，删除local.*，然后加--oplogSize=* 重新启动即可,*代表大小)</span><br><span class="line"> * 主/从参数</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--master    # 主库模式</span><br><span class="line">--slave # 从库模式</span><br><span class="line">--source arg    # 从库 端口号</span><br><span class="line">--only arg  # 指定单一的数据库复制</span><br><span class="line">--slavedelay arg    # 设置从库同步主库的延迟时间</span><br><span class="line"> * Replica set(副本集)选项：</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--replSet arg   # 设置副本集名称</span><br><span class="line"> * Sharding(分片)选项</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">--configsvr # 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb</span><br><span class="line">--shardsvr  # 声明这是一个集群的分片,默认端口27018</span><br><span class="line">--noMoveParanoia    # 关闭偏执为moveChunk数据保存</span><br></pre></td></tr></table></figure></p>
<p>参考：<a href="https://www.cnblogs.com/amoyzhu/p/7943018.html" target="_blank" rel="noopener">mongo主从配置</a></p>
<h3 id="主机中存储"><a href="#主机中存储" class="headerlink" title="主机中存储"></a>主机中存储</h3><p>db.createCollection(“test”);<br>db.getCollection(‘test’). insert({“name”:”master”})</p>
<h3 id="验证-在slave中查看是否有此数据"><a href="#验证-在slave中查看是否有此数据" class="headerlink" title="验证 在slave中查看是否有此数据"></a>验证 在slave中查看是否有此数据</h3><p>./mongo host:port/db -u user -p pwd</p>
<p>#mongo 127.0.0.1:9430/admin -u root -p FpTH2a<br>db.getCollection(‘test’).find({});<br>默认的SECONDARY是不允许读写的，使用命令解决<br>rs.slaveOk();</p>
<p>加Auth=true的验证</p>
<h3 id="疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？"><a href="#疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？" class="headerlink" title="疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？"></a>疑问：如果主机宕机之后，备机怎么处理？服务的可用性怎么保证？</h3><p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_41988331/article/details/83116873" target="_blank" rel="noopener">mongodb 主从 部署 切换</a></li>
<li><a href="https://blog.csdn.net/lelemom/article/details/82704980" target="_blank" rel="noopener">mongodb主从配置及备份</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 集群 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongo </tag>
            
            <tag> 设计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前言技术之OCR识别]]></title>
      <url>https://muxiaobai.github.io/2018/12/21/%E5%89%8D%E8%A8%80%E6%8A%80%E6%9C%AF%E4%B9%8BOCR%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>OCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。</p>
<p>主要是两个步骤，先获取输入源数据，例如扫描仪、相机等，然后进行识别，目前流行的识别技术主要是RNN循环神经网络、LSTM等，传统的OCR<br><a id="more"></a><br>tesseract-ocr 识别，当前使用版本4.0，下载的时候,直接在github中的wiki即可。</p>
<p>win</p>
<p>环境变量</p>
<p>增加一个PATH变量名，变量值还是我的安装路径C:\Program Files (x86)\Tesseract-OCR;</p>
<p>增加一个TESSDATA_PREFIX变量名，变量值还是我的安装路径C:\Program Files (x86)\Tesseract-OCR\tessdata;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tesseract -v</span><br><span class="line"></span><br><span class="line">tesseract test.png output_1 –l eng</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/tesseract-ocr/tesseract/wiki" target="_blank" rel="noopener">wiki</a><br><a href="https://www.cnblogs.com/jianqingwang/p/6978724.html" target="_blank" rel="noopener">安装</a><br><a href="https://www.cnblogs.com/cnlian/p/5765871.html" target="_blank" rel="noopener">使用</a></p>
]]></content>
      
        <categories>
            
            <category> OCR </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前沿技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java线上代码监控-工具-jconsole和jvisualvm]]></title>
      <url>https://muxiaobai.github.io/2018/11/22/java%E7%BA%BF%E4%B8%8A%E4%BB%A3%E7%A0%81%E7%9B%91%E6%8E%A7-%E5%B7%A5%E5%85%B7-jconsole%E5%92%8Cjvisualvm/</url>
      <content type="html"><![CDATA[<p>远程监控jconsole和jvisualvm<br><a id="more"></a></p>
<p>修改服务器tomcat的bin/catalina.bat文件,</p>
<p>新建setenv.sh,给权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Djava.rmi.server.hostname=192.168.202.121 -Dcom.sun.management.jmxremote&quot;</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.port=12345&quot;</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=true&quot;</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false&quot;</span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote.pwd.file=$JAVA_HOME/jre/lib/management/jmxremote.password&quot;</span><br></pre></td></tr></table></figure>
<p>配置权限文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost bin]# cd $JAVA_HOME/jre/lib/management</span><br><span class="line"></span><br><span class="line">[root@localhost management]# cp jmxremote.password.template jmxremote.password</span><br><span class="line"></span><br><span class="line">[root@localhost management]# vi jmxremote.password</span><br><span class="line"></span><br><span class="line">monitorRole QED</span><br><span class="line">controlRole chenqimiao</span><br><span class="line"></span><br><span class="line">[root@localhost management]# chmod 600 jmxremote.password jmxremote.access</span><br></pre></td></tr></table></figure>
<p>linux:  netstat -ano | grep 12345<br>win :   netstat -ano | findstr 12345</p>
<p>修改jvisualvm工具无法下载插件问题。<br>修改插件&gt;&gt;&gt;设置中的地址<br>在<a href="https://visualvm.github.io/pluginscenters.html" target="_blank" rel="noopener">visual VM 网址查询</a></p>
<ul>
<li><a href="https://www.cnblogs.com/think-in-java/p/6138439.html" target="_blank" rel="noopener">JConsole远程连接</a></li>
<li><a href="https://blog.csdn.net/yunzhu666/article/details/8662045" target="_blank" rel="noopener">监控JVM带main方法</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库监控-Druid监控配置]]></title>
      <url>https://muxiaobai.github.io/2018/11/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%91%E6%8E%A7-Druid%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>Druid连接池监控问题，主要包括，配置，记录慢SQL等。<br><a id="more"></a></p>
<p><a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">Github repo</a><br><a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">Github Druid Wiki</a></p>
<h2 id="添加监控页面"><a href="#添加监控页面" class="headerlink" title="添加监控页面"></a>添加监控页面</h2><h2 id="WEB应用-URI监控-Spring监控"><a href="#WEB应用-URI监控-Spring监控" class="headerlink" title="WEB应用 URI监控 Spring监控"></a>WEB应用 URI监控 Spring监控</h2><p>web.xml,放在前面的，URI监控filter，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;!-- druid监控 http://host:port/druid/sql.html --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">		&lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;</span><br><span class="line">		&lt;filter-class&gt;com.alibaba.druid.support.http.WebStatFilter&lt;/filter-class&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;!-- 经常需要排除一些不必要的url，比如.js,/jslib/等等。配置在init-param中 --&gt;</span><br><span class="line">			&lt;param-name&gt;exclusions&lt;/param-name&gt;</span><br><span class="line">			&lt;param-value&gt;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&lt;/param-value&gt;</span><br><span class="line">		&lt;/init-param&gt;</span><br><span class="line">		&lt;!-- 缺省sessionStatMaxCount是1000个。你可以按需要进行配置 --&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;sessionStatMaxCount&lt;/param-name&gt;</span><br><span class="line">			&lt;param-value&gt;1000&lt;/param-value&gt;</span><br><span class="line">		&lt;/init-param&gt;</span><br><span class="line">		&lt;!-- druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表 --&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;profileEnable&lt;/param-name&gt;</span><br><span class="line">			&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">		&lt;/init-param&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">	  		&lt;param-name&gt;principalCookieName&lt;/param-name&gt;</span><br><span class="line">  			&lt;param-value&gt;userName&lt;/param-value&gt;</span><br><span class="line">  		&lt;/init-param&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;principalSessionName&lt;/param-name&gt;</span><br><span class="line">			&lt;param-value&gt;session_user&lt;/param-value&gt;</span><br><span class="line">		&lt;/init-param&gt;</span><br><span class="line">		&lt;!-- 你可以关闭session统计功能 </span><br><span class="line">		&lt;init-param&gt; </span><br><span class="line">			&lt;param-name&gt;sessionStatEnable&lt;/param-name&gt; </span><br><span class="line">			&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">		&lt;/init-param&gt; --&gt;</span><br><span class="line">	&lt;/filter&gt;</span><br><span class="line">	&lt;filter-mapping&gt;</span><br><span class="line">  		&lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;</span><br><span class="line">  		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  	&lt;/filter-mapping&gt; </span><br><span class="line">  	</span><br><span class="line">	&lt;servlet&gt;</span><br><span class="line">		&lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class="line">		&lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt;</span><br><span class="line">		&lt;!-- </span><br><span class="line">			deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。</span><br><span class="line">			如果allow没有配置或者为空，则允许所有访问</span><br><span class="line">		 --&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;allow&lt;/param-name&gt;</span><br><span class="line">			&lt;param-value&gt;10.38.94.201,127.0.0.1&lt;/param-value&gt;</span><br><span class="line">		&lt;/init-param&gt;</span><br><span class="line">&lt;!-- 		&lt;init-param&gt; --&gt;</span><br><span class="line">&lt;!-- 			&lt;param-name&gt;deny&lt;/param-name&gt; --&gt;</span><br><span class="line">&lt;!-- 			&lt;param-value&gt;10.38.94.201&lt;/param-value&gt; --&gt;</span><br><span class="line">&lt;!-- 		&lt;/init-param&gt; --&gt;</span><br><span class="line">		&lt;!-- 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数 --&gt;</span><br><span class="line">	   &lt;span style=&quot;white-space:pre&quot;&gt;	&lt;/span&gt;&lt;init-param&gt;</span><br><span class="line">	        &lt;span style=&quot;white-space:pre&quot;&gt;	&lt;/span&gt;&lt;param-name&gt;resetEnable&lt;/param-name&gt;</span><br><span class="line">	        &lt;span style=&quot;white-space:pre&quot;&gt;	&lt;/span&gt;&lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">	    &lt;span style=&quot;white-space:pre&quot;&gt;	&lt;/span&gt;&lt;/init-param&gt;</span><br><span class="line">	    &lt;span style=&quot;white-space:pre&quot;&gt;	&lt;/span&gt;&lt;!--  用户名和密码 --&gt;</span><br><span class="line">	    &lt;span style=&quot;white-space:pre&quot;&gt;	&lt;/span&gt;&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;loginUsername&lt;/param-name&gt;</span><br><span class="line">			&lt;param-value&gt;druid&lt;/param-value&gt;</span><br><span class="line">		&lt;/init-param&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;loginPassword&lt;/param-name&gt;</span><br><span class="line">			&lt;param-value&gt;druid&lt;/param-value&gt;</span><br><span class="line">		&lt;/init-param&gt;</span><br><span class="line">	&lt;/servlet&gt;</span><br><span class="line">	&lt;servlet-mapping&gt;</span><br><span class="line">		&lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class="line">		&lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt;</span><br><span class="line">	&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>spring.xml 监控Spring</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring 监控 --&gt;</span><br><span class="line">   &lt;bean id=&quot;druid-stat-interceptor&quot;</span><br><span class="line">         class=&quot;com.alibaba.druid.support.spring.stat.DruidStatInterceptor&quot;&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;druid-stat-pointcut&quot; class=&quot;org.springframework.aop.support.JdkRegexpMethodPointcut&quot;</span><br><span class="line">         scope=&quot;prototype&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;patterns&quot;&gt;</span><br><span class="line">           &lt;list&gt;</span><br><span class="line">               &lt;value&gt;cn.forp.*.service.*.*(..)&lt;/value&gt;</span><br><span class="line">               &lt;value&gt;cn.forp.*.controller.*.*(..)&lt;/value&gt;</span><br><span class="line">           &lt;/list&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;aop:config&gt;</span><br><span class="line">       &lt;aop:advisor advice-ref=&quot;druid-stat-interceptor&quot; pointcut-ref=&quot;druid-stat-pointcut&quot;/&gt;</span><br><span class="line">   &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>
<h2 id="慢SQL日志记录"><a href="#慢SQL日志记录" class="headerlink" title="慢SQL日志记录"></a>慢SQL日志记录</h2><p>spring.xml的 dataSource bean</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt; </span><br><span class="line"></span><br><span class="line">	&lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@host:port/orcl&quot;/&gt;</span><br><span class="line">	&lt;property name=&quot;username&quot; value=&quot;&quot;/&gt;</span><br><span class="line">	&lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">	&lt;property name=&quot;validationQuery&quot; value=&quot;select &apos;x&apos; from dual&quot;/&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class="line">	&lt;property name=&quot;initialSize&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">	&lt;property name=&quot;minIdle&quot; value=&quot;1&quot;/&gt; </span><br><span class="line">	&lt;property name=&quot;maxActive&quot; value=&quot;5&quot;/&gt;</span><br><span class="line">	&lt;!-- 配置获取连接等待超时的时间，单位是毫秒 --&gt;</span><br><span class="line">	&lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class="line">	&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">	&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class="line">	&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">	&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class="line">	&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">	&lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">	&lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">	&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class="line">	&lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">	&lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class="line">	&lt;!-- 启用拦截的filters：sql注入，监控统计 --&gt;</span><br><span class="line">		&lt;property name=&quot;filters&quot; value=&quot;wall,stat&quot;/&gt;</span><br><span class="line"></span><br><span class="line">	&lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class="line">  	&lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1800&quot; /&gt; &lt;!-- 1800秒，也就是30分钟 --&gt;</span><br><span class="line"> 		&lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line"></span><br><span class="line">	&lt;property name=&quot;proxyFilters&quot;&gt;</span><br><span class="line">           &lt;list&gt;</span><br><span class="line">               &lt;ref bean=&quot;stat-filter&quot;/&gt;</span><br><span class="line">               &lt;ref bean=&quot;log-filter&quot;/&gt;</span><br><span class="line">           &lt;/list&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">    &lt;!-- 慢SQL记录 --&gt;</span><br><span class="line">   &lt;bean id=&quot;stat-filter&quot; class=&quot;com.alibaba.druid.filter.stat.StatFilter&quot;&gt;</span><br><span class="line">       &lt;!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql --&gt;</span><br><span class="line">       &lt;property name=&quot;slowSqlMillis&quot; value=&quot;200&quot;/&gt;</span><br><span class="line">       &lt;property name=&quot;logSlowSql&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;log-filter&quot; class=&quot;com.alibaba.druid.filter.logging.Log4jFilter&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;dataSourceLogEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">       &lt;property name=&quot;statementExecutableSqlLogEnable&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>log4j.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># ROOT Logger</span><br><span class="line">log4j.rootLogger = INFO, console, druid</span><br><span class="line"></span><br><span class="line"># log4j.category.org.springframework = DEBUG</span><br><span class="line">log4j.category.cn.forp = DEBUG</span><br><span class="line"></span><br><span class="line"># Console</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern = [%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %5p %c&#123;1&#125; %m%n</span><br><span class="line"></span><br><span class="line"># File</span><br><span class="line">log4j.appender.file = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.file.file = $&#123;catalina.home&#125;/logs/forp-pitaya.log</span><br><span class="line">log4j.appender.file.DatePattern = &apos;.&apos;yyyy-MM-dd</span><br><span class="line">log4j.appender.file.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.conversionPattern = [%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %5p %c&#123;1&#125; %m%n</span><br><span class="line">log4j.appender.file.append =false</span><br><span class="line"></span><br><span class="line"># Druid</span><br><span class="line">log4j.logger.druid.sql=WARN,druid</span><br><span class="line">log4j.logger.druid.sql.DataSource=WARN,druid</span><br><span class="line">log4j.logger.druid.sql.Connection=WARN,druid</span><br><span class="line">log4j.logger.druid.sql.Statement=WARN,druid</span><br><span class="line"></span><br><span class="line">log4j.appender.druid=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.druid.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.druid.layout.ConversionPattern= [%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;] %c&#123;1&#125; - %m%n</span><br><span class="line">log4j.appender.druid.datePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class="line">log4j.appender.druid.Threshold = WARN</span><br><span class="line">log4j.appender.druid.append=true</span><br><span class="line">log4j.appender.druid.File=$&#123;catalina.home&#125;/logs/druid-slow-sql.log</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="https://my.oschina.net/wangmengjun/blog/788386" target="_blank" rel="noopener">使用Druid监控SQL执行状态</a></li>
<li><a href="https://blog.csdn.net/haiyang4988/article/details/73740700" target="_blank" rel="noopener">druid监控及慢sql记录</a></li>
<li><a href="https://blog.csdn.net/binglovezi/article/details/50610269#" target="_blank" rel="noopener">Druid Monitor监控JavaSE和JavaWeb</a></li>
<li><a href="https://github.com/alibaba/druid/blob/master/src/main/scripts/druidStat.sh" target="_blank" rel="noopener">JavaSE 监控</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> SQL </category>
            
            <category> 系统监控优化 </category>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 连接池 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[应用部署之nginx参数配置]]></title>
      <url>https://muxiaobai.github.io/2018/11/15/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>参考<a href="https://github.com/muxiaobai/CourseExercises/blob/master/shell/linux/nginx.conf" target="_blank" rel="noopener">nginx配置文件</a></p>
<h3 id="应用请求数配置"><a href="#应用请求数配置" class="headerlink" title="应用请求数配置"></a>应用请求数配置</h3><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志参数"><a href="#日志参数" class="headerlink" title="日志参数"></a>日志参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$args                    #请求中的参数值</span><br><span class="line">$query_string            #同 $args</span><br><span class="line">$arg_NAME                #GET请求中NAME的值</span><br><span class="line">$is_args                 #如果请求中有参数，值为&quot;?&quot;，否则为空字符串</span><br><span class="line">$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如&quot;/foo/bar.html&quot;。</span><br><span class="line">$document_uri            #同 $uri</span><br><span class="line">$document_root           #当前请求的文档根目录或别名</span><br><span class="line">$host                    #优先级：HTTP请求行的主机名&gt;&quot;HOST&quot;请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</span><br><span class="line">$hostname                #主机名</span><br><span class="line">$https                   #如果开启了SSL安全模式，值为&quot;on&quot;，否则为空字符串。</span><br><span class="line">$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节</span><br><span class="line">$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的&quot;%B&quot;参数保持兼容</span><br><span class="line">$bytes_sent              #传输给客户端的字节数</span><br><span class="line">$connection              #TCP连接的序列号</span><br><span class="line">$connection_requests     #TCP连接当前的请求数量</span><br><span class="line">$content_length          #&quot;Content-Length&quot; 请求头字段</span><br><span class="line">$content_type            #&quot;Content-Type&quot; 请求头字段</span><br><span class="line">$cookie_name             #cookie名称</span><br><span class="line">$limit_rate              #用于设置响应的速度限制</span><br><span class="line">$msec                    #当前的Unix时间戳</span><br><span class="line">$nginx_version           #nginx版本</span><br><span class="line">$pid                     #工作进程的PID</span><br><span class="line">$pipe                    #如果请求来自管道通信，值为&quot;p&quot;，否则为&quot;.&quot;</span><br><span class="line">$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</span><br><span class="line">$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</span><br><span class="line">$remote_addr             #客户端地址</span><br><span class="line">$remote_port             #客户端端口</span><br><span class="line">$remote_user             #用于HTTP基础认证服务的用户名</span><br><span class="line">$request                 #代表客户端的请求地址</span><br><span class="line">$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</span><br><span class="line">$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</span><br><span class="line">$request_completion      #如果请求成功，值为&quot;OK&quot;，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</span><br><span class="line">$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成</span><br><span class="line">$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)</span><br><span class="line">$request_method          #HTTP请求方法，通常为&quot;GET&quot;或&quot;POST&quot;</span><br><span class="line">$request_time            #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</span><br><span class="line">$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：&quot;/cnphp/test.php?arg=freemouse&quot;</span><br><span class="line">$scheme                  #请求使用的Web协议，&quot;http&quot; 或 &quot;https&quot;</span><br><span class="line">$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</span><br><span class="line">$server_name             #服务器名</span><br><span class="line">$server_port             #服务器端口</span><br><span class="line">$server_protocol         #服务器的HTTP版本，通常为 &quot;HTTP/1.0&quot; 或 &quot;HTTP/1.1&quot;</span><br><span class="line">$status                  #HTTP响应代码</span><br><span class="line">$time_iso8601            #服务器时间的ISO 8610格式</span><br><span class="line">$time_local              #服务器时间（LOG Format 格式）</span><br><span class="line">$cookie_NAME             #客户端请求Header头中的cookie变量，前缀&quot;$cookie_&quot;加上cookie名称的变量，该变量的值即为cookie名称的值</span><br><span class="line">$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：&quot;Accept-Language&quot;，$http_accept_language即可</span><br><span class="line">$http_cookie</span><br><span class="line">$http_host               #请求地址，即浏览器中你输入的地址（IP或域名）</span><br><span class="line">$http_referer            #url跳转来源,用来记录从那个页面链接访问过来的</span><br><span class="line">$http_user_agent         #用户终端浏览器等信息</span><br><span class="line">$http_x_forwarded_for    </span><br><span class="line">$proxy_add_x_forwarded_for;#来自http请求的：x-forword-for字段，如果没有&quot;X-Forwarded-For&quot; 请求头，则$proxy_add_x_forwarded_for等于$remote_addr。x-forwarded-for不光可以自己设置值，而且可以设置任意格式值。</span><br><span class="line">$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</span><br><span class="line">$sent_http_cache_control</span><br><span class="line">$sent_http_connection</span><br><span class="line">$sent_http_content_type</span><br><span class="line">$sent_http_keep_alive</span><br><span class="line">$sent_http_last_modified</span><br><span class="line">$sent_http_location</span><br><span class="line">$sent_http_transfer_encoding</span><br></pre></td></tr></table></figure>
<h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><p>error_log</p>
<p>access_log </p>
<p>log_format access ‘$remote_addr - $remote_user [$time_local] “$request” $status $body_bytes_sent $request_body “$http_referer” “$http_user_agent” $http_x_forwarded_for’;</p>
<h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><p>1）总请求数</p>
<p>wc -l  access.log |awk ‘{print $1}’</p>
<p>2）独立IP数</p>
<p>awk ‘{print $1}’ access.log|sort |uniq |wc -l</p>
<p>3）每秒客户端请求数 TOP5</p>
<p>awk ‘{print $6}’ access.log|sort|uniq -c|sort -rn|head -5</p>
<p>4）访问最频繁IP Top5</p>
<p>awk ‘{print $1}’ access.log|sort |uniq -c |sort -nr |head -5</p>
<p>5）访问最频繁的URL TOP5</p>
<p>awk ‘{print $7}’ access.log|sort |uniq -c |sort -nr |head -5</p>
<p>6)响应大于5秒的URL TOP5</p>
<p>awk ‘{if ($7 &gt; 5){print $6}}’ access.log|sort|uniq -c|sort -rn |head -5</p>
<p>7)HTTP状态码(非200)统计 Top5</p>
<p>awk ‘{if ($11 != 200){print $11}}’ access.log|sort|uniq -c|sort -rn|head -5</p>
<p>8)分析请求数大于50000的源IP</p>
<p>cat access.log|awk ‘{print $NF}’|sort |uniq -c |sort -nr|awk ‘{if ($1 &gt;50000){print $2}}’</p>
<h4 id="日志分析2"><a href="#日志分析2" class="headerlink" title="日志分析2"></a>日志分析2</h4><p>IP相关统计<br>统计IP访问量（独立ip访问数量）</p>
<p>awk ‘{print $1}’ access.log | sort -n | uniq | wc -l</p>
<p>查看某一时间段的IP访问量(4-5点)</p>
<p>grep “07/Apr/2017:0[4-5]” access.log | awk ‘{print $1}’ | sort | uniq -c| sort -nr | wc -l  </p>
<p>查看访问最频繁的前100个IP</p>
<p>awk ‘{print $1}’ access.log | sort -n |uniq -c | sort -rn | head -n 100</p>
<p>查看访问100次以上的IP</p>
<p>awk ‘{print $1}’ access.log | sort -n |uniq -c |awk ‘{if($1 &gt;100) print $0}’|sort -rn</p>
<p>查询某个IP的详细访问情况,按访问频率排序</p>
<p>grep ‘127.0.01’ access.log |awk ‘{print $7}’|sort |uniq -c |sort -rn |head -n 100</p>
<p>页面访问统计</p>
<p>查看访问最频的页面(TOP100)</p>
<p>awk ‘{print $7}’ access.log | sort |uniq -c | sort -rn | head -n 100</p>
<p>查看访问最频的页面([排除php页面】(TOP100)</p>
<p>grep -v “.php”  access.log | awk ‘{print $7}’ | sort |uniq -c | sort -rn | head -n 100 </p>
<p>查看页面访问次数超过100次的页面</p>
<p>cat access.log | cut -d ‘ ‘ -f 7 | sort |uniq -c | awk ‘{if ($1 &gt; 100) print $0}’ | less</p>
<p>查看最近1000条记录，访问量最高的页面</p>
<p>tail -1000 access.log |awk ‘{print $7}’|sort|uniq -c|sort -nr|less</p>
<p>每秒请求量统计</p>
<p>统计每秒的请求数,top100的时间点(精确到秒)</p>
<p>awk ‘{print $4}’ access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100</p>
<p>每分钟请求量统计</p>
<p>统计每分钟的请求数,top100的时间点(精确到分钟)</p>
<p>awk ‘{print $4}’ access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100</p>
<p>每小时请求量统计</p>
<p>统计每小时的请求数,top100的时间点(精确到小时)</p>
<p>awk ‘{print $4}’ access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100</p>
<p>性能分析</p>
<p>在nginx log中最后一个字段加入$request_time</p>
<p>列出传输时间超过 3 秒的页面，显示前20条</p>
<p>cat access.log|awk ‘($NF &gt; 3){print $7}’|sort -n|uniq -c|sort -nr|head -20</p>
<p>列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条</p>
<p>cat access.log|awk ‘($NF &gt; 1 &amp;&amp;  $7~/.php/){print $7}’|sort -n|uniq -c|sort -nr|head -100</p>
<p>蜘蛛抓取统计</p>
<p>统计蜘蛛抓取次数</p>
<p>grep ‘Baiduspider’ access.log |wc -l<br>统计蜘蛛抓取404的次数</p>
<p>grep ‘Baiduspider’ access.log |grep ‘404’ | wc -l</p>
<p>TCP连接统计</p>
<p>查看当前TCP连接数</p>
<p>netstat -tan | grep “ESTABLISHED” | grep “:80” | wc -l</p>
<p>用tcpdump嗅探80端口的访问看看谁最高</p>
<p>tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F”.” ‘{print $1”.”$2”.”$3”.”$4}’ | sort | uniq -c | sort -nr</p>
<p><a href="https://www.cnblogs.com/gouge/p/7089939.html" target="_blank" rel="noopener">nginx 常用命令</a></p>
]]></content>
      
        <categories>
            
            <category> deploy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库操作-plsql操作]]></title>
      <url>https://muxiaobai.github.io/2018/11/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-plsql%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>PLSQL的一些操作，<br><a id="more"></a></p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>在Tools-&gt;Perferences-&gt;Editor中Autoreplaces选择配置的shortcuts文件</p>
<p>C:\ProgramTool\PLSQL Developer\short.txt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sf = select * from </span><br><span class="line">w = where </span><br><span class="line">sf = select t.*, t.rowid from  </span><br><span class="line">sc = select count(1) from </span><br><span class="line">df = delete from</span><br></pre></td></tr></table></figure>
<h4 id="Session查看"><a href="#Session查看" class="headerlink" title="Session查看"></a>Session查看</h4><p>plsql 工具   Tools —–&gt;Sessions———&gt; 查看</p>
<h4 id="数据库比对工具"><a href="#数据库比对工具" class="headerlink" title="数据库比对工具"></a>数据库比对工具</h4><p>plsql Tools ——-&gt;Compare User Objects 选择另外一个库</p>
<h4 id="导入csv数据"><a href="#导入csv数据" class="headerlink" title="导入csv数据"></a>导入csv数据</h4><p>需要将csv另存为csv</p>
<p>plsql Tools ——-&gt;Text Importer—-&gt;Open data file  —&gt;Data to Oracle 选择Owener Table</p>
<h4 id="记住密码多个账号，账号密码等"><a href="#记住密码多个账号，账号密码等" class="headerlink" title="记住密码多个账号，账号密码等"></a>记住密码多个账号，账号密码等</h4><p>Tools-&gt;Preferences</p>
<p>tools -&gt; Preferences -&gt; User Interface - Options<br>勾选 Autosave username, ，保存即可</p>
<p>tools -&gt; Preferences -&gt; Oracle -&gt; logon History</p>
<p>Definition-&gt;Store history,Store with password</p>
<p>-&gt;fixed user<br>按格式：user/password@数据库 添加一个fixed user保存即可<br><a href="mailto:zzz/sdsdfs@192.168.1.12" target="_blank" rel="noopener">zzz/sdsdfs@192.168.1.12</a>:1555/orcl</p>
<p><a href="https://www.cnblogs.com/Chary/p/No00008F.html" target="_blank" rel="noopener">参考</a></p>
]]></content>
      
        <categories>
            
            <category> SQL </category>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 常用代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript-常用代码]]></title>
      <url>https://muxiaobai.github.io/2018/10/09/javascript-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h4 id="select-option选择"><a href="#select-option选择" class="headerlink" title="select option选择"></a>select option选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var options=$(&quot;#select option:selected&quot;); //获取选中的项</span><br><span class="line">alert(options.val()); //拿到选中项的值</span><br><span class="line">alert(options.text()); //拿到选中项的文本</span><br><span class="line">alert(options.attr(&apos;url&apos;)); //拿到选中项的url值</span><br></pre></td></tr></table></figure>
<h4 id="ajax-设置请求头"><a href="#ajax-设置请求头" class="headerlink" title="ajax 设置请求头"></a>ajax 设置请求头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> $.ajaxSetup(&#123;</span><br><span class="line">	beforeSend:function(request, settings) &#123;</span><br><span class="line">		if (token) &#123;</span><br><span class="line">		request.setRequestHeader(&quot;Authorization&quot;, token);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Ajax-设置时间超时"><a href="#Ajax-设置时间超时" class="headerlink" title="Ajax,设置时间超时"></a>Ajax,设置时间超时</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">var ajaxTimeoutTest = $.ajax(&#123;</span><br><span class="line">　　url:&apos;&apos;,  //请求的URL</span><br><span class="line">　　timeout : 1000, //超时时间设置，单位毫秒</span><br><span class="line">　　type : &apos;get&apos;,  //请求方式，get或post</span><br><span class="line">　　data :&#123;&#125;,  //请求所传参数，json格式</span><br><span class="line">　　dataType:&apos;json&apos;,//返回的数据格式</span><br><span class="line">　　success:function(data)&#123; //请求成功的回调函数</span><br><span class="line">　　　　alert(&quot;成功&quot;);</span><br><span class="line">　　&#125;,</span><br><span class="line">　　complete : function(XMLHttpRequest,status)&#123; //请求完成后最终执行参数</span><br><span class="line">　　　　if(status==&apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class="line"> 　　　　　 ajaxTimeoutTest.abort();</span><br><span class="line">　　　　　  alert(&quot;超时&quot;);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function request(url, data, success_callback,error_callback) &#123;</span><br><span class="line">    console.log(&quot;url:&quot;+url);</span><br><span class="line"></span><br><span class="line">var xhr = $.ajax(&#123;</span><br><span class="line">        //提交数据的类型 POST GET</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        //提交的网址</span><br><span class="line">        url: url,</span><br><span class="line">        //提交的数据</span><br><span class="line">        data: data,</span><br><span class="line">        //设置为同步</span><br><span class="line">        async:false,</span><br><span class="line">        // 设置超时的时间20s</span><br><span class="line">        timeout:20000,</span><br><span class="line">        //返回数据的格式</span><br><span class="line">        datatype: &quot;json&quot;, //&quot;xml&quot;, &quot;html&quot;, &quot;script&quot;, &quot;json&quot;, &quot;jsonp&quot;, &quot;text&quot;.</span><br><span class="line">        xhrFields: &#123;</span><br><span class="line">            withCredentials: true</span><br><span class="line">        &#125;,</span><br><span class="line">        crossDomain: true,</span><br><span class="line">        //在请求之前调用的函数</span><br><span class="line">        beforeSend: function () &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;,</span><br><span class="line">        //调用执行后调用的函数</span><br><span class="line">        complete: function (XMLHttpRequest, textStatus) &#123;</span><br><span class="line">            if(textStatus == &apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class="line">                if (error_callback != null &amp;&amp; error_callback != &quot;&quot;) &#123;            </span><br><span class="line">                    error_callback();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //成功返回之后调用的函数             </span><br><span class="line">        success: function (response) &#123;</span><br><span class="line">            handleResponse(response, success_callback,error_callback);</span><br><span class="line">        &#125;,</span><br><span class="line">      </span><br><span class="line">        //调用出错执行的函数</span><br><span class="line">        error: function () &#123;</span><br><span class="line">            //请求出错处理</span><br><span class="line">            console.log(&quot;error&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="xhr-下载数据可以，加请求头"><a href="#xhr-下载数据可以，加请求头" class="headerlink" title="xhr  下载数据可以，加请求头"></a>xhr  下载数据可以，加请求头</h4><p>调用方式<br> $(“#export”).click(function(){<br>      // window.location.href =’<a href="http://192.0.0.1:8080/exportData?id=&#39;" target="_blank" rel="noopener">http://192.0.0.1:8080/exportData?id=&#39;</a> + id;<br>          createxhr(‘<a href="http://192.0.0.1:8080/exportData?id=&#39;" target="_blank" rel="noopener">http://192.0.0.1:8080/exportData?id=&#39;</a> + id);<br>  });<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">function createxhr(url)&#123;</span><br><span class="line">    var xhr = new XMLHttpRequest();</span><br><span class="line">    var formData = new FormData();</span><br><span class="line">    // formData.append(&quot;ss&quot;,&quot;ss&quot;);</span><br><span class="line">    //如果是post，在formData append参数</span><br><span class="line">    xhr.open(&apos;get&apos;,url);  </span><br><span class="line">    xhr.setRequestHeader(&quot;Authorization&quot;, sessionStorage.getItem(&apos;token&apos;));</span><br><span class="line">    xhr.responseType = &apos;blob&apos;;</span><br><span class="line">    xhr.onload = function (e) &#123;</span><br><span class="line">        if (this.status == 200) &#123;</span><br><span class="line">          var blob = this.response;</span><br><span class="line">          var filename = &quot;filename.xlsx&quot;;</span><br><span class="line">          blob.type =&quot;application/octet-stream&quot;;</span><br><span class="line">          if (window.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">              navigator.msSaveBlob(blob, filename);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            var a = document.createElement(&apos;a&apos;);</span><br><span class="line">            var url = &quot;&quot;;//createObjectURL(blob);</span><br><span class="line">            if(window.URL)&#123;</span><br><span class="line">                url = window.URL.createObjectURL(blob);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                url = window.webkitURL.createObjectURL(blob);</span><br><span class="line">            &#125;</span><br><span class="line">            a.href = url;</span><br><span class="line">            a.download = filename;</span><br><span class="line">            document.body.appendChild(a);</span><br><span class="line">            a.click();</span><br><span class="line">            window.URL.revokeObjectURL(url);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(formData);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>测试chrome通过，IE11通过，</p>
<h4 id="xhr-上传数据"><a href="#xhr-上传数据" class="headerlink" title="xhr 上传数据"></a>xhr 上传数据</h4><p>可以使用FormData来进行。</p>
<h4 id="在类数组对象中找到其中符合条件的数据"><a href="#在类数组对象中找到其中符合条件的数据" class="headerlink" title="在类数组对象中找到其中符合条件的数据"></a>在类数组对象中找到其中符合条件的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var data = [&#123;menuId:1,menuName:&quot;菜单&quot;,parentMenuId:0&#125;,</span><br><span class="line">&#123;menuId:2,menuName:&quot;角色&quot;,parentMenuId:1&#125;,</span><br><span class="line">&#123;menuId:3,menuName:&quot;人员&quot;,parentMenuId:1&#125;];</span><br><span class="line">getOne function()&#123;</span><br><span class="line">	var menuId = 1;</span><br><span class="line">	function objFn(value, index, arr)&#123;</span><br><span class="line">		return value[&quot;menuId&quot;]== menuId;</span><br><span class="line">	&#125;</span><br><span class="line">	return data[data.findIndex(objFn)];//</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>返回：{menuId:1,menuName:”菜单”,parentMenuId:0}<br>ES6语法 findIndex();</p>
<h4 id="数组对象去重"><a href="#数组对象去重" class="headerlink" title="数组对象去重"></a>数组对象去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var arr=[&#123;id:1,name:&quot;z&quot;&#125;,&#123;id:2,name:&quot;g&quot;&#125;,&#123;id:1,name:&quot;z&quot;];</span><br><span class="line">arr = unique(arr,&quot;id&quot;);</span><br><span class="line">console.log(arr);</span><br><span class="line"></span><br><span class="line">function arrayUnique2(arr, name) &#123;</span><br><span class="line">		  var hash = &#123;&#125;;</span><br><span class="line">		  return arr.reduce(function (item, next) &#123;</span><br><span class="line">		    hash[next[name]] ? &apos;&apos; : hash[next[name]] = true &amp;&amp; item.push(next);</span><br><span class="line">		    return item;</span><br><span class="line">		  &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reduce函数</span><br></pre></td></tr></table></figure>
<h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//数组去重</span><br><span class="line">function uniqueList(array)&#123;</span><br><span class="line">    var r = [];</span><br><span class="line">    for(var i = 0, l = array.length; i &lt; l; i++) &#123;</span><br><span class="line">        for(var j = i + 1; j &lt; l; j++)</span><br><span class="line">            if (JSON.stringify(array[i]) == JSON.stringify(array[j])) j = ++i;</span><br><span class="line">        r.push(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组delete-之后length无效"><a href="#数组delete-之后length无效" class="headerlink" title="数组delete 之后length无效"></a>数组delete 之后length无效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//删除的数组obj, 删除第i个数据</span><br><span class="line">//delete obj[i];</span><br><span class="line">function changeLength(obj,i)&#123;</span><br><span class="line">	return  obj.slice(0,i).concat(obj.slice(i+1,obj.length));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">普通数组直接使用[].concat(_test)</span><br><span class="line">对象数组：[].concat(JSON.parse(JSON.stringify(_test)))</span><br></pre></td></tr></table></figure>
<h4 id="替代eval方案"><a href="#替代eval方案" class="headerlink" title="替代eval方案"></a>替代eval方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function  evil(fn)</span><br><span class="line">&#123;</span><br><span class="line">    var Fn = Function;</span><br><span class="line">    return new Fn(&apos;return &apos; + fn)(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">evil(&quot;function()&#123;console.log(1111);console.log(this)&#125;()&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="获取地址中的参数"><a href="#获取地址中的参数" class="headerlink" title="获取地址中的参数"></a>获取地址中的参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//正则</span><br><span class="line">function getUrlParam(name) &#123;</span><br><span class="line"> 	var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); //构造一个含有目标参数的正则表达式对象</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);  //匹配目标参数</span><br><span class="line">    if (r != null) return unescape(r[2]); return null; //返回参数值</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">//第二种，循环</span><br><span class="line">function getQueryVariable(variable)</span><br><span class="line">&#123;</span><br><span class="line">    var query = window.location.search.substring(1);</span><br><span class="line">    var vars = query.split(&quot;&amp;&quot;);</span><br><span class="line">    for (var i=0;i&lt;vars.length;i++) &#123;</span><br><span class="line">        var pair = vars[i].split(&quot;=&quot;);</span><br><span class="line">        if(pair[0] == variable)&#123;return pair[1];&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return(false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h4><p>let encodedData = window.btoa(“Hello, world”); // 编码<br>let decodedData = window.atob(encodedData); // 解码</p>
<p>params.passwd = btoa($(‘input[name=”passwd”]’).val(), true);</p>
<p>org.apache.commons;</p>
<p>new String(Base64.decodeBase64(form.get(“passwd”))));</p>
<p>加密解密账号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	$(function() &#123;</span><br><span class="line">		$(&quot;#btn&quot;).click(function() &#123;</span><br><span class="line">			var username = encode64($(&quot;#username&quot;).val());  //对数据加密</span><br><span class="line">			var password = encode64($(&quot;#password&quot;).val());</span><br><span class="line">			$(&quot;#username&quot;).val(username);</span><br><span class="line">			$(&quot;#password&quot;).val(password);</span><br><span class="line">			document.fm.submit();  //fm为form表单name</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	// base64加密开始</span><br><span class="line">	var keyStr = &quot;ABCDEFGHIJKLMNOP&quot; + &quot;QRSTUVWXYZabcdef&quot; + &quot;ghijklmnopqrstuv&quot;</span><br><span class="line">			+ &quot;wxyz0123456789+/&quot; + &quot;=&quot;;</span><br><span class="line">	</span><br><span class="line">	function encode64(input) &#123;</span><br><span class="line"> </span><br><span class="line">		var output = &quot;&quot;;</span><br><span class="line">		var chr1, chr2, chr3 = &quot;&quot;;</span><br><span class="line">		var enc1, enc2, enc3, enc4 = &quot;&quot;;</span><br><span class="line">		var i = 0;</span><br><span class="line">		do &#123;</span><br><span class="line">			chr1 = input.charCodeAt(i++);</span><br><span class="line">			chr2 = input.charCodeAt(i++);</span><br><span class="line">			chr3 = input.charCodeAt(i++);</span><br><span class="line">			enc1 = chr1 &gt;&gt; 2;</span><br><span class="line">			enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);</span><br><span class="line">			enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);</span><br><span class="line">			enc4 = chr3 &amp; 63;</span><br><span class="line">			if (isNaN(chr2)) &#123;</span><br><span class="line">				enc3 = enc4 = 64;</span><br><span class="line">			&#125; else if (isNaN(chr3)) &#123;</span><br><span class="line">				enc4 = 64;</span><br><span class="line">			&#125;</span><br><span class="line">			output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2)</span><br><span class="line">					+ keyStr.charAt(enc3) + keyStr.charAt(enc4);</span><br><span class="line">			chr1 = chr2 = chr3 = &quot;&quot;;</span><br><span class="line">			enc1 = enc2 = enc3 = enc4 = &quot;&quot;;</span><br><span class="line">		&#125; while (i &lt; input.length);</span><br><span class="line"> </span><br><span class="line">		return output;</span><br><span class="line">	&#125;</span><br><span class="line">	// base64加密结束</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">private static char[] base64EncodeChars = new char[] &#123; &apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;,</span><br><span class="line">		&apos;E&apos;, &apos;F&apos;, &apos;G&apos;, &apos;H&apos;, &apos;I&apos;, &apos;J&apos;, &apos;K&apos;, &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;,</span><br><span class="line">		&apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;, &apos;X&apos;, &apos;Y&apos;, &apos;Z&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;,</span><br><span class="line">		&apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;,</span><br><span class="line">		&apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;,</span><br><span class="line">		&apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;+&apos;, &apos;/&apos;, &#125;;</span><br><span class="line"> </span><br><span class="line">private static byte[] base64DecodeChars = new byte[] &#123; -1, -1, -1, -1, -1,</span><br><span class="line">		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,</span><br><span class="line">		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,</span><br><span class="line">		-1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59,</span><br><span class="line">		60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,</span><br><span class="line">		10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1,</span><br><span class="line">		-1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,</span><br><span class="line">		38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1,</span><br><span class="line">		-1, -1 &#125;;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 解密</span><br><span class="line"> * @param str</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static byte[] decode(String str) &#123;</span><br><span class="line">	byte[] data = str.getBytes();</span><br><span class="line">	int len = data.length;</span><br><span class="line">	ByteArrayOutputStream buf = new ByteArrayOutputStream(len);</span><br><span class="line">	int i = 0;</span><br><span class="line">	int b1, b2, b3, b4;</span><br><span class="line"> </span><br><span class="line">	while (i &lt; len) &#123;</span><br><span class="line">		do &#123;</span><br><span class="line">			b1 = base64DecodeChars[data[i++]];</span><br><span class="line">		&#125; while (i &lt; len &amp;&amp; b1 == -1);</span><br><span class="line">		if (b1 == -1) &#123;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		do &#123;</span><br><span class="line">			b2 = base64DecodeChars[data[i++]];</span><br><span class="line">		&#125; while (i &lt; len &amp;&amp; b2 == -1);</span><br><span class="line">		if (b2 == -1) &#123;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		buf.write((int) ((b1 &lt;&lt; 2) | ((b2 &amp; 0x30) &gt;&gt;&gt; 4)));</span><br><span class="line"> </span><br><span class="line">		do &#123;</span><br><span class="line">			b3 = data[i++];</span><br><span class="line">			if (b3 == 61) &#123;</span><br><span class="line">				return buf.toByteArray();</span><br><span class="line">			&#125;</span><br><span class="line">			b3 = base64DecodeChars[b3];</span><br><span class="line">		&#125; while (i &lt; len &amp;&amp; b3 == -1);</span><br><span class="line">		if (b3 == -1) &#123;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		buf.write((int) (((b2 &amp; 0x0f) &lt;&lt; 4) | ((b3 &amp; 0x3c) &gt;&gt;&gt; 2)));</span><br><span class="line"> </span><br><span class="line">		do &#123;</span><br><span class="line">			b4 = data[i++];</span><br><span class="line">			if (b4 == 61) &#123;</span><br><span class="line">				return buf.toByteArray();</span><br><span class="line">			&#125;</span><br><span class="line">			b4 = base64DecodeChars[b4];</span><br><span class="line">		&#125; while (i &lt; len &amp;&amp; b4 == -1);</span><br><span class="line">		if (b4 == -1) &#123;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		buf.write((int) (((b3 &amp; 0x03) &lt;&lt; 6) | b4));</span><br><span class="line">	&#125;</span><br><span class="line">	return buf.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 常用代码]]></title>
      <url>https://muxiaobai.github.io/2018/09/20/java-%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h2><h4 id="configuration2读取配置文件"><a href="#configuration2读取配置文件" class="headerlink" title="configuration2读取配置文件"></a>configuration2读取配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.commons.configuration2.Configuration;</span><br><span class="line">import org.apache.commons.configuration2.FileBasedConfiguration;</span><br><span class="line">import org.apache.commons.configuration2.PropertiesConfiguration;</span><br><span class="line">import org.apache.commons.configuration2.builder.ReloadingFileBasedConfigurationBuilder;</span><br><span class="line">import org.apache.commons.configuration2.builder.fluent.Parameters;</span><br><span class="line">import org.apache.commons.configuration2.ex.ConfigurationException;</span><br><span class="line"></span><br><span class="line">public static String getInclude() throws ConfigurationException &#123;</span><br><span class="line">	ReloadingFileBasedConfigurationBuilder&lt;FileBasedConfiguration&gt; </span><br><span class="line">	    include = new ReloadingFileBasedConfigurationBuilder&lt;FileBasedConfiguration&gt;(PropertiesConfiguration.class)</span><br><span class="line">		.configure(new Parameters().properties().setEncoding(&quot;utf-8&quot;).setFileName(&quot;include.properties&quot;));</span><br><span class="line">	Configuration config = (Configuration)include.getConfiguration();</span><br><span class="line">	String source = config.getString(&quot;ips&quot;);</span><br><span class="line">	return source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="static读取配置文件"><a href="#static读取配置文件" class="headerlink" title="static读取配置文件"></a>static读取配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    public static Properties properties=new Properties();</span><br><span class="line">    public static String DEFAULT_FILENAME=&quot;default.properties&quot;;</span><br><span class="line">    加载配置文件</span><br><span class="line">static &#123;</span><br><span class="line">    // 1. load library defaults</span><br><span class="line">    InputStream in = demo.class.getResourceAsStream(DEFAULT_FILENAME);//类名.class</span><br><span class="line"></span><br><span class="line">    if (in == null) &#123;</span><br><span class="line">        throw new RuntimeException(DEFAULT_FILENAME + &quot; not found&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    if (!(in instanceof BufferedInputStream))</span><br><span class="line">        in = new BufferedInputStream(in);</span><br><span class="line">        try &#123;</span><br><span class="line">        properties.load(in);</span><br><span class="line">        in.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;Error while processing &quot;</span><br><span class="line">        + DEFAULT_FILENAME, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 获取prop值</span><br><span class="line">    * @param key 输入的参数</span><br><span class="line">    * @return 返回value</span><br><span class="line">    */</span><br><span class="line">    public static String getProperty(final String key) &#123;</span><br><span class="line">    return properties.getProperty(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line">public static String getUserToken(String account) &#123;</span><br><span class="line">    String md5 = &quot;&quot;;</span><br><span class="line">	md5 = DigestUtils.md5Hex(account+&quot;0.0.0.0&quot;+new Date());</span><br><span class="line">	System.out.println(md5);</span><br><span class="line">	return md5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取request所有参数，和Enumeration循环"><a href="#获取request所有参数，和Enumeration循环" class="headerlink" title="获取request所有参数，和Enumeration循环"></a>获取request所有参数，和Enumeration循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Map&lt;String, String&gt; getReqParams(HttpServletRequest request)&#123;</span><br><span class="line">	Enumeration&lt;String&gt;  params = 	request.getParameterNames();</span><br><span class="line">  	Map&lt;String, String&gt; reqparams = new HashMap&lt;String, String&gt;();</span><br><span class="line">  	while(params.hasMoreElements())&#123;</span><br><span class="line">            String value = (String)params.nextElement();//调用nextElement方法获得元素</span><br><span class="line">            reqparams.put(value, request.getParameter(value));</span><br><span class="line">    &#125;</span><br><span class="line">  	return reqparams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*</span><br><span class="line">*通过request获取参数</span><br><span class="line">*/</span><br><span class="line">public StringBuffer getParams(HttpServletRequest request)&#123;</span><br><span class="line">       Enumeration paramMap= request.getParameterNames();</span><br><span class="line">       StringBuffer sb = new StringBuffer();</span><br><span class="line">       while(paramMap.hasMoreElements())&#123;</span><br><span class="line">           String key = (String) paramMap.nextElement();</span><br><span class="line">           sb.append(key).append(&quot;=&quot;).append(request.getParameter(key).toString()).append(&quot;&amp;&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return sb;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="get-获取文件内容并下载，变为byte-，out输出"><a href="#get-获取文件内容并下载，变为byte-，out输出" class="headerlink" title="get 获取文件内容并下载，变为byte[]，out输出"></a>get 获取文件内容并下载，变为byte[]，out输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static InputStream getInputStreamByUrl(String strUrl)&#123;</span><br><span class="line">      HttpURLConnection conn = null;</span><br><span class="line">      try &#123;</span><br><span class="line">          URL url = new URL(strUrl);</span><br><span class="line">          conn = (HttpURLConnection)url.openConnection();</span><br><span class="line">          conn.setRequestMethod(&quot;GET&quot;);</span><br><span class="line">          conn.setConnectTimeout(20 * 1000);</span><br><span class="line">          final ByteArrayOutputStream output = new ByteArrayOutputStream();</span><br><span class="line">          IOUtils.copy(conn.getInputStream(),output);</span><br><span class="line">          return  new ByteArrayInputStream(output.toByteArray());</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          try&#123;</span><br><span class="line">              if (conn != null) &#123;</span><br><span class="line">                  conn.disconnect();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;catch (Exception e1)&#123;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return null;</span><br><span class="line">  &#125;</span><br><span class="line">  public  byte[] readBytes(InputStream in) throws IOException &#123;  </span><br><span class="line">      BufferedInputStream bufin = new BufferedInputStream(in);  </span><br><span class="line">      int buffSize = 1024;  </span><br><span class="line">      ByteArrayOutputStream out = new ByteArrayOutputStream(buffSize);  </span><br><span class="line"></span><br><span class="line">      // System.out.println(&quot;Available bytes:&quot; + in.available());  </span><br><span class="line"></span><br><span class="line">      byte[] temp = new byte[buffSize];  </span><br><span class="line">      int size = 0;  </span><br><span class="line">      while ((size = bufin.read(temp)) != -1) &#123;  </span><br><span class="line">          out.write(temp, 0, size);  </span><br><span class="line">      &#125;  </span><br><span class="line">      bufin.close();  </span><br><span class="line">      in.close();  </span><br><span class="line">      byte[] content = out.toByteArray();  </span><br><span class="line">      out.close();  </span><br><span class="line">      return content;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>然后输出到页面,commons-io-2.6.jar</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line">	response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">	response.setContentType(&quot;application/octet-stream&quot;);</span><br><span class="line">	response.setHeader(&quot;charset&quot;, &quot;utf-8&quot;);</span><br><span class="line">	</span><br><span class="line">	Tools tools = new Tools();</span><br><span class="line">	StringBuffer sb  = tools.getParams(request);</span><br><span class="line">	String fileId = request.getParameter(&quot;fileId&quot;);</span><br><span class="line">	String fileName = request.getParameter(&quot;fileName&quot;);</span><br><span class="line">	String url = &quot;&quot;;</span><br><span class="line">	</span><br><span class="line">	fileName = new String(URLDecoder.decode(fileName, &quot;UTF-8&quot;).getBytes(&quot;UTF-8&quot;), &quot;ISO8859-1&quot;);</span><br><span class="line">	response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=\&quot;&quot; + fileName + &quot;\&quot;;filename*=UTF-8&apos;&apos;&quot; + fileName);</span><br><span class="line"></span><br><span class="line">	InputStream inp = tools.getInputStreamByUrl(url);</span><br><span class="line">	byte[] bytes = tools.readBytes(inp);</span><br><span class="line">	IOUtils.write(bytes, response.getOutputStream());</span><br><span class="line">	response.flushBuffer();</span><br><span class="line">	out.clear();</span><br><span class="line">	out = pageContext.pushBody();</span><br></pre></td></tr></table></figure>
<h4 id="下载文件。乱码等处理"><a href="#下载文件。乱码等处理" class="headerlink" title="下载文件。乱码等处理"></a>下载文件。乱码等处理</h4><p>commons-io-2.6.jar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line">      //修复IE下载 文件名乱码</span><br><span class="line">    String userAgent = req.getHeader(&quot;user-agent&quot;).toLowerCase();  </span><br><span class="line">      if (userAgent.contains(&quot;msie&quot;) || userAgent.contains(&quot;like gecko&quot;) ) &#123;  </span><br><span class="line">        // win10 ie edge 浏览器 和其他系统的ie  </span><br><span class="line">        excelName = URLEncoder.encode(excelName, &quot;UTF-8&quot;);  </span><br><span class="line">    &#125; else &#123;  </span><br><span class="line">        // fe  </span><br><span class="line">      excelName = new String(excelName.getBytes(&quot;UTF-8&quot;), &quot;iso-8859-1&quot;);  </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    rsp.setContentType(&quot;Application/Octet-Stream&quot;);</span><br><span class="line">    PopSalaryService service = FORP.SPRING_CONTEXT.getBean(PopSalaryService.class);</span><br><span class="line">    String filename = req.getServletContext().getRealPath(&quot;/disk-file/excel-template/pre-modeltemplate.xls&quot;);</span><br><span class="line">    byte[] data = service.getFileByteArray(filename);</span><br><span class="line">    rsp.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\&quot;&quot; + excelName + &quot;\&quot;&quot;);</span><br><span class="line">    IOUtils.write(data, rsp.getOutputStream());</span><br><span class="line">	return null;</span><br></pre></td></tr></table></figure></p>
<h4 id="存数据库乱码变成问号-全角问题"><a href="#存数据库乱码变成问号-全角问题" class="headerlink" title="存数据库乱码变成问号,全角问题"></a>存数据库乱码变成问号,全角问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">byte[] space = new byte[]&#123;(byte) 0xc2,(byte) 0xa0&#125;;</span><br><span class="line">   String UTFSpace =new String( space,&quot;UTF-8&quot; );</span><br><span class="line">   String  result=attachment.getOriginalFilename().replaceAll(UTFSpace, &quot; &quot;);</span><br></pre></td></tr></table></figure>
<h4 id="Map循环-获取request参数"><a href="#Map循环-获取request参数" class="headerlink" title="Map循环,获取request参数"></a>Map循环,获取request参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  HashMap&lt;String, Object&gt; map = (HashMap&lt;String, Object&gt;)obj;</span><br><span class="line">Iterator&lt;String&gt; keys = map.keySet().iterator();</span><br><span class="line">while(keys.hasNext())&#123;</span><br><span class="line">	String k = keys.next();</span><br><span class="line">	if(k.equals(key))</span><br><span class="line">	&#123;</span><br><span class="line">		return map.get(k);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="24位编码"><a href="#24位编码" class="headerlink" title="24位编码"></a>24位编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 24位编码： 17日期+6随机数+&quot;N&quot;</span><br><span class="line">  * @return</span><br><span class="line">  */</span><br><span class="line">	public static String getModelCode() &#123;</span><br><span class="line">		String ret = DateFormatUtils.format(new Date(), &quot;yyyyMMddHHmmssSSS&quot;)+(int)((Math.random()*9+1)*100000)+&quot;N&quot;;</span><br><span class="line">		return ret;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="生成密码并验证，使用了正则，"><a href="#生成密码并验证，使用了正则，" class="headerlink" title="生成密码并验证，使用了正则，"></a>生成密码并验证，使用了正则，</h4><p>正则， 包含大小写字母和数字，可以包含特殊字符 ，10位</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		UserService service = new UserService();</span><br><span class="line">//		String pattern = &quot;/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[\S]&#123;8,16&#125;$/&quot;;</span><br><span class="line">//	    boolean isMatch = Pattern.matches(pattern, pass);</span><br><span class="line">		Pattern pattern = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\S]&#123;8,16&#125;$&quot;); </span><br><span class="line">	    String pass = service.createPassWord(10);</span><br><span class="line">	    Matcher matcher = pattern.matcher(pass); </span><br><span class="line">	    boolean isMatch =   matcher.matches();</span><br><span class="line">//		System.out.println(pass+&quot;:&quot;+isMatch+&quot;:&quot;+service.getDigPwd(&quot;MuWajayC1G&quot;));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//生成密码</span><br><span class="line">	private String generatePwd()&#123;</span><br><span class="line">        String pass = createPassWord(10);</span><br><span class="line">		Pattern pattern = Pattern.compile(&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\S]&#123;8,16&#125;$&quot;); </span><br><span class="line">		Matcher matcher = pattern.matcher(pass); </span><br><span class="line">	    boolean isMatch =   matcher.matches();</span><br><span class="line"></span><br><span class="line">	      if(isMatch)&#123;</span><br><span class="line">				return pass;</span><br><span class="line">		  &#125;else&#123;</span><br><span class="line">			  return generatePwd();</span><br><span class="line">		  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	// 加密Password</span><br><span class="line">	private String getDigPwd(String pwd)&#123;</span><br><span class="line">		return DigestUtils.md5Hex(FORP.MD5_SALT_PREFIX + pwd);</span><br><span class="line">	&#125;</span><br><span class="line">	private String createPassWord(int len)&#123;</span><br><span class="line">	    int random = this.createRandomInt();</span><br><span class="line">	    return this.createPassWord(random, len);</span><br><span class="line">	&#125;</span><br><span class="line">	private String createPassWord(int random,int len)&#123;</span><br><span class="line">	    Random rd = new Random(random);</span><br><span class="line">	    final int maxNum = 62;</span><br><span class="line">	    StringBuffer sb = new StringBuffer();</span><br><span class="line">	    int rdGet;//取得随机数</span><br><span class="line">	    char[] str = &#123; &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;,</span><br><span class="line">	        &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;,</span><br><span class="line">	        &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,</span><br><span class="line">	        &apos;L&apos;, &apos;M&apos;, &apos;N&apos;, &apos;O&apos;, &apos;P&apos;, &apos;Q&apos;, &apos;R&apos;, &apos;S&apos;, &apos;T&apos;, &apos;U&apos;, &apos;V&apos;, &apos;W&apos;,</span><br><span class="line">	        &apos;X&apos;, &apos;Y&apos; ,&apos;Z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos; &#125;;</span><br><span class="line">	    int count=0;</span><br><span class="line">	    while(count &lt; len)&#123;</span><br><span class="line">	      rdGet = Math.abs(rd.nextInt(maxNum));//生成的数最大为62-1</span><br><span class="line">	      if (rdGet &gt;= 0 &amp;&amp; rdGet &lt; str.length) &#123;</span><br><span class="line">	        sb.append(str[rdGet]);</span><br><span class="line">	        count ++;</span><br><span class="line">	      &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    return sb.toString();</span><br><span class="line">	  &#125;</span><br><span class="line">	  private int createRandomInt()&#123;</span><br><span class="line">	    //得到0.0到1.0之间的数字，并扩大100000倍</span><br><span class="line">	    double temp = Math.random()*100000;</span><br><span class="line">	    //如果数据等于100000，则减少1</span><br><span class="line">	    if(temp&gt;=100000)&#123;</span><br><span class="line">	      temp = 99999;</span><br><span class="line">	    &#125;</span><br><span class="line">	    int tempint = (int)Math.ceil(temp);</span><br><span class="line">	    return tempint;</span><br><span class="line">	  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="判断对象为空-判断对象不为空"><a href="#判断对象为空-判断对象不为空" class="headerlink" title="判断对象为空 判断对象不为空"></a>判断对象为空 判断对象不为空</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">	 * 判断对象为空</span><br><span class="line">	 * </span><br><span class="line">	 * @param obj</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean isEmpty(Object obj) &#123;</span><br><span class="line">		if (obj == null)</span><br><span class="line">			return true;</span><br><span class="line"></span><br><span class="line">		if (obj instanceof CharSequence)</span><br><span class="line">			return ((CharSequence) obj).length() == 0;</span><br><span class="line"></span><br><span class="line">		if (obj instanceof Collection)</span><br><span class="line">			return ((Collection) obj).isEmpty();</span><br><span class="line"></span><br><span class="line">		if (obj instanceof Map)</span><br><span class="line">			return ((Map) obj).isEmpty();</span><br><span class="line"></span><br><span class="line">		if (obj instanceof String)</span><br><span class="line">			return &quot;&quot;.equals(obj);</span><br><span class="line"></span><br><span class="line">		if (obj instanceof Object[]) &#123;</span><br><span class="line">			Object[] object = (Object[]) obj;</span><br><span class="line">			if (object.length == 0) &#123;</span><br><span class="line">				return true;</span><br><span class="line">			&#125;</span><br><span class="line">			boolean empty = true;</span><br><span class="line">			for (int i = 0; i &lt; object.length; i++) &#123;</span><br><span class="line">				if (!isEmpty(object[i])) &#123;</span><br><span class="line">					empty = false;</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			return empty;</span><br><span class="line">		&#125;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 判断对象不为空</span><br><span class="line">	 * </span><br><span class="line">	 * @param obj</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean isNotEmpty(Object obj) &#123;</span><br><span class="line">		return !isEmpty(obj);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Arrays-工具"><a href="#Arrays-工具" class="headerlink" title="Arrays 工具"></a>Arrays 工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr =&#123;&quot;1&quot;,&quot;aaa2&quot;,&quot;3aaa&quot;,&quot;asds4&quot;&#125;;</span><br><span class="line">String arrString = Arrays.toString(arr);</span><br><span class="line">System.out.println(arrString);</span><br></pre></td></tr></table></figure>
<h2 id="JSON-相关"><a href="#JSON-相关" class="headerlink" title="JSON 相关"></a>JSON 相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FastJson </span><br><span class="line">按顺序</span><br><span class="line">Map&lt;String, Object&gt; itemMap = JSONObject.parseObject(exportFiled, LinkedHashMap.class);</span><br></pre></td></tr></table></figure>
<h2 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h2><h4 id="获取当前一天的00-00-00—–23-59-59"><a href="#获取当前一天的00-00-00—–23-59-59" class="headerlink" title="获取当前一天的00:00:00—–23:59:59"></a>获取当前一天的00:00:00—–23:59:59</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static Date getStartTime() &#123;</span><br><span class="line">	Calendar todayStart = Calendar.getInstance();</span><br><span class="line">	todayStart.set(Calendar.HOUR_OF_DAY,0);</span><br><span class="line">	todayStart.set(Calendar.MINUTE,0);</span><br><span class="line">	todayStart.set(Calendar.SECOND,0);</span><br><span class="line">	todayStart.set(Calendar.MILLISECOND,0);</span><br><span class="line">	return todayStart.getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static Date getEndTime() &#123;</span><br><span class="line">	Calendar todayEnd = Calendar.getInstance();</span><br><span class="line">	todayEnd.set(Calendar.HOUR_OF_DAY,23);</span><br><span class="line">	todayEnd.set(Calendar.MINUTE,59);</span><br><span class="line">	todayEnd.set(Calendar.SECOND,59);</span><br><span class="line">	todayEnd.set(Calendar.MILLISECOND,999);</span><br><span class="line">	return todayEnd.getTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="计算两个日期相差天数-xx天-xx天xx时xx分xx秒"><a href="#计算两个日期相差天数-xx天-xx天xx时xx分xx秒" class="headerlink" title="计算两个日期相差天数  xx天 xx天xx时xx分xx秒"></a>计算两个日期相差天数  xx天 xx天xx时xx分xx秒</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public  String getDatePoor(Date beginDate, Date endDate) &#123;</span><br><span class="line">		 </span><br><span class="line">	    long nd = 1000 * 24 * 60 * 60;</span><br><span class="line">	    long nh = 1000 * 60 * 60;</span><br><span class="line">	    long nm = 1000 * 60;</span><br><span class="line">	     long ns = 1000;</span><br><span class="line">	    // 获得两个时间的毫秒时间差异</span><br><span class="line">	    long diff = endDate.getTime() - beginDate.getTime();</span><br><span class="line">	    // 计算差多少天</span><br><span class="line">	    long day = diff / nd;</span><br><span class="line">	    // 计算差多少小时</span><br><span class="line">	    long hour = diff % nd / nh;</span><br><span class="line">	    // 计算差多少分钟</span><br><span class="line">	    long min = diff % nd % nh / nm;</span><br><span class="line">	    // 计算差多少秒//输出结果</span><br><span class="line">	     long sec = diff % nd % nh % nm / ns;</span><br><span class="line">	    return day + &quot;天&quot; + hour + &quot;小时&quot; + min + &quot;分&quot; + sec + &quot;秒&quot;;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>#### </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">	 * 计算两个日期之间相差的天数</span><br><span class="line">	 * </span><br><span class="line">	 * @param smdate 较小的时间</span><br><span class="line">	 * @param bdate 较大的时间</span><br><span class="line">	 * @return 相差天数</span><br><span class="line">	 * @throws ParseException</span><br><span class="line">	 */</span><br><span class="line">	public static int daysBetween(Date smdate, Date bdate) throws ParseException &#123;</span><br><span class="line">		SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">		smdate = sdf.parse(sdf.format(smdate));</span><br><span class="line">		bdate = sdf.parse(sdf.format(bdate));</span><br><span class="line">		Calendar cal = Calendar.getInstance();</span><br><span class="line">		cal.setTime(smdate);</span><br><span class="line">		long time1 = cal.getTimeInMillis();</span><br><span class="line">		cal.setTime(bdate);</span><br><span class="line">		long time2 = cal.getTimeInMillis();</span><br><span class="line">		long between_days = (time2 - time1) / (1000 * 3600 * 24);</span><br><span class="line">		return Integer.parseInt(String.valueOf(between_days));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="string2Date"><a href="#string2Date" class="headerlink" title="string2Date"></a>string2Date</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">	 * 字符串转日期</span><br><span class="line">	 * </span><br><span class="line">	 * @param strDate 字符串日期</span><br><span class="line">	 * @param pattern 日期格式</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws ParseException</span><br><span class="line">	 */</span><br><span class="line">	public static Date string2Date(String strDate, String pattern) throws ParseException &#123;</span><br><span class="line">		SimpleDateFormat sdf = new SimpleDateFormat(pattern);</span><br><span class="line">		Date date = sdf.parse(strDate);</span><br><span class="line">		return date;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="date2String"><a href="#date2String" class="headerlink" title="date2String"></a>date2String</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 日期转字符串</span><br><span class="line"> * </span><br><span class="line"> * @param date</span><br><span class="line"> * @return</span><br><span class="line"> * @throws ParseException</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public static String date2String(Date date, String pattern) throws ParseException &#123;</span><br><span class="line">	SimpleDateFormat formatter = new SimpleDateFormat(pattern);</span><br><span class="line">	return formatter.format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="getFirstDayOfMonth-获取指定年月的第一天"><a href="#getFirstDayOfMonth-获取指定年月的第一天" class="headerlink" title="getFirstDayOfMonth 获取指定年月的第一天"></a>getFirstDayOfMonth 获取指定年月的第一天</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 获取指定年月的第一天</span><br><span class="line">    * @param year</span><br><span class="line">    * @param month</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   public static String getFirstDayOfMonth(int year, int month) &#123;     </span><br><span class="line">       Calendar cal = Calendar.getInstance();   </span><br><span class="line">       //设置年份</span><br><span class="line">       cal.set(Calendar.YEAR, year);</span><br><span class="line">       //设置月份 </span><br><span class="line">       cal.set(Calendar.MONTH, month-1); </span><br><span class="line">       //获取某月最小天数</span><br><span class="line">       int firstDay = cal.getMinimum(Calendar.DATE);</span><br><span class="line">       //设置日历中月份的最小天数 </span><br><span class="line">       cal.set(Calendar.DAY_OF_MONTH,firstDay);  </span><br><span class="line">       //格式化日期</span><br><span class="line">       SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">       return sdf.format(cal.getTime());  </span><br><span class="line">   &#125;</span><br><span class="line">   public  String getLastDayOfMonth1(String yearmonth) &#123; </span><br><span class="line"> 	  int year = Integer.parseInt(yearmonth.split(&quot;-&quot;)[0]);</span><br><span class="line"> 	  int month =  Integer.parseInt(yearmonth.split(&quot;-&quot;)[1]);</span><br><span class="line"> 	  return getLastDayOfMonth1(year,month);</span><br><span class="line"> 	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="getLastDayOfMonth-获取指定年月的最后一天"><a href="#getLastDayOfMonth-获取指定年月的最后一天" class="headerlink" title="getLastDayOfMonth 获取指定年月的最后一天"></a>getLastDayOfMonth 获取指定年月的最后一天</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 获取指定年月的最后一天</span><br><span class="line">    * @param year</span><br><span class="line">    * @param month</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">    public  String getLastDayOfMonth1(int year, int month) &#123;     </span><br><span class="line">        Calendar cal = Calendar.getInstance();     </span><br><span class="line">        //设置年份  </span><br><span class="line">        cal.set(Calendar.YEAR, year);  </span><br><span class="line">        //设置月份  </span><br><span class="line">        cal.set(Calendar.MONTH, month-1); </span><br><span class="line">        //获取某月最大天数</span><br><span class="line">        int lastDay = cal.getActualMaximum(Calendar.DATE);</span><br><span class="line">        //设置日历中月份的最大天数  </span><br><span class="line">        cal.set(Calendar.DAY_OF_MONTH, lastDay);  </span><br><span class="line">        //格式化日期</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);  </span><br><span class="line">        return sdf.format(cal.getTime());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口方面"><a href="#接口方面" class="headerlink" title="接口方面"></a>接口方面</h2><h4 id="webservice"><a href="#webservice" class="headerlink" title="webservice"></a>webservice</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static String postMethod(String url,String method,Object[] param)&#123;</span><br><span class="line">           Service s = new  Service();</span><br><span class="line">           String val =null;</span><br><span class="line">           Call call;</span><br><span class="line">			try &#123;</span><br><span class="line">				call = (Call) s.createCall();</span><br><span class="line">			    call.setTargetEndpointAddress(url);</span><br><span class="line">	            call.setOperation(method);</span><br><span class="line">	            call.setTimeout(new Integer(5000));</span><br><span class="line">	            val = (String)call.invoke(param);</span><br><span class="line">	            System.out.println(&quot;method:&quot;+ method+&quot;,param:&quot;  + param+&quot;,return:&quot;  + val);</span><br><span class="line">			&#125; catch (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		  	return val;</span><br><span class="line">		&#125;</span><br><span class="line">	  public static String postMethod(String url,String method,Object[] param, List in)&#123;</span><br><span class="line">          Service s = new  Service();</span><br><span class="line">          String val =null;</span><br><span class="line">          Call call;</span><br><span class="line">			try &#123;</span><br><span class="line">				call = (Call) s.createCall();</span><br><span class="line">			    call.setTargetEndpointAddress(url);</span><br><span class="line">	            call.setOperation(method);</span><br><span class="line">	            call.setTimeout(new Integer(5000));</span><br><span class="line">	            for (Iterator iterator = in.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">					String type = (String) iterator.next();</span><br><span class="line">					call.addParameter(type, org.apache.axis.encoding.XMLType.XSD_STRING, javax.xml.rpc.ParameterMode.IN);</span><br><span class="line">				&#125;</span><br><span class="line">	              val = (String)call.invoke(param);</span><br><span class="line">	            System.out.println(&quot;method:&quot;+ method+&quot;,param:&quot;  + param+&quot;,return:&quot;  + val);</span><br><span class="line">			&#125; catch (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		  	return val;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h4 id="rest-请求-get-and-post-use-HttpURLConnection"><a href="#rest-请求-get-and-post-use-HttpURLConnection" class="headerlink" title="rest 请求 get and post use HttpURLConnection"></a>rest 请求 get and post use HttpURLConnection</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">	  /**</span><br><span class="line">	   * rest 请求</span><br><span class="line">	   * @param url</span><br><span class="line">	   * @param param</span><br><span class="line">	   * @return</span><br><span class="line">	   */</span><br><span class="line">	  public static String postMethod(String url,String method,String params)&#123;</span><br><span class="line">          String val =&quot;&quot;;</span><br><span class="line">		try &#123;</span><br><span class="line">			 URL restServiceURL = new URL(url);</span><br><span class="line">             HttpURLConnection httpConnection = (HttpURLConnection) restServiceURL.openConnection();</span><br><span class="line">             httpConnection.setRequestMethod(method);</span><br><span class="line">             httpConnection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">             httpConnection.setDoOutput(true);     //需要输出</span><br><span class="line">             httpConnection.setDoInput(true);      //需要输入</span><br><span class="line">//             Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; entries = params.entrySet().iterator(); </span><br><span class="line">//             while (entries.hasNext()) &#123; </span><br><span class="line">//               Map.Entry&lt;String, Object&gt; entry = entries.next(); </span><br><span class="line">//               System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getKey()); </span><br><span class="line">//               httpConnection.setRequestProperty(entry.getKey(), entry.getKey());</span><br><span class="line">//             &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             //建立输入流，向指向的URL传入参数</span><br><span class="line">             DataOutputStream dos=new DataOutputStream(httpConnection.getOutputStream());</span><br><span class="line">             dos.writeBytes(params);</span><br><span class="line">             dos.flush();</span><br><span class="line">             </span><br><span class="line">             if (httpConnection.getResponseCode() != 200) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;HTTP GET Request Failed with Error code : &quot;</span><br><span class="line">                                  + httpConnection.getResponseCode());</span><br><span class="line">             &#125;</span><br><span class="line">             BufferedReader responseBuffer = new BufferedReader(new InputStreamReader(</span><br><span class="line">                    (httpConnection.getInputStream())));</span><br><span class="line"></span><br><span class="line">             String output;</span><br><span class="line">//             System.out.println(&quot;Output from Server:  \n&quot;);</span><br><span class="line">             </span><br><span class="line">             while ((output = responseBuffer.readLine()) != null) &#123;</span><br><span class="line">                    System.out.println(output);</span><br><span class="line">                    val = val + output+&quot;\r\n&quot;;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             httpConnection.disconnect();</span><br><span class="line">			 System.out.println(&quot;url:&quot;+ url+&quot;,params:&quot;  + params+&quot;,return:&quot;  + val);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		return val;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	 /** </span><br><span class="line">     * 发起http请求获取返回结果 </span><br><span class="line">     * @param req_url 请求地址 </span><br><span class="line">     * @return </span><br><span class="line">     */ </span><br><span class="line">    public  String getMethod(String req_url) &#123;</span><br><span class="line">        StringBuffer buffer = new StringBuffer();  </span><br><span class="line">        try &#123;  </span><br><span class="line">            URL url = new URL(req_url);  </span><br><span class="line">            HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  </span><br><span class="line"></span><br><span class="line">            httpUrlConn.setDoOutput(false);  </span><br><span class="line">            httpUrlConn.setDoInput(true);  </span><br><span class="line">            httpUrlConn.setUseCaches(false);  </span><br><span class="line"></span><br><span class="line">            httpUrlConn.setRequestMethod(&quot;GET&quot;);  </span><br><span class="line">            httpUrlConn.connect();  </span><br><span class="line"></span><br><span class="line">            // 将返回的输入流转换成字符串  </span><br><span class="line">            InputStream inputStream = httpUrlConn.getInputStream();  </span><br><span class="line">            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, &quot;utf-8&quot;);  </span><br><span class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  </span><br><span class="line"></span><br><span class="line">            String str = null;  </span><br><span class="line">            while ((str = bufferedReader.readLine()) != null) &#123;  </span><br><span class="line">                buffer.append(str).append(&quot;\r\n&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">            bufferedReader.close();  </span><br><span class="line">            inputStreamReader.close();  </span><br><span class="line">            // 释放资源  </span><br><span class="line">            inputStream.close();  </span><br><span class="line">            inputStream = null;  </span><br><span class="line">            httpUrlConn.disconnect();  </span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;  </span><br><span class="line">            System.out.println(e.getStackTrace());  </span><br><span class="line">        &#125;  </span><br><span class="line">        return buffer.toString();  </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) throws ConfigurationException &#123;</span><br><span class="line">		Object[] objects = &#123;&quot;taskid&quot;&#125;;</span><br><span class="line">		List&lt;String&gt; in = new ArrayList&lt;String&gt;();</span><br><span class="line">		in.add(&quot;taskid&quot;);</span><br><span class="line">		Map&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;();</span><br><span class="line">			params.put(&quot;acc&quot;, &quot;admin&quot;);</span><br><span class="line">			params.put(&quot;pwd&quot;, &quot;q7A1ArKxRM8=&quot;);</span><br><span class="line">//				params.put(&quot;accessToken&quot;, &quot;&quot;);</span><br><span class="line">		String pa = &quot;acc=admin&amp;pwd=q7A1ArKxRM8=&quot;;</span><br><span class="line">		String par = &quot;accessToken=MpOfjtPXtYGGrQhBU3mHNH/TmQZNUoN8uNBzCd9fTGxPxVnCjxR2+m5p/DTWySzX&quot;;</span><br><span class="line">		</span><br><span class="line">//			postMethod(&quot;http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/StartSession&quot;,</span><br><span class="line">//					&quot;POST&quot;,pa);</span><br><span class="line">		postMethod(&quot;http://10.32.71.85:9080/KayangWebApis/KayangWebApi/Data/CloseSession&quot;,</span><br><span class="line">				&quot;POST&quot;,par);</span><br><span class="line">		</span><br><span class="line">//			postMethod(&quot;http://10.32.1.91:7007/OAUAcenter/services/OAOrgService&quot;,</span><br><span class="line">//					&quot;getOrgData&quot;,null);</span><br><span class="line">//			postMethod(&quot;http://10.32.1.91:7007/OAUAcenter/services/OAProcessTaskService&quot;,</span><br><span class="line">//					&quot;endDb&quot;,objects);</span><br><span class="line">//			getUserToken(&quot;admin&quot;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="反射常用调用"><a href="#反射常用调用" class="headerlink" title="反射常用调用"></a>反射常用调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String methodName = new StringBuffer(&quot;get&quot;).append(key.substring(0, 1).toUpperCase())</span><br><span class="line">       	.append(key.substring(1)).toString();</span><br><span class="line"> Method method =  PrjProject.class.getMethod(methodName);</span><br><span class="line"> Object result = method.invoke(info);</span><br></pre></td></tr></table></figure>
<h2 id="jdbc-数据操作"><a href="#jdbc-数据操作" class="headerlink" title="jdbc 数据操作"></a>jdbc 数据操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot; select count(1) as count from demo_userrole t where t.fk_userid = ? and t.fk_roleid = ? &quot;;</span><br><span class="line">SqlRowSet rs = jdbc.queryForRowSet(sql, userId, roleid);</span><br><span class="line">if (rs.next()) &#123;</span><br><span class="line">   rs.getInt(&quot;count&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="log-Linux-权限问题"><a href="#log-Linux-权限问题" class="headerlink" title="log Linux 权限问题"></a>log Linux 权限问题</h2><p>通过继承RollingFileAppender或者DailyRollingFileAppender来实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log4j.properties配置</span><br><span class="line"></span><br><span class="line">#输出到文件   </span><br><span class="line">log4j.appender.fileInfo = com.core.log4jconfig.Mylog4jWriter</span><br><span class="line">log4j.appender.fileInfo.Threshold = DEBUG   </span><br><span class="line">log4j.appender.fileInfo.layout = org.apache.log4j.PatternLayout   </span><br><span class="line">log4j.appender.fileInfo.layout.ConversionPattern = %d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %p %c %x - %m%n  </span><br><span class="line">log4j.appender.fileInfo.Append = TRUE   </span><br><span class="line">log4j.appender.fileInfo.File = /data/my/logs/my.log   </span><br><span class="line">log4j.appender.fileInfo.File=&apos;.&apos;yyyy-MM-dd</span><br></pre></td></tr></table></figure>
<p>com.core.log4jconfig.Mylog4jWriter.java代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Mylog4jWriter extends DailyRollingFileAppender&#123;  </span><br><span class="line">      </span><br><span class="line">    @Override  </span><br><span class="line">    public synchronized void setFile(String fileName, boolean append,  </span><br><span class="line">            boolean bufferedIO, int bufferSize) throws IOException &#123;  </span><br><span class="line">        super.setFile(fileName, append, bufferedIO, bufferSize);  </span><br><span class="line">        File f = new File(fileName);  </span><br><span class="line">        Set&lt;PosixFilePermission&gt; set = new HashSet&lt;PosixFilePermission&gt;();  </span><br><span class="line">        set.add(PosixFilePermission.OWNER_READ);  </span><br><span class="line">        set.add(PosixFilePermission.OTHERS_WRITE);  </span><br><span class="line">        set.add(PosixFilePermission.GROUP_READ);  </span><br><span class="line">        set.add(PosixFilePermission.OTHERS_READ);  </span><br><span class="line">        if(f.exists())&#123;  </span><br><span class="line">            Files.setPosixFilePermissions(f.toPath(), set);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目即可<br>生成的日志文件读写权限为rw-r–r–</p>
<p>所有用户都有日志文件的读权限</p>
<h4 id="修改-Sequence"><a href="#修改-Sequence" class="headerlink" title="修改 Sequence"></a>修改 Sequence</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void updateSequence() &#123;</span><br><span class="line">  String sql = &quot;select SEQUENCE_NAME from ALL_SEQUENCES WHERE SEQUENCE_OWNER=&apos;database&apos;&quot;;</span><br><span class="line">  List&lt;xxxx&gt; list = findByList(sql, xxxx.class);</span><br><span class="line">  String updateSql1 = &quot;&quot;;</span><br><span class="line">  String updateSql2 = &quot;&quot;;</span><br><span class="line">  String selectSql = &quot;&quot;;</span><br><span class="line">  for (xxxx p:list) &#123;</span><br><span class="line">      updateSql1 = &quot;alter sequence &quot;+p.getSequence_name()+&quot; increment by 1000000&quot;;</span><br><span class="line">      jdbc.update(updateSql1);</span><br><span class="line">      selectSql = &quot;select &quot;+p.getSequence_name()+&quot;.nextval from dual&quot;;</span><br><span class="line">      List&lt;xxxx&gt; byList = findByList(selectSql, xxxx.class);</span><br><span class="line">      updateSql2 = &quot;alter sequence &quot;+p.getSequence_name()+&quot; increment by 1&quot;;</span><br><span class="line">      jdbc.update(updateSql2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库操作语句2]]></title>
      <url>https://muxiaobai.github.io/2018/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A52/</url>
      <content type="html"><![CDATA[<p>常用的SQL语句，汇总，以便之后查阅。<br><a id="more"></a></p>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h4 id="MongoDB-备份"><a href="#MongoDB-备份" class="headerlink" title="MongoDB 备份"></a>MongoDB 备份</h4><p>备份生产数据：    </p>
<blockquote>
<p>/db/mongodb-3.4.7/bin/mongodump -h 127.0.0.1:9430 -d daochufilename -o  /db/mongodb-3.4.7/data/mongo_bak/180414  </p>
</blockquote>
<p>删除老数据:</p>
<blockquote>
<p>进入测试mongdb:       ./mongo 127.0.0.1:9430<br>查看所有的库:           show dbs<br>选择待删除的库:         use  databaseName<br>删除当前库:             db.dropDatabase()<br>退出:                   exit                    </p>
</blockquote>
<p>导入数据</p>
<blockquote>
<p>/db/mongodb-3.4.7/bin/mongorestore –host=127.0.0.1 –port 9430 –db databasename     /db/mongodb-3.4.7/data/mongo_bak/180414/daochufilename</p>
</blockquote>
<h4 id="Oracle-备份"><a href="#Oracle-备份" class="headerlink" title="Oracle 备份"></a>Oracle 备份</h4><p>11G 导出， 没有数据的表无法导出</p>
<h5 id="共有多少张表"><a href="#共有多少张表" class="headerlink" title="共有多少张表:"></a>共有多少张表:</h5><ul>
<li>select count(1) from  user_tables ;</li>
<li>select ‘drop table ‘||table_name||’ cascade constraints;’ from user_tables;  </li>
<li>select ‘drop trigger ‘ || trigger_name || ‘;’  from user_triggers;  </li>
<li>select ‘drop sequence ‘ || sequence_name || ‘;’  from user_sequences;  </li>
</ul>
<p>1、先查询一下当前用户下的所有空表</p>
<p>select table_name from user_tables where NUM_ROWS=0;</p>
<p>2、用以下这句查找空表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select &apos;alter table &apos;||table_name||&apos; allocate extent;&apos; </span><br><span class="line">from user_tables where num_rows = 0 ;</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ‘alter table ‘||table_name||’ allocate extent;’ </span><br><span class="line">from user_tables where num_rows=0;</span><br></pre></td></tr></table></figure></p>
<p>alter table table_name allocate extent;</p>
<p>原因:</p>
<p>Oracle 11G 出现EXP-00003: 未找到段 (0,0) 的存储定义<br>oracle 11g数据库表中没有数据在导出数据的时候会遇到的问题，alter system set deferred_segment_creation=false; 该参数意思是当创建对象（如表），初始没有数据，是否立即创建segment。默认是true。这会导致在exp时，没有segment的对象不会导出。<br>但此命令只对以后的表有效，之前的表没有Segment的还是没有。可以创建表的时候声明立即创建Segment ，create table XXX (XXX  XXX) SEGMENT CREATION IMMEDIATE;<br>对于已经创建但是还没有Segment的表来说，可以执行alter table TabelName allocate extent来使其创建出Segment,当然也可以插入一条数据，使其创建Segment .<br>解决方法：<br>1、先查询一下当前用户下的所有空表<br>select table_name from user_tables where NUM_ROWS=0;<br>2、用以下这句查找空表<br>select ‘alter table ‘||table_name||’ allocate extent;’ from user_tables where num_rows=0 ;<br>3、把查询结果导出，执行导出的语句 如：<br>alter table table_name allocate extent;</p>
<p>exp <a href="mailto:username/password@192.168.5.214" target="_blank" rel="noopener">username/password@192.168.5.214</a>/ORCL file=d:\daochu.dmp FULL=y</p>
<p>exp <a href="mailto:XNJD20171225/12345678@192.168.2.240" target="_blank" rel="noopener">XNJD20171225/12345678@192.168.2.240</a>/ORCL file=d:\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容</p>
<p>exp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据</p>
<p>导入数据库</p>
<p>imp <a href="mailto:username/password@192.168.5.214" target="_blank" rel="noopener">username/password@192.168.5.214</a>/ORCL tablespaces=xxx fromuser=cccccc touser=zzzzz file=D:\daoru.dmp FULL=y</p>
<p>导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分</p>
<p>exp_dir=/fo</p>
<h4 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h4><p>sqlplus / as sysdba</p>
<p>sqlplus /nolog<br>conn  username/password as sysdba </p>
<h4 id="设置directory"><a href="#设置directory" class="headerlink" title="设置directory"></a>设置directory</h4><p>–查路径<br>select * from dba_directories;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SYS                EXP_IMP_DATA</span><br><span class="line">/opt/oracle/oradata/forp/db_bakup</span><br></pre></td></tr></table></figure></p>
<p>create or replace  directory dmp_dir as ‘/data/testdata/‘;</p>
<p>grant read,write on directory dmp_dir to username;</p>
<p><a href="https://blog.csdn.net/eason_oracle/article/details/77101563" target="_blank" rel="noopener">设置directory文件路径</a></p>
<ul>
<li><ol start="0">
<li>su - oracle</li>
</ol>
</li>
<li><p>1.导出生产库 oracle数据</p>
<blockquote>
<p>进入127.0.0.1服务器<br>  导出：    expdp TEST1/PITAYA_7Na1 file=/20180922.dmp directory=exp_dir schemas=TEST1;</p>
</blockquote>
</li>
<li><p>2.导入Oracle数据到测试库</p>
<blockquote>
<p>   impdp TEST/PITAYA_7Na1_TEST file=/20180922.dmp directory=exp_dir REMAP_SCHEMA=TEST1:TEST; </p>
</blockquote>
</li>
</ul>
<h2 id="设置plsql的快捷方式"><a href="#设置plsql的快捷方式" class="headerlink" title="设置plsql的快捷方式"></a>设置plsql的快捷方式</h2><p>sqlplus TEST/PITAYA_7Na1_TEST@orcl</p>
<p>打开PL/SQL，在Tools-&gt;Perferences-&gt;Editor中Autoreplaces选择配置的short.txt文件 ,然后重启一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = select * from </span><br><span class="line">w = where </span><br><span class="line">sf = select t.*, t.rowid from  </span><br><span class="line">sc = select count(1) from </span><br><span class="line">d = delete from</span><br></pre></td></tr></table></figure>
<h2 id="查询外键"><a href="#查询外键" class="headerlink" title="查询外键"></a>查询外键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select a.constraint_name, a.table_name, b.constraint_name  from user_constraints a, user_constraints b</span><br><span class="line">where a.constraint_type = &apos;R&apos; and b.constraint_type = &apos;P&apos;  and a.r_constraint_name = b.constraint_name</span><br><span class="line">and a.constraint_name = &apos;FK_CRM_7&apos;</span><br></pre></td></tr></table></figure>
<h2 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h2><p>查询锁表的对象</p>
<p>这个两个sql都是要在具有dba权限的用户下执行的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select t2.username,</span><br><span class="line">       t2.sid,</span><br><span class="line">       t2.serial#,</span><br><span class="line">       t3.object_name,</span><br><span class="line">       t2.OSUSER,</span><br><span class="line">       t2.MACHINE,</span><br><span class="line">       t2.PROGRAM,</span><br><span class="line">       t2.LOGON_TIME,</span><br><span class="line">       t2.COMMAND,</span><br><span class="line">       t2.LOCKWAIT,</span><br><span class="line">       t2.SADDR,</span><br><span class="line">       t2.PADDR,</span><br><span class="line">       t2.TADDR,</span><br><span class="line">       t2.SQL_ADDRESS,</span><br><span class="line">       t1.LOCKED_MODE</span><br><span class="line">  from v$locked_object t1, v$session t2, dba_objects t3</span><br><span class="line"> where t1.session_id = t2.sid</span><br><span class="line">   and t1.object_id = t3.object_id</span><br><span class="line"> order by t2.logon_time;</span><br></pre></td></tr></table></figure>
<p>kill 锁表操作   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER system KILL session &apos;SID,serial#&apos;;</span><br></pre></td></tr></table></figure>
<p>锁的级别</p>
<p>v$locked_object中的LOCKED_MODE字段表示锁的模式，oracle中锁的模式有如下几种:<br>0：none<br>1：null 空<br>2：Row-S 行共享(RS)：共享表锁，sub share<br>3：Row-X 行独占(RX)：用于行的修改，sub exclusive<br>4：Share 共享锁(S)：阻止其他DML操作，share<br>5：S/Row-X 共享行独占(SRX)：阻止其他事务操作，share/sub exclusive<br>6：exclusive 独占(X)：独立访问使用，exclusive</p>
<p>数字越大锁级别越高, 影响的操作越多。</p>
<p>1级锁有：Select，有时会在v$locked_object出现。<br>2级锁有：Select for update,Lock For Update,Lock Row Share<br>select for update当对话使用for update子串打开一个游标时，所有返回集中的数据行都将处于行级(Row-X)独占式锁定，其他对象只能查询这些数据行，不能进行update、delete或select for update操作。<br>3级锁有：Insert, Update, Delete, Lock Row Exclusive<br>没有commit之前插入同样的一条记录会没有反应, 因为后一个3的锁会一直等待上一个3的锁, 我们必须释放掉上一个才能继续工作。<br>4级锁有：Create Index, Lock Share<br>locked_mode为2,3,4不影响DML(insert,delete,update,select)操作, 但DDL(alter,drop等)操作会提示ora-00054错误。<br>00054, 00000, “resource busy and acquire with NOWAIT specified”<br>// <em>Cause: Resource interested is busy.<br>// </em>Action: Retry if necessary.<br>5级锁有：Lock Share Row Exclusive<br>具体来讲有主外键约束时update / delete … ; 可能会产生4,5的锁。<br>6级锁有：Alter table, Drop table, Drop Index, Truncate table, Lock Exclusive</p>
<hr>
<p>查某session 正在执行的sql语句，从而可以快速定位到哪些操作或者代码导致事务一直进行没有结束等.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT /*+ ORDERED */ </span><br><span class="line"> sql_text</span><br><span class="line">  FROM v$sqltext a</span><br><span class="line"> WHERE (a.hash_value, a.address) IN</span><br><span class="line">       (SELECT DECODE(sql_hash_value, 0, prev_hash_value, sql_hash_value),</span><br><span class="line">               DECODE(sql_hash_value, 0, prev_sql_addr, sql_address)</span><br><span class="line">          FROM v$session b</span><br><span class="line">         WHERE b.sid = &apos;67&apos;)  /* 此处67 为SID*/</span><br><span class="line"> ORDER BY piece ASC;</span><br></pre></td></tr></table></figure>
<hr>
<p>plsql 工具   Tools —–&gt;Sessions———&gt; 查看</p>
<h4 id="数据库比对工具"><a href="#数据库比对工具" class="headerlink" title="数据库比对工具"></a>数据库比对工具</h4><p>plsql Tools ———-&gt;Compare User Objects 选择另外一个库</p>
<h4 id="Oracle-数据库表、字段级别，"><a href="#Oracle-数据库表、字段级别，" class="headerlink" title="Oracle 数据库表、字段级别，"></a>Oracle 数据库表、字段级别，</h4><p>select <em> from  user_tables  t;–所有表<br>select </em> from all_tab_columns  t;–系统<br>select <em> from ALL_TAB_COLS t;–系统表<br>select </em> from cols t;–字段<br>select <em> from USER_TAB_COLS t;–用户字段<br>select </em> from user_tab_comments  t–所有表字段<br>select * from user_col_comments t;–所有表注释</p>
<p>SELECT INSTANCE_NAME FROM V$INSTANCE; –查询sid s_name</p>
<h4 id="Oracle-方法等"><a href="#Oracle-方法等" class="headerlink" title="Oracle 方法等"></a>Oracle 方法等</h4><ul>
<li>t.createdate &lt; to_date(‘2018-09-01’,’yyyy-mm-dd hh24:mi:ss’) 创建时间小于2018-09-01 </li>
<li>to_char( t.CreateDate,’yyyyMMdd’)=to_char(sysdate,’yyyyMMdd’)  当天，类似当月yyyyMM当年yyyy</li>
<li>case f.state when 0 then ‘第壹’ when 2 then ‘第贰’ when 3 then ‘第叁’ else null end as 状态,</li>
<li>逗号存ID，查询    “    INSTR((SELECT ‘,’||(deptId)||’,’ FROM Pop_Dept_DutyPeo WHERE userId=? AND grade=1 GROUP BY userId), ‘,’||prj.FK_DeptID||’,’) &gt; 0 “</li>
<li>列传行 select listagg(to_char(b.id),’,’) within group(order by b.orderId)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> SQL </category>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 常用代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring源码阅读之AOP两种代理模式]]></title>
      <url>https://muxiaobai.github.io/2018/06/25/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BAOP%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/06/25/Spring源码阅读之AOP两种代理模式/20180628.png" alt="AOP"><br><a id="more"></a></p>
<p><a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="noopener">github简易Spring实现</a></p>
<p>一般用作：日志，权限控制，异常，事务等情况下。</p>
<p>xml中的解析</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;autoProxyCreator&quot; class=&quot;us.codecraft.tinyioc.aop.AspectJAwareAdvisorAutoProxyCreator&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;timeInterceptor&quot; class=&quot;us.codecraft.tinyioc.aop.TimerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;aspectjAspect&quot; class=&quot;us.codecraft.tinyioc.aop.AspectJExpressionPointcutAdvisor&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;advice&quot; ref=&quot;timeInterceptor&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;expression&quot; value=&quot;execution(* us.codecraft.tinyioc.*.*(..))&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>AspectJAwareAdvisorAutoProxyCreator implements BeanPostProcessor<br>所以扫描这个类的时候会执行AspectJAwareAdvisorAutoProxyCreator.postProcessAfterInitialization()。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Object postProcessAfterInitialization(Object bean, String beanName) throws Exception &#123;</span><br><span class="line">		if (bean instanceof AspectJExpressionPointcutAdvisor) &#123;</span><br><span class="line">			return bean;</span><br><span class="line">		&#125;</span><br><span class="line">		if (bean instanceof MethodInterceptor) &#123;</span><br><span class="line">			return bean;</span><br><span class="line">		&#125;</span><br><span class="line">		List&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory</span><br><span class="line">				.getBeansForType(AspectJExpressionPointcutAdvisor.class);</span><br><span class="line">		for (AspectJExpressionPointcutAdvisor advisor : advisors) &#123;</span><br><span class="line">			if (advisor.getPointcut().getClassFilter().matches(bean.getClass())) &#123;</span><br><span class="line">                ProxyFactory advisedSupport = new ProxyFactory();</span><br><span class="line">				advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());</span><br><span class="line">				advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());</span><br><span class="line"></span><br><span class="line">				TargetSource targetSource = new TargetSource(bean, bean.getClass(), bean.getClass().getInterfaces());</span><br><span class="line">				advisedSupport.setTargetSource(targetSource);</span><br><span class="line"></span><br><span class="line">				return advisedSupport.getProxy();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return bean;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>然后遍历所有的AspectJExpressionPointcutAdvisor,如果有其他的bean满足条件advisor.getPointcut().getClassFilter().matches(bean.getClass())那么则返回代理对象。</p>
<p>这里面的返回代理对象如果用代码来写的话就是下面这样，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   // 1. 设置被代理对象(Joinpoint)</span><br><span class="line">AdvisedSupport advisedSupport = new AdvisedSupport();</span><br><span class="line">TargetSource targetSource = new TargetSource(helloWorldService, HelloWorldServiceImpl.class,</span><br><span class="line">		HelloWorldService.class);</span><br><span class="line">advisedSupport.setTargetSource(targetSource);</span><br><span class="line"></span><br><span class="line">//设置匹配的match</span><br><span class="line">MethodMatcher methodMatcher = new MethodMatcher() &#123;</span><br><span class="line">       </span><br><span class="line">       @Override</span><br><span class="line">       public boolean matches(Method method, Class targetClass) &#123;</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">advisedSupport.setMethodMatcher(methodMatcher);</span><br><span class="line"></span><br><span class="line">// 2. 设置拦截器(Advice)</span><br><span class="line">TimerInterceptor timerInterceptor = new TimerInterceptor();</span><br><span class="line">advisedSupport.setMethodInterceptor(timerInterceptor);</span><br><span class="line"></span><br><span class="line">// 3. 创建代理(Proxy)</span><br><span class="line">JdkDynamicAopProxy jdkDynamicAopProxy = new JdkDynamicAopProxy(advisedSupport);</span><br><span class="line">HelloWorldService helloWorldServiceProxy = (HelloWorldService) jdkDynamicAopProxy.getProxy();</span><br><span class="line"></span><br><span class="line">// 4. 基于AOP的调用</span><br><span class="line">helloWorldServiceProxy.helloWorld();</span><br></pre></td></tr></table></figure>
<p>advisedSupport{targetSource,methodMatcher,methodInterceptor}<br>这个里面记录了代理目标，和匹配的expression和具体的拦截操作</p>
<h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><p>implements InvocationHandler</p>
<p>先获取代理类Proxy.newProxyInstance(getClass().getClassLoader(), advised.getTargetSource().getInterfaces(), this);，然后implements InvocationHandler ,上面的this,执行target方法的时候就会优先执行InvocationHandler.invoke(final Object proxy, final Method method, final Object[] args);</p>
<h5 id="Proxy-newProxyInstance"><a href="#Proxy-newProxyInstance" class="headerlink" title="Proxy.newProxyInstance()"></a>Proxy.newProxyInstance()</h5><p>这个是jdk动态代理，需要代理类实现接口，而且只能代理接口里面的方法，因为使用接口来创建代理。</p>
<p>Proxy.newProxyInstance(),获取代理类方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static Object newProxyInstance(ClassLoader loader,</span><br><span class="line">                                         Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                         InvocationHandler h)</span><br><span class="line">       throws IllegalArgumentException</span><br><span class="line">   &#123;</span><br><span class="line">       Objects.requireNonNull(h);//InvocationHandler 不为空</span><br><span class="line"></span><br><span class="line">       final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">       </span><br><span class="line">       /*</span><br><span class="line">        * Look up or generate the designated proxy class.</span><br><span class="line">        * 查找或生成指定的代理类。</span><br><span class="line">        */</span><br><span class="line">       Class&lt;?&gt; cl = getProxyClass0(loader, intfs);//</span><br><span class="line"></span><br><span class="line">       /*</span><br><span class="line">        * Invoke its constructor with the designated invocation handler.</span><br><span class="line">        * 用指定的调用处理程序调用它的构造函数。 constructorParams = InvocationHandler.class</span><br><span class="line">        */</span><br><span class="line">       final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">      </span><br><span class="line">       return cons.newInstance(new Object[]&#123;h&#125;);//返回代理类</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>getProxyClass0()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                          Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">       if (interfaces.length &gt; 65535) &#123;</span><br><span class="line">           throw new IllegalArgumentException(&quot;interface limit exceeded&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       // If the proxy class defined by the given loader implementing</span><br><span class="line">       // the given interfaces exists, this will simply return the cached copy;</span><br><span class="line">       // otherwise, it will create the proxy class via the ProxyClassFactory</span><br><span class="line">       //如果classloader加载的接口代理类存在，直接从cache中国返回</span><br><span class="line">       //否则从ProxyClassFactory创建一个新的代理类</span><br><span class="line">       return proxyClassCache.get(loader, interfaces);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="CGLIB"><a href="#CGLIB" class="headerlink" title="CGLIB"></a>CGLIB</h4><p>implements MethodInterceptor </p>
<p>获取代理类</p>
<p>Enhancer e=new Enhancer();//创建代理对象类<br>e.setSuperclass(object.getClass());//声明代理对象的父类是谁（是目标对象）<br>e.setCallback(this);//设置回调函数，即调用intercept()<br>return e.create();//返回创建的代理对象</p>
<p>执行intercept(Object obj, Method method, Object[] args, MethodProxy proxy);</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/27757233" target="_blank" rel="noopener">Java JDK代理、CGLIB、AspectJ代理分析比较</a></li>
<li><a href="https://blog.csdn.net/moreevan/article/details/11977115" target="_blank" rel="noopener">Spring AOP 实现原理</a></li>
<li><a href="http://www.cnblogs.com/dazhaxie/archive/2012/06/18/2553300.html" target="_blank" rel="noopener">Spring源代码解析(收藏)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring源码阅读之Ioc控制反转]]></title>
      <url>https://muxiaobai.github.io/2018/06/22/Spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BIoc%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p><img src="/2018/06/22/Spring源码阅读之Ioc控制反转/SpringIOC.png" alt="IOC"><br><a id="more"></a></p>
<p><a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="noopener">github简易Spring实现</a></p>
<p>加载文件，解析XML</p>
<p>如果是<code>&lt;bean  id =&quot;a1&quot; class =&quot;b&quot;&gt;</code>,AbstractBeanFactory.beanDefinitionMap中会添加一份Bean的描述其中Map&lt;key=”a1”,value =”beanDefinition”&gt;beanDefinition中是描述这个Bean的，包含Bean对象，beanClass类对象，beanClassName类名，和对应的属性PropertyValues，就是List PropertyValue,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String name = ele.getAttribute(&quot;id&quot;);</span><br><span class="line">String className = ele.getAttribute(&quot;class&quot;);</span><br><span class="line">BeanDefinition beanDefinition = new BeanDefinition();</span><br><span class="line">processProperty(ele, beanDefinition);</span><br><span class="line">beanDefinition.setBeanClassName(className);</span><br><span class="line">getRegistry().put(name, beanDefinition);</span><br></pre></td></tr></table></figure>
<p>如果Bean内部是<code>&lt;property  name =&quot;a1&quot; value =&quot;b1&quot;&gt;</code>,这时候PropertyValue就是一个{name =”a1”,value =”b1”},</p>
<p>定义BeanDefination{bean,beanClass,beanClassName,PropertyValues=[list<propertyvalue> propertyValueList]}</propertyvalue></p>
<p>处理引用ref</p>
<p>如果Bean内部是<code>&lt;property  name =&quot;a1&quot; ref =&quot;b2&quot;&gt;</code>,这时候创建一个BeanReference(“b2”),PropertyValue就是一个{name =”a1”,value =BeanReference},</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (value instanceof BeanReference) &#123;</span><br><span class="line">				BeanReference beanReference = (BeanReference) value;</span><br><span class="line">				value = getBean(beanReference.getName());//根据b2获取bean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Method declaredMethod = bean.getClass().getDeclaredMethod(</span><br><span class="line">						&quot;set&quot; + propertyValue.getName().substring(0, 1).toUpperCase()</span><br><span class="line">								+ propertyValue.getName().substring(1), value.getClass());</span><br><span class="line">declaredMethod.setAccessible(true);</span><br><span class="line"></span><br><span class="line">declaredMethod.invoke(bean, value);//把b2放到a1中，反射调用</span><br></pre></td></tr></table></figure>
<p>这里的简化版本所有的引用都是在getBean之后进行的。</p>
<p>把所有的Bean都注册到BeanFactory中。AbstractBeanFactory.beanDefinitionMap中包含所有的{name =””, BeanDefinition = “”},定义的Bean的名字和对应class的Bean的描述类</p>
<p>获取Bean的时候BeanFactory.getBean()，反射newInstance()<br><code>beanDefinition.getBeanClass().newInstance();</code>直接得到类对象，进行实例化。再处理各种引用等问题。</p>
<p>以上这个简版的Spring已经把主要的逻辑讲了，当然这只是原理，Spring比这个跟严谨更复杂。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器的加载页面过程及优化方法]]></title>
      <url>https://muxiaobai.github.io/2018/06/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2%E8%BF%87%E7%A8%8B%E5%8F%8A%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="接上一篇中的DOM所有时间，浏览器在做些什么？"><a href="#接上一篇中的DOM所有时间，浏览器在做些什么？" class="headerlink" title="接上一篇中的DOM所有时间，浏览器在做些什么？"></a>接上一篇中的DOM所有时间，浏览器在做些什么？</h2><p>之前是接受资源,domLoading,domInteractive,domContentLoadedEventStart,domContentLoadedEventEnd,domComplete,之后是其他，主要分析这中间的时间，浏览器做什么来展示内容。<br>loadEventStart,loadEventEnd</p>
<h3 id="构建DOM-渲染-绘画"><a href="#构建DOM-渲染-绘画" class="headerlink" title="构建DOM 渲染 绘画"></a>构建DOM 渲染 绘画</h3><p>关键渲染路径:DOM javascript CSSOM Render Tree Layout Paint</p>
<ul>
<li>1.处理 HTML 标记并构建 DOM 树。</li>
<li>2.处理 CSS 标记并构建 CSSOM 树。</li>
<li>3.将 DOM 与 CSSOM 合并成一个渲染树。（Render Tree）</li>
<li>4.根据渲染树来布局，以计算每个节点的几何信息。（Layout）</li>
<li>5.将各个节点绘制到屏幕上。（Paint）</li>
</ul>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p><img src="/2018/06/08/浏览器的加载页面过程及优化方法/website3.png" alt="看一下时间的问题"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;network(dns+tcp):&quot;+(window.performance.timing.requestStart - window.performance.timing.fetchStart)+&quot;ms,&quot;+</span><br><span class="line">&quot;TTFB:&quot;+ (window.performance.timing.responseStart  - window.performance.timing.requestStart)+&quot;ms,&quot;+</span><br><span class="line">&quot;Download HTML:&quot;+(window.performance.timing.responseEnd -window.performance.timing.responseStart)+&quot;ms,&quot;+</span><br><span class="line">&quot;other:&quot;+(window.performance.timing.domLoading -window.performance.timing.responseEnd)+&quot;ms,&quot;+</span><br><span class="line">&quot;DOM:&quot;+(window.performance.timing.domInteractive - window.performance.timing.domLoading)+&quot;ms,&quot;+</span><br><span class="line">&quot;DomContentLoaded:&quot; +(window.performance.timing.domInteractive -window.performance.timing.fetchStart)+&quot;ms,&quot;+</span><br><span class="line">&quot;DOMContentLoaded: 36+364+34+1+167 = 602ms,&quot;+</span><br><span class="line">&quot;download Other(css,js,pic)&amp;hander:&quot;+ (window.performance.timing.domComplete- window.performance.timing.domInteractive)+&quot;ms,&quot;+</span><br><span class="line">&quot;load Event:&quot; + (window.performance.timing.domContentLoadedEventEnd - window.performance.timing.domContentLoadedEventStart) +&quot;ms,&quot;+</span><br><span class="line">&quot;Load: 602+1034 = 1634ms&quot;</span><br></pre></td></tr></table></figure></p>
<p>先从时间上看：</p>
<p>性能的话，如果，这里的(requestStart - fetchStart) 时间很大的话，就需要看一下是不是网络的问题了；如果responseStart - requestStart很大，是不是服务器的响应速度有问题呢？这个需要后台，负载等处理，查一下请求响应时间，是不是很长？然后在responseEnd之后，得到了HTML，就是浏览器的渲染等问题了。</p>
<h3 id="构建对象生成时间-生成DOM和CSSOM"><a href="#构建对象生成时间-生成DOM和CSSOM" class="headerlink" title="构建对象生成时间,生成DOM和CSSOM"></a>构建对象生成时间,生成DOM和CSSOM</h3><p>涉及到解析HTML等，语法解析问题。</p>
<p>CSSOM，层级级联样式怎么最简化，怎么渲染的时候构建Render Tree最优。</p>
<p>CSS选择器内套多层，越来越复杂;精简不用的样式</p>
<h3 id="加载资源时间"><a href="#加载资源时间" class="headerlink" title="加载资源时间"></a>加载资源时间</h3><blockquote>
<p>HTML 和 CSS 都是阻塞渲染的资源</p>
</blockquote>
<p>HTML 必须的，渲染内容。</p>
<p>然后是CSS资源，CSS是阻塞资源，需要尽快加载，方便浏览器快速加载。使用媒体查询，让一些样式不用阻塞渲染。</p>
<p>例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;  默认是all</span><br><span class="line">&lt;link href=&quot;style.css&quot;    rel=&quot;stylesheet&quot; media=&quot;all&quot;&gt;</span><br><span class="line">&lt;link href=&quot;print.css&quot; rel=&quot;stylesheet&quot; media=&quot;print&quot;&gt; 打印时</span><br><span class="line">&lt;link href=&quot;other.css&quot; rel=&quot;stylesheet&quot; media=&quot;(min-width: 40em)&quot;&gt;最小宽度加载</span><br><span class="line">&lt;link href=&quot;portrait.css&quot; rel=&quot;stylesheet&quot; media=&quot;orientation:portrait&quot;&gt; 定输出设备中的页面可见区域高度大于或等于宽度，竖屏</span><br></pre></td></tr></table></figure></p>
<p>注意“阻塞渲染”仅是指浏览器是否需要暂停网页的首次渲染，直至该资源准备就绪。无论哪一种情况，浏览器仍会下载 CSS 资源，只不过不阻塞渲染的资源优先级较低罢了。</p>
<p>JavaScript 也会阻止 DOM 构建和延缓网页渲染。 为了实现最佳性能，可以让您的 JavaScript 异步执行，并去除关键渲染路径中任何不必要的 JavaScript。当 HTML 解析器遇到一个 script 标记时，它会暂停构建 DOM，将控制权移交给 JavaScript 引擎；等 JavaScript 引擎运行完毕，浏览器会从中断的地方恢复 DOM 构建。<br><code>&lt;script src=&quot;app.js&quot; async&gt;&lt;/script&gt;</code>可以添加异步，这样可以等资源加载完后，再进行执行。</p>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存溢出:JS死循环，DOM引用</p>
<h3 id="怎样找到具体的问题代码"><a href="#怎样找到具体的问题代码" class="headerlink" title="怎样找到具体的问题代码"></a>怎样找到具体的问题代码</h3><p><img src="/2018/06/08/浏览器的加载页面过程及优化方法/website1.png" alt="分析出现问题的位置"></p>
<p><img src="/2018/06/08/浏览器的加载页面过程及优化方法/website2.png" alt="分析出现问题的位置"><br><a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">上面图的网址: https://googlechrome.github.io/devtools-samples/jank/</a><br>先得到profile，现在已经在Performance面板中了，FPS一般都在60左右，这里有红色的已经降到10以下了。然后我们选取其中的一部分,上图分析了结果，找到问题的所在，然后进行处理。这个问题是: <code>Layout Forced和First Layout Invalidation</code></p>
<blockquote>
<p>注：先降低CPU的速度。</p>
</blockquote>
<p>参考：</p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/" target="_blank" rel="noopener">google官方文档-关键渲染路径</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="noopener">chrome-devtools</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp" target="_blank" rel="noopener">分析关键渲染路径性能</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/memory-problems/" target="_blank" rel="noopener">内存模型</a></li>
<li><a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">性能演示测试</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> 性能优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器的请求与响应过程]]></title>
      <url>https://muxiaobai.github.io/2018/06/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>从一个简单的工具说起:<a href="https://github.com/pod4g/hiper" target="_blank" rel="noopener">hiper</a></p>
<p><img src="/2018/06/07/浏览器的请求与响应过程/baidu.png" alt="百度"><br><img src="/2018/06/07/浏览器的请求与响应过程/load.png" alt="另一个加载大量图片的网站"></p>
<ul>
<li>DNS look time: DNS 寻址</li>
<li>TCP connect time: TCP握手</li>
<li>TTFB : 最初的发送request到response接受到第一个字节(对于浏览器来说，就是等待Waiting) Time To First Byte</li>
<li>Download time of the page: 下载页面</li>
<li>After DOM Ready download time: 下载其他资源</li>
<li>White screen time: 白屏时间（从浏览器发送到DOM解析之前）</li>
<li>DOM Ready time: DOM准备时间</li>
<li>Load time: Load所有时间</li>
</ul>
<p>以上这些时间是判断一个页面对于使用者的友好程度，要清楚到底是哪一个环节耗时，才是解决问题的重中之重。</p>
<ul>
<li>1.totalDNSTime += this.getDNSTime(domainLookupStart, domainLookupEnd)</li>
<li>2.totalTCPTime += this.getTCPTime(connectStart, connectEnd)</li>
<li>3.totalTTFBTime += this.getTTFB(requestStart, responseStart)</li>
<li>4.totalDownloadTime += this.getDownloadTime(responseStart, responseEnd)</li>
<li>5.totalAfterDOMReadyTheDownloadTimeOfTheRes += this.getAfterDOMReadyTheDownloadTimeOfTheRes(domInteractive, domComplete)</li>
<li>6.totalWhiteScreenTime += this.getWhiteScreenTime(navigationStart, domInteractive)</li>
<li>7.totalDOMReadyTime += this.getDOMReadyTime(navigationStart, domContentLoadedEventEnd)</li>
<li>8.totalLoadTime += this.getLoadTime(navigationStart, loadEventEnd)</li>
</ul>
<p>这个工具中的时间计算</p>
<p><img src="/2018/06/07/浏览器的请求与响应过程/timing-overview.png" alt="timing-overview"></p>
<p>chrome 中的performance.timing对象记录了所有的时间 <a href="https://www.cnblogs.com/btgyoyo/p/6341077.html" target="_blank" rel="noopener">浏览器从输入网址发生的事(前端优化)</a></p>
<p>navigationStart,如果没有前一个网页，则等于fetchStart属性。<br>fetchstart,</p>
<p>DNS: domainLookupStart,domainLookupEnd,</p>
<p>TCP: connectStart,secureConnectionStart,connectEnd,</p>
<p>TTFB和Download: requestStart,responseStart,responseEnd,</p>
<p>渲染DOM:<br>domLoading,开始解析渲染DOM树的时间<br>domInteractive,完成解析DOM树的时间</p>
<p>加载资源:<br>domContentLoadedEventStart,在DOM树解析完成后，网页内资源加载开始的时间<br>domContentLoadedEventEnd,DOM树解析完成后，网页内资源加载完成时间（如JS脚本加载执行完成） 这个阶段会可能会触发 domcontentLoaded 事件<br>domComplete,DOM已经结束，而且资源也加载完了。</p>
<p>DOM的onload回调方法时间: loadEventStart,loadEventEnd load回调函数执行完成的时间<br><img src="/2018/06/07/浏览器的请求与响应过程/dom-navtiming.png" alt="详细放大图"><br><a href="https://blog.csdn.net/redtopic/article/details/70677690" target="_blank" rel="noopener">各个时间</a><br><a href="https://www.cnblogs.com/btgyoyo/p/6341077.html" target="_blank" rel="noopener">介绍performance中的time</a></p>
<h3 id="DOMContentLoaded-Load-两个事件"><a href="#DOMContentLoaded-Load-两个事件" class="headerlink" title="DOMContentLoaded Load 两个事件"></a>DOMContentLoaded Load 两个事件</h3><p><a href="https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html" target="_blank" rel="noopener">DOMContentLoaded和Load两个时间，蓝线和红线</a><br>这两种情况的差别，DOMContentLoaded完成的时候，是页面已经出来，结束白屏状态，当Load的时候，图片，等其他资源也加载完毕。</p>
<p><a href="https://www.cnblogs.com/Bonnie3449/p/8419609.html" target="_blank" rel="noopener">DOMContentLoaded 与 load事件</a></p>
<h3 id="DOM中的document-readystate属性值："><a href="#DOM中的document-readystate属性值：" class="headerlink" title="DOM中的document.readystate属性值："></a>DOM中的document.readystate属性值：</h3><ul>
<li>uninitialized (未初始化) ：对象尚未初始化</li>
<li>loading (正在加载) ：对象正在加载</li>
<li>loaded (加载完毕) ：对象加载数据完成</li>
<li>interactive (交互)：可以操作对象，但还没完全加载</li>
<li>complete (完成)：对象已经加载完毕</li>
</ul>
<h3 id="DOMContentLoaded-jquery-ready事件"><a href="#DOMContentLoaded-jquery-ready事件" class="headerlink" title="DOMContentLoaded/ jquery ready事件"></a>DOMContentLoaded/ jquery ready事件</h3><p>$(function(){})$(document).ready(function(){})jQuery中是怎么处理这两种加载情况的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">jQuery.readyException = function( error ) &#123;</span><br><span class="line">	window.setTimeout( function() &#123;</span><br><span class="line">		throw error</span><br><span class="line">	&#125; )</span><br><span class="line">&#125;</span><br><span class="line">这里使用了Deferred对象，最终会执行这个fn，而且会给参数 readyList.resolveWith( document, [ jQuery ] ) 把当前的document 和jQUery给fn内部可以使用</span><br><span class="line">// The deferred used on DOM ready</span><br><span class="line">var readyList = jQuery.Deferred()</span><br><span class="line">jQuery.fn.ready = function( fn ) &#123;</span><br><span class="line">--------3-----------</span><br><span class="line">	readyList.then( fn )</span><br><span class="line">		// Wrap jQuery.readyException in a function so that the lookup</span><br><span class="line">		// happens at the time of error handling instead of callback</span><br><span class="line">		// registration.</span><br><span class="line">		.catch( function( error ) &#123;</span><br><span class="line">			jQuery.readyException( error )</span><br><span class="line">		&#125; )</span><br><span class="line">	return this</span><br><span class="line">&#125;</span><br><span class="line">jQuery.extend( &#123;</span><br><span class="line">	// Is the DOM ready to be used? Set to true once it occurs.</span><br><span class="line">	isReady: false,</span><br><span class="line">	// A counter to track how many items to wait for before</span><br><span class="line">	// the ready event fires. See #6781</span><br><span class="line">	readyWait: 1,</span><br><span class="line">	//ready等会</span><br><span class="line">	// Hold (or release) the ready event</span><br><span class="line">	holdReady: function( hold ) &#123;</span><br><span class="line">		if ( hold ) &#123;</span><br><span class="line">			jQuery.readyWait++</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			jQuery.ready( true )</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	// Handle when the DOM is ready</span><br><span class="line">	ready: function( wait ) &#123;</span><br><span class="line">		// Abort if there are pending holds or we&amp;aposre already ready</span><br><span class="line">		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) &#123;</span><br><span class="line">			return</span><br><span class="line">		&#125;</span><br><span class="line">		// Remember that the DOM is ready</span><br><span class="line">		jQuery.isReady = true</span><br><span class="line">		// If a normal DOM Ready event fired, decrement, and wait if need be</span><br><span class="line">		if ( wait !== true &amp;&amp; --jQuery.readyWait &gt; 0 ) &#123;</span><br><span class="line">			return</span><br><span class="line">		&#125;</span><br><span class="line">        //这里会被调用，jQuery.ready()--------2-----------</span><br><span class="line">		// If there are functions bound, to execute</span><br><span class="line">		readyList.resolveWith( document, [ jQuery ] )</span><br><span class="line">	&#125;</span><br><span class="line">&#125; )</span><br><span class="line">jQuery.ready.then = readyList.then</span><br><span class="line">// The ready event handler and self cleanup method</span><br><span class="line">function completed() &#123;</span><br><span class="line">	document.removeEventListener( &quot;DOMContentLoaded&quot;, completed )</span><br><span class="line">	window.removeEventListener( &quot;load&quot;, completed )</span><br><span class="line">	jQuery.ready()</span><br><span class="line">&#125;</span><br><span class="line">--------1-----------</span><br><span class="line">// Catch cases where $(document).ready() is called</span><br><span class="line">// after the browser event has already occurred.</span><br><span class="line">// Support: IE &lt;=9 - 10 only</span><br><span class="line">// Older IE sometimes signals &quot;interactive&quot; too soon</span><br><span class="line">if ( document.readyState === &quot;complete&quot; ||</span><br><span class="line">	( document.readyState !== &quot;loading&quot; &amp;&amp; !document.documentElement.doScroll ) ) &#123;</span><br><span class="line">    </span><br><span class="line">	// Handle it asynchronously to allow scripts the opportunity to delay ready</span><br><span class="line">	window.setTimeout( jQuery.ready )</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	// Use the handy event callback</span><br><span class="line">	document.addEventListener( &quot;DOMContentLoaded&quot;, completed )</span><br><span class="line">	// A fallback to window.onload, that will always work</span><br><span class="line">	window.addEventListener( &quot;load&quot;, completed )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照1,2,3的代码顺序执行，首先1后面，判断，如果当前的document状态已经完整，就可以直接立即执行2，|| 不是在加载状态，兼容IE， 否则的话，在document中添加两个事件的监听，发生这种事件之后，执行completed，这个方法内部会调用jQuery.ready()—-2<br>2最后还是调用3，</p>
<p><a href="https://segmentfault.com/a/1190000005869515" target="_blank" rel="noopener">浅谈DOMContentLoaded事件及其封装方法</a></p>
<h4 id="load-onload-事件"><a href="#load-onload-事件" class="headerlink" title="load/onload 事件"></a>load/onload 事件</h4><p>上面事件顺序理解之后，再结合上面一个事件，这个事件只是事件更靠后一点。</p>
<p>body标签中加onload事件，可以做出来等待的情况，<a href="https://muxiaobai.github.io/2016/12/17/%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85/">转圈效果</a></p>
<h2 id="各大浏览器内核介绍"><a href="#各大浏览器内核介绍" class="headerlink" title="各大浏览器内核介绍"></a>各大浏览器内核介绍</h2><p>常见的浏览器内核:</p>
<ul>
<li>IE : Trident</li>
<li>firefox: Gecko(Mozilla)</li>
<li>Safari: Webkit</li>
<li>Chrome Blink</li>
<li>Opera: Presto,现使用Chrome的Blink</li>
</ul>
<p>注：Blink是Chromium的核心,它的前身是Webkit.国内的大部分浏览器,其中一个内核是Trident，然后再增加一个其他内核。国内的厂商一般把其他内核叫做“高速浏览模式”，而Trident则是“兼容浏览模式”，用户可以来回切换。</p>
<h2 id="chrome-F12开发者工具"><a href="#chrome-F12开发者工具" class="headerlink" title="chrome F12开发者工具"></a>chrome F12开发者工具</h2><p>常用面板: Console Elements Sources</p>
<p>网络问题: Network Audits</p>
<p>性能其他: Application Performance Momery</p>
<ul>
<li>Elements: 最终浏览器展示的结果，可以查看到元素的样式Style，计算出来的元素位置Computed，事件的监听Event；</li>
<li>Network: 解决常用数据问题，比如前后端数据传输呀。查看请求头，响应头，请求参数，响应结果等。以及每一个资源的Timing（Waterfall）（请求- 响应时间）Network</li>
<li>Console: 控制台，查看一些参数呀，输入命令等。</li>
<li>Application: 参考<a href="https://muxiaobai.github.io/2016/08/20/HTML5-API-%E6%96%B0%E7%89%B9%E6%80%A7/">HTML5-API新特性</a>,主要是Cookie,Session,Storage,还有两个新特性，Manifest,Service Workers,一般网站开发，上面已经够用了，如果遇到其他页面响应慢等性能问题，就需要下面两个面板:</li>
<li>Performance: 性能</li>
<li>Momery: 内存</li>
</ul>
<p>下面这两个系列文章很全的。</p>
<ul>
<li><a href="http://www.cnblogs.com/constantince/category/712675.html" target="_blank" rel="noopener">Chrome开发者工具不完全指南</a></li>
<li><a href="http://www.cnblogs.com/charliechu/p/5948448.html" target="_blank" rel="noopener">Chrome开发者工具详解</a></li>
</ul>
<p>缺少浏览器的渲染和优化方向</p>
<p>参考文献:</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="noopener">chrome官方开发者工具文档</a></li>
<li><a href="https://developer.chrome.com/devtools/docs/demos/memory" target="_blank" rel="noopener">memory测试</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp" target="_blank" rel="noopener">google文档 评估关键渲染路径</a>☆☆</li>
<li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/analyzing-crp" target="_blank" rel="noopener">google文档 分析关键渲染路径性能</a>☆☆☆☆</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码阅读之Container责任链]]></title>
      <url>https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/</url>
      <content type="html"><![CDATA[<p>上篇讲到Connector到Container的转换，本文主要是Container内部的转换，四个组件Engine、Host、Context、Wrapper。<br>顺便提一下Pipeline和Value.</p>
<p>接上文的CoyoteAdapter.service()<code>connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</code>,</p>
<p>如图如图<br><img src="/2018/04/20/Tomcat源码阅读之Container责任链/665375-20160119184923890-1995839223.png" alt="请求流图"><br><img src="/2018/04/20/Tomcat源码阅读之Container责任链/818454-20161025170804984-654825756.png" alt="请求流图"><br>默认的Engine是StandardEngine，这个是在EngineRuleSet中通过digester设置的，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">digester.addObjectCreate(prefix + &quot;Engine&quot;,</span><br><span class="line">                         &quot;org.apache.catalina.core.StandardEngine&quot;,</span><br><span class="line">                         &quot;className&quot;);</span><br><span class="line">digester.addSetProperties(prefix + &quot;Engine&quot;);</span><br><span class="line">digester.addRule(prefix + &quot;Engine&quot;,</span><br><span class="line">                 new LifecycleListenerRule</span><br><span class="line">                 (&quot;org.apache.catalina.startup.EngineConfig&quot;,</span><br><span class="line">                  &quot;engineConfigClass&quot;));</span><br><span class="line">digester.addSetNext(prefix + &quot;Engine&quot;,</span><br><span class="line">                    &quot;setContainer&quot;,</span><br><span class="line">                    &quot;org.apache.catalina.Engine&quot;);</span><br></pre></td></tr></table></figure></p>
<p>然后这个<code>org.apache.catalina.core.StandardEngine</code>就是connector.getService().getContainer()的实际Container，所有的Container实例化的时候，都有pipeline和setBasic()。</p>
<p>StandardEngine构造方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public StandardEngine() &#123;</span><br><span class="line"></span><br><span class="line">    super();</span><br><span class="line">    pipeline.setBasic(new StandardEngineValve());</span><br><span class="line">    /* Set the jmvRoute using the system property jvmRoute */</span><br><span class="line">    try &#123;</span><br><span class="line">        setJvmRoute(System.getProperty(&quot;jvmRoute&quot;));</span><br><span class="line">    &#125; catch(Exception ex) &#123;</span><br><span class="line">        log.warn(sm.getString(&quot;standardEngine.jvmRouteFail&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    // By default, the engine will hold the reloading thread</span><br><span class="line">    backgroundProcessorDelay = 10;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ContainerBase中会有这个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected final Pipeline pipeline = new StandardPipeline(this);</span><br></pre></td></tr></table></figure></p>
<p>这样再Engine这个级别的Container中就有一个流水线了StandardPipeline，然后这个流水线的getFirst(),这里的getFirst是StandardEngine.构造函数setBasic方法给到的一个StandardEngineValve(),如下图，这样就把StandardEngineValve就是<code>connector.getService().getContainer().getPipeline().getFirst()</code> (如果没有first的话)的最终效果，这个也是最后一个Valve(阀门)。<br>如果有其他的Valve呢，EngineRuleSet中就会读取到对应的Valve调用addValve，添加到base的前面(链表操作),因为每一个继承ValveBase都要实现一个方法<code>invoke</code>在这个方法中最后都会执行一个<code>getNext().invoke(request, response);</code>这样就找到了下一个Next，直到最后一个到StandardXXXValve。接着下一步执行。<br>下面是StandardPipeline<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"> @Override</span><br><span class="line">    public void addValve(Valve valve) &#123;</span><br><span class="line"></span><br><span class="line">        // Validate that we can add this Valve</span><br><span class="line">        if (valve instanceof Contained)</span><br><span class="line">            ((Contained) valve).setContainer(this.container);</span><br><span class="line"></span><br><span class="line">        // Start the new component if necessary</span><br><span class="line">        if (getState().isAvailable()) &#123;</span><br><span class="line">            if (valve instanceof Lifecycle) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    ((Lifecycle) valve).start();</span><br><span class="line">                &#125; catch (LifecycleException e) &#123;</span><br><span class="line">                    log.error(&quot;StandardPipeline.addValve: start: &quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //链表操作,如果没有第一个当前的就是第一个，</span><br><span class="line">        // Add this Valve to the set associated with this Pipeline</span><br><span class="line">        if (first == null) &#123;</span><br><span class="line">            first = valve;</span><br><span class="line">            valve.setNext(basic);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        //如果有把当前的就设为第一个,</span><br><span class="line">            Valve current = first;</span><br><span class="line">            while (current != null) &#123;</span><br><span class="line">            //直到那个是StandardXXXValve,的时候就把传入的这个valve插入进去，并valve的下一个保证是最后一个StandardXXXValve.</span><br><span class="line">                if (current.getNext() == basic) &#123;</span><br><span class="line">                    current.setNext(valve);</span><br><span class="line">                    valve.setNext(basic);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            //然后当前的下一个赋值给当前这个</span><br><span class="line">                current = current.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);</span><br><span class="line">    &#125;</span><br><span class="line">@Override</span><br><span class="line">    public void setBasic(Valve valve) &#123;</span><br><span class="line"></span><br><span class="line">        // Change components if necessary</span><br><span class="line">        Valve oldBasic = this.basic;</span><br><span class="line">        if (oldBasic == valve)</span><br><span class="line">            return;</span><br><span class="line"></span><br><span class="line">        // Stop the old component if necessary</span><br><span class="line">        if (oldBasic != null) &#123;</span><br><span class="line">            if (getState().isAvailable() &amp;&amp; (oldBasic instanceof Lifecycle)) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    ((Lifecycle) oldBasic).stop();</span><br><span class="line">                &#125; catch (LifecycleException e) &#123;</span><br><span class="line">                    log.error(&quot;StandardPipeline.setBasic: stop&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (oldBasic instanceof Contained) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    ((Contained) oldBasic).setContainer(null);</span><br><span class="line">                &#125; catch (Throwable t) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Start the new component if necessary</span><br><span class="line">        if (valve == null)</span><br><span class="line">            return;</span><br><span class="line">        if (valve instanceof Contained) &#123;</span><br><span class="line">            ((Contained) valve).setContainer(this.container);</span><br><span class="line">        &#125;</span><br><span class="line">        if (getState().isAvailable() &amp;&amp; valve instanceof Lifecycle) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                ((Lifecycle) valve).start();</span><br><span class="line">            &#125; catch (LifecycleException e) &#123;</span><br><span class="line">                log.error(&quot;StandardPipeline.setBasic: start&quot;, e);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Update the pipeline</span><br><span class="line">        Valve current = first;</span><br><span class="line">        while (current != null) &#123;</span><br><span class="line">            if (current.getNext() == oldBasic) &#123;</span><br><span class="line">                current.setNext(valve);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.basic = valve;//设置base</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Valve getFirst() &#123;</span><br><span class="line">        if (first != null) &#123;</span><br><span class="line">            return first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return basic;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这样就把StandardEngineValve就是Engine的最后一个接着调用的时候就找到Host。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public final void invoke(Request request, Response response)</span><br><span class="line">       throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">       // Select the Host to be used for this Request</span><br><span class="line">       Host host = request.getHost();</span><br><span class="line">       if (host == null) &#123;</span><br><span class="line">           response.sendError</span><br><span class="line">               (HttpServletResponse.SC_BAD_REQUEST,</span><br><span class="line">                sm.getString(&quot;standardEngine.noHost&quot;,</span><br><span class="line">                             request.getServerName()));</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       if (request.isAsyncSupported()) &#123;</span><br><span class="line">           request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       // Ask this Host to process this request</span><br><span class="line">       host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>而同样host设置的配置是在HostRuleSet中。其他的步骤和上一面一样哦。Engine—-&gt;Host—-&gt;Context—-&gt;Wrapper<br>这样我们直接就找到最后一层的StandardWrapper.找到最后一个StandardWrapperValve阀门的invoke方法<br>这个方法中的有个Filter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Create the filter chain for this request</span><br><span class="line">       ApplicationFilterChain filterChain =</span><br><span class="line">               ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class="line">       // Call the filter chain for this request</span><br><span class="line">       // NOTE: This also calls the servlet&apos;s service() method</span><br><span class="line">       filterChain.doFilter(request.getRequest(),</span><br><span class="line">               response.getResponse());</span><br></pre></td></tr></table></figure>
<p>这里也有一个注释 Call the filter chain for this request，调用request的过滤器链<code>calls the servlet&#39;s service() method</code>调用servlet的service()方法。</p>
<p>ApplicationFilterChain这个类中。doFilter最后，<code>servlet.service(request, response);</code></p>
<h4 id="Pipeline-Value"><a href="#Pipeline-Value" class="headerlink" title="Pipeline Value"></a>Pipeline Value</h4><p>管道，阀门，责任链，外界进来的请求，先从Connector到Container,中间经过协议处理，然后在Container中，依次讲请求通过各种管道，每一层管道的最后阀门都是StandardXXXValve,然后交到下一层的第一个阀门再进行处理，最终会流到Servlet.service(),这里就是我们正常写的代码，<code>doGet();doPost();</code></p>
<p>HttpServlet.service();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">protected void service(HttpServletRequest req, HttpServletResponse resp)</span><br><span class="line">    throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">    if (method.equals(METHOD_GET)) &#123;</span><br><span class="line">        long lastModified = getLastModified(req);</span><br><span class="line">        if (lastModified == -1) &#123;</span><br><span class="line">            // servlet doesn&apos;t support if-modified-since, no reason</span><br><span class="line">            // to go through further expensive logic</span><br><span class="line">            doGet(req, resp);//Get</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            long ifModifiedSince;</span><br><span class="line">            try &#123;</span><br><span class="line">                ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">            &#125; catch (IllegalArgumentException iae) &#123;</span><br><span class="line">                // Invalid date header - proceed as if none was set</span><br><span class="line">                ifModifiedSince = -1;</span><br><span class="line">            &#125;</span><br><span class="line">            if (ifModifiedSince &lt; (lastModified / 1000 * 1000)) &#123;</span><br><span class="line">                // If the servlet mod time is later, call doGet()</span><br><span class="line">                // Round down to the nearest second for a proper compare</span><br><span class="line">                // A ifModifiedSince of -1 will always be less</span><br><span class="line">                maybeSetLastModified(resp, lastModified);</span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; else if (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">        long lastModified = getLastModified(req);</span><br><span class="line">        maybeSetLastModified(resp, lastModified);</span><br><span class="line">        doHead(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; else if (method.equals(METHOD_POST)) &#123;</span><br><span class="line">        doPost(req, resp);//Post</span><br><span class="line"></span><br><span class="line">    &#125; else if (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">        doPut(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; else if (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">        doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; else if (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">        doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125; else if (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">        doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //</span><br><span class="line">        // Note that this means NO servlet supports whatever</span><br><span class="line">        // method was requested, anywhere on this server.</span><br><span class="line">        //</span><br><span class="line"></span><br><span class="line">        String errMsg = lStrings.getString(&quot;http.method_not_implemented&quot;);</span><br><span class="line">        Object[] errArgs = new Object[1];</span><br><span class="line">        errArgs[0] = method;</span><br><span class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至此，用户请求的URL就给我们处理了，写doGet，doPost等等，这一个阶段的Tomcat源码就先到这里，告一段落！</p>
<p>系列文章</p>
<ul>
<li><a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/">Tomcat源码阅读之从server.xml看组件关系</a></li>
<li><a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Tomcat源码阅读之组件生命周期</a></li>
<li><a href="http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/">Tomcat源码阅读之URL请求解析</a></li>
<li><a href="https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/">Tomcat源码阅读之Container责任链</a></li>
</ul>
<p>参考文献：</p>
<ul>
<li><a href="https://www.cnblogs.com/coldridgeValley/p/6606271.html" target="_blank" rel="noopener">Tomcat中的设计模式</a></li>
<li>《深入剖析Tomcat》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码阅读之URL请求解析]]></title>
      <url>https://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="这个流程写的很详细"><a href="#这个流程写的很详细" class="headerlink" title="这个流程写的很详细"></a>这个流程写的很详细</h2><p>可参考这个博客的<a href="http://hill007299.iteye.com/blog/1757198" target="_blank" rel="noopener">时序图</a></p>
<h2 id="http-localhost-8080-examples-composite-jsp"><a href="#http-localhost-8080-examples-composite-jsp" class="headerlink" title="http://localhost:8080/examples/composite.jsp"></a><a href="http://localhost:8080/examples/composite.jsp" target="_blank" rel="noopener">http://localhost:8080/examples/composite.jsp</a></h2><ul>
<li>在端口8080启动Server，并通知Service完成启动，Service通知Connector完成初始化和启动的过程</li>
<li>Connector首先收到这个请求，会调用ProtocolHandler完成http协议的解析，然后交给SocketProcessor处理，解析请求头，通过ConnectionHandler，给到Http11Processor，再交给CoyoteAdapter解析请求行和请求体，并把解析信息封装到Request和Response对象中， 把请求（此时应该是Request对象，这里的Request对象已经封装了Http请求的信息）交给Container容器 </li>
<li>Container容器交给其子容器——Engine容器，并等待Engine容器的处理结果 Engine容器匹配其所有的虚拟主机，这里匹配到Host</li>
<li>请求被移交给hostname为localhost的Host容器，host匹配其所有子容器Context，这里找到contextPath为/examples的Context容器。如果匹配不到就把该请求交给路径名为”“的Context去处理</li>
<li>请求再次被移交给Context容器，Context继续匹配其子容器Wrapper，由Wrapper容器加载composite.jsp对应的servlet，这里编译的servlet是basic_002dcomparisons_jsp.class文件</li>
<li>Context容器根据后缀匹配原则*.jsp找到composite.jsp编译的java类的class文件</li>
<li>Connector构建一个org.apache.catalina.connector.Request以及org.apache.catalina.connector.Response对象，使用反射调用Servelt的service方法</li>
<li>Context容器把封装了响应消息的Response对象返回给Host容器</li>
<li>容器把Response返回给Engine容器</li>
<li>Engine容器返回给Connector</li>
<li>Connetor容器把Response返回给浏览器</li>
<li>浏览器解析Response报文</li>
<li>显示资源内容</li>
</ul>
<p><img src="/2018/04/17/Tomcat源码阅读之URL请求解析/Connector.png" alt="流程主要代码"></p>
<h2 id="Connector到Container"><a href="#Connector到Container" class="headerlink" title="Connector到Container"></a>Connector到Container</h2><p>Connector 中的init和start 都是对应service调用的参考上一篇<a href>Tomcat组件生命周期</a></p>
<p>这里主要通过initInternal和startInternal来进行详细分析。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//代码段1</span><br><span class="line">    protected String protocolHandlerClassName = &quot;org.apache.coyote.http11.Http11NioProtocol&quot;;</span><br><span class="line">    public Connector(String protocol) &#123;</span><br><span class="line">        setProtocol(protocol);</span><br><span class="line">        // Instantiate protocol handler</span><br><span class="line">        ProtocolHandler p = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</span><br><span class="line">            p = (ProtocolHandler) clazz.getConstructor().newInstance();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    &quot;coyoteConnector.protocolHandlerInstantiationFailed&quot;), e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">        </span><br><span class="line">            this.protocolHandler = p;//初始化的时候这里的protocolHandler是通过反射获取的Http11NioProtocol实例。</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (Globals.STRICT_SERVLET_COMPLIANCE) &#123;</span><br><span class="line">            uriCharset = StandardCharsets.ISO_8859_1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            uriCharset = StandardCharsets.UTF_8;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void initInternal() throws LifecycleException &#123;</span><br><span class="line">        super.initInternal();</span><br><span class="line">        </span><br><span class="line">        // Initialize adapter</span><br><span class="line">        adapter = new CoyoteAdapter(this);</span><br><span class="line">        protocolHandler.setAdapter(adapter);//protocolHandler到CoyoteAdapter的关联关系</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">        try &#123;</span><br><span class="line">            protocolHandler.init();//AbstractProtocol.init(),这里会调用到endpoint.bind()</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new LifecycleException(</span><br><span class="line">                    sm.getString(&quot;coyoteConnector.protocolHandlerInitializationFailed&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Begin processing requests via this Connector.</span><br><span class="line">     *</span><br><span class="line">     * @exception LifecycleException if a fatal startup error occurs</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void startInternal() throws LifecycleException &#123;</span><br><span class="line"></span><br><span class="line">        // Validate settings before starting</span><br><span class="line">        if (getPort() &lt; 0) &#123;</span><br><span class="line">            throw new LifecycleException(sm.getString(</span><br><span class="line">                    &quot;coyoteConnector.invalidPort&quot;, Integer.valueOf(getPort())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            protocolHandler.start();//AbstractProtocol.start(),这里会调用到endpoint.start()</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new LifecycleException(</span><br><span class="line">                    sm.getString(&quot;coyoteConnector.protocolHandlerStartFailed&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Connector中主要确定要哪一个协议来处理请求，最后又交回到CoyoteAdapter中。</p>
<h4 id="AbstractProtocol"><a href="#AbstractProtocol" class="headerlink" title="AbstractProtocol"></a>AbstractProtocol</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void init() throws Exception &#123;</span><br><span class="line">       if (getLog().isInfoEnabled()) &#123;</span><br><span class="line">           getLog().info(sm.getString(&quot;abstractProtocolHandler.init&quot;, getName()));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (oname == null) &#123;</span><br><span class="line">           // Component not pre-registered so register it</span><br><span class="line">           oname = createObjectName();</span><br><span class="line">           if (oname != null) &#123;</span><br><span class="line">               Registry.getRegistry(null, null).registerComponent(this, oname, null);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (this.domain != null) &#123;</span><br><span class="line">           rgOname = new ObjectName(domain + &quot;:type=GlobalRequestProcessor,name=&quot; + getName());</span><br><span class="line">           Registry.getRegistry(null, null).registerComponent(</span><br><span class="line">                   getHandler().getGlobal(), rgOname, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       String endpointName = getName();</span><br><span class="line">       endpoint.setName(endpointName.substring(1, endpointName.length()-1));</span><br><span class="line">       endpoint.setDomain(domain);</span><br><span class="line"></span><br><span class="line">       endpoint.init();//这里在初始化Http11NioProtocol的时候有一个实例化NioEndpoint，这个就是endpoint</span><br><span class="line">       ···················</span><br><span class="line">       Http11NioProtocol 的构造方法</span><br><span class="line">        public Http11NioProtocol() &#123;</span><br><span class="line">       super(new NioEndpoint());</span><br><span class="line">       &#125;</span><br><span class="line">       ····················</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void start() throws Exception &#123;</span><br><span class="line">       if (getLog().isInfoEnabled()) &#123;</span><br><span class="line">           getLog().info(sm.getString(&quot;abstractProtocolHandler.start&quot;, getName()));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       endpoint.start();</span><br><span class="line"></span><br><span class="line">       // Start async timeout thread</span><br><span class="line">       asyncTimeout = new AsyncTimeout();</span><br><span class="line">       Thread timeoutThread = new Thread(asyncTimeout, getNameInternal() + &quot;-AsyncTimeout&quot;);</span><br><span class="line">       int priority = endpoint.getThreadPriority();</span><br><span class="line">       if (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class="line">           priority = Thread.NORM_PRIORITY;</span><br><span class="line">       &#125;</span><br><span class="line">       timeoutThread.setPriority(priority);</span><br><span class="line">       timeoutThread.setDaemon(true);</span><br><span class="line">       timeoutThread.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>此步骤已经从Connector转到了AbstractProtocol协议处理内部，然后找NioEndpoint</p>
<p>需要注意在Connector找AbstractProtocol的时候，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public AbstractHttp11Protocol(AbstractEndpoint&lt;S&gt; endpoint) &#123;</span><br><span class="line">    super(endpoint);</span><br><span class="line">    setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class="line">    ConnectionHandler&lt;S&gt; cHandler = new ConnectionHandler&lt;&gt;(this);</span><br><span class="line">    setHandler(cHandler);</span><br><span class="line">    getEndpoint().setHandler(cHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里在AbstractHttp11Protocol构造函数中设置了NioEndpoint的handler，就是AbstractProtocol中的ConnectionHandler，因此在Protocol处理完后给ConnectionHandler，然后通过getHandler调用process(),</p>
<h4 id="AbstractEndpoint-和NioEndpoint"><a href="#AbstractEndpoint-和NioEndpoint" class="headerlink" title="AbstractEndpoint 和NioEndpoint"></a>AbstractEndpoint 和NioEndpoint</h4><p>首先是抽象类AbstractEndpoint中的init和start，会bind()和start()一下，这才会到NioEndpoint进行处理</p>
<p>AbstractEndpoint</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void init() throws Exception &#123;</span><br><span class="line">    if (bindOnInit) &#123;</span><br><span class="line">        bind();</span><br><span class="line">        bindState = BindState.BOUND_ON_INIT;</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.domain != null) &#123;</span><br><span class="line">        // Register endpoint (as ThreadPool - historical name)</span><br><span class="line">        oname = new ObjectName(domain + &quot;:type=ThreadPool,name=\&quot;&quot; + getName() + &quot;\&quot;&quot;);</span><br><span class="line">        Registry.getRegistry(null, null).registerComponent(this, oname, null);</span><br><span class="line"></span><br><span class="line">        for (SSLHostConfig sslHostConfig : findSslHostConfigs()) &#123;</span><br><span class="line">            registerJmx(sslHostConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final void start() throws Exception &#123;</span><br><span class="line">    if (bindState == BindState.UNBOUND) &#123;</span><br><span class="line">        bind();</span><br><span class="line">        bindState = BindState.BOUND_ON_START;</span><br><span class="line">    &#125;</span><br><span class="line">    startInternal();</span><br><span class="line">&#125;</span><br><span class="line">public abstract void bind() throws Exception;</span><br><span class="line">public abstract void startInternal() throws Exception;</span><br></pre></td></tr></table></figure>
<p>NioEndpoint</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void bind() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        serverSock = ServerSocketChannel.open();</span><br><span class="line">        socketProperties.setProperties(serverSock.socket());</span><br><span class="line">        InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));</span><br><span class="line">        serverSock.socket().bind(addr,getAcceptCount());</span><br><span class="line">        serverSock.configureBlocking(true); //mimic APR behavior</span><br><span class="line"></span><br><span class="line">        selectorPool.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void startInternal() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        if (!running) &#123;</span><br><span class="line"> </span><br><span class="line">         // Start poller threads 这里启动了并一直在空转看内部的run()方法有一个while(true)</span><br><span class="line">            pollers = new Poller[getPollerThreadCount()];</span><br><span class="line">            for (int i=0; i&lt;pollers.length; i++) &#123;</span><br><span class="line">                pollers[i] = new Poller();</span><br><span class="line">                Thread pollerThread = new Thread(pollers[i], getName() + &quot;-ClientPoller-&quot;+i);</span><br><span class="line">                pollerThread.setPriority(threadPriority);</span><br><span class="line">                pollerThread.setDaemon(true);</span><br><span class="line">                pollerThread.start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            startAcceptorThreads();//调用到AbstractEndpoint然后new Acceptor(),并start()</span><br><span class="line">            ···············</span><br><span class="line">             Acceptor.run()方法</span><br><span class="line">             </span><br><span class="line">               // Accept the next incoming connection from the server</span><br><span class="line">             socket = serverSock.accept();这里阻塞了，等待请求</span><br><span class="line">             setSocketOptions();// getPoller0().register(channel);</span><br><span class="line">            ················</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Acceptor的作用是控制与tomcat建立连接的数量，但Acceptor只负责建立连接。socket内容的读写是通过Poller来实现的。</p>
<p>setSocketOptions()是关键关联点</p>
<h4 id="NioEndpoint到SocketProcessor到ConnectionHandler"><a href="#NioEndpoint到SocketProcessor到ConnectionHandler" class="headerlink" title="NioEndpoint到SocketProcessor到ConnectionHandler"></a>NioEndpoint到SocketProcessor到ConnectionHandler</h4><p>这里应该是使用了一个注册监听。</p>
<p>Poller 和事件类PollerEvent<br>Poller 是在startInternal就启动了<code>pollerThread.start();</code><br>先把channel注册到Poller并添加addEvent(),对应一个PollerEvent，然后每次Poller在run()的时候，就会events()[PollerEvent.run()],如果有事件，就会返回true，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">Poller implements Runnable &#123;</span><br><span class="line">    public boolean events() &#123;</span><br><span class="line">        boolean result = false;</span><br><span class="line">        //events.poll()看event里面还有没有事件</span><br><span class="line">        PollerEvent pe = null;</span><br><span class="line">        for (int i = 0, size = events.size(); i &lt; size &amp;&amp; (pe = events.poll()) != null; i++ ) &#123;</span><br><span class="line">            result = true;</span><br><span class="line">            try &#123;</span><br><span class="line">                pe.run();</span><br><span class="line">                pe.reset();</span><br><span class="line">                if (running &amp;&amp; !paused) &#123;</span><br><span class="line">                    eventCache.push(pe);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch ( Throwable x ) &#123;</span><br><span class="line">                log.error(&quot;&quot;,x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    public void register(final NioChannel socket) &#123;</span><br><span class="line">        PollerEvent r = eventCache.pop();</span><br><span class="line">        addEvent(r);</span><br><span class="line">    &#125;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">            // Loop until destroy() is called</span><br><span class="line">            while (true) &#123;</span><br><span class="line"></span><br><span class="line">                boolean hasEvents = false;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    if (!close) &#123;</span><br><span class="line">                        hasEvents = events();</span><br><span class="line">                        if (wakeupCounter.getAndSet(-1) &gt; 0) &#123;</span><br><span class="line">                            //if we are here, means we have other stuff to do</span><br><span class="line">                            //do a non blocking select</span><br><span class="line">                            keyCount = selector.selectNow();</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            keyCount = selector.select(selectorTimeout);</span><br><span class="line">                        &#125;</span><br><span class="line">                        wakeupCounter.set(0);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (close) &#123;</span><br><span class="line">                        events();</span><br><span class="line">                        timeout(0, false);</span><br><span class="line">                        try &#123;</span><br><span class="line">                            selector.close();</span><br><span class="line">                        &#125; catch (IOException ioe) &#123;</span><br><span class="line">                            log.error(sm.getString(&quot;endpoint.nio.selectorCloseFail&quot;), ioe);</span><br><span class="line">                        &#125;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Throwable x) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(x);</span><br><span class="line">                    log.error(&quot;&quot;,x);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //either we timed out or we woke up, process events first</span><br><span class="line">                if ( keyCount == 0 ) hasEvents = (hasEvents | events());</span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator =</span><br><span class="line">                    keyCount &gt; 0 ? selector.selectedKeys().iterator() : null;</span><br><span class="line">                // Walk through the collection of ready keys and dispatch</span><br><span class="line">                // any active event.</span><br><span class="line">                while (iterator != null &amp;&amp; iterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey sk = iterator.next();</span><br><span class="line">                    NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();</span><br><span class="line">                    // Attachment may be null if another thread has called</span><br><span class="line">                    // cancelledKey()</span><br><span class="line">                    if (attachment == null) &#123;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                        //这样就到了继续处理的时候</span><br><span class="line">                        processKey(sk, attachment);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;//while</span><br><span class="line"></span><br><span class="line">                //process timeouts</span><br><span class="line">                timeout(keyCount,hasEvents);</span><br><span class="line">            &#125;//while</span><br><span class="line"></span><br><span class="line">            getStopLatch().countDown();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PollerEvent implements Runnable &#123;</span><br><span class="line">     public void run() &#123;</span><br><span class="line">           socket.getIOChannel().register(</span><br><span class="line">                            socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Poller只要执行run()之后，就会依次按照下面这个步骤：</p>
<ul>
<li><code>processKey(sk, attachment);</code><ul>
<li><code>processSendfile(sk,attachment, false);</code></li>
</ul>
</li>
<li><code>processSocket(socketWrapper, SocketEvent.OPEN_READ, true)</code></li>
<li>找到AbstractEndpoint.processSocket()</li>
<li><code>sc = createSocketProcessor(socketWrapper, event); sc.run();</code></li>
<li>NioEndpoint.createSocketProcessor()内部<code>new SocketProcessor(socketWrapper, event);</code></li>
<li><code>state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected SocketProcessorBase&lt;NioChannel&gt; createSocketProcessor(</span><br><span class="line">        SocketWrapperBase&lt;NioChannel&gt; socketWrapper, SocketEvent event) &#123;</span><br><span class="line">    return new SocketProcessor(socketWrapper, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到SocketProcessor后，getHandler()就能用ConnectionHandler进而到Http11Processor处理(AbstractHttp11Protocol的构造函数定义的handler)</p>
<h4 id="ConnectionHandler到Http11Processor"><a href="#ConnectionHandler到Http11Processor" class="headerlink" title="ConnectionHandler到Http11Processor"></a>ConnectionHandler到Http11Processor</h4><p>NioEndpoint调用processSocket()方法，最终还是执行SocketProcessor.doRun();这个doRun中就使用了getHandler().process(socketWrapper);此处的handler是上文中AbstractHttp11Protocol构造函数中设置的ConnectionHandler（内部类AbstractProtocol），这个类中就把SocketProcessor和Http11Processor 关联起来l，也正如这个名字所示ConnectionHandler.</p>
<p>AbstractProtocol.ConnectionHandler.process()方法内部<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">processor = getProtocol().createProcessor();</span><br><span class="line">···················</span><br><span class="line"> AbstractHttp11Protocol.createProcessor();这就是上一行的创建这个处理就是Http11Processor。</span><br><span class="line"> Http11Processor processor = new Http11Processor(getMaxHttpHeaderSize(),</span><br><span class="line">               getAllowHostHeaderMismatch(), getRejectIllegalHeaderName(), getEndpoint(),</span><br><span class="line">               getMaxTrailerSize(), allowedTrailerHeaders, getMaxExtensionSize(),</span><br><span class="line">               getMaxSwallowSize(), httpUpgradeProtocols, getSendReasonPhrase());</span><br><span class="line">····················</span><br><span class="line">processor.process(wrapper, status);</span><br></pre></td></tr></table></figure></p>
<p>那么这个process就是Http11Processor的执行了，下面就是Http11Processor和CoyoteAdapter的转换。</p>
<h4 id="Http11Processor到CoyoteAdapter到Container"><a href="#Http11Processor到CoyoteAdapter到Container" class="headerlink" title="Http11Processor到CoyoteAdapter到Container"></a>Http11Processor到CoyoteAdapter到Container</h4><p>上面的<code>processor.process(wrapper, status);</code>实际上是调用AbstractProcessorLight.process()————–&gt;内部有一个service()</p>
<p>就又回到了Http11Processor重写的方法service()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public SocketState process(SocketWrapperBase&lt;?&gt; socketWrapper, SocketEvent status)</span><br><span class="line">          throws IOException &#123;</span><br><span class="line"></span><br><span class="line">      SocketState state = SocketState.CLOSED;</span><br><span class="line">      Iterator&lt;DispatchType&gt; dispatches = null;</span><br><span class="line">      do &#123;</span><br><span class="line">                  // There may be pipe-lined data to read. If the data isn&apos;t</span><br><span class="line">                  // processed now, execution will exit this loop and call</span><br><span class="line">                  // release() which will recycle the processor (and input</span><br><span class="line">                  // buffer) deleting any pipe-lined data. To avoid this,</span><br><span class="line">                  // process it now.</span><br><span class="line">                  state = service(socketWrapper);</span><br><span class="line">        </span><br><span class="line">      &#125; while (state == SocketState.ASYNC_END ||</span><br><span class="line">              dispatches != null &amp;&amp; state != SocketState.CLOSED);</span><br><span class="line"></span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Http11Processor.process()————–&gt;AbstractProcessorLight.process()<br> state = service(socketWrapper);———–&gt;Http11Processor.service()</p>
<p>Http11Processor.service() :<br><code>import org.apache.coyote.Request;</code><br><code>getAdapter().service(request, response);</code></p>
<p>getAdapter是在Connector.init()中给的就是下面这个CoyoteAdapter</p>
<p>CoyoteAdapter.service()方法中有代码：<br>这里构造request，response</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request = connector.createRequest();</span><br><span class="line">request.setCoyoteRequest(req);</span><br><span class="line">response = connector.createResponse();</span><br><span class="line">response.setCoyoteResponse(res);</span><br><span class="line">connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure>
<p><code>org.apache.catalina.connector.Request</code>这个req.res都有了，然后就是找到具体的请求处理模块并返回。</p>
<p>这样就找到了Container，实际上到这里已经完成了Connector到Container的转换。</p>
<p><a href="http://naotu.baidu.com/file/3a08dd05ba3011c349941c95a4814be4?token=1ab842bbabc206c6" target="_blank" rel="noopener">百度脑图Connector</a></p>
<h2 id="Container内部进行责任链处理"><a href="#Container内部进行责任链处理" class="headerlink" title="Container内部进行责任链处理"></a>Container内部进行责任链处理</h2><h4 id="Engine-Host-Context-Wrapper"><a href="#Engine-Host-Context-Wrapper" class="headerlink" title="Engine Host Context Wrapper"></a>Engine Host Context Wrapper</h4><p>见下篇”Tomcat源码阅读之Container责任链”</p>
<p>系列文章</p>
<ul>
<li><a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/">Tomcat源码阅读之从server.xml看组件关系</a></li>
<li><a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Tomcat源码阅读之组件生命周期</a></li>
<li><a href="http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/">Tomcat源码阅读之URL请求解析</a></li>
<li><a href="https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/">Tomcat源码阅读之Container责任链</a></li>
</ul>
<p>参看文献：</p>
<ul>
<li><a href="https://blog.csdn.net/yanlinwang/article/details/46382889" target="_blank" rel="noopener">Poller</a></li>
<li><a href="http://www.cnblogs.com/coldridgeValley/category/797239.html" target="_blank" rel="noopener">随笔分类 - Tomcat</a></li>
<li><a href="https://www.cnblogs.com/coldridgeValley/p/6606271.html" target="_blank" rel="noopener">Tomcat中的设计模式</a></li>
<li>《深入剖析Tomcat》</li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/" target="_blank" rel="noopener">Tomcat 系统架构与设计模式</a></li>
<li><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip" target="_blank" rel="noopener">tomcat8.5.30源码</a></li>
<li><a href="https://my.oschina.net/liughDevelop/blog/1790893#comment-list" target="_blank" rel="noopener">手写一个简化版Tomcat</a></li>
<li><a href="http://www.cnblogs.com/coldridgeValley/p/6252781.html" target="_blank" rel="noopener">Tomcat对HTTP请求的处理(二)</a></li>
<li><a href="https://blog.csdn.net/u011116672/article/details/50994038" target="_blank" rel="noopener">请求流程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码阅读之组件生命周期]]></title>
      <url>https://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/16/Tomcat源码阅读之组件生命周期/Lifecycle.PNG" alt="start&amp;stop"></p>
<p>上篇说道Catalina中的load 和init 方法,提到了getServer().init(),和getServer().start(),这两个方法，本文主要通过这两个方法，进一步研究组件之间的关系和各种状态，希望先看一下server.xml配置文件中的组件关系图。</p>
<p>需要先了解一个知识点digester，讲xml文件转换成java对象，<br>常用的几个方法</p>
<ul>
<li>digester.addObjectCreate(“Server”,”org.apache.catalina.core.StandardServer”,”className”);</li>
<li>digester.addSetProperties(“Server”);</li>
<li>digester.addSetNext(“Server”,”setServer”,”org.apache.catalina.Server”);</li>
</ul>
<h2 id="Catalina中的load方法"><a href="#Catalina中的load方法" class="headerlink" title="Catalina中的load方法"></a>Catalina中的load方法</h2><p>重点代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Digester digester = createStartDigester();</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">file = configFile();</span><br><span class="line">inputStream = new FileInputStream(file);</span><br><span class="line">inputSource = new InputSource(file.toURI().toURL().toString());</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">inputSource.setByteStream(inputStream);</span><br><span class="line">digester.push(this);</span><br><span class="line">digester.parse(inputSource);</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">getServer().setCatalina(this);</span><br><span class="line">getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</span><br><span class="line">getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</span><br><span class="line">// Stream redirection</span><br><span class="line">initStreams();</span><br><span class="line">// Start the new server</span><br><span class="line">getServer().init();</span><br><span class="line">···</span><br><span class="line">···</span><br><span class="line">···</span><br><span class="line">log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</span><br></pre></td></tr></table></figure>
<p>createStartDigester()设置规则，找到xml节点执行对应的方法，configFile()这里就是读取具体的配置文件server.xml,<code>protected String configFile = &quot;conf/server.xml&quot;;</code>然后就是digester把Catalina  push进来，parse进行解析xml。这里说明的是中间有一段  digester.addSetNext(“Server”,”setServer”,”org.apache.catalina.Server”);,这句就是执行setServer方法，对应的参数是org.apache.catalina.Server这种类型，然后上面还有一句，addObjectCreate，org.apache.catalina.core.StandardServer这个就是实际创建的对象类，这样就可以通过Catalina把Server联系起来的，之后的init()等这种方法，就都是调用的getServer()，上面这个对象了。</p>
<h2 id="Standard其他类中的方法Server-Service-Connector-Engine等"><a href="#Standard其他类中的方法Server-Service-Connector-Engine等" class="headerlink" title="Standard其他类中的方法Server Service Connector Engine等"></a>Standard其他类中的方法Server Service Connector Engine等</h2><p>StandardServer.addService() 方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void addService(Service service) &#123;</span><br><span class="line"></span><br><span class="line">    service.setServer(this);</span><br><span class="line"></span><br><span class="line">    synchronized (servicesLock) &#123;</span><br><span class="line">        Service results[] = new Service[services.length + 1];</span><br><span class="line">        System.arraycopy(services, 0, results, 0, services.length);</span><br><span class="line">        results[services.length] = service;</span><br><span class="line">        services = results;</span><br><span class="line"></span><br><span class="line">        if (getState().isAvailable()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                service.start();</span><br><span class="line">            &#125; catch (LifecycleException e) &#123;</span><br><span class="line">                // Ignore</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Report this property change to interested listeners</span><br><span class="line">        support.firePropertyChange(&quot;service&quot;, null, service);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每一个Server可以包含多个Service，一样通过Catalina的digester来调用addService方法，这里维护了一个数组，这也是神奇的地方，一对多的关系是用数组来维护的，虽然说java中没有所谓的动态数组概念，但是，这里通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Service results[] = new Service[services.length + 1];</span><br><span class="line">System.arraycopy(services, 0, results, 0, services.length);</span><br><span class="line">results[services.length] = service;</span><br><span class="line">services = results;</span><br></pre></td></tr></table></figure></p>
<p>这四句话，System.arraycopy是native的方法，比较奇特。另外这个synchronized 了一个空对象<code>private final Object servicesLock = new Object();</code>来保证对services的操作是线程安全。其他的findService,findServices,removeService等都是如此操作，remove用的是for循环。</p>
<h4 id="其他容器的关系调用方法"><a href="#其他容器的关系调用方法" class="headerlink" title="其他容器的关系调用方法"></a>其他容器的关系调用方法</h4><ul>
<li>StandardService 中的  setContainer(是一个Engine，在EngineRuleSet中)  addConnector addExecutor  digester规则在Catalina里面对应  还有一个await方法没有讲☆</li>
<li>Connector 中的 addSslHostConfig</li>
<li>StandardEngine 中的 addChild(HostRuleSet)只添加Host、setCluster、addValve digester规则在EngineRuleSet里面对应</li>
<li>StandardHost 中的 addChild只添加Host，setCluster、addValve  digester规则在HostRuleSet里面对应<br>等等之类的调用关系，都在digester中</li>
</ul>
<h2 id="Lifecycle类"><a href="#Lifecycle类" class="headerlink" title="Lifecycle类"></a>Lifecycle类</h2><p>通过上面的init(),找到StandredServer,可发现这没有init方法，继续<code>public final class StandardServer extends LifecycleMBeanBase implements Server</code>，<code>public abstract class LifecycleMBeanBase extends LifecycleBase implements JmxEnabled</code>,<code>public abstract class LifecycleBase implements Lifecycle</code>,最终我们在这个抽象类LifecycleBase中发现了这个方法.然后就发现，这个init里面中会调用一个<code>initInternal</code>方法，这个在LifecycleBase中是一个抽象方法，这些集成了它的类都重写了，因此我们在getServer.init(),实际上就相当于调用initInternal。</p>
<h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><p>org.apache.catalina.LifecycleState  和 org.apache.catalina.Lifecycle 看最上面的图(此图也是在Lifecycle内)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NEW(false, null),</span><br><span class="line">INITIALIZING(false, Lifecycle.BEFORE_INIT_EVENT),</span><br><span class="line">INITIALIZED(false, Lifecycle.AFTER_INIT_EVENT),</span><br><span class="line">STARTING_PREP(false, Lifecycle.BEFORE_START_EVENT),</span><br><span class="line">STARTING(true, Lifecycle.START_EVENT),</span><br><span class="line">STARTED(true, Lifecycle.AFTER_START_EVENT),</span><br><span class="line">STOPPING_PREP(true, Lifecycle.BEFORE_STOP_EVENT),</span><br><span class="line">STOPPING(false, Lifecycle.STOP_EVENT),</span><br><span class="line">STOPPED(false, Lifecycle.AFTER_STOP_EVENT),</span><br><span class="line">DESTROYING(false, Lifecycle.BEFORE_DESTROY_EVENT),</span><br><span class="line">DESTROYED(false, Lifecycle.AFTER_DESTROY_EVENT),</span><br><span class="line">FAILED(false, null);</span><br></pre></td></tr></table></figure></p>
<p>12种状态: new(1)  init(2)  start(3)  stop(3)  destroy(2)  failed(1)<br>Lifecycle有四个基本的方法，init start stop destroy 外加一个addLifecycleListener()事件监听<br><code>public abstract class LifecycleBase implements Lifecycle</code> 这个org.apache.catalina.util.LifecycleBean中重写了上面四个方法(synchronized)，然后这里又<br>在内部加一个initInternal方法调用,这里就用到了模板方法，在调用init的时候，前后做一些操作，判断当前状态啊，日志啊，等等。<br>另外这里又有一个方法fireLifecycleEvent，触发生命周期事件。</p>
<p><img src="/2018/04/16/Tomcat源码阅读之组件生命周期/LifecycleBaseinit.PNG" alt="start&amp;stop"></p>
<p>一般所有的组件是实现的org.apache.catalina.util.LifecycleMBeanBase这个BaseBean的生命周期，重写了initInternal，然后在使用组件的时候对生命周期做得操作，init等就直接调用LifecycleMBeanBase，又调用本组件的initInternal.</p>
<p>见图StandardService中的initInternal方法:<br><img src="/2018/04/16/Tomcat源码阅读之组件生命周期/StandardService.PNG" alt="start&amp;stop"></p>
<p>系列文章</p>
<ul>
<li><a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/">Tomcat源码阅读之从server.xml看组件关系</a></li>
<li><a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Tomcat源码阅读之组件生命周期</a></li>
<li><a href="http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/">Tomcat源码阅读之URL请求解析</a></li>
<li><a href="https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/">Tomcat源码阅读之Container责任链</a></li>
</ul>
<p>参看文献:</p>
<ul>
<li>《深入剖析Tomcat》</li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/" target="_blank" rel="noopener">Tomcat 系统架构与设计模式</a></li>
<li><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip" target="_blank" rel="noopener">tomcat8.5.30源码</a></li>
<li><a href="https://my.oschina.net/liughDevelop/blog/1790893#comment-list" target="_blank" rel="noopener">手写一个简化版Tomcat</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat源码阅读之从server.xml看组件关系]]></title>
      <url>https://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h2 id="组件关系图"><a href="#组件关系图" class="headerlink" title="组件关系图"></a>组件关系图</h2><p><a href="http://naotu.baidu.com/file/43052d65c99873cc44a09e10a577de38?token=2c2c55090d50e6df" target="_blank" rel="noopener">百度脑图Server.xml</a></p>
<p><img src="/2018/04/16/Tomcat源码阅读之从server-xml看组件关系/image001.png" alt="组件关系"><br><img src="/2018/04/16/Tomcat源码阅读之从server-xml看组件关系/1174710-20170804092103272-2042915115.png" alt="用户和HTTP、容器的关系"></p>
<h2 id="server-xml-文件"><a href="#server-xml-文件" class="headerlink" title="server.xml 文件"></a>server.xml 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;GlobalNamingResources&gt;</span><br><span class="line">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class="line">              type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class="line">              description=&quot;User database that can be updated and saved&quot;</span><br><span class="line">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class="line">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class="line">  &lt;/GlobalNamingResources&gt;</span><br><span class="line">  &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class="line">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span><br><span class="line">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class="line">      &lt;!--</span><br><span class="line">      &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;</span><br><span class="line">      --&gt;</span><br><span class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class="line">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot; resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class="line">      &lt;/Realm&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">        &lt;Context path=&quot;/&quot; docBase=&quot;D:\Program Files \app1.war&quot; reloadable=&quot;true&quot;/&gt;</span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line">    &lt;/Engine&gt;</span><br><span class="line">  &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure>
<p>这个大致的组件印象也是之后研究代码的方向。</p>
<h2 id="catalina-bat-文件告诉你那个是启动入口"><a href="#catalina-bat-文件告诉你那个是启动入口" class="headerlink" title="catalina.bat 文件告诉你那个是启动入口"></a>catalina.bat 文件告诉你那个是启动入口</h2><h4 id="怎么找到启动类"><a href="#怎么找到启动类" class="headerlink" title="怎么找到启动类?"></a>怎么找到启动类?</h4><p>分析catalina.bat 文件<br><code>--setlocal 设置变量等 --</code><br>设置 CATALINA_HOME  CATALINA_BASE<br>执行setenv.bat  setclasspath.bat<br>设置CLASSPATH tomcat-juli.jar JAVA_OPTS LOGGING_CONFIG  LOGGING_MANAGER</p>
<p><code>-- Execute The Requested Command 执行用户请求 --</code></p>
<p>set _EXECJAVA=%_RUNJAVA%<br>set MAINCLASS=org.apache.catalina.startup.Bootstrap</p>
<p>echo   debug             Start Catalina in a debugger<br>echo   debug -security   Debug Catalina with a security manager<br>echo   jpda start        Start Catalina under JPDA debugger<br>echo   run               Start Catalina in the current window<br>echo   run -security     Start in the current window with security manager<br>echo   start             Start Catalina in a separate window<br>echo   start -security   Start in a separate window with security manager<br>echo   stop              Stop Catalina<br>echo   configtest        Run a basic syntax check on server.xml<br>echo   version </p>
<p>其中的命令</p>
<p>找到了  <code>set MAINCLASS=org.apache.catalina.startup.Bootstrap</code> 从Bootstrap找到main函数.</p>
<h4 id="从main启动到所有组件启动"><a href="#从main启动到所有组件启动" class="headerlink" title="从main启动到所有组件启动"></a>从main启动到所有组件启动</h4><p>tomcat 启动的时候打印的日志可以借助这个来分析一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Server version:        Apache Tomcat/8.0.39</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Server built:          Nov 9 2016 08:48:39 UTC</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Server number:         8.0.39.0</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: OS Name:               Windows 7</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: OS Version:            6.1</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Architecture:          amd64</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Java Home:             C:\Program Files\Java\jdk1.8.0_111\jre</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: JVM Version:           1.8.0_111-b14</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: JVM Vendor:            Oracle Corporation</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: CATALINA_BASE:         D:\tomcat\apache-tomcat-8.0.39-8080</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: CATALINA_HOME:         D:\tomcat\apache-tomcat-8.0.39-8080</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Command line argument: -Dcatalina.base=D:\tomcat\apache-tomcat-8.0.39-8080</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Command line argument: -Dcatalina.home=D:\tomcat\apache-tomcat-8.0.39-8080</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Command line argument: -Dwtp.deploy=D:\tomcat\apache-tomcat-8.0.39-8080\webapps</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Command line argument: -Djava.endorsed.dirs=D:\tomcat\apache-tomcat-8.0.39-8080\endorsed</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Command line argument: -Djava.library.path=C:\Program Files\Java\jdk1.8.0_111\bin;D:\tomcat\apache-tomcat-8.0.39-8080\bin</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.startup.VersionLoggerListener log</span><br><span class="line">信息: Command line argument: -Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>
<p>以上 都是Log信息打印出来的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent</span><br><span class="line">信息: Loaded APR based Apache Tomcat Native library 1.2.10 using APR version 1.5.2.</span><br><span class="line">四月 16, 2018 5:46:37 下午 org.apache.catalina.core.AprLifecycleListener lifecycleEvent</span><br><span class="line">信息: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.AprLifecycleListener initializeSSL</span><br><span class="line">信息: OpenSSL successfully initialized (OpenSSL 1.0.2j  26 Sep 2016)</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init</span><br><span class="line">信息: Initializing ProtocolHandler [&quot;http-apr-8080&quot;]</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol init</span><br><span class="line">信息: Initializing ProtocolHandler [&quot;ajp-apr-8018&quot;]</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina load</span><br><span class="line">信息: Initialization processed in 1173 ms</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardService startInternal</span><br><span class="line">信息: Starting service Catalina</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.catalina.core.StandardEngine startInternal</span><br><span class="line">信息: Starting Servlet Engine: Apache Tomcat/8.0.39</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start</span><br><span class="line">信息: Starting ProtocolHandler [&quot;http-apr-8080&quot;]</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.coyote.AbstractProtocol start</span><br><span class="line">信息: Starting ProtocolHandler [&quot;ajp-apr-8018&quot;]</span><br><span class="line">四月 16, 2018 5:46:38 下午 org.apache.catalina.startup.Catalina start</span><br><span class="line">信息: Server startup in 68 ms</span><br></pre></td></tr></table></figure>
<p>从Bootstrap 到 Catalina 总体流程  main  init load start&amp;stop</p>
<p><img src="/2018/04/16/Tomcat源码阅读之从server-xml看组件关系/main.PNG" alt="main"></p>
<p>main中一上来就调用 init，init是为了产生Catalina实例,然后是load 和start 等。</p>
<p><img src="/2018/04/16/Tomcat源码阅读之从server-xml看组件关系/init.PNG" alt="init"></p>
<p>main 调用 init <code>Class&lt;?&gt; startupClass = catalinaLoader.loadClass(&quot;org.apache.catalina.startup.Catalina&quot;);</code><br><code>Object startupInstance = startupClass.getConstructor().newInstance();</code> 反射获取类的实例，<br>之后<code>catalinaDaemon = startupInstance;</code>  赋值给catalinaDaemon, laod和start、getServer等方法都是从这个对象中执行的，实际上就是执行的Catalina的方法</p>
<p><img src="/2018/04/16/Tomcat源码阅读之从server-xml看组件关系/load.PNG" alt="load"></p>
<p>这个和 <code>method.invoke(catalinaDaemon, param);</code>  相当于catalina.load(param);</p>
<p>中间加一个Catalina的laod方法重点代码<br><img src="/2018/04/16/Tomcat源码阅读之从server-xml看组件关系/catalinaload.PNG" alt="start&amp;stop"><br><code>getServer().init();</code></p>
<p><code>log.info(&quot;Initialization processed in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</code><br>从上面的tomcat启动的时候打印出来的日志中就有这一行<code>信息: Initialization processed in 1173 ms</code></p>
<p>这个时候是生命周期的NEW init初始化，如果执行的是启动的命令，就会调用下面Bootstrap中</p>
<p><img src="/2018/04/16/Tomcat源码阅读之从server-xml看组件关系/start&amp;stop.PNG" alt="start&amp;stop"><br><code>Method method = catalinaDaemon.getClass().getMethod(&quot;start&quot;, (Class [] )null); method.invoke(catalinaDaemon, (Object [])null);</code> 反射,一样调用Catalina中的start方法和对应的stop方法。</p>
<p>最后的启动后<code>信息: Server startup in 68 ms</code>日志信息,是在Catalina中的start方法<code>log.info(&quot;Server startup in &quot; + ((t2 - t1) / 1000000) + &quot; ms&quot;);</code><br><code>getServer().start();</code>这个方法中同样会执行一个start()方法， 之后会讲解一下这个Server和之后的其他组件之间是怎么加载启动等，这里的组件就是server.xml文件的这些组件，</p>
<p>这个只是简单的初始化和启动的问题，下一个就会说具体的生命周期主要类<code>Lifecycle</code></p>
<p>先放个图吧<br><img src="/2018/04/16/Tomcat源码阅读之从server-xml看组件关系/Lifecycle.PNG" alt="start&amp;stop"></p>
<p>参考下一篇 <a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Tomcat源码阅读之组件生命周期</a><br>系列文章</p>
<ul>
<li><a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E4%BB%8Eserver-xml%E7%9C%8B%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB/">Tomcat源码阅读之从server.xml看组件关系</a></li>
<li><a href="http://muxiaobai.github.io/2018/04/16/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Tomcat源码阅读之组件生命周期</a></li>
<li><a href="http://muxiaobai.github.io/2018/04/17/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BURL%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/">Tomcat源码阅读之URL请求解析</a></li>
<li><a href="https://muxiaobai.github.io/2018/04/20/Tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BContainer%E8%B4%A3%E4%BB%BB%E9%93%BE/">Tomcat源码阅读之Container责任链</a></li>
</ul>
<p>参看文献：</p>
<ul>
<li>《深入剖析Tomcat》</li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/" target="_blank" rel="noopener">Tomcat 系统架构与设计模式</a></li>
<li><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip" target="_blank" rel="noopener">tomcat8.5.30源码</a></li>
<li><a href="https://my.oschina.net/liughDevelop/blog/1790893#comment-list" target="_blank" rel="noopener">手写一个简化版Tomcat</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重装CENTOS一系列操作]]></title>
      <url>https://muxiaobai.github.io/2018/03/02/%E9%87%8D%E8%A3%85CENTOS%E4%B8%80%E7%B3%BB%E5%88%97%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="首先，安装的时候，"><a href="#首先，安装的时候，" class="headerlink" title="首先，安装的时候，"></a>首先，安装的时候，</h2><p>使用UltraISO(软碟通)进行刻录U盘，修改盘符名为CENTOS</p>
<p>启动选择U盘启动，</p>
<p>选中install   按table键，修改label</p>
<p>将菜单中vmlinuz initrd=initrd.imginst.stage2=hd:LABEL=CentOS\x207\x20x86_64 rd.live.check quiet</p>
<p>改为：vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CENTOS quite</p>
<p>以上都是系统安装的问题</p>
<p>引导问题 使用EasyBCD修改</p>
<p>UltraISO EasyBCD 百度有资源下载</p>
<h2 id="安装之后，"><a href="#安装之后，" class="headerlink" title="安装之后，"></a>安装之后，</h2><p>资源在</p>
<p>进入系统需要修改 java python  pip  默认路径oracle jdk 8+  python3 </p>
<p>之后安装 中文键盘  yum install”@Chinese support”<br>中文  <a href="https://blog.csdn.net/sunxiaopengsun/article/details/53965643" target="_blank" rel="noopener">https://blog.csdn.net/sunxiaopengsun/article/details/53965643</a></p>
<p>teamviewer eclipse MARS  hadoop  anaconda</p>
<p>python 库 g++ numpy pands matplotlib sklearn xgboost tensroflow </p>
<p>bash Anaconda-2.1.0-Linux-x86_64.sh</p>
<h4 id="CentOS7-联网问题"><a href="#CentOS7-联网问题" class="headerlink" title="CentOS7 联网问题"></a>CentOS7 联网问题</h4><p>cd /etc/sysconfig/network-scripts打开配置文件</p>
<p>vi ifcfg-ens33这里可能你的文件名不是这个，但是找前面是 ifcfg-ens 的就是了</p>
<p>将文件里的 ONBOOT=no，改为ONBOOT=yes，然后保存并退出（不要忘记保存！！）</p>
<p>修改完成之后需要重新启动一下网络服务，才能生效。使用下面的命令。</p>
<p>service network restart</p>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>解压缩之后环境变量</p>
<p><code>vim .bashrc</code></p>
<p>export ANACONDA_HOME=/root/anaconda3<br>export PYTHON_HOME=/root/install/Python-3.6.5<br>export JDK_HOME=/root/install/jdk1.8.0_161<br>export CLASSPATH=.;$JDK_HOME/lib<br>export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin;/root/bin<br>export PATH=$PYTHON_HOME:$ANACONDA_HOME/bin:$JDK_HOME/bin:$PATH</p>
<p><code>source .bashrc</code></p>
<h4 id="修改jupyter"><a href="#修改jupyter" class="headerlink" title="修改jupyter"></a>修改jupyter</h4><p><a href="https://www.cnblogs.com/dpf-learn/p/7941960.html" target="_blank" rel="noopener">jupyter 默认配置</a><br>运行<br><code>jupyter notebook --generate-config --allow-root</code></p>
<p>修改： /root/.jupyter/jupyter_notebook_config.py  </p>
<p>vim .jupyter/jupyter_notebook_config.py </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">62 #c.NotebookApp.allow_root = False  </span><br><span class="line">去掉62行的注释，并修改成True即可解决root权限运行的问题。  </span><br><span class="line">163 #c.NotebookApp.ip = &apos;localhost&apos;  </span><br><span class="line">去掉注释，并把localhost改成0.0.0.0，这样就可以外部访问了，默认只有在本机可以访问的；  </span><br><span class="line">163 c.NotebookApp.ip = &apos;0.0.0.0&apos;  </span><br><span class="line"></span><br><span class="line">c.NotebookApp.base_project_url = &apos;/root/jupyter&apos;</span><br><span class="line"></span><br><span class="line">203 #c.NotebookApp.notebook_dir = &apos;/root/jupyter&apos;  </span><br><span class="line">改成如下，这样就会默认把notebook上创建的文件保存到指定目录下；需要事先创建。   </span><br><span class="line">203 c.NotebookApp.notebook_dir = u&apos;/opt/jupyter&apos;</span><br></pre></td></tr></table></figure>
<h4 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h4><p><a href="https://www.cnblogs.com/willnote/p/6746499.html" target="_blank" rel="noopener">conda 安装tensorflow</a></p>
<p>修改镜像源<br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config –set show_channel_urls yes</p>
<p>conda install numpy   #测试是否添加成功</p>
<p>之后会自动在用户根目录生成“.condarc”文件，Ubuntu环境下路径为~/.condarc，Windows环境下路径为C:\用户\your_user_name.condarc</p>
<p>channels:</p>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a></li>
<li>defaults<br>show_channel_urls: yes</li>
</ul>
<p>如果要删除镜像，直接删除“.condarc”文件即可</p>
<p><code>anaconda search -t conda tensorflow</code><br><code>anaconda show anaconda/tensorflow-base</code>对应版本<br><code>conda install --channel https://conda.anaconda.org/anaconda tensorflow-base</code> 对应https</p>
<h4 id="xgboost"><a href="#xgboost" class="headerlink" title="xgboost"></a>xgboost</h4><p>需要 <code>yum install gcc gcc-c++</code></p>
<p><code>pip install xgboost</code> or <code>conda install xgboost</code></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript再学习之prototype]]></title>
      <url>https://muxiaobai.github.io/2017/12/22/javascript%E5%86%8D%E5%AD%A6%E4%B9%A0%E4%B9%8Bprototype/</url>
      <content type="html"><![CDATA[<h2 id="Function中"><a href="#Function中" class="headerlink" title="Function中"></a>Function中</h2><p>  有prototype 和__proto__</p>
<h4 id="第一种情况-对象中有say"><a href="#第一种情况-对象中有say" class="headerlink" title="第一种情况 对象中有say"></a>第一种情况 对象中有say</h4><p><img src="/2017/12/22/javascript再学习之prototype/person.png" alt="对象"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">	  this.say = function()&#123;</span><br><span class="line">	    console.log(&quot;Hello&quot;);</span><br><span class="line">	  &#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	var person = new Person();</span><br><span class="line">	person.say(); //hello</span><br><span class="line">	debugger;</span><br></pre></td></tr></table></figure></p>
<p>ES6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line"> constructor() &#123;</span><br><span class="line">     this.say = function() &#123;</span><br><span class="line">         console.log(&quot;hello&quot;);</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = new Person();</span><br><span class="line">const p2 = new Person();</span><br><span class="line">console.log(person.say === p2.say);// false</span><br><span class="line">debugger;</span><br></pre></td></tr></table></figure>
<h4 id="第二种情况-原型上有say"><a href="#第二种情况-原型上有say" class="headerlink" title="第二种情况 原型上有say"></a>第二种情况 原型上有say</h4><p><img src="/2017/12/22/javascript再学习之prototype/person2.png" alt="原型"></p>
<p>p1.say == person.say 肯定是true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person &#123;  </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = function()&#123;</span><br><span class="line">console.log(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person();</span><br><span class="line">const p2 = new Person();</span><br><span class="line">person.say();//hello</span><br><span class="line">debugger;</span><br></pre></td></tr></table></figure>
<p>prototype实际上也是一个对象,然后constructor就是function Person</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var Person  = function () &#123;</span><br><span class="line">console.log(&quot;person&quot;);</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype =&#123;</span><br><span class="line">  constructor: Person,</span><br><span class="line">  say : function()&#123;</span><br><span class="line">      console.log(&quot;hello&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person();//person</span><br><span class="line">const p2 = new Person();//person</span><br><span class="line">person.say();//hello</span><br><span class="line">person.say == p2.say;  //true</span><br><span class="line">debugger;</span><br></pre></td></tr></table></figure>
<p>ES6</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line"> say() &#123;</span><br><span class="line">     console.log(&quot;hello&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person();</span><br><span class="line">const p2 = new Person();</span><br><span class="line">person.say();</span><br><span class="line">debugger;</span><br></pre></td></tr></table></figure>
<h4 id="第三种情况-两个都有say，执行哪一个？"><a href="#第三种情况-两个都有say，执行哪一个？" class="headerlink" title="第三种情况 两个都有say，执行哪一个？"></a>第三种情况 两个都有say，执行哪一个？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var Person  = function () &#123;</span><br><span class="line">    console.log(&quot;person&quot;);</span><br><span class="line">	this.say = function()&#123;</span><br><span class="line">		console.log(&quot;hello2&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype =&#123;</span><br><span class="line">  constructor: Person,</span><br><span class="line">  say : function()&#123;</span><br><span class="line">      console.log(&quot;hello&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">const person = new Person();//person</span><br><span class="line">const p2 = new Person();//person</span><br><span class="line">person.say();//hello2</span><br><span class="line">person.say == p2.say;  //false</span><br><span class="line">debugger;</span><br></pre></td></tr></table></figure>
<p>person.say 执行最近的一个，因为对象中有,所以直接执行<code>hello2</code>,如果没有的话就找prototype中的方法，如果没有这个方法，则出错。</p>
<h4 id="Person-方法的-proto"><a href="#Person-方法的-proto" class="headerlink" title="Person 方法的__proto__"></a>Person 方法的__proto__</h4><p>Person.__proto__  === Function.prototype</p>
<p>这里实际上Person已经作为了Function的一个实例，对应到Person上来说，对象的__proto__和构造方法的prototype 是相等的</p>
<p>即 person.__proto__ === Person.prototype</p>
<h2 id="Object中"><a href="#Object中" class="headerlink" title="Object中"></a>Object中</h2><p>只有 __proto__</p>
<p>如果作为一个单纯的对象来说，是只有__proto__</p>
<p>所以对于Object来说，实际上是Function的一个实例 ，那么  Object.__proto__ === Function.prototype;</p>
<p>同时Object 也是一个方法,任何一个 var a ={},这样的话，a.__proto__ === Object.prototype;</p>
<p>方法的prototype 是对象吧，那么Function.prototype就有 __proto__, 所以下面一个就说的通了,</p>
<p>Function.prototype.__proto__ ===Object.prototype;</p>
<p>那么Object.prototype 是对象,那么它的__proto__是什么呢？ null</p>
<p>下面这个怎么解释？</p>
<p>Function.__proto__ === Function.prototype </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">var A = function()&#123;&#125;; // A是一个方法，当然也是个对象  </span><br><span class="line">var a = new A(); // a是一个由A创造出的对象，不是方法  </span><br><span class="line"></span><br><span class="line">//看一看对象非方法的行为</span><br><span class="line">console.log(a.__proto__); //object  </span><br><span class="line">console.log(a.prototype); //undefined, 对象没有 </span><br><span class="line"></span><br><span class="line">//看一看方法的行为，方法也是对象哦</span><br><span class="line"></span><br><span class="line">console.log(A.__proto__); //function  </span><br><span class="line">console.log(A.prototype); //object  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(a.__proto__ === A.prototype); //true  </span><br><span class="line">console.log(a.prototype === undefined); //true</span><br><span class="line"></span><br><span class="line">console.log(A.__proto__ === Function.prototype); //true  </span><br><span class="line">console.log(A.prototype === a.__proto__); //true  </span><br><span class="line"></span><br><span class="line">//先看a这条链</span><br><span class="line">console.log(a.__proto__.__proto__ === A.prototype.__proto__); //true  </span><br><span class="line">console.log(a.__proto__.__proto__ === Object.prototype);//true  </span><br><span class="line">console.log(a.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  </span><br><span class="line">console.log(a.__proto__.__proto__.__proto__ === null);//true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//再看看A这条条链</span><br><span class="line">console.log(A.__proto__.__proto__ === Function.prototype.__proto__);//true  </span><br><span class="line">console.log(A.__proto__.__proto__ === Object.prototype);//true  </span><br><span class="line">console.log(A.__proto__.__proto__.__proto__ === Object.prototype.__proto__);//true  </span><br><span class="line">console.log(A.__proto__.__proto__.__proto__ === null);//true</span><br></pre></td></tr></table></figure>
<p><img src="/2017/12/22/javascript再学习之prototype/xproto-2.png" alt="prototype"></p>
<p>参考 <a href="http://varnull.cn/cong-\_\_proto\_\_-prototype-shuo-qi/" target="_blank" rel="noopener">从 __proto__ prototype 说起</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> prototype </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RSS好工具]]></title>
      <url>https://muxiaobai.github.io/2017/12/21/RSS%E5%A5%BD%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>主动订阅RSS</p>
<p><a href="https://www.zhihu.com/question/24175829" target="_blank" rel="noopener">RSS阅读器</a></p>
<p>FeedDemon 查看软件<br><a href="https://www.zhihu.com/question/19580096" target="_blank" rel="noopener">RSS</a></p>
<p>太多的信息，主动订阅需要的信息。</p>
<p>印象云笔记适配软件<a href="https://pan.baidu.com/s/1hqxNY5m" target="_blank" rel="noopener">RightNote</a></p>
<p>RightNote是由Bauer Apps出品的一款个人信息管理软件。该软件一共有三个版本，包括：免费版、标准版及专业按，此次活动赠送的是标准版。RightNote可以处理文本、html、财务数据、源代码、一般列表、待办事项列表、联系人列表等。RightNote含有多项应用选项，可根据个人喜好定制界面；强大的导入和导出选项，可从各种数据源导入数据，也可以把数据导出成常见的文件格式，如.txt、 .rtf、 .rvf、 .html和.xls等；内建各种键盘快捷键、预定义的热键、预定义的文字和背景颜色，以及近期/经常使用的笔记列表，可更容易、更有效地处理常见的、重复性的任务；强大的web导入；可对信息进行128位加密；内置的全文搜索引擎；可使用Evernote同步；支持更多层级，可建立树状笔记结构。</p>
<p>活动页面： <a href="http://sharewareonsale.com/s/bauer-apps-rightnote-giveaway-coupon-sale" target="_blank" rel="noopener">http://sharewareonsale.com/s/bauer-apps-rightnote-giveaway-coupon-sale</a></p>
<p>活动统一激活信息： Registration Name: SharewareOnSale Giveaway Jan2015</p>
<p>License Key: SGX3A-4X5MNALA-F6YNNSBU-GDKU7KWA-6NO3G2MT-ZZVHGBPT-GAWQEFIA-6UZHH2KL-FZ5KGPCO-YJTMVYYP-WCG5LMVR-AIKFOWV7-O5UHQZZN-D2R3PHPY-AVRXAWYH-MKLARJLG</p>
<p>下载地址：<br>安装版：<a href="http://pan.baidu.com/s/1c0zsfWs" target="_blank" rel="noopener">http://pan.baidu.com/s/1c0zsfWs</a><br>免安装版： <a href="http://pan.baidu.com/s/1hqxNY5m" target="_blank" rel="noopener">http://pan.baidu.com/s/1hqxNY5m</a></p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery中的延迟和回调(Deferred和Callbacks)]]></title>
      <url>https://muxiaobai.github.io/2017/10/23/jQuery%E4%B8%AD%E7%9A%84%E5%BB%B6%E8%BF%9F%E5%92%8C%E5%9B%9E%E8%B0%83-Deferred%E5%92%8CCallbacks/</url>
      <content type="html"><![CDATA[<h2 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var abc=$.Callbacks();</span><br><span class="line">function a(n)&#123;   console.log(&quot;a:&quot;+n);&#125;</span><br><span class="line">function b(x)&#123;   console.log(&quot;b:&quot;+x);&#125;</span><br><span class="line">abc.add(a);</span><br><span class="line">abc.add(b);</span><br><span class="line">abc.fire(3);</span><br><span class="line">abc.fire(5);</span><br><span class="line">console.log(abc);</span><br></pre></td></tr></table></figure>
<p><img src="/2017/10/23/jQuery中的延迟和回调-Deferred和Callbacks/2017102409Callbacks.png" alt="结果"></p>
<p>/*</p>
<ul>
<li>Create a callback list using the following parameters:<br>*</li>
<li>options: an optional list of space-separated options that will change how</li>
<li>the callback list behaves or a more traditional option object<br>*</li>
<li>By default a callback list will act like an event callback list and can be</li>
<li>“fired” multiple times.</li>
<li>//默认为false，当有参数的时候为true</li>
<li>Possible options:</li>
<li>//重复调用fire(),只执行一次 option.once =true</li>
<li>once:            will ensure the callback list can only be fired once (like a Deferred)</li>
<li>//add后继续执行fire() option.menory =true 针对add再一次调用fire</li>
<li>memory:            will keep track of previous values and will call any callback added</li>
<li>after the list has been fired right away with the latest “memorized”</li>
<li>values (like a Deferred)</li>
<li>//唯一的 函数名不能重复 针对add添加的时候</li>
<li>unique:            will ensure a callback can only be added once (no duplicate in the list)</li>
<li>//遇到返回false就停止</li>
<li>stopOnFalse:    interrupt callings when a callback returns false<br><em>
</em>/</li>
</ul>
<p>add() 添加<br>fire() 触发</p>
<p>$.Callbacks();</p>
<h2 id="Deferred"><a href="#Deferred" class="headerlink" title="Deferred"></a>Deferred</h2><p>状态表格tulps</p>
<h2 id="when-promise"><a href="#when-promise" class="headerlink" title="when promise"></a>when promise</h2><p>$.when().done();</p>
<h2 id="ajax-ready"><a href="#ajax-ready" class="headerlink" title="ajax ready"></a>ajax ready</h2><p>$.post().success().fail();<br>$.get().then();</p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery实践 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端小tips]]></title>
      <url>https://muxiaobai.github.io/2017/10/23/%E5%89%8D%E7%AB%AF%E5%B0%8Ftips/</url>
      <content type="html"><![CDATA[<p>button默认的type 是submit<br>textarea固定，不可拖拽： textarea{ resize:none;}</p>
<p><a href="http://garlicjs.org/#download" target="_blank" rel="noopener">http://garlicjs.org/#download</a> 可以form缓存，猜测应该是使用localStorage<br><img src="/2017/10/23/前端小tips/P71102-200420.jpg" alt="garlicjs"></p>
<p>jQuery兼容性</p>
<p>IE jQuery的支持程度</p>
<p>jquery在IE下append等需要把string转换成jquery对象 append($(str))<br>操作获取html或者text时也要是jquery对象不能使xmlDOM<br><a href="http://www.jb51.net/Special/354.htm" target="_blank" rel="noopener">http://www.jb51.net/Special/354.htm</a> JQuery操作xml</p>
<p>IE9下使用append是怎么回事？<br>append($(“file”,xml));<br>$(window.frameElement)获取当期的iframe<br>readonly只读<br>对象问题innerHTML属于js原生的。DOM XMLDOM 等究竟是什么？</p>
<p><a href="http://www.jb51.net/softjc/148524.html" target="_blank" rel="noopener">卸载IE</a></p>
<p><a href="http://web.jobbole.com/82625/" target="_blank" rel="noopener">javascript内存</a></p>
<p><a href="http://blog.csdn.net/justjavac/article/details/19473199" target="_blank" rel="noopener">为什么 [“1”, “2”, “3”].map(parseInt) 返回 [1,NaN,NaN]？</a><br>parseInt(String,radix)string可以转换成数字，radix 在2-36之间，<br>map 会给callback传三个参数（element，index，arr）而index刚好给了parseInt的radix</p>
<p><a href="http://justjavac.com/javascript/2012/05/24/can-you-explain-why-10.html" target="_blank" rel="noopener">++[[]][+[]]+[+[]] = 10</a></p>
<p><a href="http://www.jb51.net/article/86547.htm" target="_blank" rel="noopener">JS去除空格和换行的正则表达式(推荐)</a><br>正则\r\n</p>
<p>空格会变成 %20</p>
<p>当js方法没有进入的时候，考虑一下是否有重名的方法。导致原来的方法被覆盖。</p>
<p>PWA &amp; AMP</p>
<p>PWA(Progressive Web App)  渐进式网页应用<br>AMP(Accelerated Mobile Pages) 加速移动网页</p>
<p>系统问题,window7<br>标准账户上网</p>
<p>entity中：注解配置文件写有schema  </p>
<p>生成sshkey  <code>ssh-keygen -t rsa -C &quot;xxxxxx@yy.com&quot;</code></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 基础命令总结3 yum vim 问题]]></title>
      <url>https://muxiaobai.github.io/2017/09/17/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%933/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><p><code>yum list</code> </p>
<p><code>yum install</code></p>
<p><code>rpm</code></p>
<p>-a：查询所有套件；<br>-b&lt;完成阶段&gt;&lt;套件档&gt;+或-t &lt;完成阶段&gt;&lt;套件档&gt;+：设置包装套件的完成阶段，并指定套件档的文件名称；<br>-c：只列出组态配置文件，本参数需配合”-l”参数使用；<br>-d：只列出文本文件，本参数需配合”-l”参数使用；<br>-e&lt;套件档&gt;或–erase&lt;套件档&gt;：删除指定的套件；<br>-f&lt;文件&gt;+：查询拥有指定文件的套件；<br>-h或–hash：套件安装时列出标记；<br>-i：显示套件的相关信息； -i&lt;套件档&gt;或–install&lt;套件档&gt;：安装指定的套件档；<br>-l：显示套件的文件列表； -p&lt;套件档&gt;+：查询指定的RPM套件档；<br>-q：使用询问模式，当遇到任何问题时，rpm指令会先询问用户；<br>-R：显示套件的关联性信息；<br>-s：显示文件状态，本参数需配合”-l”参数使用；<br>-U&lt;套件档&gt;或–upgrade&lt;套件档&gt;：升级指定的套件档；<br>-v：显示指令执行过程；<br>-vv：详细显示指令执行过程，便于排错。</p>
<p><code>yum</code></p>
<p>install：安装rpm软件包；<br>update：更新rpm软件包；<br>check-update：检查是否有可用的更新rpm软件包；<br>remove：删除指定的rpm软件包；<br>list：显示软件包的信息；<br>search：检查软件包的信息；<br>info：显示指定的rpm软件包的描述信息和概要信息；<br>clean：清理yum过期的缓存；<br>shell：进入yum的shell提示符；<br>resolvedep：显示rpm软件包的依赖关系；<br>localinstall：安装本地的rpm软件包；<br>localupdate：显示本地rpm软件包进行更新；<br>deplist：显示rpm软件包的所有依赖关系。</p>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ul>
<li>选中 v，移动光标 然后y复制  （visual mode）</li>
<li>复制yy 3yy 复制光标行，复制光标及下面两行（yank拉取）</li>
<li>粘贴p 光标处粘贴复制内容（put paste放置）</li>
<li>删除dd 3dd 删除光标行，删除光标及以下三行（delete）</li>
<li><p>u 撤销（undo）  Ctrl +R 回撤</p>
</li>
<li><p>行内词跳转  w 词首 e 词尾   b 向前词首 W E B 空白分隔    fx 向后找x  F 向左 Find  “;” 命令重复</p>
</li>
<li>行头行尾 0/^行首 $ 行尾 行首列 | </li>
<li>前一行首 - 后一行首 + </li>
<li>块 句段 () {}  % 对应括号</li>
<li>半屏 ctrl + u 向上 up ctrl + d 向下down</li>
<li>屏页  Ctrl f 下一页 forward  Ctrl b 上一页（backward）  H 屏首行 M 屏中间行 L 屏尾行  “H” 表示 Home (头)，”M” 表示 Middle (中) 而 “L” 表示 Last (尾)。</li>
<li>文件头文件尾 gg/1G 文件头部  3G 第三行 G 文件尾部 </li>
<li><p>两个位置相互跳转 <code></code> 反引号 光标跳转上一个位置Ctrl + O  后一个位置  Ctrl + I</p>
</li>
<li><p>/查找匹配 n 下一个 gd 搜索高亮当前词</p>
</li>
<li>执行命令 :!ls  执行 ls 命令  :r !pwd 把当前的文件夹路径输入到光标行</li>
<li><p>分屏 :sp/vsp   :split   :diffsplit  后跟文件名</p>
</li>
<li><p>切换屏  ctrl +w +w</p>
</li>
<li>c change d delete c2whello 修改当前光标后的两个词变为hello  d2w 删除光标后的两个词 d$ 删除到行尾</li>
<li>编辑模式  Ctrl + N/P 自动提示</li>
</ul>
<h3 id="查找高亮："><a href="#查找高亮：" class="headerlink" title="查找高亮："></a>查找高亮：</h3><p>在查找模式中加入\c表示大小写不敏感查找，\C表示大小写敏感查找。例如：  /foo\c  将会查找所有的”foo”,”FOO”,”Foo”等字符串</p>
<p>一，全匹配：</p>
<p>1，从上往下查找，比如“string” ：   /string</p>
<p>2，从下往上查找，比如“string” ： ?string </p>
<p>二，模糊匹配（正则表达式）</p>
<p>1，. ：通配1个字符 ，如 匹配 server, 可以用  /se…r</p>
<p>2，<em> ：通配多个字符，如 匹配 privilege，可以用 p</em>ge</p>
<p>三，快速查找</p>
<p>1， Shift + <em> ：让光标停留在想要查找的单词的任意一个字母上面， 然后输入 Shift + </em> ，即可快速选中该单词，并且通过 n  或  N 进行上一个或下一个的匹配。</p>
<p>不常用<br>2，yw ：让光标停留在单词的第一个字母上， 然后输入yw拷贝该单词， 然后输入 / (Ctrl + R) 0 （即 /“0），回车， 就查找到了第一个匹配的单词， 并且通过 n  或  N 进行上一个或下一个的匹配。</p>
<p>取消搜索高亮</p>
<p>:nohlsearch</p>
<h3 id="查找与替换-s（substitute）命令用来查找和替换字符串。语法如下："><a href="#查找与替换-s（substitute）命令用来查找和替换字符串。语法如下：" class="headerlink" title="查找与替换  :s（substitute）命令用来查找和替换字符串。语法如下："></a>查找与替换  :s（substitute）命令用来查找和替换字符串。语法如下：</h3><p>:{作用范围}s/{目标}/{替换}/{替换标志}<br>例如:%s/foo/bar/g会在全局范围(%)查找foo并替换为bar，所有出现都会被替换（g）。i表示大小写不敏感查找，I表示大小写敏感， 默认敏感查找</p>
<p>作用范围 作用范围分为当前行、全文、选区等等。</p>
<ul>
<li>当前行：  :s/foo/bar/g</li>
<li>全文：    :%s/foo/bar/g</li>
<li>选区，在Visual模式下选择区域后输入:，Vim即可自动补全为 :’&lt;,’&gt;。 :’&lt;,’&gt;s/foo/bar/g</li>
<li>2-11行： :5,12s/foo/bar/g</li>
<li>当前行.与接下来两行+2：  :.,+2s/foo/bar/g</li>
</ul>
<p><img src="/2017/09/17/Linux-基础命令总结3/1353759337_6781.png" alt="图解命令"><br><img src="/2017/09/17/Linux-基础命令总结3/chinese.gif" alt="图解命令"><br><img src="/2017/09/17/Linux-基础命令总结3/english.gif" alt="图解命令"><br><a href="https://blog.csdn.net/de_moivre/article/details/84663132" target="_blank" rel="noopener">网址</a></p>
<p>vim的一些默认配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">/.vimrc</span><br><span class="line">https://www.cnblogs.com/qiyuexin/p/6398606.html</span><br><span class="line"></span><br><span class="line">nohlsearch</span><br><span class="line"></span><br><span class="line">&quot;显示行号, 或set number</span><br><span class="line">set nu</span><br><span class="line"></span><br><span class="line">&quot;打开语法高亮</span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line">&quot;使用配色方案</span><br><span class="line">colorscheme desert</span><br><span class="line"></span><br><span class="line">&quot;打开文件类型检测功能</span><br><span class="line">filetype on</span><br><span class="line"></span><br><span class="line">&quot;不同文件类型采用不同缩进</span><br><span class="line">filetype indent on</span><br><span class="line"></span><br><span class="line">&quot;允许使用插件</span><br><span class="line">filetype plugin on</span><br><span class="line">filetype plugin indent on</span><br><span class="line"></span><br><span class="line">&quot;关闭vi模式</span><br><span class="line">set nocp</span><br><span class="line"></span><br><span class="line">&quot;与windows共享剪贴板</span><br><span class="line">set clipboard+=unnamed</span><br><span class="line"></span><br><span class="line">&quot;取消VI兼容，VI键盘模式不易用</span><br><span class="line">set nocompatible</span><br><span class="line"></span><br><span class="line">&quot;历史命令保存行数 </span><br><span class="line">set history=100 </span><br><span class="line"></span><br><span class="line">&quot;当文件被外部改变时自动读取</span><br><span class="line">set autoread </span><br><span class="line"></span><br><span class="line">&quot;取消自动备份及产生swp文件</span><br><span class="line">set nobackup</span><br><span class="line">set nowb</span><br><span class="line">set noswapfile</span><br><span class="line"></span><br><span class="line">&quot;允许使用鼠标点击定位</span><br><span class="line">set mouse=a</span><br><span class="line"></span><br><span class="line">&quot;允许区域选择</span><br><span class="line">set selection=exclusive</span><br><span class="line">set selectmode=mouse,key</span><br><span class="line"></span><br><span class="line">&quot;高亮光标所在行</span><br><span class="line">set cursorline</span><br><span class="line"></span><br><span class="line">&quot;取消光标闪烁</span><br><span class="line">set novisualbell</span><br><span class="line"></span><br><span class="line">&quot;总是显示状态行</span><br><span class="line">set laststatus=2</span><br><span class="line"></span><br><span class="line">&quot;状态栏显示当前执行的命令</span><br><span class="line">set showcmd</span><br><span class="line"></span><br><span class="line">&quot;标尺功能，显示当前光标所在行列号</span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line">&quot;设置命令行高度为3</span><br><span class="line">set cmdheight=3</span><br><span class="line"></span><br><span class="line">&quot;粘贴时保持格式</span><br><span class="line">set paste</span><br><span class="line"></span><br><span class="line">&quot;高亮显示匹配的括号</span><br><span class="line">set showmatch</span><br><span class="line"></span><br><span class="line">&quot;在搜索的时候忽略大小写</span><br><span class="line">set ignorecase</span><br><span class="line"> </span><br><span class="line">&quot;高亮被搜索的句子</span><br><span class="line">set hlsearch</span><br><span class="line"> </span><br><span class="line">&quot;在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）</span><br><span class="line">set incsearch</span><br><span class="line"></span><br><span class="line">&quot;继承前一行的缩进方式，特别适用于多行注释</span><br><span class="line">set autoindent</span><br><span class="line"></span><br><span class="line">&quot;为C程序提供自动缩进</span><br><span class="line">set smartindent</span><br><span class="line"></span><br><span class="line">&quot;使用C样式的缩进</span><br><span class="line">set cindent</span><br><span class="line"></span><br><span class="line">&quot;制表符为4</span><br><span class="line">set tabstop=4</span><br><span class="line"></span><br><span class="line">&quot;统一缩进为4</span><br><span class="line">set softtabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line"></span><br><span class="line">&quot;允许使用退格键，或set backspace=2</span><br><span class="line">set backspace=eol,start,indent</span><br><span class="line">set whichwrap+=&lt;,&gt;,h,l</span><br><span class="line"></span><br><span class="line">&quot;取消换行</span><br><span class="line">set nowrap</span><br><span class="line"></span><br><span class="line">&quot;启动的时候不显示那个援助索马里儿童的提示</span><br><span class="line">set shortmess=atI</span><br><span class="line"></span><br><span class="line">&quot;在被分割的窗口间显示空白，便于阅读</span><br><span class="line">set fillchars=vert:\ ,stl:\ ,stlnc:\</span><br><span class="line"></span><br><span class="line">&quot;光标移动到buffer的顶部和底部时保持3行距离, 或set so=3</span><br><span class="line">set scrolloff=3</span><br><span class="line"></span><br><span class="line">&quot;设定默认解码</span><br><span class="line">set fenc=utf-8</span><br><span class="line">set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936</span><br><span class="line"></span><br><span class="line">&quot;设定字体</span><br><span class="line">set guifont=Courier_New:h11:cANSI</span><br><span class="line">set guifontwide=新宋体:h11:cGB2312</span><br><span class="line"> </span><br><span class="line">&quot;设定编码</span><br><span class="line">set enc=utf-8</span><br><span class="line">set fileencodings=ucs-bom,utf-8,chinese</span><br><span class="line">set langmenu=zh_CN.UTF-8</span><br><span class="line">language message zh_CN.UTF-8</span><br><span class="line">source $VIMRUNTIME/delmenu.vim</span><br><span class="line">source $VIMRUNTIME/menu.vim</span><br><span class="line"></span><br><span class="line">&quot;自动补全</span><br><span class="line">filetype plugin indent on</span><br><span class="line">set completeopt=longest,menu</span><br><span class="line"></span><br><span class="line">&quot;自动补全命令时候使用菜单式匹配列表</span><br><span class="line">set wildmenu</span><br><span class="line">autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete</span><br><span class="line">autocmd FileType python set omnifunc=pythoncomplete#Complete</span><br><span class="line">autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS</span><br><span class="line">autocmd FileType html set omnifunc=htmlcomplete#CompleteTags</span><br><span class="line">autocmd FileType css set omnifunc=csscomplete#CompleteCSS</span><br><span class="line">autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags</span><br><span class="line">autocmd FileType java set omnifunc=javacomplete#Complet</span><br></pre></td></tr></table></figure>
<h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><p><code>awk</code> <code>gawk</code>: </p>
<p><img src="/2017/09/17/Linux-基础命令总结3/1089507-20170126222420597-662074402.jpg" alt="图片说明"></p>
<p>awk ‘{print $0}’</p>
<pre><code>-F参数：指定分隔符，可指定一个或多个
</code></pre><p> awk -F”:” ‘{ print $1 }’ /etc/passwd  冒号作为分隔符<br> awk -F ‘[ ,]+’ ‘{print $3” “$7}’ test.txt    空格和逗号都分隔</p>
<p><a href="http://www.cnblogs.com/ginvip/p/6352157.html" target="_blank" rel="noopener">awk 操作指南</a></p>
<p><code>sed</code>: </p>
<p><code>m4</code>: </p>
<p><code>gcc</code>: gcc/g++程序,语言C、C++</p>
<p><code>perl</code>: perl程序,语言Perl</p>
<p><code>python</code>: python程序,语言Python</p>
<p><code>java</code>: javac程序,语言java</p>
<p><code>mono</code>: mono程序,语言.NET</p>
<p><code>php</code>: php程序,语言PHP</p>
<p><code>ruby</code>: ruby程序,语言Ruby</p>
<p><a href="https://www.cnblogs.com/webzhangnan/p/3221410.html" target="_blank" rel="noopener">CMD快捷键</a></p>
<p><a href="https://www.cnblogs.com/webnote/p/5877920.html" target="_blank" rel="noopener">scp</a></p>
<p>scp <a href="mailto:root@192.168.120.204" target="_blank" rel="noopener">root@192.168.120.204</a>:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</p>
<p>scp <a href="mailto:root@192.168.120.204" target="_blank" rel="noopener">root@192.168.120.204</a>:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[应用部署之nginx负载]]></title>
      <url>https://muxiaobai.github.io/2017/09/02/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E4%B9%8Bnginx%E8%B4%9F%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h2><h4 id="1、在windows下如何查看80端口占用情况-是被哪个进程占用-如何终止等"><a href="#1、在windows下如何查看80端口占用情况-是被哪个进程占用-如何终止等" class="headerlink" title="1、在windows下如何查看80端口占用情况?是被哪个进程占用?如何终止等."></a>1、在windows下如何查看80端口占用情况?是被哪个进程占用?如何终止等.</h4><pre><code>这里主要是用到windows下的DOS工具,点击&quot;开始&quot;--&quot;运行&quot;,输入&quot;cmd&quot;后点击确定按钮,进入DOS窗口,接下来分别运行以下命令:
&gt;netstat -aon | findstr &quot;80&quot;
        Proto  Local Address          Foreign Address        State            PID
        ====  ============      ==============  ==========  ======
        TCP    0.0.0.0:80                    0.0.0.0:0                LISTENING      1688
</code></pre><p>可以看出80端口被进程号为1688的程序占用.<br>        &gt;tasklist | findstr “1688”<br>图像名                                                PID            会话名                    会话#       内存使用<br>               ========================= ====== ================ ======== ============<br>               inetinfo.exe                                        1688           Console                      0              2,800 K<br>很明显,是inetinfo占用了80端口;inetinfo.exe主要用于支持微软Windows IIS网络服务的除错,这个程序对你系统的正常运行是非常重要的.<br>        当然,并不是只有inetinfo.exe进程会占用80端口,这只是我机器上的情况.如果你并不了解此进程是干什么用的,千万不要盲目地将其kill掉,最好先百度或Google搜索一下;当然如果你很了解它,并确定可以终止,那么继续下面的命令.<br>        &gt;taskkill /pid 1688 /F<br>成功: 已终止 PID 为 1688 的进程。<br>如果你很熟悉此进程,并确定可以终止,那么就直接使用上面的命令把PID为1688的进程终止.(这一步同样可以在任务管理器中执行,inetinfo.exe就是任务管理器中的映像名称,选中它,点击”结束进程”即可)<br>        &gt;tasklist | findstr “1688”<br>再次确认是否成功终止,如果成功终止此次执行命令后应返回空.</p>
<h4 id="2、linux下如何查看80端口占用情况-是被哪个进程占用-如何终止等"><a href="#2、linux下如何查看80端口占用情况-是被哪个进程占用-如何终止等" class="headerlink" title="2、linux下如何查看80端口占用情况?是被哪个进程占用?如何终止等"></a>2、linux下如何查看80端口占用情况?是被哪个进程占用?如何终止等</h4><p>查询端口是否被占用，被哪个进程占用有两种方式：1、netstat -anl | grep “80” ；2、lsof -i:80</p>
<p>终止进程的方式：kill pid</p>
<h2 id="启动停止nginx"><a href="#启动停止nginx" class="headerlink" title="启动停止nginx"></a>启动停止nginx</h2><h4 id="1、启动："><a href="#1、启动：" class="headerlink" title="1、启动："></a>1、启动：</h4><p>C:\server\nginx-1.0.2&gt;start nginx</p>
<p>或</p>
<p>C:\server\nginx-1.0.2&gt;nginx.exe</p>
<p>注：建议使用第一种，第二种会使你的cmd窗口一直处于执行中，不能进行其他命令操作。</p>
<h4 id="2、停止："><a href="#2、停止：" class="headerlink" title="2、停止："></a>2、停止：</h4><p>C:\server\nginx-1.0.2&gt;nginx.exe -s stop</p>
<p>或</p>
<p>C:\server\nginx-1.0.2&gt;nginx.exe -s quit</p>
<p>注：stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息。</p>
<h4 id="3、重新载入Nginx："><a href="#3、重新载入Nginx：" class="headerlink" title="3、重新载入Nginx："></a>3、重新载入Nginx：</h4><p>C:\server\nginx-1.0.2&gt;nginx.exe -s reload</p>
<p>当配置信息修改，需要重新载入这些配置时使用此命令。</p>
<h4 id="4、重新打开日志文件："><a href="#4、重新打开日志文件：" class="headerlink" title="4、重新打开日志文件："></a>4、重新打开日志文件：</h4><p>C:\server\nginx-1.0.2&gt;nginx.exe -s reopen</p>
<h4 id="5、查看Nginx版本："><a href="#5、查看Nginx版本：" class="headerlink" title="5、查看Nginx版本："></a>5、查看Nginx版本：</h4><p>C:\server\nginx-1.0.2&gt;nginx -v</p>
<p>nginx -c nginx.conf 加载配置启动<br>nginx -t nginx.conf 测试配置文件是否ok<br>nginx -s reload 重新加载配置<br>nginx -s stop<br>nginx -s quit</p>
<p>端口号大于servername</p>
<h2 id="配置nginx-conf"><a href="#配置nginx-conf" class="headerlink" title="配置nginx.conf"></a>配置nginx.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">worker_processes，工作进程数</span><br><span class="line">1.默认：worker_processes: 1</span><br><span class="line">2.调大：worker_processes: CPU核心数，(双核4线程，可以设置为4)</span><br><span class="line"></span><br><span class="line">worker_connections，单个工作进程可以允许同时建立外部连接的数量</span><br><span class="line">数字越大，能同时处理的连接越多</span><br><span class="line">1.默认：worker_connections: 1024</span><br><span class="line">2.调大：worker_connections: 100000，（调大到10万连接）</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">nginx提供了worker_rlimit_nofile指令，这是除了ulimit的一种设置可用的描述符的方式。 该指令与使用ulimit对用户的设置是同样的效果。此指令的值将覆盖ulimit的值，如：worker_rlimit_nofile 20960;设置ulimits：ulimit -SHn 65535</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    # gzip 压缩</span><br><span class="line">    gzip  on; #Gzip compression</span><br><span class="line"></span><br><span class="line">    #Server cluster </span><br><span class="line">    upstream  netitcast.com &#123;  #Server cluster   </span><br><span class="line">        server    127.0.0.1:8081  weight=1; #Weight is the meaning of weight, the greater the weight, the greater the probability of distribution. </span><br><span class="line">        server    127.0.0.1:8082  weight=2;  </span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  127.0.0.1;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log;</span><br><span class="line">        # 日志按天生成</span><br><span class="line">    	if ($time_iso8601 ~ &apos;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)&apos;) &#123;</span><br><span class="line">            set $tttt $1;</span><br><span class="line">        &#125;</span><br><span class="line">        access_log  logs/access-$tttt.log  main;</span><br><span class="line"></span><br><span class="line">        #location / &#123;</span><br><span class="line">        #    root   html;</span><br><span class="line">        #    index  index.html index.htm;</span><br><span class="line">        #&#125;</span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass http://netitcast.com;  #proxy name is upstream name</span><br><span class="line">            proxy_redirect default;  </span><br><span class="line">            expires      3d;   #cache three days</span><br><span class="line">        &#125;  </span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8081;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> deploy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解JVM之性能调优]]></title>
      <url>https://muxiaobai.github.io/2017/08/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B9%8B%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<p>先放一下我在慕课网上的三篇关于JVM的一些手记</p>
<ul>
<li><a href="http://www.imooc.com/article/6143" target="_blank" rel="noopener">深入理解JVM之基本构架</a></li>
<li><a href="http://www.imooc.com/article/6319" target="_blank" rel="noopener">深入理解JVM之对象生命周期</a></li>
<li><a href="http://www.imooc.com/article/6461" target="_blank" rel="noopener">深入理解JVM之类加载</a></li>
</ul>
<p>本次 <a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="noopener">JVM参数</a><br><a href="http://blog.csdn.net/firecoder/article/details/7225654" target="_blank" rel="noopener">GC知识要点回顾,有案例</a><br><a href="http://blog.csdn.net/a503921892/article/details/39048889" target="_blank" rel="noopener">“-Xmx1024m -Xms1024m -Xmn512m -Xss256k”——Java运行参数(转)</a><br><a href="http://www.cnblogs.com/redcreen/archive/2011/05/09/2040977.html" target="_blank" rel="noopener">监测工具</a><br>web监测工具Javamelody.jar<a href="https://muxiaobai.github.io/2017/08/02/Javamelody-%E5%B7%A5%E5%85%B7/">Javamelody</a><br>jdk自带工具：<br>jmc: java mission  control (飞行记录器(黑匣子))<br>监测:jconsole<br>监视:jvisualvm   </p>
<p>jvisualvm工具插件下载地址修改为<a href="https://visualvm.github.io/pluginscenters.html" target="_blank" rel="noopener">https://visualvm.github.io/pluginscenters.html</a>在这个上面查找到对应的版本，进行更新。</p>
<p>上线的话用jstack 命令行或者Java Mission Control 图形化界面（jml）<br><a id="more"></a></p>
<p><img src="/2017/08/29/深入理解JVM之性能调优/jvm-parameter.png" alt="jvm"><br><img src="/2017/08/29/深入理解JVM之性能调优/堆内存.png" alt="jvm"></p>
<h4 id="修改tomcat-的java-opts"><a href="#修改tomcat-的java-opts" class="headerlink" title="修改tomcat 的java_opts"></a>修改tomcat 的java_opts</h4><p>在Catalina.bat 中添加 <code>set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m</code><br><code>set JAVA_OPTS=-Xms512m -Xmx1024m -XX:NewSize=768m -XX:MaxNewSize=768m -XX:+PrintGCDetails -Xloggc:..\logs\gc.log -XX:+PrintGCTimeStamps</code><br><code>set JAVA_OPTS=-Xms6g -Xmx6g -XX:NewSize=4g -XX:MaxNewSize=4g  -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xloggc:..\logs\gc.log -XX:+PrintGCDateStamps  -XX:+PrintTenuringDistribution</code></p>
<h4 id="各个参数的含义"><a href="#各个参数的含义" class="headerlink" title="各个参数的含义"></a>各个参数的含义</h4><p><a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="noopener">JVM参数</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名称</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-Xms</td>
<td style="text-align:center">初始堆大小    物理内存的1/64(&lt;1GB)</td>
<td style="text-align:center">默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td>
</tr>
<tr>
<td style="text-align:center">-Xmx</td>
<td style="text-align:center">最大堆大小</td>
<td style="text-align:center">物理内存的1/4(&lt;1GB)</td>
<td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td>
</tr>
<tr>
<td style="text-align:center">-Xmn</td>
<td style="text-align:center">年轻代大小(1.4 or lator) 默认1/64</td>
<td style="text-align:center">注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td>
</tr>
<tr>
<td style="text-align:center">-XX:NewSize</td>
<td style="text-align:center">设置年轻代大小(for 1.3/1.4)</td>
</tr>
<tr>
<td style="text-align:center">-XX:MaxNewSize</td>
<td style="text-align:center">年轻代最大值(for 1.3/1.4)</td>
</tr>
<tr>
<td style="text-align:center">-XX:PermSize</td>
<td style="text-align:center">设置持久代(perm gen)初始值</td>
<td style="text-align:center">物理内存的1/64</td>
</tr>
<tr>
<td style="text-align:center">-XX:MaxPermSize</td>
<td style="text-align:center">设置持久代最大值</td>
<td style="text-align:center">物理内存的1/4</td>
</tr>
<tr>
<td style="text-align:center">-XX:NewRatio</td>
<td style="text-align:center"></td>
<td style="text-align:center">年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>
<td>默认值为2，-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td>
</tr>
<tr>
<td style="text-align:center">-XX:SurvivorRatio</td>
<td style="text-align:center">Eden区与Survivor区的大小比值</td>
<td style="text-align:center">默认值为8，设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td>
</tr>
</tbody>
</table>
<p>注意：两个比率问题-XX:NewRatio  -XX:SurvivorRatio  </p>
<p><img src="/2017/08/29/深入理解JVM之性能调优/jvm-model.png" alt="jvm"></p>
<p>设置了堆的大小-Xms 和-Xmx之后，再修改-Xmn Eden后， Survivor 根据比例配置，Old区域就会受影响（，没有Perm区域了）<br>对于非堆来说就有MetaSpace Code Class</p>
<p>jdk1.8之后，把perm修改为matespace，具体的修改配置以及介绍<br>在JDK8中,classe metadata(the virtual machines internal presentation of Java class),<br>被存储在叫做Metaspace的native memory。一些新的flags被加入：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名称</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-XX:MetaspaceSize</td>
<td style="text-align:center">class metadata的初始空间配额，以bytes为单位，</td>
<td style="text-align:center">达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当的降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize（如果设置了的话），适当的提高该值。</td>
</tr>
<tr>
<td style="text-align:center">-XX:MaxMetaspaceSize</td>
<td style="text-align:center">可以为class metadata分配的最大空间。</td>
<td style="text-align:center">默认是没有限制的。 32位的JVM默认MaxPermSize是64M 但如果不指定MaxMetaspaceSize的话，Metaspace的大小仅受限于native memory的剩余大小。</td>
</tr>
<tr>
<td style="text-align:center">-XX:MinMetaspaceFreeRatio</td>
<td style="text-align:center">在GC之后，最小的Metaspace剩余空间容量的百分比，减少为class metadata分配空间导致的垃圾收集</td>
</tr>
<tr>
<td style="text-align:center">-XX:MaxMetaspaceFreeRatio</td>
<td style="text-align:center">在GC之后，最大的Metaspace剩余空间容量的百分比，减少为class metadata释放空间导致的垃圾收集</td>
</tr>
</tbody>
</table>
<p>☆-XX:+UseParNewGC -XX:+UseConcMarkSweepGC 使用ParNew 和 CMS<br>-XX:CMSInitiatingOccupancyFraction=80 即老年代满80%时触发CMS(full gc)，调高则full gc相对减少，调低则full gc处理得比较快；<br>-XX:+UseCMSCompactAtFullCollection 或 -XX:CMSFullGCsBeforeCompaction=5 即full gc前或后做碎片整理。</p>
<p>每次full gc之后，进行压缩 -XX:CMSFullGCsBeforeCompaction=0</p>
<p>CMS的两个挑战：</p>
<ol>
<li><p>堆碎片<br>CMS收集器默认并没有任何碎片整理的机制。所以可能会出现这样的情形：<br>即使总的堆大小远没有耗尽但却不能分配对象，仅仅是因为没有足够连续的空间完全容纳对象。<br>当这种事发生后，JVM会触发Full GC</p>
</li>
<li><p>对象分配率高<br>获取对象实例的频率高于收集器清除堆里死对象的频率<br>并发模式失败： 老年代没有足够的可用空间来容纳一个从年轻代提升过来的对象<br>此时JVM会执行堆碎片整理：触发Full GC</p>
</li>
</ol>
<p>以下参数没有具体尝试，</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名称</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-Xss</td>
<td style="text-align:center">每个线程的堆栈大小</td>
<td style="text-align:center">JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长）和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize一般设置这个值就可以了。</td>
</tr>
<tr>
<td style="text-align:center">-XX:ThreadStackSize</td>
<td style="text-align:center">Thread Stack Size</td>
<td style="text-align:center">(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td>
</tr>
<tr>
<td style="text-align:center">-XX:LargePageSizeInBytes</td>
<td style="text-align:center">内存页的大小不可设置过大， 会影响Perm的大小</td>
<td style="text-align:center">=128m</td>
</tr>
<tr>
<td style="text-align:center">-XX:+UseFastAccessorMethods</td>
<td style="text-align:center">原始类型的快速优化</td>
</tr>
<tr>
<td style="text-align:center">-XX:+DisableExplicitGC</td>
<td style="text-align:center">关闭System.gc()</td>
<td style="text-align:center">这个参数需要严格的测试</td>
</tr>
<tr>
<td style="text-align:center">-XX:MaxTenuringThreshold</td>
<td style="text-align:center">垃圾最大年龄</td>
<td style="text-align:center">如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.</td>
</tr>
<tr>
<td style="text-align:center">-XX:+AggressiveOpts</td>
<td style="text-align:center">加快编译          </td>
</tr>
<tr>
<td style="text-align:center">-XX:+UseBiasedLocking</td>
<td style="text-align:center">锁机制的性能改善          </td>
</tr>
<tr>
<td style="text-align:center">-Xnoclassgc</td>
<td style="text-align:center">禁用垃圾回收          </td>
</tr>
<tr>
<td style="text-align:center">-XX:SoftRefLRUPolicyMSPerMB</td>
<td style="text-align:center">每兆堆空闲空间中SoftReference的存活时间</td>
<td style="text-align:center">1s    softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td>
</tr>
<tr>
<td style="text-align:center">-XX:PretenureSizeThreshold</td>
<td style="text-align:center">对象超过多大是直接在旧生代分配</td>
<td style="text-align:center">0    单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td>
</tr>
<tr>
<td style="text-align:center">-XX:TLABWasteTargetPercent</td>
<td style="text-align:center">TLAB占eden区的百分比</td>
<td style="text-align:center">1%</td>
</tr>
<tr>
<td style="text-align:center">-XX:+CollectGen0First</td>
<td style="text-align:center">FullGC时是否先YGC</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
<p>其他功能，方便之后查找问题<br><code>java -X</code>展示-X参数<br><code>java -XX:+PrintFlagsFinal</code> 打印所有的-XX：参数<br><code>java -XX:+PrintCommandLineFlags</code> 打印现在的命令行参数</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名称</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-XX:+HeapDumpOnOutOfMemoryError</td>
<td style="text-align:center">在OutOfMenory的时候自动创建Heapdump,注：其中不设-XX:HeapDumpPath时，dump出的文件在/tomcat_home/bin目录下</td>
<td style="text-align:center">-XX:HeapDumpPath=D:/heapdump,文章最后还有手动生成jmap</td>
</tr>
</tbody>
</table>
<p>为了分析可以将gc日志搞出来</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-XX:+PrintGC</td>
<td style="text-align:center">输出形式 :  [GC 118250K-&gt;113543K(130112K), 0.0094143 secs]  [Full GC 121376K-&gt;10414K(130112K), 0.0650971 secs]</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintGCDetails</td>
<td style="text-align:center">输出形式:[GC [DefNew: 8614K-&gt;781K(9088K), 0.0123035 secs] 118250K-&gt;113543K(130112K), 0.0124633 secs] [GC [DefNew: 8614K-&gt;8614K(9088K), 0.0000665 secs][Tenured: 112761K-&gt;10414K(121024K), 0.0433488 secs] 121376K-&gt;10414K(130112K), 0.0436268 secs]</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintGCTimeStamps</td>
<td style="text-align:center">-XX:+PrintGCDateStamps</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintGC:PrintGCTimeStamps</td>
<td style="text-align:center">可与-XX:+PrintGC -XX:+PrintGCDetails混合使用  输出形式:11.851: [GC 98328K-&gt;93620K(130112K), 0.0082960 secs]</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintGCApplicationStoppedTime</td>
<td style="text-align:center">打印垃圾回收期间程序暂停的时间.可与上面混合使用    输出形式:Total time for which application threads were stopped: 0.0468229 seconds</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintGCApplicationConcurrentTime</td>
<td style="text-align:center">打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用         输出形式:Application time: 0.5291524 seconds</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintHeapAtGC</td>
<td style="text-align:center">打印GC前后的详细堆栈信息</td>
</tr>
<tr>
<td style="text-align:center">-Xloggc:../logs/gc.log</td>
<td style="text-align:center">把相关日志信息记录到文件以便分析.</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintClassHistogram</td>
<td style="text-align:center">garbage collects before printing the histogram.    与上面几个配合使用</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintTLAB</td>
<td style="text-align:center">查看TLAB空间的使用情况</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintTenuringDistribution</td>
<td style="text-align:center">查看每次minor GC后新的存活周期的阈值         Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。</td>
</tr>
<tr>
<td style="text-align:center">-XX:+PrintTenuringDistribution</td>
<td style="text-align:center">打印对象年龄 默认配置的15，jvm是动态对象年龄判定的 取决于survivor的大小，调大survivor会增加age</td>
</tr>
<tr>
<td style="text-align:center">-XX:MaxTenuringThreshold=10</td>
<td style="text-align:center">Desired survivor size 40239104 bytes, new threshold 6 (max 6)意思是说对象在survivor区域中经过10minorGC还存活的话就提拔到老生代。再比如 -XX:SurvivorRatio=65536 -XX:MaxTenuringThreshold=0这样的配置实际上就是去掉了survivor区域，直接将对象从eden区域提拔到老生代</td>
</tr>
</tbody>
</table>
<h4 id="tomcat下的几个日志"><a href="#tomcat下的几个日志" class="headerlink" title="tomcat下的几个日志"></a>tomcat下的几个日志</h4><p>gc日志 配置Catalina.bat JAVA_OPTS<br>-XX:+PrintGCDetails -Xloggc:..\logs\gc.log -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC</p>
<h5 id="根据gc-log分析收集器"><a href="#根据gc-log分析收集器" class="headerlink" title="根据gc log分析收集器"></a>根据gc log分析收集器</h5><p><a href="http://blog.csdn.net/doc_sgl/article/details/46594123" target="_blank" rel="noopener">日志含义及分析</a><br>默认的垃圾收集器 PS Scavenge 和PS MarkSweep  对应 PS Eden 和PS Old, Parallel Scavenge 和Serial Old<br><code>-XX:+UseParallelGC</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class="line">Memory: 4k page, physical 8299408k(1668496k free), swap 16596956k(4817128k free)</span><br><span class="line">CommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:NewSize=536870912 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC </span><br><span class="line">3.009: [GC (Allocation Failure) [PSYoungGen: 393216K-&gt;44906K(458752K)] 393216K-&gt;44994K(983040K), 0.0299992 secs] [Times: user=0.09 sys=0.02, real=0.03 secs] </span><br><span class="line">4.184: [GC (Metadata GC Threshold) [PSYoungGen: 438122K-&gt;52440K(458752K)] 438210K-&gt;52536K(983040K), 0.0307814 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] </span><br><span class="line">4.215: [Full GC (Metadata GC Threshold) [PSYoungGen: 52440K-&gt;0K(458752K)] [ParOldGen: 96K-&gt;50332K(524288K)] 52536K-&gt;50332K(983040K), [Metaspace: 20805K-&gt;20805K(1069056K)], 0.0588943 secs] [Times: user=0.19 sys=0.03, real=0.06 secs] </span><br><span class="line">5.833: [GC (Metadata GC Threshold) [PSYoungGen: 223304K-&gt;16405K(458752K)] 273636K-&gt;66746K(983040K), 0.0090804 secs] [Times: user=0.00 sys=0.03, real=0.01 secs] </span><br><span class="line">5.842: [Full GC (Metadata GC Threshold) [PSYoungGen: 16405K-&gt;0K(458752K)] [ParOldGen: 50340K-&gt;35102K(524288K)] 66746K-&gt;35102K(983040K), [Metaspace: 34776K-&gt;34776K(1081344K)], 0.0372804 secs] [Times: user=0.09 sys=0.00, real=0.04 secs]</span><br></pre></td></tr></table></figure></p>
<p>说明 进行了三次 Minor GC(Metadata GC Threshold)和二次Full GC (Metadata GC Threshold)，PSYoungGen 和ParOldGen Metaspace三个区域进行garbage回收，</p>
<p>-XX:+UseParNewGC  -XX:+UseConcMarkSweepGC对应  ParNew Eden 和 CMS Old</p>
<p>各种收集器的搭配<br><img src="/2017/08/29/深入理解JVM之性能调优/gc收集器.jpg" alt="jvm"><br><img src="/2017/08/29/深入理解JVM之性能调优/jvmGC.png" alt="jvm参数设置"></p>
<p>参数：<code>-XX:+UseConcMarkSweepGC -XX:+UseParNewGC</code> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM (25.111-b14) for windows-amd64 JRE (1.8.0_111-b14), built on Sep 22 2016 19:24:05 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class="line">Memory: 4k page, physical 8299408k(1605020k free), swap 16596956k(4755960k free)</span><br><span class="line">CommandLine flags: -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=536870912 -XX:MaxTenuringThreshold=6 -XX:NewSize=536870912 -XX:OldPLABSize=16 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC </span><br><span class="line">2.538: [GC (Allocation Failure) 2.538: [ParNew: 419456K-&gt;45084K(471872K), 0.0319020 secs] 419456K-&gt;45084K(996160K), 0.0320000 secs] [Times: user=0.09 sys=0.00, real=0.03 secs] </span><br><span class="line">4.063: [GC (Allocation Failure) 4.063: [ParNew: 464540K-&gt;47903K(471872K), 0.0510502 secs] 464540K-&gt;62045K(996160K), 0.0511090 secs] [Times: user=0.19 sys=0.00, real=0.05 secs] </span><br><span class="line">4.114: [GC (CMS Initial Mark) [1 CMS-initial-mark: 14142K(524288K)] 69798K(996160K), 0.0044547 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">4.119: [CMS-concurrent-mark-start]</span><br><span class="line">4.131: [CMS-concurrent-mark: 0.013/0.013 secs] [Times: user=0.06 sys=0.00, real=0.01 secs] </span><br><span class="line">4.131: [CMS-concurrent-preclean-start]</span><br><span class="line">4.132: [CMS-concurrent-preclean: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">4.132: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line">5.631: [CMS-concurrent-abortable-preclean: 1.022/1.499 secs] [Times: user=3.53 sys=0.31, real=1.50 secs] </span><br><span class="line">5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs] </span><br><span class="line">5.657: [CMS-concurrent-sweep-start]</span><br><span class="line">5.660: [CMS-concurrent-sweep: 0.003/0.003 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">5.660: [CMS-concurrent-reset-start]</span><br><span class="line">5.660: [CMS-concurrent-reset: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">310.132: [GC (Allocation Failure) 310.132: [ParNew: 467359K-&gt;25032K(471872K), 0.0437937 secs] 481496K-&gt;47728K(996160K), 0.0438755 secs] [Times: user=0.03 sys=0.05, real=0.04 secs] </span><br><span class="line">2176.769: [GC (Allocation Failure) 2176.769: [ParNew: 444488K-&gt;20094K(471872K), 0.0397949 secs] 467184K-&gt;42790K(996160K), 0.0399206 secs] [Times: user=0.13 sys=0.00, real=0.04 secs] </span><br><span class="line">4106.112: [GC (Allocation Failure) 4106.112: [ParNew: 439550K-&gt;27010K(471872K), 0.0349045 secs] 462246K-&gt;49707K(996160K), 0.0350339 secs] [Times: user=0.05 sys=0.03, real=0.03 secs]</span><br></pre></td></tr></table></figure>
<p>5次GC (Allocation Failure)和2次Full GC ，这个我还没有看出来怎么是两次，CMS Initial Mark 一次， CMS Final Remark一次？好像jconsole和jvisualvm的统计不一致。<br>5.631: [GC (CMS Final Remark) [YG occupancy: 264766 K (471872 K)]5.631: [Rescan (parallel) , 0.0148491 secs]5.646: [weak refs processing, 0.0000339 secs]5.646: [class unloading, 0.0040028 secs]5.650: [scrub symbol table, 0.0052723 secs]5.656: [scrub string table, 0.0006273 secs][1 CMS-remark: 14142K(524288K)] 278909K(996160K), 0.0254939 secs] [Times: user=0.08 sys=0.00, real=0.03 secs]<br>这个是全部GC的， YG occupancy、Rescan (parallel)、weak refs processing、class unloadingscrub symbol table、scrub string table、1 CMS-remark</p>
<p>|-XX:+PrintTenuringDistribution    |查看每次minor GC后新的存活周期的阈值         Desired survivor size 1048576 bytes, new threshold 7 (max 15) new threshold 7即标识新的存活周期的阈值为7。|</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Desired survivor size 40239104 bytes, new threshold 6 (max 6)</span><br><span class="line">- age   1:   38395784 bytes,   38395784 total</span><br><span class="line">: 697938K-&gt;46713K(707840K), 0.0827063 secs] 697938K-&gt;62235K(969984K), 0.0828384 secs] [Times: user=0.26 sys=0.00, real=0.08 secs] </span><br><span class="line">2017-11-06T17:47:26.663+0800: 2084.592: [GC (Allocation Failure) 2017-11-06T17:47:26.663+0800: 2084.592: [ParNew</span><br><span class="line">Desired survivor size 40239104 bytes, new threshold 6 (max 6)</span><br><span class="line">- age   1:    7222536 bytes,    7222536 total</span><br><span class="line">- age   2:   12782736 bytes,   20005272 total</span><br><span class="line">: 675961K-&gt;26286K(707840K), 0.0380878 secs] 691483K-&gt;41807K(969984K), 0.0382007 secs] [Times: user=0.06 sys=0.00, real=0.04 secs]</span><br></pre></td></tr></table></figure>
<p>经常性的 “premature promotion”， 最总会导致大量短期对象被提升到老年代， 最终导致老年代空间不足， 引发另一个 JVM 内存问题 “promotion failure”（提升失败： 即老年代空间不足以容乃 Minor GC 中提升上来的对象）</p>
<p>阈值 6</p>
<p>-XX:+PrintHeapAtGC 打印GC前后的堆栈信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;Heap before GC invocations=0 (full 0):</span><br><span class="line"> par new generation   total 707840K, used 629248K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)</span><br><span class="line">  eden space 629248K, 100% used [0x00000000c0000000, 0x00000000e6680000, 0x00000000e6680000)</span><br><span class="line">  from space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)</span><br><span class="line">  to   space 78592K,   0% used [0x00000000eb340000, 0x00000000eb340000, 0x00000000f0000000)</span><br><span class="line"> concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K</span><br><span class="line">  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K</span><br><span class="line">2017-11-07T21:14:24.642+0800: 12.757: [GC (Allocation Failure) 2017-11-07T21:14:24.642+0800: 12.757: [ParNew</span><br><span class="line">Desired survivor size 40239104 bytes, new threshold 1 (max 6)</span><br><span class="line">- age   1:   73044040 bytes,   73044040 total</span><br><span class="line">: 629248K-&gt;71474K(707840K), 0.0671453 secs] 629248K-&gt;71474K(969984K), 0.0672460 secs] [Times: user=0.14 sys=0.05, real=0.07 secs] </span><br><span class="line">Heap after GC invocations=1 (full 0):</span><br><span class="line"> par new generation   total 707840K, used 71474K [0x00000000c0000000, 0x00000000f0000000, 0x00000000f0000000)</span><br><span class="line">  eden space 629248K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000e6680000)</span><br><span class="line">  from space 78592K,  90% used [0x00000000eb340000, 0x00000000ef90ca70, 0x00000000f0000000)</span><br><span class="line">  to   space 78592K,   0% used [0x00000000e6680000, 0x00000000e6680000, 0x00000000eb340000)</span><br><span class="line"> concurrent mark-sweep generation total 262144K, used 0K [0x00000000f0000000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 15947K, capacity 16294K, committed 16512K, reserved 1064960K</span><br><span class="line">  class space    used 1780K, capacity 1877K, committed 1920K, reserved 1048576K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>catalina host-manage manager localhost日志 配置Catalina.bat JAVA_OPTS<br>-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=”..\conf\logging.properties”<br>对应下面几个<br>localhost.2012-07-05.txt<br>catalina.2012-07-05.txt<br>manager.2012-07-05.txt<br>host-manager.2012-07-05.txt</p>
<p>访问日志access_log 配置server.xml Host节点内部添加的Valve<br><code>&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs/tomcat&quot;  prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;common&quot; resolveHosts=&quot;false&quot;/&gt;</code></p>
<p>app日志<br>log4j 应用内部的log</p>
<h4 id="堆文件分析"><a href="#堆文件分析" class="headerlink" title="堆文件分析"></a>堆文件分析</h4><p>查看pid : jps  -m -l<br>生成hprof文件 : jmap -dump:format=b,file=log.hprof [pid]</p>
<p><code>-XX:+HeapDumpOnOutOfMemoryError</code> 自动生成dump </p>
<h5 id="visual-VM-jvisualvm工具亦可"><a href="#visual-VM-jvisualvm工具亦可" class="headerlink" title="visual VM  jvisualvm工具亦可"></a>visual VM  jvisualvm工具亦可</h5><h5 id="eclipse中的分析工具加载地址-http-www-eclipse-org-mat-downloads-php-找到Update-Site"><a href="#eclipse中的分析工具加载地址-http-www-eclipse-org-mat-downloads-php-找到Update-Site" class="headerlink" title="eclipse中的分析工具加载地址: http://www.eclipse.org/mat/downloads.php 找到Update Site"></a>eclipse中的分析工具加载地址: <a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="noopener">http://www.eclipse.org/mat/downloads.php</a> 找到Update Site</h5><p>在Eclipse中点击Windows-&gt;Open Perspective-&gt;Other-&gt;Memory Analysis<br>导入.hprof文件<br>在MAT中点击 File-&gt;Open File,浏览到刚刚转换而得到的.hprof文件，并Cancel掉自动生成报告,点击Dominator Tree，并按Package分组，<br>选择自己所定义的Package 类点右键，在弹出菜单中选择List objects-&gt;With incoming references。<br>这时会列出所有可疑类，右键点击某一项，并选择Path to GC Roots-&gt;exclude weak/soft references,<br>会进一步筛选出跟程序相关的所有有内存泄露的类。据此，可以追踪到代码中的某一个产生泄露的类。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
            <category> 性能优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库操作语句]]></title>
      <url>https://muxiaobai.github.io/2017/08/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>常用的SQL语句，汇总，以便之后查阅。<br><a id="more"></a></p>
<p>针对具体的数据行级别 增删改查<br>Data Manipulation Language (DML)数据操作语言(DML) (for database)  insert delete update select</p>
<p>定义是针对表、视图、索引、用户、触发器、存储过程等级别<br>Data Definition Language (DDL) 数据定义语言(DDL) (for database) create drop alter table/view/index</p>
<p>权限<br>Data Control Language (DCL) 数据控制语言(DCL) (for database) grant revoke</p>
<h4 id="mysql-创建用户-和授权"><a href="#mysql-创建用户-和授权" class="headerlink" title="mysql 创建用户 和授权"></a>mysql 创建用户 和授权</h4><p>CREATE USER ‘username‘@’%’ IDENTIFIED BY ‘password’;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘username‘@’%’ WITH GRANT OPTION;<br>查询用户</p>
<p>SELECT DISTINCT CONCAT(‘User: ‘’’,user,‘‘‘@’’’,host,’’’;’) AS query FROM mysql.user;</p>
<h4 id="mysql-索引"><a href="#mysql-索引" class="headerlink" title="mysql 索引"></a>mysql 索引</h4><p>BTREE  HASH</p>
<p><a href="https://my.oschina.net/liughDevelop/blog/1788148" target="_blank" rel="noopener">MySQL的索引是什么？怎么优化？</a></p>
<p>explan或者describe, possible_key key key_len 执行的索引,已经扫描的行数row,如果是范围值的话，索引无效。</p>
<p><a href="https://blog.csdn.net/qq_37307063/article/details/70141679" target="_blank" rel="noopener">mysql索引的使用及优化方法</a>内有my.ini的配置参数解释</p>
<h4 id="Oracle的dblink"><a href="#Oracle的dblink" class="headerlink" title="Oracle的dblink"></a>Oracle的dblink</h4><p>//00933问题一定要检查自己的SQL语句的语法 </p>
<p>select * from user_sys_privs;//查找当前用户的权限是否具有dblink的create权限<br>grant create public database link,create database link to “account”; //分配权限</p>
<p>select name,value from v$parameter where name=’service_names’ //查询服务名<br>select <em> from global_name;<br>select owner,object_name from dba_objects where object_type=’DATABASE LINK’;//查询已有的dblink<br>select </em> from dba_db_links;</p>
<p>//两个创建 注意引号问题<br>create database link dblinktest connect to sstzjs_zjk identified by “12345678” using ‘19.131.106.252:1521/oracle’;<br>create public database link sstzjs_zjk.us.oracle.com connect to sstzjs_zjk IDENTIFIED BY “12345678” using ‘(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 19.131.106.252)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ORCL)))’;</p>
<p>create public database link zrhs_link using ‘19.131.106.252:1521/oracle’;<br>在不指定用户名和口令的情况下，ORACLE使用当前的用户名和口令登录到远程数据库。<br>SELECT * FROM INS_BUSINESS_INFO@ZRHS_LINK</p>
<p>DROP PUBLIC DATABASE LINK SSTZJS_ZJK.US.ORACLE.COM; //删除dblink</p>
<h4 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h4><p>拼接：wm_concat (FDSXMC || ‘&amp;&amp;’) </p>
<p>替换：update Prj_Project set projectname = replace(projectname,’华为’,’2’);</p>
<p>导入数据库</p>
<p>imp <a href="mailto:username/password@192.168.5.214" target="_blank" rel="noopener">username/password@192.168.5.214</a>/ORCL file=D:\daoru.dmp FULL=y</p>
<p>导出数据库 注意版本要一致，10g 对10g 11g对11g 否则会出错。因为有exp版本和server版本之分</p>
<p>exp <a href="mailto:username/password@192.168.5.214" target="_blank" rel="noopener">username/password@192.168.5.214</a>/ORCL file=d:\daochu.dmp FULL=y</p>
<p>exp <a href="mailto:XNJD20171225/12345678@192.168.2.240" target="_blank" rel="noopener">XNJD20171225/12345678@192.168.2.240</a>/ORCL file=d:\daochu.dmp owner=(XNJD20171225,sys) 导出对应用户的数据库中的内容</p>
<p>exp username/pwd@sid file=d:/data/bak.dmp owner=(user)rows=n   不导出数据</p>
<p>创建表空间<br>create tablespace WEBSITE<br>datafile ‘D:\app\zhang\product\11.1.0\db_1\SPACE_TBSPACE.dbf’<br>size 1500M autoextend on next 5M maxsize 3000M;</p>
<p>create tablespace WEBSITE logging datafile D:\app\Myadmin.fs\product\11.2.0\test1.dbf’ size 1024m;</p>
<p>自动扩展：</p>
<p>select tablespace_name,file_name,autoextensible  from dba_data_files;</p>
<p>alter database datafile ‘D:\APP\MYADMIN.FS\PRODUCT\11.2.0\SWBXN1.DBF’ autoextend on;</p>
<p>开启自动扩展功能语法：<br>alter database datafile ‘对应的数据文件路径信息’ autoextend on;<br>关闭自动扩展功能语法：<br>alter database datafile ‘对应的数据文件路径信息’ autoextend off;</p>
<p>创建用户，给权限<br>– Create the user<br>create user XNJD20180102<br>  identified by “12345678”<br>  default tablespace WEBSITE<br>  temporary tablespace TEMP<br>  profile DEFAULT;<br>– Grant/Revoke role privileges<br>grant connect to XNJD20180102 with admin option;<br>grant dba to XNJD20180102 with admin option;<br>– Grant/Revoke system privileges<br>grant unlimited tablespace to XNJD20180102;</p>
<p>or</p>
<p>create user XNJD20180102 identified by 12345678 default tablespace WEBSITE temporary tablespace temp; </p>
<p>grant dba,connect,resource to XNJD20180102; </p>
<h4 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h4><h5 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h5><p>SELECT a.tablespace_name “表空间名”,<br>a.bytes / 1024 / 1024 “表空间大小(M)”,<br>(a.bytes - b.bytes) / 1024 / 1024 “已使用空间(M)”,<br>b.bytes / 1024 / 1024 “空闲空间(M)”,<br>round(((a.bytes - b.bytes) / a.bytes) * 100, 2) “使用比”<br>FROM (SELECT tablespace_name, sum(bytes) bytes<br>FROM dba_data_files<br>GROUP BY tablespace_name) a,<br>(SELECT tablespace_name, sum(bytes) bytes, max(bytes) largest<br>FROM dba_free_space<br>GROUP BY tablespace_name) b<br>WHERE a.tablespace_name = b.tablespace_name<br>ORDER BY ((a.bytes - b.bytes) / a.bytes) DESC;</p>
<p>select dbf.tablespace_name,<br>dbf.totalspace “总量(M)”,<br>dbf.totalblocks as 总块数,<br>dfs.freespace “剩余总量(M)”,<br>dfs.freeblocks “剩余块数”,<br>(dfs.freespace / dbf.totalspace) * 100 “空闲比例”<br>from (select t.tablespace_name,<br>sum(t.bytes) / 1024 / 1024 totalspace,<br>sum(t.blocks) totalblocks<br>from dba_data_files t<br>group by t.tablespace_name) dbf,<br>(select tt.tablespace_name,<br>sum(tt.bytes) / 1024 / 1024 freespace,<br>sum(tt.blocks) freeblocks<br>from dba_free_space tt<br>group by tt.tablespace_name) dfs<br>where trim(dbf.tablespace_name) = trim(dfs.tablespace_name);</p>
<p>SELECT T.TABLESPACE_NAME,<br>D.FILE_NAME,<br>D.AUTOEXTENSIBLE,<br>D.BYTES,<br>D.MAXBYTES,<br>D.STATUS<br>FROM DBA_TABLESPACES T, DBA_DATA_FILES D<br>WHERE T.TABLESPACE_NAME = D.TABLESPACE_NAME<br>ORDER BY TABLESPACE_NAME, FILE_NAME;</p>
<p>SELECT *  FROM dba_data_files  WHERE tablespace_name = ‘WEBSITE’;</p>
<p>select blocks, maxblocks,file_name,tablespace_name from dba_data_files;</p>
<p>alter tablespace WEBSITE add datafile ‘E:\ORACLE\PRODUCT\10.2.0\ORADATA\ORCL\WEBSITE1.dbf’ size 5120M</p>
<h5 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h5><p>查询正在运行的SQL:</p>
<p>select a.program, b.spid, c.sql_text,c.SQL_ID from v$session a, v$process b, v$sqlarea c<br>where a.paddr = b.addr and a.sql_hash_value = c.hash_value and a.username is not null;</p>
<p>上面的SQL_ID 完整的SQL: select a.* from v$sql a where a.SQL_ID=’43c5ykm1mcp2a’</p>
<p>约束表:<br>ORACLE有关ORA-02292：违反完整约束条件（XXX.FKXXX）- 找到子记录的删除方法</p>
<p>select a.constraint_name, a.table_name, b.constraint_name from user_constraints a, user_constraints b<br>where a.constraint_type = ‘R’ and b.constraint_type = ‘P’  and a.r_constraint_name = b.constraint_name<br>and a.constraint_name = ‘FKXXX’</p>
<p>数据被锁，查看session, for update 导致的锁表问题等。</p>
<h5 id="执行计划F5"><a href="#执行计划F5" class="headerlink" title="执行计划F5"></a>执行计划F5</h5><p><a href="https://www.cnblogs.com/Dreamer-1/p/6076440.html" target="_blank" rel="noopener">看懂Oracle执行计划</a></p>
<h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p>测试环境Oracle 10g</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER  T_INS_BUSINESSINFO_UPDATE    --T_INS_BUSINESSINFO_UPDATE 表示触发器的名字</span><br><span class="line">AFTER update OF  CASEEXCHANGE       --CASEEXCHANGE  更新哪个字段</span><br><span class="line">ON T_INS_BUSINESSINFO  -- T_INS_BUSINESSINFO触发的表</span><br><span class="line">FOR EACH ROW -- 代表行级触发器</span><br><span class="line">BEGIN</span><br><span class="line"> UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;5&apos; </span><br><span class="line"> WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE =&apos;3&apos; AND h.EXCHANGESTATUS = &apos;2&apos;;--收到材料回退</span><br><span class="line"> UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;8&apos; </span><br><span class="line"> WHERE h.bsnumcopy = :new.bsnum and :new.CASEEXCHANGE =&apos;4&apos; AND h.EXCHANGESTATUS = &apos;7&apos;;--已经领证调整</span><br><span class="line"></span><br><span class="line"> --DBMS_OUTPUT.PUT_LINE(&apos;旧的flongnumber值是&apos;||:old.FLONGNUMBER ||&apos;、新的flongnumber值是&apos;||:new.FLONGNUMBER); --  输出值</span><br><span class="line"></span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<p>中间用到了dblink @ 多用用就可以啦还是挺简单的，就是不知道效率怎么样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--DROP TRIGGER TR_ORG_UPDATE;</span><br><span class="line">select * from all_triggers  where table_name=&apos;T_INS_BUSINESSINFO&apos;;   </span><br><span class="line">--UPDATE INS_BUSINESS_INFO@SSTZJS_ZJK.US.ORACLE.COM h SET h.EXCHANGESTATUS=&apos;2&apos; WHERE h.bsnumcopy =&apos;1708111553000610N&apos;  -- :new.bsnum and :new.CASEEXCHANGE =&apos;3&apos;;</span><br></pre></td></tr></table></figure>
<p>定义赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create or replace trigger yearPaoId_trigger</span><br><span class="line">before insert</span><br><span class="line">on YEARPATENT</span><br><span class="line">for each row</span><br><span class="line">declare</span><br><span class="line">v_yearPaoId number(9);//定义变量</span><br><span class="line">v_yearPaoIdOld number(9);</span><br><span class="line">begin</span><br><span class="line">    select :new.yearPaoId into v_yearPaoId from YEARPATENT;//选择什么into到变量中</span><br><span class="line">    select :new.yearPaoIdOld into v_yearPaoIdOld from YEARPATENT;</span><br><span class="line">    update mapping@dbLinkName set newId = v_yearPaoId where oldId = v_yearPaoIdOld;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<p>下面这个是一个标准写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER TG_NAME</span><br><span class="line">　　BEFORE | AFTER</span><br><span class="line">　　INSERT OR DELETE OR UPDATE [OF COL1,COL2,...]</span><br><span class="line">　　ON 表名</span><br><span class="line">　　[FOR EACH ROW]</span><br><span class="line">　　[WHEN 条件]</span><br><span class="line">　　DECLARE</span><br><span class="line">　　...</span><br><span class="line">　　BEGIN</span><br><span class="line">　　....</span><br><span class="line">　　EXCEPTION</span><br><span class="line">　　...</span><br><span class="line">　　END;</span><br><span class="line">注: A) FOR EACH ROW 代表行级触发器.</span><br><span class="line">　　B) WHEN: 只有符合该条件的时候才进行触发.</span><br><span class="line">　　C) 可以通过INSERTING,DELETING,UPDATING来识别INSERT,DELETE,UPDATE操作.</span><br><span class="line">　　D) 用:new 和:old(称为伪记录)来访问数据变更前后的值。</span><br><span class="line">　　:NEW :INSERT,UPDATE之后的数据.</span><br><span class="line">　　:OLD :DELETE,UDPATE之前的数据.</span><br><span class="line">　　:old.字段名或:new.字段名</span><br><span class="line">　　E) 触发器中的操作与触发事件(INSERT,UPDATE,DELETE)一起进行COMMIT和ROLLBACK;</span><br><span class="line">　　REM 创建包含插入、删除、修改多种触发事件的触发器DML_LOG，对EMP表的操作进行记录。</span><br></pre></td></tr></table></figure>
<h4 id="查重和去重、其他"><a href="#查重和去重、其他" class="headerlink" title="查重和去重、其他"></a>查重和去重、其他</h4><p>select t.*,t.rowid from table t<br>有个很好用的rownum  和 count(1)</p>
<p>查重：select bsnum ,count(1) from table group by bsnum having count(1)&gt;1;</p>
<p>去重：select distinct(bsnum) from table;</p>
<p>复制表结构： create table newtable as select * from oldtable where 1=2</p>
<p>复制表结构和数据： create table newtable as select * from oldtable </p>
<p>删除数据：</p>
<p>批量插入：从一个表中查出来的数据<br>insert into table2 (SELECT B.ID,B.NAME,B.ID,’5’,’5’,’5’,’5’,’5’,’5’ FROM table1 B WHERE B.STATUS != 0)</p>
<h4 id="数据库编码"><a href="#数据库编码" class="headerlink" title="数据库编码"></a>数据库编码</h4><p>select <em> from nls_database_parameters;  –服务器<br>select </em> from nls_instance_parameters;  –客户端<br>select * from nls_session_parameters; –session 连接</p>
<p>select userenv(‘language’) from dual;</p>
<p>SELECT sys_context(‘userenv’, ‘language’) FROM dual;–查询服务端语言<br><a href="https://www.cnblogs.com/perilla/p/3873653.html" target="_blank" rel="noopener">Oracle字符集的查看查询和Oracle字符集的设置修改</a></p>
<p>group by 组合 listagg方法</p>
<p>select pr.rolekey, pr.rolename as roleName,<br>listagg(fu.id,’,’)within group(order by rolename) as userIds,<br>listagg(to_char(fu.username),’,’)within group(order by rolename) as userNames<br>from t_roleuser t<br>left join t_user fu on fu.id = t.fk_userid<br>left join t_role pr on pr.id =t.fk_roleid<br>where  t.fk_projectid =? group by pr.rolename,pr.rolekey ;</p>
<h4 id="oracle-tree"><a href="#oracle-tree" class="headerlink" title="oracle tree"></a>oracle tree</h4><p>ORACLE 数据库递归查询当前数据的所有孩子数据（不包含自己）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT id   AS id,</span><br><span class="line">  parent_id AS parentId,</span><br><span class="line">  parent_id AS parent,</span><br><span class="line">  name      AS text</span><br><span class="line">FROM mdm_center</span><br><span class="line">  START WITH parent_id = #&#123;parentId&#125;</span><br><span class="line">  CONNECT BY prior id  = parent_id</span><br></pre></td></tr></table></figure></p>
<p>ORACLE数据库查询当前数据的所有父数据（包含自己）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT id   AS id,</span><br><span class="line">  parent_id AS parentId,</span><br><span class="line">  parent_id AS parent,</span><br><span class="line">  name      AS text</span><br><span class="line">FROM mdm_center</span><br><span class="line">  START WITH id              = #&#123;centerId&#125;</span><br><span class="line">  CONNECT BY prior parent_id = id</span><br></pre></td></tr></table></figure></p>
<p>oracle tree 结构级联删除数据</p>
<p>SELECT  t.*,t.rowid  FROM   t_sys_nodetree_count  t<br>CONNECT BY PRIOR id = pid start WITH ID = ‘20160406195638000013’</p>
<p>delete from t_sys_nodetree_count where ID in<br>(SELECT ID  FROM  t_sys_nodetree_count<br>CONNECT BY PRIOR FENXID = FUJID start WITH ID = ‘20160406195638000013’)</p>
]]></content>
      
        <categories>
            
            <category> SQL </category>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 常用代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript再学习之Event]]></title>
      <url>https://muxiaobai.github.io/2017/08/09/javascript%E5%86%8D%E5%AD%A6%E4%B9%A0%E4%B9%8BEvent/</url>
      <content type="html"><![CDATA[<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p>addEventListener/attachEvent</p>
<p>removeEventListener/detachEvent</p>
<p>通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；<br>移除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过addEventListener()添加的匿名函数无法移除<br>布尔值参数是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">document.body.addEventListener(&apos;touchmove&apos;, function (event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;,false);</span><br><span class="line">document.body.removeEventListener(&apos;touchmove&apos;, function (event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;,false);</span><br><span class="line">这样是不能移除的，因为第二个函数是一个新的空间函数，既是写的样子和第一个一样。</span><br></pre></td></tr></table></figure>
<p>一：相同事件绑定和解除，需要使用共用函数；</p>
<p>二：共用函数不能带参数；</p>
<h3 id="捕获与冒泡"><a href="#捕获与冒泡" class="headerlink" title="捕获与冒泡"></a>捕获与冒泡</h3><p>Event原理</p>
<p>一、事件捕获阶段</p>
<p>二、事件目标阶段</p>
<p>三、事件起泡阶段</p>
<p>jQuery</p>
<p>在绑定的时候做了包装处理<br>在执行的时候有过滤器处理</p>
<p><a href="http://blog.csdn.net/bingkingboy/article/details/50160221" target="_blank" rel="noopener"> JS添加事件和解绑事件：addEventListener()与removeEventListener()</a><br><a href="http://blog.csdn.net/itpinpai/article/details/50915771" target="_blank" rel="noopener">addEventListener()、attachEvent()和removeEventListener()、detachEvent()的区别？</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript再学习之DOM]]></title>
      <url>https://muxiaobai.github.io/2017/08/08/javascript%E5%86%8D%E5%AD%A6%E4%B9%A0%E4%B9%8BDOM/</url>
      <content type="html"><![CDATA[<p>产生这种想法的原因是，之前在使用jQuery的时候，chrome的append(),insert(),等都没有问题，但是正式环境，他们使用的是IE9 可能是jQuery的版本太高了，不支持innerHTML，后来问我们大师，告诉我说innerHTML，都是支持的。这样这种问题一直记录到现在。最近在看jQuery的源码，才知道IE9是不支持innerHTML的，因此又学习了一下原生的javascript对DOM的操作。<br><a id="more"></a><br>使用<a href="http://caniuse.com/#search=innerHTML" target="_blank" rel="noopener">caniuse.com</a>查innerHTML会有这样一个issue<br>  innerHTML, insertAdjacentHTML, etc aren’t supported or are read-only on the following elements in IE9 and below: col, colgroup, frameset, html, head, style, table, tbody, tfoot, thead, title, and tr.<br>不支持，只读</p>
<h3 id="javascript犀牛书的词典"><a href="#javascript犀牛书的词典" class="headerlink" title="javascript犀牛书的词典"></a>javascript犀牛书的词典</h3><p>javascript基本<br>null undefined<br>String Number Boolean Array Object </p>
<p>javascript客户端</p>
<h3 id="jQuery-源码阅读-三个抽象方法-dir-siblings-domMamip"><a href="#jQuery-源码阅读-三个抽象方法-dir-siblings-domMamip" class="headerlink" title="jQuery 源码阅读 三个抽象方法 dir siblings domMamip"></a>jQuery 源码阅读 三个抽象方法 dir siblings domMamip</h3><p>dir  siblings(sibling) 针对获取、遍历</p>
<p>domManip 针对添加的elem片段，将一些不合规矩的元素修改一下，顺便整理一下兼容性的问题。让其符合W3C的规范。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//dir 层级关系抽象 2893</span><br><span class="line">//参数解释 ：第一个是当前节点 dir是针对 until 直到找到until结束</span><br><span class="line">var dir = function( elem, dir, until ) &#123;</span><br><span class="line">	var matched = [],</span><br><span class="line">		truncate = until !== undefined;</span><br><span class="line">	    //如果until没有的话 truncate 为false ，不会break，只能循环结束，</span><br><span class="line">    	//如果有的话，为true，再判断当前elem是不是until</span><br><span class="line">    //  这里使用dir把原生的属性都变成参数来获取，当前元素的dir元素</span><br><span class="line">	while ( ( elem = elem[ dir ] ) &amp;&amp; elem.nodeType !== 9 ) &#123;//while重新赋值</span><br><span class="line">		if ( elem.nodeType === 1 ) &#123;//element节点</span><br><span class="line">			if ( truncate &amp;&amp; jQuery( elem ).is( until ) ) &#123;</span><br><span class="line">				break;//跳出循环的条件 找到这个终止until</span><br><span class="line">			&#125;</span><br><span class="line">			matched.push( elem );//同样，添加到返回数组中</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return matched;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//兄弟节点 nextSibling</span><br><span class="line">var siblings = function( n, elem ) &#123;</span><br><span class="line">	var matched = [];</span><br><span class="line"></span><br><span class="line">	for ( ; n; n = n.nextSibling ) &#123;//重新赋值</span><br><span class="line">		if ( n.nodeType === 1 &amp;&amp; n !== elem ) &#123;</span><br><span class="line">			matched.push( n );//只要是节点而且这个节点不等于elem（终止条件），添加到数组中返回</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return matched;</span><br><span class="line">&#125;;</span><br><span class="line">//当前cur的dir节点 while 的时候就把cur重新赋值了</span><br><span class="line">function sibling( cur, dir ) &#123;</span><br><span class="line">	while ( ( cur = cur[ dir ] ) &amp;&amp; cur.nodeType !== 1 ) &#123;&#125;</span><br><span class="line">	return cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Document-Element-Node"><a href="#Document-Element-Node" class="headerlink" title="Document Element Node"></a>Document Element Node</h3><h5 id="获取-创建"><a href="#获取-创建" class="headerlink" title="获取 创建"></a>获取 创建</h5><p>获取了element之后，再次操作的话就是针对element了。<br>  ● 使用Document对象查找对象<br>      ○ getElementById()：通过节点的id属性，查找对应节点。<br>      ○ getElementsByName()：通过节点的name属性，查找对应节点。<br>      ○ getElementsByTagName()：通过节点名称，查找对应节点。<br>  ● 使用Document对象的方法创建节点：<br>      ○ crateElement(tagName)：创建元素节点。<br>      ○ createTextNode(data)：创建文本节点。<br>      ○ createAttirbute(name)：创建属性节点。(不使用)</p>
<p>这里的document获取在jQuery下分为几个判断，主要在init中，包含：<br>    //$(“”), $(null), $(undefined), $(false)<br>    // Handle HTML strings<br>        // Match html or make sure no context is specified for #id<br>            // HANDLE: $(html) -&gt; $(array)<br>            // HANDLE: $(#id) <code>getElementById</code><br>        // HANDLE: $(expr, $(…)) <code>find</code>复杂选择器<br>        // HANDLE: $(expr, context) <code>find</code> <code>$(context).find(expr)</code><br>    // HANDLE: $(DOMElement)<br>    // HANDLE: $(function)<br>调用的话，返回值就是jQuery.fn对象<br>复杂的直接通过Sizzle来完成了。 <code>jQuery.find = Sizzle;</code></p>
<h5 id="属性-attribute"><a href="#属性-attribute" class="headerlink" title="属性 attribute"></a>属性 attribute</h5><p>抽象方法：access<br>element 可以对属性进行操作<br>  ● 获取属性：getAttribute(name);方法<br>  ● 设置属性：setAttribute(name,value)方法。<br>  ● 删除属性：removeAttribute(name);方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn.extend( &#123;</span><br><span class="line">	attr: function( name, value ) &#123;</span><br><span class="line">		return access( this, jQuery.attr, name, value, arguments.length &gt; 1 );</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	removeAttr: function( name ) &#123;//</span><br><span class="line">		return this.each( function() &#123;</span><br><span class="line">			jQuery.removeAttr( this, name );//调用jQuery的removeAttr()就是下面这个</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">jQuery.extend( &#123;</span><br><span class="line">	attr: function( elem, name, value ) &#123;//节点 name =value 赋值</span><br><span class="line">		var ret, hooks,</span><br><span class="line">			nType = elem.nodeType;//节点类型</span><br><span class="line">		//文本/注释/属性 不能get/set属性</span><br><span class="line">		// Don&apos;t get/set attributes on text, comment and attribute nodes</span><br><span class="line">		if ( nType === 3 || nType === 8 || nType === 2 ) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		//不支持属性操作用jQuery.prop()</span><br><span class="line">		// Fallback to prop when attributes are not supported</span><br><span class="line">		if ( typeof elem.getAttribute === &quot;undefined&quot; ) &#123;</span><br><span class="line">			return jQuery.prop( elem, name, value );//如果没有getAttribute 的话就用prop</span><br><span class="line">		&#125;</span><br><span class="line">		//节点不是元素而且不是XML节点</span><br><span class="line">		// Attribute hooks are determined by the lowercase version</span><br><span class="line">		//hooks //checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped</span><br><span class="line">		// Grab necessary hook if one is defined</span><br><span class="line">		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) &#123;</span><br><span class="line">			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||</span><br><span class="line">				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );</span><br><span class="line">		&#125;</span><br><span class="line">		//设置了value</span><br><span class="line">		if ( value !== undefined ) &#123;</span><br><span class="line">			//当value=null时，没有赋值，实际上是移除值</span><br><span class="line">			if ( value === null ) &#123;</span><br><span class="line">				jQuery.removeAttr( elem, name );</span><br><span class="line">				return;</span><br><span class="line">			&#125;</span><br><span class="line">			//把value变为name进行set/remove </span><br><span class="line">			if ( hooks &amp;&amp; &quot;set&quot; in hooks &amp;&amp;</span><br><span class="line">				( ret = hooks.set( elem, value, name ) ) !== undefined ) &#123;</span><br><span class="line">				return ret;</span><br><span class="line">			&#125;</span><br><span class="line">			//设置setAttribute()</span><br><span class="line">			elem.setAttribute( name, value + &quot;&quot; );//有值设值</span><br><span class="line">			return value;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		if ( hooks &amp;&amp; &quot;get&quot; in hooks &amp;&amp; ( ret = hooks.get( elem, name ) ) !== null ) &#123;</span><br><span class="line">			return ret;</span><br><span class="line">		&#125;</span><br><span class="line">		// Sizzle.attr()</span><br><span class="line">		ret = jQuery.find.attr( elem, name );//无值取值</span><br><span class="line"></span><br><span class="line">		// Non-existent attributes return null, we normalize to undefined</span><br><span class="line">		return ret == null ? undefined : ret;</span><br><span class="line">	&#125;,</span><br><span class="line">	//移除属性</span><br><span class="line">	removeAttr: function( elem, value ) &#123;</span><br><span class="line">		var name,</span><br><span class="line">			i = 0,</span><br><span class="line">			attrNames = value &amp;&amp; value.match( rnotwhite );</span><br><span class="line"></span><br><span class="line">		if ( attrNames &amp;&amp; elem.nodeType === 1 ) &#123;</span><br><span class="line">			while ( ( name = attrNames[ i++ ] ) ) &#123;</span><br><span class="line">				elem.removeAttribute( name );//这里就可以看出来了。</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<h5 id="parentNode-childNodes-firstChild-lastChild-nextSibling-previousSibling"><a href="#parentNode-childNodes-firstChild-lastChild-nextSibling-previousSibling" class="headerlink" title="parentNode  childNodes firstChild lastChild nextSibling previousSibling"></a>parentNode  childNodes firstChild lastChild nextSibling previousSibling</h5><p>  ● 父节点：parentNode:<br>      ○ parentNode返回的永远都是一个节点，因为只有元素节点才有可能包含子节点。<br>      ○ document节点没有父节点。也就是文档节点没有父节点，也就是HTML<br>  ● 子节点：childNode：<br>      ○ childNodes，获取指定节点的所有子节点。<br>      ○ firstChild：指定第一个子节点。<br>      ○ lastChild：指定最后一个子节点。<br>  ● 同辈节点：<br>      ○ nextSibling：返回一个给定节点的下一个兄弟节点。<br>      ○ previousSibling：返回一个节点的上一个兄弟节点。</p>
<p>以document.getElementById(“p1”)为例说明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class="line">          &lt;span&gt;1&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;2&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var  p1 = document.getElementById(&quot;p1&quot;);</span><br><span class="line">p1.parentNode == document.getElementById(&quot;box-one&quot;);</span><br><span class="line">p1.childNodes == &quot; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&quot;;</span><br><span class="line">p1.firstChild == &quot;&lt;span&gt;1&lt;/span&gt;&quot;;</span><br><span class="line">p1.lastChild == &quot;&lt;span&gt;2&lt;/span&gt;&quot;;</span><br><span class="line">p1.nextSibling =document.getElementByClassName(&quot;con2&quot;)[0]; == &quot; &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; &quot;</span><br><span class="line">p1.previousSibling 没有</span><br></pre></td></tr></table></figure>
<p>jQuery中的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">parent: function( elem ) &#123;</span><br><span class="line">	var parent = elem.parentNode;</span><br><span class="line">	return parent &amp;&amp; parent.nodeType !== 11 ? parent : null;</span><br><span class="line">&#125;,</span><br><span class="line">parents: function( elem ) &#123;</span><br><span class="line">	return dir( elem, &quot;parentNode&quot; );</span><br><span class="line">&#125;,</span><br><span class="line">parentsUntil: function( elem, i, until ) &#123;</span><br><span class="line">	return dir( elem, &quot;parentNode&quot;, until );</span><br><span class="line">&#125;,</span><br><span class="line">next: function( elem ) &#123;</span><br><span class="line">	return sibling( elem, &quot;nextSibling&quot; );</span><br><span class="line">&#125;,</span><br><span class="line">prev: function( elem ) &#123;</span><br><span class="line">	return sibling( elem, &quot;previousSibling&quot; );</span><br><span class="line">&#125;,</span><br><span class="line">nextAll: function( elem ) &#123;</span><br><span class="line">	return dir( elem, &quot;nextSibling&quot; );</span><br><span class="line">&#125;,</span><br><span class="line">prevAll: function( elem ) &#123;</span><br><span class="line">	return dir( elem, &quot;previousSibling&quot; );</span><br><span class="line">&#125;,</span><br><span class="line">nextUntil: function( elem, i, until ) &#123;</span><br><span class="line">	return dir( elem, &quot;nextSibling&quot;, until );</span><br><span class="line">&#125;,</span><br><span class="line">prevUntil: function( elem, i, until ) &#123;</span><br><span class="line">	return dir( elem, &quot;previousSibling&quot;, until );</span><br><span class="line">&#125;,</span><br><span class="line">siblings: function( elem ) &#123;</span><br><span class="line">	return siblings( ( elem.parentNode || &#123;&#125; ).firstChild, elem );</span><br><span class="line">&#125;,</span><br><span class="line">children: function( elem ) &#123;</span><br><span class="line">	return siblings( elem.firstChild );</span><br><span class="line">&#125;,//一层 find(&quot;&quot;)多层</span><br><span class="line">contents: function( elem ) &#123;</span><br><span class="line">	return elem.contentDocument || jQuery.merge( [], elem.childNodes );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据单词意思都可以知道jQuery这几个方法的含义。</p>
<h5 id="appendChild-insertBefore-removeChild"><a href="#appendChild-insertBefore-removeChild" class="headerlink" title="appendChild  insertBefore removeChild"></a>appendChild  insertBefore removeChild</h5><p>Element对象：<br>  ● 插入节点：<br>      ○ appendChild(newchild)方法。 在当前节点(相当于父)内部最后添加newchild（node）<br>      ○ insertBefore(newchild,refchild)方法。还要有一个调用节点，可在已有的节点（refchild）前插入一个新的节点  （newchild）<br>      ○ 没有insertAfter()方法。<br>  ● 删除节点：<br>      ○ removeChild()方法。 您必须清楚该元素的父元素  parm.removeChild(child)<br>  ● 替换节点：<br>      ○ replaceChild()方法。 同删除</p>
<p>应用：<br>jQuery四种插入 append  prepend before after ,其中domMamip是为了处理插入的内容elem<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//内部，最后添加   appendChild原意就是在当前节点的最后添加新元素</span><br><span class="line">	append: function() &#123;</span><br><span class="line">		return domManip( this, arguments, function( elem ) &#123;</span><br><span class="line">			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class="line">				var target = manipulationTarget( this, elem );</span><br><span class="line">				target.appendChild( elem );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;,</span><br><span class="line">//内部 最前添加   当前节点插入，引用位置refchild为当前节点的第一个儿子节点，那么自然在原节点的最前面插入。</span><br><span class="line">	prepend: function() &#123;</span><br><span class="line">		return domManip( this, arguments, function( elem ) &#123;</span><br><span class="line">			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class="line">				var target = manipulationTarget( this, elem );</span><br><span class="line">				target.insertBefore( elem, target.firstChild );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;,</span><br><span class="line">//外部 ，前面最近添加    和下一个结合理解，</span><br><span class="line">	before: function() &#123;</span><br><span class="line">		return domManip( this, arguments, function( elem ) &#123;</span><br><span class="line">			if ( this.parentNode ) &#123;</span><br><span class="line">				this.parentNode.insertBefore( elem, this );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;,</span><br><span class="line">//外部 后面最近添加  当前节点的父节点 insertBefore 是在父的最后，然后又添加了一个refchild</span><br><span class="line">刚好是当前的下一个兄弟节点，那么插入位置肯定是在原节点的后面</span><br><span class="line">	after: function() &#123;</span><br><span class="line">		return domManip( this, arguments, function( elem ) &#123;</span><br><span class="line">			if ( this.parentNode ) &#123;</span><br><span class="line">				this.parentNode.insertBefore( elem, this.nextSibling );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;,</span><br></pre></td></tr></table></figure></p>
<p>示例代码：(当前元素为documet.getElementById(“p1”))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class="line">          &lt;span&gt;1&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;2&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>内部最后插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var p1 = document.getElementById(&quot;p1&quot;);</span><br><span class="line">var newNode = document.createElement(&quot;p&quot;); </span><br><span class="line">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class="line">p1.appendChild(newNode);//直接内部插入，最后</span><br><span class="line"></span><br><span class="line">插入结果：</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class="line">         &lt;span&gt;1&lt;/span&gt;</span><br><span class="line">         &lt;span&gt;2&lt;/span&gt;</span><br><span class="line">         &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class="line">    &lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class="line">    </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>内部最前插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var newNode = document.createElement(&quot;p&quot;); </span><br><span class="line">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class="line">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class="line">p1.insertBefore(newNode,p1.fiestChild); // 新建的元素节点插入到 id为p1的元素内部最前面 </span><br><span class="line">结果：</span><br><span class="line">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class="line">        &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class="line">        &lt;span&gt;1&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;2&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>外部最后插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var newNode = document.createElement(&quot;p&quot;); </span><br><span class="line">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class="line">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class="line">//新建的元素节点插入到 id为p1后面节点元素的前面， </span><br><span class="line">p1.parentNode.insertBefore(newNode,p1.nextSibling);　也就是说 插入id为P1节点元素的后面。</span><br><span class="line">　　</span><br><span class="line">插入结果：</span><br><span class="line">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class="line">        &lt;span&gt;1&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;2&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>外部最前插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var newNode = document.createElement(&quot;p&quot;); </span><br><span class="line">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class="line">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class="line">//新建的元素节点插入到 id为p1节点元素的前面， </span><br><span class="line">p1.parentNode.insertBefore(newNode,p1);　也就是说 插入id为P1节点元素的前前面。</span><br><span class="line">　　</span><br><span class="line">插入结果：</span><br><span class="line">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class="line">    &lt;p&gt;This is a newcon &lt;/p&gt;//插入位置</span><br><span class="line">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class="line">        &lt;span&gt;1&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;2&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>插入基本就到这里了。下面是删除removeChild</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var newNode = document.createElement(&quot;p&quot;); </span><br><span class="line">var p1 = document.getElementById(&quot;p1&quot;); </span><br><span class="line">newNode.innerHTML = &quot; This is a newcon &quot;; </span><br><span class="line">p1.parentNode.removeChild(p1);</span><br><span class="line">删除结果：</span><br><span class="line">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class="line">    //删除位置</span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h5 id="innerHTML-innerText-textContent"><a href="#innerHTML-innerText-textContent" class="headerlink" title="innerHTML innerText textContent"></a>innerHTML innerText textContent</h5><p>innerText 是IE自己搞出来的，规范应该是textContent<br>innerHTML 在IE8下不支持</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">//内部 所有东西替换成这个value textContent 内部的文本</span><br><span class="line">	text: function( value ) &#123;</span><br><span class="line">		return access( this, function( value ) &#123;</span><br><span class="line">			return value === undefined ?</span><br><span class="line">				jQuery.text( this ) :</span><br><span class="line">				this.empty().each( function() &#123;</span><br><span class="line">					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) &#123;</span><br><span class="line">						this.textContent = value;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; );</span><br><span class="line">		&#125;, null, value, arguments.length );</span><br><span class="line">	&#125;,</span><br><span class="line">		//置空  textContent == &quot;&quot;</span><br><span class="line">	empty: function() &#123;</span><br><span class="line">		var elem,</span><br><span class="line">			i = 0;</span><br><span class="line"></span><br><span class="line">		for ( ; ( elem = this[ i ] ) != null; i++ ) &#123;</span><br><span class="line">			if ( elem.nodeType === 1 ) &#123;</span><br><span class="line"></span><br><span class="line">				// Prevent memory leaks</span><br><span class="line">				jQuery.cleanData( getAll( elem, false ) );</span><br><span class="line"></span><br><span class="line">				// Remove any remaining nodes</span><br><span class="line">				elem.textContent = &quot;&quot;;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		return this;</span><br><span class="line">	&#125;,</span><br><span class="line">	// 内部 所有文本会被解释后再展示出来 innerHTML</span><br><span class="line">	html: function( value ) &#123;</span><br><span class="line">		return access( this, function( value ) &#123;</span><br><span class="line">			var elem = this[ 0 ] || &#123;&#125;,</span><br><span class="line">				i = 0,</span><br><span class="line">				l = this.length;</span><br><span class="line"></span><br><span class="line">			if ( value === undefined &amp;&amp; elem.nodeType === 1 ) &#123;</span><br><span class="line">				return elem.innerHTML;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			// See if we can take a shortcut and just use innerHTML</span><br><span class="line">			if ( typeof value === &quot;string&quot; &amp;&amp; !rnoInnerhtml.test( value ) &amp;&amp;</span><br><span class="line">				!wrapMap[ ( rtagName.exec( value ) || [ &quot;&quot;, &quot;&quot; ] )[ 1 ].toLowerCase() ] ) &#123;</span><br><span class="line"></span><br><span class="line">				value = jQuery.htmlPrefilter( value );</span><br><span class="line"></span><br><span class="line">				try &#123;</span><br><span class="line">					for ( ; i &lt; l; i++ ) &#123;</span><br><span class="line">						elem = this[ i ] || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">						// Remove element nodes and prevent memory leaks</span><br><span class="line">						if ( elem.nodeType === 1 ) &#123;</span><br><span class="line">							jQuery.cleanData( getAll( elem, false ) );</span><br><span class="line">							elem.innerHTML = value;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					elem = 0;</span><br><span class="line"></span><br><span class="line">				// If using innerHTML throws an exception, use the fallback method</span><br><span class="line">				&#125; catch ( e ) &#123;&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			if ( elem ) &#123;</span><br><span class="line">				this.empty().append( value );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, null, value, arguments.length );</span><br><span class="line">	&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot; value = &quot;demo&quot;&gt;</span><br><span class="line">	&lt;video id=&quot;test&quot; src=&quot;asas&quot;&gt;&lt;/video&gt;</span><br><span class="line">	&lt;div id=&quot;inner&quot;&gt;inner&lt;/div&gt;</span><br><span class="line">	&lt;div id=&quot;inner2&quot;&gt;inner2&lt;/div&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2017/08/08/javascript再学习之DOM/20170809.PNG" alt="20170809"></p>
<p>示例代码：(当前元素为documet.getElementById(“p1”))</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box-one&quot;&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; id=&quot;p1&quot;&gt;</span><br><span class="line">    </span><br><span class="line">          &lt;span&gt;1&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;2&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;2&lt;/p&gt; </span><br><span class="line">    &lt;p class=&quot;con2&quot; &gt;3&lt;/p&gt; </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var p1 = document.getElementById(&quot;p1&quot;);</span><br><span class="line">//注：不能这里只是解释说明</span><br><span class="line">p1.innerHTML ==&quot;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&quot;;</span><br><span class="line">p1.innerText  == &quot; 1  </span><br><span class="line">                   2&quot;;//IE8非规范，但其他浏览器也有这个</span><br><span class="line">p1.textContent == &quot; </span><br><span class="line">                    1  </span><br><span class="line">                    2</span><br><span class="line">                    &quot;;</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="http://www.jb51.net/article/27604.htm" target="_blank" rel="noopener">初学js插入节点appendChild insertBefore使用方法</a></p>
<p><a href="http://www.cnblogs.com/fsjohnhuang/p/4319635.html" target="_blank" rel="noopener">被玩坏的innerHTML、innerText、textContent和value属性</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java线上代码监控-工具-Javamelody]]></title>
      <url>https://muxiaobai.github.io/2017/08/02/java%E7%BA%BF%E4%B8%8A%E4%BB%A3%E7%A0%81%E7%9B%91%E6%8E%A7-%E5%B7%A5%E5%85%B7-Javamelody/</url>
      <content type="html"><![CDATA[<h2 id="只为监控而生"><a href="#只为监控而生" class="headerlink" title="只为监控而生"></a>只为监控而生</h2><p>它并不是一个模拟请求类似JMeter的压力测试工具，而是一个衡量并且计算在应用上的操作信息的工具，<br>也就是说，<code>它只负责对行为进行监控，而不负责触发操作</code>。</p>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Java version required for execution: 1.6 or later (JDK or JRE or JRockit from Oracle or J9 from IBM)<br>Server version required for execution: servlet api 2.4 at least (or JavaEE 1.4), like Tomcat 5.5 or +, GlassFish v2+, JBoss 4+, Jetty 6+, WebLogic 9+<br>Required dependency: jrobin 1.5.9+</p>
<p>##两种方式 ：项目监控所有的其他正在运行的  和jar直接放在项目中配置</p>
<p>javamelody.war   javamelody.jar 和 jrobin-1.5.9.jar</p>
<p>如果是servlet 3.0好像不用web.xml配置 但是应用服务器版本tomcat8+  javamelody.jar 和 jrobin-1.5.9.jar<br>但是你的servletAPI是3.0的，应用服务器tomcat7 glassfish v3 jboss6等等，那么就需要配置xml了。<br>在应用war包的web.xml中添加如下的filter<br><a href="https://github.com/javamelody/javamelody/wiki/UserGuide" target="_blank" rel="noopener">javamelody用户指南</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;monitoring&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;net.bull.javamelody.MonitoringFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;monitoring&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;net.bull.javamelody.SessionListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>
<p>现在就可以启动应用服务器打开网址查看监控效果了。网址：<code>http://&lt;host&gt;/&lt;context&gt;/monitoring</code></p>
<p><host>是web应用服务器的部署IP，通常是localhost:8080 或者127.0.0.1:8080具体看你自己的应用服务器</host></p>
<p><context>是你的web应用的名字。</context></p>
<p><img src="/2017/08/02/java线上代码监控-工具-Javamelody/20170802.PNG" alt="效果"></p>
<p><a href="https://github.com/javamelody/javamelody" target="_blank" rel="noopener">javamylody github </a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hadoop-Sqoop-Hive等的安装]]></title>
      <url>https://muxiaobai.github.io/2017/07/20/hadoop-Sqoop-Hive%E7%AD%89%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>先介绍工具，然后进行安装</p>
<h4 id="hadoop-大象"><a href="#hadoop-大象" class="headerlink" title="hadoop 大象"></a>hadoop 大象</h4><p>HDFS 文件系统 存储<br>MapReduce     计算<br>YARN 资源分配、管理工具MapReducev2<br>HBase</p>
<p><a href="https://muxiaobai.github.io/2017/07/19/Linux-%E4%B8%8B%E7%9A%84java%E5%AE%89%E8%A3%85%E3%80%81%E5%8F%98%E6%9B%B4%E4%BB%A5%E5%8F%8A%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98/">hadoop的安装</a></p>
<h4 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h4><p>一个Apache的命令行工具 ，作用是：Transformation</p>
<p>hadoop(HBase,Hive) 和结构化数据(structural data)的转换<br>1.4.6 和1.99.3 建议1.4.6更稳定，使用的广泛，常见问题大都有解决。<br><a href="http://houshangxiao.iteye.com/blog/2070057" target="_blank" rel="noopener">Sqoop 1.99.3 安装</a></p>
<h4 id="Hive-小蜜蜂-和-Pig-猪"><a href="#Hive-小蜜蜂-和-Pig-猪" class="headerlink" title="Hive 小蜜蜂 和 Pig 猪"></a>Hive 小蜜蜂 和 Pig 猪</h4><p>数据仓库<br>MR写起来比较繁琐，产生Hive，而且Hive比较易懂，方便。<br>一种通过SQL来操作分布式存储数据的数据仓库工具。交换式查询<br>FaceBook开发的<br>文件类型: ‘,’ ‘tab’ 本本文件  ORC  Parquet<br>访问方式: CLI JDBC/ODBC WEB UI  Derby 内存数据库 单用户连接<br>Impala 是实时的</p>
<p>Hive 默认是 MapReduce 引擎<br>Hive on Spark</p>
<h4 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h4><p>Spark MapReduce Storm 是三种不同的计算处理<br>MapReduce 是大的批量操作，不要求时限。基于文件系统，hdfs。<br>Spark 是快速的批量操作，基于内存，所以速度快。其主要亮点在于把过程给数据。<br>Storm是流式处理，快速实时。<br>Spark Streaming 跟Storm类似，只不过Spark Streaming是小时间窗口的处理，Storm是实时的来一条处理一条。<br><a href="http://blog.csdn.net/wangfei8348/article/details/52924723" target="_blank" rel="noopener">三者比较</a><br>Spark SQL</p>
<h4 id="Zookeeper-分布式协调服务"><a href="#Zookeeper-分布式协调服务" class="headerlink" title="Zookeeper 分布式协调服务"></a>Zookeeper 分布式协调服务</h4><p>在此基础上 加上netty alibaba开发出了Dubbo服务治理。</p>
]]></content>
      
        <categories>
            
            <category> hadoop </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 下的java安装、变更以及升级问题]]></title>
      <url>https://muxiaobai.github.io/2017/07/19/Linux-%E4%B8%8B%E7%9A%84java%E5%AE%89%E8%A3%85%E3%80%81%E5%8F%98%E6%9B%B4%E4%BB%A5%E5%8F%8A%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改/etc/profile文件 </span><br><span class="line">如果你的计算机仅仅作为开发使用时推荐使用这种方法，因为所有用户的shell都有权使用这些环境变量，可能会给系统带来安全性问题。 </span><br><span class="line">·用文本编辑器打开/etc/profile </span><br><span class="line">·在profile文件末尾加入： </span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_144 </span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib </span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<blockquote>
<p>source /etc/profile</p>
</blockquote>
<p>原本是有openjdk的但是为了少踩点坑，准备换成HotSpot，于是就遇到了很多问题，总是更换失败。</p>
<p>环境变量/etc/profile  .bashrc .profile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#set oracle jdk environment</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_111  ## 这里要注意目录要换成自己解压的jdk 目录</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>
<h4 id="java-version-版本查看"><a href="#java-version-版本查看" class="headerlink" title="java -version 版本查看"></a>java -version 版本查看</h4><h4 id="which-java-查看是执行的哪一个"><a href="#which-java-查看是执行的哪一个" class="headerlink" title="which java 查看是执行的哪一个"></a>which java 查看是执行的哪一个</h4><p><code>which java</code>总是出现的就是一个/usr/bin/java 这里需要的是软链。</p>
<p>将下载下来的java版本安装<br>sudo update-alternatives –install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_111/bin/java 300<br>sudo update-alternatives –install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_111/bin/javac 300</p>
<p>sudo update-alternatives –display java 展示<br>sudo update-alternatives –config java 配置<br>sudo update-alternatives –config javac 配置<br>sudo update-java-alternatives -l<br>需要选中一个</p>
<hr>
<p>hadoop配置文件 ，以及安装步骤<br><a href="https://ask.hellobi.com/blog/niupoop/8832" target="_blank" rel="noopener">hadoop配置文件</a></p>
<p>window用cygwin64 总是失败，就转换到linux，一下子就启动成功了。<br><img src="/2017/07/19/Linux-下的java安装、变更以及升级问题/20170720125445.png" alt="jps"><br>CentOS 7.0默认使用的是firewall作为防火墙，这样对于传统的 <code>service iptables stop</code> 就没有用了,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class="line">firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br></pre></td></tr></table></figure>
<p> iptables -I INPUT 4 -p tcp -m state –state NEW -m tcp –dport 19200 -j ACCEPT</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> java </category>
            
            <category> hadoop </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[毕业设计心得]]></title>
      <url>https://muxiaobai.github.io/2017/06/29/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>自我刷新：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.1&quot;&gt;</code>更持久，更健壮<br>持续两个多月的毕业设计生活已经结束了，也经历了最黑暗的答辩，最后完整的通过了学业，还是比较欣慰的，下面说一些，我写毕业设计的一些收获。</p>
<p>想要跟随潮流，我自己也用了一下github作为我的代码仓库，感觉还不错。设计的系统主要分为两部分，前端和后端，分别采用spring-boot和vue来做的，中间采用jersey作为服务。（实际上，现实开发中生产中很少使用这种方式的，毕竟这只是一个尝试。因为jersey接口，服务之类的东西都是在系统对接上使用，首先这个场景就不太合适，但是为了熟悉新技术，尝试一下，也不为过）我的毕业设计全部代码提交在github上面，地址：<a href="https://github.com/muxiaobai/graduation-project" target="_blank" rel="noopener">graduation-project</a>。</p>
<h4 id="（1）代码管理"><a href="#（1）代码管理" class="headerlink" title="（1）代码管理"></a>（1）代码管理</h4><p>代码版本控制采用git，主要的代码一直托管在Github上，实际上系统大体上可以分为两个小模块，数据方面的接口，和页面方面的展示。所以此就直接利用Github代码托管平台，其中主分支为master分支，项目还包含两个分支spring-boot和vue分支，各自提交到各自的分支上，当一个功能完成后，直接合并到master分支上来。确保master分支永远是最新的，并且是可以部署运行的分支。</p>
<h4 id="（2）后端部分"><a href="#（2）后端部分" class="headerlink" title="（2）后端部分"></a>（2）后端部分</h4><p>整个数据接口采用spring-boot框架，spring技术，几乎是现在的Jave Web项目都会用到的框架，但是传统的spring需要配置大量的xml配置文件，值得庆幸的是：spring-boot的出现解决了这一问题。spring-boot项目甚至到服务器上直接就可以运行，只需要有java环境就OK了。真像spring-boot开发者所说：“just run”。而且spring-boot默认编码是utf-8。Spring-boot框架的使用可以让项目的构建变得更加的方便。Spring-boot提供大量的第三方库（libraries），这样可以让我们快速的创建一个spring工程，下面的数据库访问就是一个例子。这是使用spring-boot的优势。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(basePackages = &#123; &quot;dao&quot;,&quot;service&quot;,&quot;domain&quot;,&quot;config&quot;&#125;)//扫描组件</span><br><span class="line">@EnableJpaRepositories(&quot;dao&quot;) // JPA扫描该包路径下的Repositories</span><br><span class="line">@EntityScan(basePackages = &#123; &quot;java.lang.Object&quot;,&quot;domain&quot;&#125;) // 扫描实体类</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@SpringBootApplication//项目启动类</span><br><span class="line">@EnableConfigurationProperties(&#123;RedisProperties.class,DatabaseProperties.class&#125;) </span><br><span class="line">public class Application &#123;</span><br><span class="line">    //注册jersey</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean jerseyServlet() &#123;</span><br><span class="line">        ServletRegistrationBean registration = new ServletRegistrationBean(  new ServletContainer(),&quot;/rest/*&quot;);</span><br><span class="line">        registration.addInitParameter(ServletProperties.JAXRS_APPLICATION_CLASS, JerseyConfig.class.getName());</span><br><span class="line">        return registration;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这就是spring-boot的启动类，很简单，很原始。<code>gradle bootRun</code> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface UserDao  extends JpaRepository&lt;User, Long&gt;&#123;</span><br><span class="line">    public User getUserById(Long id);</span><br><span class="line">    public User findByUsername(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据库采用MySQL来做，保存数据使用spring-boot-starter-data-jpa这个库，这个是Spring-boot提供的library，和传统访问相比，新的结合模式直接继承spring-boot-starter-data-jpa中的JpaRepository即可实现数据的操作，这可以减少CRUD等操作代码的编写，不过对于传统的DAO，Service来说，这种都是一些换汤不换药的东西，很好转换。还有一点不同的是调用Service的方式。这里采用Jersey提供接口服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@POST</span><br><span class="line">   @Path(&quot;add&quot;)</span><br><span class="line">   @Consumes(&quot;application/json;charset=UTF-8&quot;)</span><br><span class="line">   @Produces(MediaType.APPLICATION_JSON)</span><br><span class="line">   public Map&lt;String, Object&gt; post(@RequestBody User user)&#123;</span><br><span class="line">       returnValue.clear();</span><br><span class="line">       userService.save(user);</span><br><span class="line">       returnValue.put(&quot;code&quot;, 200);</span><br><span class="line">       returnValue.put(&quot;msg&quot;, &quot;success&quot;);</span><br><span class="line">       returnValue.put(&quot;action&quot;, &quot;add &quot;);</span><br><span class="line">       returnValue.put(&quot;data&quot;, user);</span><br><span class="line">       return returnValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>采用Jersey来实现RESTful，提供数据的接口，Jersey采用了Annotation机制，上面的代码就是。所有的HTTP相关的参数设置和方法都采用标注实现。Jersey是一个平台，我们可以扩大自己的需要，如消息格式，虽然Jersey已经提供了java的基本数据类型，JSON，XML和其他类型，我们可以很容易地扩展他们的格式。测试的时候我们采用soapUI工具来检测接口的正确性。</p>
<h4 id="（3）前端部分"><a href="#（3）前端部分" class="headerlink" title="（3）前端部分"></a>（3）前端部分</h4><p>采取node+webpack+vue+vuex+vue-router+axios设计网站的前台和后台，其中node是基于V8实现的一个运行环境，打包工具和创建项目采用的是webpack，剩下的都是vue的周边生态系统，提供的框架，其中vuex是管状态，vue-router管路由跳转， axios解决跨域。另外前端还采用了饿了么的element-UI和Mint-UI这两个组件，这种组件可以更方便的实现页面。另外Chrome中已经有了vue-DevTools工具了，这是VUE组件的一个调试工具，非常好用。<br>我们平时大多用js去操作dom，最常用的还是jQuery这个js工具。这里使用vue也是一种新的尝试，vue.js则是使用了数据绑定驱动来操作dom的，也就是说创建了view和model之间的绑定后，当model数据层发生变化时，view的dom就会发生相应变化。mvvm即是model-view-viewmodel，model和view之间的衔接交互都是通过viewmodel来实现的。viewmodel就是创建一个vue实例，vue实例是作用于某一个dom元素上的。因此，从View层看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；从Model层看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;index&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; name=&quot;&quot; v-model=&quot;parMsg&quot;/&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;parMsg&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;index&apos;,</span><br><span class="line">  data: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      parMsg:&apos;&apos;//输入input的内容会随时更新到p元素内</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">//省略</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>VUE的周边生态系统异常丰富，包括vue-router的路由机制，用Vue.js +vue-router创建单页应用，是非常简单的。使用Vue.js，我们已经可以通过组合组件来组成应用程序，当你要把vue-router添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉vue-router在哪里渲染它们；Vuex 也集成到Vue的官方调试工具devtools extension，提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。</p>
<h4 id="（4）前后结合"><a href="#（4）前后结合" class="headerlink" title="（4）前后结合"></a>（4）前后结合</h4><p>利用git工具进行模块之间的组合，开发阶段采用ngrok访问，后台提供的服务通过ngrok反代理工具发布到外网来进行访问，通过 C9在线服务器访问的时候就可以了。部署阶段，在服务器上安装java后，采用java –jar运行开发的后台jar包，另一个前端界面采用nginx应用服务器部署。<br>实际上这里还有一个跨域的问题需要解决。因为后台服务在一个域名下，前台运行在另一个域名下，即使端口不通，也是这样，因此前台调用的时候相当于是在跨域，这个地方主要就是后台的跨域接收。这里通过一个过滤器把返回的头部添加如下四个头信息，如下图，其中“Access-Control-Allow-Origin”参数是可以接收的允许通过的域名，在实际的应用阶段，就会替换成正式的可接受的域名，这样就能够防止其他域名的攻击。“Access-Control-Allow-Methods”参数是可以接受的方法。这也是系统的安全性的一个考虑。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)  </span><br><span class="line">        throws IOException, ServletException &#123;  </span><br><span class="line">	HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">	System.out.println(request.getParameterMap());</span><br><span class="line">    HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">    request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">    response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);  </span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Methods&quot;, </span><br><span class="line">    		&quot;POST, GET, PUT, OPTIONS, DELETE&quot;);  </span><br><span class="line">    response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);  </span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Headers&quot;,</span><br><span class="line">    		&quot;Origin, X-Requested-With, Content-Type, Accept&quot;);  </span><br><span class="line">    chain.doFilter(request, response);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/2017/06/29/毕业设计心得/20170629.png" alt="前端请求效果"><br>前台在调用的时候，我们通过截图就可以看出，响应的头信息中已经包含了“response”添加的头信息。允许通过的域名、方法、支持的头信息和最大时间。下图只是一个简单的示范，从图中可以看出上面介绍的四个参数全在响应头中，实际上跨域资源共享CORS（Cross-origin resource sharing）问题看起来比较难，不过一旦理解了，自己动手做过一次之后，那就很简单了。  </p>
<p>以上就是关于毕业设计技术方面的总结，业务方面，如果自己有一个好的IDEA，特别是生活中遇到的问题，或者自己需要的东西，恰恰又没有人提供这种服务，你就可以尝试一下，说不定，就能做大了呢？</p>
<p>鸣谢：孟老（xian）师（fei），李老（kai）师（feng），叶老（xin）师（feng），王老（he）师（chao），系（wang）老师，学院老师，校老师（著名的思修，毛概，马哲）。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 定位布局]]></title>
      <url>https://muxiaobai.github.io/2016/12/27/CSS-%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h2 id="position-absolute-fixed-relative-static-inherit"><a href="#position-absolute-fixed-relative-static-inherit" class="headerlink" title="position:absolute fixed relative static inherit"></a>position:absolute fixed relative static inherit</h2><p>absolute和fixed脱离文档流，相对于有定位元素的父级定位,可以使用(left top right bottom z-index)<br>其中fixed的绝对是相对于可是窗口的，浏览器中的document。<br>relative 相对定位，尽量少用，相对于原来本身的位置定位，和下面说的float有的一拼，<br>static 默认状态下没有(left top right bottom z-index),无效。<br>inherit 继承有定位的父级元素<br><a href="https://jsfiddle.net/muxiaobai/bqx9rep5/" target="_blank" rel="noopener">jsfiddle测试实例</a><br>参考<a href="http://www.cnblogs.com/baimiaolei/p/5627755.html" target="_blank" rel="noopener">display与position之间的关系</a></p>
<h2 id="float-left-right"><a href="#float-left-right" class="headerlink" title="float:left/right"></a>float:left/right</h2><p>浮动是相对于本行，相当于 <code>{position:relative;left:0px;}</code>  相对左边为0px；可以使用{clear:both}来消除浮动，<br>浮动脱离文档流.不常用，一般我也不会用。破坏文档流。</p>
<h2 id="display-block-inline-inline-block-none-常用"><a href="#display-block-inline-inline-block-none-常用" class="headerlink" title="display:block inline inline-block none;常用"></a>display:block inline inline-block none;常用</h2><p> 通常使用 <code>{display:block;position:absolute;}</code> ，然后让{display:none}来隐藏。</p>
<h2 id="行内模型-四条线"><a href="#行内模型-四条线" class="headerlink" title="行内模型 四条线"></a>行内模型 四条线</h2><p><a href="http://www.tuicool.com/articles/JzuQZnI" target="_blank" rel="noopener">HTML/CSS盒子模型，块级元素和行内元素</a><br>行内元素没有width heigth padding margin 可以通过设置line-heigth来控制高度</p>
<p>块级盒子模型已经谈的不少了，这种通常是block类型的或者具有disploy:block属性的元素,什么padding border margin之类；</p>
<p>这次谈到的是行内模型。四条线<br>英语中的四线三格，不了解每线的规则，怎么写的一手漂亮的英文？</p>
<p>从上到下的线 :</p>
<p>top顶线<br>middle中线<br>baseline基线传说中根据张鑫旭的说法x-height，”x”的底。<br>bottom底线</p>
<p><img src="/2016/12/27/CSS-定位布局/04191646-bdab6a76666f4747a58b5e9b7c6be74c.png" alt="图解四线三格" title="图解"></p>
<blockquote>
<p>行高的定义:是两条基线的距离</p>
</blockquote>
<p>不过计算的时候可以使用字体＋行距来计算。<br>如果设定了行高后减去字体就得到行距（上一行的bottom到下一行的top之间的高度）那么一些行距也就随之展开了。<br>首先是行内框，如果没有padding等因素的影响，字体的高度就是行内框，然后就是行框，也是实际占据一行的高度，即一行内最大的行内距。</p>
<p><img src="/2016/12/27/CSS-定位布局/04191649-7fdab9f4cce5477a90e766ff47ba1291.png" alt="行距" title="一些行距"></p>
<p>注:以上两张图片是借用的，如有要求，可删除。<br><a href="https://jsfiddle.net/muxiaobai/8of4omak/" target="_blank" rel="noopener">jsfiddle inline-height test </a><br>参考<a href="http://www.cnblogs.com/dolphinX/p/3236686.html" target="_blank" rel="noopener">CSS行高——line-height</a><br><a href="http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/" target="_blank" rel="noopener">vertical-align-and-line-height</a></p>
<h2 id="最后上两张图片"><a href="#最后上两张图片" class="headerlink" title="最后上两张图片"></a>最后上两张图片</h2><p><img src="/2016/12/27/CSS-定位布局/69699506520645702.jpg" alt="position"><br><img src="/2016/12/27/CSS-定位布局/779058981978531304.jpg" alt="inline-height"></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 定位 </tag>
            
            <tag> 行高 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[等待,等待,等待...]]></title>
      <url>https://muxiaobai.github.io/2016/12/17/%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85-%E7%AD%89%E5%BE%85/</url>
      <content type="html"><![CDATA[<h4 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;ld&quot; style=&quot;position:absolute; opacity:0.5;left:-2px; top:-2px; width:100%; height:100%; background-color:#393939; z-index:1000;&quot;&gt; </span><br><span class="line">&lt;div id=&quot;loading&quot; style=&quot;width:1758px;height:700px;display:table-cell;vertical-align:middle;text-align:center;&quot;&gt;</span><br><span class="line"> &lt;img src=&quot;loading.gif&quot; style=&quot;vertical-align:middle;&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>以上是为了锁屏，可以放在body里面，显示的时候，此div会因为z-index:1000,所以加载之后，会出现此div的样式；为了美观起见，所以使用了opacity透明0.5再加上颜色效果就好看了许多。</p>
<p>width heigth 是需要100% 才能覆盖整个body的，</p>
<p>Position 是为了让div脱离文档流，方便在下一步中display:none;的时候不会影响到其他文档的位置。</p>
<p>最后需要说明一下，里面一个div的宽和高，是为了让图片可以在屏幕的中间，最好可以使用js动态的调整赋值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loading.style.width=$(window).width();</span><br><span class="line">loading.style.heigth=$(window).height();</span><br></pre></td></tr></table></figure>
<h4 id="waiting-waiting-waiting"><a href="#waiting-waiting-waiting" class="headerlink" title="waiting-waiting-waiting"></a>waiting-waiting-waiting</h4><p><img src="/2016/12/17/等待-等待-等待/loading.gif" alt="图片"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	  var count=0;</span><br><span class="line">setTimeout(</span><br><span class="line">function()&#123;</span><br><span class="line">alert(&quot;111111&quot;);</span><br><span class="line">showpage();</span><br><span class="line">ld.style.display=&quot;none&quot;;</span><br><span class="line">  f8=true;</span><br><span class="line">  &#125;,1000);</span><br><span class="line">function showpage()&#123;</span><br><span class="line">	count++;</span><br><span class="line">	console.log(count);</span><br><span class="line">	if(count%2==0)&#123;</span><br><span class="line">	ld.style.display=&quot;none&quot;; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>重要的一句是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ld.style.display=&quot;none&quot;;</span><br></pre></td></tr></table></figure>
<p>div部分的代码写在<head><meta name="generator" content="Hexo 3.8.0">之后,有些时候页面加载时间很短,就看不到等待的效果,可以把onload函数改成下面的,就可以看到效果了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">	div onload=&quot;winload();&quot;&gt;</span><br><span class="line">	&lt;script language=&quot;JavaScript&quot;&gt;</span><br><span class="line">	function winload()&#123;</span><br><span class="line">	setTimeout(</span><br><span class="line">	function()&#123;</span><br><span class="line">	alert(&quot;111111&quot;);</span><br><span class="line">	ld.style.display=&quot;none&quot;;</span><br><span class="line">	  f8=true;</span><br><span class="line">	  &#125;,1000);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></head></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 常用代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见排序算法总结]]></title>
      <url>https://muxiaobai.github.io/2016/09/29/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><blockquote>
<p>首先推荐一个网站 <a href="https://visualgo.net/" target="_blank" rel="noopener">Visualgo</a> <a href="https://zh.visualgo.net/" target="_blank" rel="noopener">中文版本</a>这个网站上，可以动态显示排序等算法，以及表、栈、队、树、图等数据结构。这里只学习排序算法。</p>
</blockquote>
<p><img src="/2016/09/29/常见排序算法总结/1342514529_5795.jpg" alt="八大排序"><br><img src="/2016/09/29/常见排序算法总结/20160925.gif" alt="八大排序"></p>
<p>当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。</p>
<p>快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</p>
<h4 id="插入排序-直接插入排序Insert-希尔排序Shell’s-二分插入排序binary"><a href="#插入排序-直接插入排序Insert-希尔排序Shell’s-二分插入排序binary" class="headerlink" title="插入排序(直接插入排序Insert   希尔排序Shell’s 二分插入排序binary)"></a>插入排序(直接插入排序Insert   希尔排序Shell’s 二分插入排序binary)</h4><p>straightInsert逻辑：把我赋给一个临时变量，在我前面的依次和我比较，如果比我大，赋值，继续找前一个，如果比我小这个位置就是我的。</p>
<p>希尔排序Shell:</p>
<p>binaryInsert:</p>
<p><a href="https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/InsertSort.java" target="_blank" rel="noopener">InsertSort</a></p>
<h4 id="选择排序-简单选择排序SimpleSelect-堆排序Heap"><a href="#选择排序-简单选择排序SimpleSelect-堆排序Heap" class="headerlink" title="选择排序 (简单选择排序SimpleSelect 堆排序Heap)"></a>选择排序 (简单选择排序SimpleSelect 堆排序Heap)</h4><p>SimpleSelect: 先找到最小的再和我做交换;</p>
<p>Heap:<br><a href="https://github.com/muxiaobai/CourseExercises/blob/master/java/ProjectTest/src/org/sun/sort/SelectSort.java" target="_blank" rel="noopener">SelectSort</a></p>
<h4 id="交换排序-冒泡Bubble-快速排序Quick"><a href="#交换排序-冒泡Bubble-快速排序Quick" class="headerlink" title="交换排序(冒泡Bubble 快速排序Quick)"></a>交换排序(冒泡Bubble 快速排序Quick)</h4><p>Bubble: 只要小的数字就和当前的交换，小的数字往上走，</p>
<p>Quick:</p>
<h4 id="归并排序-Merge"><a href="#归并排序-Merge" class="headerlink" title="归并排序(Merge)"></a>归并排序(Merge)</h4><h4 id="基数-桶排序-RadixSort-bucketSort"><a href="#基数-桶排序-RadixSort-bucketSort" class="headerlink" title="基数/桶排序(RadixSort)(bucketSort)"></a>基数/桶排序(RadixSort)(bucketSort)</h4><p>基数: 个位 十位 百位 每循环一次都更新数据，拆分每位来排序</p>
<p>桶：先定义小到最大的桶，记录每个桶的次数和相应的位置。根据桶信息依次取出。</p>
<h4 id="计数排序-Count"><a href="#计数排序-Count" class="headerlink" title="计数排序(Count)"></a>计数排序(Count)</h4><p><a href="http://blog.csdn.net/hguisu/article/details/7776068" target="_blank" rel="noopener">八大排序算法</a><br><a href="http://www.cnblogs.com/liuling/p/2013-7-24-01.html" target="_blank" rel="noopener">各种排序算法的分析及java实现</a><br><a href="http://www.cnblogs.com/Braveliu/archive/2013/01/15/2861201.html" target="_blank" rel="noopener">常用排序算法稳定性分析</a><br><a href="https://www.2cto.com/kf/201405/297908.html" target="_blank" rel="noopener">基于非比较的排序：计数排序（countSort），桶排序（bucketSort），基数排序（radixSort）</a><br><a href="http://blog.csdn.net/whuslei/article/details/6442755" target="_blank" rel="noopener">常见排序算法小结</a></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinkin in java 基础之网络Socket]]></title>
      <url>https://muxiaobai.github.io/2016/09/24/Thinking-in-java-%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BD%91%E7%BB%9CSocket/</url>
      <content type="html"><![CDATA[<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>Server:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package Socket;</span><br><span class="line">import java.net.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public  class TCPServer &#123;</span><br><span class="line">	public static void main(String[] args) throws Exception&#123;</span><br><span class="line">		ServerSocket ss=new ServerSocket(6666);</span><br><span class="line">			while (true) &#123;</span><br><span class="line">				Socket s=ss.accept();</span><br><span class="line">				System.out.println(&quot;hello word!&quot;);</span><br><span class="line">				DataInputStream  Dim=new DataInputStream(s.getInputStream());</span><br><span class="line">				System.out.println(Dim.readUTF());</span><br><span class="line">				s.close();</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TCPClient</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package Socket;</span><br><span class="line"></span><br><span class="line">import java.io.DataOutputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class TCPClient &#123;</span><br><span class="line">	public TCPClient() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	public static void main(String[] args) throws Exception&#123;</span><br><span class="line">		Socket s =new Socket(&quot;127.0.0.1&quot;,6666);</span><br><span class="line">		OutputStream os=s.getOutputStream();</span><br><span class="line">		DataOutputStream dos=new DataOutputStream(os);</span><br><span class="line">		dos.writeUTF(&quot;Hello Server!&quot;);</span><br><span class="line">		dos.flush();</span><br><span class="line">		dos.close();</span><br><span class="line">		s.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>UDPServer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package Socket;</span><br><span class="line">import java.net.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public  class UDPServer &#123;</span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		byte[] buf=new byte[1024];</span><br><span class="line">		DatagramPacket dp=new DatagramPacket(buf,buf.length);</span><br><span class="line">		DatagramSocket ds=new DatagramSocket(6666);</span><br><span class="line">		while (true) &#123;</span><br><span class="line">			ds.receive(dp);</span><br><span class="line">			System.out.println(&quot;IP:&quot;+ds.getInetAddress());</span><br><span class="line">			System.out.println(&quot;Port:&quot;+ds.getPort());</span><br><span class="line">		//System.out.println(new String(buf,0,dp.getLength()));</span><br><span class="line">			ByteArrayInputStream bais=new ByteArrayInputStream(buf);</span><br><span class="line">			DataInputStream dis=new DataInputStream(bais);</span><br><span class="line">			System.out.println(dis.readLong());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UDPClient</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package Socket;</span><br><span class="line">import java.net.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public  class UDPClient &#123;</span><br><span class="line">	public static void main(String[] args)throws Exception &#123;</span><br><span class="line">		long i=10000L;</span><br><span class="line">		ByteArrayOutputStream baos=new ByteArrayOutputStream();</span><br><span class="line">		DataOutputStream dos=new DataOutputStream(baos);</span><br><span class="line">		dos.writeLong(i);</span><br><span class="line">		//byte[] buf=(new String(&quot;hello&quot;)).getBytes();</span><br><span class="line">		byte[] buf=baos.toByteArray();</span><br><span class="line">		System.out.println(buf.length);</span><br><span class="line">		DatagramPacket dp=new DatagramPacket(buf,buf.length,new InetSocketAddress(&quot;127.0.0.1&quot;,6666));</span><br><span class="line">		DatagramSocket ds=new DatagramSocket(8888);</span><br><span class="line">		ds.send(dp);</span><br><span class="line">		ds.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[由ES6中的Proxy和Reflect再了解Object]]></title>
      <url>https://muxiaobai.github.io/2016/09/19/%E7%94%B1ES6%E4%B8%AD%E7%9A%84Proxy%E5%92%8CReflect%E5%86%8D%E4%BA%86%E8%A7%A3Object/</url>
      <content type="html"><![CDATA[<h2 id="看看Proxy和Reflect的作用"><a href="#看看Proxy和Reflect的作用" class="headerlink" title="看看Proxy和Reflect的作用"></a>看看Proxy和Reflect的作用</h2><p>  概念</p>
<p>  代理:对外暴露代理对象,操作的时候，表面上操作的是代理对象(proxy)，实际上改变的是目标对象 (target)，从而可以在操作代理对象的时候进行一些处理(handler)后，再传递到目标对象。 (全是个人理解) 没有官方论文引用。</p>
<p>  反射: 通过类的类类型来操作类的属性。在Javascript中这个作用可以通过Object中的方法来实现，不过为了保证各司其职，逐渐让Reflect做一些她该做的一些事情。而且Reflect有的方法，在Proxy中都有对应，如果在Proxy中调用Reflect的话，其实对应的就是默认行为。</p>
<h2 id="由作用到怎么用，这是一个实践过程呢。"><a href="#由作用到怎么用，这是一个实践过程呢。" class="headerlink" title="由作用到怎么用，这是一个实践过程呢。"></a>由作用到怎么用，这是一个实践过程呢。</h2><p>他们的方法可以使用一个5+2+2+2+1+1的模板来总结。</p>
<ul>
<li>get() set() has() deleteProperty() difineProperty()//与属性有关的方法</li>
<li>getOwnPropertyDescriptor() ownKeys()//Own的属性描述和属性keys</li>
<li>getPrototypeOf() setPrototypeOf()//与原型有关的方法</li>
<li>isExtensible()判断是否可以扩展 preventExtensions()阻止添加新属性</li>
<li>apply()//调用方法有关</li>
<li>construct()//和new 有关的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Reflect);</span><br></pre></td></tr></table></figure>
<p><img src="/2016/09/19/由ES6中的Proxy和Reflect再了解Object/201609201006.PNG" alt="Reflect中的方法"></p>
<p>5+2+2+2+1+1模板出现，下面来看具体的一个使用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var target=&#123;&#125;;</span><br><span class="line">var handler=&#123;</span><br><span class="line">    get:function(target,property)&#123;</span><br><span class="line">        console.log(&apos;handler get&apos;);</span><br><span class="line">        return target[property];</span><br><span class="line">    &#125;,</span><br><span class="line">    set(target,propkey,value)&#123;</span><br><span class="line">        console.log(&quot;handler set value:&quot;+value);</span><br><span class="line">        return Reflect.set(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var proxy=new Proxy(target,handler);</span><br><span class="line">proxy.a=&apos;a&apos;;</span><br><span class="line">console.log(&quot;target a:&quot;+target.a);//实际上不知道target，只知道proxy，所以所有的对target的操作都落在proxy上了。</span><br><span class="line">console.log(&quot;proxy a:&quot;+proxy.a);//通过proxy取得target上的值，广义上，通过操作proxy来操作target。</span><br></pre></td></tr></table></figure>
<p><img src="/2016/09/19/由ES6中的Proxy和Reflect再了解Object/201609201019.PNG" alt="Reflect中的方法"><br>在上面的例子中，通过两个方法来说明Proxy和Reflect，我们一个一个看，handler中的set方法，在我们对proxy.a进行赋值的时候，Proxy对象首先通过handler的set，然后输出”handler set value: a”,紧接着return了Reflect.set(),这里通过反射静态类方法，调用set，然后把proxy传过来的参数通过，各个参数对应起来，就相当于直接调用target[‘propkey’]=value。</p>
<blockquote>
<p>注:这里的Reflect调用就是实现其默认行为。</p>
</blockquote>
<p>到这里实际上我是想直接在研究一下Object上到底还有什么东西？为了衔接，接着分析。</p>
<p>在下一行，输出target的时候，在这里说明一下，因为是做实验，所以我们想通过调用target和调用proxy做一个对比，从而找出Proxy对象的不同，在实际情况中，应该是不知道target的，只知道proxy对象。</p>
<p>target的时候，我们看到控制台只输出了”target a:a”,但是proxy的时候，先输出了”handler get”然后才输出””proxy a:a”,就是说调用proxy，实际上是返回就是target的，但是其中proxy做了一些处理。</p>
<p>其他的一些13种方法就不再阐述了，和这两个是一模一样的。</p>
<blockquote>
<p>注:这其实就是代理模式的实现。</p>
</blockquote>
<h2 id="回头再看Object"><a href="#回头再看Object" class="headerlink" title="回头再看Object"></a>回头再看Object</h2><p>先看一段代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var Person=function(name,age)&#123;</span><br><span class="line">    this[&apos;Person function&apos;]=&apos;Person function&apos;;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.age=age;</span><br><span class="line">    this.getAge=function()&#123;return this.age;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype=&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;</span><br><span class="line">var myPerson=new Person(&apos;zhang&apos;,20);</span><br><span class="line">Object.preventExtensions(myPerson);</span><br><span class="line">//Object.freeze(myPerson);</span><br><span class="line"></span><br><span class="line">myPerson.a=&apos;as&apos;;</span><br><span class="line">console.log(myPerson);</span><br><span class="line">console.log(myPerson.a);//undifined因为myPerson被freeze了，其中freeze是冻结，preventExtensions是组织扩展，阻止添加新属性</span><br><span class="line">console.log(myPerson.__proto__);</span><br><span class="line">console.log(Object.getPrototypeOf(myPerson));</span><br><span class="line">console.log(Person.prototype);//</span><br><span class="line"></span><br><span class="line">console.log(myPerson.constructor==Person);//true</span><br><span class="line">console.log(Person.prototype.constructor);</span><br></pre></td></tr></table></figure>
<p><img src="/2016/09/19/由ES6中的Proxy和Reflect再了解Object/201609201219.PNG" alt="Reflect中的方法"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;//这是一个神奇的东西</span><br></pre></td></tr></table></figure>
<p>myPerson.<strong>proto</strong>===Object.getPrototypeOf（myPerson）==Person.prototype</p>
<p>实例的<strong>proto</strong>是这个神奇的东西，她的另一种取法是通过Object.getPrototypeOf(实例)，对应构造函数的prototype也是这个神奇的东西，而这个东西的constructor就是前面的函数。那我们再试一次函数的prototype是什么?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Person.prototype.constructor.prototype);</span><br></pre></td></tr></table></figure></p>
<p>结果显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;constructor:Person,&apos;Person.prototype&apos;:&apos;Person.prototype&apos;&#125;;还是这个神奇的东西</span><br></pre></td></tr></table></figure></p>
<p>挺神奇的，是吧?</p>
<h2 id="Object原型分析"><a href="#Object原型分析" class="headerlink" title="Object原型分析"></a>Object原型分析</h2><p>借用一幅图来说明</p>
<p><img src="/2016/09/19/由ES6中的Proxy和Reflect再了解Object/20160920.png" alt="原型关系"><br>图片来源；<a href="https://zhuanlan.zhihu.com/p/22189387" target="_blank" rel="noopener">Javascript的原型链图（原创 知乎首发）</a><br>非常推荐用户去读一读这篇文章。到此结束！</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Object </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从ES6中学习编码]]></title>
      <url>https://muxiaobai.github.io/2016/09/16/%E4%BB%8EES6%E4%B8%AD%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="javascript中的表示方法"><a href="#javascript中的表示方法" class="headerlink" title="javascript中的表示方法"></a>javascript中的表示方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//二进制：0111 1010 （01 111 010 ）  八进制 172   十六进制： 7A   十进制：7*16+A*1=122</span><br><span class="line">//对应ASCII编码是122 如果是ASCII中的字符，UTF-8中是一致的，0-127对应0000 0000 -0xxx xxxx</span><br><span class="line">//而其他的需要两个字节的，高位补0  因此为 0000 0000 0111 1010  ==&gt; 007A</span><br><span class="line">    console.log(&apos;z&apos;); 本意</span><br><span class="line">    console.log(&apos;\z&apos;);//转义字符，因为z不用转义，所以还是z</span><br><span class="line">    console.log(&apos;\172&apos;);//ASCII 八进制  </span><br><span class="line">    console.log(&apos;\x7A&apos;);//ASCII 十六进制</span><br><span class="line">    console.log(&apos;\u007A&apos;);//Unicode 0000-FFFF之间的字符</span><br><span class="line">    console.log(&apos;\u&#123;7A&#125;&apos;);//Unicode 大括号表示法与四字节的UTF-16编码是等价的。</span><br><span class="line">B（Binary)表示二进制，O（Octal）表示八进制，D（Decimal）或不加表示十进制，H（Hexadecimal）表示十六进制。</span><br></pre></td></tr></table></figure>
<p>转义字符对应有一个参考</p>
<table>
<thead>
<tr>
<th>Escape Sequence</th>
<th style="text-align:center">Code Unit Value</th>
<th style="text-align:center">Unicode Character Name</th>
<th style="text-align:right">Symbol</th>
</tr>
</thead>
<tbody>
<tr>
<td>\b</td>
<td style="text-align:center">0x0008</td>
<td style="text-align:center">BACKSPACE</td>
<td style="text-align:right">&lt;BS&gt;</td>
</tr>
<tr>
<td>\t</td>
<td style="text-align:center">0x0009</td>
<td style="text-align:center">CHARACTER TABULATION</td>
<td style="text-align:right">&lt;HT&gt;</td>
</tr>
<tr>
<td>\n</td>
<td style="text-align:center">0x000A</td>
<td style="text-align:center">LINE FEED (LF)</td>
<td style="text-align:right">&lt;LF&gt;</td>
</tr>
<tr>
<td>\v</td>
<td style="text-align:center">0x000B</td>
<td style="text-align:center">LINE TABULATION</td>
<td style="text-align:right">&lt;VT&gt;</td>
</tr>
<tr>
<td>\f</td>
<td style="text-align:center">0x000C</td>
<td style="text-align:center">FORM FEED (FF)</td>
<td style="text-align:right">&lt;FF&gt;</td>
</tr>
<tr>
<td>\r</td>
<td style="text-align:center">0x000D</td>
<td style="text-align:center">CARRIAGE RETURN (CR)</td>
<td style="text-align:right">&lt;CR&gt;</td>
</tr>
<tr>
<td>\”</td>
<td style="text-align:center">0x0022</td>
<td style="text-align:center">QUOTATION MARK</td>
<td style="text-align:right">“</td>
</tr>
<tr>
<td>\’</td>
<td style="text-align:center">0x0027</td>
<td style="text-align:center">APOSTROPHE</td>
<td style="text-align:right">‘</td>
</tr>
<tr>
<td>\</td>
<td style="text-align:center">0x005C</td>
<td style="text-align:center">REVERSE SOLIDUS</td>
<td style="text-align:right">\</td>
</tr>
</tbody>
</table>
<blockquote>
<p>如果转义字符不在此中，直接转义为本身</p>
</blockquote>
<p>代码中6-7行是一个意思的两种表达形式 都是ASCII码6是八进制，7是16进制，8=9行代码对应Unicode码，因为\uxxxx只能表示0000-FFFF之间的字符，所以javascript中又引入了{},来展示字符。</p>
<p><a href="http://www.ecma-international.org/ecma-262/6.0/index.html#table-34" target="_blank" rel="noopener">ECMAscript中具有转义含义的字符</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;\uD842\uDFB7&apos;);</span><br><span class="line">console.log(&apos;\u&#123;20BB7&#125;&apos;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是，这种表示法只限于\u0000——\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达。</p>
</blockquote>
<p>一般常见中文字符都在这个区间内。特殊的，我们到Unicode这一部分再解释。</p>
<p>结果在控制台上显示出“𠮷”，这是个什么字？不知道。</p>
<h2 id="ASCII到底是个什么鬼？"><a href="#ASCII到底是个什么鬼？" class="headerlink" title="ASCII到底是个什么鬼？"></a>ASCII到底是个什么鬼？</h2><p>美国内部的统一就是ASCII码 ASCII 0-127（0000 0000 -0FFF FFFF之间）ASC码</p>
<p>键盘上的打印字符、以及换行、退格等都在这个区间内，但是这只是一个美国标准。</p>
<p>当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。不过呢，随着时间的推移，欧洲等其他国家也能用得起电脑了，但是，又不能表示自己的符号，因此这个标准也可以需要被扩展了。</p>
<blockquote>
<p>一个字符一个字节</p>
</blockquote>
<p>他们决定采用 127号之后的空位来表示这些新的字母、符号，还加入表格符号、计算符号、希腊字母和特殊的拉丁符号。一直把序号编到了最后一个状态255。从128 到255这一页的字符集被称”扩展字符集”。可以说ASCII扩展集主要解决的是欧洲拉丁等字符的展示。</p>
<blockquote>
<p>小秘密:按住ALT+要查询的码值（注意，这里是十进制），松开即可显示出对应字符。例如：按住ALT+97,则会显示出’a’。</p>
</blockquote>
<p><img src="/2016/09/16/从ES6中学习编码/2011050311372042.png" alt="ASCII"><br><img src="/2016/09/16/从ES6中学习编码/201105031137219627.png" alt="ASCII扩展集"></p>
<h2 id="GB2312和GBK又有什么关系？"><a href="#GB2312和GBK又有什么关系？" class="headerlink" title="GB2312和GBK又有什么关系？"></a>GB2312和GBK又有什么关系？</h2><p>但是随着时间的推移，电脑也慢慢走进中国，可是电脑上不能显示汉字，这对于中国来说，是一个大问题。因此中国制定了GB2312字符集。</p>
<p>我国专家把那些127号之后的奇异符号（即ASCII扩展集）取消掉，规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p>
<blockquote>
<p>一个汉字两个字节的历史就是在这里产生的。（一个字符两个字节，连同ASCII中的字符也被编码成两个字节）</p>
</blockquote>
<p>可是中国语言博大精深，那时这区区7000多个汉字就能展现的？于是就制定了新的字符集GBK，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。这样就大大展示出来中国语言的魅力。</p>
<p>后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了 GB18030。</p>
<p>顺便提一下，因为台湾也使用汉字，不过他们使用的是自己的一套字符集编码规则（BIG5），因此同属一个汉字，可能就出现两种不同的编码序列。<br>这时候不仅仅是中国乱成一团，世界上大多数国家都看到电脑真是个好东西，都想用，咋办，各搞各的字符集，各自制定自己的编码规范，于是出现了”百花齐放百家争鸣”的状况。</p>
<h2 id="Unicode是怎么冒出了的？"><a href="#Unicode是怎么冒出了的？" class="headerlink" title="Unicode是怎么冒出了的？"></a>Unicode是怎么冒出了的？</h2><p>正在这时，大天使加百列及时出现了一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。</p>
<p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准,包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>
<p>unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了。</p>
<h2 id="为什么现在都在使用UTF-8？"><a href="#为什么现在都在使用UTF-8？" class="headerlink" title="为什么现在都在使用UTF-8？"></a>为什么现在都在使用UTF-8？</h2><p>当初还有UTF-32，这是一种使用4字节的数字来表达每个字母、符号，或者表意文字(ideograph)，每个数字代表唯一的至少在某种语言中使用的符号的编码方案，UTF-32又称UCS-4是一种将Unicode字符编码的协定，对每个字符都使用4字节。就空间而言，是非常没有效率的。这对于存储空间来说是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。</p>
<p>不过人们逐渐意识到，我们一般不会使用如此多的字符，于是就采用了一个折中的办法，使用UTF-16。不过目前推广最好的当之无愧是UTF-8.</p>
<p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码（定长码），也是一种前缀码。它可以用来表示Unicode标准中的任何字符，<br>s<br>实际上UTF-8 与Unicode之间的转换是有一定规律的，</p>
<table>
<thead>
<tr>
<th>Unicode编码(十六进制)</th>
<th style="text-align:left">　UTF-8 字节流(二进制)</th>
</tr>
</thead>
<tbody>
<tr>
<td>00000000 - 0000007F</td>
<td style="text-align:left">0xxxxxxx</td>
</tr>
<tr>
<td>00000080 - 000007FF</td>
<td style="text-align:left">110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>00000800 - 0000FFFF</td>
<td style="text-align:left">1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>00010000 - 001FFFFF</td>
<td style="text-align:left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>00200000 - 03FFFFFF</td>
<td style="text-align:left">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>04000000 - 7FFFFFFF</td>
<td style="text-align:left">1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>
<blockquote>
<p>UTF-8的特点是对不同范围的字符使用不同长度的编码。</p>
</blockquote>
<p>UTF-8使用一至四个字节为每个字符编码：</p>
<ul>
<li>128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。</li>
<li>带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码（Unicode范围由U+0080至U+07FF）。</li>
<li>其他基本多文种平面（BMP）中的字符（这包含了大部分常用字）使用三个字节编码。中文范围 4E00-9FBF：</li>
<li>其他极少使用的Unicode辅助平面的字符使用四字节编码。</li>
</ul>
<blockquote>
<p>一个汉字三个字符</p>
</blockquote>
<p>实际上UTF-8是ASCII的一个超集。因为一个纯ASCII字符串也是一个合法的UTF-8字符串，所以现存的ASCII文本不需要转换。为传统的扩展ASCII字符集设计的软件通常可以不经修改或很少修改就能与UTF-8一起使用。</p>
<blockquote>
<p>UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。</p>
</blockquote>
<blockquote>
<p>UTF-8,UTF-16,UTF-32编码方式都是UNICODE，但只是他们的保存方式不同。</p>
</blockquote>
<p>下一步，依据上表举几个例子：</p>
<p>“汉”<br>Unicode编码是0x6C49。(0110 1100 0100 1001) 0x6C49在0x0800-0xFFFF之间，<br>使用用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。<br>用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。</p>
<p>“张”<br>Unicode编码：0x5F20 （0101 1111 0010 0000）0x5F20在0x0800-0xFFFF之间<br>依据上表，UTF-8需要三个字节 即“1110xxxx 10xxxxxx 10xxxxxx”。<br>用Unicode码填补模板得到： 11100101 10111100 10100000 十六进制即 E5 BC A0 </p>
<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。<br>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>
<p>需要判断文本开头的标志,下面是所有编码对应的开头标志</p>
<table>
<thead>
<tr>
<th>文件头</th>
<th style="text-align:left">编码</th>
<th>大小头</th>
</tr>
</thead>
<tbody>
<tr>
<td>EF BB BF　　　</td>
<td style="text-align:left">UTF-8</td>
<td>没有区别</td>
</tr>
<tr>
<td>FF FE　　　　　</td>
<td style="text-align:left">UTF-16/UCS-2,</td>
<td>little endian</td>
</tr>
<tr>
<td>FE FF　　　　　</td>
<td style="text-align:left">UTF-16/UCS-2,</td>
<td>big endian</td>
</tr>
<tr>
<td>FF FE 00 00　　</td>
<td style="text-align:left">UTF-32/UCS-4,</td>
<td>little endian.</td>
</tr>
<tr>
<td>00 00 FE FF　　</td>
<td style="text-align:left">UTF-32/UCS-4,</td>
<td>big-endian</td>
</tr>
</tbody>
</table>
<p>详见<a href="http://www.unicode.org/faq/utf_bom.html" target="_blank" rel="noopener">Q: When a BOM is used, is it only in 16-bit Unicode text?</a></p>
<blockquote>
<p>第一个字节在前，就是小头方式，第二个字节在前就是大头方式。</p>
</blockquote>
<ul>
<li>Unicode：编码是四个字节”FF FE 6C 49”，其中”FF FE”表明是小头方式存储，真正的编码是6C49。</li>
<li>Unicode big endian：编码是四个字节”FE FF 49 6C “，其中”FE FF”表明是大头方式存储。真正的编码是 6C49。</li>
<li>UTF-8：编码是六个字节”EF BB BF E6 B1 89”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E6B189”就是”汉”的具体编码，它的存储顺序与编码顺序是一致的。</li>
</ul>
<p><a href="https://www.zhihu.com/question/20152853/answer/95576659" target="_blank" rel="noopener">对于字符编码，程序员的话应该了解它的哪些方面？</a>,这位仁兄很有见解。值得一看。</p>
<h2 id="URL请求编码响应分析"><a href="#URL请求编码响应分析" class="headerlink" title="URL请求编码响应分析"></a>URL请求编码响应分析</h2><p>到此，我们再来分析一下请求一个URL怎么就能显示我们对应的字符呢？</p>
<p>随便打开一个网页,F12,打开开发者工具，在请求头信息里面我们会发现如下两行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Accept-Encoding:gzip, deflate, sdch</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure>
<p>我们发送请求的时候已经给服务器说我是中国，说汉语的，而且还支持gzip压缩，于是服务器回应我们，好的,然后就在响应头包含如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Encoding:gzip</span><br><span class="line">Content-Type:text/html;charset=utf-8</span><br></pre></td></tr></table></figure></p>
<p>charset=utf-8，嗯好的，然后浏览器就按照UTF-8编码解析汉语。最后，正常，还好没有乱码。真好！</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.zhihu.com/question/23374078" target="_blank" rel="noopener">Unicode 和 UTF-8 有何区别？</a><br><a href="https://www.zhihu.com/question/20152853/answer/95576659" target="_blank" rel="noopener">对于字符编码，程序员的话应该了解它的哪些方面？</a><br><a href="http://baike.baidu.com/link?url=ZCZSJNDfFE33N8JU7MqxedQ9HtV1KwGREMeRQAcrBW3HOvgCBxrUOBPecnHatVei9-7G7LrmM3jUouhy8bJKEa" target="_blank" rel="noopener">Unicode</a><br><a href="https://likebeta.gitbooks.io/es6tutorial/content/docs/string.html" target="_blank" rel="noopener">字符串的扩展</a><br><a href="http://blog.csdn.net/mylinx/article/details/6874414" target="_blank" rel="noopener"> Unicode，UTF-8,UTF-16,UTF-32</a><br><a href="http://www.cnblogs.com/kingcat/archive/2012/10/16/2726334.html" target="_blank" rel="noopener">Unicode(UTF-8, UTF-16)令人混淆的概念</a><br><a href="http://www.cnblogs.com/chenssy/p/4205130.html" target="_blank" rel="noopener">java中文乱码解决之道（三）</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模仿jQuery创建自己的js工具]]></title>
      <url>https://muxiaobai.github.io/2016/09/13/%E6%A8%A1%E4%BB%BFjQuery%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84js%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h1 id="jQuery分析实践"><a href="#jQuery分析实践" class="headerlink" title="jQuery分析实践"></a>jQuery分析实践</h1><h4 id="匿名函数自执行"><a href="#匿名函数自执行" class="headerlink" title="匿名函数自执行"></a>匿名函数自执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123;&#125;)(window);</span><br></pre></td></tr></table></figure>
<p>首先所有的代码都包含在这个匿名函数中，并且自执行，这样保证代码不会污染其他的合作者，那么jQuery对象又是怎么被我们使用的呢？我们来看第二段代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery = window.$ = jQuery;</span><br></pre></td></tr></table></figure></p>
<p>一般情况下，jQuery直接在window下挂在jQuery和$命名空间，这样使用（jQuery/$）直接调用即可。但是许多框架下都会使用$来作为自己的命名空间，这样的话就会产生冲突，因此jQury添加了noConflict()方法，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var</span><br><span class="line">	_jQuery = window.jQuery,</span><br><span class="line">	_$ = window.$;</span><br><span class="line">jQuery.noConflict = function( deep ) &#123;</span><br><span class="line">	if ( window.$ === jQuery ) &#123;</span><br><span class="line">		window.$ = _$;</span><br><span class="line">	&#125;</span><br><span class="line">	if ( deep &amp;&amp; window.jQuery === jQuery ) &#123;</span><br><span class="line">		window.jQuery = _jQuery;</span><br><span class="line">	&#125;</span><br><span class="line">	return jQuery;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里首先，如果在window下有jQuery或者$的话，就把他们暂存到<em>jQuery/</em>$命名空间下，然后<br>调用noConflict()的作用是让出控制权，如果没有参数只让出$控制权,但是如果传入true，jQuery命名空间也让出了，同时方法返回自身的jQuery对象，我们可以用变量接受这个对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var zhang=jQuery.noConflict(true);</span><br><span class="line">zhang(&quot;#id&quot;);</span><br></pre></td></tr></table></figure></p>
<p>这个时候$和jQuery都没有jQuery对象了，反而zhang这个命名空间是jQuery对象。最后我们看看jQuery究竟是怎么产生的。见下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   jQuery = function( selector, context ) &#123;</span><br><span class="line">    return new jQuery.fn.init( selector, context );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>从上面的代码中可以看到当我们调用jQuery()的时候，返回的是一个init()后的对象，那么就需要看看init()，内部究竟干了些什么。不过我们也说会使用”$.isFunction()”这样的形式来使用jQury，首先看init();</p>
<h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><p>在看init的时候先，先看一下这句话，这里写的是jQuery的原型对象，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line"></span><br><span class="line">	jquery: version,</span><br><span class="line">	constructor: jQuery,</span><br><span class="line">	length: 0,</span><br><span class="line">	toArray: function() &#123;</span><br><span class="line">		return slice.call( this );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>主要是jQuery.fn=jQuery.prototype这一句之后，后面的init和extend都有了说法了，因为jQuery.fn.init和jQuery.fn.extend方法都是从这里来的。这样我们通过$()/jQuery(),调用方法的时候返回的new jQuery.fn.init()实例中就包含调用extend的添加的方法，这个后面还会说明。在此就先贴个图，就是jQuery的实例方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log($());</span><br></pre></td></tr></table></figure></p>
<p><img src="/2016/09/13/模仿jQuery创建自己的js工具/201609131126.PNG" alt="jQuery实例方法"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">init = jQuery.fn.init = function( selector, context, root ) &#123;</span><br><span class="line">		var match, elem;</span><br><span class="line">		// HANDLE: $(&quot;&quot;), $(null), $(undefined), $(false)</span><br><span class="line">		if ( !selector ) &#123;</span><br><span class="line">			return this;</span><br><span class="line">		&#125;</span><br><span class="line">		// Handle HTML strings 只使用了id选择器，其他的选择请参考源码，这里为了节省篇幅，省略。</span><br><span class="line">		 if (typeof selector === &quot;string&quot;)</span><br><span class="line">          this[0] = document.getElementById(selector);</span><br><span class="line">          return this;</span><br><span class="line">          &#125;</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure>
<p>init就干一件事获取元素，创建元素的jQuery对象，只是这里面有许多种情况，里面的一些就省略了，如果有兴趣，可以自己看一下源码。这里return的就是调用者即上面的new的对象。下面就来看看为什么jQuery下面是怎么添加这么多方法。</p>
<h4 id="extend方法"><a href="#extend方法" class="headerlink" title="extend方法"></a>extend方法</h4><p>首先来看一下extend方法，这个方法是扩展方法的根，后面的许多方法，都是通过这个extend添加到jQuery对象上的。延续上面的图说话，为什么jQuery实例上有这么多的方法？他们都是怎么添加到jQuery的实例上的呢？</p>
<p>这里jQuery.extend不就是方法上的扩展吗？先举一个简单的例子说明一下这个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var   fun=function()&#123;</span><br><span class="line">    console.log(&quot;这是一个方法&quot;);</span><br><span class="line">    return fun.prototype.init();</span><br><span class="line">&#125;</span><br><span class="line">//下面是挂在在fun上的属性和方法</span><br><span class="line">fun.VERSION=&quot;0.0.1&quot;;</span><br><span class="line">fun.name=&quot;zhang&quot;;</span><br><span class="line">fun.prototype.init=function()&#123;</span><br><span class="line">    console.log(&quot;init&quot;);</span><br><span class="line">    console.log(this);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">fun.prototype.name=&quot;prototype&quot;;</span><br><span class="line">fun.prototype.getName=function()&#123;</span><br><span class="line">    console.log(this);    </span><br><span class="line">    console.log(this.name);//因为这里的this是实例，而不是原型，因此挂载在原型上的</span><br><span class="line">    return this.name;</span><br><span class="line">&#125;</span><br><span class="line">fun.getVersion=function()&#123;</span><br><span class="line">    console.log(this.VERSION);</span><br><span class="line">    return this.VERSION;</span><br><span class="line">&#125;</span><br><span class="line">fun().getName();首先调用fun(),打印出“这是一个方法”，同时实例化一个init();在实例化init()的时候打印“init”，this就是init()的实例，然后就到了getName(),这里的getName()，输出“prototype”，是因为“zhang”是挂载在fun上。</span><br><span class="line">fun.getVersion();</span><br></pre></td></tr></table></figure>
<p><img src="/2016/09/13/模仿jQuery创建自己的js工具/201609131200.PNG" alt="jQuery实例方法"></p>
<p>fun.getVersion就是对应jQuery的直接调用方法。</p>
<p>到这里就能体会到jQuery的设计巧妙，她在调用jQuery的时候，实际调用jQuery.prototype.init,而init返回的由恰巧是一个jQuery对象，这样所有挂在在jQuery.prototype上的方法就可以使用了。下面调用的实例。</p>
<p>上面的例子说明简单的方法中是可以添加属性和方法（也是属性）的，这样直接[方法.属性]可以直接调用这就是jQuery的方法，类级别扩展，用Java中的说法就是静态方法（后面用静态方法代替这种情况），调用的时候就是jQuery.isFunction(“”);/$.isFunction(“”);返回false；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log($.isFunction(&quot;&quot;));</span><br></pre></td></tr></table></figure></p>
<p><img src="/2016/09/13/模仿jQuery创建自己的js工具/201609131136.PNG" alt="jQuery实例方法"></p>
<h5 id="下面来说extend的实现"><a href="#下面来说extend的实现" class="headerlink" title="下面来说extend的实现"></a>下面来说extend的实现</h5><p>这里原型和自身上都添加了extend方法，这样在之后的调用上都可以调用extend添加其他方法了。</p>
<p>在看下面这段代码的解释之前,建议请先看下一节[extend是怎么调用]，这样能更好的理解实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">// extend方法为jQuery对象和init对象的prototype扩展方法</span><br><span class="line">// 同时具有独立的扩展普通对象的功能</span><br><span class="line">jQuery.extend = jQuery.fn.extend = function() &#123;</span><br><span class="line">    //这几个参数的含义比较重要</span><br><span class="line">    //由返回值target可知，</span><br><span class="line">	var options, name, src, copy, copyIsArray, clone,</span><br><span class="line">		target = arguments[ 0 ] || &#123;&#125;,//第一个参数，如果没有返回&#123;&#125;</span><br><span class="line">		i = 1,</span><br><span class="line">		length = arguments.length,//参数长度</span><br><span class="line">		deep = false;//是否是深复制</span><br><span class="line">    //处理深复制</span><br><span class="line">    // target为第一个参数，如果第一个参数是Boolean类型的值，则把target赋值给deep</span><br><span class="line">　　// deep表示是否进行深层面的复制，当为true时，进行深度复制，否则只进行第一层扩展</span><br><span class="line">　　// 然后把第二个参数赋值给target</span><br><span class="line">	// Handle a deep copy situation</span><br><span class="line">	if ( typeof target === &quot;boolean&quot; ) &#123;</span><br><span class="line">		deep = target;</span><br><span class="line">        </span><br><span class="line">		// Skip the boolean and the target</span><br><span class="line">		target = arguments[ i ] || &#123;&#125;;//现在i=1，如果arguments[1]没有，返回&#123;&#125;</span><br><span class="line">		i++;//i=2// 将i赋值为2，跳过前两个参数</span><br><span class="line">	&#125;</span><br><span class="line">    // target既不是对象也不是函数则把target 设置为空对象。</span><br><span class="line">	// Handle case when target is a string or something (possible in deep copy)</span><br><span class="line">	if ( typeof target !== &quot;object&quot; &amp;&amp; !jQuery.isFunction( target ) ) &#123;</span><br><span class="line">		target = &#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">    // 如果只有一个参数，则把jQuery对象赋值给target，即扩展到jQuery对象上</span><br><span class="line">	// Extend jQuery itself if only one argument is passed</span><br><span class="line">	if ( i === length ) &#123;//length=2 i=2第一个参数是boolean或者i=1 length=1</span><br><span class="line">		target = this;//this值jQuery，因为调用者是jQuery.extend(&#123;&#125;),所以this是jQuery</span><br><span class="line">		i--;//i=1 </span><br><span class="line">	&#125;</span><br><span class="line">    // 开始遍历需要被扩展到target上的参数</span><br><span class="line">	for ( ; i &lt; length; i++ ) &#123;</span><br><span class="line">        // 处理第i个被扩展的对象，即除去deep和target之外的对象,如果是null直接下一个循环</span><br><span class="line">		// Only deal with non-null/undefined values</span><br><span class="line">		if ( ( options = arguments[ i ] ) != null ) &#123;</span><br><span class="line">　          // 遍历第i个对象的所有可遍历的属性for in循环</span><br><span class="line">			// Extend the base object</span><br><span class="line">			for ( name in options ) &#123;</span><br><span class="line">				src = target[ name ];// 根据被扩展对象的键获得目标对象相应值，并赋值给src，原值</span><br><span class="line">				copy = options[ name ];　// 得到被扩展对象的值</span><br><span class="line">                    </span><br><span class="line">				// Prevent never-ending loop</span><br><span class="line">				if ( target === copy ) &#123;</span><br><span class="line">					continue;</span><br><span class="line">				&#125;</span><br><span class="line">                // 当用户想要深度操作时，递归合并 deep=true copy不空 copy是纯对象或者是数组</span><br><span class="line">				// Recurse if we&apos;re merging plain objects or arrays</span><br><span class="line">				if ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject( copy ) ||</span><br><span class="line">					( copyIsArray = jQuery.isArray( copy ) ) ) ) &#123;</span><br><span class="line">                   //copyIsArray是数组jQuery.isArray(copy);</span><br><span class="line">					if ( copyIsArray ) &#123;</span><br><span class="line">						copyIsArray = false; // 将copyIsArray重新设置为false，为下次遍历做准备</span><br><span class="line">						clone = src &amp;&amp; jQuery.isArray( src ) ? src : [];</span><br><span class="line"></span><br><span class="line">					&#125; else &#123;</span><br><span class="line">						clone = src &amp;&amp; jQuery.isPlainObject( src ) ? src : &#123;&#125;;</span><br><span class="line">					&#125;</span><br><span class="line">                    　// 递归调用extend方法，继续进行深度遍历</span><br><span class="line">					// Never move original objects, clone them</span><br><span class="line">					target[ name ] = jQuery.extend( deep, clone, copy );</span><br><span class="line">　              // 如果不需要深度复制，则直接把copy（第i个被扩展对象中被遍历的那个键的值）</span><br><span class="line">				// Don&apos;t bring in undefined values</span><br><span class="line">				&#125; else if ( copy !== undefined ) &#123;</span><br><span class="line">					target[ name ] = copy;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    　// 原对象被改变，因此如果不想改变原对象，target可传入&#123;&#125;</span><br><span class="line">	// Return the modified object</span><br><span class="line">	return target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>extend()方法 首先是三个if判断，最后一个是for循环，最后返回target，重要的是返回值。<br><a href="http://www.jb51.net/article/61478.htm" target="_blank" rel="noopener">JQuery中的extend方法实现原理</a></p>
<h4 id="调用extend"><a href="#调用extend" class="headerlink" title="调用extend()"></a>调用extend()</h4><p>首先我们先看一下extend的具体用法，那样就能更深的理解，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn.extend( &#123;</span><br><span class="line">	prop: function( name, value ) &#123;</span><br><span class="line">		return access( this, jQuery.prop, name, value, arguments.length &gt; 1 );</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	removeProp: function( name ) &#123;</span><br><span class="line">		return this.each( function() &#123;</span><br><span class="line">			delete this[ jQuery.propFix[ name ] || name ];</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure></p>
<p>实例添加上的prop，removeProp方法，只用直接调用jQuery.fn.extend({}),jQuery的扩展插件的也是如此，把方法放入对象中，调用extend即可。是不是非常简单啊？下面的静态方法也是如此，这个静态方法一般不会使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend( &#123;</span><br><span class="line">	prop: function( elem, name, value ) &#123;</span><br><span class="line">		var ret, hooks,</span><br><span class="line">			nType = elem.nodeType;</span><br><span class="line"></span><br><span class="line">		// Don&apos;t get/set properties on text, comment and attribute nodes</span><br><span class="line">		if ( nType === 3 || nType === 8 || nType === 2 ) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) &#123;</span><br><span class="line">			//class和for不能直接操作,class for 关键字</span><br><span class="line">			// Fix name and attach hooks</span><br><span class="line">			name = jQuery.propFix[ name ] || name;</span><br><span class="line">			hooks = jQuery.propHooks[ name ];</span><br><span class="line">		&#125;</span><br><span class="line">		//set 有hooks调hooks没有直接属性操作</span><br><span class="line">		if ( value !== undefined ) &#123;</span><br><span class="line">			if ( hooks &amp;&amp; &quot;set&quot; in hooks &amp;&amp;</span><br><span class="line">				( ret = hooks.set( elem, value, name ) ) !== undefined ) &#123;</span><br><span class="line">				return ret;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			return ( elem[ name ] = value );</span><br><span class="line">		&#125;</span><br><span class="line">		//get hooks，同get</span><br><span class="line">		if ( hooks &amp;&amp; &quot;get&quot; in hooks &amp;&amp; ( ret = hooks.get( elem, name ) ) !== null ) &#123;</span><br><span class="line">			return ret;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		return elem[ name ];</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	propHooks: &#123;</span><br><span class="line">		tabIndex: &#123;</span><br><span class="line">			get: function( elem ) &#123;</span><br><span class="line"></span><br><span class="line">				// Support: IE &lt;=9 - 11 only</span><br><span class="line">				// elem.tabIndex doesn&apos;t always return the</span><br><span class="line">				// correct value when it hasn&apos;t been explicitly set</span><br><span class="line">				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/</span><br><span class="line">				// Use proper attribute retrieval(#12072)</span><br><span class="line">				var tabindex = jQuery.find.attr( elem, &quot;tabindex&quot; );</span><br><span class="line"></span><br><span class="line">				return tabindex ?</span><br><span class="line">					parseInt( tabindex, 10 ) :</span><br><span class="line">					rfocusable.test( elem.nodeName ) ||</span><br><span class="line">						rclickable.test( elem.nodeName ) &amp;&amp; elem.href ?</span><br><span class="line">							0 :</span><br><span class="line">							-1;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	propFix: &#123;</span><br><span class="line">		&quot;for&quot;: &quot;htmlFor&quot;,</span><br><span class="line">		&quot;class&quot;: &quot;className&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<h4 id="最后是自己的js工具"><a href="#最后是自己的js工具" class="headerlink" title="最后是自己的js工具"></a>最后是自己的js工具</h4><p><a href="https://github.com/muxiaobai/CourseExercises/blob/master/js/baseJS/base.js" target="_blank" rel="noopener">我的JS练习库</a><br>影响比较大的视频 <a href="http://study.163.com/course/courseMain.htm?courseId=465001" target="_blank" rel="noopener">逐行分析jQuery源码的奥秘</a> 希望有后续</p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery实践 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[测试Travis CI]]></title>
      <url>https://muxiaobai.github.io/2016/08/27/%E6%B5%8B%E8%AF%95Travis%20CI/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="自动线上构建博客Travis-CI"><a href="#自动线上构建博客Travis-CI" class="headerlink" title="自动线上构建博客Travis CI"></a>自动线上构建博客Travis CI</h2><h5 id="其他的已经完成"><a href="#其他的已经完成" class="headerlink" title="其他的已经完成"></a>其他的已经完成</h5><p>Git global setup<br>git config –global user.name “xxx”<br>git config –global user.email “<a href="mailto:xxx@gmail.com" target="_blank" rel="noopener">xxx@gmail.com</a>“</p>
<p>Create a new repository<br>git clone <a href="mailto:git@127.0.0.1" target="_blank" rel="noopener">git@127.0.0.1</a>:xxx/xxx.git<br>cd xxx<br>touch README.md<br>git add README.md<br>git commit -m “add README”<br>git push -u origin master</p>
<p>Push an existing folder<br>cd existing_folder<br>git init<br>git remote add origin <a href="mailto:git@127.0.0.1" target="_blank" rel="noopener">git@127.0.0.1</a>:xxx/xxx.git<br>git add .<br>git commit -m “Initial commit”<br>git push -u origin master</p>
<p>Push an existing Git repository<br>cd existing_repo<br>git remote rename origin old-origin<br>git remote add origin <a href="mailto:git@127.0.0.1" target="_blank" rel="noopener">git@127.0.0.1</a>:xxx/xxx.git<br>git push -u origin –all<br>git push -u origin –tags</p>
]]></content>
      
        <categories>
            
            <category> Travis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 API 新特性]]></title>
      <url>https://muxiaobai.github.io/2016/08/20/HTML5-API-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="HTML5-API新特性"><a href="#HTML5-API新特性" class="headerlink" title="HTML5-API新特性"></a>HTML5-API新特性</h1><p>主要内容：存储、文件 、图形图像、 媒体（视频、音频）</p>
<hr>
<h2 id="Storage-存储"><a href="#Storage-存储" class="headerlink" title="Storage 存储"></a>Storage 存储</h2><h4 id="Local-Storage"><a href="#Local-Storage" class="headerlink" title="Local Storage"></a>Local Storage</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var local=this.localStorage;</span><br><span class="line">var STORAGE_KEY = &apos;Local&apos;;</span><br><span class="line">var items=&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;password&quot;:&quot;123456&quot;&#125;</span><br><span class="line">var STORAGE_KEY2 = &apos;Local2&apos;;</span><br><span class="line">var items2=&#123;&quot;name&quot;:&quot;wang&quot;,&quot;sto&quot;:&quot;storage&quot;&#125;</span><br><span class="line">local.setItem(STORAGE_KEY, JSON.stringify(items));//把itemJSON话后，添加到LocalStorage，此时在浏览器中可以看到</span><br><span class="line">console.log(local.getItem(STORAGE_KEY));//根据key获取&#123;key:value&#125;</span><br><span class="line">console.log(local);</span><br><span class="line">local.setItem(STORAGE_KEY2, JSON.stringify(items2));</span><br><span class="line">console.log(local);</span><br><span class="line">console.log(local.key(1));</span><br><span class="line"></span><br><span class="line">console.log(local.key(0));获取第一个&#123;key:value&#125;</span><br><span class="line">console.log(local.length);</span><br><span class="line">local.removeItem(STORAGE_KEY);//根据key移除&#123;key:value&#125;</span><br><span class="line"></span><br><span class="line">console.log(local.length);//获取内容的长度</span><br><span class="line"></span><br><span class="line">console.log(local);</span><br><span class="line">local.clear();//清除localStorage</span><br><span class="line">console.log(local);</span><br></pre></td></tr></table></figure>
<p><img src="/2016/08/20/HTML5-API-新特性/201608201813.PNG" alt="控制台输出"><br><img src="/2016/08/20/HTML5-API-新特性/201608201816.PNG" alt="LocalStorage信息"></p>
<ul>
<li><p>获取添加移除:getItem(),setItem() removeItem()</p>
</li>
<li><p>长度 length</p>
</li>
<li><p>清除所有{key:value}:LocalStorage.clear()</p>
</li>
</ul>
<p>其中LocalStorage对象中，存储5M左右内容，同时这个对象和Cookies不同，Cookies会和Server进行信息传递，但是LocalStorage不会，根据名字就可以看出，这个对象只存在于本地。</p>
<h4 id="Session-Storage"><a href="#Session-Storage" class="headerlink" title="Session Storage"></a>Session Storage</h4><p>SessionStorage和LocalStorage类似，方法也一样，只不过存在的生命周期和存储大小、服务器不同。比较：</p>
<table>
<thead>
<tr>
<th>比较</th>
<th style="text-align:center">sessionStorage</th>
<th style="text-align:right">localStorage</th>
<th style="text-align:right">cookie</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储大小</td>
<td style="text-align:center">5M</td>
<td style="text-align:right">5M或者更大</td>
<td style="text-align:right">cookie数据不能超过4k，cookie只适合保存很小的数据，如会话标识。</td>
</tr>
<tr>
<td>生命周期</td>
<td style="text-align:center">一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。</td>
<td style="text-align:right">始终有效</td>
<td style="text-align:right">取决于expires/max-age</td>
</tr>
<tr>
<td>同源策略</td>
<td style="text-align:center">不可跨域</td>
<td style="text-align:right">在所有同源窗口中都是共享的</td>
<td style="text-align:right">不可以跨域调用。</td>
</tr>
<tr>
<td>是否和服务器交换数据</td>
<td style="text-align:center">数据和服务器交换</td>
<td style="text-align:right">只存在于本地</td>
<td style="text-align:right">每次http请求都会携带cookie，</td>
</tr>
</tbody>
</table>
<h4 id="IndexedDB-Web-SQL"><a href="#IndexedDB-Web-SQL" class="headerlink" title="IndexedDB  Web SQL"></a>IndexedDB  Web SQL</h4><p>这两个存储，一般属于离线应用的数据保存。web网页一般不使用，主要是应用、游戏等使用。</p>
<p>支持的浏览器：WEB SQL DATABASE SUPPORT</p>
<table>
<thead>
<tr>
<th style="text-align:right">IE</th>
<th style="text-align:center">FIREFOX</th>
<th style="text-align:right">SAFARI</th>
<th style="text-align:right">CHROME</th>
<th style="text-align:right">OPERA</th>
<th style="text-align:right">IPHONE</th>
<th>ANDROID</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">·    ·</td>
<td style="text-align:center">4.0+</td>
<td style="text-align:right">4.0+</td>
<td style="text-align:right">10.5+</td>
<td style="text-align:right">3.0+</td>
<td style="text-align:right">2.0+</td>
</tr>
</tbody>
</table>
<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><p>document.cookie=”userId=1”;</p>
<p>document.cookie=”userName=hulk”;</p>
<p>document.cookie它的赋值并不意味着丢失原来的值，上面两句说明浏览器将维护两个cookie，分别是userId和userName，因此给document.cookie赋值更像执<br>行类似这样的语句：</p>
<p>document.addCookie(“userId=1”);</p>
<p>document.addCookie(“userName=hulk”);</p>
<p>事实上，浏览器就是按照这样的方式来设置cookie的，如果要改变一个cookie的值，只需重新赋值，例如：</p>
<p>document.cookie=”userId=2”;</p>
<p>这样就将名为userId的cookie值设置为了2。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var date=new Date();</span><br><span class="line">var expireDays=10;</span><br><span class="line">//将date设置为10天以后的时间</span><br><span class="line">date.setTime(date.getTime()+expireDays*24*3600*1000);</span><br><span class="line">document.cookie = &apos;cookiename=cookievalue;expires=+&apos;+date.toGMTString()+&apos;;&apos;;</span><br><span class="line">document.cookie = &apos;cookiez=zhangsad; max-age=&apos;+(60*60*24*365)+&apos;;path=/;&apos;;</span><br><span class="line">function getCookie(c_name)&#123;</span><br><span class="line">	 var i,x,y; </span><br><span class="line">	 var cookieArray = document.cookie.split(&quot;;&quot;); </span><br><span class="line">	 console.log(cookieArray);</span><br><span class="line">	 for (i=0;i&lt;cookieArray.length;i++)&#123;</span><br><span class="line">	  x = cookieArray[i].substr(0,cookieArray[i].indexOf(&quot;=&quot;)); </span><br><span class="line">	  y = cookieArray[i].substr(cookieArray[i].indexOf(&quot;=&quot;)+1); </span><br><span class="line">	  x = x.replace(/^\s+|\s+$/g,&quot;&quot;); </span><br><span class="line">	  console.log(y);</span><br><span class="line">	  if(x == c_name)&#123; </span><br><span class="line">		  return unescape(y); </span><br><span class="line">	  &#125;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125; </span><br><span class="line">console.log(getCookie(&apos;cookiez&apos;));</span><br><span class="line">console.log(document.cookie);</span><br></pre></td></tr></table></figure>
<p>Chrome浏览器上的显示结果:</p>
<p><img src="/2016/08/20/HTML5-API-新特性/201608230954.PNG" alt="Chrome浏览器Cookies"><br><img src="/2016/08/20/HTML5-API-新特性/201608230958.PNG" alt="Chrome浏览器控制台"></p>
<h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><h4 id="Cache-Storage-Application-Cache"><a href="#Cache-Storage-Application-Cache" class="headerlink" title="Cache Storage Application Cache"></a>Cache Storage Application Cache</h4><p>离线缓存技术主要是应用于在没有网络的情况下，通过创建cache manifest文件，可以轻松的创建离线应用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; manifest=&quot;static/manifest/manifest.appcache&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;APP CACHE&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=1.4&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;http://developer.baidu.com/map/jsdemo/demo/convertor.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;static/ajaxjs/myzhang.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script src=&quot;static/ajaxjs/geolocation.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;&lt;!-- text/cache-mainfest --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=&quot;static/img/1.jpg&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;static/img/2.jpg&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    window.addEventListener(&apos;load&apos;, function(e)&#123;</span><br><span class="line">        console.log(window.applicationCache.status);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在html上使用manifest属性，引用appcache文件，文件下主要内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">#version 1.3</span><br><span class="line"># 需要缓存的列表</span><br><span class="line">CACHE:</span><br><span class="line">    ../ajaxjs/myzhang.js</span><br><span class="line">    ../ajaxjs/geolocation.js</span><br><span class="line">    ../img/2.jpg</span><br><span class="line">    ../img/2.jpg</span><br><span class="line">NETWORK:</span><br><span class="line"># 不需要缓存的</span><br><span class="line">    *</span><br><span class="line"></span><br><span class="line">FALLBACK:</span><br><span class="line"># 访问缓存失败后，备用访问的资源，第一个是访问源，第二个是替换文件*.html /offline.html</span><br><span class="line">2.jpg/3.jpg</span><br></pre></td></tr></table></figure>
<p>CACHE上面的内容就是下载的内容，保存在本地，作为缓存。</p>
<p><img src="/2016/08/20/HTML5-API-新特性/201608231046.PNG" alt="Cache"><br><img src="/2016/08/20/HTML5-API-新特性/201608231049.PNG" alt="Cache"><br><a href="http://www.admin10000.com/document/5921.html" target="_blank" rel="noopener">HTML5应用程序缓存Application Cache详解</a><br><a href="https://www.nihaoshijie.com.cn/index.php/archives/425" target="_blank" rel="noopener">HTML5离线存储之Application Cache</a></p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h4 id="File"><a href="#File" class="headerlink" title="File"></a>File</h4><p>具体应用：<br><a href="http://blog.csdn.net/a35038438/article/details/51162291" target="_blank" rel="noopener">上传图片立即显示</a><br>1.文件即传即显</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input:file&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class="line">    console.log($(this));</span><br><span class="line">    var img=$($($(this).next(&quot;label&quot;))).find(&quot;img&quot;);</span><br><span class="line">    //*原理是把本地图片路径：&quot;D(盘符):/image/...&quot;转为&quot;http://...&quot;格式路径来进行显示图片*/  </span><br><span class="line">    $(this).change(function() &#123;  </span><br><span class="line">        var $file = $(this);  </span><br><span class="line">        var objUrl = $file[0].files[0];  </span><br><span class="line">        var windowURL = window.URL || window.webkitURL;  </span><br><span class="line">        //createObjectURL创建一个指向该参数对象(图片)的URL  </span><br><span class="line">        var dataURL;  </span><br><span class="line">        dataURL = windowURL.createObjectURL(objUrl);  </span><br><span class="line">        $(img).attr(&quot;src&quot;,dataURL);  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>2.AJAX上传文件 XMLHttpRequest Level 2中的的FormData</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">	</span><br><span class="line">	var data=new FormData();</span><br><span class="line">	data.append(&quot;currentPage&quot;, 1);</span><br><span class="line">	data.append(&quot;order&quot;, &quot;desc&quot;); </span><br><span class="line">	ajax(&quot;&quot;,&quot;&quot;,data);</span><br><span class="line"></span><br><span class="line">function ajax(method,url,data)&#123;</span><br><span class="line">	var xhr ;</span><br><span class="line">    if (window.XMLHttpRequest) &#123; // Mozilla, Safari, ...</span><br><span class="line">        xhr = new XMLHttpRequest();</span><br><span class="line">    &#125; else if (window.ActiveXObject) &#123; // IE</span><br><span class="line">        xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.addEventListener(&quot;progress&quot;, updateProgress, false);</span><br><span class="line">    xhr.addEventListener(&quot;load&quot;, transferComplete, false);</span><br><span class="line">    xhr.addEventListener(&quot;error&quot;, transferFailed, false);</span><br><span class="line">    xhr.addEventListener(&quot;abort&quot;, transferCanceled, false);</span><br><span class="line">    xhr.open(method,url, true);</span><br><span class="line">    xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;multipart/form-data&quot;);</span><br><span class="line">    xhr.send(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// progress on transfers from the server to the client (downloads)</span><br><span class="line">function updateProgress(evt) &#123;</span><br><span class="line">  if (evt.lengthComputable) &#123;</span><br><span class="line">    var percentComplete = evt.loaded / evt.total;</span><br><span class="line">    console.log(&quot;The transfer is updateProgress.&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // Unable to compute progress information since the total size is unknown</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function transferComplete(evt) &#123;</span><br><span class="line">	console.log(evt);</span><br><span class="line">	console.log(this.response);</span><br><span class="line">	console.log(JSON.parse(this.response));</span><br><span class="line">	console.log(evt.responseText);</span><br><span class="line">	console.log(&quot;The transfer is complete.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function transferFailed(evt) &#123;</span><br><span class="line">	 console.log(&quot;An error occurred while transferring the file.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function transferCanceled(evt) &#123;</span><br><span class="line">	 console.log(&quot;The transfer has been canceled by the user.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects" target="_blank" rel="noopener">使用FormData对象</a><br><a href="https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started" target="_blank" rel="noopener">什么是 AJAX?</a></p>
<h4 id="FileReader-Blob"><a href="#FileReader-Blob" class="headerlink" title="FileReader Blob"></a>FileReader Blob</h4><h2 id="图形图像、多媒体"><a href="#图形图像、多媒体" class="headerlink" title="图形图像、多媒体"></a>图形图像、多媒体</h2><h4 id="Canvas-SVG"><a href="#Canvas-SVG" class="headerlink" title="Canvas SVG"></a>Canvas SVG</h4><p>在body中添加Canvas和svg标签，具体的图形图像展示需要在js中书写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; height=&quot;190&quot;&gt;&lt;/svg&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var ctx=document.getElementById(&quot;myCanvas&quot;);</span><br><span class="line">ctx.fillStyle = &quot;green&quot;;</span><br><span class="line">ctx.fillRect(10, 10, 100, 100);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>具体的内容就不展开了。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API" target="_blank" rel="noopener">Canvas</a></p>
<h4 id="video"><a href="#video" class="headerlink" title="video"></a>video</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=&quot;video&quot; width=&quot;420&quot; style=&quot;margin-top:15px;&quot;&gt;</span><br><span class="line">   &lt;source src=&quot;/example/html5/mov_bbb.mp4&quot; type=&quot;video/mp4&quot; /&gt;</span><br><span class="line">   &lt;source src=&quot;/example/html5/mov_bbb.ogg&quot; type=&quot;video/ogg&quot; /&gt;</span><br><span class="line">   Your browser does not support HTML5 video.</span><br><span class="line"> &lt;/video&gt;</span><br></pre></td></tr></table></figure>
<h4 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;song.ogg&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>
<h2 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h2><h4 id="navigator-geolocation-位置信息"><a href="#navigator-geolocation-位置信息" class="headerlink" title="navigator.geolocation 位置信息"></a>navigator.geolocation 位置信息</h4><p>结合手机和PC,通过百度Map和google convertor</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?v=1.4&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://developer.baidu.com/map/jsdemo/demo/convertor.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//获取地理信息并Hander</span><br><span class="line"> $(function()&#123;</span><br><span class="line">		 </span><br><span class="line">		 if(check())&#123;</span><br><span class="line">			 pc();</span><br><span class="line">		 &#125;else&#123;</span><br><span class="line">			 phone();</span><br><span class="line">		 &#125;</span><br><span class="line">	</span><br><span class="line"> &#125;)</span><br><span class="line">//geo</span><br><span class="line"> function Hander(city)&#123;</span><br><span class="line">	 console.log(city);</span><br><span class="line">	// if(city.charAt(city.length-1)==&quot;市&quot;&amp;&amp;city.substring(city.length-2,city.length-1)!=&quot;市&quot;)&#123;</span><br><span class="line">	//	 city=city.substring(0,city.length-1); </span><br><span class="line">	// &#125;</span><br><span class="line"> 	//city=&quot;徐州&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> function check() &#123;</span><br><span class="line">	  var userAgentInfo=navigator.userAgent;</span><br><span class="line">	  var Agents =new Array(&quot;Android&quot;,&quot;iPhone&quot;,&quot;SymbianOS&quot;,&quot;Windows Phone&quot;,&quot;iPad&quot;,&quot;iPod&quot;);</span><br><span class="line">	  var flag=true;</span><br><span class="line">	  for(var v=0;v&lt;Agents.length;v++) &#123;</span><br><span class="line">	     if(userAgentInfo.indexOf(Agents[v])&gt;0) &#123;</span><br><span class="line">	       flag=false;</span><br><span class="line">	       break;</span><br><span class="line">	     &#125;</span><br><span class="line">	   &#125;</span><br><span class="line">	 return flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function pc()&#123;</span><br><span class="line"> $.getScript(&apos;http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&apos;,getCity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getCity(_result)&#123;</span><br><span class="line">	  if (remote_ip_info.ret == &apos;1&apos;) &#123;</span><br><span class="line">	         console.log(remote_ip_info.country + &apos; ,&apos; + remote_ip_info.province + &apos;省,&apos; + remote_ip_info.city+ &apos;市&apos;   );</span><br><span class="line">	         Hander(remote_ip_info.city);</span><br><span class="line">	     &#125; else &#123;</span><br><span class="line">	    	 console.log(&apos;没有找到匹配的IP地址信息！&apos;);</span><br><span class="line">	     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function phone()&#123;</span><br><span class="line">	    var options=&#123;</span><br><span class="line">	            enableHighAccuracy:true,</span><br><span class="line">	            maximunAge:1000,</span><br><span class="line">	            timeout:5000</span><br><span class="line">	    &#125;;</span><br><span class="line">	    if(window.navigator.geolocation)&#123;</span><br><span class="line">	        navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);</span><br><span class="line">	    &#125;else&#123;</span><br><span class="line">	    	 console.log(&apos;你的浏览器不支持地理位置！&apos;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function successCallback(position)&#123;</span><br><span class="line">		// 百度地图API功能</span><br><span class="line">	   var lng = position.coords.longitude;</span><br><span class="line">	   var lat = position.coords.latitude;</span><br><span class="line">	   var point = new BMap.Point(lng, lat); // 创建点坐标//116.331398,39.897445</span><br><span class="line">	   BMap.Convertor.translate(point,0,translateCallback); </span><br><span class="line">	   console.log(&apos;当前地址的经纬度：经度&apos; + lng + &apos;，纬度&apos; + lat);</span><br><span class="line">	   </span><br><span class="line">&#125;</span><br><span class="line">function translateCallback(point)&#123;</span><br><span class="line">	 console.log(point);</span><br><span class="line">	  var geoc = new BMap.Geocoder();//地址解析类 </span><br><span class="line">	  geoc.getLocation(point, function(rs)&#123;</span><br><span class="line">		 var defCity = &#123;</span><br><span class="line">			        id: &apos;000001&apos;,</span><br><span class="line">			        name: &apos;北京&apos;,</span><br><span class="line">			        date: new Date()//获取当前时间方法</span><br><span class="line">		&#125;;</span><br><span class="line">		var addComp = rs.addressComponents;</span><br><span class="line">		console.log(addComp.province + &quot;, &quot; + addComp.city + &quot;, &quot; + addComp.district + &quot;, &quot; + addComp.street + &quot;, &quot; + addComp.streetNumber);</span><br><span class="line">		Hander(addComp.city);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">function errorCallback(error)&#123;</span><br><span class="line">   switch(error.code)&#123;</span><br><span class="line">   case error.PERMISSION_DENIED:</span><br><span class="line">	   console.log(&quot;you have denied access to your position .&quot;);</span><br><span class="line">       break;</span><br><span class="line">   case error.POSITION_UNAVAILABLE:</span><br><span class="line">	   console.log(&quot;there was a problem getting yout position .&quot;);</span><br><span class="line">       break;</span><br><span class="line">   case error.TIMEOUT:</span><br><span class="line">       console.log(&quot;The application has timed out attempting to get your location .&quot;);</span><br><span class="line">       break;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>navigator.geolocation.getCurrentPosition(successCallback,errorCallback,options);</p>
<p>Geolocation.getCurrentPosition()</p>
<p>Determines the device’s current location and gives back a Position object with the data.</p>
<p>Geolocation.watchPosition()</p>
<p>Returns a long value representing the newly established callback function to be invoked whenever the device location changes.</p>
<p>Geolocation.clearWatch()</p>
<p>Removes the particular handler previously installed using watchPosition().</p>
<p>geolocation有三个方法，其中getCurrentPosition中的回调函数。</p>
<p>会回传参数Position其中有两个参数Coordinates和timestamp</p>
<p>Position.coords Read only : Returns a Coordinates object defining the current location.</p>
<p>Position.timestamp Read only : Returns a DOMTimeStamp representing the time at which the location was retrieved.</p>
<h4 id="history-历史信息"><a href="#history-历史信息" class="headerlink" title="history 历史信息"></a>history 历史信息</h4><p>history.back():后退  加载 history 列表中的前一个 URL。</p>
<p>history.forward() 加载 history 列表中的下一个 URL。</p>
<p>history.go(0);//刷新当前页面</p>
<p>//以下是要在浏览器中有历史记录的,否则不会有效果.<br>history.go(1);//前进一页</p>
<p>history.go(-1);//后退一页</p>
<p>history.go(-2);//后退两页</p>
<p>history.length;//当前窗口包含的历史记录条数</p>
<h4 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h4><p><a href="http://www.ibm.com/developerworks/cn/web/1112_sunch_webworker/" target="_blank" rel="noopener">深入 HTML5 Web Worker 应用实践：多线程编程</a></p>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> API </tag>
            
            <tag> Canvas </tag>
            
            <tag> Storage </tag>
            
            <tag> Cache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 基础之线程和并发]]></title>
      <url>https://muxiaobai.github.io/2016/08/09/Thinking-in-java-%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%B9%B6%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="Java中的线程和并发"><a href="#Java中的线程和并发" class="headerlink" title="Java中的线程和并发"></a>Java中的线程和并发</h2><h4 id="新线程"><a href="#新线程" class="headerlink" title="新线程"></a>新线程</h4><p>进程：一次程序的完整运行。同一个时间段内，会有多进程抢占资源，但是在某一个时间点上，只有一个进程正在运行。</p>
<p>例如:我们可以一边开着浏览器一边上着QQ，但是在当时，(now),这个时间点上，运行的是某一个进程。</p>
<p>线程：比如说，我们在聊QQ的时候，又可以在QQ中查找用户，可以这么理解，线程就是一个进程中的若干个功能。多线程的资源是本进程中的资源，同样，线程也是要抢占自己的资源。</p>
<p>那么，我们开发的java应用，main是属于一个进程，不过呢，java中可以给我们提供多线程，因此就引入了多线程编程。</p>
<h5 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h5><blockquote>
<p>继承Thread类，实现Runnable接口，jdk1.5之后，实现Callable接口</p>
</blockquote>
<p>下面是一个实例:继承Thread类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		DemoThread myThread1=new DemoThread(&quot;线程1&quot;);</span><br><span class="line">		DemoThread myThread2=new DemoThread(&quot;线程2&quot;);</span><br><span class="line">		DemoThread myThread3=new DemoThread(&quot;线程3&quot;);</span><br><span class="line">		myThread1.start();</span><br><span class="line">		myThread2.start();</span><br><span class="line">		myThread3.start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DemoThread extends Thread&#123;</span><br><span class="line">	private String name;</span><br><span class="line">	public DemoThread(String name) &#123;</span><br><span class="line">		this.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">			System.out.println(this.name+&quot;:&quot;+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2016/08/09/Thinking-in-java-基础之线程和并发/20160924.PNG" alt="结果"></p>
<p>下面是一个实例:实现Runnable接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Thread myThread1=new Thread( new DemoRunnable(&quot; implements Runnable线程1&quot;));</span><br><span class="line">		Thread myThread2=new Thread( new DemoRunnable(&quot; implements Runnable线程2&quot;));</span><br><span class="line">		Thread myThread3=new Thread( new DemoRunnable(&quot; implements Runnable线程3&quot;));</span><br><span class="line">		myThread1.start();</span><br><span class="line">		myThread2.start();</span><br><span class="line">		myThread3.start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">class DemoRunnable implements Runnable&#123;</span><br><span class="line">	private String name;</span><br><span class="line">	public DemoRunnable(String name) &#123;</span><br><span class="line">		this.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">			System.out.println(this.name+&quot;:&quot;+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2016/08/09/Thinking-in-java-基础之线程和并发/201609241035.PNG" alt="结果"></p>
<p>多线程的启动需要Thread.start()，而且一个新线程只能运行一次start();而不是run();当我们调用run的时候，实际上是对象的方法调用，而不是启动线程。因此启动线程唯一方法start();下面来看Thread中的start();</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * Causes this thread to begin execution; the Java Virtual Machine</span><br><span class="line">   * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span><br><span class="line">   * &lt;p&gt;当这个方法被调用后，JVM会调用这个线程的run方法；</span><br><span class="line">   * The result is that two threads are running concurrently: the</span><br><span class="line">   * current thread (which returns from the call to the</span><br><span class="line">   * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span><br><span class="line">   * &lt;code&gt;run&lt;/code&gt; method).</span><br><span class="line">   * &lt;p&gt;结果是:两个线程都是正在运行状态，concurrently（同时，同时发生地）</span><br><span class="line">   * 调用start的这个线程和另一个运行run的线程</span><br><span class="line">   * It is never legal to start a thread more than once.</span><br><span class="line">   * In particular, a thread may not be restarted once it has completed</span><br><span class="line">   * execution.</span><br><span class="line">   *但是超过一次以上的调用、启动start是不合法的。</span><br><span class="line">   * @exception  IllegalThreadStateException  if the thread was already</span><br><span class="line">   *               started.如果线程正在运行，再次调用会抛出异常</span><br><span class="line">   *  //private ThreadGroup group;</span><br><span class="line">   *   //  private volatile int threadStatus = 0;</span><br><span class="line">   * @see        #run()</span><br><span class="line">   * @see        #stop()</span><br><span class="line">   */</span><br><span class="line">  public synchronized void start() &#123;</span><br><span class="line">      /**</span><br><span class="line">       * This method is not invoked for the main method thread or &quot;system&quot;</span><br><span class="line">       * group threads created/set up by the VM. Any new functionality added</span><br><span class="line">       * to this method in the future may have to also be added to the VM.</span><br><span class="line">       *</span><br><span class="line">       * A zero status value corresponds to state &quot;NEW&quot;.</span><br><span class="line">       */</span><br><span class="line">      if (threadStatus != 0)</span><br><span class="line">          throw new IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">      /* Notify the group that this thread is about to be started</span><br><span class="line">       * so that it can be added to the group&apos;s list of threads</span><br><span class="line">       * and the group&apos;s unstarted count can be decremented. */</span><br><span class="line">      group.add(this);//第一次调用的话把当前线程添加到ThreadGroup</span><br><span class="line"></span><br><span class="line">      boolean started = false;</span><br><span class="line">      try &#123;</span><br><span class="line">          start0();</span><br><span class="line">          started = true;</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">              if (!started) &#123;</span><br><span class="line">                  group.threadStartFailed(this);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; catch (Throwable ignore) &#123;</span><br><span class="line">              /* do nothing. If start0 threw a Throwable then</span><br><span class="line">                it will be passed up the call stack */</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private native void start0();//这里使用了一个JNI native方法。其中与操作系统有关系的方法调用，JVM已经实现好了，</span><br></pre></td></tr></table></figure>
<p>JNI(Java Native Interface)新线程的资源需要通过native来进行抢占。同样这样会变得与操作系统有关了。</p>
<p>优劣势：继承之后不能再继承其他类,推荐使用implements Runnable接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Thread implements Runnable &#123;</span><br><span class="line">    /* Make sure registerNatives is the first thing &lt;clinit&gt; does. */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就算继承Thread在背后也是实现了Runnable。重写了run(),方法实际上也是重写了Runnable的run()方法，原因就在这里。<br>Thread只是和线程的启动销毁有关，和业务无关。因此Thread实际上像一个代理。</p>
<h4 id="与线程有关的方法"><a href="#与线程有关的方法" class="headerlink" title="与线程有关的方法"></a>与线程有关的方法</h4><p>和方法密切相关的是线程的生命周期。把生命周期搞清楚后，这些主要的方法也就了解了。</p>
<p><img src="/2016/08/09/Thinking-in-java-基础之线程和并发/20150309140927553.jpg" alt="生命周期"></p>
<p>首先new Thread(),新建一个线程,然后一个主要的方法start();这个时候的状态属于:我准备好了，等待运行，当时间片转到我的时候，我就执行就好了，至于另外几种状态的话，可以更具下面的方法的一个具体解释来理解一下。</p>
<p>Thread方法</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法名</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">start();</td>
<td style="text-align:left">将本线程变为可运行状态</td>
</tr>
<tr>
<td style="text-align:left">yield();</td>
<td style="text-align:left">该方法与sleep()类似，只是不能由用户指定暂停多长时间，并且yield（）方法只能让同优先级的线程有执行的机会</td>
</tr>
<tr>
<td style="text-align:left">sleep(long 毫秒);</td>
<td style="text-align:left">线程休眠，就是我现在累了，想休息一下,</td>
</tr>
<tr>
<td style="text-align:left">join();</td>
<td style="text-align:left">等待所有线程运行结束</td>
</tr>
</tbody>
</table>
<p>Object方法</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法名</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">wait();</td>
<td style="text-align:left">本线程等待，这里的等待是别人不叫，不会醒的等待。</td>
</tr>
<tr>
<td style="text-align:left">notifyAll();</td>
<td style="text-align:left">叫醒所有线程线程</td>
</tr>
<tr>
<td style="text-align:left">notify();</td>
<td style="text-align:left">叫醒某一个线程，不确定</td>
</tr>
</tbody>
</table>
<h4 id="锁与共享资源"><a href="#锁与共享资源" class="headerlink" title="锁与共享资源"></a>锁与共享资源</h4><p>implements Runnable对于共享资源的作用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">	DemoRunnable demoRunnable=new DemoRunnable();//只有一个Runnable对象</span><br><span class="line">	Thread myThread1=new Thread(demoRunnable,&quot; implements Runnable线程1&quot;);</span><br><span class="line">	Thread myThread2=new Thread(demoRunnable,&quot; implements Runnable线程2&quot;);</span><br><span class="line">	Thread myThread3=new Thread(demoRunnable,&quot; implements Runnable线程3&quot;);</span><br><span class="line">	//下面的每一个线程都使用同一个demoRunnable实例对象，</span><br><span class="line">	//那么对于demoRunnable内部的integer a就在每一个线程中都可以修改，访问</span><br><span class="line">	myThread1.start();</span><br><span class="line">	myThread2.start();</span><br><span class="line">	myThread3.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DemoRunnable implements Runnable&#123;</span><br><span class="line">	public String name;</span><br><span class="line">	public Integer a=0;</span><br><span class="line">	public DemoRunnable()&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	public DemoRunnable(String name) &#123;</span><br><span class="line">		this.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">					Thread.sleep(10);</span><br><span class="line">				&#125; catch (InterruptedException e) &#123;</span><br><span class="line">					// TODO Auto-generated catch block</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+&quot; a:&quot;+(a++));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2016/08/09/Thinking-in-java-基础之线程和并发/201609241131.PNG" alt="资源共享"></p>
<p>虽然在这里，可以实现资源的共享，但是呢，我们仔细看一下，就会发现，如果按照单线程的话，每一个数字应该只出现一次才对，而且最终a=3*100=300，但是我们在看一下并不是。<br>首先0出现了2次，最后我们看一下结果，218，这是怎么回事？？？计算机坏了？一般情况下啊，千万不要怀疑计算机，前人如次多的尝试，都没问题，你出问题了？不可能，对吧？</p>
<p><img src="/2016/08/09/Thinking-in-java-基础之线程和并发/201609241132.PNG" alt="资源共享"></p>
<p>其实在这里出现了一个问题，是丢失更新。</p>
<p>因此，在实际运行过程中，我们会需要这样的一种情况，举例:银行转账：在转账的同时又在取款，如果这个钱只扣了一次,那我们岂不是赚大了，天天去取钱。<br>这个时候就需要一个东西“锁”，保障在更新的时候别人不能更新我正在更新的数据，如果访问的话，就随便吧，无所谓，你看看，只要不动手就行。</p>
<p>下面就来说说怎么来实现。来解决丢失更新呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class LockDemo &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getPriority());</span><br><span class="line">		LockDemoRunnable demoRunnable=new LockDemoRunnable();</span><br><span class="line">		Thread myThread1=new Thread(demoRunnable,&quot; implements Runnable线程1&quot;);</span><br><span class="line">		Thread myThread2=new Thread(demoRunnable,&quot; implements Runnable线程2&quot;);</span><br><span class="line">		Thread myThread3=new Thread(demoRunnable,&quot; implements Runnable线程3&quot;);</span><br><span class="line">		myThread1.start();</span><br><span class="line">		myThread2.start();</span><br><span class="line">		myThread3.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class LockDemoRunnable implements Runnable&#123;</span><br><span class="line">	public String name;</span><br><span class="line">	public Integer a=0;</span><br><span class="line">	public LockDemoRunnable()&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	public LockDemoRunnable(String name) &#123;</span><br><span class="line">		this.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		synchronized (a) &#123;</span><br><span class="line">			for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">				try &#123;</span><br><span class="line">					Thread.sleep(10);</span><br><span class="line">				&#125; catch (InterruptedException e) &#123;</span><br><span class="line">					// TODO Auto-generated catch block</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()+&quot; a:&quot;+(a++));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码和上面的代码中间只相差了一个地方，在循环的地方添加了一个    synchronized (a) {}，这个的作用呢，很简单，在要执行里面的代码的时候首先看一下a的锁是否被放开了，如果放开了，就可以执行里面的代脉代码，如果没有，在这等着，等锁，当其他的线程（实际这里的表述应该是对象，因为程序的运行实际上是对象的调用）把这段代码执行完，或者抛出异常，反正就是执行点不在里面的时候，这是，在这等待的线程才能继续执行。</p>
<p>这其实也是synchronized关键字语句块的作用。到这里后呢，我们就需要知道另一个问题了，我究竟应该锁定哪一个对象呢？是this，还是a，是代码块，还是方法？这就引入了下一个问题，粒度和锁级别。</p>
<h5 id="锁级别-粒度"><a href="#锁级别-粒度" class="headerlink" title="锁级别 粒度"></a>锁级别 粒度</h5><blockquote>
<p>同步加锁的是对象，而不是代码。</p>
</blockquote>
<p>这里推荐一篇文章<a href="http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html" target="_blank" rel="noopener">Java synchronized详解</a></p>
<p>特别是第三部分，把锁的粒度解释的非常清楚。</p>
<h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h5><p>说白了，就是，光看，不干活。网上的答案:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SpinLock &#123;</span><br><span class="line">    private AtomicReference&lt;Thread&gt; owner = new AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public void lock()&#123;</span><br><span class="line">        Thread currentThread = Thread.currentThread();</span><br><span class="line">        //循环cas来判断锁是否被占用，第一个为期望值，如果为null说明锁未被占用，设置当前线程占用</span><br><span class="line">        while(owner.compareAndSet(null,currentThread))&#123;</span><br><span class="line">            //这里一般会调用java.util.concurrent.locks.AbstractOwnableSynchronizer的setExclusiveOwnerThread(Thread t)方法来设置独占锁</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void unlock()&#123;</span><br><span class="line">        Thread currentThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        owner.compareAndSet(currentThread,null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是使用<code>import java.util.concurrent.atomic.AtomicReference;</code>来实现的。</p>
<h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p>死锁一般不会出现，但是如果出现的话，大都是业务问题，而不是代码问题。举例：</p>
<p>两个线程A、B  两个资源obj1、obj2</p>
<p>A拥有obj1，但是需要obj2，才能成功运行</p>
<p>B拥有obj2，但是需要obj1，才能成功运行</p>
<p>这时，A不想放弃obj1，B不想放弃obj2，两个线程又都想运行，这是就会出现死锁，</p>
<p>死锁代码的例子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class DeadLock &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    	Runnable runnable1=new testDeadLock(true);</span><br><span class="line">    	Runnable runnable2=new testDeadLock(false);</span><br><span class="line">    	Thread thread1=new Thread(runnable1);</span><br><span class="line">    	Thread thread2=new Thread(runnable2);</span><br><span class="line">    	thread1.start();</span><br><span class="line">    	thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class testDeadLock implements Runnable&#123;</span><br><span class="line">	</span><br><span class="line">	public  boolean flag;</span><br><span class="line">	static Object o1=new Object();</span><br><span class="line">	static Object o2=new Object();</span><br><span class="line">	public testDeadLock(boolean flag) &#123;</span><br><span class="line">		this.flag=flag;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		System.out.println(&quot;=====================:&quot;+flag);</span><br><span class="line">		if(flag)&#123;</span><br><span class="line">			synchronized (o1) &#123;</span><br><span class="line">				try &#123;</span><br><span class="line">					Thread.sleep(1000);</span><br><span class="line">				&#125; catch (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				synchronized (o2) &#123;</span><br><span class="line">					System.out.println(&quot;00000000000000&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		if(!flag)&#123;</span><br><span class="line">			synchronized (o2) &#123;</span><br><span class="line">				try &#123;</span><br><span class="line">					Thread.sleep(1000);</span><br><span class="line">				&#125; catch (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				synchronized (o1) &#123;</span><br><span class="line">					System.out.println(&quot;11111111111111&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个应该都可以看得出来结果，只输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;====================：false&quot;</span><br><span class="line">&quot;=====================：true&quot;</span><br></pre></td></tr></table></figure></p>
<p>而00000000000000和1111111111111111都不会输出。</p>
<h4 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h4><blockquote>
<p>重要</p>
</blockquote>
<p>下面只进行代码分析</p>
<p>生产者（蒸馒头的厨师）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Producer extends Thread&#123;</span><br><span class="line">	SyncStack syncStack=null;</span><br><span class="line">	public Producer(SyncStack syncStack) &#123;</span><br><span class="line">		this.syncStack=syncStack;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		for (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">			Mantou mantou=new Mantou(i);</span><br><span class="line">			System.out.println(this.currentThread().getName()+&quot; Producer mantou:&quot;+mantou);</span><br><span class="line">			syncStack.push(mantou);</span><br><span class="line">//			Thread.sleep((int));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者（吃馒头的工人）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Consumer extends Thread&#123;</span><br><span class="line">	SyncStack syncStack =null;</span><br><span class="line">	public Consumer(SyncStack syncStack) &#123;</span><br><span class="line">		this.syncStack=syncStack;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		for (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">		Mantou mantou=	syncStack.pop();</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+&quot; Consumer mantou:&quot;+mantou);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class ProducerConsumer &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    	SyncStack syncStack=new SyncStack();//只有一个筐，生产者在这个筐里面工作，实际上是模拟共用资源</span><br><span class="line">    	for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    		Producer producer=new Producer(syncStack);</span><br><span class="line">    		Thread producerthread=new Thread(producer);</span><br><span class="line">    		producerthread.setName(&quot;Producer:&quot;+i);</span><br><span class="line">    		producerthread.start();</span><br><span class="line">		&#125;</span><br><span class="line">    	for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    		Consumer consumer=new Consumer(syncStack);</span><br><span class="line">        	Thread consumerthread=new Thread(consumer);</span><br><span class="line">        	consumerthread.setName(&quot;Consumer:&quot;+i);</span><br><span class="line">        	consumerthread.start();</span><br><span class="line">		&#125;</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>馒头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Mantou&#123;</span><br><span class="line">	int id;</span><br><span class="line">	public Mantou(int id) &#123;</span><br><span class="line">		this.id=id;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;id:&quot;+id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>筐或者是篮子（盛馒头用的）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class SyncStack&#123;</span><br><span class="line">	int index=0;</span><br><span class="line">	Mantou[] arr=new Mantou[6];</span><br><span class="line">	//生产者往arr中添加馒头</span><br><span class="line">	public synchronized void push(Mantou mt) &#123;</span><br><span class="line">		while(index==arr.length) &#123;//当index==6的时候，说明arr已经满了，这是生产者应该等待，因此如果下一个还是生产者的话一直等待，然后这里就是一个wait();</span><br><span class="line">			try &#123;</span><br><span class="line">				this.wait();//等待，一直等，等下去，直到有人叫我。</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		this.notifyAll();//唤醒所有线程</span><br><span class="line">		arr[index]=mt;</span><br><span class="line">		index++;</span><br><span class="line">	&#125;</span><br><span class="line">	//消费者在arr中拿馒头吃</span><br><span class="line">	public synchronized Mantou pop() &#123;</span><br><span class="line">		while (index==0) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				this.wait();</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		this.notifyAll();//唤醒所又，如果我现在拿出来一个后</span><br><span class="line">		index--;</span><br><span class="line">		return arr[index];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p> 上面的一个例子中，notifyAll(),是叫醒所有线程，这时候如果，有一个空位，我就叫醒一个线程，还有空位，我就再叫醒一个线程，这里的有多少个线程正在睡觉，就是信号量的概念。这里就不再演示了。</p>
<p>参考文献</p>
<ul>
<li><a href="http://www.56.com/u74/v_MTA4MTI4MTI3.html" target="_blank" rel="noopener">Java线程多线程编程【尚学堂科技马士兵Java基础教程】</a> </li>
<li><a href="http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html" target="_blank" rel="noopener">Java synchronized详解</a> </li>
<li><a href="http://www.cnblogs.com/GnagWang/archive/2011/02/27/1966606.html" target="_blank" rel="noopener">java synchronized详解</a></li>
<li><a href="https://segmentfault.com/a/1190000006049612" target="_blank" rel="noopener">Java 8 并发教程：同步和锁</a></li>
<li><a href="http://blog.csdn.net/escaflone/article/details/10418651" target="_blank" rel="noopener">Java 多线程 并发编程</a></li>
<li><a href="https://my.oschina.net/liughDevelop/blog/1505500" target="_blank" rel="noopener">JDK并发四篇文章</a></li>
<li><a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md" target="_blank" rel="noopener">技术面试基础知识CyC2018</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md" target="_blank" rel="noopener">CyC2018并发</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Thread </tag>
            
            <tag> Concurrent </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 基础之异常]]></title>
      <url>https://muxiaobai.github.io/2016/08/04/Thinking-in-java-%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h2 id="Thinking-in-java-基础之异常"><a href="#Thinking-in-java-基础之异常" class="headerlink" title="Thinking in java 基础之异常"></a>Thinking in java 基础之异常</h2><p>类图如下</p>
<p><img src="/2016/08/04/Thinking-in-java-基础之异常/201608031722.jpg" alt="异常类图"></p>
<h4 id="异常概念"><a href="#异常概念" class="headerlink" title="异常概念"></a>异常概念</h4><p>checked 异常的一个问题是，有时候不允许抛出这样的异常。特别是，如果要覆盖超类中声明的方法，或者实现接口中声明的方法，而那个方法没有声明任何 checked 异常，那么新的实现也不能声明 checked 异常。因此必须预先处理异常。<br>Error我们不用处理。</p>
<p>VirtualMachineError在程序中是不能处理的，这个一般属于虚拟机的问题，内存溢出和栈溢出。(OOM) </p>
<p>Exception中的IOException必须try catch，这种文件资源是必须要捕捉的，文件要在finally中进行关闭。</p>
<p>Exception中的RuntimeException 可以不必try，还可以继续throws，让使用者处理。</p>
<p>下面来看看源码</p>
<p><img src="/2016/08/04/Thinking-in-java-基础之异常/201608091509Throwable.PNG" alt="异常Throwable类"></p>
<p><img src="/2016/08/04/Thinking-in-java-基础之异常/201608091504Error.PNG" alt="异常Error类"><br><img src="/2016/08/04/Thinking-in-java-基础之异常/201608091505Exception.PNG" alt="异常Exception类"><br><img src="/2016/08/04/Thinking-in-java-基础之异常/201608091505IOException.PNG" alt="异常IOException类"><br><img src="/2016/08/04/Thinking-in-java-基础之异常/201608091506RuntimeException.PNG" alt="异常RuntimeException类"></p>
<p>我们可以看到除了Throwable之外的类，都是只有构造方法，而且我们从类的名字就能看出具体是什么异常。</p>
<h4 id="为什么要用try-或者-throws"><a href="#为什么要用try-或者-throws" class="headerlink" title="为什么要用try 或者 throws"></a>为什么要用try 或者 throws</h4><p>try是为了捕捉异常，而方法中throws是为了把方法抛出去。</p>
<p>下面我们来看例子:</p>
<p>例1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionTest &#123;</span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		ExceptionTest exceptionTest=new ExceptionTest();</span><br><span class="line">		System.out.println(&quot;======================&quot;);</span><br><span class="line">		System.out.println(exceptionTest.va());</span><br><span class="line">		System.out.println(&quot;抛出异常后，后面代码仍可以执行&quot;);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer va() throws Exception&#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		ret=1/0;</span><br><span class="line">		System.out.println(&quot;上面有异常，后面......&quot;);</span><br><span class="line">		return ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">======================</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">	at Exception.ExceptionTest.va(ExceptionTest.java:21)</span><br><span class="line">	at Exception.ExceptionTest.main(ExceptionTest.java:15)</span><br></pre></td></tr></table></figure>
<p>val()方法中ret=1/0;会抛出异常。</p>
<p>例1中main方法中使用throws把异常抛出去，而main方法结束之后，程序就运行完了，但是Exception怎么办呢？只好在控制台打印出Exception了，同时，程序在产生异常的地方，程序就结束了。因此<em>System.out.println(“抛出异常后，后面代码仍可以执行”);</em>是不会执行的。即使在val(),方法中<em>System.out.println(“上面有异常，后面……”);</em>也是不会执行的，因为<em>ret=1/0;</em>已经让程序抛出了异常。 而下面的例子就不一样了。</p>
<p>例2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class ExceptionTest &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		ExceptionTest exceptionTest=new ExceptionTest();</span><br><span class="line">		System.out.println(&quot;======================&quot;);</span><br><span class="line">		try &#123;</span><br><span class="line">			System.out.println(exceptionTest.va());</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;抛出异常后，后面代码仍可以执行&quot;);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer va() throws Exception&#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		ret=1/0;</span><br><span class="line">		System.out.println(&quot;上面有异常，后面......&quot;);</span><br><span class="line">		return ret;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">======================</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">	at Exception.ExceptionTest.va(ExceptionTest.java:26)</span><br><span class="line">	at Exception.ExceptionTest.main(ExceptionTest.java:16)</span><br><span class="line">抛出异常后，后面代码仍可以执行</span><br></pre></td></tr></table></figure>
<p>在这个main中使用try catch 来捕捉异常，而异常捕捉后，后面的代码继续执行，因此<em>System.out.println(“抛出异常后，后面代码仍可以执行”);</em>可以执行，就打印出信息了。但是同样val()方法中的<em>System.out.println(“上面有异常，后面……”);</em>是不会执行的。</p>
<p>####异常分类</p>
<p>由上图可以看出Error和Exception是Throwable的子类</p>
<h4 id="关键字-try-catch-finally-throw-throws-根据关键词来解释异常"><a href="#关键字-try-catch-finally-throw-throws-根据关键词来解释异常" class="headerlink" title="关键字 try catch finally throw throws 根据关键词来解释异常"></a>关键字 try catch finally throw throws 根据关键词来解释异常</h4><p>try catch finally 是一组</p>
<p>throw是可以自己抛出一个异常对象</p>
<p>throws是声明一个异常可能被抛出，让调用者处理</p>
<h5 id="try-捕获异常-catch-处理异常-finally-有没有异常都执行"><a href="#try-捕获异常-catch-处理异常-finally-有没有异常都执行" class="headerlink" title="try 捕获异常 catch 处理异常 finally 有没有异常都执行"></a>try 捕获异常 catch 处理异常 finally 有没有异常都执行</h5><p>例3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionTest &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		ExceptionTest exceptionTest=new ExceptionTest();</span><br><span class="line">		System.out.println(exceptionTest.value());</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer value()&#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		try &#123;</span><br><span class="line">			ret=1/0;</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			ret = 1;</span><br><span class="line">			System.out.println(&quot;catch:&quot;+ret);</span><br><span class="line">			return ret;</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			ret = 2;</span><br><span class="line">			System.out.println(&quot;finally:&quot;+ret);</span><br><span class="line">		&#125;</span><br><span class="line">		return ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">catch:1</span><br><span class="line">finally:2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>例4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class ExceptionTest &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		ExceptionTest exceptionTest=new ExceptionTest();</span><br><span class="line">		System.out.println(exceptionTest.value());</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer value()&#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		try &#123;</span><br><span class="line">			ret=1/1;</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			ret = 3;</span><br><span class="line">			System.out.println(&quot;catch:&quot;+ret);</span><br><span class="line">			return ret;</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			ret = 2;</span><br><span class="line">			System.out.println(&quot;finally:&quot;+ret);</span><br><span class="line">		&#125;</span><br><span class="line">		return ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">finally:2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>例3例4这两个例子中，就能发现finally是不论在try{}中有没有异常，finally{}是必须要执行的，而catch(){}中呢，在try{}中有异常，catch(){}就会捕捉到。</p>
<p>下面看一下catch的顺序</p>
<p>例5:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionTest2 &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		ExceptionTest2 exceptionTest=new ExceptionTest2();</span><br><span class="line">		System.out.println(exceptionTest.value());</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer value()&#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		try &#123;</span><br><span class="line">			System.out.println(&quot;try:&quot;+ret);</span><br><span class="line">			ret=1/0;</span><br><span class="line">			return ret;</span><br><span class="line">		&#125;catch(ArithmeticException e)&#123;</span><br><span class="line">			System.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class="line">			//e.printStackTrace();</span><br><span class="line">		&#125;catch(NullPointerException e)&#123;</span><br><span class="line">			System.out.println(&quot;NullPointer catch:&quot;+ret);</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; </span><br><span class="line">		catch (Exception e) &#123;</span><br><span class="line">			System.out.println(&quot;Exception catch:&quot;+ret);</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			ret =3;</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			ret = 2;</span><br><span class="line">			System.out.println(&quot;finally:&quot;+ret);</span><br><span class="line">			//return ret;</span><br><span class="line">		&#125;</span><br><span class="line">		return ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:0</span><br><span class="line">ArithmeticException catch:0</span><br><span class="line">finally:2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>如果把Exception放在第一个catch的话，就会处错误，编译出错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Compiling ExceptionTest2.java.......</span><br><span class="line">		&#125;catch(ArithmeticException e)&#123;</span><br><span class="line">		 ^</span><br><span class="line">		&#125;catch(NullPointerException e)&#123;</span><br><span class="line">		 ^</span><br><span class="line">		&#125;catch (Exception e) &#123;</span><br><span class="line">		 ^</span><br><span class="line">[Finished in 0.5s]</span><br></pre></td></tr></table></figure>
<h5 id="throw-抛出一个异常对象"><a href="#throw-抛出一个异常对象" class="headerlink" title="throw 抛出一个异常对象"></a>throw 抛出一个异常对象</h5><p>例6：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionCatchTest &#123;</span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		ExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class="line">		System.out.println(exceptionTest.value());</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer value() throws Exception&#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		try &#123;</span><br><span class="line">			ret=1/0;</span><br><span class="line">			throw new Exception();</span><br><span class="line">		&#125;catch(ArithmeticException e)&#123;</span><br><span class="line">			System.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class="line">			throw new Exception();</span><br><span class="line">		&#125;catch (Exception e) &#123;</span><br><span class="line">			ret = 3;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.out.println(&quot;catch:&quot;+ret);</span><br><span class="line">			return ret;</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			ret = 2;</span><br><span class="line">			System.out.println(&quot;finally:&quot;+ret);</span><br><span class="line">		&#125;</span><br><span class="line">		return ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArithmeticException catch:0</span><br><span class="line">finally:2</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.Exception</span><br><span class="line">	at Exception.ExceptionCatchTest.value(ExceptionCatchTest.java:23)</span><br><span class="line">	at Exception.ExceptionCatchTest.main(ExceptionCatchTest.java:13)</span><br></pre></td></tr></table></figure></p>
<p>例6上面在catch内部又抛出(throw)了一个 new Exception()；同时在方法中就会把Exception抛出到调用者处理。从而把Exception抛给main()方法处理，如果main方法中没有 throws Exception的话，就需要对<em>exceptionTest.value()</em>进行try catch 否则编译就会出错。</p>
<h5 id="throws-声明一个异常可能被抛出"><a href="#throws-声明一个异常可能被抛出" class="headerlink" title="throws 声明一个异常可能被抛出"></a>throws 声明一个异常可能被抛出</h5><p>例7：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionCatchTest &#123;</span><br><span class="line">	public static void main(String[] args)  &#123;</span><br><span class="line">		ExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class="line">		System.out.println(exceptionTest.value());</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer value() throws Exception&#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		try &#123;</span><br><span class="line">			ret=1/0;</span><br><span class="line">			throw new Exception();</span><br><span class="line">		&#125;catch(ArithmeticException e)&#123;</span><br><span class="line">			System.out.println(&quot;ArithmeticException catch:&quot;+ret);</span><br><span class="line">		&#125;catch (Exception e) &#123;</span><br><span class="line">			ret = 3;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.out.println(&quot;catch:&quot;+ret);</span><br><span class="line">			return ret;</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			ret = 2;</span><br><span class="line">			System.out.println(&quot;finally:&quot;+ret);</span><br><span class="line">		&#125;</span><br><span class="line">		return ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例7上面也说明了throws 关键字的用法，抛出Exception，给调用者处理异常。因此，在main()方法中，如果main方法中没有 throws Exception的话，就需要对<em>exceptionTest.value()</em>进行try catch 否则编译就会出错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">			System.out.println(exceptionTest.value());</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最后要说一下执行异常的顺序"><a href="#最后要说一下执行异常的顺序" class="headerlink" title="最后要说一下执行异常的顺序"></a>最后要说一下执行异常的顺序</h4><p>例8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionCatchTest &#123;</span><br><span class="line">	public static void main(String[] args)  &#123;</span><br><span class="line">		ExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class="line">			System.out.println(exceptionTest.value());</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer value() &#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		try &#123;</span><br><span class="line">			ret=1/0;</span><br><span class="line">			return ret;</span><br><span class="line">		&#125;catch (Exception e) &#123;</span><br><span class="line">			ret = 3;</span><br><span class="line">			System.out.println(&quot;catch:&quot;+ret);</span><br><span class="line">			return ret;</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			ret = 2;</span><br><span class="line">			System.out.println(&quot;finally:&quot;+ret);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">catch:3</span><br><span class="line">finally:2</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p>
<p>在try中执行，如果有异常try中的return不会返回，会到catch中，如果在catch中有return的话，当执行到这里的时候，会提前执行finally，然后才会执行catch中的return。</p>
<p>例9：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionCatchTest &#123;</span><br><span class="line">	public static void main(String[] args)  &#123;</span><br><span class="line">		ExceptionCatchTest exceptionTest=new ExceptionCatchTest();</span><br><span class="line">			System.out.println(exceptionTest.value());</span><br><span class="line">	&#125;</span><br><span class="line">	public Integer value() &#123;</span><br><span class="line">		Integer ret = 0;</span><br><span class="line">		try &#123;</span><br><span class="line">			//ret=1/0;</span><br><span class="line">			return ret;</span><br><span class="line">		&#125;catch (Exception e) &#123;</span><br><span class="line">			ret = 3;</span><br><span class="line">			System.out.println(&quot;catch:&quot;+ret);</span><br><span class="line">			return ret;</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			ret = 2;</span><br><span class="line">			System.out.println(&quot;finally:&quot;+ret);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">finally:2</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p>
<p>如果try中的代码正常，不会产生异常的话，会在try中执行到return的时候，优先执行finally，如果在finally有return的话，直接返回，没有的话，就会返回到try内的return。</p>
<h4 id="到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。"><a href="#到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。" class="headerlink" title="到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。"></a>到此，就基本上结束了，异常的代码很简单，说起来也很容易，但是要用好异常类还是需要深度理解的。不过呢，当你用好后，这块就没什么问题了。</h4>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Throwable </tag>
            
            <tag> Error </tag>
            
            <tag> Exception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring中的Session生命周期]]></title>
      <url>https://muxiaobai.github.io/2016/08/03/Spring%E4%B8%AD%E7%9A%84Session%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h2 id="Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。"><a href="#Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。" class="headerlink" title="Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。"></a>Session是Hiberante中SessionFactory创建的Session，和Cookie、Session是两个东西。</h2><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h4 id="事务相关的特性就不说了。ACID"><a href="#事务相关的特性就不说了。ACID" class="headerlink" title="事务相关的特性就不说了。ACID"></a>事务相关的特性就不说了。ACID</h4><h4 id="事务必须在Session中。"><a href="#事务必须在Session中。" class="headerlink" title="事务必须在Session中。"></a>事务必须在Session中。</h4><p>Hibernate事例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 实例化Configuration，</span><br><span class="line">Configuration conf = new Configuration()</span><br><span class="line">// 不带参数的configure()方法默认加载hibernate.cfg.xml文件，</span><br><span class="line">// 如果传入abc.xml作为参数，则不再加载hibernate.cfg.xml，改为加载abc.xml</span><br><span class="line">	.configure();</span><br><span class="line">ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()</span><br><span class="line">	.applySettings(conf.getProperties()).build();</span><br><span class="line">// 以Configuration实例创建SessionFactory实例</span><br><span class="line">SessionFactory sf = conf.buildSessionFactory(serviceRegistry);</span><br><span class="line">// 创建Session</span><br><span class="line">Session sess = sf.openSession();</span><br><span class="line">// 开始事务</span><br><span class="line">Transaction tx = sess.beginTransaction();</span><br><span class="line">User n = new User();</span><br><span class="line">n.setName(&quot;muxiaobai&quot;);</span><br><span class="line">n.setPassword(&quot;sosiiillliii&quot;);</span><br><span class="line">// 保存消息</span><br><span class="line">sess.save(n);</span><br><span class="line">// 提交事务</span><br><span class="line">tx.commit();</span><br><span class="line">// 关闭Session</span><br><span class="line">sess.close();</span><br><span class="line">sf.close();</span><br></pre></td></tr></table></figure>
<p>提交Transaction的时候，Session还开启着，save()方法虽然使用的是Session对象。但是在提交事务之前，Session是不能关闭的。</p>
<p>applicationContext.xml文件中(Spring文件)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">		class=&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</span><br><span class="line">		p:sessionFactory-ref=&quot;sessionFactory&quot; /&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 配置事务增强处理Bean,指定事务管理器 --&gt;</span><br><span class="line">	&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">		&lt;tx:attributes&gt;</span><br><span class="line">			&lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">			&lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;  propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">			&lt;tx:method name=&quot;*&quot; isolation=&quot;DEFAULT&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">		&lt;/tx:attributes&gt;</span><br><span class="line">	&lt;/tx:advice&gt;</span><br><span class="line">	&lt;aop:config&gt;</span><br><span class="line">		&lt;aop:pointcut id=&quot;Pointcut&quot; expression=&quot;execution(* *.*.Service.*.*.*(..))&quot; /&gt;</span><br><span class="line">		&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;Pointcut&quot; /&gt;</span><br><span class="line">	&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>
<p>先明白一点：事务是切在Service中的方法，为什么呢？Service中的方法是一个完整业务操作，然后被Action或者Servlet调用。<br>事务为了保证一个业务场景的数据一致性，所以要切在Service中。</p>
<p>用化学中的原子分子来解释就是：Dao属于原子性操作，Service属于分子性操作。就像你喝水一样，吸收的是水分子而不是原子？你喝的是氢原子、氧原子。还是喝得水分子。(这个地方原子并不是对应事务的原子性，要正确理解原子性)。</p>
<p>一般情况下运用Spring的AOP来配置事务，但是此时的就牵扯到参数”hibernate.current_session_context_class”了，到下面再说。</p>
<h2 id="Hibernate的Session在Spring中的常见配置"><a href="#Hibernate的Session在Spring中的常见配置" class="headerlink" title="Hibernate的Session在Spring中的常见配置"></a>Hibernate的Session在Spring中的常见配置</h2><h4 id="Hibernate的Session的关闭与开启问题"><a href="#Hibernate的Session的关闭与开启问题" class="headerlink" title="Hibernate的Session的关闭与开启问题"></a>Hibernate的Session的关闭与开启问题</h4><p>如果没有Spring,Hibernate会让我们手动管理Session，<br>开启:<strong>Session sess = sf.openSession();</strong> 关闭：<strong>sess.close();</strong>这是比较好的，但是人嘛，总是懒嘛，所以就给Spring管理了，然后呢,我们就不想管它了，Spring就把Session给下面这个参数了”hibernate.current_session_context_class”,然后使用者就只用<strong>this.sessionFactory.getCurrentSession();</strong>来获取Session，也不用处理关闭了，Spring处理了。</p>
<p>就如没有Hibernate的时候，我们使用JDBC，JDBC会用者/能用好者，实际上比Hibernate的性能好很多，但是，开发效率，开发时间就比较慢了。另一个原因，人嘛，总是懒嘛，就使用框架来工作，实际上在大量数据的添加/更新上，还是使用JDBC更好一点。使用了Hibernate后，就不用管连接<strong>Connection</strong>了，而且还使用了连接池，<strong>C3P0</strong>，所以一般开发者（或者高效开发者）使用框架来工作，这也是工作的需要，时间，效率问题。说多了。</p>
<h4 id="hibernate-current-session-context-class"><a href="#hibernate-current-session-context-class" class="headerlink" title="hibernate.current_session_context_class"></a>hibernate.current_session_context_class</h4><p>重点来了，Spring到底是怎样控制Hibernate Session的生命周期或者叫范围的？</p>
<p>applicationContext.xml文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;prop key=&quot;hibernate.current_session_context_class&quot;&gt;org.springframework.orm.hibernate5.SpringSessionContext&lt;/prop&gt;</span><br><span class="line">#hibernate.current_session_context_class=thread/jta/managed/org.springframework.orm.hibernate5.SpringSessionContext</span><br></pre></td></tr></table></figure>
<p>hibernate.current_session_context_class解释：<br><img src="/2016/08/03/Spring中的Session生命周期/201608051337CurrentSessionContext.PNG" alt="hibernate默认的三种session上下文"><br>可以看到Hibernate下，CurrentSessionContext下面有三种上下文的实现，     JTASessionContext、ThreadLocalSessionContext 、ManagedSessionContext。</p>
<ul>
<li><p>org.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。</p>
</li>
<li><p>org.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。 </p>
</li>
<li><p>org.hibernate.context.ManagedSessionContext - 当前session通过当前执行的线程来跟踪和界定，但是需要静态方法来绑定和取消绑定Session。 </p>
</li>
</ul>
<p>因此被Spring管理的Session中也有这三种Context上下文。同时Spring也实现了CurrentSessionContext，见下图：</p>
<p><img src="/2016/08/03/Spring中的Session生命周期/201608051345SpringSessionContext.PNG" alt="Spring对CurrentSessionContext的实现类SpringSessionContext"><br>要在配置文件里进行如下设置：</p>
<p>如果使用的是本地事务（jdbc事务）</p>
<p>&lt;property name=”hibernate.current_session_context_class”>thread&lt;/property></p>
<p>如果使用的是全局事务（jta事务）</p>
<p>&lt;property name=”hibernate.current_session_context_class”>jta&lt;/property> </p>
<p>hibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未 配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配 置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实 现类的全名，但那两个内置的实现可以使用简写，即”jta”和”thread”。</p>
<p>附上两篇很好的解释。<br><a href="http://www.blogjava.net/wangxinsh55/archive/2012/10/16/389664.html" target="_blank" rel="noopener">hibernate.current_session_context_class属性配置</a><br><a href="http://blog.csdn.net/baple/article/details/39957499" target="_blank" rel="noopener">hibernate的current_session_context_class配置</a></p>
<p>下面来看看Spring的SessionFactory是怎么获取Session的。</p>
<p>我们在使用session的时候大都是这样得到的吧。</p>
<p>applicationContext.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sessionFactory&quot;</span><br><span class="line">	class=&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;</span><br><span class="line">	p:dataSource-ref=&quot;dataSource&quot;&gt;</span><br><span class="line">		&lt;property name=&quot;hibernateProperties&quot;&gt;</span><br><span class="line">		&lt;props&gt;</span><br><span class="line">			&lt;prop key=&quot;hibernate.current_session_context_class&quot;&gt;$&#123;hibernate.current_session_context_class&#125;&lt;/prop&gt;</span><br><span class="line">		&lt;/props&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>先来找”hibernate.current_session_context_class”,在什么地方被注入，bean是SessionFactory，class是<strong>org.springframework.orm.hibernate5.LocalSessionFactoryBean</strong>我们发现其中并没有但是我们找到了这个<strong>buildSessionFactory(LocalSessionFactoryBuilder sfb)</strong>其中传递的参数LocalSessionFactoryBuilder<br><img src="/2016/08/03/Spring中的Session生命周期/201608051437LocalSessionFactoryBean.PNG" alt="Spring中SessionFactory的实现类LocalSessionFactoryBean"><br><img src="/2016/08/03/Spring中的Session生命周期/201608051454LocalSessionFactoryBuilder.PNG" alt="LocalSessionFactoryBuilder"><br>然后就开心了，看到熟悉的东西了，<strong>Environment.CURRENT_SESSION_CONTEXT_CLASS</strong>.最终在AvailableSettings中找到CURRENT_SESSION_CONTEXT_CLASS.<br><img src="/2016/08/03/Spring中的Session生命周期/201608051457AvailableSettings.PNG" alt="CURRENT_SESSION_CONTEXT_CLASS"><br>而回过头来看<strong>Environment.CURRENT_SESSION_CONTEXT_CLASS</strong>的值是：SpringSessionContext.class.getName()，如果我们没有写这个属性的话，默认就是SpringSessionContext。</p>
<p>applicationContext.xml文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;baseDaoImpl&quot; abstract=&quot;true&quot;  lazy-init=&quot;true&quot; p:sessionFactory-ref=&quot;sessionFactory&quot; /&gt;</span><br><span class="line">&lt;bean id=&quot;userDaoImpl&quot; class=&quot;DaoImpl.UserDaoImpl&quot; parent=&quot;baseDaoImpl&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>BaseDaoImpl中会取得</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 依赖注入SessionFactory所需的setter方法</span><br><span class="line"> * </span><br><span class="line"> * @param sessionFactory</span><br><span class="line"> */</span><br><span class="line">public void setSessionFactory(SessionFactory sessionFactory) &#123;</span><br><span class="line">		this.sessionFactory = sessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 取得Session.</span><br><span class="line"> * </span><br><span class="line"> * @return CurrentSession</span><br><span class="line"> */</span><br><span class="line">public Session getSession() &#123;</span><br><span class="line">	  return this.sessionFactory.getCurrentSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就用 <strong>getCurrentSession</strong> 得到Session并对应相应的上下文。</p>
<p>但是<strong>this.sessionFactory.getCurrentSession();</strong>这个方法得到的session，会随着get开启,随着事务的提交而关闭。</p>
<p>因此在SSH中就出现常见的问题，如下：</p>
<h4 id="常见的几种问题"><a href="#常见的几种问题" class="headerlink" title="常见的几种问题"></a>常见的几种问题</h4><h5 id="AOP事务中Session的生命周期"><a href="#AOP事务中Session的生命周期" class="headerlink" title="AOP事务中Session的生命周期"></a>AOP事务中Session的生命周期</h5><p>正常情况下，事务提交，Session关闭。</p>
<h5 id="“org-hibernate-LazyInitializationException-could-not-initialize-proxy-no-Session”问题"><a href="#“org-hibernate-LazyInitializationException-could-not-initialize-proxy-no-Session”问题" class="headerlink" title="“org.hibernate.LazyInitializationException: could not initialize proxy - no Session”问题"></a>“org.hibernate.LazyInitializationException: could not initialize proxy - no Session”问题</h5><h5 id="“org-hibernate-LazyInitializationException-failed-to-lazily-initialize-a-collection-of-role-Model-User-no-session-or-session-was-closed”"><a href="#“org-hibernate-LazyInitializationException-failed-to-lazily-initialize-a-collection-of-role-Model-User-no-session-or-session-was-closed”" class="headerlink" title="“org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: Model.User, no session or session was closed”"></a>“org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: Model.User, no session or session was closed”</h5><p>以上两种错误属于同一类，no Session</p>
<p>解释一下：因为Session会随着事务的提交而关闭，但是内存中的对象并没有你要访问的属性，在你要访问的时候，就会出现no Session 或者Session closed等问题。<br>但是，我们不可能把事务的范围扩大，因此就想着不让session关闭。在网上找到了这个openSessionInViewFilter。详解在下面。</p>
<h5 id="“save-is-not-valid-without-active-transaction”-问题"><a href="#“save-is-not-valid-without-active-transaction”-问题" class="headerlink" title="“save is not valid without active transaction” 问题"></a>“save is not valid without active transaction” 问题</h5><p>正常情况下Hibernate没有问题，关键是整合Spring后，配置AOP，切面在Service，测试Dao的时候就出问题了，这个目前为止没有发现好的解决办法，我是在开发的时候Dao也配置事务，生产环境下去掉Dao事务。</p>
<h4 id="OpenSessionInViewFilter"><a href="#OpenSessionInViewFilter" class="headerlink" title="OpenSessionInViewFilter"></a>OpenSessionInViewFilter</h4><p>为了延长Session的生命周期，Spring中引入OpenSessionInviewFilter。</p>
<p>在web.xml文件中添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.orm.hibernate5.support.OpenSessionInViewFilter&lt;/filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;singleSession&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;sessionFactoryBean&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;sessionFactory&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>OpenSessionInViewFilter是Spring提供的一个针对Hibernate的一个支持类，其主要意思是在发起一个页面请求时打开Hibernate的Session，一直保持这个Session，直到这个请求结束，具体是通过一个Filter来实现的。</p>
<p>由于Hibernate引入了Lazy Load特性，使得脱离Hibernate的Session周期的对象如果再想通过getter方法取到其关联对象的值，Hibernate会抛出一个LazyLoad的Exception。所以为了解决这个问题，Spring引入了这个Filter，使得Hibernate的Session的生命周期变长。这样不论是Servlet、JSP还是Action都可以获取Session。</p>
<p><a href="http://blog.csdn.net/a5489888/article/details/9015375" target="_blank" rel="noopener">解决Hibernate的Session的关闭与开启问题</a><br><a href="http://blog.csdn.net/ggibenben1314/article/details/46289411" target="_blank" rel="noopener">OpenSessionInViewFilter的作用及原理</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Session </tag>
            
            <tag> Hibernate </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前后台数据交互方式总结]]></title>
      <url>https://muxiaobai.github.io/2016/07/20/%E5%89%8D%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="不同的角度，不同的说辞————-前后台数据交互"><a href="#不同的角度，不同的说辞————-前后台数据交互" class="headerlink" title="不同的角度，不同的说辞————-前后台数据交互"></a>不同的角度，不同的说辞————-前后台数据交互</h2><h4 id="传输数据形式"><a href="#传输数据形式" class="headerlink" title="传输数据形式"></a>传输数据形式</h4><h5 id="JSON-流行-Javascript-object-Notation"><a href="#JSON-流行-Javascript-object-Notation" class="headerlink" title="JSON(流行)(Javascript object Notation)"></a>JSON(流行)(Javascript object Notation)</h5><p>JSON<br>对象{} 数组[] 属性名:属性值  “键”:”值”</p>
<p>JSONP(JSON with Padding)(解决同源策略)</p>
<p>HTML中 script>、img>、iframe>标签可以跨域</p>
<p>JSONP可用于解决主流浏览器的跨域数据访问的问题；</p>
<p>jQuery利用<strong>script></strong>标签，来实现跨域的数据交换，然后包装的AJAX中,外部调用的时候因此就可以向各个域名下请求资源。</p>
<p>RESTFul(Representational State Transfer)<br>放在这只是显示一下JSON的趋势。</p>
<h5 id="xml-text-html"><a href="#xml-text-html" class="headerlink" title="xml text html"></a>xml text html</h5><p>xml :曾经很辉煌，现在是一个失势的宠儿，就是因为JSON，JSON看起来更容易进行数据交互，体积小，方便，简洁。</p>
<p>text html :老样子，我不在乎你们的争吵，一副为老独尊的样子，看你们玩耍，我不信，你们还能隔空传物？</p>
<h4 id="提交方式"><a href="#提交方式" class="headerlink" title="提交方式"></a>提交方式</h4><h4 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h4><h5 id="HTML的form"><a href="#HTML的form" class="headerlink" title="HTML的form"></a>HTML的form</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&quot; method=&quot;&quot; enctype=&quot;&quot;&gt;</span><br><span class="line">method: post/get</span><br></pre></td></tr></table></figure>
<p>enctype </p>
<p>application/x-www-form-urlencoded 在发送前编码所有字符（默认）</p>
<p>multipart/form-data 不对字符编码。在使用包含<strong>文件上传</strong>控件的表单时，必须使用该值。</p>
<p>text/plain    空格转换为 “+” 加号，但不对特殊字符编码。</p>
<p>按钮直接提交button/submit</p>
<h5 id="js代替按钮的”form”"><a href="#js代替按钮的”form”" class="headerlink" title="js代替按钮的”form”"></a>js代替按钮的”form”</h5><p>某一事件调用js，代为提交 </p>
<p>这种形式可以添加表单验证</p>
<p>在form上添加onsubmit=””事件返回false则不提交form</p>
<p>form.submit()</p>
<h4 id="AJAX-Asynchronous-JavaScript-and-XML-异步更新"><a href="#AJAX-Asynchronous-JavaScript-and-XML-异步更新" class="headerlink" title="AJAX(Asynchronous JavaScript and XML)(异步更新)"></a>AJAX(Asynchronous JavaScript and XML)(异步更新)</h4><h5 id="xhr-XmlHttpRequest-ajax的原始形态"><a href="#xhr-XmlHttpRequest-ajax的原始形态" class="headerlink" title="xhr(XmlHttpRequest) ajax的原始形态"></a>xhr(XmlHttpRequest) ajax的原始形态</h5><p>IE6及之前的版本使用ActiveXObject,IE7之后及其它浏览器使用XMLHttpRequest<br>因此很少原生的对象，现在随着jQuery的流行和增强，浏览器的升级，可以说，全部浏览器都支持XMLHttpRequest对象，我们就可以直接使用jQuery中的ajax来进行前后台交互。</p>
<p>偷个懒，放两篇bolg在这，<br><a href="http://blog.csdn.net/liujiahan629629/article/details/17126727" target="_blank" rel="noopener">AJAX——核心XMLHttpRequest对象</a><br><a href="http://www.cnblogs.com/beniao/archive/2008/03/29/1128914.html" target="_blank" rel="noopener">轻松掌握XMLHttpRequest对象</a></p>
<p>注:XMLHttpRequest Level 2添加了一个新的接口FormData.利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的send()方法来异步的提交这个”表单”.比起普通的ajax,使用FormData的最大优点就是我们可以异步上传一个<strong>二进制文件</strong>. </p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener">FormData对象</a> <a href="http://www.tuicool.com/articles/uuiE3y" target="_blank" rel="noopener">Html5 FormData+Ajax表单数据提交</a></p>
<p>所有主流浏览器的较新版本都已经支持这个对象了，比如Chrome 7+、Firefox 4+、IE 10+、Opera 12+、Safari 5+。</p>
<blockquote>
<p>但是jQuery不支持FormData,此对象只能在原生XmlHttpRequest中使用。</p>
</blockquote>
<h5 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h5><p>包装后的形式，不用考虑浏览器的兼容性，更方便.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	url:&quot;&quot;,</span><br><span class="line">	type:&quot;&quot;,// get post</span><br><span class="line">	cache:&quot;&quot;,</span><br><span class="line">	data:&quot;&quot;,</span><br><span class="line">	dataType:&quot;&quot;,</span><br><span class="line">	success:function()&#123;&#125;,</span><br><span class="line">	error: function()&#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>url:请求地址。</p>
<hr>
<p>cache:要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p>
<hr>
<p>data: Object对象，JSON</p>
<hr>
<p>dataType是返回的数据类型。</p>
<p>dataType:要求为String类型的参数，预期服务器返回的数据类型。<br>如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：</p>
<p>xml：返回XML文档，可用JQuery处理。</p>
<p>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。</p>
<p>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。</p>
<p>json：返回JSON数据。</p>
<p>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。</p>
<p>text：返回纯文本字符串。</p>
<hr>
<p>success/error function(){}成功或者失败回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get();</span><br><span class="line">$.post();</span><br><span class="line">$.getJSON();</span><br></pre></td></tr></table></figure>
<p>和 <code>$.ajax()</code>类似</p>
<p><img src="/2016/07/20/前后台数据交互方式总结/201608031301.PNG" alt></p>
<p>$.getJSON() 调用get()<br><img src="/2016/07/20/前后台数据交互方式总结/201608031249.PNG" alt></p>
<p>$.get() $.post() 调用ajax()</p>
<p>但是jQuery<strong>不支持异步上传文件</strong>，我们可以引入AjaxFileUpload插件来实现。</p>
<p>#####</p>
]]></content>
      
        <categories>
            
            <category> 数据交互 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaEE 资源路径问题]]></title>
      <url>https://muxiaobai.github.io/2016/07/19/JavaEE-%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="JavaEE下的路径（Struts，Servlet）"><a href="#JavaEE下的路径（Struts，Servlet）" class="headerlink" title="JavaEE下的路径（Struts，Servlet）"></a>JavaEE下的路径（Struts，Servlet）</h2><a id="more"></a>
<h5 id="strtus-xml"><a href="#strtus-xml" class="headerlink" title="strtus.xml"></a>strtus.xml</h5><p><img src="/2016/07/19/JavaEE-资源路径问题/201607191615.PNG" alt="struts.xml"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=&quot;order_balance&quot; class=&quot;orderAction&quot; method=&quot;balance&quot;&gt;</span><br><span class="line">	&lt;!-- 指定被下载资源的位置 --&gt;</span><br><span class="line">	&lt;param name=&quot;inputPath&quot;&gt;/WEB-INF/download&lt;/param&gt;</span><br><span class="line">		&lt;!-- 配置结果类型为stream的结果 --&gt;</span><br><span class="line">	&lt;result type=&quot;stream&quot; name=&quot;balance&quot;&gt;</span><br><span class="line">		&lt;!-- 指定下载文件的文件类型 动态获取getMimeType()--&gt;</span><br><span class="line">		&lt;param name=&quot;contentType&quot;&gt;$&#123;mimeType&#125;&lt;/param&gt;</span><br><span class="line">		&lt;!-- 指定由getBalance()方法返回被下载文件的InputStream --&gt;</span><br><span class="line">		&lt;param name=&quot;inputName&quot;&gt;balance&lt;/param&gt;</span><br><span class="line">		&lt;param name=&quot;contentDisposition&quot;&gt;attachment;filename=&quot;$&#123;fileName&#125;&quot;&lt;/param&gt;</span><br><span class="line">	&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure>
<h5 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h5><p><img src="/2016/07/19/JavaEE-资源路径问题/201607191616.PNG" alt="OrderAction"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package Action;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import org.apache.struts2.ServletActionContext;</span><br><span class="line">import Model.Order;</span><br><span class="line">import SQLModel.Pager;</span><br><span class="line">import Service.OrderService;</span><br><span class="line">import Util.POIWriteUtil;</span><br><span class="line"></span><br><span class="line">public class OrderAction extends  SuperAction&lt;Order&gt;&#123;</span><br><span class="line">	private static final long serialVersionUID = 1L;</span><br><span class="line">	private OrderService orderService;</span><br><span class="line">	private String fileName;</span><br><span class="line">	private String inputPath;</span><br><span class="line">	private String mimeType;</span><br><span class="line">	private InputStream balance;</span><br><span class="line">	public void setFileName(String fileName) &#123;</span><br><span class="line">		this.fileName = fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getFileName() &#123;</span><br><span class="line">		return fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setInputPath(String inputPath) &#123;</span><br><span class="line">		this.inputPath = inputPath;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getMimeType() &#123;</span><br><span class="line">		return mimeType;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setOrderService(OrderService orderService) &#123;</span><br><span class="line">		this.orderService = orderService;</span><br><span class="line">	&#125;</span><br><span class="line">	public String balance()&#123;</span><br><span class="line">		//System.out.println(&quot;=========balance===========&quot;);</span><br><span class="line">		//System.out.println(application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;+File.separator);</span><br><span class="line">		String realPath=application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;;</span><br><span class="line">		POIWriteUtil.makeBalance(orderService.findByNumberBalance(fileName.substring(0, 6)),realPath,fileName);</span><br><span class="line">		//System.out.println(&quot;====================&quot;);</span><br><span class="line">		return &quot;balance&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	public InputStream getBalance() &#123;  </span><br><span class="line">       //获取资源类型</span><br><span class="line">		//System.out.println(application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;+File.separator);</span><br><span class="line">		//String apString=application.getRealPath(&quot;/&quot;)+ &quot;WEB-INF&quot;+File.separator+&quot;download&quot;;</span><br><span class="line">		//System.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));</span><br><span class="line">		mimeType = application.getMimeType(inputPath+File.separator+fileName);</span><br><span class="line">		 return application.getResourceAsStream(inputPath+File.separator+fileName);</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="SuperAction"><a href="#SuperAction" class="headerlink" title="SuperAction"></a>SuperAction</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package Action;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.ParameterizedType;</span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import org.apache.struts2.interceptor.ServletRequestAware;</span><br><span class="line">import org.apache.struts2.interceptor.ServletResponseAware;</span><br><span class="line">import org.apache.struts2.util.ServletContextAware;</span><br><span class="line">import org.springframework.beans.BeansException;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContextAware;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">import com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"></span><br><span class="line">//所有Action的父类</span><br><span class="line">public class SuperAction&lt;T&gt; extends ActionSupport</span><br><span class="line">		implements ApplicationContextAware,ServletRequestAware, ServletResponseAware, ServletContextAware,ModelDriven&lt;T&gt; &#123;</span><br><span class="line">	/**</span><br><span class="line">	 * </span><br><span class="line">	 */</span><br><span class="line">	private static final long serialVersionUID = 1L;</span><br><span class="line">	protected HttpServletRequest request;// 请求对象</span><br><span class="line">	protected HttpServletResponse response;// 响应对象</span><br><span class="line">	protected HttpSession session;// 会话对象</span><br><span class="line">	protected ServletContext application;// 全局对象</span><br><span class="line">	protected ApplicationContext ctx;</span><br><span class="line">	protected T model = null;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	public void setServletContext(ServletContext application) &#123;</span><br><span class="line">		this.application = application;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setServletResponse(HttpServletResponse response) &#123;</span><br><span class="line">		this.response = response;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setServletRequest(HttpServletRequest request) &#123;</span><br><span class="line">		this.request = request;</span><br><span class="line">		this.session = this.request.getSession();</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void setApplicationContext(ApplicationContext ctx) throws BeansException &#123;</span><br><span class="line">		this.ctx=ctx;</span><br><span class="line">	&#125;</span><br><span class="line">	// 在拦截器执行此方法的时候Action的构造方法已经创建,所以Model中有值</span><br><span class="line">	public T getModel() &#123;</span><br><span class="line">		return model;</span><br><span class="line">	&#125;</span><br><span class="line">	@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="line">	public SuperAction() &#123;</span><br><span class="line">		ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();</span><br><span class="line">		Class clazz = (Class) type.getActualTypeArguments()[0];</span><br><span class="line">		try &#123;</span><br><span class="line">			model = (T) clazz.newInstance();</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>POIWriteUtil作用：通过POI生成excel文件</p>
<h5 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;order_balance?fileName=201607.xls&quot;&gt;下载账单&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<h4 id="上传，新增"><a href="#上传，新增" class="headerlink" title="上传，新增"></a>上传，新增</h4><p>application对象是我的应用全局变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application.getRealPath(&quot;/&quot;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(application.getRealPath(&quot;/&quot;));</span><br><span class="line">D:\WorkSpace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\SSH\</span><br></pre></td></tr></table></figure>
<h5 id="找到的是eclipse的工作路径，生成的文件也在"><a href="#找到的是eclipse的工作路径，生成的文件也在" class="headerlink" title="找到的是eclipse的工作路径，生成的文件也在"></a>找到的是eclipse的工作路径，生成的文件也在</h5><h4 id="下载通过-lt-struts-xml-lt-param-name-”inputPath”-WEB-INF-download-lt-param-配置inputPath"><a href="#下载通过-lt-struts-xml-lt-param-name-”inputPath”-WEB-INF-download-lt-param-配置inputPath" class="headerlink" title="下载通过&lt;struts.xml>&lt;param name=”inputPath”>/WEB-INF/download&lt;/param>配置inputPath"></a>下载通过&lt;struts.xml>&lt;param name=”inputPath”>/WEB-INF/download&lt;/param>配置inputPath</h4><p>通过Struts拦截器调用setFileName()获取前台的fileName<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application.getResourceAsStream(inputPath+File.separator+fileName);</span><br></pre></td></tr></table></figure></p>
<h4 id="常见错误分析"><a href="#常见错误分析" class="headerlink" title="常见错误分析"></a>常见错误分析</h4><h5 id="Can-not-find-a-java-io-InputStream-with-the-name-balance-in-the-invocation-stack-Check-the-tag-specified-for-this-action"><a href="#Can-not-find-a-java-io-InputStream-with-the-name-balance-in-the-invocation-stack-Check-the-tag-specified-for-this-action" class="headerlink" title="Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the  tag specified for this action."></a>Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the <param name="inputName"> tag specified for this action.</h5><p>实际上我已经定义了balance，但是报错说的balance找不到实际上是因为获取不到文件导致的</p>
<p>System.out.println(application.getResourceAsStream(inputPath+File.separator+fileName));等于null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">Stacktraces</span><br><span class="line">java.lang.IllegalArgumentException: Can not find a java.io.InputStream with the name [balance] in the invocation stack. Check the &lt;param name=&quot;inputName&quot;&gt; tag specified for this action.</span><br><span class="line">    org.apache.struts2.dispatcher.StreamResult.doExecute(StreamResult.java:237)</span><br><span class="line">    org.apache.struts2.dispatcher.StrutsResultSupport.execute(StrutsResultSupport.java:191)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.executeResult(DefaultActionInvocation.java:372)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:276)</span><br><span class="line">    org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)</span><br><span class="line">    org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)</span><br><span class="line">    com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">    org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)</span><br><span class="line">    org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)</span><br><span class="line">    org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</span><br><span class="line">    org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</span><br><span class="line">    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class="line">    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class="line">    org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)</span><br><span class="line">    org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">    org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class="line">    org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class="line">    org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)</span><br><span class="line">    org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)</span><br><span class="line">    org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)</span><br><span class="line">    org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)</span><br><span class="line">    org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)</span><br><span class="line">    org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)</span><br><span class="line">    org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)</span><br><span class="line">    org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)</span><br><span class="line">    org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)</span><br><span class="line">    org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)</span><br><span class="line">    org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)</span><br><span class="line">    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)</span><br><span class="line">    org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)</span><br><span class="line">    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">    org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">    java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure></p>
<h5 id="java-io-IOException-系统找不到指定的路径。"><a href="#java-io-IOException-系统找不到指定的路径。" class="headerlink" title="java.io.IOException: 系统找不到指定的路径。"></a>java.io.IOException: 系统找不到指定的路径。</h5><p>在上传文件的时候, 把realPath写错了，找不到路径，无法保存文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application.getRealPath(&quot;/&quot;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">2016-07-19 16:55:04,917 -HHH000397: Using ASTQueryTranslatorFactory -INFO  -org.hibernate.hql.internal.QueryTranslatorFactoryInitiator:47 -[http-nio-8080-exec-42:8591ms]</span><br><span class="line"> java.io.IOException: 系统找不到指定的路径。</span><br><span class="line">	at java.io.WinNTFileSystem.createFileExclusively(Native Method)</span><br><span class="line">	at java.io.File.createNewFile(File.java:1012)</span><br><span class="line">	at Util.POIWriteUtil.makeHSSF(POIWriteUtil.java:38)</span><br><span class="line">	at Util.POIWriteUtil.makeBalance(POIWriteUtil.java:29)</span><br><span class="line">	at Action.OrderAction.balance(OrderAction.java:65)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:483)</span><br><span class="line">	at ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:871)</span><br><span class="line">	at ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1294)</span><br><span class="line">	at ognl.ObjectMethodAccessor.callMethod(ObjectMethodAccessor.java:68)</span><br><span class="line">	at com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethodWithDebugInfo(XWorkMethodAccessor.java:117)</span><br><span class="line">	at com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor.callMethod(XWorkMethodAccessor.java:108)</span><br><span class="line">	at ognl.OgnlRuntime.callMethod(OgnlRuntime.java:1370)</span><br><span class="line">	at ognl.ASTMethod.getValueBody(ASTMethod.java:90)</span><br><span class="line">	at ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212)</span><br><span class="line">	at ognl.SimpleNode.getValue(SimpleNode.java:258)</span><br><span class="line">	at ognl.Ognl.getValue(Ognl.java:494)</span><br><span class="line">	at ognl.Ognl.getValue(Ognl.java:458)</span><br><span class="line">	at com.opensymphony.xwork2.ognl.OgnlUtil$2.execute(OgnlUtil.java:315)</span><br><span class="line">	at com.opensymphony.xwork2.ognl.OgnlUtil.compileAndExecute(OgnlUtil.java:346)</span><br><span class="line">	at com.opensymphony.xwork2.ognl.OgnlUtil.getValue(OgnlUtil.java:313)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invokeAction(DefaultActionInvocation.java:430)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invokeActionOnly(DefaultActionInvocation.java:290)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:251)</span><br><span class="line">	at org.apache.struts2.interceptor.DeprecationInterceptor.intercept(DeprecationInterceptor.java:41)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at org.apache.struts2.interceptor.debugging.DebuggingInterceptor.intercept(DebuggingInterceptor.java:256)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor.doIntercept(DefaultWorkflowInterceptor.java:168)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.validator.ValidationInterceptor.doIntercept(ValidationInterceptor.java:265)</span><br><span class="line">	at org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor.doIntercept(AnnotationValidationInterceptor.java:76)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor.intercept(ConversionErrorInterceptor.java:138)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.ParametersInterceptor.doIntercept(ParametersInterceptor.java:229)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.StaticParametersInterceptor.intercept(StaticParametersInterceptor.java:191)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at org.apache.struts2.interceptor.MultiselectInterceptor.intercept(MultiselectInterceptor.java:73)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at org.apache.struts2.interceptor.DateTextFieldInterceptor.intercept(DateTextFieldInterceptor.java:125)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at org.apache.struts2.interceptor.CheckboxInterceptor.intercept(CheckboxInterceptor.java:91)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at org.apache.struts2.interceptor.FileUploadInterceptor.intercept(FileUploadInterceptor.java:253)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor.intercept(ModelDrivenInterceptor.java:100)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor.intercept(ScopedModelDrivenInterceptor.java:141)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.ChainingInterceptor.intercept(ChainingInterceptor.java:145)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.PrepareInterceptor.doIntercept(PrepareInterceptor.java:171)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.MethodFilterInterceptor.intercept(MethodFilterInterceptor.java:98)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.I18nInterceptor.intercept(I18nInterceptor.java:140)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at org.apache.struts2.interceptor.ServletConfigInterceptor.intercept(ServletConfigInterceptor.java:164)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.AliasInterceptor.intercept(AliasInterceptor.java:193)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor.intercept(ExceptionMappingInterceptor.java:189)</span><br><span class="line">	at com.opensymphony.xwork2.DefaultActionInvocation.invoke(DefaultActionInvocation.java:245)</span><br><span class="line">	at org.apache.struts2.impl.StrutsActionProxy.execute(StrutsActionProxy.java:54)</span><br><span class="line">	at org.apache.struts2.dispatcher.Dispatcher.serviceAction(Dispatcher.java:567)</span><br><span class="line">	at org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction(ExecuteOperations.java:81)</span><br><span class="line">	at org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter.doFilter(StrutsPrepareAndExecuteFilter.java:99)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class="line">	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</span><br><span class="line">	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)</span><br><span class="line">	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)</span><br><span class="line">	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)</span><br><span class="line">	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)</span><br><span class="line">	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)</span><br><span class="line">	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)</span><br><span class="line">	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)</span><br><span class="line">	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)</span><br><span class="line">	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)</span><br><span class="line">	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)</span><br><span class="line">	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)</span><br><span class="line">	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)</span><br><span class="line">	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Struts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sublime 下运行Java文件]]></title>
      <url>https://muxiaobai.github.io/2016/07/19/Sublime-%E4%B8%8B%E8%BF%90%E8%A1%8CJava%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="Sublime下运行java文件"><a href="#Sublime下运行java文件" class="headerlink" title="Sublime下运行java文件"></a>Sublime下运行java文件</h2><a id="more"></a>
<h4 id="首先确保命令行可以正常使用javac和java，请自行百度。"><a href="#首先确保命令行可以正常使用javac和java，请自行百度。" class="headerlink" title="首先确保命令行可以正常使用javac和java，请自行百度。"></a>首先确保命令行可以正常使用javac和java，请自行百度。</h4><h4 id="在JDK的bin目录下新建runJava-bat文件，右键选编辑，复制粘贴如下代码并保存："><a href="#在JDK的bin目录下新建runJava-bat文件，右键选编辑，复制粘贴如下代码并保存：" class="headerlink" title="在JDK的bin目录下新建runJava.bat文件，右键选编辑，复制粘贴如下代码并保存："></a>在JDK的bin目录下新建runJava.bat文件，右键选编辑，复制粘贴如下代码并保存：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd %~dp1</span><br><span class="line">echo Compiling %~nx1......</span><br><span class="line">if EXIST %~n1.class (</span><br><span class="line">del %~n1.class</span><br><span class="line">)</span><br><span class="line">javac -encoding UTF-8 %~nx1</span><br><span class="line">if exist %~n1.class (</span><br><span class="line">echo ------OUTPUT------</span><br><span class="line">java %~n1</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="打开Sublime-Text-3，依次点击Preference-Browse-Packages，在打开的窗口中双击User文件夹，新建文件JavaC-sublime-build，用记事本打开，粘贴下面的代码并保存关闭："><a href="#打开Sublime-Text-3，依次点击Preference-Browse-Packages，在打开的窗口中双击User文件夹，新建文件JavaC-sublime-build，用记事本打开，粘贴下面的代码并保存关闭：" class="headerlink" title="打开Sublime Text 3，依次点击Preference, Browse Packages，在打开的窗口中双击User文件夹，新建文件JavaC.sublime-build，用记事本打开，粘贴下面的代码并保存关闭："></a>打开Sublime Text 3，依次点击Preference, Browse Packages，在打开的窗口中双击User文件夹，新建文件JavaC.sublime-build，用记事本打开，粘贴下面的代码并保存关闭：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;shell_cmd&quot;: &quot;runJava.bat \&quot;$file\&quot;&quot;,</span><br><span class="line">&quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,</span><br><span class="line">&quot;selector&quot;: &quot;source.java&quot;,</span><br><span class="line">&quot;encoding&quot;: &quot;UTF-8&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目的是</p>
<blockquote>
<p>将第一行的“shell_cmd”: javac \”$file\””改成”shell_cmd”: “runJava.bat \”$file\””</p>
</blockquote>
<p>或者通过Package Resource Viewer来找到要修改的文件</p>
<h4 id="安装Package-Resource-Viewer。同上面的步骤，打开package-control，输入PackageResourceViewer-Open-Resource，回车后输入java，回车后输入Javac-sublime-build-就能够打开我们所需要修改的文件"><a href="#安装Package-Resource-Viewer。同上面的步骤，打开package-control，输入PackageResourceViewer-Open-Resource，回车后输入java，回车后输入Javac-sublime-build-就能够打开我们所需要修改的文件" class="headerlink" title="安装Package Resource Viewer。同上面的步骤，打开package control，输入PackageResourceViewer:Open Resource，回车后输入java，回车后输入Javac.sublime-build,就能够打开我们所需要修改的文件"></a>安装Package Resource Viewer。同上面的步骤，打开package control，输入PackageResourceViewer:Open Resource，回车后输入java，回车后输入Javac.sublime-build,就能够打开我们所需要修改的文件</h4><blockquote>
<p>主要是用批处理文件处理sublime中的文件，用runJava.bat 代替javac和java</p>
</blockquote>
<h2 id="保存后即可在Sublime-Text-3中按-Ctrl-B-编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错"><a href="#保存后即可在Sublime-Text-3中按-Ctrl-B-编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错" class="headerlink" title="保存后即可在Sublime Text 3中按 Ctrl+B 编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错"></a>保存后即可在Sublime Text 3中按 <strong><code>Ctrl+B</code></strong> 编译Java运行文件，这种方法的缺点是无法在控制台输入，如果程序需要输入内容，则直接报错</h2>]]></content>
      
        <categories>
            
            <category> Sublime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Sublime </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 基础Shell脚本]]></title>
      <url>https://muxiaobai.github.io/2016/07/09/Linux-%E5%9F%BA%E7%A1%80Shell%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h1 id="bin-bash"><a href="#bin-bash" class="headerlink" title="#!/bin/bash"></a><code>#!/bin/bash</code></h1><h2 id="Bash变量"><a href="#Bash变量" class="headerlink" title="Bash变量"></a>Bash变量</h2><h4 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h4><p><code>变量名=变量值</code> 默认变量值为字符串</p>
<p><code>echo $变量名</code></p>
<p>变量叠加  x=”$x”other | x=${x}other</p>
<p><code>set</code>：查询所有变量</p>
<p><code>set -u</code> 然后调用未声明的变量会报错</p>
<p><code>unset 变量名</code>：删除变量</p>
<p><code>exoprt</code> 变成系统变量(实质上是<code>declare</code>)</p>
<p><code>env</code>:只能看到环境变量<br><a id="more"></a></p>
<h4 id="常见系统变量"><a href="#常见系统变量" class="headerlink" title="常见系统变量"></a>常见系统变量</h4><p>HOSTNAME SHELL SSH USER  HOME MAIL TERM</p>
<p>PATH</p>
<p><code>locale</code> 支持的语系 LANG系统主语系 LC_ALL</p>
<p>下次开机的默认语系:/etc/sysconfig/i18n</p>
<p>PS1 命令提示符变量</p>
<h4 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h4><p>$n </p>
<p>$0 命令本身</p>
<p>$1-9 ${10} 参数</p>
<p>$*  所有传入的参数是一个整体</p>
<p>$@   所有传入的参数是独立的，有几个参数，循环几次</p>
<p>$#  返回传入参数的个数</p>
<hr>
<p><code>read</code> 接受键盘输入(交互)</p>
<h5 id="p-输入"><a href="#p-输入" class="headerlink" title="-p 输入"></a>-p 输入</h5><h5 id="t-等待时间"><a href="#t-等待时间" class="headerlink" title="-t 等待时间"></a>-t 等待时间</h5><h5 id="s-隐藏"><a href="#s-隐藏" class="headerlink" title="-s 隐藏"></a>-s 隐藏</h5><h5 id="n-指定输入的字节数"><a href="#n-指定输入的字节数" class="headerlink" title="-n 指定输入的字节数"></a>-n 指定输入的字节数</h5><hr>
<h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><p>$? 返回上一条命令的执行状态</p>
<p>正确执行 返回0 | 执行错误 返回2 | 命令找不到 返回127</p>
<p>$$ 返回当前进程的PID号</p>
<p>$! 返回后台运行的最后一个进程的PID号</p>
<h2 id="Shell运算符"><a href="#Shell运算符" class="headerlink" title="Shell运算符"></a>Shell运算符</h2><blockquote>
<p>弱类型，类似javascript</p>
</blockquote>
<p><code>declare</code> [+/-] [i/a/]</p>
<p><img src="/2016/07/09/Linux-基础Shell脚本/201607101216.PNG" alt="变量参数"></p>
<p><code>expr</code> <code>let</code></p>
<h5 id="运算式-运算式"><a href="#运算式-运算式" class="headerlink" title="$((运算式)) $[运算式]"></a>$((运算式)) $[运算式]</h5><p><img src="/2016/07/09/Linux-基础Shell脚本/201607101227.PNG" alt="变量参数"></p>
<h5 id="变量测试"><a href="#变量测试" class="headerlink" title="变量测试"></a>变量测试</h5><p><img src="/2016/07/09/Linux-基础Shell脚本/201607101231.PNG" alt="变量参数"></p>
<h2 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h2><p>重新加载配置文件: <code>source 配置文件</code>  <code>. 配置文件</code></p>
<p>正常登陆过程，主要的文件:</p>
<p>/etc/profile</p>
<p>/etc/profile.d/*.sh</p>
<p>~/.bash_profile</p>
<p>~/.bashrc</p>
<p>/etc/bashrc</p>
<p>加载文件顺序&gt;&gt;[login而不是开机]</p>
<p><img src="/2016/07/09/Linux-基础Shell脚本/201607101243.PNG" alt="变量参数"></p>
<p>注销</p>
<p>~/.bash_logout</p>
<p>历史命令</p>
<p>~/.bash_history</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p>常用的shell</p>
<h5 id="判断文件存在"><a href="#判断文件存在" class="headerlink" title="判断文件存在"></a>判断文件存在</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -e file ] then</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h5 id="判断容器是否启动成功"><a href="#判断容器是否启动成功" class="headerlink" title="判断容器是否启动成功"></a>判断容器是否启动成功</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if docker ps  | grep $&#123;PROJECT_NAME&#125;; then</span><br><span class="line">	echo &quot;Start Docker Container: $&#123;PROJECT_NAME&#125;-$&#123;PROJECT_VERSION&#125; Success&quot;</span><br><span class="line">else </span><br><span class="line">	echo &quot;Start Docker Container: $&#123;PROJECT_NAME&#125;-$&#123;PROJECT_VERSION&#125; Error&quot;</span><br><span class="line">	return 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>判断8080端口是否正常监听中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">started=0</span><br><span class="line">n=1</span><br><span class="line">echo &quot;try $n times  service starting&quot;</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">	if test $n -gt 20</span><br><span class="line">	then</span><br><span class="line">		echo &quot; service failed&quot;</span><br><span class="line">		started=1</span><br><span class="line">		break</span><br><span class="line">	fi</span><br><span class="line">	sleep 10</span><br><span class="line">	n=$(($n+1))</span><br><span class="line">	echo &quot;try $n times  service starting &quot;</span><br><span class="line">	port=`netstat -lntp | egrep &quot;8080&quot; | wc -l`</span><br><span class="line">	if [ $&#123;port&#125; -gt 0 ]; then</span><br><span class="line">		echo &quot; service is started&quot;</span><br><span class="line">		break;</span><br><span class="line">	fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h4 id="ssh免登陆"><a href="#ssh免登陆" class="headerlink" title="ssh免登陆"></a>ssh免登陆</h4><p>1.客户端生成公私钥<br>本地客户端生成公私钥：（一路回车默认即可）</p>
<p>ssh-keygen</p>
<p>上面这个命令会在用户目录.ssh文件夹下创建公私钥</p>
<p>cd ~/.ssh</p>
<p>ls<br>下创建两个密钥：</p>
<p>id_rsa （私钥）<br>id_rsa.pub (公钥)</p>
<p>2.上传公钥到服务器<br>这里测试用的服务器地址为：192.168.235.22<br>用户为：root</p>
<p>ssh-copy-id -i ~/.ssh/id_rsa.pub <a href="mailto:root@192.168.235.22" target="_blank" rel="noopener">root@192.168.235.22</a></p>
<p>上面这条命令是写到服务器上的ssh目录下去了<br>cd ~/.ssh<br>vim authorized_keys<br>可以看到客户端写入到服务器的 id_rsa.pub （公钥）内容。</p>
<p>3.测试免密登录<br>客户端通过ssh连接远程服务器，就可以免密登录了。<br>ssh <a href="mailto:root@192.168.235.22" target="_blank" rel="noopener">root@192.168.235.22</a><br>exit<br>同时也可sftp</p>
<p><a href="https://github.com/muxiaobai/shell/tree/master/linux" target="_blank" rel="noopener">导入导出pg数据库，修改jar包内的某一个文件</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 基础命令总结2 用户 权限 服务]]></title>
      <url>https://muxiaobai.github.io/2016/07/07/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%932/</url>
      <content type="html"><![CDATA[<h2 id="打印、输出"><a href="#打印、输出" class="headerlink" title="打印、输出"></a>打印、输出</h2><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><p><code>lpr</code>  <code>lpq</code> <code>lprm</code></p>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p><code>echo</code>  <code>printf</code> <code>yes</code> <code>seq</code> <code>clear</code><br><a id="more"></a></p>
<h2 id="用户、主机环境"><a href="#用户、主机环境" class="headerlink" title="用户、主机环境"></a>用户、主机环境</h2><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p><code>logname</code>: 登录名</p>
<p><code>whoami</code>: 当前有效的用户名</p>
<p><code>id</code>: pid和gid</p>
<p><code>who</code>: 详细列出所有登录用户，看谁正在使用，展示IP</p>
<p><code>users</code>: 简单列出所有登录用户</p>
<p><code>finger</code>: 打印用户信息</p>
<p><code>last</code>: 确定之前谁在什么时候登录这台主机，历史登录用户</p>
<h4 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h4><p><code>printenv</code>:打印环境变量</p>
<p><code>uname</code>: 系统内核信息（Unix name）</p>
<h5 id="a-所有"><a href="#a-所有" class="headerlink" title="-a 所有"></a>-a 所有</h5><h5 id="–r内核版本（release）"><a href="#–r内核版本（release）" class="headerlink" title="–r内核版本（release）"></a>–r内核版本（release）</h5><h5 id="s内核名称"><a href="#s内核名称" class="headerlink" title="-s内核名称"></a>-s内核名称</h5><p><code>hostname</code>:系统主机名</p>
<hr>
<p>-s, –short           short host name</p>
<p>-a, –alias           alias names</p>
<p>-i, –ip-address      addresses for the hostname  </p>
<p>-I, –all-ip-addresses all addresses for the host</p>
<p>-f, –fqdn, –long    long host name (FQDN)</p>
<p>-A, –all-fqdns        all long host names (FQDNs)</p>
<p>-d, –domain          DNS domain name <code>dominname</code> </p>
<p>-y, –yp, –nis       NIS/YP domainname   <code>dnsdominname</code> <code>ypdominname</code> <code>nisdominname</code></p>
<p>-F, –file            read hostname or NIS domainname from given file   </p>
<hr>
<p><code>history</code> 历史命令</p>
<h2 id="权限-目录和文件-和用户，组"><a href="#权限-目录和文件-和用户，组" class="headerlink" title="权限(目录和文件)和用户，组"></a>权限(目录和文件)和用户，组</h2><h4 id="rwx权限-读写执行"><a href="#rwx权限-读写执行" class="headerlink" title="rwx权限 读写执行"></a>rwx权限 读写执行</h4><blockquote>
<p>所有者 所属者 其他人</p>
</blockquote>
<p>默认：<code>umask</code> </p>
<p>改变权限：<code>chmod</code> <code>chown</code> <code>chgrp</code></p>
<h4 id="高级权限管理ACL-SODO-文件特殊权限"><a href="#高级权限管理ACL-SODO-文件特殊权限" class="headerlink" title="高级权限管理ACL SODO 文件特殊权限"></a>高级权限管理ACL SODO 文件特殊权限</h4><h5 id="ACL权限-解决用户身份不够的情况-目录和文件"><a href="#ACL权限-解决用户身份不够的情况-目录和文件" class="headerlink" title="ACL权限(解决用户身份不够的情况)(目录和文件)"></a>ACL权限(解决用户身份不够的情况)(目录和文件)</h5><blockquote>
<p>首先要看ACL权限是否开启 <code>dumpe2fs -h /dev/xvdal</code></p>
</blockquote>
<blockquote>
<p><code>setfacl</code></p>
</blockquote>
<blockquote>
<p><code>getfacl</code> 文件或目录后面有一个[+]号</p>
</blockquote>
<blockquote>
<p>mask 用来控制最大权限</p>
</blockquote>
<h5 id="sudo-超级用户root执行的系统命令-命令"><a href="#sudo-超级用户root执行的系统命令-命令" class="headerlink" title="sudo(超级用户root执行的系统命令)(命令)"></a>sudo(超级用户root执行的系统命令)(命令)</h5><blockquote>
<p>visudo(修改/etc/sudoers.tmp文件)<br>sudo -l 查看被添加的权限</p>
</blockquote>
<h5 id="SetUID-SetGID-Sticky-BIT-文件特殊权限-一般不使用"><a href="#SetUID-SetGID-Sticky-BIT-文件特殊权限-一般不使用" class="headerlink" title="SetUID SetGID Sticky BIT(文件特殊权限)(一般不使用)"></a>SetUID SetGID Sticky BIT(文件特殊权限)(一般不使用)</h5><blockquote>
<p>SetUID 可执行文件有执行权限的时候才有SUID  USER[s=S+x]S无效</p>
</blockquote>
<blockquote>
<p><code>chmod 4755[u+s] 文件名</code></p>
</blockquote>
<blockquote>
<p><code>chmod 0755[u-s] 文件名</code></p>
</blockquote>
<blockquote>
<p>SetGID 可执行文件有执行权限的时候才有SGID,目录的rx权限  GROUP组身份是我</p>
</blockquote>
<blockquote>
<p><code>chmod 2755[g+s] 文件名</code></p>
</blockquote>
<blockquote>
<p><code>chmod 0755[u-s] 文件名</code></p>
</blockquote>
<blockquote>
<p>Sticky BIT  SBIT粘着位作用,仅针对目录，其他人有rwx权限 </p>
</blockquote>
<blockquote>
<p><code>chmod 1755[o+t] 目录</code></p>
</blockquote>
<blockquote>
<p><code>chmod 0755[o-t] 目录</code></p>
</blockquote>
<blockquote>
<p>i[insert插入]/a[append追加] 不可改变位权限</p>
</blockquote>
<blockquote>
<p><code>chattr [a/i]</code></p>
</blockquote>
<blockquote>
<p><code>lsattr</code></p>
</blockquote>
<p><code>pam</code> <code>selinux</code></p>
<h4 id="用户："><a href="#用户：" class="headerlink" title="用户："></a>用户：</h4><p><code>useradd</code> <code>userdel</code> <code>usermod</code></p>
<h4 id="所属组："><a href="#所属组：" class="headerlink" title="所属组："></a>所属组：</h4><p><code>groups</code> <code>groupadd</code> <code>groupdel</code> <code>groupmod</code></p>
<p>useradd 用户名 -g 组名–G 组名-d Home 目录名-p 密码</p>
<p>useradd usenmae –g usenmae  –p ora123 </p>
<p>passwd  username<br>/etc/passwd<br>cat /etc/group  查看所有所属组</p>
<p>change owner  change modified</p>
<p>chmod -R g+w  group增加 write权限</p>
<p>chown -R owner:group /home/newname  把/home/newname的所有者改为owner，所属组改为group</p>
<p>-R 递归</p>
<p>读r=4  写w=2  执行x=1  用户u，组g，其他用户o</p>
<p>常见 文件644 -rx-r–r–   drwxr-xr-x 文件夹755</p>
<ul>
<li>u 代表所有者（user）</li>
<li>g 代表所有者所在的组群（group）</li>
<li>o 代表其他人，但不是u和g （other）</li>
<li>a 代表全部的人，也就是包括u，g和o</li>
<li>r 表示文件可以被读（read）</li>
<li>w 表示文件可以被写（write）</li>
<li>x 表示文件可以被执行（如果它是程序的话）</li>
</ul>
<p><code>chmod go-rw xxx.xxx</code></p>
<h2 id="网络和连接登录，上传下载文件"><a href="#网络和连接登录，上传下载文件" class="headerlink" title="网络和连接登录，上传下载文件"></a>网络和连接登录，上传下载文件</h2><p><code>arp</code>: 硬件地址(IP —-&gt; MAC地址)</p>
<p><code>traceroute</code>: 到某一个地址的路由信息</p>
<p><code>route</code>: 路由表</p>
<p><code>ifconfig</code>: 配置网络信息</p>
<p><code>ping</code>: 检测网络畅通</p>
<p><code>host</code>: 检测分析域名是否正常</p>
<p><code>netstat</code>: 查看网络状态、端口状态 -tulp   -tnaop  ☆</p>
<p>-a 端口<br>-t tcp<br>-u udp<br>-l listener<br>-p program name </p>
<pre><code>netstat -n | awk &apos;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&apos;
</code></pre><p>解析：</p>
<ul>
<li>CLOSED  //无连接是活动的或正在进行</li>
<li>LISTEN  //服务器在等待进入呼叫</li>
<li>SYN_RECV  //一个连接请求已经到达，等待确认</li>
<li>SYN_SENT  //应用已经开始，打开一个连接</li>
<li>ESTABLISHED  //正常数据传输状态/当前并发连接数</li>
<li>FIN_WAIT1  //应用说它已经完成</li>
<li>FIN_WAIT2  //另一边已同意释放</li>
<li>ITMED_WAIT  //等待所有分组死掉</li>
<li>CLOSING  //两边同时尝试关闭</li>
<li>TIME_WAIT  //另一边已初始化一个释放</li>
<li>LAST_ACK  //等待所有分组死掉</li>
</ul>
<p><code>ip</code>: iproute2中的命令(以上所有命令基本上都可以用这个命令来使用)</p>
<p><code>net</code>: 无</p>
<p><code>msg</code>:禁用</p>
<p><code>nbtstat</code>:  无</p>
<p><code>wget</code>: 下载资源</p>
<p><code>curl</code> : </p>
<p>[url]</p>
<p>-X POST GET  方法<br>-H “Content-Type:application/json” 请求头Header<br>-F “filename=@/home/test/file.tar.gz;type=application/octet-stream”  file文件上传<br>-d “action=del&amp;name=archer” form data<br>-u 用户<br>-v 查看请求</p>
<p>curl -XPOST <a href="http://ip:port" target="_blank" rel="noopener">http://ip:port</a> -H “Content-Type=multipart/form-data”  -F “<a href="mailto:file=@app-search-component.zip" target="_blank" rel="noopener">file=@app-search-component.zip</a>“</p>
<p>curl -u elastic:123123 <a href="http://ip:port" target="_blank" rel="noopener">http://ip:port</a></p>
<p>curl -H ‘Content-Type: application/json’ -XPOST  -u my_admin::my_pwd ‘<a href="http://localhost:8080/&#39;" target="_blank" rel="noopener">http://localhost:8080/&#39;</a> -d ‘{“password” : “123123”}’</p>
<p>curl -u ‘u:p’ -H ‘Content-type:application/json’ -XPOST -d <a href="mailto:&#39;@xxx.json" target="_blank" rel="noopener">&#39;@xxx.json</a>‘ <a href="http://ip:port/path" target="_blank" rel="noopener">http://ip:port/path</a> &gt; result.txt</p>
<p>远程连接：<code>ssh</code> <code>scp</code> <code>sftp</code> <code>telnet</code>(一般禁用) <code>ftp</code>(不常用)</p>
<p><code>sz</code> file 下载文件到本机</p>
<p><code>rz</code> 上传</p>
<p><code>scp /opt/local root@192.168.1.2:/opt/remote</code> 文件到192.168.1.2服务器上</p>
<p><code>scp  root@192.168.1.2:/opt/remote /opt/local</code> 文件从192.168.1.2服务器上拉取</p>
<p>安装rzsz</p>
<p>wget <a href="http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz" target="_blank" rel="noopener">http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz</a><br>tar zxvf lrzsz-0.12.20.tar.gz &amp;&amp; cd lrzsz-0.12.20<br>./configure –prefix=/usr/local/‘name’ &amp;&amp; make &amp;&amp; make install<br>上面安装过程默认把lsz和lrz安装到了/usr/local/bin/目录下，现在我们并不能直接使用，下面创建软链接，并命名为rz/sz：<br>cd /usr/bin</p>
<p>ln -s /usr/local/bin/lrz rz</p>
<p>ln -s /usr/local/bin/lsz sz</p>
<p>或者<br>yum install -y lrzsz</p>
<h4 id="端口占用6中方法"><a href="#端口占用6中方法" class="headerlink" title="端口占用6中方法"></a>端口占用6中方法</h4><p>ss -tnlp<br>netstat<br>lsof<br>fuser<br>nmap (NetWork Mapper) 网络监测和安全审计工具，可能无此命令<br>systemctl systemd系统的控制管理器和服务管理器 可能无此命令</p>
<p>netstat -tlnaop</p>
<p>-c 字符串  -u 用户名  -p pid</p>
<p>lsof  进程打开或使用、调用的文件信息☆</p>
<p>lsof -i:端口号 用于查看某一端口的占用情况，比如查看8000端口使用情况，lsof -i:8000</p>
<h2 id="进程、系统资源-磁盘"><a href="#进程、系统资源-磁盘" class="headerlink" title="进程、系统资源(磁盘)"></a>进程、系统资源(磁盘)</h2><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p><code>ps</code>: 查看进程</p>
<h5 id="aux-BSD"><a href="#aux-BSD" class="headerlink" title="aux BSD"></a>aux BSD</h5><h5 id="el-Linux"><a href="#el-Linux" class="headerlink" title="-el Linux"></a>-el Linux</h5><hr>
<p>ps命令常用用法（方便查看系统进程）</p>
<ul>
<li>1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。</li>
<li>2）ps -A 显示所有进程。</li>
<li>3）ps -c列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</li>
<li>4）ps -e 此参数的效果和指定”A”参数相同。</li>
<li>5）ps e 列出程序时，显示每个程序所使用的环境变量。</li>
<li>6）ps f 用ASCII字符显示树状结构，表达程序间的相互关系。</li>
<li>7）ps -H 显示树状结构，表示程序间的相互关系。</li>
<li>8）ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。</li>
<li>9）ps s 采用程序信号的格式显示程序状况。</li>
<li>10）ps S 列出程序时，包括已中断的子程序资料。</li>
<li>11）ps -t&lt;终端机编号&gt; 　指定终端机编号，并列出属于该终端机的程序的状况。</li>
<li>12）ps u 　以用户为主的格式来显示程序状况。</li>
<li>13）ps x 　显示所有程序，不以终端机来区分。</li>
</ul>
<p>最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。</p>
<p>ps -ef | grep tomcat 查看tomcat进程☆</p>
<h5 id="检查tomcat-nginx-并发数，连接数等"><a href="#检查tomcat-nginx-并发数，连接数等" class="headerlink" title="检查tomcat/nginx 并发数，连接数等"></a>检查tomcat/nginx 并发数，连接数等</h5><p>内部的应用级别的：<br>server {<br>    listen  <em>:80 default_server;<br>    server_name </em>.jiloc.com jiloc.com;<br>    location /ngx_status   {<br>        stub_status on;<br>        access_log off;</p>
<pre><code>    #allow 127.0.0.1;
    #deny all;
}
</code></pre><p>}</p>
<p>curl <a href="http://127.0.0.1/ngx_status" target="_blank" rel="noopener">http://127.0.0.1/ngx_status</a></p>
<p>浏览器 <a href="http://127.0.0.1/jStatus" target="_blank" rel="noopener">http://127.0.0.1/jStatus</a></p>
<p>外部的，命令级别的：</p>
<p>可查看所有建立连接的详细记录: netstat -nat | grep ESTABLISHED|wc  </p>
<p>netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’</p>
<p>ps -ef|grep tomcat</p>
<p>查看tomcat的线程数: ps -Lf pid|wc -l<br>查看tomcat的并发数: netstat -an|grep pid |awk ‘{count[$6]++} END{for (i in count) print(i,count[i])}’</p>
<p><a href="https://www.jiloc.com/42193.html" target="_blank" rel="noopener">Linux 下Web服务器 Nginx 状态监控 查看nginx当前并发 连接 请求状态</a><br><a href="https://blog.csdn.net/wngua/article/details/70904991" target="_blank" rel="noopener">linux进程、线程状态 tomcat线程数 并发数查看</a><br><a href="http://duanfei.iteye.com/blog/1894387" target="_blank" rel="noopener">inux查看连接数，并发数</a></p>
<hr>
<h5 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h5><hr>
<p>USER 该进程由哪个用户产生的</p>
<p>PID 该进程ID号</p>
<p>%CPU  该进程占用CPU资源的百分比</p>
<p>%MEM  该进程占用物理内存资源的百分比</p>
<p>VSZ 该进程占用虚拟内存大小，单位KB</p>
<p>RSS 该进程占用实际物理内存的大小，单位KB</p>
<p>TTY ？内核调用，该进程在哪一个终端上运行的，tty1-tty7代表本地控制台终端，tty1-tty6本地字符界面，tty7图形界面 pts/0-255虚拟终端（远程登录，远程终端）</p>
<p>STAT  进程状态  R：运行 S：睡眠 T：停止s：包含子进程+：位于后台</p>
<p>START 该进程的启动时间 </p>
<p>TIME   该进程占用CPU的运算时间</p>
<p>COMMAND　产生该进程的命令名</p>
<hr>
<p><code>pstree</code> :树形进程展示 </p>
<h5 id="p-显示进程PID（详情）"><a href="#p-显示进程PID（详情）" class="headerlink" title="-p 显示进程PID（详情）"></a>-p 显示进程PID（详情）</h5><h5 id="u-显示进程所属用户-USER"><a href="#u-显示进程所属用户-USER" class="headerlink" title="-u 显示进程所属用户(USER)"></a>-u 显示进程所属用户(USER)</h5><p><code>top</code>: 系统健康状况</p>
<p>默认每三秒更新一次 默认CPU占用率排序</p>
<p>当前时间|运行时间|用户|平均负载load average： 1min 5min 15min<br>总数| 状态（运行、睡眠、停止、僵尸：正在停止但是没有完全停止）<br>CPU | 用户us| 系统sy|  改变过优先级的用户ni|空闲率id|  等待输入/输出wa|硬中断hi |软中断si| 虚拟时间st（steal time）</p>
<p>|MEM（物理内存KB） |总total |空闲free| 使用used | 缓冲buff/cache<br>|SWAP（交换分区KB）|总total |空闲free| 使用used | </p>
<p>-d  每隔几秒更新一次</p>
<p>-c 显示全命令</p>
<p>?h：交互模式帮助</p>
<p>P：CPU使用率排序（默认）</p>
<p>M：内存使用率排序</p>
<p>N：PID排序</p>
<p>q：退出</p>
<p><code>uptime</code>: 显示启动时间和平均负载(top命令的第一行)(<code>w</code>也可以看到此信息,还有用户信息)()</p>
<p><code>kill</code>: 杀死进程(-l参数:查看信号) </p>
<h5 id="kill-–l进程ID"><a href="#kill-–l进程ID" class="headerlink" title="kill –l进程ID"></a>kill –l进程ID</h5><p>kill [-1重启] [-9强制] 进程ID</p>
<p><code>killall</code>: 进程名  </p>
<p><code>pkill</code>: 进程名</p>
<p>pkill  -t 终端号（TTY） 按终端号剔除用户（w显示用户）</p>
<p><code>nice</code>:优先级</p>
<p><code>renice</code>:优先级</p>
<h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>总核数 = 物理CPU个数 X 每颗物理CPU的核数 </p>
<p>总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</p>
<p>查看物理CPU个数<br>cat /proc/cpuinfo| grep “physical id”| sort| uniq| wc -l</p>
<p>查看每个物理CPU中core的个数(即核数)</p>
<p>cat /proc/cpuinfo| grep “cpu cores”| uniq</p>
<p>查看逻辑CPU的个数</p>
<p>cat /proc/cpuinfo| grep “processor”| wc -l</p>
<p>查看CPU信息（型号）<br>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</p>
<h4 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h4><p>挂载卸载：<code>mount</code> <code>umount</code> </p>
<p>磁盘空间：<br><code>du</code> estimates and displays the disk space used by files<br><code>du -csh xxx</code> -c  展示total -h –human-readable  -s display only a total for each argument<br><code>df</code>  df -sh 查看存储大小</p>
<p><code>dmesg</code></p>
<h5 id="dmesg-开机内核监测信息-grep-CPU"><a href="#dmesg-开机内核监测信息-grep-CPU" class="headerlink" title="dmesg 开机内核监测信息 | grep CPU"></a>dmesg 开机内核监测信息 | grep CPU</h5><p><code>free</code>  free -m </p>
<pre><code>total       used       free     shared    buffers     cached
</code></pre><p>Mem:          3072       2459        612          0        207       1803 对应OS来说只有618free buffer和cached都是已经分配，到应用还是可以使用的<br>-/+ buffers/cache:        447       2624    对于应用来说只使用了447,还有free 2624<br>Swap:         1913          0       1913</p>
<p>最终可以使用的内存为2624</p>
<h5 id="free-查看内存-b-–k-–m-–g"><a href="#free-查看内存-b-–k-–m-–g" class="headerlink" title="free 查看内存-b –k –m –g"></a>free 查看内存-b –k –m –g</h5><p><code>parted</code> <code>sfdisk</code> <code>fdisk</code> </p>
<p><code>mkfs</code> </p>
<p><code>floppy</code> </p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p><code>jobs</code>: 列出所有正在运行的任务</p>
<p><code>fg</code>: 恢复任务，前台运行该任务(foreground)</p>
<p><code>bg</code>: 将任务放到后台运行(background)</p>
<p><code>Ctrl+Z</code>: 暂停当前任务,和<code>bg</code>类似</p>
<p><code>命令后加 &amp;</code>: 将任务放到后台运行</p>
<p><code>suspend</code>: 暂停shell</p>
<h2 id="定时任务、任务控制"><a href="#定时任务、任务控制" class="headerlink" title="定时任务、任务控制"></a>定时任务、任务控制</h2><p><code>crond</code>: 定时任务</p>
<p>crond后台守护d  cron</p>
<p>service crond restart重启服务</p>
<p>chkconfig crond on检查是否启动</p>
<p><code>crontab</code>: 循环定时任务</p>
<hr>
<h5 id="e-编辑定时任务"><a href="#e-编辑定时任务" class="headerlink" title="-e 编辑定时任务"></a>-e 编辑定时任务</h5><h5 id="l-查看任务"><a href="#l-查看任务" class="headerlink" title="-l 查看任务"></a>-l 查看任务</h5><h5 id="r-删除当前用户的所有任务"><a href="#r-删除当前用户的所有任务" class="headerlink" title="-r 删除当前用户的所有任务"></a>-r 删除当前用户的所有任务</h5><hr>
<p>*  *  *  *  *  command</p>
<p>一个小时当中的第几分钟0-59</p>
<p>一天当中的第几个小时0-23</p>
<p>一个月当中的第几天1-31</p>
<p>一年中的的第几个月1-12</p>
<p>一周当中的第几天0-7（0、7代表星期天）</p>
<p>* 任意时间</p>
<p>, 一个不连续的时间</p>
<p>- 连续的时间范围</p>
<p>*/n 每隔n执行</p>
<p><code>sleep</code>: ()</p>
<p><code>watch</code>: ()</p>
<p><code>at</code>: ()</p>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>正常情况下，使用绝对路径  /etc/init.d  启动脚本位置</p>
<p>Red Hat <code>service</code> <code>ntsysv</code> </p>
<p>默认启动项：<code>chkconfig</code> </p>
<p>systemctl enable xxx-service<br>systemctl list-unit-files |  grep enabled</p>
<p>开机自启动<br>新建一个脚本zookeeper<br>为新建的脚本zookeeper添加可执行权限，命令是:chmod +x zookeeper<br>把zookeeper这个脚本添加到开机启动项里面，命令是： chkconfig –add zookeeper<br>如果想看看是否添加成功，命令是：chkconfig –list</p>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>Red Hat <code>rpm</code> <code>yum</code>   rpm -ivh xxxx.rpm ; yum install</p>
<p>Debian <code>dpkg</code> <code>aptitude</code></p>
<p><a href="http://muxiaobai.github.io/2017/09/17/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%933/">安装软件</a></p>
<p>##附件</p>
<p><code>cal</code>: 日历(Calendar)</p>
<p><code>date</code>: 日期 修改时间并同步到硬件上 date -s “2018-12-03 16:10:10” &amp; hwclock –systohc</p>
<p><code>dc</code>:计算器</p>
<p><code>expr</code>:计算器</p>
<h2 id="登录、注销和关机"><a href="#登录、注销和关机" class="headerlink" title="登录、注销和关机"></a>登录、注销和关机</h2><p><code>shutdown</code>: </p>
<h5 id="r-重启"><a href="#r-重启" class="headerlink" title="-r 重启"></a>-r 重启</h5><h5 id="h-关机"><a href="#h-关机" class="headerlink" title="-h 关机"></a>-h 关机</h5><p><code>logout</code></p>
<p><code>exit</code></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础命令 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好软件,靠机遇]]></title>
      <url>https://muxiaobai.github.io/2016/07/01/%E5%A5%BD%E8%BD%AF%E4%BB%B6-%E9%9D%A0%E6%9C%BA%E9%81%87/</url>
      <content type="html"><![CDATA[<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><hr>
<h2 id="Lanuchy-快速启动软件"><a href="#Lanuchy-快速启动软件" class="headerlink" title="Lanuchy  快速启动软件"></a>Lanuchy  快速启动软件</h2><h4 id="Launchy-2-1-2-快捷列"><a href="#Launchy-2-1-2-快捷列" class="headerlink" title="Launchy 2.1.2 快捷列"></a><a href="http://www.playpcesor.com/2008/08/launchy-212.html" target="_blank" rel="noopener">Launchy 2.1.2 快捷列</a></h4><h4 id="Lanuchy"><a href="#Lanuchy" class="headerlink" title="Lanuchy"></a><a href="http://www.360doc.com/content/13/0314/11/11502803_271427641.shtml" target="_blank" rel="noopener">Lanuchy</a></h4><h2 id="Everything-搜索本地文件"><a href="#Everything-搜索本地文件" class="headerlink" title="Everything 搜索本地文件"></a>Everything 搜索本地文件</h2><h4 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a><a href="http://www.voidtools.com/" target="_blank" rel="noopener">Everything</a></h4><h2 id="装饰资源管理器"><a href="#装饰资源管理器" class="headerlink" title="装饰资源管理器"></a>装饰资源管理器</h2><h4 id="Clover"><a href="#Clover" class="headerlink" title="Clover_"></a><a href="http://cn.ejie.me/" target="_blank" rel="noopener">Clover</a>_</h4><p>保护色 f.lux 软件 <a href="https://justgetflux.com/" target="_blank" rel="noopener">f.lux</a></p>
<p><a href="http://cn.ejie.me/" target="_blank" rel="noopener">多标签</a><br><a id="more"></a></p>
<p>拼图组合 <a href="http://www.collageitfree.com/" target="_blank" rel="noopener">CollageIt Pro 网上有绿色版</a><br>soapUI 测试 <a href="https://www.soapui.org/" target="_blank" rel="noopener">soap</a><br>teamViewer 穿透内网远程控制 <a href="https://www.teamviewer.com/zhCN/" target="_blank" rel="noopener">teamViewer</a></p>
<p>模拟机器学习的过程：<a href="http://mldemos.epfl.ch/" target="_blank" rel="noopener">mldemo</a></p>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好网站,天天记]]></title>
      <url>https://muxiaobai.github.io/2016/06/29/%E5%A5%BD%E7%BD%91%E7%AB%99-%E5%A4%A9%E5%A4%A9%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h5 id="精美图片搜索"><a href="#精美图片搜索" class="headerlink" title="精美图片搜索"></a><a href="http://librestock.com/" target="_blank" rel="noopener">精美图片搜索</a></h5><h5 id="虫部落搜索"><a href="#虫部落搜索" class="headerlink" title="虫部落搜索"></a><a href="http://so.chongbuluo.com" target="_blank" rel="noopener">虫部落搜索</a></h5><h2 id="chrome插件"><a href="#chrome插件" class="headerlink" title="chrome插件"></a>chrome插件</h2><h5 id="Disconnect：保护网络安全"><a href="#Disconnect：保护网络安全" class="headerlink" title="Disconnect：保护网络安全"></a><a href="http://chromecj.com/productivity/2016-04/704.html" target="_blank" rel="noopener">Disconnect：保护网络安全</a></h5><h5 id="Chrome-的-Github-扩展-Octotree"><a href="#Chrome-的-Github-扩展-Octotree" class="headerlink" title="Chrome 的 Github 扩展 Octotree"></a><a href="http://www.oschina.net/p/octotree" target="_blank" rel="noopener">Chrome 的 Github 扩展 Octotree</a></h5><h5 id="屏蔽弹出式广告：Poper-Blocker"><a href="#屏蔽弹出式广告：Poper-Blocker" class="headerlink" title="屏蔽弹出式广告：Poper Blocker"></a><a href="http://chromecj.com/productivity/2014-12/309.html" target="_blank" rel="noopener">屏蔽弹出式广告：Poper Blocker</a></h5><h5 id="月光博客12个强大的Chrome插件"><a href="#月光博客12个强大的Chrome插件" class="headerlink" title="月光博客12个强大的Chrome插件"></a><a href="http://www.williamlong.info/archives/3548.html" target="_blank" rel="noopener">月光博客12个强大的Chrome插件</a></h5><h5 id="75款实用chrome插件推荐"><a href="#75款实用chrome插件推荐" class="headerlink" title="75款实用chrome插件推荐"></a><a href="http://www.360doc.com/content/12/0325/00/2982817_197418499.shtml" target="_blank" rel="noopener">75款实用chrome插件推荐</a></h5><h5 id="史上最全的Chrome使用技巧集锦"><a href="#史上最全的Chrome使用技巧集锦" class="headerlink" title="史上最全的Chrome使用技巧集锦"></a><a href="http://www.codeceo.com/article/chrome-usage-most-useful.html" target="_blank" rel="noopener">史上最全的Chrome使用技巧集锦</a></h5><h5 id="tampermonkey添加脚本脚本地址"><a href="#tampermonkey添加脚本脚本地址" class="headerlink" title="tampermonkey添加脚本脚本地址"></a>tampermonkey添加脚本<a href="https://greasyfork.org/zh-CN/" target="_blank" rel="noopener">脚本地址</a></h5><h5 id="油猴子脚本，屏蔽一些东西，其他人写好的脚本"><a href="#油猴子脚本，屏蔽一些东西，其他人写好的脚本" class="headerlink" title="油猴子脚本，屏蔽一些东西，其他人写好的脚本"></a><a href="https://greasyfork.org/zh-CN/scripts" target="_blank" rel="noopener">油猴子脚本，屏蔽一些东西，其他人写好的脚本</a></h5><a id="more"></a>
<h2 id="编辑器-amp-IDE"><a href="#编辑器-amp-IDE" class="headerlink" title="编辑器&amp;IDE"></a>编辑器&amp;IDE</h2><h4 id="Sublime插件"><a href="#Sublime插件" class="headerlink" title="Sublime插件"></a>Sublime插件</h4><h5 id="动图展示16个Sublime-Text快捷键用法"><a href="#动图展示16个Sublime-Text快捷键用法" class="headerlink" title="动图展示16个Sublime Text快捷键用法"></a><a href="http://www.linuxidc.com/Linux/2014-12/110930.htm" target="_blank" rel="noopener">动图展示16个Sublime Text快捷键用法</a></h5><h5 id="package-control"><a href="#package-control" class="headerlink" title="package control"></a><a href="https://packagecontrol.io/" target="_blank" rel="noopener">package control</a></h5><h5 id="Sublime插件：增强篇"><a href="#Sublime插件：增强篇" class="headerlink" title="Sublime插件：增强篇"></a><a href="http://www.jianshu.com/p/5905f927d01b" target="_blank" rel="noopener">Sublime插件：增强篇</a></h5><h5 id="Sublime-Text-3能用支持的插件推荐"><a href="#Sublime-Text-3能用支持的插件推荐" class="headerlink" title="Sublime Text 3能用支持的插件推荐"></a><a href="http://dengo.org/archives/923" target="_blank" rel="noopener">Sublime Text 3能用支持的插件推荐</a></h5><h5 id="Sublime-Text-3下两款Markdown插件"><a href="#Sublime-Text-3下两款Markdown插件" class="headerlink" title="Sublime Text 3下两款Markdown插件"></a><a href="http://www.linuxidc.com/Linux/2015-08/121178.htm" target="_blank" rel="noopener">Sublime Text 3下两款Markdown插件</a></h5><h5 id="MarkdownEditing-语法"><a href="#MarkdownEditing-语法" class="headerlink" title="MarkdownEditing 语法"></a><a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="noopener">MarkdownEditing 语法</a></h5><h5 id="OmniMarkupPreviewer-即时预览MarkDown-ctrl-alt-o"><a href="#OmniMarkupPreviewer-即时预览MarkDown-ctrl-alt-o" class="headerlink" title="OmniMarkupPreviewer 即时预览MarkDown ctrl+alt+o"></a><a href="https://github.com/timonwong/OmniMarkupPreviewer" target="_blank" rel="noopener">OmniMarkupPreviewer 即时预览MarkDown ctrl+alt+o</a></h5><h5 id="ConvertToUTF8"><a href="#ConvertToUTF8" class="headerlink" title="ConvertToUTF8"></a><a href="https://github.com/seanliang/ConvertToUTF8" target="_blank" rel="noopener">ConvertToUTF8</a></h5><h5 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a><a href="https://github.com/titoBouzout/SideBarEnhancements" target="_blank" rel="noopener">SideBarEnhancements</a></h5><h4 id="eclipse插件-编码-默认习惯"><a href="#eclipse插件-编码-默认习惯" class="headerlink" title="eclipse插件,编码,默认习惯"></a>eclipse插件,编码,默认习惯</h4><h5 id="将Eclipse中现有的java类生成类图ModelGoon"><a href="#将Eclipse中现有的java类生成类图ModelGoon" class="headerlink" title="将Eclipse中现有的java类生成类图ModelGoon"></a><a href="http://www.it610.com/article/1677574.htm" target="_blank" rel="noopener">将Eclipse中现有的java类生成类图ModelGoon</a></h5><h5 id="你应该关注的几个Eclipse超酷插件"><a href="#你应该关注的几个Eclipse超酷插件" class="headerlink" title="你应该关注的几个Eclipse超酷插件"></a><a href="http://www.importnew.com/4707.html" target="_blank" rel="noopener">你应该关注的几个Eclipse超酷插件</a></h5><h2 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h2><h5 id="Darren-聂微东-关注前端技术"><a href="#Darren-聂微东-关注前端技术" class="headerlink" title="Darren_聂微东 - 关注前端技术"></a><a href="http://www.cnblogs.com/Darren_code/" target="_blank" rel="noopener">Darren_聂微东 - 关注前端技术</a></h5><h5 id="聂微东，一枚Web技术领域的手艺人"><a href="#聂微东，一枚Web技术领域的手艺人" class="headerlink" title="聂微东，一枚Web技术领域的手艺人"></a><a href="http://www.fefork.com/" target="_blank" rel="noopener">聂微东，一枚Web技术领域的手艺人</a></h5><h5 id="方糖气球"><a href="#方糖气球" class="headerlink" title="方糖气球"></a><a href="http://ftqq.com/" target="_blank" rel="noopener">方糖气球</a></h5><h5 id="程序员如何优雅的挣零花钱？"><a href="#程序员如何优雅的挣零花钱？" class="headerlink" title="程序员如何优雅的挣零花钱？"></a><a href="http://ftqq.com/2016/03/cheng-xu-yuan-ru-he-you-ya-de-zheng-ling-hua-qian/" target="_blank" rel="noopener">程序员如何优雅的挣零花钱？</a></h5><h5 id="对程序员而言，订阅哪些信息源最能让你跟上前沿"><a href="#对程序员而言，订阅哪些信息源最能让你跟上前沿" class="headerlink" title="对程序员而言，订阅哪些信息源最能让你跟上前沿?"></a><a href="https://www.zhihu.com/question/33524185" target="_blank" rel="noopener">对程序员而言，订阅哪些信息源最能让你跟上前沿?</a></h5><h5 id="说说自己知道的各个领域水平比较不错的论坛"><a href="#说说自己知道的各个领域水平比较不错的论坛" class="headerlink" title="说说自己知道的各个领域水平比较不错的论坛"></a><a href="https://v2ex.com/t/37663" target="_blank" rel="noopener">说说自己知道的各个领域水平比较不错的论坛</a></h5><h5 id="java-my-life设计模式等"><a href="#java-my-life设计模式等" class="headerlink" title="java-my-life设计模式等"></a><a href="http://www.cnblogs.com/java-my-life/" target="_blank" rel="noopener">java-my-life设计模式等</a></h5><h5 id="走向架构师之路"><a href="#走向架构师之路" class="headerlink" title="走向架构师之路"></a><a href="http://blog.csdn.net/cutesource?viewmode=contents" target="_blank" rel="noopener">走向架构师之路</a></h5><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h4 id="开发快速生成代码或者其他资源"><a href="#开发快速生成代码或者其他资源" class="headerlink" title="开发快速生成代码或者其他资源"></a>开发快速生成代码或者其他资源</h4><h5 id="netcraft探测服务器"><a href="#netcraft探测服务器" class="headerlink" title="netcraft探测服务器"></a><a href="http://www.netcraft.com/" target="_blank" rel="noopener">netcraft探测服务器</a></h5><h5 id="jsrun-在线运行JS"><a href="#jsrun-在线运行JS" class="headerlink" title="jsrun 在线运行JS"></a><a href="http://jsrun.net/" target="_blank" rel="noopener">jsrun 在线运行JS</a></h5><h5 id="bootstrap快速生成1"><a href="#bootstrap快速生成1" class="headerlink" title="bootstrap快速生成1"></a><a href="http://www.ibootstrap.cn/" target="_blank" rel="noopener">bootstrap快速生成1</a></h5><h5 id="bootstrap快速生成2"><a href="#bootstrap快速生成2" class="headerlink" title="bootstrap快速生成2"></a><a href="http://www.bootcss.com/p/layoutit/" target="_blank" rel="noopener">bootstrap快速生成2</a></h5><h5 id="Codeuml代码编写UML"><a href="#Codeuml代码编写UML" class="headerlink" title="Codeuml代码编写UML"></a><a href="http://www.codeuml.com/" target="_blank" rel="noopener">Codeuml代码编写UML</a></h5><h5 id="Spring-Boot-启动流程"><a href="#Spring-Boot-启动流程" class="headerlink" title="Spring Boot 启动流程"></a><a href="https://www.processon.com/view/60605358f346fb6d9ef1bd9c?fromnew=1" target="_blank" rel="noopener">Spring Boot 启动流程</a></h5><h4 id="标签系统"><a href="#标签系统" class="headerlink" title="标签系统"></a>标签系统</h4><h5 id="用户画像"><a href="#用户画像" class="headerlink" title="用户画像"></a><a href="https://github.com/BigDataScholar/TheKingOfBigData/blob/master/note/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/%5B%E8%B6%85%E7%A1%AC%E6%A0%B8%5D%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E5%85%A5%E9%97%A8%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F.md" target="_blank" rel="noopener">用户画像</a></h5><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><h5 id="SpringBoot启动流程"><a href="#SpringBoot启动流程" class="headerlink" title="SpringBoot启动流程"></a><a href="https://zhuanlan.zhihu.com/p/301063931" target="_blank" rel="noopener">SpringBoot启动流程</a></h5><h5 id="设计模式-md"><a href="#设计模式-md" class="headerlink" title="设计模式.md)"></a><a href="https://github.com/doocs/source-code-hunter/blob/main/docs/LearningExperience/DesignPattern/%E4%BB%8ESpring%E5%8F%8AMybatis%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E4%B8%AD%E5%AD%A6%E4%B9%A0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E8%A1%8C%E4%B8%BA%E5%9E%8B" target="_blank" rel="noopener">设计模式</a>.md)</h5><h5 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a><a href="https://github.com/doocs/jvm/blob/main/docs/10-class-loader.md" target="_blank" rel="noopener">JVM</a></h5><h5 id="JavaRanger"><a href="#JavaRanger" class="headerlink" title="JavaRanger"></a><a href="http://www.javaranger.com/" target="_blank" rel="noopener">JavaRanger</a></h5><h4 id="开发类优秀网站"><a href="#开发类优秀网站" class="headerlink" title="开发类优秀网站"></a>开发类优秀网站</h4><h5 id="segmentfault"><a href="#segmentfault" class="headerlink" title="segmentfault"></a><a href="https://segmentfault.com/" target="_blank" rel="noopener">segmentfault</a></h5><h5 id="github里一个小朋友整理的各大公司开发部和个人的博客大合集"><a href="#github里一个小朋友整理的各大公司开发部和个人的博客大合集" class="headerlink" title="github里一个小朋友整理的各大公司开发部和个人的博客大合集"></a><a href="https://github.com/kilimchoi/engineering-blogs" target="_blank" rel="noopener">github里一个小朋友整理的各大公司开发部和个人的博客大合集</a></h5><h5 id="邮件订阅-全栈必读：Fullweb"><a href="#邮件订阅-全栈必读：Fullweb" class="headerlink" title="邮件订阅 全栈必读：Fullweb"></a><a href="http://fullweb.io/" target="_blank" rel="noopener">邮件订阅 全栈必读：Fullweb</a></h5><h5 id="开发者速查表"><a href="#开发者速查表" class="headerlink" title="开发者速查表"></a><a href="http://devhints.cn/" target="_blank" rel="noopener">开发者速查表</a></h5><h5 id="信息源的三大网站"><a href="#信息源的三大网站" class="headerlink" title="信息源的三大网站:"></a>信息源的三大网站:</h5><p><a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a><br><a href="https://www.designernews.co/" target="_blank" rel="noopener">Designer News</a><br><a href="https://www.reddit.com/r/programming/" target="_blank" rel="noopener">Reddit 的 Programming</a></p>
<h2 id="流程图-脑图"><a href="#流程图-脑图" class="headerlink" title="流程图/脑图"></a>流程图/脑图</h2><h5 id="workflowy"><a href="#workflowy" class="headerlink" title="workflowy"></a><a href="https://workflowy.com/" target="_blank" rel="noopener">workflowy</a></h5><h5 id="百度H5"><a href="#百度H5" class="headerlink" title="百度H5"></a><a href="http://h5.baidu.com/list" target="_blank" rel="noopener">百度H5</a></h5><h5 id="百度脑图"><a href="#百度脑图" class="headerlink" title="百度脑图"></a><a href="http://naotu.baidu.com/home" target="_blank" rel="noopener">百度脑图</a></h5><h5 id="画图工具"><a href="#画图工具" class="headerlink" title="画图工具"></a><a href="https://www.mindmup.com" target="_blank" rel="noopener">画图工具</a></h5><h5 id="processOn-推荐"><a href="#processOn-推荐" class="headerlink" title="processOn 推荐"></a><a href="https://www.processon.com/" target="_blank" rel="noopener">processOn</a> 推荐</h5><h4 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h4><h5 id="优雅记单词"><a href="#优雅记单词" class="headerlink" title="优雅记单词"></a><a href="http://visuwords.com/" target="_blank" rel="noopener">优雅记单词</a></h5><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><h5 id="免费高清矢量图"><a href="#免费高清矢量图" class="headerlink" title="免费高清矢量图"></a><a href="https://pixabay.com/" target="_blank" rel="noopener">免费高清矢量图</a></h5><h5 id="free-nature-stock-自然景观"><a href="#free-nature-stock-自然景观" class="headerlink" title="free nature stock 自然景观"></a><a href="http://freenaturestock.com/" target="_blank" rel="noopener">free nature stock 自然景观</a></h5><h5 id="创意、新奇"><a href="#创意、新奇" class="headerlink" title="创意、新奇"></a><a href="http://www.gratisography.com/" target="_blank" rel="noopener">创意、新奇</a></h5><h5 id="免费素材-可商用"><a href="#免费素材-可商用" class="headerlink" title="免费素材,可商用"></a><a href="http://isorepublic.com/" target="_blank" rel="noopener">免费素材,可商用</a></h5><h5 id="visual-hunt-免费高质量"><a href="#visual-hunt-免费高质量" class="headerlink" title="visual hunt 免费高质量"></a><a href="https://visualhunt.com/" target="_blank" rel="noopener">visual hunt 免费高质量</a></h5><h5 id="精美图片分享站-免费-可商用"><a href="#精美图片分享站-免费-可商用" class="headerlink" title="精美图片分享站,免费,可商用"></a><a href="https://stocksnap.io/" target="_blank" rel="noopener">精美图片分享站,免费,可商用</a></h5><h5 id="无归属-免费商用"><a href="#无归属-免费商用" class="headerlink" title="无归属,免费商用"></a><a href="https://www.pexels.com/" target="_blank" rel="noopener">无归属,免费商用</a></h5><h5 id="高分辨率-值得收藏"><a href="#高分辨率-值得收藏" class="headerlink" title="高分辨率,值得收藏"></a><a href="https://unsplash.com/" target="_blank" rel="noopener">高分辨率,值得收藏</a></h5><h5 id="TAGUL-WORD-CLOUD-ART-字体艺术中文支持不是很友好"><a href="#TAGUL-WORD-CLOUD-ART-字体艺术中文支持不是很友好" class="headerlink" title="TAGUL - WORD CLOUD ART 字体艺术中文支持不是很友好"></a><a href="https://tagul.com/" target="_blank" rel="noopener">TAGUL - WORD CLOUD ART 字体艺术中文支持不是很友好</a></h5><h5 id="自己画图，对称"><a href="#自己画图，对称" class="headerlink" title="自己画图，对称"></a><a href="http://weavesilk.com/" target="_blank" rel="noopener">自己画图，对称</a></h5><h5 id="在线PS工具"><a href="#在线PS工具" class="headerlink" title="在线PS工具"></a><a href="https://www.photopea.com/" target="_blank" rel="noopener">在线PS工具</a></h5><h4 id="JS-amp-CSS-amp-HTML"><a href="#JS-amp-CSS-amp-HTML" class="headerlink" title="JS&amp;CSS&amp;HTML"></a>JS&amp;CSS&amp;HTML</h4><h5 id="Bootstap3常用插件总结"><a href="#Bootstap3常用插件总结" class="headerlink" title="Bootstap3常用插件总结"></a><a href="http://cyeboss.iteye.com/blog/2094683" target="_blank" rel="noopener">Bootstap3常用插件总结</a></h5><h5 id="动态JS背景"><a href="#动态JS背景" class="headerlink" title="动态JS背景"></a><a href="http://jsrun.net/pkKKp/embedded/all/light" target="_blank" rel="noopener">动态JS背景</a></h5><h5 id="前端导航"><a href="#前端导航" class="headerlink" title="前端导航"></a><a href="http://jsdig.com/" target="_blank" rel="noopener">前端导航</a></h5><h5 id="你的浏览器对html5的支持程度"><a href="#你的浏览器对html5的支持程度" class="headerlink" title="你的浏览器对html5的支持程度"></a><a href="http://html5test.com/" target="_blank" rel="noopener">你的浏览器对html5的支持程度</a></h5><h5 id="显示css的各种样式五星推荐"><a href="#显示css的各种样式五星推荐" class="headerlink" title="显示css的各种样式五星推荐"></a><a href="http://cssreference.io/" target="_blank" rel="noopener">显示css的各种样式</a>五星推荐</h5><h4 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h4><h5 id="excelhome"><a href="#excelhome" class="headerlink" title="excelhome"></a><a href="www.excelhome.net">excelhome</a></h5><h5 id="excelpx"><a href="#excelpx" class="headerlink" title="excelpx"></a><a href="www.excelpx.com">excelpx</a></h5>]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://muxiaobai.github.io/2016/06/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Create-a-new-draft"><a href="#Create-a-new-draft" class="headerlink" title="Create a new draft"></a>Create a new draft</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new  draft <span class="string">"My New Draft"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="publish-draft-to-post"><a href="#publish-draft-to-post" class="headerlink" title="publish draft to post"></a>publish draft to post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">public</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 搭建网站 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 下各目录的默认含义]]></title>
      <url>https://muxiaobai.github.io/2016/06/27/Linux-%E4%B8%8B%E5%90%84%E7%9B%AE%E5%BD%95%E7%9A%84%E9%BB%98%E8%AE%A4%E5%90%AB%E4%B9%89/</url>
      <content type="html"><![CDATA[<p>常用的文件目录,以及文件位置,文件夹默认的作用等的总结。<br>例如：/etc/init.d,/usr/local等<br><a id="more"></a></p>
<p>根:/<br>/etc<br>全局的配置文件存放目录。<br>系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。 </p>
<p>/boot<br>引导程序，内核等存放的目录。<br>这个目录，包括了在引导过程中所必需的文件，引导程序的相关文件（例如grub，lilo以及相应的配置文件以及Linux操作系统内核相关文件（例如vmlinuz等一般都存放在这里。在最开始的启动阶段，通过引导程序将内核加载到内存，完成内核的启动（这个时候，虚拟文件系统还不存在，加载的内核虽然是从硬盘读取的，但是没经过Linux的虚拟文件系统，这是比较底层的东西来实现的。然后内核自己创建好虚拟文件系统，并且从虚拟文件系统的其他子目录中（例如/sbin 和 /etc加载需要在开机启动的其他程序或者服务或者特定的动作（部分可以由用户自己在相应的目录中修改相应的文件来配制。如果我们的机器中包含多个操作系统，那么可以通过修改这个目录中的某个配置文件（例如grub.conf来调整启动的默认操作系统，系统启动的择菜单，以及启动延迟等参数。</p>
<p>/sbin<br>超级用户可以使用的命令的存放目录。<br>存放大多涉及系统管理的命令（例如引导系统的init程序，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令（但是时普通用户也可能会用到。这个目录和/usr/sbin; /usr/X11R6/sbin或/usr/local/sbin等目录是相似的，我们要记住，凡是目录sbin中包含的都是root权限才能执行的，这样就行了。后面会具体区分。</p>
<p>/bin<br>普通用户可以使用的命令的存放目录。<br>系统所需要的那些命令位于此目录，比如ls、cp、mkdir等命令；类似的目录还/usr/bin，/usr/local/bin等等。这个目录中的文件都是可执行的、普通用户都可以使用的命令。作为基础系统所需要的最基础的命令就是放在这里。</p>
<p>/lib<br>根目录下的所程序的共享库目录。<br>此目录下包含系统引导和在根用户执行命令时候所必需用到的共享库。做个不太好但是比较形象的比喻，点类似于Windows上面的system32目录。理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。类似的目录还/usr/lib，/usr/local/lib等等。</p>
<p>/dev<br>设备文件目录。<br>在Linux中设备都是以文件形式出现，这里的设备可以是硬盘，键盘，鼠标，网卡，终端，等设备，通过访问这些文件可以访问到相应的设备。设备文件可以使用mknod命令来创建，具体参见相应的命令；而为了将对这些设备文件的访问转化为对设备的访问，需要向相应的设备提供设备驱动模块（一般将设备驱动编译之后，生成的结果是一个*.ko类型的二进制文件，在内核启动之后，再通过insmod等命令加载相应的设备驱动之后，我们就可以通过设备文件来访问设备了。一般来说，想要Linux系统支持某个设备，只要个东西：相应的硬件设备，支持硬件的驱动模块，以及相应的设备文件。</p>
<p>/home<br>普通用户的家目录（$HOME目录。<br>在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。</p>
<p>/root<br>用户root的$HOME目录<br>系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。</p>
<p>/usr<br>这个目录中包含了命令库文件和在通常操作中不会修改的文件。<br>这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。</p>
<p>/usr/lib<br>目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。<br>这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。</p>
<p>/usr/bin<br>一般使用者使用并且不是系统自检等所必需可执行文件的目录。<br>此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。</p>
<p>/usr/sbin<br>管理员使用的非系统必须的可执行文件存放目录。<br>此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。</p>
<p>/usr/share<br>存放共享文件的目录。<br>在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。</p>
<p>/usr/include<br>C程序语言编译使用的头文件。<br>linux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。</p>
<p>/usr/local<br>安装本地程序的一般默认路径。<br>当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。</p>
<p>/proc<br>特殊文件目录。<br>这个目录采用一种特殊的文件系统格式（proc格式，内核支持这种格式。其中包含了全部虚拟文件。它们并不保存在磁盘中，也不占据磁盘空间(尽管命令ls -c会显示它们的大小)。当您查看它们时，您实际上看到的是内存里的信息，这些文件助于我们了解系统内部信息。例如：<br>├1/ 关于进程1的信息目录。每个进程在/proc 下一个名为其进程号的目录。<br>├cpuinfo 处理器信息，如类型、制造商、型号和性能。<br>├devices 当前运行的核心配置的设备驱动的列表。<br>├dma 显示当前使用的DMA通道。<br>├filesystems 核心配置的文件系统。<br>├interrupts 显示使用的中断，and how many of each there have been.<br>├ioports 当前使用的I/O端口。<br>├kcore 系统物理内存映象。与物理内存大小一样，但实际不占这么多内存；<br>├kmsg 核心输出的消息。也被送到syslog 。<br>├ksyms 核心符号表。<br>├loadavg 系统”平均负载”；3个没意义的指示器指出系统当前的工作量。<br>├meminfo 存储器使用信息，包括物理内存和swap。<br>├modules 当前加载了哪些核心模块。<br>├net 网络协议状态信息。<br>├self 到查看/proc 的程序的进程目录的符号连接。<br>├stat 系统的不同状态<br>├uptime 系统启动的时间长度。<br>└version 核心版本。</p>
<p>/opt<br>可择的文件目录。<br>这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。</p>
<p>/mnt<br>临时挂载目录。<br>这个目录一般是用于存放挂载储存设备的挂载目录的，比如磁盘，光驱，网络文件系统等，当我们需要挂载某个磁盘设备的时候，可以把磁盘设备挂载到这个目录上去，这样我们可以直接通过访问这个目录来访问那个磁盘了。一般来说，我们最好在/mnt目录下面多建立几个子目录，挂载的时候挂载到这些子目录上面，因为通常我们可能不仅仅是挂载一个设备吧?</p>
<p>/media<br>挂载的媒体设备目录。<br>挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。</p>
<p>/var<br>内容经常变化的目录。<br>此目录下文件的大小可能会改变，如缓冲文件，日志文件，缓存文件，等一般都存放在这里。</p>
<p>/tmp<br>临时文件目录。<br>该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。</p>
<p>另外，有些目录初学者容易混淆，这里简单区分一下：<br>/bin,/sbin与/usr/bin,/usr/sbin:<br>/bin一般存放对于用户和系统来说“必须”的程序（二进制文件）。<br>/sbin一般存放用于系统管理的“必需”的程序（二进制文件），一般普通用户不会使用，根用户使用。<br>/usr/bin一般存放的只是对用户和系统来说“不是必需的”程序（二进制文件）。<br>/usr/sbin一般存放用于系统管理的系统管理的不是必需的程序（二进制文件）。</p>
<p>/lib与/usr/lib:<br>/lib和/usr/lib的区别类似/bin,/sbin与/usr/bin,/usr/sbin。<br>/lib一般存放对于用户和系统来说“必须”的库（二进制文件）。<br>/usr/lib一般存放的只是对用户和系统来说“不是必需的”库（二进制文件）。</p>
<p>linux下的文件结构，看看每个文件夹都是干吗用的<br>/bin 二进制可执行命令<br>/dev 设备特殊文件<br>/etc 系统管理和配置文件<br>/etc/rc.d 启动的配置文件和脚本<br>/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示<br>/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件<br>/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序<br>/tmp 公用的临时文件存储点<br>/root 系统管理员的主目录（呵呵，特权阶级）<br>/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。<br>/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里<br>/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。<br>/var 某些大文件的溢出区，比方说各种服务的日志文件<br>/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：<br>/usr/x11r6 存放x window的目录<br>/usr/bin 众多的应用程序<br>/usr/sbin 超级用户的一些管理程序<br>/usr/doc linux文档<br>/usr/include linux下开发和编译应用程序所需要的头文件<br>/usr/lib 常用的动态链接库和软件包的配置文件<br>/usr/man 帮助文档<br>/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里<br>/usr/local/bin 本地增加的命令<br>/usr/local/lib 本地增加的库</p>
<p>/mnt目录<br>/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到<br>/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱，<br>而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 </p>
<p>下面详细介绍； </p>
<p>/etc文件系统<br>/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个<br>程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 </p>
<ol>
<li>/etc/rc或/etc/rc.d或/etc/rc?.d<br>启动、或改变运行级时运行的脚本或脚本的目录。 </li>
<li>/etc/passwd<br>用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其<br>他信息。 </li>
<li>/etc/fdprm<br>软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m<br>的帮助页。 </li>
<li>/etc/fstab<br>指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 </li>
<li>/etc/group<br>类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 </li>
<li>/etc/inittab<br>init 的配置文件。 </li>
<li>/etc/issue<br>包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内<br>容由系统管理员确定。 </li>
<li>/etc/magic<br>“file”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 </li>
<li>/etc/motd<br>motd是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。<br>常用于通告信息，如计划关机时间的警告等。 </li>
<li>/etc/mtab<br>当前安装的文件系统列表。由脚本( scritp )初始化，并由mount 命令自动更新。当需要一<br>个当前安装的文件系统的列表时使用(例如df 命令)。 </li>
<li>/etc/shadow<br>在安装了影子( shadow )口令软件的系统上的影子口令文件。影子口令文件将/ etc / passwd<br>文件中的加密口令移动到/ etc / shadow中，而后者只对超级用户( root )可读。这使破译口令更困<br>难，以此增加系统的安全性。 </li>
<li>/etc/login.defs<br>l o g i n命令的配置文件。 </li>
<li>/etc/printcap<br>类似/etc/termcap ，但针对打印机。语法不同。 </li>
<li>/etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc<br>登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 </li>
<li>/etc/securetty<br>确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不<br>可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 </li>
<li>/etc/shells<br>列出可以使用的shell。chsh 命令允许用户在本文件指定范围内改变登录的shell。提供一<br>台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允<br>许该用户登录。 </li>
<li>/etc/termcap<br>终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义<br>序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。<br>这样，多数的程序可以在多数终端上运行。 </li>
</ol>
<p>/dev文件系统<br>/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。<br>设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/dev/makedev.local是<br>系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准<br>makedev的一部分)。下面简要介绍/dev下一些常用文件。<br>1./dev/console<br>系统控制台，也就是直接和系统连接的监视器。 </p>
<ol start="2">
<li>/dev/hd<br>i d e硬盘驱动程序接口。如：/dev/hda指的是第一个硬盘，had1则是指/dev/hda的第一个<br>分区。如系统中有其他的硬盘，则依次为/dev/hdb、/dev/hdc、……；如有多个分区则依次为<br>hda1、hda2……</li>
<li>/dev/sd<br>scsi磁盘驱动程序接口。如有系统有scsi硬盘，就不会访问/dev/ha d，而会访问/dev/sda。 </li>
<li>/dev/fd<br>软驱设备驱动程序。如：/dev/fd0指系统的第一个软盘，也就是通常所说的a：盘，<br>/dev/fd1指第二个软盘，……而/dev/fd1h1440则表示访问驱动器1中的4.5高密盘。<br>5./dev/st<br>scsi磁带驱动器驱动程序。<br>6./dev/tty<br>提供虚拟控制台支持。如：/dev/tty1指的是系统的第一个虚拟控制台，/dev/tty2则是系统<br>的第二个虚拟控制台。<br>7./dev/pty<br>提供远程登陆伪终端支持。在进行telnet登录时就要用到/dev/pty设备。<br>8./dev/ttys<br>计算机串行接口，对于dos来说就是“com1”口。<br>9./dev/cua<br>计算机串行接口，与调制解调器一起使用的设备。<br>10./dev/null<br>“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来<br>时，只要将输出信息输入到/dev/null中即可。</li>
</ol>
<p>/usr文件系统<br>/usr是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr里的<br>所有文件一般来自linux发行版(distribution)；本地安装的程序和其他东西在/usr/local下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr目录下的许多内容是<br>可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置<br>文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 </p>
<ol>
<li>/usr/x11r6<br>包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，<br>x的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形<br>工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 </li>
<li>/usr/x386<br>类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 </li>
<li>/usr/bin<br>集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 </li>
<li>/usr/sbin<br>包括了根文件系统不必要的系统管理命令，例如多数服务程序。 </li>
<li>/usr/man、/ u s r / i n f o、/ u s r / d o c<br>这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节”<br>都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文<br>件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调<br>用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 </li>
<li>/usr/include<br>包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、<br>子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名<br>字。 </li>
<li>/usr/lib<br>包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库<br>(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也<br>有许多程序把配置文件存入其中。 </li>
<li>/usr/local<br>本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大<br>的软件包，如t e x、e m a c s等。 </li>
</ol>
<p>/var文件系统<br>/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化<br>或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那<br>些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。<br>下面列出一些重要的目录(一些不太重要的目录省略了)。 </p>
<ol>
<li>/var/catman<br>包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ usr/man / m a n中；有些m a n页<br>可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化，<br>格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。<br>(/var/catman 经常被清除，就像清除临时目录一样。) </li>
<li>/var/lib<br>存放系统正常运行时要改变的文件。 </li>
<li>/var/local<br>存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，<br>即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 </li>
<li>/var/lock<br>锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在<br>使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文<br>件。 </li>
<li>/var/log<br>各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注<br>销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不<br>确定地增长，应该定期清除。 </li>
<li>/var/run<br>保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登<br>录的用户的信息。 </li>
<li>/var/spool<br>放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每<br>个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 </li>
<li>/var/tmp<br>比/tmp 允许更大的或需要存在较长时间的临时文件。<br>注意系统管理员可能不允许/var/tmp 有很旧的文件。 </li>
</ol>
<p>/proc文件系统<br>/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一<br>个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提<br>供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详<br>细的说明)。 </p>
<ol>
<li>/proc/x<br>关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自<br>己进程号的目录。 </li>
<li>/proc/cpuinfo<br>存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 </li>
<li>/proc/devices<br>当前运行的核心配置的设备驱动的列表。 </li>
<li>/proc/dma<br>显示当前使用的dma通道。 </li>
<li>/proc/filesystems<br>核心配置的文件系统信息。 </li>
<li>/proc/interrupts<br>显示被占用的中断信息和占用者的信息，以及被占用的数量。 </li>
<li>/proc/ioports<br>当前使用的i / o端口。 </li>
<li>/proc/kcore<br>系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅<br>仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何<br>东西占用任何磁盘空间。) </li>
<li>/proc/kmsg<br>核心输出的消息。也会被送到syslog。 </li>
<li>/proc/ksyms<br>核心符号表。 </li>
<li>/proc/loadavg<br>系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 </li>
<li>/proc/meminfo<br>各种存储器使用信息，包括物理内存和交换分区( s w a p )。 </li>
<li>/proc/modules<br>存放当前加载了哪些核心模块信息。 </li>
<li>/proc/net<br>网络协议状态信息。 </li>
<li>/proc/self<br>存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同<br>的连接。这主要便于程序得到它自己的进程目录。 </li>
<li>/proc/stat<br>系统的不同状态，例如，系统启动后页面发生错误的次数。 </li>
<li>/proc/uptime<br>系统启动的时间长度。 </li>
<li>/proc/version<br>核心版本。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 目录 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 基础命令总结 基本操作 文件 目录]]></title>
      <url>https://muxiaobai.github.io/2016/06/27/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="目录-文件夹directory-文件-file-相关"><a href="#目录-文件夹directory-文件-file-相关" class="headerlink" title="目录(文件夹directory)/文件(file)相关"></a>目录(文件夹directory)/文件(file)相关</h2><p><code>ls</code>: 列出所有内容(list) -l 详细信息 -h 文件大小</p>
<p><code>touch</code>: 新建(实际上是触摸一下,会更改文件时间戳)</p>
<p><code>cp</code>: 复制文件(Copy) </p>
<p><code>mv</code>: 重命名文件(Move,移动到当前文件夹下，即重命名)</p>
<p><code>rm</code>: 删除文件(Remove) -rf 强制递归删除</p>
<p><code>ln</code>: 创建文件链接(link)  ln -s yuan   mubiao</p>
<h5 id="r-递归"><a href="#r-递归" class="headerlink" title="-r: 递归"></a>-r: 递归</h5><h5 id="f-强制-不询问覆盖或删除"><a href="#f-强制-不询问覆盖或删除" class="headerlink" title="-f: 强制(不询问覆盖或删除)"></a>-f: 强制(不询问覆盖或删除)</h5><a id="more"></a>
<p><code>cd</code>:  切换目录(Change directory)   cd -   切换到上一个目录</p>
<p><code>mkdir</code>: 新建目录(Make directory)</p>
<p><code>rmdir</code>: 删除目录(Remove directory) (<code>rm -r</code>: 强制删除非空目录)(<code>rm -rf</code>)</p>
<h5 id="p-递归创建-删除非空目录"><a href="#p-递归创建-删除非空目录" class="headerlink" title="-p: 递归创建/删除非空目录"></a>-p: 递归创建/删除非空目录</h5><p><code>pwd</code>: 显示当前工作目录的绝对路径(Print work directory)</p>
<p><code>basename</code>: 显示文件名</p>
<p><code>dirname</code>: 显示路径</p>
<h2 id="文件内容相关"><a href="#文件内容相关" class="headerlink" title="文件内容相关"></a>文件内容相关</h2><h4 id="查看内容"><a href="#查看内容" class="headerlink" title="查看内容"></a>查看内容</h4><p><code>cat</code>: 查看内容(Catenate)</p>
<p><code>less</code>: 分页满屏显示 (less is more)</p>
<p><code>more</code>: 和less功能相似，但是没有less强大</p>
<p><code>head</code>: 显示文件前10行(-N/-nN 参数N为要显示的行号)</p>
<p><code>tail</code>: 显示文件尾10行(-N/-nN 参数N为要显示的行号) tail -fn 300 /th/log.log  实时查看log文件</p>
<p><code>nl</code>: <code>cat -n</code>的加强版(Number of Lines)  展示行号</p>
<p><code>strings/od/xxd/</code>: 二进制文件</p>
<p><code>acroread/gv/</code>: pdf文件和PostScript文件(Adobe Reader/Adobe PostScript/Ghostview)(大部分不支持)</p>
<p><code>xdvi</code>: (TeX文本处理器输出二进制文件)(大部分不支持)</p>
<p><code>&gt;、&lt;、&gt;&gt;</code> ：echo ssss &gt; aaa.txt      写入   echo  ssss &gt;&gt; aaa.txt 追加ssss到文件aaa.txt   cat  &lt; aaa.txt 读出文件到cat命令中作为输入</p>
<h5 id="n-N-行"><a href="#n-N-行" class="headerlink" title="-n/N:行"></a>-n/N:行</h5><h5 id="h-H-帮助"><a href="#h-H-帮助" class="headerlink" title="-h/H:帮助"></a>-h/H:帮助</h5><h4 id="文件属性相关"><a href="#文件属性相关" class="headerlink" title="文件属性相关"></a>文件属性相关</h4><p><code>stat</code>: 文件属性(status),修改时间，创建时间</p>
<p><code>file</code>: 文件类型，txt ，tar.gz等，文件大小用 ls -lh</p>
<p><code>du</code>: 文件占用的磁盘空间(disk usage,磁盘使用情况)</p>
<p><code>chmod</code> <code>chown</code> <code>chgrp</code>: 改变权限(Change mode/owner/group)</p>
<h5 id="R-递归"><a href="#R-递归" class="headerlink" title="-R 递归"></a>-R 递归</h5><p><code>chattr</code>: 改变文件属性(Change file attributes)</p>
<p><code>lsattr</code>: 显示<code>chattr</code>改变的属性(List file attributes)</p>
<h4 id="文件的文本性操作"><a href="#文件的文本性操作" class="headerlink" title="文件的文本性操作"></a>文件的文本性操作</h4><p><code>sort</code>: 排序</p>
<p>用法：sort [选项]… [文件]…<br>串联排序所有指定文件并将结果写到标准输出。</p>
<p>排序选项：</p>
<p>-b, –ignore-leading-blanks 忽略前导的空白区域<br>-d, –dictionary-order 只考虑空白区域和字母字符<br>-f, –ignore-case 忽略字母大小写<br>-g, –general-numeric-sort 按照常规数值排序<br>-i, –ignore-nonprinting 只排序可打印字符<br>-n, –numeric-sort 根据字符串数值比较<br>-r, –reverse 逆序输出排序结果</p>
<p>其他选项：</p>
<p>-c, –check, –check=diagnose-first 检查输入是否已排序，若已有序则不进行操作<br>-k, –key=位置1[,位置2] 在位置1 开始一个key，在位置2 终止(默认为行尾)<br>-m, –merge 合并已排序的文件，不再进行排序<br>-o, –output=文件 将结果写入到文件而非标准输出<br>-t, –field-separator=分隔符 使用指定的分隔符代替非空格到空格的转换<br>-u, –unique 配合-c，严格校验排序；不配合-c，则只输出一次排序结果</p>
<p>sort -n -r -k 2  第二列</p>
<p>sort -rn  数字倒序排序</p>
<p>sort -hr 根据K、M、G排序</p>
<p><code>wc</code>: 统计(Word Count)(行  词  字节) -l line -w word -m chars</p>
<p><code>grep</code> <code>egrep</code> <code>fgrep</code>: 匹配正则/扩展正则/文本</p>
<p><code>cut</code>: 提取特定列</p>
<p><code>paste</code>: 合并</p>
<p><code>uniq</code>: 查找重复文本(unique)</p>
<p><code>tee</code>:  (T形水管接口)</p>
<p><code>tr</code>: 替换(Traslate)</p>
<p><code>printf</code>：</p>
<h2 id="归档-打包、压缩-相关-一般情况下-用tar-☆"><a href="#归档-打包、压缩-相关-一般情况下-用tar-☆" class="headerlink" title="归档(打包、压缩)相关(一般情况下,用tar)☆"></a>归档(打包、压缩)相关(一般情况下,用<code>tar</code>)☆</h2><p><code>tar</code>: 打包(tape Archive)<code>tar -cf</code>代替(.tar)</p>
<hr>
<h5 id="c-创建归档文件-Create"><a href="#c-创建归档文件-Create" class="headerlink" title="-c 创建归档文件(Create)"></a>-c 创建归档文件(Create)</h5><h5 id="t-列出文件-list"><a href="#t-列出文件-list" class="headerlink" title="-t 列出文件(list)"></a>-t 列出文件(list)</h5><h5 id="x-解压"><a href="#x-解压" class="headerlink" title="-x 解压()"></a>-x 解压()</h5><h5 id="r-在已有的归档文件后添加新的文件"><a href="#r-在已有的归档文件后添加新的文件" class="headerlink" title="-r 在已有的归档文件后添加新的文件"></a>-r 在已有的归档文件后添加新的文件</h5><h5 id="u-在已有的归档文件后添加新的文件或者修改原有归档文件"><a href="#u-在已有的归档文件后添加新的文件或者修改原有归档文件" class="headerlink" title="-u 在已有的归档文件后添加新的文件或者修改原有归档文件"></a>-u 在已有的归档文件后添加新的文件或者修改原有归档文件</h5><hr>
<h5 id="z-gzip"><a href="#z-gzip" class="headerlink" title="-z (gzip)"></a>-z (gzip)</h5><h5 id="j-bzip2"><a href="#j-bzip2" class="headerlink" title="-j (bzip2)"></a>-j (bzip2)</h5><h5 id="Z-Unix传统格式compress"><a href="#Z-Unix传统格式compress" class="headerlink" title="-Z (Unix传统格式compress)"></a>-Z (Unix传统格式compress)</h5><hr>
<h5 id="v-打印详细信息-View"><a href="#v-打印详细信息-View" class="headerlink" title="-v 打印详细信息(View)"></a>-v 打印详细信息(View)</h5><h5 id="f-从文件下打包-File"><a href="#f-从文件下打包-File" class="headerlink" title="-f 从文件下打包(File)"></a>-f 从文件下打包(File)</h5><hr>
<ul>
<li>tar -xvf file.tar //解压 tar包</li>
<li>tar -xzvf file.tar.gz //解压tar.gz</li>
<li>tar -xjvf file.tar.bz2   //解压 tar.bz2</li>
<li>tar -xZvf file.tar.Z   //解压tar.Z</li>
<li>unrar e file.rar //解压rar</li>
<li>unzip file.zip //解压zip</li>
<li>unzip -o  file.zip  覆盖解压</li>
</ul>
<p><code>zip</code>: Windows Zip格式压缩(.zip)(.tar.zip)</p>
<p><code>gzip</code>: GNU Zip格式压缩(.gz)(.tar.gz),<code>tar -czf</code>代替</p>
<p><code>bzip2</code>: BZip格式压缩(.bz2)(.tar.bz2),<code>tar -cjf</code>代替</p>
<p><code>compress</code>: Unix传统格式压缩(.Z)(.tar.Z),<code>tar -cZf</code>代替</p>
<p><code>unzip</code>: -o  file.zip  覆盖解压</p>
<p><code>gunzip</code>: <code>tar -xzf</code>代替</p>
<p><code>bunzip2</code>: <code>tar -xjf</code>代替</p>
<p><code>uncompress</code>: <code>tar -xZf</code>代替</p>
<p><code>zcat</code>: (支持gzip Unix传统格式)</p>
<p><code>bzcat</code>: (支持BZip格式)</p>
<p><code>metamail</code>: (MIME格式)</p>
<p><code>rpm2cpio</code>:rpm包中抽取文件</p>
<p>-C 临时切换目录<br>tar -czvf xxx.tar.gz -C /usr/local/tomcat/web-apps ROOT/</p>
<blockquote>
<p>注意:打包和压缩是两个步骤。</p>
</blockquote>
<h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><p><code>find</code>: 在当前目录树中查找文件</p>
<p> find ./ -mtime +10 -name “*.log” | xargs ls -lh | sort -hr | head 10 查找当前文件夹下前十个最大的以log结尾最近20天的文件</p>
<p> find ./ -name “*.log” | xargs grep error 查找当前文件夹下以log结尾包含error字符的行</p>
<p><a href="https://www.cnblogs.com/xudong-bupt/archive/2013/03/23/2976793.html" target="_blank" rel="noopener">https://www.cnblogs.com/xudong-bupt/archive/2013/03/23/2976793.html</a></p>
<p><code>whereis</code>: 查找文件或者命令的源文件在哪里</p>
<p><code>type</code>: 查找shell命令的类型(bash shell内部命令)</p>
<p><code>which</code>: 查找shell命令所在的位置</p>
<p><code>locate</code>: 创建索引 搜索/var/lib/mlocate/mlocate.db</p>
<h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><p><code>vi/vim</code>: Vi(Vim)(其他编辑器Emacs,soffice,abiword,gnumeric)</p>
<p>hjkl 左下上右<br>i ESC :  !qw quit write  ！强制</p>
<p><a href>参考Linux基础命令总结3</a></p>
<p><code>vimtutor</code>: Vim帮助</p>
<h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p><code>man</code>: (manual) 详细描述内容</p>
<p><code>help</code>:</p>
<p><code>info</code>: </p>
<p>cmd –help 命令参数 –help 一般有简单描述介绍使用</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础命令 </tag>
            
            <tag> file </tag>
            
            <tag> directory </tag>
            
            <tag> tar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 基础之集合框架]]></title>
      <url>https://muxiaobai.github.io/2016/06/25/Thinking-in-java-%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h2 id="Thinking-in-java-基础之集合框架"><a href="#Thinking-in-java-基础之集合框架" class="headerlink" title="Thinking in java 基础之集合框架"></a>Thinking in java 基础之集合框架</h2><p>####大家都知道我的习惯，先上图说话。<br><img src="/2016/06/25/Thinking-in-java-基础之集合框架/201606251033.gif" alt="集合框架"><br><a id="more"></a></p>
<h2 id="集合简介-容器"><a href="#集合简介-容器" class="headerlink" title="集合简介(容器)"></a>集合简介(容器)</h2><p>把具有相同性质的一类东西，汇聚成一个整体，就可以称为集合，例如这里有20个苹果，我们把每一个苹果当成一个东西（一个对象），然后我们借用袋子把这20个苹果装起来，而这个袋子就是集合（也叫容器）。然后呢，我们按照不同的方法装，就是不同的框架。</p>
<blockquote>
<p>换句话说，集合框架就是数据结构的实现。</p>
</blockquote>
<h2 id="链表-数据结构"><a href="#链表-数据结构" class="headerlink" title="链表(数据结构)"></a>链表(数据结构)</h2><h3 id="LinkedList的结构"><a href="#LinkedList的结构" class="headerlink" title="LinkedList的结构"></a>LinkedList的结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">public class chain &#123;</span><br><span class="line">private class Data&#123;</span><br><span class="line">    private Object obj;</span><br><span class="line">    private Data next = null;</span><br><span class="line">    Data(Object obj)&#123;</span><br><span class="line">        this.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">private Data first = null;</span><br><span class="line">public void insertFirst(Object obj)&#123;</span><br><span class="line">    Data data = new Data(obj);</span><br><span class="line">    data.next = first;</span><br><span class="line">    first = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Object deleteFirst() throws Exception&#123;  </span><br><span class="line">    if(first == null)</span><br><span class="line">        throw new Exception(&quot;empty!&quot;);  </span><br><span class="line">    Data temp = first;</span><br><span class="line">    first = first.next;</span><br><span class="line">    return temp.obj;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public Object find(Object obj) throws Exception&#123;  </span><br><span class="line">    if(first == null)  </span><br><span class="line">        throw new Exception(&quot;LinkedList is empty!&quot;);  </span><br><span class="line">    Data cur = first;  </span><br><span class="line">    while(cur != null)&#123;  </span><br><span class="line">        if(cur.obj.equals(obj))&#123;  </span><br><span class="line">            return cur.obj;  </span><br><span class="line">        &#125;  </span><br><span class="line">        cur = cur.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return null;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public void remove(Object obj) throws Exception&#123;  </span><br><span class="line">    if(first == null)  </span><br><span class="line">        throw new Exception(&quot;LinkedList is empty!&quot;);  </span><br><span class="line">    if(first.obj.equals(obj))&#123;  </span><br><span class="line">        first = first.next;  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">        Data pre = first;  </span><br><span class="line">        Data cur = first.next;  </span><br><span class="line">        while(cur != null)&#123;  </span><br><span class="line">            if(cur.obj.equals(obj))&#123;  </span><br><span class="line">                pre.next = cur.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">            pre = cur;  </span><br><span class="line">            cur = cur.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public boolean isEmpty()&#123;  </span><br><span class="line">    return (first == null);  </span><br><span class="line">&#125;</span><br><span class="line">public void display()&#123;</span><br><span class="line">    if(first == null)</span><br><span class="line">        System.out.println(&quot;empty&quot;);</span><br><span class="line">    Data cur = first;</span><br><span class="line">    while(cur != null)&#123;</span><br><span class="line">        System.out.print(cur.obj.toString() + &quot; -&gt; &quot;);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    chain ll = new chain();</span><br><span class="line">    ll.insertFirst(4);</span><br><span class="line">    ll.insertFirst(3);</span><br><span class="line">    ll.insertFirst(2);</span><br><span class="line">    ll.insertFirst(1);</span><br><span class="line">    ll.display();</span><br><span class="line">    ll.deleteFirst();</span><br><span class="line">    ll.display();</span><br><span class="line">    ll.remove(3);</span><br><span class="line">    ll.display();</span><br><span class="line">    System.out.println(ll.find(1));</span><br><span class="line">    System.out.println(ll.find(4));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>保存输入的顺序，而且可以重复的存储相关元素。</p>
<h4 id="ArrayList-随机访问-数组线性表"><a href="#ArrayList-随机访问-数组线性表" class="headerlink" title="ArrayList(随机访问)(数组线性表)"></a>ArrayList(随机访问)(数组线性表)</h4><p>ArrayList数组线性表的特点为:类似数组的形式进行存储，因此它的随机访问速度极快。<br>ArrayList数组线性表的缺点为:不适合于在线性表中间需要频繁进行插入和删除操作。因为每次插入和删除都需要移动数组中的元素。可以这样理解ArrayList就是基于数组的一个线性表，只不过数组的长度可以动态改变而已。ArrayList线程不安全，</p>
<h4 id="LinkedList-频繁删除添加-链式线性表"><a href="#LinkedList-频繁删除添加-链式线性表" class="headerlink" title="LinkedList(频繁删除添加)(链式线性表)"></a>LinkedList(频繁删除添加)(链式线性表)</h4><p>您要频繁的从列表的中间位置添加和除去元素，而只要顺序的访问列表元素，那么，LinkedList 实现更好。<br>可以这样理解LinkedList就是一种双向循环链表的链式线性表，只不过存储的结构使用的是链式表而已。</p>
<h4 id="Vector-向量"><a href="#Vector-向量" class="headerlink" title="Vector(向量)"></a>Vector(向量)</h4><p>如果一定在多线程使用List的，您可以使用Vector，因为Vector和ArrayList基本一致，区别在于Vector中的绝大部分方法都使用了同步关键字修饰，这样在多线程的情况下不会出现并发错误哦，还有就是它们的扩容方案不同，ArrayList是通过原始容量*3/2+1,而Vector是允许设置默认的增长长度，Vector的默认扩容方式为原来的2倍。<br>切记Vector是ArrayList的多线程的一个替代品。</p>
<h4 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack(栈)"></a>Stack(栈)</h4><p>在各种List中，最好的做法是以ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList();Vector总是比ArrayList慢，所以要尽量避免使用。使用最多的是ArrayList。</p>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set子接口: 无序，不允许有重复的元素,最多允许有一个null元素对象。</p>
<h4 id="HashSet-没有顺序"><a href="#HashSet-没有顺序" class="headerlink" title="HashSet(没有顺序)"></a>HashSet(没有顺序)</h4><p>您会使用 HashSet 存储重复自由的集合。考虑到效率，添加到 HashSet 的对象需要采用恰当分配哈希码的方式来实现hashCode()方法。虽然大多数系统类覆盖了Object中缺省的hashCode()和equals()实现，但创建您自己的要添加到HashSet的类时，别忘了覆盖 hashCode()和equals()。</p>
<h4 id="LinkedHashSet-添加顺序会被记录"><a href="#LinkedHashSet-添加顺序会被记录" class="headerlink" title="LinkedHashSet(添加顺序会被记录)"></a>LinkedHashSet(添加顺序会被记录)</h4><p>如果想跟踪添加给HashSet的元素的顺序，LinkedHashSet实现会有帮助。 按照元素的插入顺序来访问各个元素。它提供了一个可以快速访问各个元素的有序集合。</p>
<h4 id="TreeSet-按照比较器排序"><a href="#TreeSet-按照比较器排序" class="headerlink" title="TreeSet(按照比较器排序)"></a>TreeSet(按照比较器排序)</h4><p>当您要从集合中以有序的方式插入和抽取元素时，TreeSet实现会有用处。<br>为了能顺利进行。添加到TreeSet的元素必须是可排序的。<br>在各种Set中，HashSet通常优于TreeSet（插入、查找）。只有当需要产生一个经过排序的序列，才用TreeSet。<br>TreeSet存在的唯一理由：能够维护其内元素的排序状态。</p>
<h3 id="Queue-队列"><a href="#Queue-队列" class="headerlink" title="Queue(队列)"></a>Queue(队列)</h3><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map接口用于维护键/值对(key/value pairs)。该接口描述了从不重复的键到值的映射。</p>
<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>在Map 中插入、删除和定位元素，HashMap 是最好的选择。</p>
<h4 id="LinkedHashMap-包含插入顺序"><a href="#LinkedHashMap-包含插入顺序" class="headerlink" title="LinkedHashMap(包含插入顺序)"></a>LinkedHashMap(包含插入顺序)</h4><p>以插入顺序将关键字/值对添加进链接哈希映像中</p>
<h4 id="TreeMap-自定义顺序"><a href="#TreeMap-自定义顺序" class="headerlink" title="TreeMap(自定义顺序)"></a>TreeMap(自定义顺序)</h4><p>但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。</p>
<h4 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h4><p>它使用WeakReference(弱引用)来存放哈希表关键字。使用这种方式时，当映射的键在 WeakHashMap 的外部不再被引用时，垃圾收集器会将它回收，但它将把到达该对象的弱引用纳入一个队列。WeakHashMap的运行将定期检查该队列，以便找出新到达的 弱应用。当一个弱引用到达该队列时，就表示关键字不再被任何人使用，并且已经被收集起来。然后WeakHashMap便删除相关的映射。</p>
<h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>在各种Map中HashMap用于快速查找，使用的最多。</p>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>我们都知道，由于Array(数组)通常意义上讲只是一个单纯的线性序列，又基于Native(本地方法)，凭此它的效率历来便号称Java中最高。所以通常我们也都承认Java中效率最高的存储方式就是使用数组。但是，由于数组初始化后大小固定，索引不能超出下标，缺少灵活的扩展功能等原因，使得很多人放弃了数组的使用， 转而使用Collection,List,Map,Set等接口处理集合操作。</p>
<blockquote>
<p>当元素个数固定，用Array，因为Array效率是最高的。</p>
</blockquote>
<p>比较器(Comparator和Comparable接口)<br>在“集合框架”中有两种比较接口：Comparable接口和Comparator接口。像String和Integer<br>等Java内建类实现 Comparable接口以提供一定排序方式，但这样只能实现该接口一次。对于那些没有实现Comparable接口的类、或者自定义的类，您可以通过 Comparator接口来定义您自己的比较方式。</p>
<h3 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h3><p>在java.lang包中，Comparable接口适用于一个类有自然顺序的时候。假定对象集合是同一类型，该接口允许您把集合排序成自然顺序。</p>
<p>(1) int compareTo(Object o): 比较当前实例对象与对象o，如果位于对象o之前，返回负<br>值，如果两个对象在排序中位置相同，则返回0，如果位于对象o后面，则返回正值<br>在 Java 2 SDK版本1.4中有二十四个类实现Comparable接口。下表展示了8种基本类型的自然排序。<br>虽然一些类共享同一种自然排序，但只有相互可比的类才能排序。类排序 BigDecimal,BigInteger,Byte, Double, Float,Integer,Long,Short 按数字大小排序<br>Character 按 Unicode 值的数字大小排序<br>String 按字符串中字符 Unicode 值排序<br>利用Comparable接口创建您自己的类的排序顺序，只是实现compareTo()方法的问题。通常就是依赖几个数据成员的自然排序。同时类也应该覆盖equals()和hashCode()以确保两个相等的对象返回同一个哈希码。</p>
<h3 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h3><p>若一个类不能用于实现java.lang.Comparable，或者您不喜欢缺省的Comparable行为并想提供自己的排序顺序(可能多种排序方式)，你可以实现Comparator接口，从而定义一个比较器。</p>
<p>(1)int compare(Object o1, Object o2): 对两个对象o1和o2进行比较，如果o1位于o2<br>的前面，则返回负值，如果在排序顺序中认为o1和o2是相同的，返回0，如果o1位于o2的<br>后面，则返回正值“与Comparable相似，0返回值不表示元素相等。一个0返回值只是表示两个对象排在同一位置。由Comparator用户决定如何处理。如果两个不相等的元素比较的结果为零，您首先应该确信那就是您要的结果，然后记录行为。”</p>
<p>(2)boolean equals(Object obj): 指示对象obj是否和比较器相等。<br>“该方法覆写Object的equals()方法，检查的是Comparator实现的等同性，不是处于比较<br>状态下的对象。”</p>
<h2 id="Iterator-迭代模式"><a href="#Iterator-迭代模式" class="headerlink" title="Iterator(迭代模式)"></a>Iterator(迭代模式)</h2><p>调用iterator()方法，返回Iterator<t>对象，Iterator<t>对象有hasnext();next();方法提供循环</t></t></p>
<p>Collection接口有iterator()方法。Map.entrySet()返回Set&lt;Map.Entry&lt;K,V&gt;&gt;,然后调用Collection对应的iterator();方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator = Collection.iterator();</span><br><span class="line">while(iterator.hasNext()) &#123;</span><br><span class="line">Object iter=iterator.next();</span><br><span class="line">System.out.println(&quot;object=&quot; +object);</span><br><span class="line">&#125;</span><br><span class="line">Iterator iterator = Map.entrySet().iterator();</span><br><span class="line">while (iterator .hasNext()) &#123;</span><br><span class="line">Map.Entry entry = (Map.Entry) iterator .next();</span><br><span class="line">Object key = entry.getKey();</span><br><span class="line">Object value = entry.getValue();</span><br><span class="line">System.out.println(&quot;key=&quot; + key + &quot; value=&quot; + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="工具类Collections-and-Arrays-静态方法"><a href="#工具类Collections-and-Arrays-静态方法" class="headerlink" title="工具类Collections and Arrays(静态方法)"></a>工具类Collections and Arrays(静态方法)</h2><h3 id="Collections-常用方法"><a href="#Collections-常用方法" class="headerlink" title="Collections(常用方法)"></a>Collections(常用方法)</h3><p>addAll添加</p>
<p>shuffle混排</p>
<p>binarySearch二分查搜索法</p>
<p>reverse反转</p>
<p>fill 替换</p>
<p>max/min 找出最大/最小(根据默认的自然排序或者自定义排序规则)</p>
<p>sort排序(根据默认的自然排序或者自定义排序规则)</p>
<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>binarySearch二分搜索法</p>
<p>sort排序</p>
<p>copyOf复制</p>
<p>equals判断相等</p>
<p>fill指定分配、替换</p>
<p>toString 返货字符串</p>
<p>hashCode哈希吗</p>
<p>详情参考<a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" target="_blank" rel="noopener">中文API</a>  <a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">oracle官网API</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在实际工作中，若用到集合框架，最常用的是ArrayList,HashSet,HashMap。这三者也是首先考虑的。而且，因为TreeXXX继承SortedXXX，所以用TreeXXX都是排序的。</p>
<h2 id="参看文献"><a href="#参看文献" class="headerlink" title="参看文献"></a>参看文献</h2><p><a href="http://www.cnblogs.com/xiohao/p/4309462.html" target="_blank" rel="noopener">java集合框架的讲解</a><br><a href="http://blog.csdn.net/kerryfish/article/details/24043099" target="_blank" rel="noopener">JAVA中关于链表的操作和基本算法</a><br><a href="http://doc.okbase.net/DavidIsOK/archive/94766.html" target="_blank" rel="noopener">java的集合框架最全详解（图）</a><br><a href="http://blog.csdn.net/zsw101259/article/details/7570033" target="_blank" rel="noopener">集合_java集合框架</a><br>《Thinking in java》<br>《算法与数据结构》——-java语言描述 清华大学出版社</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
            <tag> Map </tag>
            
            <tag> Collection </tag>
            
            <tag> Iterator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thinking in java 基础之I/O]]></title>
      <url>https://muxiaobai.github.io/2016/06/25/Thinking-in-java-%E5%9F%BA%E7%A1%80%E4%B9%8BI-O/</url>
      <content type="html"><![CDATA[<h2 id="Thinking-in-java基础之-I-O"><a href="#Thinking-in-java基础之-I-O" class="headerlink" title="Thinking in java基础之 I/O"></a>Thinking in java基础之 I/O</h2><h4 id="首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼"><a href="#首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼" class="headerlink" title="首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼"></a>首先给图了解大概内容，当你忘记一些类的继承关系的时候，可以回过头来看一眼</h4><p><img src="/2016/06/25/Thinking-in-java-基础之I-O/201606250959.jpg" alt="I/O类图"><br><a id="more"></a><br>java所有的IO操作都在java.io包之中进行定义，而且整个java.io包实际上就是五个类和一个接口：</p>
<p> • 五个类：File、InputStream、OutputStream、Reader、Wirter</p>
<p> • 一个接口：Serializable</p>
<hr>
<h3 id="简介字符流和字节流，输入流和输出流"><a href="#简介字符流和字节流，输入流和输出流" class="headerlink" title="简介字符流和字节流，输入流和输出流"></a>简介字符流和字节流，输入流和输出流</h3><p>JDK所提供的所有流类位于java.io包中，都分别继承自以下四种抽象流类。</p>
<ul>
<li>InputStream：继承自InputStream的流都是用于向程序中输入数据的，且数据单位都是字节（8位）。</li>
</ul>
<ul>
<li><p>OutputStream：继承自OutputStream的流都是程序用于向外输出数据的，且数据单位都是字节（8位）。</p>
</li>
<li><p>Reader：继承自Reader的流都是用于向程序中输入数据的，且数据单位都是字符（16位）。</p>
</li>
<li><p>Writer：继承自Writer的流都是程序用于向外输出数据的，且数据单位都是字符（16位）。</p>
</li>
</ul>
<p>【输入和输出】是相对于【程序】而言的。以main()为例，main()就相当于程序，当使用输入(InputStream/Reader输入对应程序就是读取数据，当然是Reader)时，是从外界读取数据到main()中，【举例代码】。而输出则是，程序产生的结果输出(OutputStream/Writer输出就是写出，对应Writer)，可以输出到显示屏，控制台，文件系统等。<br>【字节流和字符流】大部分文件（图片，视频，音乐等）都是使用字节存放的数据，因此，字节也是用的十分广泛的，但是字节在处理中文的时候，就没有字符流具有优势，因为中文字对应两个字节，而字符也对应两个字节，刚好能对应上，因此，如果有中文处理的时候，优先考虑使用字符流。<br>主要的区别：<br>字节流没有使用到缓冲区，而字符流使用了；<br>处理各种数据都可以通过字节流完成，而在处理中文的时候使用字符流会更好。<br>字节流和字符流的转换：（上代码）</p>
<p>将字节输出流变为字符输出流 OutputStream→ Writer ：用OutputStreamWriter；<br>将字节输入流变为字符输入流InputStream → Reader：用 InputStreamReader。</p>
<h3 id="文件操作-文件系统（File）（读文件，写文件-上代码）"><a href="#文件操作-文件系统（File）（读文件，写文件-上代码）" class="headerlink" title="文件操作/文件系统（File）（读文件，写文件 上代码）"></a>文件操作/文件系统（File）（读文件，写文件 上代码）</h3><p>在整个java.io包之中，File类是唯一的一个与文件本身操作有关的类，所谓的文件本身指的是：文件的创建、删除、重命名、取得文件大小、修改日期。但是不包括文件内容，切记。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package IO;</span><br><span class="line">import java.io.File;</span><br><span class="line">public class FileDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String dirname = &quot;E:&quot;+File.separator+&quot;Demo&quot;;</span><br><span class="line">          File f1 = new File(dirname);</span><br><span class="line">          if (f1.isDirectory()) &#123;</span><br><span class="line">             System.out.println( &quot;Directory of &quot; + dirname);</span><br><span class="line">             String s[] = f1.list();</span><br><span class="line">             for (int i=0; i &lt; s.length; i++) &#123;</span><br><span class="line">                File f = new File(dirname + &quot;/&quot; + s[i]);</span><br><span class="line">                if (f.isDirectory()) &#123;</span><br><span class="line">                   System.out.println(s[i] + &quot; is a directory&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                   System.out.println(s[i] + &quot; is a file&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">             System.out.println(dirname + &quot; is not a directory&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Directory of E:\Demo</p>
<p>AndroidDemo is a directory</p>
<p>eclipseDemo is a directory</p>
<p>GitHubDemo is a directory</p>
<p>我的电脑【E：/Demo】下面有三个文件目录，所以显示为directory。下面给出File类的方法File方法</p>
<p><img src="/2016/06/25/Thinking-in-java-基础之I-O/20160625095901.png" alt="I/O类图"></p>
<h4 id="文件读取和文件输出"><a href="#文件读取和文件输出" class="headerlink" title="文件读取和文件输出"></a>文件读取和文件输出</h4><ul>
<li><p>文件输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream</span><br><span class="line"></span><br><span class="line">package IO;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line"></span><br><span class="line">public class FileOutputStreamDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class="line"></span><br><span class="line">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class="line">if (!file.getParentFile().exists()) &#123; // 父路径不存在</span><br><span class="line">file.getParentFile().mkdirs(); // 创建父路径</span><br><span class="line">&#125;</span><br><span class="line">OutputStream output = new FileOutputStream(file); // 通过子类实例化父类</span><br><span class="line">String outputdata = &quot;Hello World&quot;;// 要输出的数据</span><br><span class="line">output.write(outputdata.getBytes()); // 输出数据，要将数据变为字节数组输出</span><br><span class="line">output.close(); // 关闭资源</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>FileWriter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package IO;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.Writer;</span><br><span class="line"></span><br><span class="line">public class FileWriterDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class="line"></span><br><span class="line">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class="line">if (!file.getParentFile().exists()) &#123;</span><br><span class="line">file.getParentFile().mkdirs();// 创建父目录</span><br><span class="line">&#125;</span><br><span class="line">Writer out = new FileWriter(file);</span><br><span class="line">String data = &quot;Hello World&quot;;</span><br><span class="line">out.write(data) ; // 直接输出字符串</span><br><span class="line">out.close() ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件输入</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> - FileInputStream</span><br><span class="line">package IO;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">public class FileInputStreamDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class="line"></span><br><span class="line">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class="line">if (file.exists()) &#123; // 文件存在则可以读取</span><br><span class="line">InputStream input = new FileInputStream(file) ;</span><br><span class="line">byte data[] = new byte[1024]; // 假设要读的长度是1024</span><br><span class="line">int foot = 0; // 操作data数组的脚标</span><br><span class="line">int temp = 0;</span><br><span class="line">// 第一步：temp = input.read()，读取一个单个字节，并且将内容给temp变量</span><br><span class="line">// 第二步：temp != -1，将接收到的temp的数值判断是否为-1，</span><br><span class="line">//如果为-1则表示退出循环，如果不是，则保存数据</span><br><span class="line">while ((temp = input.read()) != -1) &#123;</span><br><span class="line">data[foot++] = (byte) temp; // 保存读取进来的单个字节</span><br><span class="line">&#125;</span><br><span class="line">input.close();</span><br><span class="line">System.out.println(&quot;数据:【&quot; + new String(data, 0, foot) + &quot;】&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">System.out.println(&quot;文件不存在&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>FileReader</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package IO;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.Reader;</span><br><span class="line">public class FileReaderDemo &#123;</span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">File file = new File(&quot;E:&quot; + File.separator + &quot;hellodemo&quot;</span><br><span class="line"></span><br><span class="line">File.separator + &quot;test.txt&quot;); // 定义文件路径</span><br><span class="line">if (file.exists()) &#123;</span><br><span class="line">Reader in = new FileReader(file); // 字符输入流</span><br><span class="line">char data[] = new char[1024]; // 开辟数组</span><br><span class="line">int len = in.read(data); // 读取数据</span><br><span class="line">System.out.println(&quot;数据:【&quot; + new String(data, 0, len) + &quot;】&quot;);</span><br><span class="line">in.close() ;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">System.out.println(&quot;文件不存在&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 在工作中,IO的读取和输出是在所难免的。</p>
<blockquote>
<p>一定要好好掌握。</p>
</blockquote>
<h3 id="打印流（输出）（PrintWriter字符）（PrintStream字节）"><a href="#打印流（输出）（PrintWriter字符）（PrintStream字节）" class="headerlink" title="打印流（输出）（PrintWriter字符）（PrintStream字节）"></a>打印流（输出）（PrintWriter字符）（PrintStream字节）</h3><p>System（输出err/out可以使用PrintStream的 print（）等方法  ，输入in可以使用InputStream的read()等方法）</p>
<p>———System.out →PrintStream </p>
<p>———System.err →PrintStream  </p>
<p>———System.in →InputStream （结合Scanner使用）</p>
<blockquote>
<p>out/err/in由系统进行初始化【static】可以直接使用。</p>
</blockquote>
<h3 id="序列化（Serializable）"><a href="#序列化（Serializable）" class="headerlink" title="序列化（Serializable）"></a>序列化（Serializable）</h3><p>作用 ：对象序列化指的是可以将内存中的对象数据（对象属性），进行二进制数据保存，或者传输的一种操作，而如果要想完成这样的二进制操作，那么对象所在的类就必须实java.io.Serializable接口。</p>
<p>需要的两个IO类ObjectInputStream（反序列化）、ObjectOutputStream（序列化）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package IO;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import sun.print.resources.serviceui;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="line">class Book implements Serializable&#123;</span><br><span class="line">    private String title;</span><br><span class="line">    private Double price;</span><br><span class="line">    private  transient String content;//瞬时 不会被序列化</span><br><span class="line">    public void setTitle(String title) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPrice(Double price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    public Double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setContent(String content) &#123;</span><br><span class="line">        this.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getContent() &#123;</span><br><span class="line">        return content;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Book [title=&quot; + title + &quot;, price=&quot; + price + &quot;, content=&quot; + content + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class SerializableDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        ser();</span><br><span class="line">        //dser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    /*</span><br><span class="line">     *  序列化</span><br><span class="line">     */</span><br><span class="line">    public static void ser() throws FileNotFoundException, IOException&#123;</span><br><span class="line">         Book book = new Book();</span><br><span class="line">         book.setPrice(12.8);</span><br><span class="line">         book.setTitle(&quot;admin&quot;);</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(</span><br><span class="line">                new FileOutputStream(new File(&quot;E:&quot; + File.separator + &quot;person.ser&quot;)));</span><br><span class="line">        oos.writeObject(book); </span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    /*</span><br><span class="line">     * 反序列化</span><br><span class="line">     */</span><br><span class="line">    public  static void dser() throws FileNotFoundException, IOException, ClassNotFoundException&#123;</span><br><span class="line">          ObjectInputStream ois = new ObjectInputStream(new FileInputStream(</span><br><span class="line">                    new File(&quot;E:&quot; + File.separator + &quot;person.ser&quot;)));</span><br><span class="line">            Book per = (Book) ois.readObject();  </span><br><span class="line">            ois.close();</span><br><span class="line">            System.out.println(per);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>transient  关键字修饰的属性不会被序列化</p>
</blockquote>
<h3 id="I-O的设计模式（装饰者模式-Decorator-Pattern）"><a href="#I-O的设计模式（装饰者模式-Decorator-Pattern）" class="headerlink" title="I/O的设计模式（装饰者模式 Decorator Pattern）"></a>I/O的设计模式（装饰者模式 Decorator Pattern）</h3><blockquote>
<p>用一句话表述：动态地将责任附加到对象上。</p>
</blockquote>
<p>是用Decorator去装饰Component、因为实现了同一接口或者抽象类、Decorator同样可以装饰Decorator！通过这种模式我们也可以看出一个设计模式的设计原则：</p>
<blockquote>
<p>Classes should be open for extension, but closed for modification!</p>
</blockquote>
<p>Decorator Pattern：Attaches additional responsibility to anobject dynamically. Decorators provide a flexible alternative to subclassingfor extending functionality.</p>
<p>可以参考<br><a href="http://blog.csdn.net/crave_shy/article/details/21223029" target="_blank" rel="noopener">装饰者设计模式</a></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://study.163.com/course/courseMain.htm?courseId=1455026" target="_blank" rel="noopener">网易云课堂李兴华java8</a>  <a href="http://study.163.com/course/introduction.htm?courseId=342010#/courseDetail" target="_blank" rel="noopener">马士兵java</a> 《Thinking in Java》《Head First Design Patterns》</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> I/O </tag>
            
            <tag> File </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 下安装SVN服务器]]></title>
      <url>https://muxiaobai.github.io/2016/06/19/Linux-%E4%B8%8B%E5%AE%89%E8%A3%85SVN%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="1、安装步骤如下："><a href="#1、安装步骤如下：" class="headerlink" title="1、安装步骤如下："></a>1、安装步骤如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install subversion</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2、输入rpm-ql-subversion查看安装位置，如下图："><a href="#2、输入rpm-ql-subversion查看安装位置，如下图：" class="headerlink" title="2、输入rpm -ql subversion查看安装位置，如下图："></a>2、输入rpm -ql subversion查看安装位置，如下图：</h3><p>我们知道svn在bin目录下生成了几个二进制文件。<br><img src="/2016/06/19/Linux-下安装SVN服务器/201606192134.jpg" alt="文件目录"><br>输入 svn –help可以查看svn的使用方法，如下图。<br><img src="/2016/06/19/Linux-下安装SVN服务器/201606192138.jpg" alt="svn方法"></p>
<h3 id="3、创建svn版本库目录"><a href="#3、创建svn版本库目录" class="headerlink" title="3、创建svn版本库目录"></a>3、创建svn版本库目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/svn/svnrepos</span><br></pre></td></tr></table></figure>
<h3 id="4、创建版本库"><a href="#4、创建版本库" class="headerlink" title="4、创建版本库"></a>4、创建版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin create /var/svn/svnrepos</span><br></pre></td></tr></table></figure>
<p>执行了这个命令之后会在/var/svn/svnrepos目录下生成如下这些文件<br><img src="/2016/06/19/Linux-下安装SVN服务器/201606192139.jpg" alt="版本目录"></p>
<h3 id="5、进入conf目录（该svn版本库配置文件）"><a href="#5、进入conf目录（该svn版本库配置文件）" class="headerlink" title="5、进入conf目录（该svn版本库配置文件）"></a>5、进入conf目录（该svn版本库配置文件）</h3><p>authz文件是权限控制文件<br>passwd是帐号密码文件<br>svnserve.conf SVN服务配置文件</p>
<h3 id="6、设置帐号密码"><a href="#6、设置帐号密码" class="headerlink" title="6、设置帐号密码"></a>6、设置帐号密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi passwd</span><br></pre></td></tr></table></figure>
<p>在[users]块中添加用户和密码，格式：帐号=密码，如zhang=zhang</p>
<h3 id="7、设置权限"><a href="#7、设置权限" class="headerlink" title="7、设置权限"></a>7、设置权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi authz</span><br></pre></td></tr></table></figure>
<p>在末尾添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[/]</span><br><span class="line">zhang=rw</span><br><span class="line">w=r</span><br></pre></td></tr></table></figure></p>
<p>意思是版本库的根目录zhang对其有读写权限，w只有读权限。</p>
<h3 id="8、修改svnserve-conf文件"><a href="#8、修改svnserve-conf文件" class="headerlink" title="8、修改svnserve.conf文件"></a>8、修改svnserve.conf文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi svnserve.conf（注意前面没有空格）</span><br></pre></td></tr></table></figure>
<p>打开下面的几个注释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anon-access = read #匿名用户可读</span><br><span class="line">auth-access = write #授权用户可写</span><br><span class="line">password-db = passwd #使用哪个文件作为账号文件</span><br><span class="line">authz-db = authz #使用哪个文件作为权限文件</span><br><span class="line">realm = /var/svn/svnrepos # 认证空间名，版本库所在目录</span><br></pre></td></tr></table></figure></p>
<h3 id="9、启动svn版本库"><a href="#9、启动svn版本库" class="headerlink" title="9、启动svn版本库"></a>9、启动svn版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r /var/svn/svnrepos</span><br></pre></td></tr></table></figure>
<h3 id="10、在windows上测试"><a href="#10、在windows上测试" class="headerlink" title="10、在windows上测试"></a>10、在windows上测试</h3><p>新建一个测试文件夹，在该文件夹下右键选择 SVN checkout如下图(要事先安装TortoiseSVN)：<br>填写SVN的地址，如下图：<br>输入密码，如下图：<br><img src="/2016/06/19/Linux-下安装SVN服务器/201606192140.jpg" alt="右键单击"></p>
<p><img src="/2016/06/19/Linux-下安装SVN服务器/201606192141.jpg" alt="填写SVN地址"></p>
<h1 id="svn-日志文件显示时间为1970-01-01-No-data-———-最终解决办法"><a href="#svn-日志文件显示时间为1970-01-01-No-data-———-最终解决办法" class="headerlink" title="svn 日志文件显示时间为1970-01-01 No data ———-最终解决办法"></a>svn 日志文件显示时间为1970-01-01 No data ———-最终解决办法</h1><p>此问题主要出现在svnserve文件中的anon-access访问权限的设置问题上。</p>
<h5 id="如果anon-access-none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，"><a href="#如果anon-access-none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，" class="headerlink" title="如果anon-access = none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，"></a>如果anon-access = none时，按照文档中注释：禁止所有匿名访问，也就是说如果不在authz-db中开放访问的用户，是不会允许读写版本日志的，故系统对日志的读写也纳入禁止访问范围，</h5><h5 id="所以在查看日志时，出现时间日期显示为1970-01-01，-日志信息显示no-data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为-anon-access-read，只读模式。这样的话，日志文件即可显示正常。"><a href="#所以在查看日志时，出现时间日期显示为1970-01-01，-日志信息显示no-data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为-anon-access-read，只读模式。这样的话，日志文件即可显示正常。" class="headerlink" title="所以在查看日志时，出现时间日期显示为1970-01-01， 日志信息显示no data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为 anon-access = read，只读模式。这样的话，日志文件即可显示正常。"></a>所以在查看日志时，出现时间日期显示为1970-01-01， 日志信息显示no data。也就是这个原因。所以在设置svnserve中的访问权限时，请设置为 anon-access = read，只读模式。这样的话，日志文件即可显示正常。</h5><h2 id="但是，实践证明anon-access-none才是正确的。"><a href="#但是，实践证明anon-access-none才是正确的。" class="headerlink" title="但是，实践证明anon-access = none才是正确的。"></a>但是，实践证明<code>anon-access = none</code>才是正确的。</h2>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> svn </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub + Hexo 构建我的博客]]></title>
      <url>https://muxiaobai.github.io/2016/06/17/GitHub%20Hexo/</url>
      <content type="html"><![CDATA[<h1 id="有了Hexo后，我的文章就准备全部迁移至Github了。"><a href="#有了Hexo后，我的文章就准备全部迁移至Github了。" class="headerlink" title="有了Hexo后，我的文章就准备全部迁移至Github了。"></a>有了Hexo后，我的文章就准备全部迁移至Github了。</h1><h2 id="1-本机搭建"><a href="#1-本机搭建" class="headerlink" title="1.本机搭建"></a>1.本机搭建</h2><h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><p> git node npm</p>
<p> Github账户 username.github.io 仓库</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>  Hexo安装，要用全局安装，加-g参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~</span><br><span class="line">$ npm install –g hexo</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="查看hexo的版本"><a href="#查看hexo的版本" class="headerlink" title="查看hexo的版本"></a>查看hexo的版本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~</span><br><span class="line">$ hexo -v</span><br><span class="line">hexo-cli: 1.0.2</span><br><span class="line">os: Windows_NT 6.3.9600 win32 x64</span><br><span class="line">http_parser: 2.5.2</span><br><span class="line">node: 4.4.5</span><br><span class="line">v8: 4.5.103.35</span><br><span class="line">uv: 1.8.0</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 56.1</span><br><span class="line">modules: 46</span><br><span class="line">openssl: 1.0.2h</span><br></pre></td></tr></table></figure>
<p>hexo 帮助命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~</span><br><span class="line">$ hexo help</span><br><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  clean     Removed generated files and cache.</span><br><span class="line">  config    Get or set configurations.</span><br><span class="line">  deploy    Deploy your website.</span><br><span class="line">  generate  Generate static files.</span><br><span class="line">  help      Get help on a command.</span><br><span class="line">  init      Create a new Hexo folder.</span><br><span class="line">  list      List the information of the site</span><br><span class="line">  migrate   Migrate your site from other system to Hexo.</span><br><span class="line">  new       Create a new post.</span><br><span class="line">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class="line">  render    Render files with renderer plugins.</span><br><span class="line">  server    Start the server.</span><br><span class="line">  version   Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages in the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class="line">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>
<p>命令行解释：</p>
<ul>
<li>help 查看帮助信息</li>
<li>init 创建一个hexo项目</li>
<li>migrate 从其他系统向hexo迁移</li>
<li>version 查看hexo的版本</li>
<li>–config参数，指定配置文件，代替默认的_config.yml</li>
<li>–debug参数，调试模式，输出所有日志信息</li>
<li>–safe参数，安全模式，禁用所有的插件和脚本</li>
<li>–silent参数，无日志输出模式</li>
</ul>
<h3 id="安装好后，我们就可以使用Hexo创建项目了。"><a href="#安装好后，我们就可以使用Hexo创建项目了。" class="headerlink" title="安装好后，我们就可以使用Hexo创建项目了。"></a>安装好后，我们就可以使用Hexo创建项目了。</h3><h5 id="新建文件夹Hexo"><a href="#新建文件夹Hexo" class="headerlink" title="新建文件夹Hexo"></a>新建文件夹Hexo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~</span><br><span class="line">$ mkdir Hexo</span><br><span class="line">$ cd Hexo</span><br></pre></td></tr></table></figure>
<h5 id="初始化进入目录。"><a href="#初始化进入目录。" class="headerlink" title="初始化进入目录。"></a>初始化进入目录。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~/Hexo</span><br><span class="line">$ hexo init</span><br><span class="line">INFO  Cloning hexo-starter to D:\hexo</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>
<h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~/Hexo</span><br><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>这时端口4000被打开了，我们能过浏览器打开地址，<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 。<br>你可以按Ctrl+C 停止Server。</p>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~/Hexo</span><br><span class="line">$ hexo new &apos;My&apos;</span><br><span class="line">INFO  Created: ~\Hexo\source\_posts\My.md</span><br></pre></td></tr></table></figure>
<p>刷新<a href="http://localhost:4000/，可以发现已生成了一篇新文章" target="_blank" rel="noopener">http://localhost:4000/，可以发现已生成了一篇新文章</a> “My”。</p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><h5 id="执行hexo-generate下面的命令，将markdown文件生成静态网页。"><a href="#执行hexo-generate下面的命令，将markdown文件生成静态网页。" class="headerlink" title="执行hexo generate下面的命令，将markdown文件生成静态网页。"></a>执行<code>hexo generate</code>下面的命令，将markdown文件生成静态网页。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~/Hexo</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>该命令执行完后，会在 C:\Users\zhang\Hexo\public 目录下生成一系列html，css等文件。</p>
<p>到此已经搭建一个个人博客，但是网站都是给别人看的，因此需要发布，我们可以借用Github来部署我们的网站。</p>
<h2 id="2-部署到Github"><a href="#2-部署到Github" class="headerlink" title="2.部署到Github"></a>2.部署到Github</h2><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>部署到Github前需要配置_config.yml文件，首先找到下面的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br></pre></td></tr></table></figure>
<p>然后将它们修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/muxiaobai/muxiaobai.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<h5 id="执行hexo-deploy发布网站"><a href="#执行hexo-deploy发布网站" class="headerlink" title="执行hexo deploy发布网站"></a>执行<code>hexo deploy</code>发布网站</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhang@admin MINGW64 ~/Hexo</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>NOTE1:</p>
<p>Repository：<br>SSH形式的url（<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:muxiaobai/muxiaobai.github.io.git ），<br>在SSH下，上传错误，于是就用了HTTPS形式</p>
<p>HTTPS形式的url（<a href="https://github.com/muxiaobai/muxiaobai.github.io.git" target="_blank" rel="noopener">https://github.com/muxiaobai/muxiaobai.github.io.git</a> ），<br>会让你输入用户名,密码.</p>
<p>NOTE2：</p>
<p>如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>当部署完成后，在浏览器中打开<a href="https://muxiaobai.github.io/（https://muxiaobai.github.io/）">https://muxiaobai.github.io/（https://muxiaobai.github.io/）</a> ，正常显示网页，表明部署成功。</p>
<h3 id="总结：部署步骤"><a href="#总结：部署步骤" class="headerlink" title="总结：部署步骤"></a>总结：部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>
<p>hexo clean</p>
<p>hexo generate</p>
<p>hexo deploy</p>
]]></content>
      
        <categories>
            
            <category> 搭建网站 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
